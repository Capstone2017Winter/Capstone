
Webserver.elf:     file format elf32-littlenios2
Webserver.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00050b44 memsz 0x0063a9f8 flags rwx
    LOAD off    0x00052000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00052020 vaddr 0x01884020 paddr 0x01884020 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01400000  01400000  00052000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01884020  01884020  00052020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0004a96c  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004308  0084a96c  0084a96c  0004b96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ed0  0084ec74  0084ec74  0004fc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          005ea18e  00850b44  00850b44  00051b44  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000521bc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001e70  00000000  00000000  000521e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000057ff  00000000  00000000  00054058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000898b5  00000000  00000000  00059857  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014bcb  00000000  00000000  000e310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0004849a  00000000  00000000  000f7cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00006b3c  00000000  00000000  00140174  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003f98  00000000  00000000  00146cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a86c  00000000  00000000  0014ac48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  001654b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d10  00000000  00000000  00165508  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00170cfc  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00170d02  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00170d0e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00170d0f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00170d10  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00170d14  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00170d18  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00170d1c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00170d27  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00170d32  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00170d3d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005d  00000000  00000000  00170d4a  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  00170da7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078d25  00000000  00000000  00175f82  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
01884020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
0084a96c l    d  .rodata	00000000 .rodata
0084ec74 l    d  .rwdata	00000000 .rwdata
00850b44 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800044 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_error_handler.c
00000000 l    df *ABS*	00000000 dm9000a.c
00800c84 l     F .text	00000054 dm9000a_rxReady
00800cd8 l     F .text	000003c4 dm9000a_isr
00000000 l    df *ABS*	00000000 http.c
0084b024 l     O .rodata	0000015f canned_http_response
0084b184 l     O .rodata	000000eb canned_response2
00850d60 l     O .bss	0000cb10 conn.5978
00000000 l    df *ABS*	00000000 network_utilities.c
00000000 l    df *ABS*	00000000 srec_flash.c
00000000 l    df *ABS*	00000000 web_server.c
00805024 l     F .text	000000d8 WSCreateTasks
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080527c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
0084bdd9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetpos.c
00000000 l    df *ABS*	00000000 findfp.c
0080577c l     F .text	00000058 std
00805888 l     F .text	00000008 __fp_lock
00805890 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0084ec8c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00807938 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00807c08 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00808a64 l     F .text	00000134 critical_factorization
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080952c l     F .text	00000058 __sprint_r
0084c77a l     O .rodata	00000010 blanks.3452
0084c76a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0084c792 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080cdf8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00850a18 l     O .rwdata	00000004 charset
0084c7d4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 mprec.c
0084c91c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
00810a00 l     F .text	00000048 match
0084f4b4 l     O .rwdata	00000014 fpi.1950
0084c938 l     O .rodata	00000028 tinytens
0084f4a0 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00812d5c l     F .text	00000024 htinit
00812de8 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00813650 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00814714 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008163e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008166c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00816818 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
00816940 l     F .text	000000dc alt_file_locked
00816ba4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00850a28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00850a34 l     O .rwdata	00000004 lockid
00850b9c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00850a38 l     O .rwdata	00000004 lockid
00850ba4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
008189b8 l     F .text	00000044 OS_InitMisc
008189fc l     F .text	0000006c OS_InitRdyList
00818b60 l     F .text	000000e0 OS_InitTCBList
008188dc l     F .text	000000dc OS_InitEventList
00818a68 l     F .text	0000007c OS_InitTaskIdle
00818ae4 l     F .text	0000007c OS_InitTaskStat
00818dd4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0081acf4 l     F .text	00000110 OS_FlagTaskRdy
0081aa4c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0084f4c8 l     O .rwdata	0000106c jtag_uart_0
00850534 l     O .rwdata	00000030 altera_ro_zipfs
00850564 l     O .rwdata	0000002c character_lcd_0
00850590 l     O .rwdata	00000054 video_pixel_buffer_dma_0
008505e4 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
008204e4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0082079c l     F .text	000002c4 altera_avalon_jtag_uart_irq
00820a60 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00821278 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_ro_zipfs.c
00821378 l     F .text	00000074 read_word
008213ec l     F .text	00000050 read_word_inc
0082143c l     F .text	00000048 read_half_word
00821484 l     F .text	00000050 read_half_word_inc
008214d4 l     F .text	00000118 check_file_header
00821718 l     F .text	000000a0 check_directory_table
008217b8 l     F .text	000000ac find_directory_entry
00821864 l     F .text	00000160 find_file_entry_by_name
008219c4 l     F .text	00000180 find_file_entry
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_iniche_close.c
00000000 l    df *ABS*	00000000 alt_iniche_dev.c
00000000 l    df *ABS*	00000000 alt_iniche_read.c
00000000 l    df *ABS*	00000000 alt_iniche_write.c
00000000 l    df *ABS*	00000000 ipnet.c
00000000 l    df *ABS*	00000000 ipstart.c
00850c0c l     O .bss	00000004 nclosers
0085d898 l     O .bss	0000003c closers
00000000 l    df *ABS*	00000000 igmp_cmn.c
00000000 l    df *ABS*	00000000 bsdsock.c
00000000 l    df *ABS*	00000000 cksum.c
00850abc l     O .rwdata	00000004 cksum_select
00000000 l    df *ABS*	00000000 in_utils.c
0085d8d4 l     O .bss	00000018 tistring
00000000 l    df *ABS*	00000000 netmain.c
00000000 l    df *ABS*	00000000 tk_crnos.c
00000000 l    df *ABS*	00000000 dhcpclnt.c
00828a98 l     F .text	000000cc dh_getlong
00000000 l    df *ABS*	00000000 dhcputil.c
00000000 l    df *ABS*	00000000 pktalloc.c
00000000 l    df *ABS*	00000000 q.c
00000000 l    df *ABS*	00000000 udp_open.c
0082a7c4 l       .text	00000000 done
0082a654 l       .text	00000000 asm1
0082a780 l       .text	00000000 loop0
0082a67c l       .text	00000000 loop
0082a79c l       .text	00000000 fold
00000000 l    df *ABS*	00000000 brdutils.c
00850c6c l     O .bss	00000004 kbd_init.3742
00850c78 l     O .bss	00000004 cpu_statusreg
00000000 l    df *ABS*	00000000 osportco.c
00000000 l    df *ABS*	00000000 targnios.c
00000000 l    df *ABS*	00000000 nptcp.c
00850cac l     O .bss	00000004 in_tcptick
00000000 l    df *ABS*	00000000 rawsock.c
00000000 l    df *ABS*	00000000 sockcall.c
0082eec8 l     F .text	00000098 sockargs
0082e104 l     F .text	000001fc t_getname
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 socket2.c
00000000 l    df *ABS*	00000000 soselect.c
00000000 l    df *ABS*	00000000 tcp_in.c
00000000 l    df *ABS*	00000000 tcp_out.c
008371fc l     F .text	000000e8 bld_options
00000000 l    df *ABS*	00000000 tcp_subr.c
00000000 l    df *ABS*	00000000 tcp_timr.c
00000000 l    df *ABS*	00000000 tcp_usr.c
00000000 l    df *ABS*	00000000 tcpport.c
00000000 l    df *ABS*	00000000 udpsock.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00839f58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00839fb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0083a098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0083a7c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_read.c
0083aa20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_write.c
0083ac18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 allports.c
00850cd8 l     O .bss	00000004 inside_pktdemux
00000000 l    df *ABS*	00000000 timeouts.c
0083b624 l     F .text	00000198 check_interval_timers
00850ce4 l     O .bss	00000004 numtimers
00000000 l    df *ABS*	00000000 tk_misc.c
00000000 l    df *ABS*	00000000 alt_iniche_fcntl.c
00000000 l    df *ABS*	00000000 et_arp.c
00850ce8 l     O .bss	00000004 arp_timer
00850d00 l     O .bss	00000004 cachetime
00000000 l    df *ABS*	00000000 iface.c
00000000 l    df *ABS*	00000000 ip.c
00850b2c l     O .rwdata	00000004 uid
00000000 l    df *ABS*	00000000 ip_reasm.c
00000000 l    df *ABS*	00000000 ipdemux.c
00000000 l    df *ABS*	00000000 ipmc.c
00000000 l    df *ABS*	00000000 ipport.c
00000000 l    df *ABS*	00000000 ipraw.c
00000000 l    df *ABS*	00000000 iproute.c
00000000 l    df *ABS*	00000000 udp.c
00850d30 l     O .bss	00000002 usocket
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 igmp2.c
00000000 l    df *ABS*	00000000 ipopt.c
00000000 l    df *ABS*	00000000 u_mctest.c
00850b34 l     O .rwdata	00000004 iCounter.4500
00000000 l    df *ABS*	00000000 dhcsetup.c
00000000 l    df *ABS*	00000000 memdev.c
00000000 l    df *ABS*	00000000 parseip.c
0085d8ec l     O .bss	0000001e nearBuf.4178
00000000 l    df *ABS*	00000000 tcpcksum.c
00000000 l    df *ABS*	00000000 in_pcb.c
00000000 l    df *ABS*	00000000 vfsfiles.c
00000000 l    df *ABS*	00000000 vfsport.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00848fe8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 icmp.c
008509c0 l     O .rwdata	00000018 dsts
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0084a748 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0084a8fc l     F .text	00000040 alt_sim_halt
00e3a364 g     O .bss	00000014 soq
0085d950 g     O .bss	005b8d88 upload_buf
0080f488 g     F .text	00000094 _mprec_log10
00850a86 g     O .rwdata	00000002 OSTaskNameSize
0080f574 g     F .text	00000088 __any_on
0080ec4c g     F .text	00000070 _isatty_r
0084c8f4 g     O .rodata	00000028 __mprec_tinytens
0083d50c g     F .text	00000780 ip_write_internal
00816878 g     F .text	000000c8 alt_main
00808144 g     F .text	0000008c strcpy
008076c0 g     F .text	000000a0 _puts_r
00829f18 g     F .text	000000ac pk_free
00e3a510 g     O .bss	00000100 alt_irq
0080264c g     F .text	000001ac http_send_file_chunk
00850860 g     O .rwdata	00000009 rtp_priority
0080edac g     F .text	00000078 _lseek_r
00849fcc g     F .text	00000334 icmp_timex
0082b8a4 g     F .text	00000044 m_freem
0084894c g     F .text	00000048 vgetc
0082a940 g     F .text	0000001c clock_c
00850cc4 g     O .bss	00000004 tcp_optionbuf
0083cfd4 g     F .text	00000084 if_getbynum
0081c274 g     F .text	000000d0 OS_MemInit
00850c64 g     O .bss	00000004 dsc_rlyerrs
00850c54 g     O .bss	00000004 dsc_releases
00826640 g     F .text	00000074 TK_OSTaskQuery
0082a634 g       .text	00000000 asm_cksum
008201b4 g     F .text	00000064 OSTimeSet
0084882c g     F .text	00000120 vgetc_locked
0082b180 g     F .text	00000020 post_task_setup
00840f04 g     F .text	00000354 ipr_stats
00838b68 g     F .text	00000134 tcp_attach
00850acc g     O .rwdata	00000004 reqlist_len
00821f64 g     F .text	00000034 alt_up_character_lcd_send_cmd
008509e0 g     O .rwdata	00000008 sweep_field
0082cd50 g     F .text	00000084 tcp_tick
0082588c g     F .text	00000074 print_ipad
0082653c g     F .text	00000104 tcp_wakeup
0080e5c4 g     F .text	000000a0 __sflags
00815234 g     F .text	00000088 __eqdf2
00850b4c g     O .bss	00000004 last_flash_sector_offset
00850c10 g     O .bss	00000004 igmp_timers_are_running
00835a88 g     F .text	0000012c tcp_pulloutofband
00817534 g     F .text	000006b4 OSEventPendMulti
0080145c g     F .text	00000030 print
00e3a9f8 g       *ABS*	00000000 __alt_heap_start
0083b078 g     F .text	00000020 OSTaskCreateHook
008092b4 g     F .text	00000008 strtok_r
00829704 g     F .text	00000074 dhc_ifacedone
008412ac g     F .text	00000400 ip_rcv
0084857c g     F .text	0000017c vfseek
008318e8 g     F .text	00000120 soqremque
008430fc g     F .text	00000858 udpdemux
00807648 g     F .text	00000044 printf
00850d04 g     O .bss	00000004 rt_mib
00850a5e g     O .rwdata	00000002 OSMboxEn
00829614 g     F .text	00000060 dhc_state_init
0084a5f0 g     F .text	00000024 vsprintf
00817c3c g     F .text	0000007c OSIntEnter
00801e60 g     F .text	00000128 http_handle_accept
00807d24 g     F .text	00000068 __sseek
008057e4 g     F .text	000000a4 __sinit
00842250 g     F .text	00000118 in_delmulti
00812b5c g     F .text	00000130 __swbuf_r
00850d1c g     O .bss	00000004 so_evtmap_create
00850a6e g     O .rwdata	00000002 OSQEn
00846afc g     F .text	00000094 in_pcballoc
00850ae8 g     O .rwdata	00000002 socket_defaults
0080ed0c g     F .text	00000084 _setlocale_r
0083be00 g     F .text	00000498 send_arp
008058e4 g     F .text	00000068 __sfmoreglue
008475e8 g     F .text	00000368 vfopen_locked
00812b40 g     F .text	0000001c ungetc
008171f0 g     F .text	000000d0 __malloc_unlock
0083b0d4 g     F .text	0000001c OSTaskStatHook
0083b508 g     F .text	00000058 prep_modules
00e166d8 g     O .bss	0000002a board_funcs
00824dc4 g     F .text	000001b8 bsd_i_sockoptlen
00850bac g     O .bss	00000001 OSLockNesting
008006c0 g     F .text	0000004c dm9000a_ior
00850ac4 g     O .rwdata	00000004 xids
00810a48 g     F .text	000014e4 _strtod_r
008081d0 g     F .text	00000674 strerror
00800a88 g     F .text	000001c4 prep_dm9000a
00847b48 g     F .text	00000040 vfclose
00e3a404 g     O .bss	0000002c tcb
00850aac g     O .rwdata	00000002 OSDataSize
0083aa80 g     F .text	00000038 alt_remap_cached
00850bad g     O .bss	00000001 OSRunning
0083cd08 g     F .text	000002cc grat_arp
008042e4 g     F .text	0000005c get_ip_addr
00846514 g     F .text	000000ac inet_pton
0083d138 g     F .text	0000009c reg_type
00e39f08 g     O .bss	000000f0 dhc_states
00823bcc g     F .text	0000019c igmp_fasttimo
00847d0c g     F .text	0000005c vunlink_flag_open_files
008293bc g     F .text	00000088 dhc_halt
00850c48 g     O .bss	00000004 dsc_acks
00e3a430 g     O .bss	000000e0 tcpstat
008407b4 g     F .text	0000035c ip_reasm_copy_queued_fragments_into_reassy_buffer
0082be34 g     F .text	000000a8 dtom
00837100 g     F .text	000000fc tcp_setpersist
0082e4dc g     F .text	000001a4 t_getsockopt
008073d8 g     F .text	000000e0 memmove
00850c58 g     O .bss	00000004 dsc_naks
0082c2d8 g     F .text	000005f8 ip_output
0083b118 g     F .text	0000001c OSInitHookBegin
0084a300 g     F .text	00000054 icmp_du
00850ac0 g     O .rwdata	00000004 num_net_tasks
00850d40 g     O .bss	00000004 vfiles
00850aa4 g     O .rwdata	00000002 OSTmrSize
00845c10 g     F .text	00000104 dhc_main_ipset
008058d4 g     F .text	00000010 _cleanup
0083f8ac g     F .text	000002e0 ip_reasm_process_first_fragment
008079c4 g     F .text	000000bc snprintf
00800c4c g     F .text	00000038 dm9000a_init
0080f5fc g     F .text	000000bc _Balloc
00809210 g     F .text	000000a4 __strtok_r
008040f8 g     F .text	00000194 get_board_mac_addr
00850bb0 g     O .bss	00000004 OSIdleCtr
00844b28 g     F .text	000005f0 ip_setmoptions
00815344 g     F .text	00000088 __gtdf2
00845fd4 g     F .text	0000002c md_fseek
0083ad44 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00821ee8 g     F .text	0000007c get_DDRAM_addr
00819108 g     F .text	000002e0 OS_TCBInit
0083fb8c g     F .text	000000a0 ip_reassm
00829444 g     F .text	000001d0 dhc_reclaim
008509f8 g     O .rwdata	00000008 flash_field
00e3a7f0 g     O .bss	00000010 udp_mib
01400000 g     F .entry	00000000 __reset
0082ed14 g     F .text	000000e4 t_shutdown
0082e770 g     F .text	00000150 t_recvfrom
00801bc4 g     F .text	000000f0 http_reset_connection
00850aaa g     O .rwdata	00000002 OSTmrWheelTblSize
0084530c g     F .text	0000067c u_mctest_run
008423d8 g     F .text	00000094 prep_ifaces
00850c2c g     O .bss	00000001 to_netmain
00829b84 g     F .text	000000dc pk_alloc
00850a4a g     O .rwdata	00000002 OSEventSize
00850bb4 g     O .bss	00000001 OSPrioHighRdy
00806688 g     F .text	00000074 _fstat_r
008262b4 g     F .text	0000004c tk_nettick
0083b098 g     F .text	00000020 OSTaskDelHook
00804484 g     F .text	000002a4 ProgFlash
00850b68 g     O .bss	00000004 errno
0084a558 g     F .text	00000014 __srget
00832c14 g     F .text	000000cc in_pcbnotify
0080cad4 g     F .text	00000024 __svfscanf
0083ad24 g       .text	00000000 OSStartHighRdy
00e39ff8 g     O .bss	00000014 lilfreeq
00800048 g     F .text	00000624 alt_uCOSIIErrorHandler
00842494 g     F .text	00000028 evtmap_setup
0081e988 g     F .text	00000200 OSTaskCreateExt
00850c30 g     O .bss	00000004 tcp_sleep_timeout
00832314 g     F .text	000001d0 sbdrop
00850d18 g     O .bss	00000004 net_system_exit
00e3a800 g     O .bss	00000068 icmp_mib
00837c54 g     F .text	00000078 tcp_getseq
008428a4 g     F .text	000000cc ip_raw_alloc
0081a568 g     F .text	00000068 OSFlagPendGetFlagsRdy
00850a8a g     O .rwdata	00000002 OSTaskStatStkSize
00827ae0 g     F .text	00000b3c dhc_request
0082ffa0 g     F .text	000007e4 soreceive
00815b2c g     F .text	0000002c __make_fp
00819574 g     F .text	00000334 OSFlagAccept
0081c9ac g     F .text	000000c8 OSQFlush
0081c344 g     F .text	00000154 OSQAccept
00850b8c g     O .bss	00000004 alt_argv
008589d8 g       *ABS*	00000000 _gp
00841258 g     F .text	00000054 ip_reasm_send_icmp_timex
00816ec8 g     F .text	00000118 usleep
00847b88 g     F .text	00000048 vfflush
00e3a30c g     O .bss	00000040 resid_semaphore
00825744 g     F .text	00000148 hexdump
0083f764 g     F .text	000000a8 ip_reasm_incr_mem_useage
0082b1d8 g     F .text	00000034 calloc2
0082427c g     F .text	0000007c igmp_leavegroup
0081e7b4 g     F .text	000001d4 OSTaskCreate
00850b48 g     O .bss	00000004 netisrs
0081e240 g     F .text	00000574 OSTaskChangePrio
00850ba8 g     O .bss	00000004 alt_heapsem
00837aa0 g     F .text	000000e8 tcp_close
008193e8 g     F .text	0000018c OSDebugInit
0081eb88 g     F .text	0000040c OSTaskDel
00848da8 g     F .text	0000006c vferror
00843e0c g     F .text	000000c0 udp_alloc
008506c8 g     O .rwdata	00000180 alt_fd_list
00e36938 g     O .bss	00000370 OSFlagTbl
00850cb0 g     O .bss	00000008 mbstat
0084a454 g     F .text	00000090 _getc_r
0084a3bc g     F .text	00000098 getc
008186b8 g     F .text	000000b8 OS_EventTaskRemove
00844718 g     F .text	00000158 igmpv2_chk_set_timer
00826300 g     F .text	0000002c TK_OSTimeDly
0083a1c0 g     F .text	00000094 alt_find_dev
00807338 g     F .text	000000a0 memcpy
00850c60 g     O .bss	00000004 dsc_rebind
0081369c g     F .text	00000248 __hexnan
0083ba04 g     F .text	00000080 task_stats
0082d800 g     F .text	0000004c DOMAIN_CHECK
0082c8d0 g     F .text	00000040 in_broadcast
00850a74 g     O .rwdata	00000002 OSRdyTblSize
008220fc g     F .text	0000004c alt_up_character_lcd_write_fd
00850d3c g     O .bss	00000004 vfsystems
00843d3c g     F .text	000000d0 udp_socket
00801910 g     F .text	00000264 file_upload
00850c00 g     O .bss	00000004 MaxMtu
008328a8 g     F .text	00000158 sock_selscan
008058c8 g     F .text	0000000c _cleanup_r
00815564 g     F .text	000000f8 __floatsidf
0083f510 g     F .text	000000d0 ip_reasm_match_frag_with_ire
00831a58 g     F .text	00000050 socantrcvmore
00807634 g     F .text	00000014 perror
0083a374 g     F .text	00000090 alt_fs_reg
0083a888 g     F .text	00000078 alt_io_redirect
00815454 g     F .text	00000088 __ltdf2
00850c8c g     O .bss	00000004 netq_intmask
008012e4 g     F .text	0000005c dm9ka_stats
008464a4 g     F .text	00000070 hextoa
0084a96c g       *ABS*	00000000 __DTOR_END__
0082eaec g     F .text	00000228 t_send
00839e5c g     F .text	000000fc alt_close
00850cb8 g     O .bss	00000002 select_wait
00807760 g     F .text	00000014 puts
00825dd8 g     F .text	00000044 std_out
00821b44 g     F .text	00000098 alt_ro_zipfs_open
00848994 g     F .text	00000138 vfslookup_locked
0082f788 g     F .text	0000009c soaccept
008172c0 g     F .text	00000130 OSEventNameGet
00850a58 g     O .rwdata	00000002 OSFlagMax
0080eea4 g     F .text	00000040 mbrtowc
00e3a378 g     O .bss	0000003c tcpmib
0082ef60 g     F .text	0000009c t_errno
008424bc g     F .text	000000f0 ip_raw_open
0080caf8 g     F .text	00000068 _vfscanf_r
00828980 g     F .text	00000118 dhc_decline
0080f3d8 g     F .text	000000b0 __ratio
00817cb8 g     F .text	00000100 OSIntExit
00850b30 g     O .rwdata	00000004 ipRoutes
00847cb4 g     F .text	00000058 vfeof
00837f6c g     F .text	0000005c tcp_canceltimers
008272a8 g     F .text	0000021c dhc_buildheader
00850a92 g     O .rwdata	00000002 OSTCBSize
00850bb5 g     O .bss	00000001 OSPrioCur
00820cdc g     F .text	000002c0 altera_avalon_jtag_uart_read
0084a4f8 g     F .text	00000014 malloc
00850d38 g     O .bss	00000004 inpcb_cachemiss
0080768c g     F .text	00000034 _printf_r
008466ac g     F .text	000000c4 inet46_addr
00850d34 g     O .bss	00000004 inpcb_cachehits
01884000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
008053b8 g     F .text	00000008 __udivsi3
00850688 g     O .rwdata	0000000b tcp_outflags
00816608 g     F .text	000000c0 isatty
00850a78 g     O .rwdata	00000002 OSStkWidth
0080ecbc g     F .text	0000002c iswspace
0084c804 g     O .rodata	000000c8 __mprec_tens
00847444 g     F .text	0000007c vf_alloc_and_link_vop
00850a6c g     O .rwdata	00000002 OSPtrSize
00850d08 g     O .bss	00000004 ipr_curr_mem
00823858 g     F .text	0000006c exit_hook
00850c14 g     O .bss	00000004 igmp_cticks
00850ca0 g     O .bss	00000004 mheap_sem_ptr
00835e20 g     F .text	00000048 ip4_tcpmss
0080ece8 g     F .text	00000008 __locale_charset
00803554 g     F .text	000003bc http_handle_receive
00850a4c g     O .rwdata	00000002 OSEventTblSize
00e3a774 g     O .bss	00000014 netlist
00830784 g     F .text	000000a8 soshutdown
0081397c g     F .text	000000a4 __fixunsdfsi
0083ac98 g       .text	00000000 OSCtxSw
0083b498 g     F .text	0000004c packet_check
0082861c g     F .text	00000280 dhc_setip
00e3a3b4 g     O .bss	00000014 mbufq
0082f738 g     F .text	00000050 soabort
00850b6c g     O .bss	00000004 __malloc_top_pad
00802124 g     F .text	00000234 http_process_headers
00850bb8 g     O .bss	00000004 OSTCBList
0082a208 g     F .text	00000110 qdel
0083b310 g     F .text	0000014c station_state
00842a0c g     F .text	00000184 rt_lookup
00850cd0 g     O .bss	00000004 alt_fd_list_lock
008125b4 g     F .text	00000024 strtoul
008010dc g     F .text	000000f8 dm9ka_init
00850a14 g     O .rwdata	00000004 __mb_cur_max
008242f8 g     F .text	0000035c igmp_validate
0080ecf0 g     F .text	0000000c _localeconv_r
00823574 g     F .text	000002e4 ip_startup
008125d8 g     F .text	000002f0 _strtoull_r
0082db3c g     F .text	00000298 t_accept
008314d8 g     F .text	0000008c soisdisconnecting
0080fcf4 g     F .text	0000003c __i2b
0080e7b0 g     F .text	0000049c __sfvwrite_r
00822f2c g     F .text	000003d4 pktdemux
00e36ca8 g     O .bss	00000c30 OSMemTbl
00850bbc g     O .bss	00000001 OSTickStepState
0082a7f8 g     F .text	000000ac kbhit
0082e300 g     F .text	000001dc t_setsockopt
00807954 g     F .text	00000070 _sbrk_r
00850848 g     O .rwdata	00000018 icmpdu_types
00847d68 g     F .text	00000220 vunlink
00e2e838 g     O .bss	00002000 SSDTaskStk
00850b54 g     O .bss	00000004 line_count
00850a70 g     O .rwdata	00000002 OSQMax
00825584 g     F .text	000000b0 ccksum
008474c0 g     F .text	000000d8 vf_alloc_buffer
00850d2c g     O .bss	00000004 cachedRoute
00850ad0 g     O .rwdata	00000004 lilbufs
00e378d8 g     O .bss	00000800 OSTaskStatStk
00846000 g     F .text	00000024 md_ftell
00825634 g     F .text	00000068 cksum
0081be5c g     F .text	0000010c OSMemNameGet
0082f314 g     F .text	00000130 sofree
00850c08 g     O .bss	00000004 ifNumber
00850a50 g     O .rwdata	00000002 OSFlagEn
0081025c g     F .text	00000078 _read_r
00850a96 g     O .rwdata	00000002 OSTimeTickHookEn
008161cc g     F .text	00000078 alt_dcache_flush
0081cf10 g     F .text	00000180 OSQPost
0081ae04 g     F .text	000000ac OS_FlagUnlink
0084f494 g     O .rwdata	0000000c __lc_ctype
00850b10 g     O .rwdata	00000004 alt_max_fd
00818c94 g     F .text	0000006c OS_MemCopy
00850ad8 g     O .rwdata	00000004 bigbufs
00838c9c g     F .text	000000d4 tcp_disconnect
00818d00 g     F .text	000000d4 OS_Sched
00815e6c g     F .text	00000138 __unpack_d
008053e0 g     F .text	00000110 _fclose_r
0081bd58 g     F .text	00000104 OSMemGet
0081ba0c g     F .text	00000130 OSMboxQuery
00802f38 g     F .text	0000027c http_find_file
0081f2bc g     F .text	000001c4 OSTaskNameSet
008016c0 g     F .text	00000250 http_parse_multipart_header
00805700 g     F .text	00000034 fflush
00850b70 g     O .bss	00000004 __malloc_max_sbrked_mem
00850bc0 g     O .bss	00000004 OSCtxSwCtr
00e39e80 g     O .bss	00000064 igmpstats
0083b0f0 g     F .text	00000028 OSTimeTickHook
008279dc g     F .text	00000104 dhc_rx_offer
00824f7c g     F .text	00000120 bsd_getsockopt
00816448 g     F .text	000001c0 alt_irq_register
00850a5a g     O .rwdata	00000002 OSFlagNameSize
00e3a7d8 g     O .bss	00000018 ire_stats
00838f0c g     F .text	000001b8 udp_soinput
0082a158 g     F .text	000000b0 putq
00818770 g     F .text	00000104 OS_EventTaskRemoveMulti
00850c28 g     O .bss	00000004 iniche_net_ready
00814ba4 g     F .text	00000074 __adddf3
008145ac g     F .text	00000078 __nesf2
00818564 g     F .text	00000154 OS_EventTaskWaitMulti
00848d60 g     F .text	00000048 isvfile
0083092c g     F .text	000004c0 sosetopt
00826138 g     F .text	000000f4 netmain
00835e68 g     F .text	0000011c tcp_mss
0080f2b8 g     F .text	00000120 __b2d
00846120 g     F .text	0000031c parse_ipad
00847424 g     F .text	00000020 get_vfopen_error
00850a72 g     O .rwdata	00000002 OSQSize
00813ffc g     F .text	000005b0 __umoddi3
00816728 g     F .text	000000f0 lseek
0083b560 g     F .text	000000c4 inet_timer
0081daec g     F .text	0000027c OSSemPend
008509e8 g     O .rwdata	00000008 lcd_field
00850a08 g     O .rwdata	00000004 _global_impure_ptr
00825a70 g     F .text	00000164 print_eth
00847950 g     F .text	00000050 vfopen
0083a900 g     F .text	00000120 alt_read
008102d4 g     F .text	000005f4 _realloc_r
00850a5c g     O .rwdata	00000002 OSLowestPrio
00e3a9f8 g       *ABS*	00000000 __bss_end
0083a6cc g     F .text	000000f8 alt_iic_isr_register
0082b770 g     F .text	00000134 m_free
0083b16c g     F .text	00000020 OSTCBInitHook
00829c60 g     F .text	000002b8 pk_validate
00850aa2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00816db8 g     F .text	00000110 alt_tick
008471a0 g     F .text	0000025c in_pcblookup
00829828 g     F .text	000000cc find_opt
0081b74c g     F .text	00000134 OSMboxPost
00e36838 g     O .bss	00000100 __hexdig
00813a20 g     F .text	000005dc __udivdi3
0082b5c8 g     F .text	000001a8 m_getnbuf
00829fe4 g     F .text	000000ac dump_buf_estats
00850cfc g     O .bss	00000004 arpRepsOut
00850a44 g     O .rwdata	00000002 OSEventEn
0084c8cc g     O .rodata	00000028 __mprec_bigtens
0080ff50 g     F .text	00000120 __s2b
00850a9e g     O .rwdata	00000002 OSTmrCfgNameSize
008157a8 g     F .text	00000194 __floatunsidf
0083b18c g     F .text	000000fc netmain_init
0080f1d8 g     F .text	00000060 __mcmp
00850c44 g     O .bss	00000004 dsc_requests
00837454 g     F .text	00000488 tcp_respond
00839348 g     F .text	0000033c udp4_sockbind
00850a00 g     O .rwdata	00000004 __ctype_ptr
00850c90 g     O .bss	00000004 old_mode
00824010 g     F .text	0000026c igmp_joingroup
0082c9f8 g     F .text	00000358 so_icmpdu
008058b0 g     F .text	00000018 __fp_lock_all
00850d4c g     O .bss	00000004 vfs_dir_stale
0083a684 g     F .text	00000048 alt_ic_irq_enabled
00840b10 g     F .text	000000e4 ip_reasm_process_timer_tick
00848e14 g     F .text	0000005c vclearerr
00825498 g     F .text	000000ec bsd_setsockopt
0082bddc g     F .text	00000058 mbuf_len
0081ac10 g     F .text	000000e4 OS_FlagInit
00816d20 g     F .text	00000098 alt_alarm_stop
00848b14 g     F .text	000001e8 strippath
00850ac8 g     O .rwdata	00000004 reqlist
0082639c g     F .text	000001a0 tcp_sleep
00809500 g     F .text	00000024 strtol
00826a78 g     F .text	00000830 dhc_upcall
00838d70 g     F .text	000000e0 tcp_usrclosed
00850c7c g     O .bss	00000004 cticks_factor
00850a80 g     O .rwdata	00000002 OSTaskIdleStkSize
00846be4 g     F .text	00000254 in_pcbbind
00850b84 g     O .bss	00000004 alt_irq_active
0081d678 g     F .text	000000c0 OSSemAccept
0085d90c g     O .bss	00000044 g_dm9ka
0081c088 g     F .text	000000f0 OSMemPut
00821cd8 g     F .text	00000148 alt_ro_zipfs_seek
0081bb3c g     F .text	0000021c OSMemCreate
00850bc4 g     O .bss	00000004 OSIdleCtrMax
00804ca4 g     F .text	000001f8 lcd_ip_addr
018840ec g     F .exceptions	000000d0 alt_irq_handler
008506a0 g     O .rwdata	00000028 alt_dev_null
00850aea g     O .rwdata	00000001 tcprexmtthresh
00850a94 g     O .rwdata	00000002 OSTicksPerSec
0083d1d4 g     F .text	00000098 if_killsocks
0083dc8c g     F .text	00000248 ip_write
008416ac g     F .text	0000060c ip_rcv_phase2
0082e0c0 g     F .text	00000044 t_getsockname
0082ddd4 g     F .text	000002a8 t_connect
00850ae4 g     O .rwdata	00000004 TCPTV_MSL
00e3a00c g     O .bss	00000010 memestats
00801cb4 g     F .text	000001ac http_manage_connection
0082a8a4 g     F .text	00000060 getch
008159bc g     F .text	000000c8 __unpack_f
008223e4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00850940 g     O .rwdata	00000080 vfs_root_path
0082e07c g     F .text	00000044 t_getpeername
00805168 g     F .text	00000098 board_control_task
0083f80c g     F .text	000000a0 ip_reasm_decr_mem_useage
00831be4 g     F .text	00000080 soreserve
008049e4 g     F .text	000002c0 ParseSRECBuf
0083ac98 g       .text	00000000 OSIntCtxSw
008034e0 g     F .text	00000074 http_prepare_response
0082b20c g     F .text	000000f4 npalloc
00805734 g     F .text	0000002c _fgetpos_r
0080f0a4 g     F .text	00000070 __hi0bits
00850d28 g     O .bss	00000004 ipraw_eps
008298f4 g     F .text	00000290 pk_init
00845dd4 g     F .text	00000180 md_fread
0084a368 g     F .text	0000001c calloc
0081565c g     F .text	000000d8 __fixdfsi
008015f8 g     F .text	000000c8 lcd_output
00e3a610 g     O .bss	00000064 intimers
00831cc4 g     F .text	00000048 sbrelease
00832d48 g     F .text	000000f0 ifd_clr
008325f4 g     F .text	00000094 sbdroprecord
00825bd4 g     F .text	00000080 uslash
0083aaf8 g     F .text	00000120 alt_write
00801b74 g     F .text	00000050 ProgFlashStub
00850cf8 g     O .bss	00000004 arpRepsIn
008268e8 g     F .text	00000090 dhc_get_srv_ipaddr
0083b7bc g     F .text	0000017c in_timerset
00812050 g     F .text	0000001c strtod
00850bc8 g     O .bss	00000004 OSTCBFreeList
0081dd68 g     F .text	0000017c OSSemPendAbort
00835f84 g     F .text	0000117c tcp_output
00850cd4 g     O .bss	00000004 activehost
00850b08 g     O .rwdata	00000008 alt_dev_list
00825f0c g     F .text	0000022c parse_args
00850c94 g     O .bss	00000004 global_TCPwakeup_setIndx
0080e6c8 g     F .text	00000058 _fputc_r
00822628 g     F .text	00000070 write
0082b300 g     F .text	000000b8 npfree
00810174 g     F .text	000000e8 _putc_r
0083c554 g     F .text	00000294 arpReply
008256c8 g     F .text	0000007c nextarg
00850a98 g     O .rwdata	00000002 OSVersionNbr
008401bc g     F .text	00000594 ip_reasm_process_subsequent_fragments
00850b3c g     O .rwdata	00000004 pton_error
00850c38 g     O .bss	00000004 dsc_errors
00814624 g     F .text	00000078 __gtsf2
00e39b5c g     O .bss	00000014 rcvdq
00832ce0 g     F .text	00000068 tcp_notify
00816314 g     F .text	000000d4 fstat
00805b4c g     F .text	0000002c fprintf
0082f824 g     F .text	000000d4 soconnect
008429b0 g     F .text	0000005c ip_raw_maxalloc
00e16702 g     O .bss	0000c000 http_rx_buffer
008154dc g     F .text	00000088 __ledf2
008274c4 g     F .text	00000518 dhc_discover
00807f18 g     F .text	00000090 strcat
00847124 g     F .text	0000007c in_setpeeraddr
00850a40 g     O .rwdata	00000004 OSEndiannessTest
0082a904 g     F .text	0000003c clock_init
00847bd0 g     F .text	000000e4 vfgets
0083bb88 g     F .text	0000017c et_send
0080fe30 g     F .text	00000120 __pow5mult
00850b78 g     O .bss	00000004 __nlocale_changed
008053c0 g     F .text	00000008 __umodsi3
0084643c g     F .text	00000068 inet_addr
0083f6cc g     F .text	00000098 ip_reasm_check_mem_useage
0083082c g     F .text	00000100 sorflush
0084a580 g     F .text	00000020 vprintf
00e3a120 g     O .bss	000000fc global_tcb_ext
0083e35c g     F .text	00000488 ip_fragment_lc
00e39b70 g     O .bss	00000300 netstatic
0082d8dc g     F .text	0000017c t_bind
00850a52 g     O .rwdata	00000002 OSFlagGrpSize
0082a550 g     F .text	000000e4 udp_close
0082aef0 g     F .text	0000021c alt_iniche_init
00e3a9f8 g       *ABS*	00000000 end
0082ab28 g     F .text	00000088 UNLOCK_NET_RESOURCE
0082e680 g     F .text	000000f0 t_recv
0081606c g     F .text	00000160 __pack_f
00847f88 g     F .text	000001ac vfread
00822e44 g     F .text	000000e8 netclose
008053c8 g     F .text	0000000c _atoi_r
00806664 g     F .text	00000024 fseek
00850af4 g     O .rwdata	00000004 tcp_keepintvl
00820664 g     F .text	00000138 altera_avalon_jtag_uart_init
00818f78 g     F .text	000000c8 OS_TaskStat
00850c3c g     O .bss	00000004 dsc_discovers
00850640 g     O .rwdata	00000018 tcp_protosw
0084a968 g       *ABS*	00000000 __CTOR_LIST__
00850d48 g     O .bss	00000004 vfopen_error
01000000 g       *ABS*	00000000 __alt_stack_pointer
00850cc8 g     O .bss	00000004 tcp_maxidle
00850c68 g     O .bss	00000004 firstudp
008212e8 g     F .text	00000090 alt_avalon_timer_sc_init
0081593c g     F .text	00000080 __clzsi2
00807a80 g     F .text	000000b4 _snprintf_r
00820f9c g     F .text	000002dc altera_avalon_jtag_uart_write
008057d4 g     F .text	00000004 __sfp_lock_acquire
0080ef24 g     F .text	000000e4 memchr
00818c40 g     F .text	00000054 OS_MemClr
0082200c g     F .text	00000078 alt_up_character_lcd_write
00809584 g     F .text	00001eac ___vfprintf_internal_r
0083ad68 g     F .text	00000310 OSTaskStkInit
00e22704 g     O .bss	00000030 flash_inf
00807ba8 g     F .text	00000060 _sprintf_r
00805f14 g     F .text	00000314 _free_r
00844870 g     F .text	00000170 igmpv2_chk4_rtr_alert_opt
00803910 g     F .text	00000060 http_handle_transmit
0082edf8 g     F .text	000000d0 t_socketclose
008182c0 g     F .text	00000194 OS_EventTaskRdy
00850b44 g     O .bss	00000004 autoReset
0084a50c g     F .text	0000004c __srget_r
0084a74c g     F .text	000001b0 __call_exitprocs
00802038 g     F .text	000000ec http_parse_type_boundary
00850bcc g     O .bss	00000001 OSCPUUsage
00e39e70 g     O .bss	00000010 nets
0082aa68 g     F .text	000000c0 LOCK_NET_RESOURCE
0082889c g     F .text	000000e4 dhc_resetip
00850b7c g     O .bss	00000004 __mlocale_changed
0082d84c g     F .text	00000090 t_socket
00850a10 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000048 _start
0083bb34 g     F .text	00000054 etainit
00850b94 g     O .bss	00000004 _alt_tick_rate
0083b4e4 g     F .text	00000024 mcastlist
0081ca74 g     F .text	00000320 OSQPend
00808b98 g     F .text	00000660 strstr
00e3a01c g     O .bss	000000f0 pktlog
0081206c g     F .text	00000318 _strtoll_r
00844380 g     F .text	0000014c igmpv2_process_report
00832eac g     F .text	00000080 ifd_isset
00842fb8 g     F .text	00000144 del_route
00809524 g     F .text	00000008 _user_strerror
0081fc80 g     F .text	0000014c OSTimeDly
0080428c g     F .text	00000058 get_mac_addr
0082f224 g     F .text	000000f0 solisten
00803970 g     F .text	00000338 WSTask
0080f9c0 g     F .text	0000014c __lshift
00850b98 g     O .bss	00000004 _alt_nticks
00850b5c g     O .bss	00000004 lcdDevice
008225b0 g     F .text	00000078 read
0082024c g     F .text	00000298 alt_sys_init
00822270 g     F .text	000000b0 alt_up_character_lcd_shift_display
00837b88 g     F .text	0000004c tcp_quench
00e2e734 g     O .bss	00000104 frag
00825c54 g     F .text	00000184 ns_printf
00807550 g     F .text	00000078 _open_r
0083d058 g     F .text	000000e0 isbcast
0082abb0 g     F .text	00000214 TK_NEWTASK
0084a614 g     F .text	00000134 __register_exitproc
00850bcd g     O .bss	00000001 OSTaskCtr
0083f5e0 g     F .text	000000ec ip_reasm_determine_type_of_frag
008088b8 g     F .text	000000f0 strncmp
0081fdcc g     F .text	00000174 OSTimeDlyHMSM
0083aab8 g     F .text	00000040 alt_remap_uncached
008425ac g     F .text	000000c0 ip_raw_close
0080fb0c g     F .text	000001e8 __multiply
00822320 g     F .text	00000090 alt_up_character_lcd_erase_pos
00850890 g     O .rwdata	000000b0 mdlist
00820b74 g     F .text	00000074 altera_avalon_jtag_uart_close
00823ad4 g     F .text	000000f8 igmp_input
0083e284 g     F .text	000000d8 ip_raw_write
00848134 g     F .text	000003e8 vfwrite_locked
008089a8 g     F .text	000000bc strncpy
00850c40 g     O .bss	00000004 dsc_offers
0085d870 g     O .bss	00000028 __malloc_current_mallinfo
00850a46 g     O .rwdata	00000002 OSEventMax
00846770 g     F .text	00000074 inet_setport
0080f6b8 g     F .text	0000017c __d2b
00807e68 g     F .text	000000b0 strcasecmp
0081dee4 g     F .text	00000128 OSSemPost
008358f8 g     F .text	00000190 tcp_dooptions
008313dc g     F .text	000000fc soisconnected
00817e44 g     F .text	000000e4 OSSchedUnlock
0084246c g     F .text	00000028 netexit
00803cd8 g     F .text	00000138 get_serial_number
00850c24 g     O .bss	00000004 nettick_wakes
00850cbc g     O .bss	00000001 tcpprintfs
0083b938 g     F .text	000000a8 in_timerkill
00844220 g     F .text	00000160 igmpv2_input
00850c50 g     O .bss	00000004 dsc_declines
0082051c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00812384 g     F .text	00000230 _strtoul_r
0082569c g     F .text	0000002c do_trap
0083a404 g     F .text	000000f4 alt_get_fd
0082509c g     F .text	00000104 bsd_ioctl
00850bd0 g     O .bss	00000004 OSMemFreeList
00817f98 g     F .text	000000ac OSStatInit
0082c0ec g     F .text	000001ec tcp_rcv
00825a2c g     F .text	00000044 panic
00850d50 g     O .bss	00000004 vfs_open_files
008233d0 g     F .text	000001a4 ip2mac
00839d10 g     F .text	0000014c alt_busy_sleep
0081a978 g     F .text	000000d4 OSFlagQuery
00815fa4 g     F .text	000000c8 __fpcmp_parts_d
00832a00 g     F .text	00000214 sock_select
00845988 g     F .text	00000288 dhc_setup
008372e4 g     F .text	00000058 tcp_init
00850c98 g     O .bss	00000004 cticks
008007a8 g     F .text	000001c4 dm9000a_reset
00850c2d g     O .bss	00000001 to_nettick
00850a7c g     O .rwdata	00000002 OSTaskCreateExtEn
0080cd88 g     F .text	00000070 _close_r
00822698 g     F .text	0000064c Netinit
0082b1a0 g     F .text	00000038 prep_armintcp
008420e8 g     F .text	00000168 in_addmulti
0083733c g     F .text	00000118 tcp_template
00e30838 g     O .bss	00002000 WSInitialTaskStk
0082bedc g     F .text	00000070 remque
008091f8 g     F .text	00000018 strtok
0084a56c g     F .text	00000014 _vprintf_r
008011d4 g     F .text	00000110 dm9ka_close
00832f9c g     F .text	00000408 tcp_reass
00846930 g     F .text	000001cc tcp_cksum
00839684 g     F .text	000003dc udp4_socksend
008479a0 g     F .text	000001a8 vfclose_locked
00832e38 g     F .text	00000074 ifd_set
0080f008 g     F .text	00000074 memcmp
008182a4 g     F .text	0000001c OS_Dummy
008205cc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00829778 g     F .text	000000b0 dhc_set_state
00850c04 g     O .bss	00000004 NDEBUG
00e3a9f8 g       *ABS*	00000000 __alt_stack_base
00850b50 g     O .bss	00000004 last_flash_sector
00820614 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00831c64 g     F .text	00000060 sbreserve
0084266c g     F .text	00000238 ip_raw_input
00806988 g     F .text	0000009c _fwrite_r
00850ad4 g     O .rwdata	00000004 lilbufsiz
00832f2c g     F .text	00000070 ifd_get
00831b48 g     F .text	0000009c sbwakeup
00807c98 g     F .text	00000084 sscanf
0080cc4c g     F .text	0000013c __swsetup_r
00e380d8 g     O .bss	000001e0 OSQTbl
00835bb4 g     F .text	0000026c tcp_xmit_timer
00814fdc g     F .text	00000258 __divdf3
0080594c g     F .text	000000f0 __sfp
00803fbc g     F .text	0000013c generate_mac_addr
0083d368 g     F .text	000001a4 ip_bldhead
0080f51c g     F .text	00000058 __copybits
00831d0c g     F .text	000000a8 sbappend
0084f08c g     O .rwdata	00000408 __malloc_av_
008057e0 g     F .text	00000004 __sinit_lock_release
00850bd4 g     O .bss	00000004 OSTCBHighRdy
00814c18 g     F .text	000003c4 __muldf3
0083ded4 g     F .text	000003b0 ip_write2
00807e08 g     F .text	00000060 __sread
00850b28 g     O .rwdata	00000004 arp_ageout
00805da8 g     F .text	00000040 fread
00850bd8 g     O .bss	00000004 OSQFreeList
0083d26c g     F .text	000000fc ip_init
0083a254 g     F .text	00000120 alt_find_file
00842970 g     F .text	00000040 ip_raw_free
0083c440 g     F .text	00000114 make_arp_entry
00839fe4 g     F .text	000000b4 alt_dev_llist_insert
008170e8 g     F .text	00000108 __malloc_lock
00805b78 g     F .text	00000034 _fprintf_r
00816c64 g     F .text	000000bc sbrk
00838e9c g     F .text	00000070 udp_lookup
00804728 g     F .text	000002bc ParseAndProgramLine
008173f0 g     F .text	00000144 OSEventNameSet
00805504 g     F .text	000001fc _fflush_r
00812ca8 g     F .text	000000b4 _calloc_r
00850bdc g     O .bss	00000001 OSRdyGrp
00845d8c g     F .text	00000028 md_fopen
00850658 g     O .rwdata	00000018 udp_protosw
00850a1c g     O .rwdata	00000008 alt_flash_dev_list
008470a8 g     F .text	0000007c in_setsockaddr
00805b30 g     F .text	0000001c fopen
00850b44 g       *ABS*	00000000 __bss_start
00831db4 g     F .text	000000e0 sbappendrecord
00804e9c g     F .text	0000007c WSInitialTask
00e3a788 g     O .bss	00000050 ip_mib
008074b8 g     F .text	00000098 memset
0082f8f8 g     F .text	000000a0 sodisconnect
00804f18 g     F .text	0000010c main
00850b90 g     O .bss	00000004 alt_envp
00850b74 g     O .bss	00000004 __malloc_max_total_mem
0082bc0c g     F .text	000001d0 m_adj
00820574 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008067f4 g     F .text	00000014 ftell
00812c8c g     F .text	0000001c __swbuf
00846024 g     F .text	000000d8 md_fgetc
0084caa4 g     O .rodata	00000100 OSUnMapTbl
0083eeb4 g     F .text	000002b8 ip_dump
008266e0 g     F .text	00000208 tk_stats
0081469c g     F .text	00000078 __ltsf2
00805bac g     F .text	000001fc _fread_r
00850ab0 g     O .rwdata	00000008 alt_iniche_dev_list
00850a76 g     O .rwdata	00000002 OSSemEn
00850c80 g     O .bss	00000004 OS_TPS
0082d018 g     F .text	000007e8 rawip_usrreq
008221c0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0081a5d0 g     F .text	000003a8 OSFlagPost
00807d1c g     F .text	00000008 __sclose
0084664c g     F .text	00000060 print46_addr
01000000 g       *ABS*	00000000 __alt_heap_limit
008054f0 g     F .text	00000014 fclose
00818454 g     F .text	00000110 OS_EventTaskWait
00815734 g     F .text	00000074 __truncdfsf2
008092bc g     F .text	00000244 _strtol_r
00825900 g     F .text	0000012c print_uptime
00819040 g     F .text	000000c8 OS_TaskStatStkChk
00e3a868 g     O .bss	00000190 _atexit0
0081ef94 g     F .text	00000170 OSTaskDelReq
0080d010 g     F .text	000015b4 _dtoa_r
00806bf8 g     F .text	00000740 _malloc_r
008460fc g     F .text	00000024 md_unlink
00846b90 g     F .text	00000054 in_pcbdetach
00850b14 g     O .rwdata	00000004 alt_errno
00850b58 g     O .bss	00000004 current_flash_block
0080148c g     F .text	000000e8 sweep
00850b38 g     O .rwdata	00000004 mdlist_size
00817f28 g     F .text	00000070 OSStart
008128c8 g     F .text	000000dc __submore
008452dc g     F .text	00000030 u_mctest_init
0081708c g     F .text	0000005c __env_unlock
008068d0 g     F .text	000000b8 _fwalk
00805760 g     F .text	0000001c fgetpos
0081f480 g     F .text	00000218 OSTaskResume
0081c178 g     F .text	000000fc OSMemQuery
008467e4 g     F .text	0000014c convert_ip
0083c298 g     F .text	000001a8 find_oldest_arp
00850a88 g     O .rwdata	00000002 OSTaskStatEn
00850cf0 g     O .bss	00000004 arpReqsIn
00847598 g     F .text	00000050 vf_free_buffer
0080eee4 g     F .text	00000040 _mbtowc_r
00848e94 g     F .text	00000154 alt_fcntl
00850a62 g     O .rwdata	00000002 OSMemMax
0081d090 g     F .text	00000188 OSQPostFront
0082a7c8 g     F .text	00000030 dtrap
00850ae0 g     O .rwdata	00000004 kb_last
00810070 g     F .text	00000104 putc
008052f8 g     F .text	00000060 __divsi3
00850bdd g     O .bss	00000003 OSRdyTbl
00850a3c g     O .rwdata	00000002 OSDebugEn
00821bdc g     F .text	000000fc alt_ro_zipfs_read
0084c97c g     O .rodata	00000014 __thenan_df
00821fcc g     F .text	00000040 alt_up_character_lcd_open_dev
008238c4 g     F .text	000000d0 ip_exit
00805de8 g     F .text	0000012c _malloc_trim_r
00801f88 g     F .text	000000b0 http_read_line
0084a96c g       *ABS*	00000000 __CTOR_END__
00821e90 g     F .text	00000058 alt_ro_zipfs_check_valid
00850a54 g     O .rwdata	00000002 OSFlagNodeSize
00850c34 g     O .bss	00000004 dhc_conn
0082a95c g     F .text	0000006c cticks_hook
00850a9c g     O .rwdata	00000002 OSTmrCfgMax
00821f98 g     F .text	00000034 alt_up_character_lcd_init
0083b45c g     F .text	0000003c sysuptime
00808088 g     F .text	000000bc strcmp
00803e10 g     F .text	000001ac generate_and_store_mac_addr
00840bf4 g     F .text	000001c8 ip_reasm_delete_ire
0081c498 g     F .text	00000214 OSQCreate
0082a9c8 g     F .text	0000005c irq_Mask
0081f104 g     F .text	000001b8 OSTaskNameGet
00850cdc g     O .bss	00000004 nextppp
00850c74 g     O .bss	00000004 irq_level
00822ce4 g     F .text	00000160 fixup_subnet_mask
0081d218 g     F .text	00000234 OSQPostOpt
00818044 g     F .text	00000240 OSTimeTick
0083f3d8 g     F .text	00000138 ip_copypkt
00829674 g     F .text	00000090 dhc_alldone
00850a84 g     O .rwdata	00000002 OSTaskMax
0084a96c g       *ABS*	00000000 __DTOR_LIST__
0081d738 g     F .text	00000114 OSSemCreate
00850c18 g     O .bss	00000004 igmp_all_hosts_group
00850aa8 g     O .rwdata	00000002 OSTmrWheelSize
00e32838 g     O .bss	00002000 LEDTaskStk
00831aa8 g     F .text	00000038 sbselqueue
00850c20 g     O .bss	00000004 netmain_wakes
0083c7e8 g     F .text	00000260 arprcv
0084ec74 g     O .rwdata	00000018 wstask
0082632c g     F .text	00000070 TK_OSTaskResume
00824654 g     F .text	000003e0 igmp_print_stats
008152bc g     F .text	00000088 __nedf2
00801574 g     F .text	00000084 http_cleanup_lcd_text
0082b458 g     F .text	000000a0 pffindtype
00821e20 g     F .text	00000070 alt_ro_zipfs_fstat
00850a7e g     O .rwdata	00000002 OSTaskDelEn
00850af8 g     O .rwdata	00000004 tcp_sendspace
008486f8 g     F .text	00000134 vftell
00e39ee4 g     O .bss	00000012 eth_prt_buf
0081e00c g     F .text	00000130 OSSemQuery
0081c6ac g     F .text	00000300 OSQDel
0081cd94 g     F .text	0000017c OSQPendAbort
00820218 g     F .text	00000034 alt_irq_init
0080070c g     F .text	0000009c phy_write
00e3a34c g     O .bss	00000018 app_semaphore
0080096c g     F .text	0000011c TransmitPacket
00816c04 g     F .text	00000060 alt_release_fd
0082ae78 g     F .text	00000078 post_app_sem
00823a24 g     F .text	000000b0 igmp_init
00807b34 g     F .text	00000074 sprintf
008223b0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0084c990 g     O .rodata	00000100 __clz_tab
00850c5c g     O .bss	00000004 dsc_renew
00845f54 g     F .text	00000080 md_fwrite
00850b80 g     O .bss	00000004 _PathLocale
00850c84 g     O .bss	00000004 tcp_sleep_count
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
0082bf4c g     F .text	0000007c insque
00811f2c g     F .text	00000124 strtof
0084a354 g     F .text	00000014 atexit
00850d44 g     O .bss	00000004 vfsfiles
0080cbd4 g     F .text	00000078 _write_r
0084a5a0 g     F .text	00000050 _vsprintf_r
00843954 g     F .text	000002b8 udp_send
00817db8 g     F .text	0000008c OSSchedLock
00823d68 g     F .text	000002a8 igmp_send
0080ed90 g     F .text	0000001c setlocale
008198a8 g     F .text	0000013c OSFlagCreate
0082aa24 g     F .text	00000044 irq_Unmask
0082da58 g     F .text	000000e4 t_listen
008109f8 g     F .text	00000008 nanf
00850a04 g     O .rwdata	00000004 _impure_ptr
00850b88 g     O .bss	00000004 alt_argc
00838464 g     F .text	00000704 tcp_usrreq
008390c4 g     F .text	00000284 udp_usrreq
0082b3b8 g     F .text	00000054 ncpalloc
0080ee24 g     F .text	00000080 _mbrtowc_r
0083a15c g     F .text	00000064 _do_dtors
00850a4e g     O .rwdata	00000002 OSEventMultiEn
00850b20 g     O .rwdata	00000004 pingdelay
00806228 g     F .text	0000043c _fseek_r
0083bd8c g     F .text	00000074 arp_send_pending
00843f38 g     F .text	000002e8 igmpv1_input
00807774 g     F .text	000001c4 __srefill_r
0082b10c g     F .text	00000074 pre_task_setup
00850ca4 g     O .bss	00000004 rcvdq_sem_ptr
00824c98 g     F .text	0000012c bsd_getsockname
00840dbc g     F .text	00000148 ip_reasm_mark_compact_rfq
00804340 g     F .text	00000144 FindLastFlashSectorOffset
008199e4 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00850be0 g     O .bss	00000004 OSEventFreeList
00826a34 g     F .text	00000044 dhc_set_callback
0081b5d0 g     F .text	0000017c OSMboxPendAbort
01884020 g       .exceptions	00000000 alt_irq_entry
00850cec g     O .bss	00000004 arpcache
00849c7c g     F .text	00000350 icmp_destun
00842368 g     F .text	00000070 lookup_mcast
00848acc g     F .text	00000048 vfslookup
00841cb8 g     F .text	00000430 ip_demux
0080f238 g     F .text	00000080 __ulp
008108c8 g     F .text	00000040 __isinfd
00850c88 g     O .bss	00000004 tcp_wakeup_count
00819f24 g     F .text	00000644 OSFlagPend
00850a9a g     O .rwdata	00000002 OSTmrEn
00805898 g     F .text	00000018 __fp_unlock_all
00e22734 g     O .bss	0000c000 http_tx_buffer
0082adc4 g     F .text	000000b4 wait_app_sem
0080e664 g     F .text	00000064 fputc
00850ab8 g     O .rwdata	00000004 ipmcfail_str
00850c9c g     O .bss	00000004 memtrapsize
0082b8e8 g     F .text	00000324 m_copy
00850b00 g     O .rwdata	00000008 alt_fs_list
00e3a3c8 g     O .bss	00000014 mfreeq
00818e44 g     F .text	00000080 OS_StrCopy
0082f1c8 g     F .text	0000005c sobind
008031e8 g     F .text	000002f8 http_handle_post
00845d14 g     F .text	00000078 init_memdev
0080066c g     F .text	00000054 dm9000a_iow
0082bfc8 g     F .text	00000124 nptcp_init
00850a64 g     O .rwdata	00000002 OSMemNameSize
00e3a21c g     O .bss	000000f0 global_TCPwakeup_set
0083b134 g     F .text	0000001c OSInitHookEnd
00831564 g     F .text	000000bc soisdisconnected
0083bd04 g     F .text	00000088 arp_free_pending
00850a90 g     O .rwdata	00000002 OSTCBPrioTblMax
0080ecfc g     F .text	00000010 localeconv
0082f444 g     F .text	000002f4 soclose
00e3a10c g     O .bss	00000014 bigfreeq
00850a8c g     O .rwdata	00000002 OSTaskStatStkChkEn
00850b1c g     O .rwdata	00000004 prompt
00850af0 g     O .rwdata	00000004 tcp_keepidle
0082ce44 g     F .text	000001d4 rawip_soinput
0081af54 g     F .text	00000114 OSMboxCreate
0083a4f8 g     F .text	00000050 alt_ic_isr_register
0084851c g     F .text	00000060 vfwrite
00850a60 g     O .rwdata	00000002 OSMemEn
0083183c g     F .text	000000ac soqinsque
00850d20 g     O .bss	00000004 so_evtmap_delete
00806a24 g     F .text	00000040 fwrite
00812d80 g     F .text	00000068 __hexdig_init
00807c10 g     F .text	00000088 _sscanf_r
00850a6a g     O .rwdata	00000002 OSMutexEn
008509d8 g     O .rwdata	00000008 mapping
00850d0c g     O .bss	00000004 h_ireq
00850b44 g       *ABS*	00000000 _edata
0083e7e4 g     F .text	00000624 ip_fragment
0082246c g     F .text	00000144 iniche_devices_init
00e3a3dc g     O .bss	00000028 tcp_saveti
00825e1c g     F .text	000000f0 con_page
00e3a9f8 g       *ABS*	00000000 _end
00830dec g     F .text	00000540 sogetopt
00816244 g     F .text	0000007c alt_flash_open_dev
00850be4 g     O .bss	00000001 OSIntNesting
00850610 g     O .rwdata	00000030 nettasks
008031b4 g     F .text	00000034 http_send_redirect
00829fc4 g     F .text	00000020 pk_get_max_intrsafe_buf_len
0083f16c g     F .text	0000026c iproute
0082c910 g     F .text	000000e8 np_stripoptions
00850d24 g     O .bss	00000001 so_evtmap
0080cb60 g     F .text	00000074 vfscanf
00850b60 g     O .bss	00000004 board_control_mbox
00820be8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080e720 g     F .text	00000074 _fputs_r
0081ff40 g     F .text	00000210 OSTimeDlyResume
00842b90 g     F .text	00000428 add_route
00819dd0 g     F .text	00000154 OSFlagNameSet
00823300 g     F .text	000000d0 c_older
0081b308 g     F .text	000002c8 OSMboxPend
00850b64 g     O .bss	00000001 to_wstask
00832284 g     F .text	00000090 sbflush
00845db4 g     F .text	00000020 md_fclose
008266b4 g     F .text	0000002c tk_yield
0081f698 g     F .text	000001fc OSTaskStkChk
0083a5e4 g     F .text	000000a0 alt_ic_irq_disable
0082f998 g     F .text	00000608 sosend
00850a66 g     O .rwdata	00000002 OSMemSize
0083ee08 g     F .text	000000ac ip_mymach
00807d8c g     F .text	0000007c __swrite
00850c70 g     O .bss	00000004 cticks_initialized
00850b24 g     O .rwdata	00000004 deflength
0082e8c0 g     F .text	0000022c t_sendto
00850a0c g     O .rwdata	00000004 __malloc_trim_threshold
008075c8 g     F .text	0000006c _perror_r
0083ac78 g     F .text	00000020 altera_nios2_qsys_irq_init
00850be8 g     O .bss	00000004 OSTCBCur
0082effc g     F .text	000001cc socreate
0084a384 g     F .text	00000038 exit
00e3a674 g     O .bss	00000100 arp_table
00850d5c g     O .bss	00000004 icmpdu_hook
00850a68 g     O .rwdata	00000002 OSMemTblSize
00806808 g     F .text	000000c8 _fwalk_reent
0083b9e0 g     F .text	00000024 create_apptasks
00850aec g     O .rwdata	00000004 tcp_ttl
0080f834 g     F .text	0000018c __mdiff
008162c0 g     F .text	00000054 alt_flash_close_dev
0082b40c g     F .text	0000004c ncpfree
00805358 g     F .text	00000060 __modsi3
00850bfc g     O .bss	00000004 MaxLnh
008050fc g     F .text	0000006c lcd_output_text
008465c0 g     F .text	0000008c inet_ntop
00843ecc g     F .text	0000002c udp_maxalloc
0081aeb0 g     F .text	000000a4 OSMboxAccept
01000000 g       *ABS*	00000000 __alt_data_end
01884020 g     F .exceptions	00000000 alt_exception
008057d8 g     F .text	00000004 __sfp_lock_release
00817be8 g     F .text	00000054 OSInit
008027f8 g     F .text	00000740 http_send_file_header
0081fac0 g     F .text	00000144 OSTaskQuery
0083b288 g     F .text	00000088 icmp_port_du
00822084 g     F .text	00000078 alt_up_character_lcd_string
00850ccc g     O .bss	00000004 tcp_iss
0081d5cc g     F .text	000000ac OS_QInit
00810938 g     F .text	000000c0 __sccl
00850adc g     O .rwdata	00000004 bigbufsiz
008053d4 g     F .text	0000000c atoi
00818ec4 g     F .text	00000058 OS_StrLen
00837bd4 g     F .text	00000080 tcp_putseq
0081bf68 g     F .text	00000120 OSMemNameSet
0084bcd8 g     O .rodata	00000101 _ctype_
00801340 g     F .text	0000011c dm9ka_pkt_send
00831e94 g     F .text	00000208 sbappendaddr
00850d54 g     O .bss	00000004 vfs_total_rw_space
00845118 g     F .text	00000140 ip_getmoptions
00850a82 g     O .rwdata	00000002 OSTaskProfileEn
00843c0c g     F .text	00000130 udpswap
00850bec g     O .bss	00000004 OSTime
00850ca8 g     O .bss	00000004 nextslow
00837ccc g     F .text	000002a0 tcp_slowtimo
008378dc g     F .text	00000118 tcp_newtcpcb
0083ca48 g     F .text	000001a8 send_via_arp
00805200 g     F .text	0000007c LED_task
00826978 g     F .text	000000bc dhc_init
00840750 g     F .text	00000064 ip_reasm_find_ire
00815a84 g     F .text	000000a8 __fpcmp_parts_f
00e382b8 g     O .bss	00000800 OSTaskIdleStk
00805a3c g     F .text	000000f4 _fopen_r
0084a93c g     F .text	0000002c _exit
00848cfc g     F .text	00000064 isvfile_locked
00810908 g     F .text	00000030 __isnand
0081b880 g     F .text	0000018c OSMboxPostOpt
00825330 g     F .text	00000168 bsd_select
00839bbc g     F .text	00000154 alt_alarm_start
00819c8c g     F .text	00000144 OSFlagNameGet
0080109c g     F .text	00000040 dm9Ka_isr_wrap
00843ef8 g     F .text	00000040 udp_free
0082a090 g     F .text	000000c8 getq
00848e70 g     F .text	00000024 prep_vfs
00820150 g     F .text	00000064 OSTimeGet
00850b18 g     O .rwdata	00000004 name
008324e4 g     F .text	00000110 sbdropend
008138e4 g     F .text	00000098 __muldi3
00806a64 g     F .text	00000194 __smakebuf_r
0083cbf0 g     F .text	00000118 cb_arpent_tmo
00808844 g     F .text	00000074 strlen
008449e0 g     F .text	00000148 IPADDR_TO_NETP
008251a0 g     F .text	00000030 bsd_inet_ntoa
0083b0b8 g     F .text	0000001c OSTaskSwHook
00816a1c g     F .text	00000188 open
0082a318 g     F .text	00000238 udp_open
00e38ab8 g     O .bss	00000b40 OSEventTbl
00831a08 g     F .text	00000050 socantsendmore
00850d58 g     O .bss	00000004 vfs_total_dyna_files
008153cc g     F .text	00000088 __gedf2
00e395f8 g     O .bss	00000510 OSTCBTbl
00812e98 g     F .text	000007b8 __gethex
00850cf4 g     O .bss	00000004 arpReqsOut
0081e13c g     F .text	00000104 OSSemSet
00850b40 g     O .rwdata	00000004 http_root_path
00828b64 g     F .text	000002bc dhc_extract_opts
0083fc2c g     F .text	00000590 ip_reasm_compute_overlap
008066fc g     F .text	000000f8 _ftell_r
00807fa8 g     F .text	000000e0 strchr
00e39ef6 g     O .bss	00000012 ipreturn
00850d14 g     O .bss	00000004 port_prep
00850693 g     O .rwdata	0000000d tcp_backoff
00831370 g     F .text	0000006c soisconnecting
0080e794 g     F .text	0000001c fputs
00822148 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00850a24 g     O .rwdata	00000004 alt_priority_mask
008444cc g     F .text	0000024c igmpv2_process_query
00832688 g     F .text	00000220 t_select
0081d84c g     F .text	000002a0 OSSemDel
00839a60 g     F .text	0000015c udp4_sockaddr
00850bf0 g     O .bss	00000004 OSFlagFreeList
00846e38 g     F .text	00000210 in_pcbconnect
00850cc0 g     O .bss	00000004 dropline
00850d10 g     O .bss	00000004 ire_cticks
0083a548 g     F .text	0000009c alt_ic_irq_enable
00850a48 g     O .rwdata	00000002 OSEventNameSize
0081b068 g     F .text	000002a0 OSMboxDel
0080b430 g     F .text	00000024 __vfprintf_internal
0082622c g     F .text	00000088 tk_netmain
00847048 g     F .text	00000060 in_pcbdisconnect
00850bf4 g     O .bss	00000001 OSStatRdy
00e39b08 g     O .bss	00000054 OSTCBPrioTbl
00816fe0 g     F .text	000000ac __env_lock
00850a8e g     O .rwdata	00000002 OSTaskSwHookEn
0085086c g     O .rwdata	00000024 mdio
00824a34 g     F .text	00000138 bsd_accept
00803ca8 g     F .text	00000030 die_with_error
00850afc g     O .rwdata	00000004 tcp_recvspace
00802358 g     F .text	000002f4 http_process_request
00814b24 g     F .text	00000080 __subdf3
00838e50 g     F .text	0000004c tcpinit
00850c1c g     O .bss	00000004 igmp_all_rtrs_group
0082cdd4 g     F .text	00000070 rawip_lookup
0083ba84 g     F .text	000000b0 fcntl
0080f114 g     F .text	000000c4 __lo0bits
0083209c g     F .text	000001e8 sbcompress
0080b454 g     F .text	00001680 __svfscanf_r
00e34838 g     O .bss	00002000 BCTaskStk
00850a2c g     O .rwdata	00000008 alt_alarm_list
008129a4 g     F .text	0000019c _ungetc_r
008379f4 g     F .text	000000ac tcp_drop
00850a56 g     O .rwdata	00000002 OSFlagWidth
0083a0f8 g     F .text	00000064 _do_ctors
00837fc8 g     F .text	0000049c tcp_timers
00823994 g     F .text	00000090 if_netnumber
00845258 g     F .text	00000084 ip_freemoptions
0083132c g     F .text	00000044 sohasoutofband
008333a4 g     F .text	00002554 tcp_input
00824b6c g     F .text	0000012c bsd_getpeername
008251d0 g     F .text	00000160 bsd_recvfrom
00822418 g     F .text	00000054 close
00850c4c g     O .bss	00000004 dsc_bpreplys
00850ba0 g     O .bss	00000004 alt_envsem
00850bf8 g     O .bss	00000004 OSIdleCtrRun
00818284 g     F .text	00000020 OSVersion
00850aa0 g     O .rwdata	00000002 OSTmrCfgWheelSize
0081fc04 g     F .text	0000007c OS_TaskStkClr
008473fc g     F .text	00000028 set_vfopen_error
00815b58 g     F .text	00000314 __pack_d
00850a7a g     O .rwdata	00000002 OSTaskCreateEn
00850670 g     O .rwdata	00000018 rawip_protosw
00831ae0 g     F .text	00000068 sbwait
00818874 g     F .text	00000068 OS_EventWaitListInit
00828e20 g     F .text	0000059c dhc_second
00850ce0 g     O .bss	00000004 port_1s_callout
0083b150 g     F .text	0000001c OSTaskIdleHook
0084a4e4 g     F .text	00000014 free
008057dc g     F .text	00000004 __sinit_lock_acquire
0080fd30 g     F .text	00000100 __multadd
0080f07c g     F .text	00000028 _Bfree
0081f894 g     F .text	0000022c OSTaskSuspend
008509f0 g     O .rwdata	00000008 upload_field
00831620 g     F .text	0000021c sonewconn
00849048 g     F .text	00000c34 icmprcv
0082b4f8 g     F .text	000000d0 pffindproto
008215ec g     F .text	0000012c check_directory_header
00818f1c g     F .text	0000005c OS_TaskIdle
00850aa6 g     O .rwdata	00000002 OSTmrTblSize
0081d44c g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

01884020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1884020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1884024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1884028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 188402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1884030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1884034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1884038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 188403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1884040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1884044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1884048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 188404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1884050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1884054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1884058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 188405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1884060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1884064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1884068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 188406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1884070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1884074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1884078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 188407c:	10000326 	beq	r2,zero,188408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1884080:	20000226 	beq	r4,zero,188408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1884084:	18840ec0 	call	18840ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1884088:	00000306 	br	1884098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 188408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1884090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1884094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1884098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 188409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 18840a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 18840a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 18840a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 18840ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 18840b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 18840b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 18840b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 18840bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 18840c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 18840c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 18840c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 18840cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 18840d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 18840d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 18840d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 18840dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 18840e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 18840e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 18840e8:	ef80083a 	eret

018840ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 18840ec:	defff904 	addi	sp,sp,-28
 18840f0:	dfc00615 	stw	ra,24(sp)
 18840f4:	df000515 	stw	fp,20(sp)
 18840f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 18840fc:	0817c3c0 	call	817c3c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1884100:	0005313a 	rdctl	r2,ipending
 1884104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1884108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 188410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1884110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1884114:	00800044 	movi	r2,1
 1884118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 188411c:	e0ffff17 	ldw	r3,-4(fp)
 1884120:	e0bffe17 	ldw	r2,-8(fp)
 1884124:	1884703a 	and	r2,r3,r2
 1884128:	1005003a 	cmpeq	r2,r2,zero
 188412c:	1000161e 	bne	r2,zero,1884188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1884130:	e0bffd17 	ldw	r2,-12(fp)
 1884134:	00c03934 	movhi	r3,228
 1884138:	18e94404 	addi	r3,r3,-23280
 188413c:	100490fa 	slli	r2,r2,3
 1884140:	10c5883a 	add	r2,r2,r3
 1884144:	11400017 	ldw	r5,0(r2)
 1884148:	e0bffd17 	ldw	r2,-12(fp)
 188414c:	00c03934 	movhi	r3,228
 1884150:	18e94404 	addi	r3,r3,-23280
 1884154:	100490fa 	slli	r2,r2,3
 1884158:	10c5883a 	add	r2,r2,r3
 188415c:	10800104 	addi	r2,r2,4
 1884160:	11000017 	ldw	r4,0(r2)
 1884164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1884168:	0005313a 	rdctl	r2,ipending
 188416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1884170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1884174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1884178:	e0bfff17 	ldw	r2,-4(fp)
 188417c:	1004c03a 	cmpne	r2,r2,zero
 1884180:	103fe31e 	bne	r2,zero,1884110 <alt_irq_handler+0x24>
 1884184:	00000706 	br	18841a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1884188:	e0bffe17 	ldw	r2,-8(fp)
 188418c:	1085883a 	add	r2,r2,r2
 1884190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1884194:	e0bffd17 	ldw	r2,-12(fp)
 1884198:	10800044 	addi	r2,r2,1
 188419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 18841a0:	003fde06 	br	188411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 18841a4:	0817cb80 	call	817cb8 <OSIntExit>
}
 18841a8:	e037883a 	mov	sp,fp
 18841ac:	dfc00117 	ldw	ra,4(sp)
 18841b0:	df000017 	ldw	fp,0(sp)
 18841b4:	dec00204 	addi	sp,sp,8
 18841b8:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800000:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
  800004:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800010:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800014:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800018:	06802174 	movhi	gp,133
    ori gp, gp, %lo(_gp)
  80001c:	d6a27614 	ori	gp,gp,35288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800020:	00802174 	movhi	r2,133
    ori r2, r2, %lo(__bss_start)
  800024:	1082d114 	ori	r2,r2,2884

    movhi r3, %hi(__bss_end)
  800028:	00c038f4 	movhi	r3,227
    ori r3, r3, %lo(__bss_end)
  80002c:	18ea7e14 	ori	r3,r3,43512

    beq r2, r3, 1f
  800030:	10c00326 	beq	r2,r3,800040 <_start+0x40>

0:
    stw zero, (r2)
  800034:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800038:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80003c:	10fffd36 	bltu	r2,r3,800034 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800040:	08168780 	call	816878 <alt_main>

00800044 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800044:	003fff06 	br	800044 <alt_after_alt_main>

00800048 <alt_uCOSIIErrorHandler>:
#include <errno.h>
#include "includes.h"
#include "alt_error_handler.h"
 
void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
  800048:	defff904 	addi	sp,sp,-28
  80004c:	dfc00615 	stw	ra,24(sp)
  800050:	df000515 	stw	fp,20(sp)
  800054:	df000504 	addi	fp,sp,20
  800058:	e17ffd15 	stw	r5,-12(fp)
  80005c:	e13ffc05 	stb	r4,-16(fp)
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
  800060:	e0bffc03 	ldbu	r2,-16(fp)
  800064:	1005003a 	cmpeq	r2,r2,zero
  800068:	10017b1e 	bne	r2,zero,800658 <alt_uCOSIIErrorHandler+0x610>
   {
      return;
   }
   
   fault_level = SYSTEM;  
  80006c:	00800084 	movi	r2,2
  800070:	e0bffb15 	stw	r2,-20(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
  800074:	0817db80 	call	817db8 <OSSchedLock>
      
   switch (error_code)
  800078:	e0bffc03 	ldbu	r2,-16(fp)
  80007c:	e0bffe15 	stw	r2,-8(fp)
  800080:	e0fffe17 	ldw	r3,-8(fp)
  800084:	18800a20 	cmpeqi	r2,r3,40
  800088:	1000371e 	bne	r2,zero,800168 <alt_uCOSIIErrorHandler+0x120>
  80008c:	e0fffe17 	ldw	r3,-8(fp)
  800090:	18800a48 	cmpgei	r2,r3,41
  800094:	10001a1e 	bne	r2,zero,800100 <alt_uCOSIIErrorHandler+0xb8>
  800098:	e0fffe17 	ldw	r3,-8(fp)
  80009c:	18800120 	cmpeqi	r2,r3,4
  8000a0:	1000761e 	bne	r2,zero,80027c <alt_uCOSIIErrorHandler+0x234>
  8000a4:	e0fffe17 	ldw	r3,-8(fp)
  8000a8:	18800148 	cmpgei	r2,r3,5
  8000ac:	10000a1e 	bne	r2,zero,8000d8 <alt_uCOSIIErrorHandler+0x90>
  8000b0:	e0fffe17 	ldw	r3,-8(fp)
  8000b4:	188000a0 	cmpeqi	r2,r3,2
  8000b8:	1000911e 	bne	r2,zero,800300 <alt_uCOSIIErrorHandler+0x2b8>
  8000bc:	e0fffe17 	ldw	r3,-8(fp)
  8000c0:	188000c8 	cmpgei	r2,r3,3
  8000c4:	1000771e 	bne	r2,zero,8002a4 <alt_uCOSIIErrorHandler+0x25c>
  8000c8:	e0fffe17 	ldw	r3,-8(fp)
  8000cc:	18800060 	cmpeqi	r2,r3,1
  8000d0:	10005e1e 	bne	r2,zero,80024c <alt_uCOSIIErrorHandler+0x204>
  8000d4:	0000d806 	br	800438 <alt_uCOSIIErrorHandler+0x3f0>
  8000d8:	e0fffe17 	ldw	r3,-8(fp)
  8000dc:	18800520 	cmpeqi	r2,r3,20
  8000e0:	10004f1e 	bne	r2,zero,800220 <alt_uCOSIIErrorHandler+0x1d8>
  8000e4:	e0fffe17 	ldw	r3,-8(fp)
  8000e8:	188007a0 	cmpeqi	r2,r3,30
  8000ec:	1000ad1e 	bne	r2,zero,8003a4 <alt_uCOSIIErrorHandler+0x35c>
  8000f0:	e0fffe17 	ldw	r3,-8(fp)
  8000f4:	188002a0 	cmpeqi	r2,r3,10
  8000f8:	1000761e 	bne	r2,zero,8002d4 <alt_uCOSIIErrorHandler+0x28c>
  8000fc:	0000ce06 	br	800438 <alt_uCOSIIErrorHandler+0x3f0>
  800100:	e0fffe17 	ldw	r3,-8(fp)
  800104:	18801020 	cmpeqi	r2,r3,64
  800108:	10009c1e 	bne	r2,zero,80037c <alt_uCOSIIErrorHandler+0x334>
  80010c:	e0fffe17 	ldw	r3,-8(fp)
  800110:	18801048 	cmpgei	r2,r3,65
  800114:	10000a1e 	bne	r2,zero,800140 <alt_uCOSIIErrorHandler+0xf8>
  800118:	e0fffe17 	ldw	r3,-8(fp)
  80011c:	18800f60 	cmpeqi	r2,r3,61
  800120:	10008b1e 	bne	r2,zero,800350 <alt_uCOSIIErrorHandler+0x308>
  800124:	e0fffe17 	ldw	r3,-8(fp)
  800128:	18800fa0 	cmpeqi	r2,r3,62
  80012c:	10007e1e 	bne	r2,zero,800328 <alt_uCOSIIErrorHandler+0x2e0>
  800130:	e0fffe17 	ldw	r3,-8(fp)
  800134:	18800aa0 	cmpeqi	r2,r3,42
  800138:	1000151e 	bne	r2,zero,800190 <alt_uCOSIIErrorHandler+0x148>
  80013c:	0000be06 	br	800438 <alt_uCOSIIErrorHandler+0x3f0>
  800140:	e0fffe17 	ldw	r3,-8(fp)
  800144:	18801920 	cmpeqi	r2,r3,100
  800148:	1000a11e 	bne	r2,zero,8003d0 <alt_uCOSIIErrorHandler+0x388>
  80014c:	e0fffe17 	ldw	r3,-8(fp)
  800150:	18803fe0 	cmpeqi	r2,r3,255
  800154:	1000aa1e 	bne	r2,zero,800400 <alt_uCOSIIErrorHandler+0x3b8>
  800158:	e0fffe17 	ldw	r3,-8(fp)
  80015c:	188010a0 	cmpeqi	r2,r3,66
  800160:	10001d1e 	bne	r2,zero,8001d8 <alt_uCOSIIErrorHandler+0x190>
  800164:	0000b406 	br	800438 <alt_uCOSIIErrorHandler+0x3f0>
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
  800168:	00802174 	movhi	r2,133
  80016c:	10828104 	addi	r2,r2,2564
  800170:	10800017 	ldw	r2,0(r2)
  800174:	11c00317 	ldw	r7,12(r2)
  800178:	01002174 	movhi	r4,133
  80017c:	212a5b04 	addi	r4,r4,-22164
  800180:	01400044 	movi	r5,1
  800184:	01800c44 	movi	r6,49
  800188:	0806a240 	call	806a24 <fwrite>
         break;
  80018c:	0000c106 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_PRIO_INVALID:
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
  800190:	00802174 	movhi	r2,133
  800194:	10828104 	addi	r2,r2,2564
  800198:	10800017 	ldw	r2,0(r2)
  80019c:	11c00317 	ldw	r7,12(r2)
  8001a0:	01002174 	movhi	r4,133
  8001a4:	212a6804 	addi	r4,r4,-22112
  8001a8:	01400044 	movi	r5,1
  8001ac:	01800c44 	movi	r6,49
  8001b0:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
  8001b4:	00802174 	movhi	r2,133
  8001b8:	10828104 	addi	r2,r2,2564
  8001bc:	10800017 	ldw	r2,0(r2)
  8001c0:	11000317 	ldw	r4,12(r2)
  8001c4:	01402174 	movhi	r5,133
  8001c8:	296a7504 	addi	r5,r5,-22060
  8001cc:	01800504 	movi	r6,20
  8001d0:	0805b4c0 	call	805b4c <fprintf>
            OS_LOWEST_PRIO);
         break;
  8001d4:	0000af06 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_NO_MORE_TCB:
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
  8001d8:	00802174 	movhi	r2,133
  8001dc:	10828104 	addi	r2,r2,2564
  8001e0:	10800017 	ldw	r2,0(r2)
  8001e4:	11c00317 	ldw	r7,12(r2)
  8001e8:	01002174 	movhi	r4,133
  8001ec:	212a8204 	addi	r4,r4,-22008
  8001f0:	01400044 	movi	r5,1
  8001f4:	01800a04 	movi	r6,40
  8001f8:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
  8001fc:	00802174 	movhi	r2,133
  800200:	10828104 	addi	r2,r2,2564
  800204:	10800017 	ldw	r2,0(r2)
  800208:	11000317 	ldw	r4,12(r2)
  80020c:	01402174 	movhi	r5,133
  800210:	296a8d04 	addi	r5,r5,-21964
  800214:	01800284 	movi	r6,10
  800218:	0805b4c0 	call	805b4c <fprintf>
         break;
  80021c:	00009d06 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_MBOX_FULL:
         fault_level = NONE;
  800220:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
  800224:	00802174 	movhi	r2,133
  800228:	10828104 	addi	r2,r2,2564
  80022c:	10800017 	ldw	r2,0(r2)
  800230:	11c00317 	ldw	r7,12(r2)
  800234:	01002174 	movhi	r4,133
  800238:	212a9604 	addi	r4,r4,-21928
  80023c:	01400044 	movi	r5,1
  800240:	01800c84 	movi	r6,50
  800244:	0806a240 	call	806a24 <fwrite>
         break;
  800248:	00009206 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_EVENT_TYPE:
         fault_level = TASK;
  80024c:	00800044 	movi	r2,1
  800250:	e0bffb15 	stw	r2,-20(fp)
         fprintf(stderr, 
  800254:	00802174 	movhi	r2,133
  800258:	10828104 	addi	r2,r2,2564
  80025c:	10800017 	ldw	r2,0(r2)
  800260:	11c00317 	ldw	r7,12(r2)
  800264:	01002174 	movhi	r4,133
  800268:	212aa304 	addi	r4,r4,-21876
  80026c:	01400044 	movi	r5,1
  800270:	01801244 	movi	r6,73
  800274:	0806a240 	call	806a24 <fwrite>
"Attempted to access a resource with no match for the required data type.\n");
         break;
  800278:	00008606 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
  80027c:	00802174 	movhi	r2,133
  800280:	10828104 	addi	r2,r2,2564
  800284:	10800017 	ldw	r2,0(r2)
  800288:	11c00317 	ldw	r7,12(r2)
  80028c:	01002174 	movhi	r4,133
  800290:	212ab604 	addi	r4,r4,-21800
  800294:	01400044 	movi	r5,1
  800298:	01800c44 	movi	r6,49
  80029c:	0806a240 	call	806a24 <fwrite>
         break;
  8002a0:	00007c06 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_POST_NULL_PTR:
         fault_level = TASK;
  8002a4:	00800044 	movi	r2,1
  8002a8:	e0bffb15 	stw	r2,-20(fp)
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
  8002ac:	00802174 	movhi	r2,133
  8002b0:	10828104 	addi	r2,r2,2564
  8002b4:	10800017 	ldw	r2,0(r2)
  8002b8:	11c00317 	ldw	r7,12(r2)
  8002bc:	01002174 	movhi	r4,133
  8002c0:	212ac304 	addi	r4,r4,-21748
  8002c4:	01400044 	movi	r5,1
  8002c8:	01800a44 	movi	r6,41
  8002cc:	0806a240 	call	806a24 <fwrite>
         break;
  8002d0:	00007006 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TIMEOUT:
         fault_level = NONE;
  8002d4:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Resource not received in specified time\n");
  8002d8:	00802174 	movhi	r2,133
  8002dc:	10828104 	addi	r2,r2,2564
  8002e0:	10800017 	ldw	r2,0(r2)
  8002e4:	11c00317 	ldw	r7,12(r2)
  8002e8:	01002174 	movhi	r4,133
  8002ec:	212ace04 	addi	r4,r4,-21704
  8002f0:	01400044 	movi	r5,1
  8002f4:	01800a04 	movi	r6,40
  8002f8:	0806a240 	call	806a24 <fwrite>
         break;
  8002fc:	00006506 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
  800300:	00802174 	movhi	r2,133
  800304:	10828104 	addi	r2,r2,2564
  800308:	10800017 	ldw	r2,0(r2)
  80030c:	11c00317 	ldw	r7,12(r2)
  800310:	01002174 	movhi	r4,133
  800314:	212ad904 	addi	r4,r4,-21660
  800318:	01400044 	movi	r5,1
  80031c:	01800b04 	movi	r6,44
  800320:	0806a240 	call	806a24 <fwrite>
         break;
  800324:	00005b06 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TASK_DEL_IDLE:
         fprintf(stderr, "Attempted to delete the IDLE task\n");
  800328:	00802174 	movhi	r2,133
  80032c:	10828104 	addi	r2,r2,2564
  800330:	10800017 	ldw	r2,0(r2)
  800334:	11c00317 	ldw	r7,12(r2)
  800338:	01002174 	movhi	r4,133
  80033c:	212ae504 	addi	r4,r4,-21612
  800340:	01400044 	movi	r5,1
  800344:	01800884 	movi	r6,34
  800348:	0806a240 	call	806a24 <fwrite>
         break;
  80034c:	00005106 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
  800350:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
  800354:	00802174 	movhi	r2,133
  800358:	10828104 	addi	r2,r2,2564
  80035c:	10800017 	ldw	r2,0(r2)
  800360:	11c00317 	ldw	r7,12(r2)
  800364:	01002174 	movhi	r4,133
  800368:	212aee04 	addi	r4,r4,-21576
  80036c:	01400044 	movi	r5,1
  800370:	01800bc4 	movi	r6,47
  800374:	0806a240 	call	806a24 <fwrite>
         break;
  800378:	00004606 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
  80037c:	00802174 	movhi	r2,133
  800380:	10828104 	addi	r2,r2,2564
  800384:	10800017 	ldw	r2,0(r2)
  800388:	11c00317 	ldw	r7,12(r2)
  80038c:	01002174 	movhi	r4,133
  800390:	212afa04 	addi	r4,r4,-21528
  800394:	01400044 	movi	r5,1
  800398:	018009c4 	movi	r6,39
  80039c:	0806a240 	call	806a24 <fwrite>
         break;
  8003a0:	00003c06 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_Q_FULL:
         fault_level = NONE;
  8003a4:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Attempted to post to a full message queue\n");
  8003a8:	00802174 	movhi	r2,133
  8003ac:	10828104 	addi	r2,r2,2564
  8003b0:	10800017 	ldw	r2,0(r2)
  8003b4:	11c00317 	ldw	r7,12(r2)
  8003b8:	01002174 	movhi	r4,133
  8003bc:	212b0404 	addi	r4,r4,-21488
  8003c0:	01400044 	movi	r5,1
  8003c4:	01800a84 	movi	r6,42
  8003c8:	0806a240 	call	806a24 <fwrite>
         break;
  8003cc:	00003106 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_NOT_MUTEX_OWNER:
         fault_level = TASK;
  8003d0:	00800044 	movi	r2,1
  8003d4:	e0bffb15 	stw	r2,-20(fp)
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
  8003d8:	00802174 	movhi	r2,133
  8003dc:	10828104 	addi	r2,r2,2564
  8003e0:	10800017 	ldw	r2,0(r2)
  8003e4:	11c00317 	ldw	r7,12(r2)
  8003e8:	01002174 	movhi	r4,133
  8003ec:	212b0f04 	addi	r4,r4,-21444
  8003f0:	01400044 	movi	r5,1
  8003f4:	01800c04 	movi	r6,48
  8003f8:	0806a240 	call	806a24 <fwrite>
         break;
  8003fc:	00002506 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
  800400:	00800084 	movi	r2,2
  800404:	e0bffb15 	stw	r2,-20(fp)
         printf(
  800408:	01002174 	movhi	r4,133
  80040c:	212b1c04 	addi	r4,r4,-21392
  800410:	08076480 	call	807648 <printf>
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
  800414:	00802174 	movhi	r2,133
  800418:	10828104 	addi	r2,r2,2564
  80041c:	10800017 	ldw	r2,0(r2)
  800420:	11000317 	ldw	r4,12(r2)
  800424:	e1bffd17 	ldw	r6,-12(fp)
  800428:	01402174 	movhi	r5,133
  80042c:	296b2c04 	addi	r5,r5,-21328
  800430:	0805b4c0 	call	805b4c <fprintf>
                 (char *)expanded_diagnosis_ptr);
         break;           
  800434:	00001706 	br	800494 <alt_uCOSIIErrorHandler+0x44c>
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
  800438:	01002174 	movhi	r4,133
  80043c:	212b3704 	addi	r4,r4,-21284
  800440:	08077600 	call	807760 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]:");
  800444:	00802174 	movhi	r2,133
  800448:	10828104 	addi	r2,r2,2564
  80044c:	10800017 	ldw	r2,0(r2)
  800450:	11c00317 	ldw	r7,12(r2)
  800454:	01002174 	movhi	r4,133
  800458:	212b4504 	addi	r4,r4,-21228
  80045c:	01400044 	movi	r5,1
  800460:	01800404 	movi	r6,16
  800464:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, "\nError_code %d.\n", error_code);
  800468:	00802174 	movhi	r2,133
  80046c:	10828104 	addi	r2,r2,2564
  800470:	10800017 	ldw	r2,0(r2)
  800474:	11000317 	ldw	r4,12(r2)
  800478:	e1bffc03 	ldbu	r6,-16(fp)
  80047c:	01402174 	movhi	r5,133
  800480:	296b4a04 	addi	r5,r5,-21208
  800484:	0805b4c0 	call	805b4c <fprintf>
         perror("\n[MicroC/OS-II]: (Not a MicroC/OS-II error), ERRNO: ");
  800488:	01002174 	movhi	r4,133
  80048c:	212b4f04 	addi	r4,r4,-21188
  800490:	08076340 	call	807634 <perror>

   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */  
   switch (fault_level) {
  800494:	e0bffb17 	ldw	r2,-20(fp)
  800498:	e0bfff15 	stw	r2,-4(fp)
  80049c:	e0ffff17 	ldw	r3,-4(fp)
  8004a0:	18800060 	cmpeqi	r2,r3,1
  8004a4:	1000071e 	bne	r2,zero,8004c4 <alt_uCOSIIErrorHandler+0x47c>
  8004a8:	e0ffff17 	ldw	r3,-4(fp)
  8004ac:	18800070 	cmpltui	r2,r3,1
  8004b0:	10003f1e 	bne	r2,zero,8005b0 <alt_uCOSIIErrorHandler+0x568>
  8004b4:	e0ffff17 	ldw	r3,-4(fp)
  8004b8:	188000a0 	cmpeqi	r2,r3,2
  8004bc:	10001d1e 	bne	r2,zero,800534 <alt_uCOSIIErrorHandler+0x4ec>
  8004c0:	00005806 	br	800624 <alt_uCOSIIErrorHandler+0x5dc>
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is TASK).");
  8004c4:	01002174 	movhi	r4,133
  8004c8:	212b5d04 	addi	r4,r4,-21132
  8004cc:	08076480 	call	807648 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is TASK");
  8004d0:	00802174 	movhi	r2,133
  8004d4:	10828104 	addi	r2,r2,2564
  8004d8:	10800017 	ldw	r2,0(r2)
  8004dc:	11c00317 	ldw	r7,12(r2)
  8004e0:	01002174 	movhi	r4,133
  8004e4:	212b6a04 	addi	r4,r4,-21080
  8004e8:	01400044 	movi	r5,1
  8004ec:	01800904 	movi	r6,36
  8004f0:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Task is being deleted.\n");
  8004f4:	00802174 	movhi	r2,133
  8004f8:	10828104 	addi	r2,r2,2564
  8004fc:	10800017 	ldw	r2,0(r2)
  800500:	11c00317 	ldw	r7,12(r2)
  800504:	01002174 	movhi	r4,133
  800508:	212b7404 	addi	r4,r4,-21040
  80050c:	01400044 	movi	r5,1
  800510:	01800a04 	movi	r6,40
  800514:	0806a240 	call	806a24 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
  800518:	0817e440 	call	817e44 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
  80051c:	01003fc4 	movi	r4,255
  800520:	081eb880 	call	81eb88 <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
  800524:	e13ffc03 	ldbu	r4,-16(fp)
  800528:	000b883a 	mov	r5,zero
  80052c:	08000480 	call	800048 <alt_uCOSIIErrorHandler>
         break;
  800530:	00004806 	br	800654 <alt_uCOSIIErrorHandler+0x60c>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is SYSTEM).");    
  800534:	01002174 	movhi	r4,133
  800538:	212b7f04 	addi	r4,r4,-20996
  80053c:	08076480 	call	807648 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is SYSTEM");
  800540:	00802174 	movhi	r2,133
  800544:	10828104 	addi	r2,r2,2564
  800548:	10800017 	ldw	r2,0(r2)
  80054c:	11c00317 	ldw	r7,12(r2)
  800550:	01002174 	movhi	r4,133
  800554:	212b8d04 	addi	r4,r4,-20940
  800558:	01400044 	movi	r5,1
  80055c:	01800984 	movi	r6,38
  800560:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
  800564:	00802174 	movhi	r2,133
  800568:	10828104 	addi	r2,r2,2564
  80056c:	10800017 	ldw	r2,0(r2)
  800570:	11c00317 	ldw	r7,12(r2)
  800574:	01002174 	movhi	r4,133
  800578:	212b9704 	addi	r4,r4,-20900
  80057c:	01400044 	movi	r5,1
  800580:	01800bc4 	movi	r6,47
  800584:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
  800588:	00802174 	movhi	r2,133
  80058c:	10828104 	addi	r2,r2,2564
  800590:	10800017 	ldw	r2,0(r2)
  800594:	11c00317 	ldw	r7,12(r2)
  800598:	01002174 	movhi	r4,133
  80059c:	212ba304 	addi	r4,r4,-20852
  8005a0:	01400044 	movi	r5,1
  8005a4:	01800cc4 	movi	r6,51
  8005a8:	0806a240 	call	806a24 <fwrite>
         while(1); /* Since scheduler is locked,loop halts all task activity.*/
  8005ac:	003fff06 	br	8005ac <alt_uCOSIIErrorHandler+0x564>
         break;
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
  8005b0:	00802174 	movhi	r2,133
  8005b4:	10828104 	addi	r2,r2,2564
  8005b8:	10800017 	ldw	r2,0(r2)
  8005bc:	11c00317 	ldw	r7,12(r2)
  8005c0:	01002174 	movhi	r4,133
  8005c4:	212bb004 	addi	r4,r4,-20800
  8005c8:	01400044 	movi	r5,1
  8005cc:	01800904 	movi	r6,36
  8005d0:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
  8005d4:	00802174 	movhi	r2,133
  8005d8:	10828104 	addi	r2,r2,2564
  8005dc:	10800017 	ldw	r2,0(r2)
  8005e0:	11c00317 	ldw	r7,12(r2)
  8005e4:	01002174 	movhi	r4,133
  8005e8:	212bba04 	addi	r4,r4,-20760
  8005ec:	01400044 	movi	r5,1
  8005f0:	01800c84 	movi	r6,50
  8005f4:	0806a240 	call	806a24 <fwrite>
         fprintf(stderr, 
  8005f8:	00802174 	movhi	r2,133
  8005fc:	10828104 	addi	r2,r2,2564
  800600:	10800017 	ldw	r2,0(r2)
  800604:	11c00317 	ldw	r7,12(r2)
  800608:	01002174 	movhi	r4,133
  80060c:	212bc704 	addi	r4,r4,-20708
  800610:	01400044 	movi	r5,1
  800614:	01800f84 	movi	r6,62
  800618:	0806a240 	call	806a24 <fwrite>
            "returned to task to complete processing at application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */
  80061c:	0817e440 	call	817e44 <OSSchedUnlock>
         return;   
  800620:	00000d06 	br	800658 <alt_uCOSIIErrorHandler+0x610>
         break;      
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
  800624:	01002174 	movhi	r4,133
  800628:	212bd704 	addi	r4,r4,-20644
  80062c:	08077600 	call	807760 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
  800630:	00802174 	movhi	r2,133
  800634:	10828104 	addi	r2,r2,2564
  800638:	10800017 	ldw	r2,0(r2)
  80063c:	11c00317 	ldw	r7,12(r2)
  800640:	01002174 	movhi	r4,133
  800644:	212be504 	addi	r4,r4,-20588
  800648:	01400044 	movi	r5,1
  80064c:	01800ac4 	movi	r6,43
  800650:	0806a240 	call	806a24 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
  800654:	003fff06 	br	800654 <alt_uCOSIIErrorHandler+0x60c>
}
  800658:	e037883a 	mov	sp,fp
  80065c:	dfc00117 	ldw	ra,4(sp)
  800660:	df000017 	ldw	fp,0(sp)
  800664:	dec00204 	addi	sp,sp,8
  800668:	f800283a 	ret

0080066c <dm9000a_iow>:
int dm9ka_pkt_send(PACKET pkt);
int dm9ka_close(int iface);


void dm9000a_iow(unsigned int reg, unsigned int data)
{
  80066c:	defffc04 	addi	sp,sp,-16
  800670:	dfc00315 	stw	ra,12(sp)
  800674:	df000215 	stw	fp,8(sp)
  800678:	df000204 	addi	fp,sp,8
  80067c:	e13ffe15 	stw	r4,-8(fp)
  800680:	e17fff15 	stw	r5,-4(fp)
  IOWR(DM9000A_INST_BASE, IO_addr, reg);
  800684:	e0fffe17 	ldw	r3,-8(fp)
  800688:	00806274 	movhi	r2,393
  80068c:	10a50c04 	addi	r2,r2,-27600
  800690:	10c00035 	stwio	r3,0(r2)
  usleep(STD_DELAY);
  800694:	01000044 	movi	r4,1
  800698:	0816ec80 	call	816ec8 <usleep>
  IOWR(DM9000A_INST_BASE, IO_data, data);
  80069c:	e0ffff17 	ldw	r3,-4(fp)
  8006a0:	00806274 	movhi	r2,393
  8006a4:	10a50d04 	addi	r2,r2,-27596
  8006a8:	10c00035 	stwio	r3,0(r2)
}
  8006ac:	e037883a 	mov	sp,fp
  8006b0:	dfc00117 	ldw	ra,4(sp)
  8006b4:	df000017 	ldw	fp,0(sp)
  8006b8:	dec00204 	addi	sp,sp,8
  8006bc:	f800283a 	ret

008006c0 <dm9000a_ior>:
unsigned int dm9000a_ior(unsigned int reg)
{
  8006c0:	defffd04 	addi	sp,sp,-12
  8006c4:	dfc00215 	stw	ra,8(sp)
  8006c8:	df000115 	stw	fp,4(sp)
  8006cc:	df000104 	addi	fp,sp,4
  8006d0:	e13fff15 	stw	r4,-4(fp)
  IOWR(DM9000A_INST_BASE, IO_addr, reg);
  8006d4:	e0ffff17 	ldw	r3,-4(fp)
  8006d8:	00806274 	movhi	r2,393
  8006dc:	10a50c04 	addi	r2,r2,-27600
  8006e0:	10c00035 	stwio	r3,0(r2)
  usleep(STD_DELAY);
  8006e4:	01000044 	movi	r4,1
  8006e8:	0816ec80 	call	816ec8 <usleep>
  return IORD(DM9000A_INST_BASE, IO_data);
  8006ec:	00806274 	movhi	r2,393
  8006f0:	10a50d04 	addi	r2,r2,-27596
  8006f4:	10800037 	ldwio	r2,0(r2)
}
  8006f8:	e037883a 	mov	sp,fp
  8006fc:	dfc00117 	ldw	ra,4(sp)
  800700:	df000017 	ldw	fp,0(sp)
  800704:	dec00204 	addi	sp,sp,8
  800708:	f800283a 	ret

0080070c <phy_write>:

void phy_write(unsigned int reg, unsigned int value)
{ 
  80070c:	defffc04 	addi	sp,sp,-16
  800710:	dfc00315 	stw	ra,12(sp)
  800714:	df000215 	stw	fp,8(sp)
  800718:	df000204 	addi	fp,sp,8
  80071c:	e13ffe15 	stw	r4,-8(fp)
  800720:	e17fff15 	stw	r5,-4(fp)
  /* set PHY register address into EPAR REG. 0CH */
  dm9000a_iow(0x0C, reg | 0x40); /* PHY register address setting,
  800724:	e0bffe17 	ldw	r2,-8(fp)
  800728:	11401014 	ori	r5,r2,64
  80072c:	01000304 	movi	r4,12
  800730:	080066c0 	call	80066c <dm9000a_iow>
			    and DM9000_PHY offset = 0x40 */

  /* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
  dm9000a_iow(0x0E, ((value >> 8) & 0xFF));   /* PHY data high_byte */
  800734:	e0bfff17 	ldw	r2,-4(fp)
  800738:	1004d23a 	srli	r2,r2,8
  80073c:	11403fcc 	andi	r5,r2,255
  800740:	01000384 	movi	r4,14
  800744:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(0x0D, value & 0xFF);            /* PHY data low_byte */
  800748:	e0bfff17 	ldw	r2,-4(fp)
  80074c:	11403fcc 	andi	r5,r2,255
  800750:	01000344 	movi	r4,13
  800754:	080066c0 	call	80066c <dm9000a_iow>

  /* issue PHY + WRITE command = 0xa into EPCR REG. 0BH */
  dm9000a_iow(0x0B, 0x8);                     /* clear PHY command first */
  800758:	010002c4 	movi	r4,11
  80075c:	01400204 	movi	r5,8
  800760:	080066c0 	call	80066c <dm9000a_iow>
  IOWR(DM9000A_INST_BASE, IO_data, 0x0A);  /* issue PHY + WRITE command */
  800764:	00c06274 	movhi	r3,393
  800768:	18e50d04 	addi	r3,r3,-27596
  80076c:	00800284 	movi	r2,10
  800770:	18800035 	stwio	r2,0(r3)
  usleep(STD_DELAY);
  800774:	01000044 	movi	r4,1
  800778:	0816ec80 	call	816ec8 <usleep>
  IOWR(DM9000A_INST_BASE, IO_data, 0x08);  /* clear PHY command again */
  80077c:	00c06274 	movhi	r3,393
  800780:	18e50d04 	addi	r3,r3,-27596
  800784:	00800204 	movi	r2,8
  800788:	18800035 	stwio	r2,0(r3)
  usleep(50);  /* wait 1~30 us (>20 us) for PHY + WRITE completion */
  80078c:	01000c84 	movi	r4,50
  800790:	0816ec80 	call	816ec8 <usleep>
}
  800794:	e037883a 	mov	sp,fp
  800798:	dfc00117 	ldw	ra,4(sp)
  80079c:	df000017 	ldw	fp,0(sp)
  8007a0:	dec00204 	addi	sp,sp,8
  8007a4:	f800283a 	ret

008007a8 <dm9000a_reset>:

/* DM9000_init I/O routine */
unsigned int dm9000a_reset(unsigned char *mac_address)
{
  8007a8:	defffc04 	addi	sp,sp,-16
  8007ac:	dfc00315 	stw	ra,12(sp)
  8007b0:	df000215 	stw	fp,8(sp)
  8007b4:	df000204 	addi	fp,sp,8
  8007b8:	e13fff15 	stw	r4,-4(fp)
  unsigned int  i;
  /* set the internal PHY power-on (GPIOs normal settings) */
  dm9000a_iow(0x1E, 0x01);  /* GPCR REG. 1EH = 1 selected
  8007bc:	01000784 	movi	r4,30
  8007c0:	01400044 	movi	r5,1
  8007c4:	080066c0 	call	80066c <dm9000a_iow>
                    		       GPIO0 "output" port for internal PHY */
  dm9000a_iow(0x1F, 0x00);  // GPR  REG. 1FH GEPIO0
  8007c8:	010007c4 	movi	r4,31
  8007cc:	000b883a 	mov	r5,zero
  8007d0:	080066c0 	call	80066c <dm9000a_iow>
                    		    //   Bit [0] = 0 to activate internal PHY */
  msleep(10);                // wait > 2 ms for PHY power-up ready 
  8007d4:	0109c404 	movi	r4,10000
  8007d8:	0816ec80 	call	816ec8 <usleep>

  /* software-RESET NIC */
  dm9000a_iow(NCR, 0x03);   /* NCR REG. 00 RST Bit [0] = 1 reset on,
  8007dc:	0009883a 	mov	r4,zero
  8007e0:	014000c4 	movi	r5,3
  8007e4:	080066c0 	call	80066c <dm9000a_iow>
		                           and LBK Bit [2:1] = 01b MAC loopback on */
  
  usleep(20);               /* wait > 10us for a software-RESET ok */
  8007e8:	01000504 	movi	r4,20
  8007ec:	0816ec80 	call	816ec8 <usleep>
  
  dm9000a_iow(NCR, 0x00);   /* normalize */
  8007f0:	0009883a 	mov	r4,zero
  8007f4:	000b883a 	mov	r5,zero
  8007f8:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(NCR, 0x03);
  8007fc:	0009883a 	mov	r4,zero
  800800:	014000c4 	movi	r5,3
  800804:	080066c0 	call	80066c <dm9000a_iow>
  usleep(20);
  800808:	01000504 	movi	r4,20
  80080c:	0816ec80 	call	816ec8 <usleep>
  dm9000a_iow(NCR, 0x00);
  800810:	0009883a 	mov	r4,zero
  800814:	000b883a 	mov	r5,zero
  800818:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(ISR, 0x3F); /* clear the ISR status: PRS, PTS, ROS, ROOS 4 bits,
  80081c:	01003f84 	movi	r4,254
  800820:	01400fc4 	movi	r5,63
  800824:	080066c0 	call	80066c <dm9000a_iow>
                     		      by RW/C1 */
  dm9000a_iow(NSR, 0x2C); /* clear the TX status: TX1END, TX2END, WAKEUP 3 bits,
  800828:	01000044 	movi	r4,1
  80082c:	01400b04 	movi	r5,44
  800830:	080066c0 	call	80066c <dm9000a_iow>
		                          by RW/C1 */

  /* set GPIO0=1 then GPIO0=0 to turn off and on the internal PHY */
  dm9000a_iow(0x1F, 0x01);  // GPR PHYPD Bit [0] = 1 turn-off PHY */
  800834:	010007c4 	movi	r4,31
  800838:	01400044 	movi	r5,1
  80083c:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(0x1F, 0x00);  // PHYPD Bit [0] = 0 activate phyxcer */
  800840:	010007c4 	movi	r4,31
  800844:	000b883a 	mov	r5,zero
  800848:	080066c0 	call	80066c <dm9000a_iow>
  msleep(20);               /* wait >4 ms for PHY power-up */
  80084c:	01138804 	movi	r4,20000
  800850:	0816ec80 	call	816ec8 <usleep>

  /* set PHY operation mode */

  phy_write(0,PHY_reset);   /* reset PHY registers back to the default state */
  800854:	0009883a 	mov	r4,zero
  800858:	01600014 	movui	r5,32768
  80085c:	080070c0 	call	80070c <phy_write>
  usleep(50);               /* wait >30 us for PHY software-RESET ok */
  800860:	01000c84 	movi	r4,50
  800864:	0816ec80 	call	816ec8 <usleep>
  phy_write(16, 0x404);     /* turn off PHY reduce-power-down mode only */
  800868:	01000404 	movi	r4,16
  80086c:	01410104 	movi	r5,1028
  800870:	080070c0 	call	80070c <phy_write>
  phy_write(4, PHY_txab);   /* set PHY TX advertised ability:
  800874:	01000104 	movi	r4,4
  800878:	01417844 	movi	r5,1505
  80087c:	080070c0 	call	80070c <phy_write>
                   			       ALL + Flow_control */  
  phy_write(0, 0x1200);     /* PHY auto-NEGO re-start enable
  800880:	0009883a 	mov	r4,zero
  800884:	01448004 	movi	r5,4608
  800888:	080070c0 	call	80070c <phy_write>
                               (RESTART_AUTO_NEGOTIATION +
                               AUTO_NEGOTIATION_ENABLE)
                               to auto sense and recovery PHY registers */
  msleep(20);                /* wait >2 ms for PHY auto-sense
  80088c:	01138804 	movi	r4,20000
  800890:	0816ec80 	call	816ec8 <usleep>
			                         linking to partner */

  /* store MAC address into NIC */
  for (i = 0; i < 6; i++) 
  800894:	e03ffe15 	stw	zero,-8(fp)
  800898:	00000b06 	br	8008c8 <dm9000a_reset+0x120>
    dm9000a_iow(16 + i, mac_address[i]);
  80089c:	e0bffe17 	ldw	r2,-8(fp)
  8008a0:	11000404 	addi	r4,r2,16
  8008a4:	e0fffe17 	ldw	r3,-8(fp)
  8008a8:	e0bfff17 	ldw	r2,-4(fp)
  8008ac:	1885883a 	add	r2,r3,r2
  8008b0:	10800003 	ldbu	r2,0(r2)
  8008b4:	11403fcc 	andi	r5,r2,255
  8008b8:	080066c0 	call	80066c <dm9000a_iow>
                               to auto sense and recovery PHY registers */
  msleep(20);                /* wait >2 ms for PHY auto-sense
			                         linking to partner */

  /* store MAC address into NIC */
  for (i = 0; i < 6; i++) 
  8008bc:	e0bffe17 	ldw	r2,-8(fp)
  8008c0:	10800044 	addi	r2,r2,1
  8008c4:	e0bffe15 	stw	r2,-8(fp)
  8008c8:	e0bffe17 	ldw	r2,-8(fp)
  8008cc:	108001b0 	cmpltui	r2,r2,6
  8008d0:	103ff21e 	bne	r2,zero,80089c <dm9000a_reset+0xf4>
    dm9000a_iow(16 + i, mac_address[i]);

  /* clear any pending interrupt */
  dm9000a_iow(ISR, 0x3F); /* clear the ISR status: PRS, PTS, ROS, ROOS 4 bits,
  8008d4:	01003f84 	movi	r4,254
  8008d8:	01400fc4 	movi	r5,63
  8008dc:	080066c0 	call	80066c <dm9000a_iow>
                     		      by RW/C1 */
  dm9000a_iow(NSR, 0x2C); /* clear the TX status: TX1END, TX2END, WAKEUP 3 bits,
  8008e0:	01000044 	movi	r4,1
  8008e4:	01400b04 	movi	r5,44
  8008e8:	080066c0 	call	80066c <dm9000a_iow>
		                          by RW/C1 */

  /* program operating registers~ */
  dm9000a_iow(NCR, NCR_set); /* NCR REG. 00 enable the chip functions
  8008ec:	0009883a 	mov	r4,zero
  8008f0:	000b883a 	mov	r5,zero
  8008f4:	080066c0 	call	80066c <dm9000a_iow>
                        (and disable this MAC loopback mode back to normal) */
  dm9000a_iow(0x08, BPTR_set); /* BPTR  REG.08  (if necessary) RX Back Pressure
  8008f8:	01000204 	movi	r4,8
  8008fc:	01400fc4 	movi	r5,63
  800900:	080066c0 	call	80066c <dm9000a_iow>
                                  Threshold in Half duplex moe only:
                                  High Water 3KB, 600 us */
  dm9000a_iow(0x09, FCTR_set);  /* FCTR  REG.09  (if necessary)
  800904:	01000244 	movi	r4,9
  800908:	01401684 	movi	r5,90
  80090c:	080066c0 	call	80066c <dm9000a_iow>
                                   Flow Control Threshold setting
                                   High/ Low Water Overflow 5KB/ 10KB */
  dm9000a_iow(0x0A, RTFCR_set); /* RTFCR REG.0AH (if necessary)
  800910:	01000284 	movi	r4,10
  800914:	01400a44 	movi	r5,41
  800918:	080066c0 	call	80066c <dm9000a_iow>
                                   RX/TX Flow Control Register enable TXPEN, BKPM
                                   (TX_Half), FLCE (RX) */
  dm9000a_iow(0x0F, 0x00);      /* Clear the all Event */
  80091c:	010003c4 	movi	r4,15
  800920:	000b883a 	mov	r5,zero
  800924:	080066c0 	call	80066c <dm9000a_iow>
  // dm9000a_iow(0x2D, 0x80);      /* Switch LED to mode 1 */

  /* set other registers depending on applications */
  dm9000a_iow(ETXCSR, ETXCSR_set); /* Early Transmit 75% */
  800928:	01000c04 	movi	r4,48
  80092c:	014020c4 	movi	r5,131
  800930:	080066c0 	call	80066c <dm9000a_iow>

  /* enable interrupts to activate DM9000 ~on */
  dm9000a_iow(IMR, INTR_set);   /* IMR REG. FFH PAR=1 only,
  800934:	01003fc4 	movi	r4,255
  800938:	01402044 	movi	r5,129
  80093c:	080066c0 	call	80066c <dm9000a_iow>
			                             or + PTM=1& PRM=1 enable RxTx interrupts */

  /* enable RX (Broadcast/ ALL_MULTICAST) ~go */
  dm9000a_iow(RCR, RCR_set | RX_ENABLE | PASS_MULTICAST);
  800940:	01000144 	movi	r4,5
  800944:	01400e44 	movi	r5,57
  800948:	080066c0 	call	80066c <dm9000a_iow>
  /* RCR REG. 05 RXEN Bit [0] = 1 to enable the RX machine/ filter */

  /* RETURN "DEVICE_SUCCESS" back to upper layer */
  return  (dm9000a_ior(0x2D)==0x80) ? DMFE_SUCCESS : DMFE_FAIL;
  80094c:	01000b44 	movi	r4,45
  800950:	08006c00 	call	8006c0 <dm9000a_ior>
  800954:	10802018 	cmpnei	r2,r2,128
}
  800958:	e037883a 	mov	sp,fp
  80095c:	dfc00117 	ldw	ra,4(sp)
  800960:	df000017 	ldw	fp,0(sp)
  800964:	dec00204 	addi	sp,sp,8
  800968:	f800283a 	ret

0080096c <TransmitPacket>:

unsigned int TransmitPacket(unsigned char *data_ptr, unsigned int tx_len)
{
  80096c:	defffb04 	addi	sp,sp,-20
  800970:	dfc00415 	stw	ra,16(sp)
  800974:	df000315 	stw	fp,12(sp)
  800978:	df000304 	addi	fp,sp,12
  80097c:	e13ffe15 	stw	r4,-8(fp)
  800980:	e17fff15 	stw	r5,-4(fp)
  unsigned int i;
  
  /* mask NIC interrupts IMR: PAR only */
  dm9000a_iow(IMR, PAR_set);
  800984:	01003fc4 	movi	r4,255
  800988:	01402004 	movi	r5,128
  80098c:	080066c0 	call	80066c <dm9000a_iow>

  /* issue TX packet's length into TXPLH REG. FDH & TXPLL REG. FCH */
  dm9000a_iow(0xFD, (tx_len >> 8) & 0xFF);  /* TXPLH High_byte length */
  800990:	e0bfff17 	ldw	r2,-4(fp)
  800994:	1004d23a 	srli	r2,r2,8
  800998:	11403fcc 	andi	r5,r2,255
  80099c:	01003f44 	movi	r4,253
  8009a0:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(0xFC, tx_len & 0xFF);         /* TXPLL Low_byte  length */
  8009a4:	e0bfff17 	ldw	r2,-4(fp)
  8009a8:	11403fcc 	andi	r5,r2,255
  8009ac:	01003f04 	movi	r4,252
  8009b0:	080066c0 	call	80066c <dm9000a_iow>

  /* wirte transmit data to chip SRAM */
  IOWR(DM9000A_INST_BASE, IO_addr, MWCMD);  /* set MWCMD REG. F8H
  8009b4:	00c06274 	movhi	r3,393
  8009b8:	18e50c04 	addi	r3,r3,-27600
  8009bc:	00803e04 	movi	r2,248
  8009c0:	18800035 	stwio	r2,0(r3)
					  TX I/O port ready */
  for (i = 0; i < tx_len; i += 2) {
  8009c4:	e03ffd15 	stw	zero,-12(fp)
  8009c8:	00001506 	br	800a20 <TransmitPacket+0xb4>
    usleep(STD_DELAY);
  8009cc:	01000044 	movi	r4,1
  8009d0:	0816ec80 	call	816ec8 <usleep>
    IOWR(DM9000A_INST_BASE, IO_data, (data_ptr[i+1]<<8)|data_ptr[i] );
  8009d4:	e0fffd17 	ldw	r3,-12(fp)
  8009d8:	e0bffe17 	ldw	r2,-8(fp)
  8009dc:	1885883a 	add	r2,r3,r2
  8009e0:	10800044 	addi	r2,r2,1
  8009e4:	10800003 	ldbu	r2,0(r2)
  8009e8:	10803fcc 	andi	r2,r2,255
  8009ec:	1008923a 	slli	r4,r2,8
  8009f0:	e0fffd17 	ldw	r3,-12(fp)
  8009f4:	e0bffe17 	ldw	r2,-8(fp)
  8009f8:	1885883a 	add	r2,r3,r2
  8009fc:	10800003 	ldbu	r2,0(r2)
  800a00:	10803fcc 	andi	r2,r2,255
  800a04:	2086b03a 	or	r3,r4,r2
  800a08:	00806274 	movhi	r2,393
  800a0c:	10a50d04 	addi	r2,r2,-27596
  800a10:	10c00035 	stwio	r3,0(r2)
  dm9000a_iow(0xFC, tx_len & 0xFF);         /* TXPLL Low_byte  length */

  /* wirte transmit data to chip SRAM */
  IOWR(DM9000A_INST_BASE, IO_addr, MWCMD);  /* set MWCMD REG. F8H
					  TX I/O port ready */
  for (i = 0; i < tx_len; i += 2) {
  800a14:	e0bffd17 	ldw	r2,-12(fp)
  800a18:	10800084 	addi	r2,r2,2
  800a1c:	e0bffd15 	stw	r2,-12(fp)
  800a20:	e0fffd17 	ldw	r3,-12(fp)
  800a24:	e0bfff17 	ldw	r2,-4(fp)
  800a28:	18bfe836 	bltu	r3,r2,8009cc <TransmitPacket+0x60>
    usleep(STD_DELAY);
    IOWR(DM9000A_INST_BASE, IO_data, (data_ptr[i+1]<<8)|data_ptr[i] );
  }

  /* issue TX polling command activated */
  dm9000a_iow(TCR , TCR_set | TX_REQUEST);  /* TXCR Bit [0] TXREQ auto clear
  800a2c:	01000084 	movi	r4,2
  800a30:	01400044 	movi	r5,1
  800a34:	080066c0 	call	80066c <dm9000a_iow>
				       after TX completed */

  /* wait for transmit complete */
  while(!(dm9000a_ior(NSR)&0x0C)) {
  800a38:	00000206 	br	800a44 <TransmitPacket+0xd8>
    usleep(STD_DELAY);
  800a3c:	01000044 	movi	r4,1
  800a40:	0816ec80 	call	816ec8 <usleep>
  /* issue TX polling command activated */
  dm9000a_iow(TCR , TCR_set | TX_REQUEST);  /* TXCR Bit [0] TXREQ auto clear
				       after TX completed */

  /* wait for transmit complete */
  while(!(dm9000a_ior(NSR)&0x0C)) {
  800a44:	01000044 	movi	r4,1
  800a48:	08006c00 	call	8006c0 <dm9000a_ior>
  800a4c:	1080030c 	andi	r2,r2,12
  800a50:	1005003a 	cmpeq	r2,r2,zero
  800a54:	103ff91e 	bne	r2,zero,800a3c <TransmitPacket+0xd0>
    usleep(STD_DELAY);
  }

  /* clear the NSR Register */
  dm9000a_iow(NSR,0x00);
  800a58:	01000044 	movi	r4,1
  800a5c:	000b883a 	mov	r5,zero
  800a60:	080066c0 	call	80066c <dm9000a_iow>

  /* re-enable NIC interrupts */
  dm9000a_iow(IMR, INTR_set);
  800a64:	01003fc4 	movi	r4,255
  800a68:	01402044 	movi	r5,129
  800a6c:	080066c0 	call	80066c <dm9000a_iow>

  /* RETURN "TX_SUCCESS" to upper layer */
  return  DMFE_SUCCESS;
  800a70:	0005883a 	mov	r2,zero
}
  800a74:	e037883a 	mov	sp,fp
  800a78:	dfc00117 	ldw	ra,4(sp)
  800a7c:	df000017 	ldw	fp,0(sp)
  800a80:	dec00204 	addi	sp,sp,8
  800a84:	f800283a 	ret

00800a88 <prep_dm9000a>:
#ifndef MTU
#define MTU 1514
#endif

int prep_dm9000a(int index)
{  
  800a88:	defffb04 	addi	sp,sp,-20
  800a8c:	dfc00415 	stw	ra,16(sp)
  800a90:	df000315 	stw	fp,12(sp)
  800a94:	df000304 	addi	fp,sp,12
  800a98:	e13fff15 	stw	r4,-4(fp)
  DM9KA dm9ka = &g_dm9ka;
  800a9c:	008021b4 	movhi	r2,134
  800aa0:	10b64304 	addi	r2,r2,-9972
  800aa4:	e0bffe15 	stw	r2,-8(fp)
  NET ifp;

  ifp = nets[index];
  800aa8:	e0bfff17 	ldw	r2,-4(fp)
  800aac:	00c03934 	movhi	r3,228
  800ab0:	18e79c04 	addi	r3,r3,-24976
  800ab4:	1085883a 	add	r2,r2,r2
  800ab8:	1085883a 	add	r2,r2,r2
  800abc:	10c5883a 	add	r2,r2,r3
  800ac0:	10800017 	ldw	r2,0(r2)
  800ac4:	e0bffd15 	stw	r2,-12(fp)
  ifp->n_mib->ifAdminStatus = 2;   /* status = down */
  800ac8:	e0bffd17 	ldw	r2,-12(fp)
  800acc:	10c02717 	ldw	r3,156(r2)
  800ad0:	00800084 	movi	r2,2
  800ad4:	18800615 	stw	r2,24(r3)
  ifp->n_mib->ifOperStatus = 2;    /* will be set up in init()  */
  800ad8:	e0bffd17 	ldw	r2,-12(fp)
  800adc:	10c02717 	ldw	r3,156(r2)
  800ae0:	00800084 	movi	r2,2
  800ae4:	18800715 	stw	r2,28(r3)
  ifp->n_mib->ifLastChange = cticks * (100/TPS);
  800ae8:	e0bffd17 	ldw	r2,-12(fp)
  800aec:	10802717 	ldw	r2,156(r2)
  800af0:	10000815 	stw	zero,32(r2)
  ifp->n_mib->ifPhysAddress = (u_char*)dm9ka->mac_addr;
  800af4:	e0bffd17 	ldw	r2,-12(fp)
  800af8:	10c02717 	ldw	r3,156(r2)
  800afc:	e0bffe17 	ldw	r2,-8(fp)
  800b00:	10800204 	addi	r2,r2,8
  800b04:	18800515 	stw	r2,20(r3)
  ifp->n_mib->ifDescr = (u_char*)"DM9000A series ethernet";
  800b08:	e0bffd17 	ldw	r2,-12(fp)
  800b0c:	10c02717 	ldw	r3,156(r2)
  800b10:	00802174 	movhi	r2,133
  800b14:	10abf004 	addi	r2,r2,-20544
  800b18:	18800115 	stw	r2,4(r3)
  ifp->n_lnh = ETHHDR_SIZE;        /* ethernet header size */
  800b1c:	e0fffd17 	ldw	r3,-12(fp)
  800b20:	00800404 	movi	r2,16
  800b24:	18800815 	stw	r2,32(r3)
  ifp->n_hal = 6;                  /* hardware address length */
  800b28:	e0fffd17 	ldw	r3,-12(fp)
  800b2c:	00800184 	movi	r2,6
  800b30:	18801115 	stw	r2,68(r3)
  ifp->n_mib->ifType = ETHERNET;   /* device type */
  800b34:	e0bffd17 	ldw	r2,-12(fp)
  800b38:	10c02717 	ldw	r3,156(r2)
  800b3c:	00800184 	movi	r2,6
  800b40:	18800215 	stw	r2,8(r3)
  ifp->n_mtu = MTU;                /* max frame size */
  800b44:	e0fffd17 	ldw	r3,-12(fp)
  800b48:	00817a84 	movi	r2,1514
  800b4c:	18800915 	stw	r2,36(r3)
  
  /* install our hardware driver routines */
  ifp->n_init   = dm9ka_init;
  800b50:	e0fffd17 	ldw	r3,-12(fp)
  800b54:	00802034 	movhi	r2,128
  800b58:	10843704 	addi	r2,r2,4316
  800b5c:	18800215 	stw	r2,8(r3)
  ifp->pkt_send = dm9ka_pkt_send;
  800b60:	e0fffd17 	ldw	r3,-12(fp)
  800b64:	00802034 	movhi	r2,128
  800b68:	1084d004 	addi	r2,r2,4928
  800b6c:	18800415 	stw	r2,16(r3)
  ifp->n_close  = dm9ka_close;
  800b70:	e0fffd17 	ldw	r3,-12(fp)
  800b74:	00802034 	movhi	r2,128
  800b78:	10847504 	addi	r2,r2,4564
  800b7c:	18800515 	stw	r2,20(r3)
  ifp->n_stats  = dm9ka_stats;
  800b80:	e0fffd17 	ldw	r3,-12(fp)
  800b84:	00802034 	movhi	r2,128
  800b88:	1084b904 	addi	r2,r2,4836
  800b8c:	18800715 	stw	r2,28(r3)

#ifdef IP_V6
  ifp->n_flags |= (NF_NBPROT | NF_IPV6);
#else
  ifp->n_flags |= NF_NBPROT;
  800b90:	e0bffd17 	ldw	r2,-12(fp)
  800b94:	10802a17 	ldw	r2,168(r2)
  800b98:	10c00214 	ori	r3,r2,8
  800b9c:	e0bffd17 	ldw	r2,-12(fp)
  800ba0:	10c02a15 	stw	r3,168(r2)
#endif

  get_mac_addr(dm9ka->netp, dm9ka->mac_addr);
  800ba4:	e0bffe17 	ldw	r2,-8(fp)
  800ba8:	11000417 	ldw	r4,16(r2)
  800bac:	e0bffe17 	ldw	r2,-8(fp)
  800bb0:	10800204 	addi	r2,r2,8
  800bb4:	100b883a 	mov	r5,r2
  800bb8:	080428c0 	call	80428c <get_mac_addr>
    
  /* set cross-pointers between iface and smsc structs */
  dm9ka->netp    = ifp;
  800bbc:	e0fffe17 	ldw	r3,-8(fp)
  800bc0:	e0bffd17 	ldw	r2,-12(fp)
  800bc4:	18800415 	stw	r2,16(r3)
  dm9ka->intnum  = DM9000A_INST_IRQ;
  800bc8:	e0fffe17 	ldw	r3,-8(fp)
  800bcc:	00800084 	movi	r2,2
  800bd0:	18800015 	stw	r2,0(r3)
  dm9ka->regbase = DM9000A_INST_BASE;
  800bd4:	e0fffe17 	ldw	r3,-8(fp)
  800bd8:	00806274 	movhi	r2,393
  800bdc:	10a50c04 	addi	r2,r2,-27600
  800be0:	18800115 	stw	r2,4(r3)
  dm9ka->sending = 0;
  800be4:	e0bffe17 	ldw	r2,-8(fp)
  800be8:	10000a15 	stw	zero,40(r2)
  dm9ka->rx_ints = 0;
  800bec:	e0bffe17 	ldw	r2,-8(fp)
  800bf0:	10000f15 	stw	zero,60(r2)
  dm9ka->tx_ints = 0;
  800bf4:	e0bffe17 	ldw	r2,-8(fp)
  800bf8:	10001015 	stw	zero,64(r2)
  dm9ka->rcv_len = 0;
  800bfc:	e0bffe17 	ldw	r2,-8(fp)
  800c00:	10000e15 	stw	zero,56(r2)
  dm9ka->snd_len = 0;
  800c04:	e0bffe17 	ldw	r2,-8(fp)
  800c08:	10000c15 	stw	zero,48(r2)
  dm9ka->tosend.q_len = 0;
  800c0c:	e0bffe17 	ldw	r2,-8(fp)
  800c10:	10000715 	stw	zero,28(r2)
  dm9ka->tosend.q_max = 0;
  800c14:	e0bffe17 	ldw	r2,-8(fp)
  800c18:	10000815 	stw	zero,32(r2)
  
  ifp->n_local = (void*)dm9ka;
  800c1c:	e0fffd17 	ldw	r3,-12(fp)
  800c20:	e0bffe17 	ldw	r2,-8(fp)
  800c24:	18802815 	stw	r2,160(r3)

  return ++index;
  800c28:	e0bfff17 	ldw	r2,-4(fp)
  800c2c:	10800044 	addi	r2,r2,1
  800c30:	e0bfff15 	stw	r2,-4(fp)
  800c34:	e0bfff17 	ldw	r2,-4(fp)
}
  800c38:	e037883a 	mov	sp,fp
  800c3c:	dfc00117 	ldw	ra,4(sp)
  800c40:	df000017 	ldw	fp,0(sp)
  800c44:	dec00204 	addi	sp,sp,8
  800c48:	f800283a 	ret

00800c4c <dm9000a_init>:

/* HAL init ...
 * just init dev structs and let the stack know we are here
 */
error_t dm9000a_init(alt_iniche_dev *p_dev)
{
  800c4c:	defffd04 	addi	sp,sp,-12
  800c50:	dfc00215 	stw	ra,8(sp)
  800c54:	df000115 	stw	fp,4(sp)
  800c58:	df000104 	addi	fp,sp,4
  800c5c:	e13fff15 	stw	r4,-4(fp)
  prep_dm9000a(p_dev->if_num);
  800c60:	e0bfff17 	ldw	r2,-4(fp)
  800c64:	11000517 	ldw	r4,20(r2)
  800c68:	0800a880 	call	800a88 <prep_dm9000a>
  return 0;  
  800c6c:	0005883a 	mov	r2,zero
}
  800c70:	e037883a 	mov	sp,fp
  800c74:	dfc00117 	ldw	ra,4(sp)
  800c78:	df000017 	ldw	fp,0(sp)
  800c7c:	dec00204 	addi	sp,sp,8
  800c80:	f800283a 	ret

00800c84 <dm9000a_rxReady>:

static unsigned char dm9000a_rxReady(DM9KA dm9ka)
{
  800c84:	defffc04 	addi	sp,sp,-16
  800c88:	dfc00315 	stw	ra,12(sp)
  800c8c:	df000215 	stw	fp,8(sp)
  800c90:	df000204 	addi	fp,sp,8
  800c94:	e13fff15 	stw	r4,-4(fp)
  unsigned char rv = 0;
  800c98:	e03ffe05 	stb	zero,-8(fp)
  /* dummy read a byte from MRCMDX REG. F0H */
  rv = dm9000a_ior(MRCMDX);
  800c9c:	01003c04 	movi	r4,240
  800ca0:	08006c00 	call	8006c0 <dm9000a_ior>
  800ca4:	e0bffe05 	stb	r2,-8(fp)
  /* got most updated byte: rx_READY */
  rv = IORD(dm9ka->regbase, IO_data) & 0x03;  
  800ca8:	e0bfff17 	ldw	r2,-4(fp)
  800cac:	10800117 	ldw	r2,4(r2)
  800cb0:	10800104 	addi	r2,r2,4
  800cb4:	10800037 	ldwio	r2,0(r2)
  800cb8:	108000cc 	andi	r2,r2,3
  800cbc:	e0bffe05 	stb	r2,-8(fp)
  return rv;
  800cc0:	e0bffe03 	ldbu	r2,-8(fp)
}
  800cc4:	e037883a 	mov	sp,fp
  800cc8:	dfc00117 	ldw	ra,4(sp)
  800ccc:	df000017 	ldw	fp,0(sp)
  800cd0:	dec00204 	addi	sp,sp,8
  800cd4:	f800283a 	ret

00800cd8 <dm9000a_isr>:

static void dm9000a_isr(int iface)
{
  800cd8:	defff404 	addi	sp,sp,-48
  800cdc:	dfc00b15 	stw	ra,44(sp)
  800ce0:	df000a15 	stw	fp,40(sp)
  800ce4:	df000a04 	addi	fp,sp,40
  800ce8:	e13fff15 	stw	r4,-4(fp)
  unsigned char rx_rdy, istatus;
  unsigned int  tmp, rx_sts, i, rx_len;
  struct ethhdr * eth;
  PACKET pkt;
  DM9KA dm9ka = (DM9KA)nets[iface]->n_local;
  800cec:	e0bfff17 	ldw	r2,-4(fp)
  800cf0:	00c03934 	movhi	r3,228
  800cf4:	18e79c04 	addi	r3,r3,-24976
  800cf8:	1085883a 	add	r2,r2,r2
  800cfc:	1085883a 	add	r2,r2,r2
  800d00:	10c5883a 	add	r2,r2,r3
  800d04:	10800017 	ldw	r2,0(r2)
  800d08:	10802817 	ldw	r2,160(r2)
  800d0c:	e0bff715 	stw	r2,-36(fp)
  
  /* mask NIC interrupts IMR: PAR only */
  dm9000a_iow(IMR, PAR_set);
  800d10:	01003fc4 	movi	r4,255
  800d14:	01402004 	movi	r5,128
  800d18:	080066c0 	call	80066c <dm9000a_iow>
  istatus = dm9000a_ior(ISR);
  800d1c:	01003f84 	movi	r4,254
  800d20:	08006c00 	call	8006c0 <dm9000a_ior>
  800d24:	e0bffe05 	stb	r2,-8(fp)

  rx_rdy = dm9000a_rxReady(dm9ka);  
  800d28:	e13ff717 	ldw	r4,-36(fp)
  800d2c:	0800c840 	call	800c84 <dm9000a_rxReady>
  800d30:	e0bffe45 	stb	r2,-7(fp)
  usleep(STD_DELAY);
  800d34:	01000044 	movi	r4,1
  800d38:	0816ec80 	call	816ec8 <usleep>
  
  while(rx_rdy == DM9000_PKT_READY)
  800d3c:	00009406 	br	800f90 <dm9000a_isr+0x2b8>
  {
    /* get RX Status & Length from RX SRAM */
    /* set MRCMD REG. F2H RX I/O port ready */    
    IOWR(dm9ka->regbase, IO_addr, MRCMD); 
  800d40:	e0bff717 	ldw	r2,-36(fp)
  800d44:	10800117 	ldw	r2,4(r2)
  800d48:	1007883a 	mov	r3,r2
  800d4c:	00803c84 	movi	r2,242
  800d50:	18800035 	stwio	r2,0(r3)
    usleep(STD_DELAY);
  800d54:	01000044 	movi	r4,1
  800d58:	0816ec80 	call	816ec8 <usleep>
    rx_sts = IORD(dm9ka->regbase,IO_data);
  800d5c:	e0bff717 	ldw	r2,-36(fp)
  800d60:	10800117 	ldw	r2,4(r2)
  800d64:	10800104 	addi	r2,r2,4
  800d68:	10800037 	ldwio	r2,0(r2)
  800d6c:	e0bffc15 	stw	r2,-16(fp)
    usleep(STD_DELAY);
  800d70:	01000044 	movi	r4,1
  800d74:	0816ec80 	call	816ec8 <usleep>
    rx_len = IORD(dm9ka->regbase,IO_data);
  800d78:	e0bff717 	ldw	r2,-36(fp)
  800d7c:	10800117 	ldw	r2,4(r2)
  800d80:	10800104 	addi	r2,r2,4
  800d84:	10800037 	ldwio	r2,0(r2)
  800d88:	e0bffa15 	stw	r2,-24(fp)
    
    /* Check this packet_status: GOOD or BAD? */
    if( !(rx_sts & 0xBF00) && (rx_len < MAX_PACKET_SIZE) )
  800d8c:	e0bffc17 	ldw	r2,-16(fp)
  800d90:	10afc00c 	andi	r2,r2,48896
  800d94:	1004c03a 	cmpne	r2,r2,zero
  800d98:	1000661e 	bne	r2,zero,800f34 <dm9000a_isr+0x25c>
  800d9c:	e0bffa17 	ldw	r2,-24(fp)
  800da0:	10817ca8 	cmpgeui	r2,r2,1522
  800da4:	1000631e 	bne	r2,zero,800f34 <dm9000a_isr+0x25c>
    {
      if ((pkt = pk_alloc(rx_len + ETHHDR_BIAS)) == NULL)   
  800da8:	e0bffa17 	ldw	r2,-24(fp)
  800dac:	11000084 	addi	r4,r2,2
  800db0:	0829b840 	call	829b84 <pk_alloc>
  800db4:	e0bff815 	stw	r2,-32(fp)
  800db8:	e0bff817 	ldw	r2,-32(fp)
  800dbc:	1004c03a 	cmpne	r2,r2,zero
  800dc0:	1000161e 	bne	r2,zero,800e1c <dm9000a_isr+0x144>
      { /* couldn't get a free buffer for rx */
        dm9ka->netp->n_mib->ifInDiscards++;
  800dc4:	e0bff717 	ldw	r2,-36(fp)
  800dc8:	10800417 	ldw	r2,16(r2)
  800dcc:	10c02717 	ldw	r3,156(r2)
  800dd0:	18800c17 	ldw	r2,48(r3)
  800dd4:	10800044 	addi	r2,r2,1
  800dd8:	18800c15 	stw	r2,48(r3)
        /* treat packet as bad, dump it from RX SRAM */
        for (i = 0; i < rx_len; i += 2) {
  800ddc:	e03ffb15 	stw	zero,-20(fp)
  800de0:	00000a06 	br	800e0c <dm9000a_isr+0x134>
          usleep(STD_DELAY);
  800de4:	01000044 	movi	r4,1
  800de8:	0816ec80 	call	816ec8 <usleep>
          tmp = IORD(dm9ka->regbase, IO_data);
  800dec:	e0bff717 	ldw	r2,-36(fp)
  800df0:	10800117 	ldw	r2,4(r2)
  800df4:	10800104 	addi	r2,r2,4
  800df8:	10800037 	ldwio	r2,0(r2)
  800dfc:	e0bffd15 	stw	r2,-12(fp)
    {
      if ((pkt = pk_alloc(rx_len + ETHHDR_BIAS)) == NULL)   
      { /* couldn't get a free buffer for rx */
        dm9ka->netp->n_mib->ifInDiscards++;
        /* treat packet as bad, dump it from RX SRAM */
        for (i = 0; i < rx_len; i += 2) {
  800e00:	e0bffb17 	ldw	r2,-20(fp)
  800e04:	10800084 	addi	r2,r2,2
  800e08:	e0bffb15 	stw	r2,-20(fp)
  800e0c:	e0fffb17 	ldw	r3,-20(fp)
  800e10:	e0bffa17 	ldw	r2,-24(fp)
  800e14:	18bff336 	bltu	r3,r2,800de4 <dm9000a_isr+0x10c>
  800e18:	00005606 	br	800f74 <dm9000a_isr+0x29c>
          tmp = IORD(dm9ka->regbase, IO_data);
        }
      }
      else
      { /* packet allocation succeeded */
        unsigned char* data_ptr = pkt->nb_buff + ETHHDR_BIAS;
  800e1c:	e0bff817 	ldw	r2,-32(fp)
  800e20:	10800117 	ldw	r2,4(r2)
  800e24:	10800084 	addi	r2,r2,2
  800e28:	e0bff615 	stw	r2,-40(fp)
        /* read 1 received packet from RX SRAM into RX packet buffer */
        for (i = 0; i < rx_len; i += 2) {
  800e2c:	e03ffb15 	stw	zero,-20(fp)
  800e30:	00001906 	br	800e98 <dm9000a_isr+0x1c0>
          usleep(STD_DELAY);
  800e34:	01000044 	movi	r4,1
  800e38:	0816ec80 	call	816ec8 <usleep>
          tmp = IORD(dm9ka->regbase, IO_data);
  800e3c:	e0bff717 	ldw	r2,-36(fp)
  800e40:	10800117 	ldw	r2,4(r2)
  800e44:	10800104 	addi	r2,r2,4
  800e48:	10800037 	ldwio	r2,0(r2)
  800e4c:	e0bffd15 	stw	r2,-12(fp)
          *data_ptr++ = tmp & 0xFF;
  800e50:	e0bffd17 	ldw	r2,-12(fp)
  800e54:	1007883a 	mov	r3,r2
  800e58:	e0bff617 	ldw	r2,-40(fp)
  800e5c:	10c00005 	stb	r3,0(r2)
  800e60:	e0bff617 	ldw	r2,-40(fp)
  800e64:	10800044 	addi	r2,r2,1
  800e68:	e0bff615 	stw	r2,-40(fp)
          *data_ptr++ = (tmp>>8) & 0xFF;
  800e6c:	e0bffd17 	ldw	r2,-12(fp)
  800e70:	1004d23a 	srli	r2,r2,8
  800e74:	1007883a 	mov	r3,r2
  800e78:	e0bff617 	ldw	r2,-40(fp)
  800e7c:	10c00005 	stb	r3,0(r2)
  800e80:	e0bff617 	ldw	r2,-40(fp)
  800e84:	10800044 	addi	r2,r2,1
  800e88:	e0bff615 	stw	r2,-40(fp)
      }
      else
      { /* packet allocation succeeded */
        unsigned char* data_ptr = pkt->nb_buff + ETHHDR_BIAS;
        /* read 1 received packet from RX SRAM into RX packet buffer */
        for (i = 0; i < rx_len; i += 2) {
  800e8c:	e0bffb17 	ldw	r2,-20(fp)
  800e90:	10800084 	addi	r2,r2,2
  800e94:	e0bffb15 	stw	r2,-20(fp)
  800e98:	e0fffb17 	ldw	r3,-20(fp)
  800e9c:	e0bffa17 	ldw	r2,-24(fp)
  800ea0:	18bfe436 	bltu	r3,r2,800e34 <dm9000a_isr+0x15c>
          tmp = IORD(dm9ka->regbase, IO_data);
          *data_ptr++ = tmp & 0xFF;
          *data_ptr++ = (tmp>>8) & 0xFF;
        }

        pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
  800ea4:	e0bff817 	ldw	r2,-32(fp)
  800ea8:	10800117 	ldw	r2,4(r2)
  800eac:	10c00404 	addi	r3,r2,16
  800eb0:	e0bff817 	ldw	r2,-32(fp)
  800eb4:	10c00315 	stw	r3,12(r2)
        pkt->nb_plen = rx_len - 14;
  800eb8:	e0bffa17 	ldw	r2,-24(fp)
  800ebc:	10fffc84 	addi	r3,r2,-14
  800ec0:	e0bff817 	ldw	r2,-32(fp)
  800ec4:	10c00415 	stw	r3,16(r2)
        pkt->nb_tstamp = cticks;
  800ec8:	00802174 	movhi	r2,133
  800ecc:	10832604 	addi	r2,r2,3224
  800ed0:	10800017 	ldw	r2,0(r2)
  800ed4:	1007883a 	mov	r3,r2
  800ed8:	e0bff817 	ldw	r2,-32(fp)
  800edc:	10c00515 	stw	r3,20(r2)
        pkt->net = dm9ka->netp;
  800ee0:	e0bff717 	ldw	r2,-36(fp)
  800ee4:	10c00417 	ldw	r3,16(r2)
  800ee8:	e0bff817 	ldw	r2,-32(fp)
  800eec:	10c00615 	stw	r3,24(r2)

        /* set packet type for demux routine */
        eth = (struct ethhdr *)(pkt->nb_buff + ETHHDR_BIAS);
  800ef0:	e0bff817 	ldw	r2,-32(fp)
  800ef4:	10800117 	ldw	r2,4(r2)
  800ef8:	10800084 	addi	r2,r2,2
  800efc:	e0bff915 	stw	r2,-28(fp)
        pkt->type = eth->e_type;
  800f00:	e0bff917 	ldw	r2,-28(fp)
  800f04:	10c0030b 	ldhu	r3,12(r2)
  800f08:	e0bff817 	ldw	r2,-32(fp)
  800f0c:	10c0080d 	sth	r3,32(r2)

        /* shove packet into iniche stack's recv queue */
        //printf("rx: 0x%x l %d s %x:%x:%x\n", eth->e_type, rx_len,
        //       eth->e_src[0], eth->e_src[1], eth->e_src[2]);
        putq(&rcvdq, pkt);
  800f10:	01003934 	movhi	r4,228
  800f14:	2126d704 	addi	r4,r4,-25764
  800f18:	e17ff817 	ldw	r5,-32(fp)
  800f1c:	082a1580 	call	82a158 <putq>
        SignalPktDemux();
  800f20:	00802174 	movhi	r2,133
  800f24:	10832904 	addi	r2,r2,3236
  800f28:	11000017 	ldw	r4,0(r2)
  800f2c:	081dee40 	call	81dee4 <OSSemPost>
    rx_sts = IORD(dm9ka->regbase,IO_data);
    usleep(STD_DELAY);
    rx_len = IORD(dm9ka->regbase,IO_data);
    
    /* Check this packet_status: GOOD or BAD? */
    if( !(rx_sts & 0xBF00) && (rx_len < MAX_PACKET_SIZE) )
  800f30:	00001006 	br	800f74 <dm9000a_isr+0x29c>
        putq(&rcvdq, pkt);
        SignalPktDemux();
      }      
    } else {
      /* this packet is bad, dump it from RX SRAM */
      for (i = 0; i < rx_len; i += 2) {
  800f34:	e03ffb15 	stw	zero,-20(fp)
  800f38:	00000a06 	br	800f64 <dm9000a_isr+0x28c>
        usleep(STD_DELAY);
  800f3c:	01000044 	movi	r4,1
  800f40:	0816ec80 	call	816ec8 <usleep>
        tmp = IORD(dm9ka->regbase, IO_data);
  800f44:	e0bff717 	ldw	r2,-36(fp)
  800f48:	10800117 	ldw	r2,4(r2)
  800f4c:	10800104 	addi	r2,r2,4
  800f50:	10800037 	ldwio	r2,0(r2)
  800f54:	e0bffd15 	stw	r2,-12(fp)
        putq(&rcvdq, pkt);
        SignalPktDemux();
      }      
    } else {
      /* this packet is bad, dump it from RX SRAM */
      for (i = 0; i < rx_len; i += 2) {
  800f58:	e0bffb17 	ldw	r2,-20(fp)
  800f5c:	10800084 	addi	r2,r2,2
  800f60:	e0bffb15 	stw	r2,-20(fp)
  800f64:	e0fffb17 	ldw	r3,-20(fp)
  800f68:	e0bffa17 	ldw	r2,-24(fp)
  800f6c:	18bff336 	bltu	r3,r2,800f3c <dm9000a_isr+0x264>
        usleep(STD_DELAY);
        tmp = IORD(dm9ka->regbase, IO_data);
      }
      rx_len = 0;
  800f70:	e03ffa15 	stw	zero,-24(fp)
    }

    usleep(STD_DELAY);
  800f74:	01000044 	movi	r4,1
  800f78:	0816ec80 	call	816ec8 <usleep>
    rx_rdy = dm9000a_rxReady(dm9ka);
  800f7c:	e13ff717 	ldw	r4,-36(fp)
  800f80:	0800c840 	call	800c84 <dm9000a_rxReady>
  800f84:	e0bffe45 	stb	r2,-7(fp)
    usleep(STD_DELAY);    
  800f88:	01000044 	movi	r4,1
  800f8c:	0816ec80 	call	816ec8 <usleep>
  istatus = dm9000a_ior(ISR);

  rx_rdy = dm9000a_rxReady(dm9ka);  
  usleep(STD_DELAY);
  
  while(rx_rdy == DM9000_PKT_READY)
  800f90:	e0bffe43 	ldbu	r2,-7(fp)
  800f94:	10800060 	cmpeqi	r2,r2,1
  800f98:	103f691e 	bne	r2,zero,800d40 <dm9000a_isr+0x68>
    usleep(STD_DELAY);
    rx_rdy = dm9000a_rxReady(dm9ka);
    usleep(STD_DELAY);    
  }
  
  if (rx_rdy & 0x02)
  800f9c:	e0bffe43 	ldbu	r2,-7(fp)
  800fa0:	1080008c 	andi	r2,r2,2
  800fa4:	1005003a 	cmpeq	r2,r2,zero
  800fa8:	1000311e 	bne	r2,zero,801070 <dm9000a_isr+0x398>
  { /* status check first byte: rx_READY Bit[1:0] must be "00"b or "01"b */
    /* software-RESET NIC */
    printf("whoa ... got a strange thing here ... \n");
  800fac:	01002174 	movhi	r4,133
  800fb0:	212bf604 	addi	r4,r4,-20520
  800fb4:	08077600 	call	807760 <puts>
    autoReset++;
  800fb8:	d0a05b17 	ldw	r2,-32404(gp)
  800fbc:	10800044 	addi	r2,r2,1
  800fc0:	d0a05b15 	stw	r2,-32404(gp)
    dm9000a_iow(NCR, 0x03);   /* NCR REG. 00 RST Bit [0] = 1 reset on,
  800fc4:	0009883a 	mov	r4,zero
  800fc8:	014000c4 	movi	r5,3
  800fcc:	080066c0 	call	80066c <dm9000a_iow>
                          			 and LBK Bit [2:1] = 01b MAC loopback on */
    usleep(20);               /* wait > 10us for a software-RESET ok */
  800fd0:	01000504 	movi	r4,20
  800fd4:	0816ec80 	call	816ec8 <usleep>
    dm9000a_iow(NCR, 0x00);   /* normalize */
  800fd8:	0009883a 	mov	r4,zero
  800fdc:	000b883a 	mov	r5,zero
  800fe0:	080066c0 	call	80066c <dm9000a_iow>
    dm9000a_iow(NCR, 0x03);
  800fe4:	0009883a 	mov	r4,zero
  800fe8:	014000c4 	movi	r5,3
  800fec:	080066c0 	call	80066c <dm9000a_iow>
    usleep(20);
  800ff0:	01000504 	movi	r4,20
  800ff4:	0816ec80 	call	816ec8 <usleep>
    dm9000a_iow(NCR, 0x00);    
  800ff8:	0009883a 	mov	r4,zero
  800ffc:	000b883a 	mov	r5,zero
  801000:	080066c0 	call	80066c <dm9000a_iow>
    /* program operating registers~ */
    dm9000a_iow(NCR, NCR_set); /* NCR REG. 00 enable the chip functions
  801004:	0009883a 	mov	r4,zero
  801008:	000b883a 	mov	r5,zero
  80100c:	080066c0 	call	80066c <dm9000a_iow>
                   			 (and disable this MAC loopback mode back to normal) */
    dm9000a_iow(0x08, BPTR_set); /* BPTR  REG.08 (if necessary) RX Back Pressure
  801010:	01000204 	movi	r4,8
  801014:	01400fc4 	movi	r5,63
  801018:	080066c0 	call	80066c <dm9000a_iow>
                                    Threshold in Half duplex mode only:
                                    High Water 3KB, 600 us */
    dm9000a_iow(0x09, FCTR_set);  /* FCTR  REG.09  (if necessary)
  80101c:	01000244 	movi	r4,9
  801020:	01401684 	movi	r5,90
  801024:	080066c0 	call	80066c <dm9000a_iow>
                                   Flow Control Threshold setting High/Low Water
                                   Overflow 5KB/ 10KB */
    dm9000a_iow(0x0A, RTFCR_set); /* RTFCR REG.0AH (if necessary)
  801028:	01000284 	movi	r4,10
  80102c:	01400a44 	movi	r5,41
  801030:	080066c0 	call	80066c <dm9000a_iow>
                          			     RX/TX Flow Control Register
			                               enable TXPEN, BKPM (TX_Half), FLCE (RX) */
    dm9000a_iow(0x0F, 0x00);      /* Clear the all Event */
  801034:	010003c4 	movi	r4,15
  801038:	000b883a 	mov	r5,zero
  80103c:	080066c0 	call	80066c <dm9000a_iow>
    dm9000a_iow(0x2D, 0x80);      /* Switch LED to mode 1 */
  801040:	01000b44 	movi	r4,45
  801044:	01402004 	movi	r5,128
  801048:	080066c0 	call	80066c <dm9000a_iow>
    /* set other registers depending on applications */
    dm9000a_iow(ETXCSR, ETXCSR_set); /* Early Transmit 75% */
  80104c:	01000c04 	movi	r4,48
  801050:	014020c4 	movi	r5,131
  801054:	080066c0 	call	80066c <dm9000a_iow>
    /* enable interrupts to activate DM9000 ~on */
    dm9000a_iow(IMR, INTR_set);   /* IMR REG. FFH PAR=1 only,
  801058:	01003fc4 	movi	r4,255
  80105c:	01402044 	movi	r5,129
  801060:	080066c0 	call	80066c <dm9000a_iow>
			                               or + PTM=1& PRM=1 enable RxTx interrupts */
    /* enable RX (Broadcast/ ALL_MULTICAST) ~go */
    dm9000a_iow(RCR , RCR_set | RX_ENABLE | PASS_MULTICAST);
  801064:	01000144 	movi	r4,5
  801068:	01400e44 	movi	r5,57
  80106c:	080066c0 	call	80066c <dm9000a_iow>
    /* RCR REG. 05 RXEN Bit [0] = 1 to enable the RX machine/ filter */
  }
  
  /* Clear the DM9000A ISR: PRS, PTS, ROS, ROOS 4 bits, by RW/C1 */
  dm9000a_iow(ISR, 0x3F);  
  801070:	01003f84 	movi	r4,254
  801074:	01400fc4 	movi	r5,63
  801078:	080066c0 	call	80066c <dm9000a_iow>
  /* Re-enable DM9000A interrupts */
  dm9000a_iow(IMR, INTR_set);  
  80107c:	01003fc4 	movi	r4,255
  801080:	01402044 	movi	r5,129
  801084:	080066c0 	call	80066c <dm9000a_iow>
}
  801088:	e037883a 	mov	sp,fp
  80108c:	dfc00117 	ldw	ra,4(sp)
  801090:	df000017 	ldw	fp,0(sp)
  801094:	dec00204 	addi	sp,sp,8
  801098:	f800283a 	ret

0080109c <dm9Ka_isr_wrap>:


int netisrs = 0;

void dm9Ka_isr_wrap(void *context, u_long intnum)
{
  80109c:	defffc04 	addi	sp,sp,-16
  8010a0:	dfc00315 	stw	ra,12(sp)
  8010a4:	df000215 	stw	fp,8(sp)
  8010a8:	df000204 	addi	fp,sp,8
  8010ac:	e13ffe15 	stw	r4,-8(fp)
  8010b0:	e17fff15 	stw	r5,-4(fp)
  netisrs++;
  8010b4:	d0a05c17 	ldw	r2,-32400(gp)
  8010b8:	10800044 	addi	r2,r2,1
  8010bc:	d0a05c15 	stw	r2,-32400(gp)
  dm9000a_isr((int)context);
  8010c0:	e13ffe17 	ldw	r4,-8(fp)
  8010c4:	0800cd80 	call	800cd8 <dm9000a_isr>
}
  8010c8:	e037883a 	mov	sp,fp
  8010cc:	dfc00117 	ldw	ra,4(sp)
  8010d0:	df000017 	ldw	fp,0(sp)
  8010d4:	dec00204 	addi	sp,sp,8
  8010d8:	f800283a 	ret

008010dc <dm9ka_init>:

int dm9ka_init(int iface)
{
  8010dc:	defffa04 	addi	sp,sp,-24
  8010e0:	dfc00515 	stw	ra,20(sp)
  8010e4:	df000415 	stw	fp,16(sp)
  8010e8:	df000404 	addi	fp,sp,16
  8010ec:	e13ffe15 	stw	r4,-8(fp)
  int err;
  DM9KA   dm9ka;
  printf("dm9ka_init\n");
  8010f0:	01002174 	movhi	r4,133
  8010f4:	212c0004 	addi	r4,r4,-20480
  8010f8:	08077600 	call	807760 <puts>

   /* get pointer to device structure */
  dm9ka = (DM9KA)nets[iface]->n_local;
  8010fc:	e0bffe17 	ldw	r2,-8(fp)
  801100:	00c03934 	movhi	r3,228
  801104:	18e79c04 	addi	r3,r3,-24976
  801108:	1085883a 	add	r2,r2,r2
  80110c:	1085883a 	add	r2,r2,r2
  801110:	10c5883a 	add	r2,r2,r3
  801114:	10800017 	ldw	r2,0(r2)
  801118:	10802817 	ldw	r2,160(r2)
  80111c:	e0bffc15 	stw	r2,-16(fp)

  err = dm9000a_reset(dm9ka->mac_addr);
  801120:	e0bffc17 	ldw	r2,-16(fp)
  801124:	10800204 	addi	r2,r2,8
  801128:	1009883a 	mov	r4,r2
  80112c:	08007a80 	call	8007a8 <dm9000a_reset>
  801130:	e0bffd15 	stw	r2,-12(fp)

  /* register the ISR with the ALTERA HAL interface */
  err = alt_irq_register (dm9ka->intnum, (void *)iface, dm9Ka_isr_wrap);
  801134:	e0bffc17 	ldw	r2,-16(fp)
  801138:	11000017 	ldw	r4,0(r2)
  80113c:	e17ffe17 	ldw	r5,-8(fp)
  801140:	01802034 	movhi	r6,128
  801144:	31842704 	addi	r6,r6,4252
  801148:	08164480 	call	816448 <alt_irq_register>
  80114c:	e0bffd15 	stw	r2,-12(fp)
  if (err)
  801150:	e0bffd17 	ldw	r2,-12(fp)
  801154:	1005003a 	cmpeq	r2,r2,zero
  801158:	1000031e 	bne	r2,zero,801168 <dm9ka_init+0x8c>
    return (err);
  80115c:	e0bffd17 	ldw	r2,-12(fp)
  801160:	e0bfff15 	stw	r2,-4(fp)
  801164:	00001506 	br	8011bc <dm9ka_init+0xe0>
  
  nets[iface]->n_mib->ifAdminStatus = 1;    /* status = UP */
  801168:	e0bffe17 	ldw	r2,-8(fp)
  80116c:	00c03934 	movhi	r3,228
  801170:	18e79c04 	addi	r3,r3,-24976
  801174:	1085883a 	add	r2,r2,r2
  801178:	1085883a 	add	r2,r2,r2
  80117c:	10c5883a 	add	r2,r2,r3
  801180:	10800017 	ldw	r2,0(r2)
  801184:	10c02717 	ldw	r3,156(r2)
  801188:	00800044 	movi	r2,1
  80118c:	18800615 	stw	r2,24(r3)
  nets[iface]->n_mib->ifOperStatus  = 1;
  801190:	e0bffe17 	ldw	r2,-8(fp)
  801194:	00c03934 	movhi	r3,228
  801198:	18e79c04 	addi	r3,r3,-24976
  80119c:	1085883a 	add	r2,r2,r2
  8011a0:	1085883a 	add	r2,r2,r2
  8011a4:	10c5883a 	add	r2,r2,r3
  8011a8:	10800017 	ldw	r2,0(r2)
  8011ac:	10c02717 	ldw	r3,156(r2)
  8011b0:	00800044 	movi	r2,1
  8011b4:	18800715 	stw	r2,28(r3)
  
  return (0);
  8011b8:	e03fff15 	stw	zero,-4(fp)
  8011bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8011c0:	e037883a 	mov	sp,fp
  8011c4:	dfc00117 	ldw	ra,4(sp)
  8011c8:	df000017 	ldw	fp,0(sp)
  8011cc:	dec00204 	addi	sp,sp,8
  8011d0:	f800283a 	ret

008011d4 <dm9ka_close>:


int dm9ka_close(int iface)
{
  8011d4:	defffc04 	addi	sp,sp,-16
  8011d8:	dfc00315 	stw	ra,12(sp)
  8011dc:	df000215 	stw	fp,8(sp)
  8011e0:	df000204 	addi	fp,sp,8
  8011e4:	e13fff15 	stw	r4,-4(fp)
  DM9KA   dm9ka;
  printf("dm9ka_close\n");
  8011e8:	01002174 	movhi	r4,133
  8011ec:	212c0304 	addi	r4,r4,-20468
  8011f0:	08077600 	call	807760 <puts>
  nets[iface]->n_mib->ifAdminStatus = 2;    /* status = down */
  8011f4:	e0bfff17 	ldw	r2,-4(fp)
  8011f8:	00c03934 	movhi	r3,228
  8011fc:	18e79c04 	addi	r3,r3,-24976
  801200:	1085883a 	add	r2,r2,r2
  801204:	1085883a 	add	r2,r2,r2
  801208:	10c5883a 	add	r2,r2,r3
  80120c:	10800017 	ldw	r2,0(r2)
  801210:	10c02717 	ldw	r3,156(r2)
  801214:	00800084 	movi	r2,2
  801218:	18800615 	stw	r2,24(r3)
  
   /* get pointer to device structure */
  dm9ka = (DM9KA)nets[iface]->n_local;
  80121c:	e0bfff17 	ldw	r2,-4(fp)
  801220:	00c03934 	movhi	r3,228
  801224:	18e79c04 	addi	r3,r3,-24976
  801228:	1085883a 	add	r2,r2,r2
  80122c:	1085883a 	add	r2,r2,r2
  801230:	10c5883a 	add	r2,r2,r3
  801234:	10800017 	ldw	r2,0(r2)
  801238:	10802817 	ldw	r2,160(r2)
  80123c:	e0bffe15 	stw	r2,-8(fp)

    /* software-RESET NIC */
  dm9000a_iow(NCR, 0x03);   /* NCR REG. 00 RST Bit [0] = 1 reset on,
  801240:	0009883a 	mov	r4,zero
  801244:	014000c4 	movi	r5,3
  801248:	080066c0 	call	80066c <dm9000a_iow>
                          			 and LBK Bit [2:1] = 01b MAC loopback on */
  usleep(20);               /* wait > 10us for a software-RESET ok */
  80124c:	01000504 	movi	r4,20
  801250:	0816ec80 	call	816ec8 <usleep>
  dm9000a_iow(NCR, 0x00);   /* normalize */
  801254:	0009883a 	mov	r4,zero
  801258:	000b883a 	mov	r5,zero
  80125c:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(NCR, 0x03);
  801260:	0009883a 	mov	r4,zero
  801264:	014000c4 	movi	r5,3
  801268:	080066c0 	call	80066c <dm9000a_iow>
  usleep(20);
  80126c:	01000504 	movi	r4,20
  801270:	0816ec80 	call	816ec8 <usleep>
  dm9000a_iow(NCR, 0x00);
  801274:	0009883a 	mov	r4,zero
  801278:	000b883a 	mov	r5,zero
  80127c:	080066c0 	call	80066c <dm9000a_iow>

  /* this should reset these registers anyway, but 'just in case' */
  dm9000a_iow(IMR,  0x00);  /* no interrupts */
  801280:	01003fc4 	movi	r4,255
  801284:	000b883a 	mov	r5,zero
  801288:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(RCR , 0x00);  /* disable receive */
  80128c:	01000144 	movi	r4,5
  801290:	000b883a 	mov	r5,zero
  801294:	080066c0 	call	80066c <dm9000a_iow>
  dm9000a_iow(0x0F, 0x00);  /* Clear the all Event */
  801298:	010003c4 	movi	r4,15
  80129c:	000b883a 	mov	r5,zero
  8012a0:	080066c0 	call	80066c <dm9000a_iow>
  
  //s91_port_close(smsc);   /* release the ISR */
  //s91_reset(smsc);        /* reset the chip */

  nets[iface]->n_mib->ifOperStatus = 2;     /* status = down */
  8012a4:	e0bfff17 	ldw	r2,-4(fp)
  8012a8:	00c03934 	movhi	r3,228
  8012ac:	18e79c04 	addi	r3,r3,-24976
  8012b0:	1085883a 	add	r2,r2,r2
  8012b4:	1085883a 	add	r2,r2,r2
  8012b8:	10c5883a 	add	r2,r2,r3
  8012bc:	10800017 	ldw	r2,0(r2)
  8012c0:	10c02717 	ldw	r3,156(r2)
  8012c4:	00800084 	movi	r2,2
  8012c8:	18800715 	stw	r2,28(r3)
  return 0;  
  8012cc:	0005883a 	mov	r2,zero
}
  8012d0:	e037883a 	mov	sp,fp
  8012d4:	dfc00117 	ldw	ra,4(sp)
  8012d8:	df000017 	ldw	fp,0(sp)
  8012dc:	dec00204 	addi	sp,sp,8
  8012e0:	f800283a 	ret

008012e4 <dm9ka_stats>:

void dm9ka_stats(void * pio, int iface)
{
  8012e4:	defffb04 	addi	sp,sp,-20
  8012e8:	dfc00415 	stw	ra,16(sp)
  8012ec:	df000315 	stw	fp,12(sp)
  8012f0:	df000304 	addi	fp,sp,12
  8012f4:	e13ffe15 	stw	r4,-8(fp)
  8012f8:	e17fff15 	stw	r5,-4(fp)
  DM9KA dm9ka;
  printf("dm9ka_stats\n");
  8012fc:	01002174 	movhi	r4,133
  801300:	212c0604 	addi	r4,r4,-20456
  801304:	08077600 	call	807760 <puts>
  dm9ka = (DM9KA)(nets[iface]->n_local);
  801308:	e0bfff17 	ldw	r2,-4(fp)
  80130c:	00c03934 	movhi	r3,228
  801310:	18e79c04 	addi	r3,r3,-24976
  801314:	1085883a 	add	r2,r2,r2
  801318:	1085883a 	add	r2,r2,r2
  80131c:	10c5883a 	add	r2,r2,r3
  801320:	10800017 	ldw	r2,0(r2)
  801324:	10802817 	ldw	r2,160(r2)
  801328:	e0bffd15 	stw	r2,-12(fp)
    ns_printf(pio, "Sendq max:%d, current %d. IObase: 0x%lx ISR %d\n", 
            smsc->tosend.q_max, smsc->tosend.q_len, smsc->regbase, smsc->intnum);
  */
  
  return;
}
  80132c:	e037883a 	mov	sp,fp
  801330:	dfc00117 	ldw	ra,4(sp)
  801334:	df000017 	ldw	fp,0(sp)
  801338:	dec00204 	addi	sp,sp,8
  80133c:	f800283a 	ret

00801340 <dm9ka_pkt_send>:

extern void irq_Mask(void);
extern void irq_Unmask(void);

int dm9ka_pkt_send(PACKET pkt)
{
  801340:	defffa04 	addi	sp,sp,-24
  801344:	dfc00515 	stw	ra,20(sp)
  801348:	df000415 	stw	fp,16(sp)
  80134c:	df000404 	addi	fp,sp,16
  801350:	e13fff15 	stw	r4,-4(fp)
  unsigned int rv, slen;  
  DM9KA dm9ka = (DM9KA)pkt->net->n_local;
  801354:	e0bfff17 	ldw	r2,-4(fp)
  801358:	10800617 	ldw	r2,24(r2)
  80135c:	10802817 	ldw	r2,160(r2)
  801360:	e0bffc15 	stw	r2,-16(fp)
  slen = pkt->nb_plen - ETHHDR_BIAS;
  801364:	e0bfff17 	ldw	r2,-4(fp)
  801368:	10800417 	ldw	r2,16(r2)
  80136c:	10bfff84 	addi	r2,r2,-2
  801370:	e0bffd15 	stw	r2,-12(fp)
  if(slen < 64) slen = 64;
  801374:	e0bffd17 	ldw	r2,-12(fp)
  801378:	10801028 	cmpgeui	r2,r2,64
  80137c:	1000021e 	bne	r2,zero,801388 <dm9ka_pkt_send+0x48>
  801380:	00801004 	movi	r2,64
  801384:	e0bffd15 	stw	r2,-12(fp)

  //irq_Mask();
    
  rv = TransmitPacket(pkt->nb_prot + ETHHDR_BIAS, slen);
  801388:	e0bfff17 	ldw	r2,-4(fp)
  80138c:	10800317 	ldw	r2,12(r2)
  801390:	10800084 	addi	r2,r2,2
  801394:	1009883a 	mov	r4,r2
  801398:	e17ffd17 	ldw	r5,-12(fp)
  80139c:	080096c0 	call	80096c <TransmitPacket>
  8013a0:	e0bffe15 	stw	r2,-8(fp)
  if(rv == DMFE_SUCCESS) {
  8013a4:	e0bffe17 	ldw	r2,-8(fp)
  8013a8:	1004c03a 	cmpne	r2,r2,zero
  8013ac:	1000201e 	bne	r2,zero,801430 <dm9ka_pkt_send+0xf0>
    /* update packet statistics */
    dm9ka->netp->n_mib->ifOutOctets += (u_long)pkt->nb_plen;
  8013b0:	e0bffc17 	ldw	r2,-16(fp)
  8013b4:	10800417 	ldw	r2,16(r2)
  8013b8:	11002717 	ldw	r4,156(r2)
  8013bc:	e0bffc17 	ldw	r2,-16(fp)
  8013c0:	10800417 	ldw	r2,16(r2)
  8013c4:	10802717 	ldw	r2,156(r2)
  8013c8:	10c00f17 	ldw	r3,60(r2)
  8013cc:	e0bfff17 	ldw	r2,-4(fp)
  8013d0:	10800417 	ldw	r2,16(r2)
  8013d4:	1885883a 	add	r2,r3,r2
  8013d8:	20800f15 	stw	r2,60(r4)
    if(*pkt->nb_prot & 0x80)
  8013dc:	e0bfff17 	ldw	r2,-4(fp)
  8013e0:	10800317 	ldw	r2,12(r2)
  8013e4:	10800003 	ldbu	r2,0(r2)
  8013e8:	10803fcc 	andi	r2,r2,255
  8013ec:	1080201c 	xori	r2,r2,128
  8013f0:	10bfe004 	addi	r2,r2,-128
  8013f4:	1004403a 	cmpge	r2,r2,zero
  8013f8:	1000071e 	bne	r2,zero,801418 <dm9ka_pkt_send+0xd8>
      dm9ka->netp->n_mib->ifOutNUcastPkts++;
  8013fc:	e0bffc17 	ldw	r2,-16(fp)
  801400:	10800417 	ldw	r2,16(r2)
  801404:	10c02717 	ldw	r3,156(r2)
  801408:	18801117 	ldw	r2,68(r3)
  80140c:	10800044 	addi	r2,r2,1
  801410:	18801115 	stw	r2,68(r3)
  801414:	00000606 	br	801430 <dm9ka_pkt_send+0xf0>
    else
      dm9ka->netp->n_mib->ifOutUcastPkts++;
  801418:	e0bffc17 	ldw	r2,-16(fp)
  80141c:	10800417 	ldw	r2,16(r2)
  801420:	10c02717 	ldw	r3,156(r2)
  801424:	18801017 	ldw	r2,64(r3)
  801428:	10800044 	addi	r2,r2,1
  80142c:	18801015 	stw	r2,64(r3)
  }  
    
  //irq_Unmask();
  
  if(pkt) pk_free(pkt);
  801430:	e0bfff17 	ldw	r2,-4(fp)
  801434:	1005003a 	cmpeq	r2,r2,zero
  801438:	1000021e 	bne	r2,zero,801444 <dm9ka_pkt_send+0x104>
  80143c:	e13fff17 	ldw	r4,-4(fp)
  801440:	0829f180 	call	829f18 <pk_free>
  
  return (0);      /* alloc done interrupt will start xmit */
  801444:	0005883a 	mov	r2,zero
}
  801448:	e037883a 	mov	sp,fp
  80144c:	dfc00117 	ldw	ra,4(sp)
  801450:	df000017 	ldw	fp,0(sp)
  801454:	dec00204 	addi	sp,sp,8
  801458:	f800283a 	ret

0080145c <print>:
 * 
 * This routine is called to demonstrate doing something server-side when an
 * HTTP "POST" command is received.
 */
void print()
{
  80145c:	defffe04 	addi	sp,sp,-8
  801460:	dfc00115 	stw	ra,4(sp)
  801464:	df000015 	stw	fp,0(sp)
  801468:	d839883a 	mov	fp,sp
  printf("HTTP POST received.\n");
  80146c:	01002174 	movhi	r4,133
  801470:	212c9c04 	addi	r4,r4,-19856
  801474:	08077600 	call	807760 <puts>
}
  801478:	e037883a 	mov	sp,fp
  80147c:	dfc00117 	ldw	ra,4(sp)
  801480:	df000017 	ldw	fp,0(sp)
  801484:	dec00204 	addi	sp,sp,8
  801488:	f800283a 	ret

0080148c <sweep>:
/* To sweep or not to sweep?  The sweep form will tell this function what to do.
 */


void sweep(http_conn* conn)
{
  80148c:	defffc04 	addi	sp,sp,-16
  801490:	dfc00315 	stw	ra,12(sp)
  801494:	df000215 	stw	fp,8(sp)
  801498:	df000204 	addi	fp,sp,8
  80149c:	e13fff15 	stw	r4,-4(fp)
  char *delimiter_token;

  /* Set board_funcs to be off, by default. */
  
  board_funcs.LED_ON = 0;
  8014a0:	00803874 	movhi	r2,225
  8014a4:	1099b604 	addi	r2,r2,26328
  8014a8:	10000005 	stb	zero,0(r2)
  board_funcs.SSD_ON = 0;
  8014ac:	00803874 	movhi	r2,225
  8014b0:	1099b604 	addi	r2,r2,26328
  8014b4:	10000045 	stb	zero,1(r2)

  delimiter_token = strtok(conn->rx_rd_pos, "&");
  8014b8:	e0bfff17 	ldw	r2,-4(fp)
  8014bc:	11000d17 	ldw	r4,52(r2)
  8014c0:	01402174 	movhi	r5,133
  8014c4:	296ca104 	addi	r5,r5,-19836
  8014c8:	08091f80 	call	8091f8 <strtok>
  8014cc:	e0bffe15 	stw	r2,-8(fp)
  
  while(delimiter_token != NULL)
  8014d0:	00001a06 	br	80153c <sweep+0xb0>
  {
    if (strstr(delimiter_token, "LED"))
  8014d4:	e13ffe17 	ldw	r4,-8(fp)
  8014d8:	01402174 	movhi	r5,133
  8014dc:	296ca204 	addi	r5,r5,-19832
  8014e0:	0808b980 	call	808b98 <strstr>
  8014e4:	1005003a 	cmpeq	r2,r2,zero
  8014e8:	1000051e 	bne	r2,zero,801500 <sweep+0x74>
    {
      board_funcs.LED_ON = 1;
  8014ec:	00c03874 	movhi	r3,225
  8014f0:	18d9b604 	addi	r3,r3,26328
  8014f4:	00800044 	movi	r2,1
  8014f8:	18800005 	stb	r2,0(r3)
  8014fc:	00000a06 	br	801528 <sweep+0x9c>
    }
    else if (strstr(delimiter_token, "seven"))
  801500:	e13ffe17 	ldw	r4,-8(fp)
  801504:	01402174 	movhi	r5,133
  801508:	296ca304 	addi	r5,r5,-19828
  80150c:	0808b980 	call	808b98 <strstr>
  801510:	1005003a 	cmpeq	r2,r2,zero
  801514:	1000041e 	bne	r2,zero,801528 <sweep+0x9c>
    {
      board_funcs.SSD_ON = 1;
  801518:	00c03874 	movhi	r3,225
  80151c:	18d9b604 	addi	r3,r3,26328
  801520:	00800044 	movi	r2,1
  801524:	18800045 	stb	r2,1(r3)
    }

    delimiter_token = strtok( NULL, "&" );
  801528:	0009883a 	mov	r4,zero
  80152c:	01402174 	movhi	r5,133
  801530:	296ca104 	addi	r5,r5,-19836
  801534:	08091f80 	call	8091f8 <strtok>
  801538:	e0bffe15 	stw	r2,-8(fp)
  board_funcs.LED_ON = 0;
  board_funcs.SSD_ON = 0;

  delimiter_token = strtok(conn->rx_rd_pos, "&");
  
  while(delimiter_token != NULL)
  80153c:	e0bffe17 	ldw	r2,-8(fp)
  801540:	1004c03a 	cmpne	r2,r2,zero
  801544:	103fe31e 	bne	r2,zero,8014d4 <sweep+0x48>
    }

    delimiter_token = strtok( NULL, "&" );
  }
  
  OSMboxPost(board_control_mbox, (void*)&board_funcs);
  801548:	00802174 	movhi	r2,133
  80154c:	1082d804 	addi	r2,r2,2912
  801550:	11000017 	ldw	r4,0(r2)
  801554:	01403874 	movhi	r5,225
  801558:	2959b604 	addi	r5,r5,26328
  80155c:	081b74c0 	call	81b74c <OSMboxPost>
 
}
  801560:	e037883a 	mov	sp,fp
  801564:	dfc00117 	ldw	ra,4(sp)
  801568:	df000017 	ldw	fp,0(sp)
  80156c:	dec00204 	addi	sp,sp,8
  801570:	f800283a 	ret

00801574 <http_cleanup_lcd_text>:

void http_cleanup_lcd_text()
{
  801574:	defffe04 	addi	sp,sp,-8
  801578:	df000115 	stw	fp,4(sp)
  80157c:	df000104 	addi	fp,sp,4

  /* Step through the board_funcs.LCD_TEXT array looking for chars to replace.
   * For now, just replace '+'s with space characters.
   */

  for (index = 0; index < 20; ++index)
  801580:	e03fff15 	stw	zero,-4(fp)
  801584:	00001506 	br	8015dc <http_cleanup_lcd_text+0x68>
  {
    if (board_funcs.LCD_TEXT[index] == '+')
  801588:	e0ffff17 	ldw	r3,-4(fp)
  80158c:	00803874 	movhi	r2,225
  801590:	1099b604 	addi	r2,r2,26328
  801594:	10c5883a 	add	r2,r2,r3
  801598:	10800084 	addi	r2,r2,2
  80159c:	10800003 	ldbu	r2,0(r2)
  8015a0:	10803fcc 	andi	r2,r2,255
  8015a4:	1080201c 	xori	r2,r2,128
  8015a8:	10bfe004 	addi	r2,r2,-128
  8015ac:	10800ad8 	cmpnei	r2,r2,43
  8015b0:	1000071e 	bne	r2,zero,8015d0 <http_cleanup_lcd_text+0x5c>
    {
      board_funcs.LCD_TEXT[index] = ' ';
  8015b4:	e0ffff17 	ldw	r3,-4(fp)
  8015b8:	00803874 	movhi	r2,225
  8015bc:	1099b604 	addi	r2,r2,26328
  8015c0:	10c5883a 	add	r2,r2,r3
  8015c4:	10c00084 	addi	r3,r2,2
  8015c8:	00800804 	movi	r2,32
  8015cc:	18800005 	stb	r2,0(r3)

  /* Step through the board_funcs.LCD_TEXT array looking for chars to replace.
   * For now, just replace '+'s with space characters.
   */

  for (index = 0; index < 20; ++index)
  8015d0:	e0bfff17 	ldw	r2,-4(fp)
  8015d4:	10800044 	addi	r2,r2,1
  8015d8:	e0bfff15 	stw	r2,-4(fp)
  8015dc:	e0bfff17 	ldw	r2,-4(fp)
  8015e0:	10800510 	cmplti	r2,r2,20
  8015e4:	103fe81e 	bne	r2,zero,801588 <http_cleanup_lcd_text+0x14>
    if (board_funcs.LCD_TEXT[index] == '+')
    {
      board_funcs.LCD_TEXT[index] = ' ';
    }
  }
} 
  8015e8:	e037883a 	mov	sp,fp
  8015ec:	df000017 	ldw	fp,0(sp)
  8015f0:	dec00104 	addi	sp,sp,4
  8015f4:	f800283a 	ret

008015f8 <lcd_output>:

void lcd_output(http_conn* conn)
{
  8015f8:	defffb04 	addi	sp,sp,-20
  8015fc:	dfc00415 	stw	ra,16(sp)
  801600:	df000315 	stw	fp,12(sp)
  801604:	df000304 	addi	fp,sp,12
  801608:	e13fff15 	stw	r4,-4(fp)
  char* delimiter_token;
  char* temp_pos;

  delimiter_token = strtok(conn->rx_rd_pos, "&");
  80160c:	e0bfff17 	ldw	r2,-4(fp)
  801610:	11000d17 	ldw	r4,52(r2)
  801614:	01402174 	movhi	r5,133
  801618:	296ca104 	addi	r5,r5,-19836
  80161c:	08091f80 	call	8091f8 <strtok>
  801620:	e0bffe15 	stw	r2,-8(fp)

  while( delimiter_token != NULL )
  801624:	00001706 	br	801684 <lcd_output+0x8c>
  {
    if (strstr(delimiter_token, "lcd_text"))
  801628:	e13ffe17 	ldw	r4,-8(fp)
  80162c:	01402174 	movhi	r5,133
  801630:	296ca504 	addi	r5,r5,-19820
  801634:	0808b980 	call	808b98 <strstr>
  801638:	1005003a 	cmpeq	r2,r2,zero
  80163c:	10000c1e 	bne	r2,zero,801670 <lcd_output+0x78>
    {
      temp_pos = strstr(delimiter_token, "=");
  801640:	e13ffe17 	ldw	r4,-8(fp)
  801644:	01400f44 	movi	r5,61
  801648:	0807fa80 	call	807fa8 <strchr>
  80164c:	e0bffd15 	stw	r2,-12(fp)
      ++temp_pos;
  801650:	e0bffd17 	ldw	r2,-12(fp)
  801654:	10800044 	addi	r2,r2,1
  801658:	e0bffd15 	stw	r2,-12(fp)
      /* LCD_TEXT is limited to 20 characters...limiting string to that size. */
      strncpy( board_funcs.LCD_TEXT, temp_pos, 20 );
  80165c:	01003874 	movhi	r4,225
  801660:	2119b684 	addi	r4,r4,26330
  801664:	e17ffd17 	ldw	r5,-12(fp)
  801668:	01800504 	movi	r6,20
  80166c:	08089a80 	call	8089a8 <strncpy>
    }
    delimiter_token = strtok( NULL, "&" );
  801670:	0009883a 	mov	r4,zero
  801674:	01402174 	movhi	r5,133
  801678:	296ca104 	addi	r5,r5,-19836
  80167c:	08091f80 	call	8091f8 <strtok>
  801680:	e0bffe15 	stw	r2,-8(fp)
  char* delimiter_token;
  char* temp_pos;

  delimiter_token = strtok(conn->rx_rd_pos, "&");

  while( delimiter_token != NULL )
  801684:	e0bffe17 	ldw	r2,-8(fp)
  801688:	1004c03a 	cmpne	r2,r2,zero
  80168c:	103fe61e 	bne	r2,zero,801628 <lcd_output+0x30>
    delimiter_token = strtok( NULL, "&" );
  }

  /* Clean up the HTTP-formatted text string.  For now this just replaces '+'s with spaces. */

  http_cleanup_lcd_text();
  801690:	08015740 	call	801574 <http_cleanup_lcd_text>

  /* Post the updated LCD_TEXT to the board_control_mbox. */
  OSMboxPost(board_control_mbox, (void*)&board_funcs);
  801694:	00802174 	movhi	r2,133
  801698:	1082d804 	addi	r2,r2,2912
  80169c:	11000017 	ldw	r4,0(r2)
  8016a0:	01403874 	movhi	r5,225
  8016a4:	2959b604 	addi	r5,r5,26328
  8016a8:	081b74c0 	call	81b74c <OSMboxPost>

}
  8016ac:	e037883a 	mov	sp,fp
  8016b0:	dfc00117 	ldw	ra,4(sp)
  8016b4:	df000017 	ldw	fp,0(sp)
  8016b8:	dec00204 	addi	sp,sp,8
  8016bc:	f800283a 	ret

008016c0 <http_parse_multipart_header>:

int http_parse_multipart_header( http_conn* conn )
{
  8016c0:	defffa04 	addi	sp,sp,-24
  8016c4:	dfc00515 	stw	ra,20(sp)
  8016c8:	df000415 	stw	fp,16(sp)
  8016cc:	df000404 	addi	fp,sp,16
  8016d0:	e13ffe15 	stw	r4,-8(fp)
  /* 
   * For now, make the assumption that no multipart headers are split
   * across packets.  This is a reasonable assumption, but not a surety.
   *
   */
  while( (temp_pos = strstr( conn->rx_rd_pos, conn->boundary )) )
  8016d4:	00007e06 	br	8018d0 <http_parse_multipart_header+0x210>
  {
    if( strstr( conn->rx_rd_pos, "upload_image" ) )
  8016d8:	e0bffe17 	ldw	r2,-8(fp)
  8016dc:	11000d17 	ldw	r4,52(r2)
  8016e0:	01402174 	movhi	r5,133
  8016e4:	296ca804 	addi	r5,r5,-19808
  8016e8:	0808b980 	call	808b98 <strstr>
  8016ec:	1005003a 	cmpeq	r2,r2,zero
  8016f0:	1000061e 	bne	r2,zero,80170c <http_parse_multipart_header+0x4c>
    {
      /* Terminate the received data by going back 5
       * from temp_pos and setting it to NULL.*/
      *(temp_pos-5) = '\0';
  8016f4:	e0bffc17 	ldw	r2,-16(fp)
  8016f8:	10bffec4 	addi	r2,r2,-5
  8016fc:	10000005 	stb	zero,0(r2)
      conn->file_upload = 0;
  801700:	e0bffe17 	ldw	r2,-8(fp)
  801704:	10000a15 	stw	zero,40(r2)
      break;
  801708:	00007a06 	br	8018f4 <http_parse_multipart_header+0x234>
    }
    /* Find the end of the content disposition line. */
    conn->rx_rd_pos = strstr( conn->rx_rd_pos, "Content-Disposition" );
  80170c:	e0bffe17 	ldw	r2,-8(fp)
  801710:	11000d17 	ldw	r4,52(r2)
  801714:	01402174 	movhi	r5,133
  801718:	296cac04 	addi	r5,r5,-19792
  80171c:	0808b980 	call	808b98 <strstr>
  801720:	1007883a 	mov	r3,r2
  801724:	e0bffe17 	ldw	r2,-8(fp)
  801728:	10c00d15 	stw	r3,52(r2)
    if( conn->rx_rd_pos == 0 ) return(-1);
  80172c:	e0bffe17 	ldw	r2,-8(fp)
  801730:	10800d17 	ldw	r2,52(r2)
  801734:	1004c03a 	cmpne	r2,r2,zero
  801738:	1000031e 	bne	r2,zero,801748 <http_parse_multipart_header+0x88>
  80173c:	00bfffc4 	movi	r2,-1
  801740:	e0bfff15 	stw	r2,-4(fp)
  801744:	00006c06 	br	8018f8 <http_parse_multipart_header+0x238>
    cr_pos = strchr( conn->rx_rd_pos, '\r' );
  801748:	e0bffe17 	ldw	r2,-8(fp)
  80174c:	11000d17 	ldw	r4,52(r2)
  801750:	01400344 	movi	r5,13
  801754:	0807fa80 	call	807fa8 <strchr>
  801758:	e0bffd15 	stw	r2,-12(fp)
    if( cr_pos == 0 ) return(-1);
  80175c:	e0bffd17 	ldw	r2,-12(fp)
  801760:	1004c03a 	cmpne	r2,r2,zero
  801764:	1000031e 	bne	r2,zero,801774 <http_parse_multipart_header+0xb4>
  801768:	00bfffc4 	movi	r2,-1
  80176c:	e0bfff15 	stw	r2,-4(fp)
  801770:	00006106 	br	8018f8 <http_parse_multipart_header+0x238>
    /* Insert a NULL byte over the second quotation mark. */
    *(cr_pos - 1) = '\0';
  801774:	e0bffd17 	ldw	r2,-12(fp)
  801778:	10bfffc4 	addi	r2,r2,-1
  80177c:	10000005 	stb	zero,0(r2)
    /* Move rx_rd_pos to end of the line, just beyond the newly
     * inserted NULL.
     */
    /* Look for "=" delimiter. */
    temp_pos = strchr( conn->rx_rd_pos, '=' );
  801780:	e0bffe17 	ldw	r2,-8(fp)
  801784:	11000d17 	ldw	r4,52(r2)
  801788:	01400f44 	movi	r5,61
  80178c:	0807fa80 	call	807fa8 <strchr>
  801790:	e0bffc15 	stw	r2,-16(fp)
    if( temp_pos == 0 ) return(-1);
  801794:	e0bffc17 	ldw	r2,-16(fp)
  801798:	1004c03a 	cmpne	r2,r2,zero
  80179c:	1000031e 	bne	r2,zero,8017ac <http_parse_multipart_header+0xec>
  8017a0:	00bfffc4 	movi	r2,-1
  8017a4:	e0bfff15 	stw	r2,-4(fp)
  8017a8:	00005306 	br	8018f8 <http_parse_multipart_header+0x238>
    /* If second "=" delimiter exists, then parse for conn->filename. */
    if( (temp_pos = strchr( (temp_pos+1), '=' )) )
  8017ac:	e0bffc17 	ldw	r2,-16(fp)
  8017b0:	11000044 	addi	r4,r2,1
  8017b4:	01400f44 	movi	r5,61
  8017b8:	0807fa80 	call	807fa8 <strchr>
  8017bc:	e0bffc15 	stw	r2,-16(fp)
  8017c0:	e0bffc17 	ldw	r2,-16(fp)
  8017c4:	1005003a 	cmpeq	r2,r2,zero
  8017c8:	1000281e 	bne	r2,zero,80186c <http_parse_multipart_header+0x1ac>
    {
			if( strlen(temp_pos+2) > 256 )
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	11000084 	addi	r4,r2,2
  8017d4:	08088440 	call	808844 <strlen>
  8017d8:	10804070 	cmpltui	r2,r2,257
  8017dc:	1000031e 	bne	r2,zero,8017ec <http_parse_multipart_header+0x12c>
			{
				return(-1);
  8017e0:	00bfffc4 	movi	r2,-1
  8017e4:	e0bfff15 	stw	r2,-4(fp)
  8017e8:	00004306 	br	8018f8 <http_parse_multipart_header+0x238>
			}
      strcpy( conn->filename, (temp_pos+2) );
  8017ec:	e0bffe17 	ldw	r2,-8(fp)
  8017f0:	11001304 	addi	r4,r2,76
  8017f4:	e0bffc17 	ldw	r2,-16(fp)
  8017f8:	11400084 	addi	r5,r2,2
  8017fc:	08081440 	call	808144 <strcpy>
      /* 
       * Place rx_rd_pos at the start of the next pertinent line. 
       * In this case, skip two lines ahead.
       */
      cr_pos = strchr( (cr_pos+1), '\r');
  801800:	e0bffd17 	ldw	r2,-12(fp)
  801804:	11000044 	addi	r4,r2,1
  801808:	01400344 	movi	r5,13
  80180c:	0807fa80 	call	807fa8 <strchr>
  801810:	e0bffd15 	stw	r2,-12(fp)
      if( cr_pos == 0 ) return(-1);
  801814:	e0bffd17 	ldw	r2,-12(fp)
  801818:	1004c03a 	cmpne	r2,r2,zero
  80181c:	1000031e 	bne	r2,zero,80182c <http_parse_multipart_header+0x16c>
  801820:	00bfffc4 	movi	r2,-1
  801824:	e0bfff15 	stw	r2,-4(fp)
  801828:	00003306 	br	8018f8 <http_parse_multipart_header+0x238>
      cr_pos = strchr( (cr_pos+1), '\r');
  80182c:	e0bffd17 	ldw	r2,-12(fp)
  801830:	11000044 	addi	r4,r2,1
  801834:	01400344 	movi	r5,13
  801838:	0807fa80 	call	807fa8 <strchr>
  80183c:	e0bffd15 	stw	r2,-12(fp)
      if( cr_pos == 0 ) return(-1);
  801840:	e0bffd17 	ldw	r2,-12(fp)
  801844:	1004c03a 	cmpne	r2,r2,zero
  801848:	1000031e 	bne	r2,zero,801858 <http_parse_multipart_header+0x198>
  80184c:	00bfffc4 	movi	r2,-1
  801850:	e0bfff15 	stw	r2,-4(fp)
  801854:	00002806 	br	8018f8 <http_parse_multipart_header+0x238>
      conn->rx_rd_pos = cr_pos+2;
  801858:	e0bffd17 	ldw	r2,-12(fp)
  80185c:	10c00084 	addi	r3,r2,2
  801860:	e0bffe17 	ldw	r2,-8(fp)
  801864:	10c00d15 	stw	r3,52(r2)
  801868:	00001906 	br	8018d0 <http_parse_multipart_header+0x210>
      /* 
       * If no second delimiter, then skip ahead to start of 2nd. line.
       * That will be the start of the flash device name.
       *
       */
      temp_pos = strchr( (cr_pos+1), '\r' );
  80186c:	e0bffd17 	ldw	r2,-12(fp)
  801870:	11000044 	addi	r4,r2,1
  801874:	01400344 	movi	r5,13
  801878:	0807fa80 	call	807fa8 <strchr>
  80187c:	e0bffc15 	stw	r2,-16(fp)
      conn->rx_rd_pos = temp_pos+2;
  801880:	e0bffc17 	ldw	r2,-16(fp)
  801884:	10c00084 	addi	r3,r2,2
  801888:	e0bffe17 	ldw	r2,-8(fp)
  80188c:	10c00d15 	stw	r3,52(r2)
      cr_pos = strchr( conn->rx_rd_pos, '\r' );
  801890:	e0bffe17 	ldw	r2,-8(fp)
  801894:	11000d17 	ldw	r4,52(r2)
  801898:	01400344 	movi	r5,13
  80189c:	0807fa80 	call	807fa8 <strchr>
  8018a0:	e0bffd15 	stw	r2,-12(fp)
      *cr_pos = '\0';
  8018a4:	e0bffd17 	ldw	r2,-12(fp)
  8018a8:	10000005 	stb	zero,0(r2)
      /* Ok, now copy the flash_device string. */
      strcpy( conn->flash_device, conn->rx_rd_pos );
  8018ac:	e0bffe17 	ldw	r2,-8(fp)
  8018b0:	11005304 	addi	r4,r2,332
  8018b4:	e0bffe17 	ldw	r2,-8(fp)
  8018b8:	11400d17 	ldw	r5,52(r2)
  8018bc:	08081440 	call	808144 <strcpy>
      /* Place rx_rd_pos at the start of the next line. */
      conn->rx_rd_pos = cr_pos+2;
  8018c0:	e0bffd17 	ldw	r2,-12(fp)
  8018c4:	10c00084 	addi	r3,r2,2
  8018c8:	e0bffe17 	ldw	r2,-8(fp)
  8018cc:	10c00d15 	stw	r3,52(r2)
  /* 
   * For now, make the assumption that no multipart headers are split
   * across packets.  This is a reasonable assumption, but not a surety.
   *
   */
  while( (temp_pos = strstr( conn->rx_rd_pos, conn->boundary )) )
  8018d0:	e0bffe17 	ldw	r2,-8(fp)
  8018d4:	11000d17 	ldw	r4,52(r2)
  8018d8:	e0bffe17 	ldw	r2,-8(fp)
  8018dc:	11406204 	addi	r5,r2,392
  8018e0:	0808b980 	call	808b98 <strstr>
  8018e4:	e0bffc15 	stw	r2,-16(fp)
  8018e8:	e0bffc17 	ldw	r2,-16(fp)
  8018ec:	1004c03a 	cmpne	r2,r2,zero
  8018f0:	103f791e 	bne	r2,zero,8016d8 <http_parse_multipart_header+0x18>
      strcpy( conn->flash_device, conn->rx_rd_pos );
      /* Place rx_rd_pos at the start of the next line. */
      conn->rx_rd_pos = cr_pos+2;
    }
  }
  return(0);
  8018f4:	e03fff15 	stw	zero,-4(fp)
  8018f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8018fc:	e037883a 	mov	sp,fp
  801900:	dfc00117 	ldw	ra,4(sp)
  801904:	df000017 	ldw	fp,0(sp)
  801908:	dec00204 	addi	sp,sp,8
  80190c:	f800283a 	ret

00801910 <file_upload>:

void file_upload(http_conn* conn)
{
  801910:	defff904 	addi	sp,sp,-28
  801914:	dfc00615 	stw	ra,24(sp)
  801918:	df000515 	stw	fp,20(sp)
  80191c:	df000504 	addi	fp,sp,20
  801920:	e13fff15 	stw	r4,-4(fp)
  int buf_len;
  int data_used;
  struct upload_buf_struct *upload_buffer = &upload_buf;
  801924:	008021b4 	movhi	r2,134
  801928:	10b65404 	addi	r2,r2,-9904
  80192c:	e0bffc15 	stw	r2,-16(fp)
  struct flash_inf_struct *flash_info = &flash_inf;
  801930:	008038b4 	movhi	r2,226
  801934:	1089c104 	addi	r2,r2,9988
  801938:	e0bffb15 	stw	r2,-20(fp)
  /* Look for boundary, parse multipart form "mini" header information if found. */
  if( strstr( conn->rx_rd_pos, conn->boundary ) )
  80193c:	e0bfff17 	ldw	r2,-4(fp)
  801940:	11000d17 	ldw	r4,52(r2)
  801944:	e0bfff17 	ldw	r2,-4(fp)
  801948:	11406204 	addi	r5,r2,392
  80194c:	0808b980 	call	808b98 <strstr>
  801950:	1005003a 	cmpeq	r2,r2,zero
  801954:	10000a1e 	bne	r2,zero,801980 <file_upload+0x70>
  {
    if( http_parse_multipart_header( conn ) )
  801958:	e13fff17 	ldw	r4,-4(fp)
  80195c:	08016c00 	call	8016c0 <http_parse_multipart_header>
  801960:	1005003a 	cmpeq	r2,r2,zero
  801964:	1000061e 	bne	r2,zero,801980 <file_upload+0x70>
    {
      printf( "multipart-form:  header parse failure...resetting connection!" );
  801968:	01002174 	movhi	r4,133
  80196c:	212cb104 	addi	r4,r4,-19772
  801970:	08076480 	call	807648 <printf>
      conn->state = RESET;
  801974:	e0ffff17 	ldw	r3,-4(fp)
  801978:	00800104 	movi	r2,4
  80197c:	18800015 	stw	r2,0(r3)
    }
  }
  /* Exception for IE.  It sometimes sends _really_ small initial packets! */
  if( strchr( conn->rx_rd_pos, ':' ) )
  801980:	e0bfff17 	ldw	r2,-4(fp)
  801984:	11000d17 	ldw	r4,52(r2)
  801988:	01400e84 	movi	r5,58
  80198c:	0807fa80 	call	807fa8 <strchr>
  801990:	1005003a 	cmpeq	r2,r2,zero
  801994:	1000031e 	bne	r2,zero,8019a4 <file_upload+0x94>
  {
    conn->state = READY;
  801998:	e0bfff17 	ldw	r2,-4(fp)
  80199c:	10000015 	stw	zero,0(r2)
    return;
  8019a0:	00006f06 	br	801b60 <file_upload+0x250>
  }
  /* Calculate the string size... */
  buf_len = strlen(conn->rx_rd_pos);
  8019a4:	e0bfff17 	ldw	r2,-4(fp)
  8019a8:	11000d17 	ldw	r4,52(r2)
  8019ac:	08088440 	call	808844 <strlen>
  8019b0:	e0bffe15 	stw	r2,-8(fp)
  conn->content_received = conn->content_received + buf_len;
  8019b4:	e0bfff17 	ldw	r2,-4(fp)
  8019b8:	10c00617 	ldw	r3,24(r2)
  8019bc:	e0bffe17 	ldw	r2,-8(fp)
  8019c0:	1887883a 	add	r3,r3,r2
  8019c4:	e0bfff17 	ldw	r2,-4(fp)
  8019c8:	10c00615 	stw	r3,24(r2)
  /* Copy all the received data into the upload buffer. */
  if ( memcpy( (void*) upload_buffer->wr_pos, 
  8019cc:	e0bffc17 	ldw	r2,-16(fp)
  8019d0:	11000017 	ldw	r4,0(r2)
  8019d4:	e0bfff17 	ldw	r2,-4(fp)
  8019d8:	10800d17 	ldw	r2,52(r2)
  8019dc:	e0fffe17 	ldw	r3,-8(fp)
  8019e0:	100b883a 	mov	r5,r2
  8019e4:	180d883a 	mov	r6,r3
  8019e8:	08073380 	call	807338 <memcpy>
  8019ec:	1004c03a 	cmpne	r2,r2,zero
  8019f0:	1000031e 	bne	r2,zero,801a00 <file_upload+0xf0>
               (void*) conn->rx_rd_pos, 
               buf_len ) == NULL )
  {
    printf( "ERROR:  memcpy to file upload buffer failed!" );
  8019f4:	01002174 	movhi	r4,133
  8019f8:	212cc104 	addi	r4,r4,-19708
  8019fc:	08076480 	call	807648 <printf>
  }
  /* Increment the wr_pos pointer to just after the received data. */
  upload_buffer->wr_pos = upload_buffer->wr_pos + buf_len;
  801a00:	e0bffc17 	ldw	r2,-16(fp)
  801a04:	10c00017 	ldw	r3,0(r2)
  801a08:	e0bffe17 	ldw	r2,-8(fp)
  801a0c:	1887883a 	add	r3,r3,r2
  801a10:	e0bffc17 	ldw	r2,-16(fp)
  801a14:	10c00015 	stw	r3,0(r2)
  conn->rx_rd_pos = conn->rx_rd_pos + buf_len;
  801a18:	e0bfff17 	ldw	r2,-4(fp)
  801a1c:	10c00d17 	ldw	r3,52(r2)
  801a20:	e0bffe17 	ldw	r2,-8(fp)
  801a24:	1887883a 	add	r3,r3,r2
  801a28:	e0bfff17 	ldw	r2,-4(fp)
  801a2c:	10c00d15 	stw	r3,52(r2)
  /* Reset the buffers after copying the data into the big intermediate 
   * buffer.*/
  data_used = conn->rx_rd_pos - conn->rx_buffer;
  801a30:	e0bfff17 	ldw	r2,-4(fp)
  801a34:	10800d17 	ldw	r2,52(r2)
  801a38:	1007883a 	mov	r3,r2
  801a3c:	e0bfff17 	ldw	r2,-4(fp)
  801a40:	10801117 	ldw	r2,68(r2)
  801a44:	1885c83a 	sub	r2,r3,r2
  801a48:	e0bffd15 	stw	r2,-12(fp)
  memmove(conn->rx_buffer,conn->rx_rd_pos,conn->rx_wr_pos-conn->rx_rd_pos);
  801a4c:	e0bfff17 	ldw	r2,-4(fp)
  801a50:	11001117 	ldw	r4,68(r2)
  801a54:	e0bfff17 	ldw	r2,-4(fp)
  801a58:	11400d17 	ldw	r5,52(r2)
  801a5c:	e0bfff17 	ldw	r2,-4(fp)
  801a60:	10800e17 	ldw	r2,56(r2)
  801a64:	1007883a 	mov	r3,r2
  801a68:	e0bfff17 	ldw	r2,-4(fp)
  801a6c:	10800d17 	ldw	r2,52(r2)
  801a70:	1885c83a 	sub	r2,r3,r2
  801a74:	100d883a 	mov	r6,r2
  801a78:	08073d80 	call	8073d8 <memmove>
  conn->rx_rd_pos = conn->rx_buffer;
  801a7c:	e0bfff17 	ldw	r2,-4(fp)
  801a80:	10c01117 	ldw	r3,68(r2)
  801a84:	e0bfff17 	ldw	r2,-4(fp)
  801a88:	10c00d15 	stw	r3,52(r2)
  conn->rx_wr_pos -= data_used;
  801a8c:	e0bfff17 	ldw	r2,-4(fp)
  801a90:	10c00e17 	ldw	r3,56(r2)
  801a94:	e0bffd17 	ldw	r2,-12(fp)
  801a98:	1887c83a 	sub	r3,r3,r2
  801a9c:	e0bfff17 	ldw	r2,-4(fp)
  801aa0:	10c00e15 	stw	r3,56(r2)
  memset(conn->rx_wr_pos, 0, data_used);
  801aa4:	e0bfff17 	ldw	r2,-4(fp)
  801aa8:	10800e17 	ldw	r2,56(r2)
  801aac:	e0fffd17 	ldw	r3,-12(fp)
  801ab0:	1009883a 	mov	r4,r2
  801ab4:	180d883a 	mov	r6,r3
  801ab8:	000b883a 	mov	r5,zero
  801abc:	08074b80 	call	8074b8 <memset>
  if ( conn->file_upload == 0 )
  801ac0:	e0bfff17 	ldw	r2,-4(fp)
  801ac4:	10800a17 	ldw	r2,40(r2)
  801ac8:	1004c03a 	cmpne	r2,r2,zero
  801acc:	1000221e 	bne	r2,zero,801b58 <file_upload+0x248>
  {
    printf( "Received a total of %d bytes.\n", conn->content_received );
  801ad0:	e0bfff17 	ldw	r2,-4(fp)
  801ad4:	11400617 	ldw	r5,24(r2)
  801ad8:	01002174 	movhi	r4,133
  801adc:	212ccd04 	addi	r4,r4,-19660
  801ae0:	08076480 	call	807648 <printf>
    /* Insert a NULL character (temporarily). */
    *upload_buffer->wr_pos = '\0';
  801ae4:	e0bffc17 	ldw	r2,-16(fp)
  801ae8:	10800017 	ldw	r2,0(r2)
  801aec:	10000005 	stb	zero,0(r2)
    /* Populate flash_info struct... print the buffer size. */
    flash_info->size = (int) strlen(upload_buffer->buffer);
  801af0:	e0bffc17 	ldw	r2,-16(fp)
  801af4:	11000204 	addi	r4,r2,8
  801af8:	08088440 	call	808844 <strlen>
  801afc:	1007883a 	mov	r3,r2
  801b00:	e0bffb17 	ldw	r2,-20(fp)
  801b04:	10c00115 	stw	r3,4(r2)
    printf( "Upload Buffer size = %d.\n", flash_info->size);
  801b08:	e0bffb17 	ldw	r2,-20(fp)
  801b0c:	11400117 	ldw	r5,4(r2)
  801b10:	01002174 	movhi	r4,133
  801b14:	212cd504 	addi	r4,r4,-19628
  801b18:	08076480 	call	807648 <printf>
    strcpy( flash_info->device, conn->flash_device );
  801b1c:	e0bffb17 	ldw	r2,-20(fp)
  801b20:	11000204 	addi	r4,r2,8
  801b24:	e0bfff17 	ldw	r2,-4(fp)
  801b28:	11405304 	addi	r5,r2,332
  801b2c:	08081440 	call	808144 <strcpy>
    flash_info->start = upload_buffer->rd_pos;
  801b30:	e0bffc17 	ldw	r2,-16(fp)
  801b34:	10c00117 	ldw	r3,4(r2)
  801b38:	e0bffb17 	ldw	r2,-20(fp)
  801b3c:	10c00015 	stw	r3,0(r2)
    /* Populate the flash_inf struct. */
    //printf( "Here's the Buffer:\n\n%s", upload_buffer->buffer);
    http_find_file(conn);
  801b40:	e13fff17 	ldw	r4,-4(fp)
  801b44:	0802f380 	call	802f38 <http_find_file>
    conn->close = 1;
  801b48:	e0ffff17 	ldw	r3,-4(fp)
  801b4c:	00800044 	movi	r2,1
  801b50:	18800415 	stw	r2,16(r3)
  801b54:	00000206 	br	801b60 <file_upload+0x250>
  }
  else
  {
    conn->state = READY;
  801b58:	e0bfff17 	ldw	r2,-4(fp)
  801b5c:	10000015 	stw	zero,0(r2)
  }
}
  801b60:	e037883a 	mov	sp,fp
  801b64:	dfc00117 	ldw	ra,4(sp)
  801b68:	df000017 	ldw	fp,0(sp)
  801b6c:	dec00204 	addi	sp,sp,8
  801b70:	f800283a 	ret

00801b74 <ProgFlashStub>:
 *
 * A thin wrapper around the ProgSRECBuf() function in srec_flash.c.
 *
 */
void ProgFlashStub(http_conn* conn)
{
  801b74:	defffc04 	addi	sp,sp,-16
  801b78:	dfc00315 	stw	ra,12(sp)
  801b7c:	df000215 	stw	fp,8(sp)
  801b80:	df000204 	addi	fp,sp,8
  801b84:	e13fff15 	stw	r4,-4(fp)
	struct flash_inf_struct *flash_info = &flash_inf;
  801b88:	008038b4 	movhi	r2,226
  801b8c:	1089c104 	addi	r2,r2,9988
  801b90:	e0bffe15 	stw	r2,-8(fp)
	/* Call ParseSRECBuf, with the flash_info argument. */
	ParseSRECBuf( flash_info );
  801b94:	e13ffe17 	ldw	r4,-8(fp)
  801b98:	08049e40 	call	8049e4 <ParseSRECBuf>
	/* Go find and send the reset_system.html file. */
	http_find_file( conn );
  801b9c:	e13fff17 	ldw	r4,-4(fp)
  801ba0:	0802f380 	call	802f38 <http_find_file>
	/* Close the connection. */
	conn->close = 1;
  801ba4:	e0ffff17 	ldw	r3,-4(fp)
  801ba8:	00800044 	movi	r2,1
  801bac:	18800415 	stw	r2,16(r3)
  return;
}
  801bb0:	e037883a 	mov	sp,fp
  801bb4:	dfc00117 	ldw	ra,4(sp)
  801bb8:	df000017 	ldw	fp,0(sp)
  801bbc:	dec00204 	addi	sp,sp,8
  801bc0:	f800283a 	ret

00801bc4 <http_reset_connection>:
 * 
 * This routine will clear our HTTP connection structure & prepare it to handle
 * a new HTTP connection.
 */
void http_reset_connection(http_conn* conn, int http_instance)
{
  801bc4:	defffc04 	addi	sp,sp,-16
  801bc8:	dfc00315 	stw	ra,12(sp)
  801bcc:	df000215 	stw	fp,8(sp)
  801bd0:	df000204 	addi	fp,sp,8
  801bd4:	e13ffe15 	stw	r4,-8(fp)
  801bd8:	e17fff15 	stw	r5,-4(fp)
  memset(conn, 0, sizeof(http_conn));
  801bdc:	e0bffe17 	ldw	r2,-8(fp)
  801be0:	1009883a 	mov	r4,r2
  801be4:	01887604 	movi	r6,8664
  801be8:	000b883a 	mov	r5,zero
  801bec:	08074b80 	call	8074b8 <memset>

  conn->fd = -1;
  801bf0:	e0fffe17 	ldw	r3,-8(fp)
  801bf4:	00bfffc4 	movi	r2,-1
  801bf8:	18800315 	stw	r2,12(r3)
  conn->state = READY;
  801bfc:	e0bffe17 	ldw	r2,-8(fp)
  801c00:	10000015 	stw	zero,0(r2)
  conn->keep_alive_count = HTTP_KEEP_ALIVE_COUNT;
  801c04:	e0fffe17 	ldw	r3,-8(fp)
  801c08:	00800504 	movi	r2,20
  801c0c:	18800715 	stw	r2,28(r3)
  
  conn->rx_buffer = &http_rx_buffer[http_instance][0];
  801c10:	e0bfff17 	ldw	r2,-4(fp)
  801c14:	1004937a 	slli	r2,r2,13
  801c18:	1007883a 	mov	r3,r2
  801c1c:	00803874 	movhi	r2,225
  801c20:	1099c084 	addi	r2,r2,26370
  801c24:	1885883a 	add	r2,r3,r2
  801c28:	1007883a 	mov	r3,r2
  801c2c:	e0bffe17 	ldw	r2,-8(fp)
  801c30:	10c01115 	stw	r3,68(r2)
  conn->tx_buffer = &http_tx_buffer[http_instance][0];
  801c34:	e0bfff17 	ldw	r2,-4(fp)
  801c38:	1004937a 	slli	r2,r2,13
  801c3c:	1007883a 	mov	r3,r2
  801c40:	008038b4 	movhi	r2,226
  801c44:	1089cd04 	addi	r2,r2,10036
  801c48:	1885883a 	add	r2,r3,r2
  801c4c:	1007883a 	mov	r3,r2
  801c50:	e0bffe17 	ldw	r2,-8(fp)
  801c54:	10c01215 	stw	r3,72(r2)
  conn->rx_wr_pos = &http_rx_buffer[http_instance][0];
  801c58:	e0bfff17 	ldw	r2,-4(fp)
  801c5c:	1004937a 	slli	r2,r2,13
  801c60:	1007883a 	mov	r3,r2
  801c64:	00803874 	movhi	r2,225
  801c68:	1099c084 	addi	r2,r2,26370
  801c6c:	1885883a 	add	r2,r3,r2
  801c70:	1007883a 	mov	r3,r2
  801c74:	e0bffe17 	ldw	r2,-8(fp)
  801c78:	10c00e15 	stw	r3,56(r2)
  conn->rx_rd_pos = &http_rx_buffer[http_instance][0];
  801c7c:	e0bfff17 	ldw	r2,-4(fp)
  801c80:	1004937a 	slli	r2,r2,13
  801c84:	1007883a 	mov	r3,r2
  801c88:	00803874 	movhi	r2,225
  801c8c:	1099c084 	addi	r2,r2,26370
  801c90:	1885883a 	add	r2,r3,r2
  801c94:	1007883a 	mov	r3,r2
  801c98:	e0bffe17 	ldw	r2,-8(fp)
  801c9c:	10c00d15 	stw	r3,52(r2)
}
  801ca0:	e037883a 	mov	sp,fp
  801ca4:	dfc00117 	ldw	ra,4(sp)
  801ca8:	df000017 	ldw	fp,0(sp)
  801cac:	dec00204 	addi	sp,sp,8
  801cb0:	f800283a 	ret

00801cb4 <http_manage_connection>:
 * structure. It is called from various points in the HTTP server code to
 * ensure that connections are reset properly on error, completion, and
 * to ensure that "zombie" connections are dealt with.
 */
void http_manage_connection(http_conn* conn, int http_instance)
{
  801cb4:	defffa04 	addi	sp,sp,-24
  801cb8:	dfc00515 	stw	ra,20(sp)
  801cbc:	df000415 	stw	fp,16(sp)
  801cc0:	df000404 	addi	fp,sp,16
  801cc4:	e13ffd15 	stw	r4,-12(fp)
  801cc8:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 current_time = 0;
  801ccc:	e03ffc15 	stw	zero,-16(fp)
  /*
   * Keep track of whether an open connection has timed out. This will be
   * determined by comparing the current time with that of the most recent
   * activity.
   */
  if(conn->state == READY || conn->state == PROCESS || conn->state == DATA)
  801cd0:	e0bffd17 	ldw	r2,-12(fp)
  801cd4:	10800017 	ldw	r2,0(r2)
  801cd8:	1005003a 	cmpeq	r2,r2,zero
  801cdc:	1000081e 	bne	r2,zero,801d00 <http_manage_connection+0x4c>
  801ce0:	e0bffd17 	ldw	r2,-12(fp)
  801ce4:	10800017 	ldw	r2,0(r2)
  801ce8:	10800060 	cmpeqi	r2,r2,1
  801cec:	1000041e 	bne	r2,zero,801d00 <http_manage_connection+0x4c>
  801cf0:	e0bffd17 	ldw	r2,-12(fp)
  801cf4:	10800017 	ldw	r2,0(r2)
  801cf8:	10800098 	cmpnei	r2,r2,2
  801cfc:	1000111e 	bne	r2,zero,801d44 <http_manage_connection+0x90>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  801d00:	00802174 	movhi	r2,133
  801d04:	1082e604 	addi	r2,r2,2968
  801d08:	10800017 	ldw	r2,0(r2)
  {
    current_time = alt_nticks();
  801d0c:	e0bffc15 	stw	r2,-16(fp)
    
    if( ((current_time - conn->activity_time) >= HTTP_KEEP_ALIVE_TIME) && conn->file_upload != 1 )
  801d10:	e0bffd17 	ldw	r2,-12(fp)
  801d14:	10c00c17 	ldw	r3,48(r2)
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10c5c83a 	sub	r2,r2,r3
  801d20:	1084e230 	cmpltui	r2,r2,5000
  801d24:	1000071e 	bne	r2,zero,801d44 <http_manage_connection+0x90>
  801d28:	e0bffd17 	ldw	r2,-12(fp)
  801d2c:	10800a17 	ldw	r2,40(r2)
  801d30:	10800060 	cmpeqi	r2,r2,1
  801d34:	1000031e 	bne	r2,zero,801d44 <http_manage_connection+0x90>
    {
      conn->state = RESET;
  801d38:	e0fffd17 	ldw	r3,-12(fp)
  801d3c:	00800104 	movi	r2,4
  801d40:	18800015 	stw	r2,0(r3)
   * state machine as ready for additional connections... or not.
   *  - Only send so many files per connection. 
   *  - Stop when we reach a timeout.
   *  - If someone (like the client) asked to close the connection, do so.
   */
  if(conn->state == COMPLETE)
  801d44:	e0bffd17 	ldw	r2,-12(fp)
  801d48:	10800017 	ldw	r2,0(r2)
  801d4c:	108000d8 	cmpnei	r2,r2,3
  801d50:	1000201e 	bne	r2,zero,801dd4 <http_manage_connection+0x120>
  {
    if(conn->file_handle != NULL)
  801d54:	e0bffd17 	ldw	r2,-12(fp)
  801d58:	10800b17 	ldw	r2,44(r2)
  801d5c:	1005003a 	cmpeq	r2,r2,zero
  801d60:	1000031e 	bne	r2,zero,801d70 <http_manage_connection+0xbc>
    {
      fclose(conn->file_handle);
  801d64:	e0bffd17 	ldw	r2,-12(fp)
  801d68:	11000b17 	ldw	r4,44(r2)
  801d6c:	08054f00 	call	8054f0 <fclose>
    }
      
    conn->keep_alive_count--;
  801d70:	e0bffd17 	ldw	r2,-12(fp)
  801d74:	10800717 	ldw	r2,28(r2)
  801d78:	10ffffc4 	addi	r3,r2,-1
  801d7c:	e0bffd17 	ldw	r2,-12(fp)
  801d80:	10c00715 	stw	r3,28(r2)
    conn->data_sent = 0;
  801d84:	e0bffd17 	ldw	r2,-12(fp)
  801d88:	10000915 	stw	zero,36(r2)
  
    if(conn->keep_alive_count == 0)
  801d8c:	e0bffd17 	ldw	r2,-12(fp)
  801d90:	10800717 	ldw	r2,28(r2)
  801d94:	1004c03a 	cmpne	r2,r2,zero
  801d98:	1000031e 	bne	r2,zero,801da8 <http_manage_connection+0xf4>
    {
      conn->close = 1;
  801d9c:	e0fffd17 	ldw	r3,-12(fp)
  801da0:	00800044 	movi	r2,1
  801da4:	18800415 	stw	r2,16(r3)
    }
    
    conn->state = conn->close ? CLOSE : READY;
  801da8:	e0bffd17 	ldw	r2,-12(fp)
  801dac:	10800417 	ldw	r2,16(r2)
  801db0:	1005003a 	cmpeq	r2,r2,zero
  801db4:	1000031e 	bne	r2,zero,801dc4 <http_manage_connection+0x110>
  801db8:	00800144 	movi	r2,5
  801dbc:	e0bfff15 	stw	r2,-4(fp)
  801dc0:	00000106 	br	801dc8 <http_manage_connection+0x114>
  801dc4:	e03fff15 	stw	zero,-4(fp)
  801dc8:	e0bffd17 	ldw	r2,-12(fp)
  801dcc:	e0ffff17 	ldw	r3,-4(fp)
  801dd0:	10c00015 	stw	r3,0(r2)
   * Some error occured. http_reset_connection() will take care of most
   * things, but the RX buffer still needs to be cleared, and any open
   * files need to be closed. We do this in a separate state to maintain 
   * efficiency between successive (error-free) connections.
   */
  if(conn->state == RESET)
  801dd4:	e0bffd17 	ldw	r2,-12(fp)
  801dd8:	10800017 	ldw	r2,0(r2)
  801ddc:	10800118 	cmpnei	r2,r2,4
  801de0:	1000101e 	bne	r2,zero,801e24 <http_manage_connection+0x170>
  {
    if(conn->file_handle != NULL)
  801de4:	e0bffd17 	ldw	r2,-12(fp)
  801de8:	10800b17 	ldw	r2,44(r2)
  801dec:	1005003a 	cmpeq	r2,r2,zero
  801df0:	1000031e 	bne	r2,zero,801e00 <http_manage_connection+0x14c>
    {
      fclose(conn->file_handle);
  801df4:	e0bffd17 	ldw	r2,-12(fp)
  801df8:	11000b17 	ldw	r4,44(r2)
  801dfc:	08054f00 	call	8054f0 <fclose>
    }
      
    memset(conn->rx_buffer, 0, HTTP_RX_BUF_SIZE);
  801e00:	e0bffd17 	ldw	r2,-12(fp)
  801e04:	10801117 	ldw	r2,68(r2)
  801e08:	1009883a 	mov	r4,r2
  801e0c:	01880004 	movi	r6,8192
  801e10:	000b883a 	mov	r5,zero
  801e14:	08074b80 	call	8074b8 <memset>
    conn->state = CLOSE;
  801e18:	e0fffd17 	ldw	r3,-12(fp)
  801e1c:	00800144 	movi	r2,5
  801e20:	18800015 	stw	r2,0(r3)
  }
  
  /* Close the TCP connection */
  if(conn->state == CLOSE)
  801e24:	e0bffd17 	ldw	r2,-12(fp)
  801e28:	10800017 	ldw	r2,0(r2)
  801e2c:	10800158 	cmpnei	r2,r2,5
  801e30:	1000061e 	bne	r2,zero,801e4c <http_manage_connection+0x198>
  {
    close(conn->fd);
  801e34:	e0bffd17 	ldw	r2,-12(fp)
  801e38:	11000317 	ldw	r4,12(r2)
  801e3c:	08224180 	call	822418 <close>
    http_reset_connection(conn, http_instance);
  801e40:	e13ffd17 	ldw	r4,-12(fp)
  801e44:	e17ffe17 	ldw	r5,-8(fp)
  801e48:	0801bc40 	call	801bc4 <http_reset_connection>
  }
}
  801e4c:	e037883a 	mov	sp,fp
  801e50:	dfc00117 	ldw	ra,4(sp)
  801e54:	df000017 	ldw	fp,0(sp)
  801e58:	dec00204 	addi	sp,sp,8
  801e5c:	f800283a 	ret

00801e60 <http_handle_accept>:
 * any open connection slots we will accept the connection (this creates a 
 * new socket for the data transfer), but if all available connections are in 
 * use we'll ignore the client's incoming connection request.
 */
int http_handle_accept(int listen_socket, http_conn* conn)
{
  801e60:	defff304 	addi	sp,sp,-52
  801e64:	dfc00c15 	stw	ra,48(sp)
  801e68:	df000b15 	stw	fp,44(sp)
  801e6c:	df000b04 	addi	fp,sp,44
  801e70:	e13ffd15 	stw	r4,-12(fp)
  801e74:	e17ffe15 	stw	r5,-8(fp)
  int ret_code = 0, i, socket, len;
  801e78:	e03ff715 	stw	zero,-36(fp)
  struct sockaddr_in  rem;

  len = sizeof(rem);
  801e7c:	00800404 	movi	r2,16
  801e80:	e0bff815 	stw	r2,-32(fp)

  /* 
   * Loop through available connection slots to determine the first available
   * connection.
   */
  for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  801e84:	e03ff615 	stw	zero,-40(fp)
  801e88:	00000b06 	br	801eb8 <http_handle_accept+0x58>
  {
    if((conn+i)->fd == -1)
  801e8c:	e0bff617 	ldw	r2,-40(fp)
  801e90:	10887624 	muli	r2,r2,8664
  801e94:	1007883a 	mov	r3,r2
  801e98:	e0bffe17 	ldw	r2,-8(fp)
  801e9c:	1885883a 	add	r2,r3,r2
  801ea0:	10800317 	ldw	r2,12(r2)
  801ea4:	10bfffe0 	cmpeqi	r2,r2,-1
  801ea8:	1000061e 	bne	r2,zero,801ec4 <http_handle_accept+0x64>

  /* 
   * Loop through available connection slots to determine the first available
   * connection.
   */
  for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  801eac:	e0bff617 	ldw	r2,-40(fp)
  801eb0:	10800044 	addi	r2,r2,1
  801eb4:	e0bff615 	stw	r2,-40(fp)
  801eb8:	e0bff617 	ldw	r2,-40(fp)
  801ebc:	10800190 	cmplti	r2,r2,6
  801ec0:	103ff21e 	bne	r2,zero,801e8c <http_handle_accept+0x2c>
  
  /* 
   * There are no more connection slots available. Ignore the connection
   * request for now.
   */
  if(i == HTTP_NUM_CONNECTIONS)
  801ec4:	e0bff617 	ldw	r2,-40(fp)
  801ec8:	10800198 	cmpnei	r2,r2,6
  801ecc:	1000031e 	bne	r2,zero,801edc <http_handle_accept+0x7c>
    return -1;
  801ed0:	00bfffc4 	movi	r2,-1
  801ed4:	e0bfff15 	stw	r2,-4(fp)
  801ed8:	00002506 	br	801f70 <http_handle_accept+0x110>
      
  if((socket = accept(listen_socket,(struct sockaddr*)&rem,&len)) < 0)
  801edc:	e17ff904 	addi	r5,fp,-28
  801ee0:	e1bff804 	addi	r6,fp,-32
  801ee4:	e13ffd17 	ldw	r4,-12(fp)
  801ee8:	0824a340 	call	824a34 <bsd_accept>
  801eec:	e0bff515 	stw	r2,-44(fp)
  801ef0:	e0bff517 	ldw	r2,-44(fp)
  801ef4:	1004403a 	cmpge	r2,r2,zero
  801ef8:	10000b1e 	bne	r2,zero,801f28 <http_handle_accept+0xc8>
  {
    fprintf(stderr, "[http_handle_accept] accept failed (%d)\n", socket);
  801efc:	00802174 	movhi	r2,133
  801f00:	10828104 	addi	r2,r2,2564
  801f04:	10800017 	ldw	r2,0(r2)
  801f08:	11000317 	ldw	r4,12(r2)
  801f0c:	01402174 	movhi	r5,133
  801f10:	296cec04 	addi	r5,r5,-19536
  801f14:	e1bff517 	ldw	r6,-44(fp)
  801f18:	0805b4c0 	call	805b4c <fprintf>
    return socket;
  801f1c:	e0bff517 	ldw	r2,-44(fp)
  801f20:	e0bfff15 	stw	r2,-4(fp)
  801f24:	00001206 	br	801f70 <http_handle_accept+0x110>
  }

  (conn+i)->fd = socket;
  801f28:	e0bff617 	ldw	r2,-40(fp)
  801f2c:	10887624 	muli	r2,r2,8664
  801f30:	1007883a 	mov	r3,r2
  801f34:	e0bffe17 	ldw	r2,-8(fp)
  801f38:	1887883a 	add	r3,r3,r2
  801f3c:	e0bff517 	ldw	r2,-44(fp)
  801f40:	18800315 	stw	r2,12(r3)
  (conn+i)->activity_time = alt_nticks();
  801f44:	e0bff617 	ldw	r2,-40(fp)
  801f48:	10887624 	muli	r2,r2,8664
  801f4c:	1007883a 	mov	r3,r2
  801f50:	e0bffe17 	ldw	r2,-8(fp)
  801f54:	1887883a 	add	r3,r3,r2
  801f58:	00802174 	movhi	r2,133
  801f5c:	1082e604 	addi	r2,r2,2968
  801f60:	10800017 	ldw	r2,0(r2)
  801f64:	18800c15 	stw	r2,48(r3)

  return ret_code;
  801f68:	e0bff717 	ldw	r2,-36(fp)
  801f6c:	e0bfff15 	stw	r2,-4(fp)
  801f70:	e0bfff17 	ldw	r2,-4(fp)
}
  801f74:	e037883a 	mov	sp,fp
  801f78:	dfc00117 	ldw	ra,4(sp)
  801f7c:	df000017 	ldw	fp,0(sp)
  801f80:	dec00204 	addi	sp,sp,8
  801f84:	f800283a 	ret

00801f88 <http_read_line>:
 * 
 * This routine will scan the RX data buffer for a newline, allowing us to
 * parse an in-coming HTTP request line-by-line.
 */
int http_read_line(http_conn* conn)
{
  801f88:	defffb04 	addi	sp,sp,-20
  801f8c:	dfc00415 	stw	ra,16(sp)
  801f90:	df000315 	stw	fp,12(sp)
  801f94:	df000304 	addi	fp,sp,12
  801f98:	e13fff15 	stw	r4,-4(fp)
  char* lf_addr;
  int ret_code = 0;
  801f9c:	e03ffd15 	stw	zero,-12(fp)

  /* Find the Carriage return which marks the end of the header */
  lf_addr = strchr(conn->rx_rd_pos, '\n');
  801fa0:	e0bfff17 	ldw	r2,-4(fp)
  801fa4:	11000d17 	ldw	r4,52(r2)
  801fa8:	01400284 	movi	r5,10
  801fac:	0807fa80 	call	807fa8 <strchr>
  801fb0:	e0bffe15 	stw	r2,-8(fp)
  
  if (lf_addr == NULL)
  801fb4:	e0bffe17 	ldw	r2,-8(fp)
  801fb8:	1004c03a 	cmpne	r2,r2,zero
  801fbc:	1000031e 	bne	r2,zero,801fcc <http_read_line+0x44>
  {
    ret_code = -1;
  801fc0:	00bfffc4 	movi	r2,-1
  801fc4:	e0bffd15 	stw	r2,-12(fp)
  801fc8:	00001506 	br	802020 <http_read_line+0x98>
  {
    /* 
     * Check that the line feed has a matching CR, if so zero that
     * else zero the LF so we can use the string searching functions.
     */
    if ((lf_addr > conn->rx_buffer) && (*(lf_addr-1) == '\r'))
  801fcc:	e0bfff17 	ldw	r2,-4(fp)
  801fd0:	10c01117 	ldw	r3,68(r2)
  801fd4:	e0bffe17 	ldw	r2,-8(fp)
  801fd8:	18800b2e 	bgeu	r3,r2,802008 <http_read_line+0x80>
  801fdc:	e0bffe17 	ldw	r2,-8(fp)
  801fe0:	10bfffc4 	addi	r2,r2,-1
  801fe4:	10800003 	ldbu	r2,0(r2)
  801fe8:	10803fcc 	andi	r2,r2,255
  801fec:	1080201c 	xori	r2,r2,128
  801ff0:	10bfe004 	addi	r2,r2,-128
  801ff4:	10800358 	cmpnei	r2,r2,13
  801ff8:	1000031e 	bne	r2,zero,802008 <http_read_line+0x80>
    {
      *(lf_addr-1) = 0;
  801ffc:	e0bffe17 	ldw	r2,-8(fp)
  802000:	10bfffc4 	addi	r2,r2,-1
  802004:	10000005 	stb	zero,0(r2)
    }

    *lf_addr = 0;
  802008:	e0bffe17 	ldw	r2,-8(fp)
  80200c:	10000005 	stb	zero,0(r2)
    conn->rx_rd_pos = lf_addr+1;
  802010:	e0bffe17 	ldw	r2,-8(fp)
  802014:	10c00044 	addi	r3,r2,1
  802018:	e0bfff17 	ldw	r2,-4(fp)
  80201c:	10c00d15 	stw	r3,52(r2)
  }

  return ret_code;
  802020:	e0bffd17 	ldw	r2,-12(fp)
}
  802024:	e037883a 	mov	sp,fp
  802028:	dfc00117 	ldw	ra,4(sp)
  80202c:	df000017 	ldw	fp,0(sp)
  802030:	dec00204 	addi	sp,sp,8
  802034:	f800283a 	ret

00802038 <http_parse_type_boundary>:
 *   - Content-Type, Content-Disposition, boundary, etc.
 */
int http_parse_type_boundary( http_conn* conn,
                                char* start,
                                int len )
{
  802038:	deffb804 	addi	sp,sp,-288
  80203c:	dfc04715 	stw	ra,284(sp)
  802040:	df004615 	stw	fp,280(sp)
  802044:	df004604 	addi	fp,sp,280
  802048:	e13ffc15 	stw	r4,-16(fp)
  80204c:	e17ffd15 	stw	r5,-12(fp)
  802050:	e1bffe15 	stw	r6,-8(fp)
  char* delimiter;
  char* boundary_start;
  char line[HTTP_MAX_LINE_SIZE];
  
  /* Copy the Content-Type/Boundary line. */
  if( len > HTTP_MAX_LINE_SIZE )
  802054:	e0bffe17 	ldw	r2,-8(fp)
  802058:	10804050 	cmplti	r2,r2,257
  80205c:	1000061e 	bne	r2,zero,802078 <http_parse_type_boundary+0x40>
  {
    printf( "process headers:  overflow content-type/boundary parsing.\n" );
  802060:	01002174 	movhi	r4,133
  802064:	212cf704 	addi	r4,r4,-19492
  802068:	08077600 	call	807760 <puts>
    return(-1);
  80206c:	00bfffc4 	movi	r2,-1
  802070:	e0bfff15 	stw	r2,-4(fp)
  802074:	00002506 	br	80210c <http_parse_type_boundary+0xd4>
  }
  strncpy( line, start, len );
  802078:	e1bffe17 	ldw	r6,-8(fp)
  80207c:	e13fbc04 	addi	r4,fp,-272
  802080:	e17ffd17 	ldw	r5,-12(fp)
  802084:	08089a80 	call	8089a8 <strncpy>
  /* Add a null byte to the end of it. */
  *(line + len) = '\0';
  802088:	e0bffe17 	ldw	r2,-8(fp)
  80208c:	1007883a 	mov	r3,r2
  802090:	e0bfbc04 	addi	r2,fp,-272
  802094:	10c5883a 	add	r2,r2,r3
  802098:	10000005 	stb	zero,0(r2)
  /* Get the Content-Type value. */
  if( (delimiter = strchr( line, ';' )) )
  80209c:	e13fbc04 	addi	r4,fp,-272
  8020a0:	01400ec4 	movi	r5,59
  8020a4:	0807fa80 	call	807fa8 <strchr>
  8020a8:	e0bfbb15 	stw	r2,-276(fp)
  8020ac:	e0bfbb17 	ldw	r2,-276(fp)
  8020b0:	1005003a 	cmpeq	r2,r2,zero
  8020b4:	1000101e 	bne	r2,zero,8020f8 <http_parse_type_boundary+0xc0>
  {
    /* Need to parse both a boundary and Content-Type. */
    boundary_start = strchr( line, '=' ) + 2;
  8020b8:	e13fbc04 	addi	r4,fp,-272
  8020bc:	01400f44 	movi	r5,61
  8020c0:	0807fa80 	call	807fa8 <strchr>
  8020c4:	10800084 	addi	r2,r2,2
  8020c8:	e0bfba15 	stw	r2,-280(fp)
    strcpy( conn->boundary, boundary_start);
  8020cc:	e0bffc17 	ldw	r2,-16(fp)
  8020d0:	11006204 	addi	r4,r2,392
  8020d4:	e17fba17 	ldw	r5,-280(fp)
  8020d8:	08081440 	call	808144 <strcpy>
    /* Insert a null space in place of the delimiter. */
    *delimiter = '\0';
  8020dc:	e0bfbb17 	ldw	r2,-276(fp)
  8020e0:	10000005 	stb	zero,0(r2)
    /* First part of the line is the Content-Type. */
    strcpy( conn->content_type, line);
  8020e4:	e0bffc17 	ldw	r2,-16(fp)
  8020e8:	11005804 	addi	r4,r2,352
  8020ec:	e17fbc04 	addi	r5,fp,-272
  8020f0:	08081440 	call	808144 <strcpy>
  8020f4:	00000406 	br	802108 <http_parse_type_boundary+0xd0>
  }
  else
  {
    strcpy( conn->content_type, line );
  8020f8:	e0bffc17 	ldw	r2,-16(fp)
  8020fc:	11005804 	addi	r4,r2,352
  802100:	e17fbc04 	addi	r5,fp,-272
  802104:	08081440 	call	808144 <strcpy>
  }
  return 0;
  802108:	e03fff15 	stw	zero,-4(fp)
  80210c:	e0bfff17 	ldw	r2,-4(fp)
}
  802110:	e037883a 	mov	sp,fp
  802114:	dfc00117 	ldw	ra,4(sp)
  802118:	df000017 	ldw	fp,0(sp)
  80211c:	dec00204 	addi	sp,sp,8
  802120:	f800283a 	ret

00802124 <http_process_headers>:
 * This routine should be modified in the future not to use strtok() as its
 * a bit invasive and is not thread-safe!
 * 
 */
int http_process_headers(http_conn* conn)
{
  802124:	defff304 	addi	sp,sp,-52
  802128:	dfc00c15 	stw	ra,48(sp)
  80212c:	df000b15 	stw	fp,44(sp)
  802130:	df000b04 	addi	fp,sp,44
  802134:	e13ffe15 	stw	r4,-8(fp)
  char* option;
  char* cr_pos;
  char* ct_start;
  char* orig_read_pos = conn->rx_rd_pos;
  802138:	e0bffe17 	ldw	r2,-8(fp)
  80213c:	10800d17 	ldw	r2,52(r2)
  802140:	e0bffa15 	stw	r2,-24(fp)
  /* 
   * A boundary was found.  This is a multi-part form
   * and header processing stops here!
   * 
   */
  if( (conn->boundary[0] == '-') && (conn->content_length > 0) )
  802144:	e0bffe17 	ldw	r2,-8(fp)
  802148:	10806203 	ldbu	r2,392(r2)
  80214c:	10803fcc 	andi	r2,r2,255
  802150:	1080201c 	xori	r2,r2,128
  802154:	10bfe004 	addi	r2,r2,-128
  802158:	10800b58 	cmpnei	r2,r2,45
  80215c:	10000d1e 	bne	r2,zero,802194 <http_process_headers+0x70>
  802160:	e0bffe17 	ldw	r2,-8(fp)
  802164:	10800517 	ldw	r2,20(r2)
  802168:	10800050 	cmplti	r2,r2,1
  80216c:	1000091e 	bne	r2,zero,802194 <http_process_headers+0x70>

  {
    boundary_start = strstr( conn->rx_rd_pos, conn->boundary );
  802170:	e0bffe17 	ldw	r2,-8(fp)
  802174:	11000d17 	ldw	r4,52(r2)
  802178:	e0bffe17 	ldw	r2,-8(fp)
  80217c:	11406204 	addi	r5,r2,392
  802180:	0808b980 	call	808b98 <strstr>
  802184:	e0bff715 	stw	r2,-36(fp)
    //conn->rx_rd_pos = boundary_start + strlen(conn->boundary);
    return -1;
  802188:	00bfffc4 	movi	r2,-1
  80218c:	e0bfff15 	stw	r2,-4(fp)
  802190:	00006b06 	br	802340 <http_process_headers+0x21c>
  }
  /* Skip the next section we'll chop with strtok(). Perl for Nios, anyone? */
  else if( (delimiter_token = strchr(conn->rx_rd_pos, ':')) )
  802194:	e0bffe17 	ldw	r2,-8(fp)
  802198:	11000d17 	ldw	r4,52(r2)
  80219c:	01400e84 	movi	r5,58
  8021a0:	0807fa80 	call	807fa8 <strchr>
  8021a4:	e0bff915 	stw	r2,-28(fp)
  8021a8:	e0bff917 	ldw	r2,-28(fp)
  8021ac:	1005003a 	cmpeq	r2,r2,zero
  8021b0:	1000181e 	bne	r2,zero,802214 <http_process_headers+0xf0>
  {
    conn->rx_rd_pos = delimiter_token + 1;
  8021b4:	e0bff917 	ldw	r2,-28(fp)
  8021b8:	10c00044 	addi	r3,r2,1
  8021bc:	e0bffe17 	ldw	r2,-8(fp)
  8021c0:	10c00d15 	stw	r3,52(r2)
    conn->content_received = conn->rx_rd_pos - conn->rx_buffer;
  8021c4:	e0bffe17 	ldw	r2,-8(fp)
  8021c8:	10800d17 	ldw	r2,52(r2)
  8021cc:	1007883a 	mov	r3,r2
  8021d0:	e0bffe17 	ldw	r2,-8(fp)
  8021d4:	10801117 	ldw	r2,68(r2)
  8021d8:	1887c83a 	sub	r3,r3,r2
  8021dc:	e0bffe17 	ldw	r2,-8(fp)
  8021e0:	10c00615 	stw	r3,24(r2)
  else
  {
    return -1;
  }
  
  option = strtok(orig_read_pos, ":");
  8021e4:	e13ffa17 	ldw	r4,-24(fp)
  8021e8:	01402174 	movhi	r5,133
  8021ec:	296d0604 	addi	r5,r5,-19432
  8021f0:	08091f80 	call	8091f8 <strtok>
  8021f4:	e0bffd15 	stw	r2,-12(fp)

  if(stricmp(option,"Connection") == 0)
  8021f8:	e13ffd17 	ldw	r4,-12(fp)
  8021fc:	01402174 	movhi	r5,133
  802200:	296d0704 	addi	r5,r5,-19428
  802204:	0807e680 	call	807e68 <strcasecmp>
  802208:	1005003a 	cmpeq	r2,r2,zero
  80220c:	1000041e 	bne	r2,zero,802220 <http_process_headers+0xfc>
  802210:	00001906 	br	802278 <http_process_headers+0x154>
    conn->rx_rd_pos = delimiter_token + 1;
    conn->content_received = conn->rx_rd_pos - conn->rx_buffer;
  }
  else
  {
    return -1;
  802214:	00bfffc4 	movi	r2,-1
  802218:	e0bfff15 	stw	r2,-4(fp)
  80221c:	00004806 	br	802340 <http_process_headers+0x21c>
  
  option = strtok(orig_read_pos, ":");

  if(stricmp(option,"Connection") == 0)
  {
    temp_null = *(option + 17);
  802220:	e0bffd17 	ldw	r2,-12(fp)
  802224:	10800444 	addi	r2,r2,17
  802228:	10800003 	ldbu	r2,0(r2)
  80222c:	e0bff805 	stb	r2,-32(fp)
    *(option + 17) = 0;
  802230:	e0bffd17 	ldw	r2,-12(fp)
  802234:	10800444 	addi	r2,r2,17
  802238:	10000005 	stb	zero,0(r2)
    
    if(stricmp((option+12), "close") == 0)
  80223c:	e0bffd17 	ldw	r2,-12(fp)
  802240:	11000304 	addi	r4,r2,12
  802244:	01402174 	movhi	r5,133
  802248:	296d0a04 	addi	r5,r5,-19416
  80224c:	0807e680 	call	807e68 <strcasecmp>
  802250:	1004c03a 	cmpne	r2,r2,zero
  802254:	1000031e 	bne	r2,zero,802264 <http_process_headers+0x140>
    {
      conn->close = 1;
  802258:	e0fffe17 	ldw	r3,-8(fp)
  80225c:	00800044 	movi	r2,1
  802260:	18800415 	stw	r2,16(r3)
    }
    *(option + 17) = temp_null;
  802264:	e0bffd17 	ldw	r2,-12(fp)
  802268:	10c00444 	addi	r3,r2,17
  80226c:	e0bff803 	ldbu	r2,-32(fp)
  802270:	18800005 	stb	r2,0(r3)
  802274:	00003106 	br	80233c <http_process_headers+0x218>
  }
  else if (stricmp(option, "Content-Length") == 0)
  802278:	e13ffd17 	ldw	r4,-12(fp)
  80227c:	01402174 	movhi	r5,133
  802280:	296d0c04 	addi	r5,r5,-19408
  802284:	0807e680 	call	807e68 <strcasecmp>
  802288:	1004c03a 	cmpne	r2,r2,zero
  80228c:	1000071e 	bne	r2,zero,8022ac <http_process_headers+0x188>
  {
    conn->content_length = atoi(option+16);
  802290:	e0bffd17 	ldw	r2,-12(fp)
  802294:	11000404 	addi	r4,r2,16
  802298:	08053d40 	call	8053d4 <atoi>
  80229c:	1007883a 	mov	r3,r2
  8022a0:	e0bffe17 	ldw	r2,-8(fp)
  8022a4:	10c00515 	stw	r3,20(r2)
  8022a8:	00002406 	br	80233c <http_process_headers+0x218>
    //printf( "Content Length = %d.\n", conn->content_length );
  }
  /* When getting the Content-Type, get the whole line and throw it
   * to another function.  This will be done several times.
   */
  else if (stricmp(option, "Content-Type" ) == 0)
  8022ac:	e13ffd17 	ldw	r4,-12(fp)
  8022b0:	01402174 	movhi	r5,133
  8022b4:	296d1004 	addi	r5,r5,-19392
  8022b8:	0807e680 	call	807e68 <strcasecmp>
  8022bc:	1004c03a 	cmpne	r2,r2,zero
  8022c0:	10001e1e 	bne	r2,zero,80233c <http_process_headers+0x218>
  {
    /* Determine the end of line for "Content-Type" line. */
    cr_pos = strchr( conn->rx_rd_pos, '\r' );
  8022c4:	e0bffe17 	ldw	r2,-8(fp)
  8022c8:	11000d17 	ldw	r4,52(r2)
  8022cc:	01400344 	movi	r5,13
  8022d0:	0807fa80 	call	807fa8 <strchr>
  8022d4:	e0bffc15 	stw	r2,-16(fp)
    /* Find the length of the string. */
    opt_len = strlen(option);
  8022d8:	e13ffd17 	ldw	r4,-12(fp)
  8022dc:	08088440 	call	808844 <strlen>
  8022e0:	e0bff515 	stw	r2,-44(fp)
    ct_len = cr_pos - (option + opt_len + 2);
  8022e4:	e13ffc17 	ldw	r4,-16(fp)
  8022e8:	e0bff517 	ldw	r2,-44(fp)
  8022ec:	1007883a 	mov	r3,r2
  8022f0:	e0bffd17 	ldw	r2,-12(fp)
  8022f4:	1885883a 	add	r2,r3,r2
  8022f8:	2085c83a 	sub	r2,r4,r2
  8022fc:	10bfff84 	addi	r2,r2,-2
  802300:	e0bff615 	stw	r2,-40(fp)
    /* Calculate the start of the string. */
    ct_start = cr_pos - ct_len;
  802304:	e0bff617 	ldw	r2,-40(fp)
  802308:	1007883a 	mov	r3,r2
  80230c:	e0bffc17 	ldw	r2,-16(fp)
  802310:	10c5c83a 	sub	r2,r2,r3
  802314:	e0bffb15 	stw	r2,-20(fp)
    /* Pass the start of the string and the size of the string to 
     * a function.
     */
    if( (http_parse_type_boundary( conn, ct_start, ct_len ) < 0) )
  802318:	e13ffe17 	ldw	r4,-8(fp)
  80231c:	e17ffb17 	ldw	r5,-20(fp)
  802320:	e1bff617 	ldw	r6,-40(fp)
  802324:	08020380 	call	802038 <http_parse_type_boundary>
  802328:	1004403a 	cmpge	r2,r2,zero
  80232c:	1000031e 	bne	r2,zero,80233c <http_process_headers+0x218>
    {
      /* Something failed...return a negative value. */
      return -1;
  802330:	00bfffc4 	movi	r2,-1
  802334:	e0bfff15 	stw	r2,-4(fp)
  802338:	00000106 	br	802340 <http_process_headers+0x21c>
    }
  }
  return 0;
  80233c:	e03fff15 	stw	zero,-4(fp)
  802340:	e0bfff17 	ldw	r2,-4(fp)
}
  802344:	e037883a 	mov	sp,fp
  802348:	dfc00117 	ldw	ra,4(sp)
  80234c:	df000017 	ldw	fp,0(sp)
  802350:	dec00204 	addi	sp,sp,8
  802354:	f800283a 	ret

00802358 <http_process_request>:
 * This routine parses the beginnings of an HTTP request to extract the
 * command, version, and URI. Unsupported commands/versions/etc. will cause
 * us to error out drop the connection.
 */
int http_process_request(http_conn* conn)
{
  802358:	defff904 	addi	sp,sp,-28
  80235c:	dfc00615 	stw	ra,24(sp)
  802360:	df000515 	stw	fp,20(sp)
  802364:	df000504 	addi	fp,sp,20
  802368:	e13ffe15 	stw	r4,-8(fp)
  char* uri = 0;
  80236c:	e03ffd15 	stw	zero,-12(fp)
  char* version = 0;
  802370:	e03ffc15 	stw	zero,-16(fp)
  char* temp = 0;
  802374:	e03ffb15 	stw	zero,-20(fp)
  if( (temp = strstr(conn->rx_rd_pos, "GET")) )
  802378:	e0bffe17 	ldw	r2,-8(fp)
  80237c:	11000d17 	ldw	r4,52(r2)
  802380:	01402174 	movhi	r5,133
  802384:	296d1404 	addi	r5,r5,-19376
  802388:	0808b980 	call	808b98 <strstr>
  80238c:	e0bffb15 	stw	r2,-20(fp)
  802390:	e0bffb17 	ldw	r2,-20(fp)
  802394:	1005003a 	cmpeq	r2,r2,zero
  802398:	1000071e 	bne	r2,zero,8023b8 <http_process_request+0x60>
  {
    conn->action = GET;
  80239c:	e0fffe17 	ldw	r3,-8(fp)
  8023a0:	00800044 	movi	r2,1
  8023a4:	18800115 	stw	r2,4(r3)
    conn->rx_rd_pos = temp;
  8023a8:	e0fffe17 	ldw	r3,-8(fp)
  8023ac:	e0bffb17 	ldw	r2,-20(fp)
  8023b0:	18800d15 	stw	r2,52(r3)
  8023b4:	00001e06 	br	802430 <http_process_request+0xd8>
  }
  else if( (temp = strstr(conn->rx_rd_pos, "POST")) )
  8023b8:	e0bffe17 	ldw	r2,-8(fp)
  8023bc:	11000d17 	ldw	r4,52(r2)
  8023c0:	01402174 	movhi	r5,133
  8023c4:	296d1504 	addi	r5,r5,-19372
  8023c8:	0808b980 	call	808b98 <strstr>
  8023cc:	e0bffb15 	stw	r2,-20(fp)
  8023d0:	e0bffb17 	ldw	r2,-20(fp)
  8023d4:	1005003a 	cmpeq	r2,r2,zero
  8023d8:	1000071e 	bne	r2,zero,8023f8 <http_process_request+0xa0>
  {
    conn->action = POST;
  8023dc:	e0fffe17 	ldw	r3,-8(fp)
  8023e0:	00800084 	movi	r2,2
  8023e4:	18800115 	stw	r2,4(r3)
    conn->rx_rd_pos = temp;
  8023e8:	e0fffe17 	ldw	r3,-8(fp)
  8023ec:	e0bffb17 	ldw	r2,-20(fp)
  8023f0:	18800d15 	stw	r2,52(r3)
  8023f4:	00000e06 	br	802430 <http_process_request+0xd8>
  }
  else
  {
    fprintf(stderr, "Unsupported (for now) request\n");
  8023f8:	00802174 	movhi	r2,133
  8023fc:	10828104 	addi	r2,r2,2564
  802400:	10800017 	ldw	r2,0(r2)
  802404:	11c00317 	ldw	r7,12(r2)
  802408:	01002174 	movhi	r4,133
  80240c:	212d1704 	addi	r4,r4,-19364
  802410:	01400044 	movi	r5,1
  802414:	01800784 	movi	r6,30
  802418:	0806a240 	call	806a24 <fwrite>
    conn->action = UNKNOWN;
  80241c:	e0bffe17 	ldw	r2,-8(fp)
  802420:	10000115 	stw	zero,4(r2)
    return -1;
  802424:	00bfffc4 	movi	r2,-1
  802428:	e0bfff15 	stw	r2,-4(fp)
  80242c:	00008106 	br	802634 <http_process_request+0x2dc>
  }
  
  /* First space char separates action from URI */
  if( (conn->rx_rd_pos = strchr(conn->rx_rd_pos, ' ')) )
  802430:	e0bffe17 	ldw	r2,-8(fp)
  802434:	11000d17 	ldw	r4,52(r2)
  802438:	01400804 	movi	r5,32
  80243c:	0807fa80 	call	807fa8 <strchr>
  802440:	1007883a 	mov	r3,r2
  802444:	e0bffe17 	ldw	r2,-8(fp)
  802448:	10c00d15 	stw	r3,52(r2)
  80244c:	e0bffe17 	ldw	r2,-8(fp)
  802450:	10800d17 	ldw	r2,52(r2)
  802454:	1005003a 	cmpeq	r2,r2,zero
  802458:	1000141e 	bne	r2,zero,8024ac <http_process_request+0x154>
  {
    conn->rx_rd_pos++;
  80245c:	e0bffe17 	ldw	r2,-8(fp)
  802460:	10800d17 	ldw	r2,52(r2)
  802464:	10c00044 	addi	r3,r2,1
  802468:	e0bffe17 	ldw	r2,-8(fp)
  80246c:	10c00d15 	stw	r3,52(r2)
    uri = conn->rx_rd_pos;
  802470:	e0bffe17 	ldw	r2,-8(fp)
  802474:	10800d17 	ldw	r2,52(r2)
  802478:	e0bffd15 	stw	r2,-12(fp)
  {
    return -1;
  }
    
  /* Second space char separates URI from HTTP version. */
  if( (conn->rx_rd_pos = strchr(conn->rx_rd_pos, ' ')) )
  80247c:	e0bffe17 	ldw	r2,-8(fp)
  802480:	11000d17 	ldw	r4,52(r2)
  802484:	01400804 	movi	r5,32
  802488:	0807fa80 	call	807fa8 <strchr>
  80248c:	1007883a 	mov	r3,r2
  802490:	e0bffe17 	ldw	r2,-8(fp)
  802494:	10c00d15 	stw	r3,52(r2)
  802498:	e0bffe17 	ldw	r2,-8(fp)
  80249c:	10800d17 	ldw	r2,52(r2)
  8024a0:	1004c03a 	cmpne	r2,r2,zero
  8024a4:	1000041e 	bne	r2,zero,8024b8 <http_process_request+0x160>
  8024a8:	00001206 	br	8024f4 <http_process_request+0x19c>
    conn->rx_rd_pos++;
    uri = conn->rx_rd_pos;
  }
  else
  {
    return -1;
  8024ac:	00bfffc4 	movi	r2,-1
  8024b0:	e0bfff15 	stw	r2,-4(fp)
  8024b4:	00005f06 	br	802634 <http_process_request+0x2dc>
  }
    
  /* Second space char separates URI from HTTP version. */
  if( (conn->rx_rd_pos = strchr(conn->rx_rd_pos, ' ')) )
  {
    *conn->rx_rd_pos = 0;
  8024b8:	e0bffe17 	ldw	r2,-8(fp)
  8024bc:	10800d17 	ldw	r2,52(r2)
  8024c0:	10000005 	stb	zero,0(r2)
    conn->rx_rd_pos++;
  8024c4:	e0bffe17 	ldw	r2,-8(fp)
  8024c8:	10800d17 	ldw	r2,52(r2)
  8024cc:	10c00044 	addi	r3,r2,1
  8024d0:	e0bffe17 	ldw	r2,-8(fp)
  8024d4:	10c00d15 	stw	r3,52(r2)
    version = conn->rx_rd_pos;
  8024d8:	e0bffe17 	ldw	r2,-8(fp)
  8024dc:	10800d17 	ldw	r2,52(r2)
  8024e0:	e0bffc15 	stw	r2,-16(fp)
  {
    return -1;
  }
  
  /* Is this an HTTP version we support? */
  if ((version == NULL) || (strncmp(version, "HTTP/", 5) != 0))
  8024e4:	e0bffc17 	ldw	r2,-16(fp)
  8024e8:	1005003a 	cmpeq	r2,r2,zero
  8024ec:	10000b1e 	bne	r2,zero,80251c <http_process_request+0x1c4>
  8024f0:	00000306 	br	802500 <http_process_request+0x1a8>
    conn->rx_rd_pos++;
    version = conn->rx_rd_pos;
  }
  else
  {
    return -1;
  8024f4:	00bfffc4 	movi	r2,-1
  8024f8:	e0bfff15 	stw	r2,-4(fp)
  8024fc:	00004d06 	br	802634 <http_process_request+0x2dc>
  }
  
  /* Is this an HTTP version we support? */
  if ((version == NULL) || (strncmp(version, "HTTP/", 5) != 0))
  802500:	e13ffc17 	ldw	r4,-16(fp)
  802504:	01402174 	movhi	r5,133
  802508:	296d1f04 	addi	r5,r5,-19332
  80250c:	01800144 	movi	r6,5
  802510:	08088b80 	call	8088b8 <strncmp>
  802514:	1005003a 	cmpeq	r2,r2,zero
  802518:	1000031e 	bne	r2,zero,802528 <http_process_request+0x1d0>
  {
    return -1;
  80251c:	00bfffc4 	movi	r2,-1
  802520:	e0bfff15 	stw	r2,-4(fp)
  802524:	00004306 	br	802634 <http_process_request+0x2dc>
  }

  if (!isdigit(version[5]) || version[6] != '.' || !isdigit(version[7]))
  802528:	e0bffc17 	ldw	r2,-16(fp)
  80252c:	10800144 	addi	r2,r2,5
  802530:	10800003 	ldbu	r2,0(r2)
  802534:	10803fcc 	andi	r2,r2,255
  802538:	1080201c 	xori	r2,r2,128
  80253c:	10bfe004 	addi	r2,r2,-128
  802540:	1007883a 	mov	r3,r2
  802544:	00802174 	movhi	r2,133
  802548:	10828004 	addi	r2,r2,2560
  80254c:	10800017 	ldw	r2,0(r2)
  802550:	1885883a 	add	r2,r3,r2
  802554:	10800003 	ldbu	r2,0(r2)
  802558:	10803fcc 	andi	r2,r2,255
  80255c:	1080010c 	andi	r2,r2,4
  802560:	1005003a 	cmpeq	r2,r2,zero
  802564:	1000181e 	bne	r2,zero,8025c8 <http_process_request+0x270>
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10800184 	addi	r2,r2,6
  802570:	10800003 	ldbu	r2,0(r2)
  802574:	10803fcc 	andi	r2,r2,255
  802578:	1080201c 	xori	r2,r2,128
  80257c:	10bfe004 	addi	r2,r2,-128
  802580:	10800b98 	cmpnei	r2,r2,46
  802584:	1000101e 	bne	r2,zero,8025c8 <http_process_request+0x270>
  802588:	e0bffc17 	ldw	r2,-16(fp)
  80258c:	108001c4 	addi	r2,r2,7
  802590:	10800003 	ldbu	r2,0(r2)
  802594:	10803fcc 	andi	r2,r2,255
  802598:	1080201c 	xori	r2,r2,128
  80259c:	10bfe004 	addi	r2,r2,-128
  8025a0:	1007883a 	mov	r3,r2
  8025a4:	00802174 	movhi	r2,133
  8025a8:	10828004 	addi	r2,r2,2560
  8025ac:	10800017 	ldw	r2,0(r2)
  8025b0:	1885883a 	add	r2,r3,r2
  8025b4:	10800003 	ldbu	r2,0(r2)
  8025b8:	10803fcc 	andi	r2,r2,255
  8025bc:	1080010c 	andi	r2,r2,4
  8025c0:	1004c03a 	cmpne	r2,r2,zero
  8025c4:	1000031e 	bne	r2,zero,8025d4 <http_process_request+0x27c>
  {
    return -1;
  8025c8:	00bfffc4 	movi	r2,-1
  8025cc:	e0bfff15 	stw	r2,-4(fp)
  8025d0:	00001806 	br	802634 <http_process_request+0x2dc>
  }

  /* Before v1.1 we close the connection after responding to the request */
  if ( (((version[5] - '0')*10) + version[7] - '0') < 11)
  8025d4:	e0bffc17 	ldw	r2,-16(fp)
  8025d8:	10800144 	addi	r2,r2,5
  8025dc:	10800003 	ldbu	r2,0(r2)
  8025e0:	10803fcc 	andi	r2,r2,255
  8025e4:	1080201c 	xori	r2,r2,128
  8025e8:	10bfe004 	addi	r2,r2,-128
  8025ec:	10c002a4 	muli	r3,r2,10
  8025f0:	e0bffc17 	ldw	r2,-16(fp)
  8025f4:	108001c4 	addi	r2,r2,7
  8025f8:	10800003 	ldbu	r2,0(r2)
  8025fc:	10803fcc 	andi	r2,r2,255
  802600:	1080201c 	xori	r2,r2,128
  802604:	10bfe004 	addi	r2,r2,-128
  802608:	1885883a 	add	r2,r3,r2
  80260c:	108086c8 	cmpgei	r2,r2,539
  802610:	1000031e 	bne	r2,zero,802620 <http_process_request+0x2c8>
  {
    conn->close = 1;
  802614:	e0fffe17 	ldw	r3,-8(fp)
  802618:	00800044 	movi	r2,1
  80261c:	18800415 	stw	r2,16(r3)
  }

  strcpy(conn->uri, uri);
  802620:	e0bffe17 	ldw	r2,-8(fp)
  802624:	11007604 	addi	r4,r2,472
  802628:	e17ffd17 	ldw	r5,-12(fp)
  80262c:	08081440 	call	808144 <strcpy>
  return 0;
  802630:	e03fff15 	stw	zero,-4(fp)
  802634:	e0bfff17 	ldw	r2,-4(fp)
}
  802638:	e037883a 	mov	sp,fp
  80263c:	dfc00117 	ldw	ra,4(sp)
  802640:	df000017 	ldw	fp,0(sp)
  802644:	dec00204 	addi	sp,sp,8
  802648:	f800283a 	ret

0080264c <http_send_file_chunk>:
 * repeatedly until the file is completely sent, at which time the connection
 * state will go to "COMPLETE". Doing this rather than sending the entire
 * file allows us (in part) to multiplex between connections "simultaneously".
 */
int http_send_file_chunk(http_conn* conn)
{
  80264c:	defff504 	addi	sp,sp,-44
  802650:	dfc00a15 	stw	ra,40(sp)
  802654:	df000915 	stw	fp,36(sp)
  802658:	df000904 	addi	fp,sp,36
  80265c:	e13ffc15 	stw	r4,-16(fp)
  int chunk_sent = 0, ret_code = 0, file_chunk_size = 0, result = 0;
  802660:	e03ffb15 	stw	zero,-20(fp)
  802664:	e03ffa15 	stw	zero,-24(fp)
  802668:	e03ff915 	stw	zero,-28(fp)
  80266c:	e03ff815 	stw	zero,-32(fp)
  char* tx_ptr;
  
  if(conn->data_sent < conn->file_length)
  802670:	e0bffc17 	ldw	r2,-16(fp)
  802674:	10c00917 	ldw	r3,36(r2)
  802678:	e0bffc17 	ldw	r2,-16(fp)
  80267c:	10800817 	ldw	r2,32(r2)
  802680:	18804d0e 	bge	r3,r2,8027b8 <http_send_file_chunk+0x16c>
  {
    file_chunk_size = fread(conn->tx_buffer, 1, 
  802684:	e0bffc17 	ldw	r2,-16(fp)
  802688:	10801217 	ldw	r2,72(r2)
  80268c:	e0bfff15 	stw	r2,-4(fp)
  802690:	e0bffc17 	ldw	r2,-16(fp)
  802694:	10c00817 	ldw	r3,32(r2)
  802698:	e0bffc17 	ldw	r2,-16(fp)
  80269c:	10800917 	ldw	r2,36(r2)
  8026a0:	1885c83a 	sub	r2,r3,r2
  8026a4:	e0bffe15 	stw	r2,-8(fp)
  8026a8:	e0fffe17 	ldw	r3,-8(fp)
  8026ac:	18880050 	cmplti	r2,r3,8193
  8026b0:	1000021e 	bne	r2,zero,8026bc <http_send_file_chunk+0x70>
  8026b4:	00880004 	movi	r2,8192
  8026b8:	e0bffe15 	stw	r2,-8(fp)
  8026bc:	e1bffe17 	ldw	r6,-8(fp)
  8026c0:	e0bffc17 	ldw	r2,-16(fp)
  8026c4:	11c00b17 	ldw	r7,44(r2)
  8026c8:	e13fff17 	ldw	r4,-4(fp)
  8026cc:	01400044 	movi	r5,1
  8026d0:	0805da80 	call	805da8 <fread>
  8026d4:	e0bff915 	stw	r2,-28(fp)
      MIN(HTTP_TX_BUF_SIZE, (conn->file_length - conn->data_sent)), 
      conn->file_handle);
    
    tx_ptr = conn->tx_buffer;
  8026d8:	e0bffc17 	ldw	r2,-16(fp)
  8026dc:	10801217 	ldw	r2,72(r2)
  8026e0:	e0bff715 	stw	r2,-36(fp)
    
    while(chunk_sent < file_chunk_size)
  8026e4:	00003106 	br	8027ac <http_send_file_chunk+0x160>
    {
      result = send(conn->fd, tx_ptr, file_chunk_size, 0);
  8026e8:	e0bffc17 	ldw	r2,-16(fp)
  8026ec:	11000317 	ldw	r4,12(r2)
  8026f0:	e17ff717 	ldw	r5,-36(fp)
  8026f4:	e1bff917 	ldw	r6,-28(fp)
  8026f8:	000f883a 	mov	r7,zero
  8026fc:	082eaec0 	call	82eaec <t_send>
  802700:	e0bff815 	stw	r2,-32(fp)
      
      /* Error - get out of here! */
      if(result < 0)
  802704:	e0bff817 	ldw	r2,-32(fp)
  802708:	1004403a 	cmpge	r2,r2,zero
  80270c:	10000e1e 	bne	r2,zero,802748 <http_send_file_chunk+0xfc>
      {
        fprintf(stderr, "[http_send_file] file send returned %d\n", result);
  802710:	00802174 	movhi	r2,133
  802714:	10828104 	addi	r2,r2,2564
  802718:	10800017 	ldw	r2,0(r2)
  80271c:	11000317 	ldw	r4,12(r2)
  802720:	01402174 	movhi	r5,133
  802724:	296d2104 	addi	r5,r5,-19324
  802728:	e1bff817 	ldw	r6,-32(fp)
  80272c:	0805b4c0 	call	805b4c <fprintf>
        ALT_DEBUG_ASSERT(1);
        conn->state = RESET;
  802730:	e0fffc17 	ldw	r3,-16(fp)
  802734:	00800104 	movi	r2,4
  802738:	18800015 	stw	r2,0(r3)
        return result;
  80273c:	e0fff817 	ldw	r3,-32(fp)
  802740:	e0fffd15 	stw	r3,-12(fp)
  802744:	00002606 	br	8027e0 <http_send_file_chunk+0x194>
  802748:	00802174 	movhi	r2,133
  80274c:	1082e604 	addi	r2,r2,2968
  802750:	10800017 	ldw	r2,0(r2)
  802754:	1007883a 	mov	r3,r2
      /*
       * No errors, but the number of bytes sent might be less than we wanted.
       */
      else
      {
        conn->activity_time = alt_nticks();
  802758:	e0bffc17 	ldw	r2,-16(fp)
  80275c:	10c00c15 	stw	r3,48(r2)
        chunk_sent += result;
  802760:	e0fffb17 	ldw	r3,-20(fp)
  802764:	e0bff817 	ldw	r2,-32(fp)
  802768:	1885883a 	add	r2,r3,r2
  80276c:	e0bffb15 	stw	r2,-20(fp)
        conn->data_sent += result;
  802770:	e0bffc17 	ldw	r2,-16(fp)
  802774:	10c00917 	ldw	r3,36(r2)
  802778:	e0bff817 	ldw	r2,-32(fp)
  80277c:	1887883a 	add	r3,r3,r2
  802780:	e0bffc17 	ldw	r2,-16(fp)
  802784:	10c00915 	stw	r3,36(r2)
        tx_ptr += result;
  802788:	e0bff817 	ldw	r2,-32(fp)
  80278c:	1007883a 	mov	r3,r2
  802790:	e0bff717 	ldw	r2,-36(fp)
  802794:	10c5883a 	add	r2,r2,r3
  802798:	e0bff715 	stw	r2,-36(fp)
        file_chunk_size -= result;
  80279c:	e0fff917 	ldw	r3,-28(fp)
  8027a0:	e0bff817 	ldw	r2,-32(fp)
  8027a4:	1885c83a 	sub	r2,r3,r2
  8027a8:	e0bff915 	stw	r2,-28(fp)
      MIN(HTTP_TX_BUF_SIZE, (conn->file_length - conn->data_sent)), 
      conn->file_handle);
    
    tx_ptr = conn->tx_buffer;
    
    while(chunk_sent < file_chunk_size)
  8027ac:	e0fffb17 	ldw	r3,-20(fp)
  8027b0:	e0bff917 	ldw	r2,-28(fp)
  8027b4:	18bfcc16 	blt	r3,r2,8026e8 <http_send_file_chunk+0x9c>
  
  /* 
   * We managed to send all of the file contents to the IP stack successfully.
   * At this point we can mark our connection info as complete.
   */
  if(conn->data_sent >= conn->file_length)
  8027b8:	e0bffc17 	ldw	r2,-16(fp)
  8027bc:	10c00917 	ldw	r3,36(r2)
  8027c0:	e0bffc17 	ldw	r2,-16(fp)
  8027c4:	10800817 	ldw	r2,32(r2)
  8027c8:	18800316 	blt	r3,r2,8027d8 <http_send_file_chunk+0x18c>
  {
    conn->state = COMPLETE;
  8027cc:	e0fffc17 	ldw	r3,-16(fp)
  8027d0:	008000c4 	movi	r2,3
  8027d4:	18800015 	stw	r2,0(r3)
  }

  return ret_code;
  8027d8:	e0bffa17 	ldw	r2,-24(fp)
  8027dc:	e0bffd15 	stw	r2,-12(fp)
  8027e0:	e0bffd17 	ldw	r2,-12(fp)
}
  8027e4:	e037883a 	mov	sp,fp
  8027e8:	dfc00117 	ldw	ra,4(sp)
  8027ec:	df000017 	ldw	fp,0(sp)
  8027f0:	dec00204 	addi	sp,sp,8
  8027f4:	f800283a 	ret

008027f8 <http_send_file_header>:
 *
 * Construct and send an HTTP header describing the now-opened file that is
 * about to be sent to the client.
 */
int http_send_file_header(http_conn* conn, const char* name, int code)
{
  8027f8:	defff304 	addi	sp,sp,-52
  8027fc:	dfc00c15 	stw	ra,48(sp)
  802800:	df000b15 	stw	fp,44(sp)
  802804:	df000b04 	addi	fp,sp,44
  802808:	e13ffb15 	stw	r4,-20(fp)
  80280c:	e17ffc15 	stw	r5,-16(fp)
  802810:	e1bffd15 	stw	r6,-12(fp)
  int     result = 0, ret_code = 0;
  802814:	e03ff815 	stw	zero,-32(fp)
  802818:	e03ff715 	stw	zero,-36(fp)
  char* tx_wr_pos = conn->tx_buffer;
  80281c:	e0bffb17 	ldw	r2,-20(fp)
  802820:	10801217 	ldw	r2,72(r2)
  802824:	e0bff615 	stw	r2,-40(fp)
  fpos_t  end, start;
  const char* ext = strchr(name, '.');
  802828:	e13ffc17 	ldw	r4,-16(fp)
  80282c:	01400b84 	movi	r5,46
  802830:	0807fa80 	call	807fa8 <strchr>
  802834:	e0bff515 	stw	r2,-44(fp)

  tx_wr_pos += sprintf(tx_wr_pos, HTTP_VERSION_STRING);
  802838:	e0fff617 	ldw	r3,-40(fp)
  80283c:	00801204 	movi	r2,72
  802840:	18800005 	stb	r2,0(r3)
  802844:	00801504 	movi	r2,84
  802848:	18800045 	stb	r2,1(r3)
  80284c:	00801504 	movi	r2,84
  802850:	18800085 	stb	r2,2(r3)
  802854:	00801404 	movi	r2,80
  802858:	188000c5 	stb	r2,3(r3)
  80285c:	00800bc4 	movi	r2,47
  802860:	18800105 	stb	r2,4(r3)
  802864:	00800c44 	movi	r2,49
  802868:	18800145 	stb	r2,5(r3)
  80286c:	00800b84 	movi	r2,46
  802870:	18800185 	stb	r2,6(r3)
  802874:	00800c44 	movi	r2,49
  802878:	188001c5 	stb	r2,7(r3)
  80287c:	00800804 	movi	r2,32
  802880:	18800205 	stb	r2,8(r3)
  802884:	18000245 	stb	zero,9(r3)
  802888:	e0bff617 	ldw	r2,-40(fp)
  80288c:	10800244 	addi	r2,r2,9
  802890:	e0bff615 	stw	r2,-40(fp)

  switch(code)
  802894:	e0bffd17 	ldw	r2,-12(fp)
  802898:	e0bfff15 	stw	r2,-4(fp)
  80289c:	e0ffff17 	ldw	r3,-4(fp)
  8028a0:	18803220 	cmpeqi	r2,r3,200
  8028a4:	1000041e 	bne	r2,zero,8028b8 <http_send_file_header+0xc0>
  8028a8:	e0ffff17 	ldw	r3,-4(fp)
  8028ac:	18806520 	cmpeqi	r2,r3,404
  8028b0:	1000171e 	bne	r2,zero,802910 <http_send_file_header+0x118>
  8028b4:	00002106 	br	80293c <http_send_file_header+0x144>
  {
    /* HTTP Code: "200 OK\r\n" (we have opened the file successfully) */
    case HTTP_OK:
    {
      tx_wr_pos += sprintf(tx_wr_pos, HTTP_OK_STRING);
  8028b8:	e0fff617 	ldw	r3,-40(fp)
  8028bc:	00800c84 	movi	r2,50
  8028c0:	18800005 	stb	r2,0(r3)
  8028c4:	00800c04 	movi	r2,48
  8028c8:	18800045 	stb	r2,1(r3)
  8028cc:	00800c04 	movi	r2,48
  8028d0:	18800085 	stb	r2,2(r3)
  8028d4:	00800804 	movi	r2,32
  8028d8:	188000c5 	stb	r2,3(r3)
  8028dc:	008013c4 	movi	r2,79
  8028e0:	18800105 	stb	r2,4(r3)
  8028e4:	008012c4 	movi	r2,75
  8028e8:	18800145 	stb	r2,5(r3)
  8028ec:	00800344 	movi	r2,13
  8028f0:	18800185 	stb	r2,6(r3)
  8028f4:	00800284 	movi	r2,10
  8028f8:	188001c5 	stb	r2,7(r3)
  8028fc:	18000205 	stb	zero,8(r3)
  802900:	e0bff617 	ldw	r2,-40(fp)
  802904:	10800204 	addi	r2,r2,8
  802908:	e0bff615 	stw	r2,-40(fp)
      break;
  80290c:	00001906 	br	802974 <http_send_file_header+0x17c>
    }
    /* HTTP Code: "404 Not Found\r\n" (couldn't find requested file) */
    case HTTP_NOT_FOUND:
    {
      tx_wr_pos += sprintf(tx_wr_pos, HTTP_NOT_FOUND_STRING);
  802910:	e0bff617 	ldw	r2,-40(fp)
  802914:	00c02174 	movhi	r3,133
  802918:	18ed2b04 	addi	r3,r3,-19284
  80291c:	1009883a 	mov	r4,r2
  802920:	180b883a 	mov	r5,r3
  802924:	01800404 	movi	r6,16
  802928:	08073380 	call	807338 <memcpy>
  80292c:	e0bff617 	ldw	r2,-40(fp)
  802930:	108003c4 	addi	r2,r2,15
  802934:	e0bff615 	stw	r2,-40(fp)
      break;
  802938:	00000e06 	br	802974 <http_send_file_header+0x17c>
    }
    default:
    {
      fprintf(stderr, "[http_send_file_header] Invalid HTTP code: %d\n", code);
  80293c:	00802174 	movhi	r2,133
  802940:	10828104 	addi	r2,r2,2564
  802944:	10800017 	ldw	r2,0(r2)
  802948:	11000317 	ldw	r4,12(r2)
  80294c:	01402174 	movhi	r5,133
  802950:	296d2f04 	addi	r5,r5,-19268
  802954:	e1bffd17 	ldw	r6,-12(fp)
  802958:	0805b4c0 	call	805b4c <fprintf>
      conn->state = RESET;
  80295c:	e0fffb17 	ldw	r3,-20(fp)
  802960:	00800104 	movi	r2,4
  802964:	18800015 	stw	r2,0(r3)
      return -1;
  802968:	00bfffc4 	movi	r2,-1
  80296c:	e0bffe15 	stw	r2,-8(fp)
  802970:	00016b06 	br	802f20 <http_send_file_header+0x728>
      break;
    }
  }

  /* Handle the various content types */
  tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE);
  802974:	e0bff617 	ldw	r2,-40(fp)
  802978:	00c02174 	movhi	r3,133
  80297c:	18ed3b04 	addi	r3,r3,-19220
  802980:	1009883a 	mov	r4,r2
  802984:	180b883a 	mov	r5,r3
  802988:	018003c4 	movi	r6,15
  80298c:	08073380 	call	807338 <memcpy>
  802990:	e0bff617 	ldw	r2,-40(fp)
  802994:	10800384 	addi	r2,r2,14
  802998:	e0bff615 	stw	r2,-40(fp)

  if (!strcasecmp(ext, ".html"))
  80299c:	e13ff517 	ldw	r4,-44(fp)
  8029a0:	01402174 	movhi	r5,133
  8029a4:	296d3f04 	addi	r5,r5,-19204
  8029a8:	0807e680 	call	807e68 <strcasecmp>
  8029ac:	1004c03a 	cmpne	r2,r2,zero
  8029b0:	10001c1e 	bne	r2,zero,802a24 <http_send_file_header+0x22c>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_HTML);
  8029b4:	e0fff617 	ldw	r3,-40(fp)
  8029b8:	00801d04 	movi	r2,116
  8029bc:	18800005 	stb	r2,0(r3)
  8029c0:	00801944 	movi	r2,101
  8029c4:	18800045 	stb	r2,1(r3)
  8029c8:	00801e04 	movi	r2,120
  8029cc:	18800085 	stb	r2,2(r3)
  8029d0:	00801d04 	movi	r2,116
  8029d4:	188000c5 	stb	r2,3(r3)
  8029d8:	00800bc4 	movi	r2,47
  8029dc:	18800105 	stb	r2,4(r3)
  8029e0:	00801a04 	movi	r2,104
  8029e4:	18800145 	stb	r2,5(r3)
  8029e8:	00801d04 	movi	r2,116
  8029ec:	18800185 	stb	r2,6(r3)
  8029f0:	00801b44 	movi	r2,109
  8029f4:	188001c5 	stb	r2,7(r3)
  8029f8:	00801b04 	movi	r2,108
  8029fc:	18800205 	stb	r2,8(r3)
  802a00:	00800344 	movi	r2,13
  802a04:	18800245 	stb	r2,9(r3)
  802a08:	00800284 	movi	r2,10
  802a0c:	18800285 	stb	r2,10(r3)
  802a10:	180002c5 	stb	zero,11(r3)
  802a14:	e0bff617 	ldw	r2,-40(fp)
  802a18:	108002c4 	addi	r2,r2,11
  802a1c:	e0bff615 	stw	r2,-40(fp)
  802a20:	0000c706 	br	802d40 <http_send_file_header+0x548>
  }
  else if (!strcasecmp(ext, ".jpg"))
  802a24:	e13ff517 	ldw	r4,-44(fp)
  802a28:	01402174 	movhi	r5,133
  802a2c:	296d4104 	addi	r5,r5,-19196
  802a30:	0807e680 	call	807e68 <strcasecmp>
  802a34:	1004c03a 	cmpne	r2,r2,zero
  802a38:	10001c1e 	bne	r2,zero,802aac <http_send_file_header+0x2b4>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_JPG);
  802a3c:	e0fff617 	ldw	r3,-40(fp)
  802a40:	00801a44 	movi	r2,105
  802a44:	18800005 	stb	r2,0(r3)
  802a48:	00801b44 	movi	r2,109
  802a4c:	18800045 	stb	r2,1(r3)
  802a50:	00801844 	movi	r2,97
  802a54:	18800085 	stb	r2,2(r3)
  802a58:	008019c4 	movi	r2,103
  802a5c:	188000c5 	stb	r2,3(r3)
  802a60:	00801944 	movi	r2,101
  802a64:	18800105 	stb	r2,4(r3)
  802a68:	00800bc4 	movi	r2,47
  802a6c:	18800145 	stb	r2,5(r3)
  802a70:	00801a84 	movi	r2,106
  802a74:	18800185 	stb	r2,6(r3)
  802a78:	00801c04 	movi	r2,112
  802a7c:	188001c5 	stb	r2,7(r3)
  802a80:	008019c4 	movi	r2,103
  802a84:	18800205 	stb	r2,8(r3)
  802a88:	00800344 	movi	r2,13
  802a8c:	18800245 	stb	r2,9(r3)
  802a90:	00800284 	movi	r2,10
  802a94:	18800285 	stb	r2,10(r3)
  802a98:	180002c5 	stb	zero,11(r3)
  802a9c:	e0bff617 	ldw	r2,-40(fp)
  802aa0:	108002c4 	addi	r2,r2,11
  802aa4:	e0bff615 	stw	r2,-40(fp)
  802aa8:	0000a506 	br	802d40 <http_send_file_header+0x548>
  }
  else if (!strcasecmp(ext, ".gif"))
  802aac:	e13ff517 	ldw	r4,-44(fp)
  802ab0:	01402174 	movhi	r5,133
  802ab4:	296d4304 	addi	r5,r5,-19188
  802ab8:	0807e680 	call	807e68 <strcasecmp>
  802abc:	1004c03a 	cmpne	r2,r2,zero
  802ac0:	10001c1e 	bne	r2,zero,802b34 <http_send_file_header+0x33c>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_GIF);
  802ac4:	e0fff617 	ldw	r3,-40(fp)
  802ac8:	00801a44 	movi	r2,105
  802acc:	18800005 	stb	r2,0(r3)
  802ad0:	00801b44 	movi	r2,109
  802ad4:	18800045 	stb	r2,1(r3)
  802ad8:	00801844 	movi	r2,97
  802adc:	18800085 	stb	r2,2(r3)
  802ae0:	008019c4 	movi	r2,103
  802ae4:	188000c5 	stb	r2,3(r3)
  802ae8:	00801944 	movi	r2,101
  802aec:	18800105 	stb	r2,4(r3)
  802af0:	00800bc4 	movi	r2,47
  802af4:	18800145 	stb	r2,5(r3)
  802af8:	008019c4 	movi	r2,103
  802afc:	18800185 	stb	r2,6(r3)
  802b00:	00801a44 	movi	r2,105
  802b04:	188001c5 	stb	r2,7(r3)
  802b08:	00801984 	movi	r2,102
  802b0c:	18800205 	stb	r2,8(r3)
  802b10:	00800344 	movi	r2,13
  802b14:	18800245 	stb	r2,9(r3)
  802b18:	00800284 	movi	r2,10
  802b1c:	18800285 	stb	r2,10(r3)
  802b20:	180002c5 	stb	zero,11(r3)
  802b24:	e0bff617 	ldw	r2,-40(fp)
  802b28:	108002c4 	addi	r2,r2,11
  802b2c:	e0bff615 	stw	r2,-40(fp)
  802b30:	00008306 	br	802d40 <http_send_file_header+0x548>
  }
  else if (!strcasecmp(ext, ".png"))
  802b34:	e13ff517 	ldw	r4,-44(fp)
  802b38:	01402174 	movhi	r5,133
  802b3c:	296d4504 	addi	r5,r5,-19180
  802b40:	0807e680 	call	807e68 <strcasecmp>
  802b44:	1004c03a 	cmpne	r2,r2,zero
  802b48:	10001c1e 	bne	r2,zero,802bbc <http_send_file_header+0x3c4>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_PNG);
  802b4c:	e0fff617 	ldw	r3,-40(fp)
  802b50:	00801a44 	movi	r2,105
  802b54:	18800005 	stb	r2,0(r3)
  802b58:	00801b44 	movi	r2,109
  802b5c:	18800045 	stb	r2,1(r3)
  802b60:	00801844 	movi	r2,97
  802b64:	18800085 	stb	r2,2(r3)
  802b68:	008019c4 	movi	r2,103
  802b6c:	188000c5 	stb	r2,3(r3)
  802b70:	00801944 	movi	r2,101
  802b74:	18800105 	stb	r2,4(r3)
  802b78:	00800bc4 	movi	r2,47
  802b7c:	18800145 	stb	r2,5(r3)
  802b80:	00801c04 	movi	r2,112
  802b84:	18800185 	stb	r2,6(r3)
  802b88:	00801b84 	movi	r2,110
  802b8c:	188001c5 	stb	r2,7(r3)
  802b90:	008019c4 	movi	r2,103
  802b94:	18800205 	stb	r2,8(r3)
  802b98:	00800344 	movi	r2,13
  802b9c:	18800245 	stb	r2,9(r3)
  802ba0:	00800284 	movi	r2,10
  802ba4:	18800285 	stb	r2,10(r3)
  802ba8:	180002c5 	stb	zero,11(r3)
  802bac:	e0bff617 	ldw	r2,-40(fp)
  802bb0:	108002c4 	addi	r2,r2,11
  802bb4:	e0bff615 	stw	r2,-40(fp)
  802bb8:	00006106 	br	802d40 <http_send_file_header+0x548>
  }
  else if (!strcasecmp(ext, ".js"))
  802bbc:	e13ff517 	ldw	r4,-44(fp)
  802bc0:	01402174 	movhi	r5,133
  802bc4:	296d4704 	addi	r5,r5,-19172
  802bc8:	0807e680 	call	807e68 <strcasecmp>
  802bcc:	1004c03a 	cmpne	r2,r2,zero
  802bd0:	10000b1e 	bne	r2,zero,802c00 <http_send_file_header+0x408>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_JS);
  802bd4:	e0bff617 	ldw	r2,-40(fp)
  802bd8:	00c02174 	movhi	r3,133
  802bdc:	18ed4804 	addi	r3,r3,-19168
  802be0:	1009883a 	mov	r4,r2
  802be4:	180b883a 	mov	r5,r3
  802be8:	018006c4 	movi	r6,27
  802bec:	08073380 	call	807338 <memcpy>
  802bf0:	e0bff617 	ldw	r2,-40(fp)
  802bf4:	10800684 	addi	r2,r2,26
  802bf8:	e0bff615 	stw	r2,-40(fp)
  802bfc:	00005006 	br	802d40 <http_send_file_header+0x548>
  }
  else if (!strcasecmp(ext, ".css"))
  802c00:	e13ff517 	ldw	r4,-44(fp)
  802c04:	01402174 	movhi	r5,133
  802c08:	296d4f04 	addi	r5,r5,-19140
  802c0c:	0807e680 	call	807e68 <strcasecmp>
  802c10:	1004c03a 	cmpne	r2,r2,zero
  802c14:	10001a1e 	bne	r2,zero,802c80 <http_send_file_header+0x488>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_CSS);
  802c18:	e0fff617 	ldw	r3,-40(fp)
  802c1c:	00801d04 	movi	r2,116
  802c20:	18800005 	stb	r2,0(r3)
  802c24:	00801944 	movi	r2,101
  802c28:	18800045 	stb	r2,1(r3)
  802c2c:	00801e04 	movi	r2,120
  802c30:	18800085 	stb	r2,2(r3)
  802c34:	00801d04 	movi	r2,116
  802c38:	188000c5 	stb	r2,3(r3)
  802c3c:	00800bc4 	movi	r2,47
  802c40:	18800105 	stb	r2,4(r3)
  802c44:	008018c4 	movi	r2,99
  802c48:	18800145 	stb	r2,5(r3)
  802c4c:	00801cc4 	movi	r2,115
  802c50:	18800185 	stb	r2,6(r3)
  802c54:	00801cc4 	movi	r2,115
  802c58:	188001c5 	stb	r2,7(r3)
  802c5c:	00800344 	movi	r2,13
  802c60:	18800205 	stb	r2,8(r3)
  802c64:	00800284 	movi	r2,10
  802c68:	18800245 	stb	r2,9(r3)
  802c6c:	18000285 	stb	zero,10(r3)
  802c70:	e0bff617 	ldw	r2,-40(fp)
  802c74:	10800284 	addi	r2,r2,10
  802c78:	e0bff615 	stw	r2,-40(fp)
  802c7c:	00003006 	br	802d40 <http_send_file_header+0x548>
  }
  else if (!strcasecmp(ext, ".swf"))
  802c80:	e13ff517 	ldw	r4,-44(fp)
  802c84:	01402174 	movhi	r5,133
  802c88:	296d5104 	addi	r5,r5,-19132
  802c8c:	0807e680 	call	807e68 <strcasecmp>
  802c90:	1004c03a 	cmpne	r2,r2,zero
  802c94:	10000b1e 	bne	r2,zero,802cc4 <http_send_file_header+0x4cc>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_SWF);
  802c98:	e0bff617 	ldw	r2,-40(fp)
  802c9c:	00c02174 	movhi	r3,133
  802ca0:	18ed5304 	addi	r3,r3,-19124
  802ca4:	1009883a 	mov	r4,r2
  802ca8:	180b883a 	mov	r5,r3
  802cac:	01800804 	movi	r6,32
  802cb0:	08073380 	call	807338 <memcpy>
  802cb4:	e0bff617 	ldw	r2,-40(fp)
  802cb8:	108007c4 	addi	r2,r2,31
  802cbc:	e0bff615 	stw	r2,-40(fp)
  802cc0:	00001f06 	br	802d40 <http_send_file_header+0x548>
  }
  else if (!strcasecmp(ext, ".ico"))
  802cc4:	e13ff517 	ldw	r4,-44(fp)
  802cc8:	01402174 	movhi	r5,133
  802ccc:	296d5b04 	addi	r5,r5,-19092
  802cd0:	0807e680 	call	807e68 <strcasecmp>
  802cd4:	1004c03a 	cmpne	r2,r2,zero
  802cd8:	10000b1e 	bne	r2,zero,802d08 <http_send_file_header+0x510>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_TYPE_ICO);
  802cdc:	e0bff617 	ldw	r2,-40(fp)
  802ce0:	00c02174 	movhi	r3,133
  802ce4:	18ed5d04 	addi	r3,r3,-19084
  802ce8:	1009883a 	mov	r4,r2
  802cec:	180b883a 	mov	r5,r3
  802cf0:	018006c4 	movi	r6,27
  802cf4:	08073380 	call	807338 <memcpy>
  802cf8:	e0bff617 	ldw	r2,-40(fp)
  802cfc:	10800684 	addi	r2,r2,26
  802d00:	e0bff615 	stw	r2,-40(fp)
  802d04:	00000e06 	br	802d40 <http_send_file_header+0x548>
  }
  else
  {
    fprintf(stderr, "[http_send_file] Unknown content type: \"%s\"\n", ext);
  802d08:	00802174 	movhi	r2,133
  802d0c:	10828104 	addi	r2,r2,2564
  802d10:	10800017 	ldw	r2,0(r2)
  802d14:	11000317 	ldw	r4,12(r2)
  802d18:	01402174 	movhi	r5,133
  802d1c:	296d6404 	addi	r5,r5,-19056
  802d20:	e1bff517 	ldw	r6,-44(fp)
  802d24:	0805b4c0 	call	805b4c <fprintf>
    conn->state = RESET;
  802d28:	e0fffb17 	ldw	r3,-20(fp)
  802d2c:	00800104 	movi	r2,4
  802d30:	18800015 	stw	r2,0(r3)
    ALT_DEBUG_ASSERT(1);
    return -1;
  802d34:	00ffffc4 	movi	r3,-1
  802d38:	e0fffe15 	stw	r3,-8(fp)
  802d3c:	00007806 	br	802f20 <http_send_file_header+0x728>
  }

  /* Get the file length and stash it into our connection info */
  fseek(conn->file_handle, 0, SEEK_END);
  802d40:	e0bffb17 	ldw	r2,-20(fp)
  802d44:	11000b17 	ldw	r4,44(r2)
  802d48:	000b883a 	mov	r5,zero
  802d4c:	01800084 	movi	r6,2
  802d50:	08066640 	call	806664 <fseek>
  fgetpos(conn->file_handle, &end);
  802d54:	e0bffb17 	ldw	r2,-20(fp)
  802d58:	11000b17 	ldw	r4,44(r2)
  802d5c:	e17ff904 	addi	r5,fp,-28
  802d60:	08057600 	call	805760 <fgetpos>
  fseek(conn->file_handle, 0, SEEK_SET);
  802d64:	e0bffb17 	ldw	r2,-20(fp)
  802d68:	11000b17 	ldw	r4,44(r2)
  802d6c:	000b883a 	mov	r5,zero
  802d70:	000d883a 	mov	r6,zero
  802d74:	08066640 	call	806664 <fseek>
  fgetpos(conn->file_handle, &start);
  802d78:	e0bffb17 	ldw	r2,-20(fp)
  802d7c:	11000b17 	ldw	r4,44(r2)
  802d80:	e17ffa04 	addi	r5,fp,-24
  802d84:	08057600 	call	805760 <fgetpos>
  conn->file_length = end - start;
  802d88:	e0fff917 	ldw	r3,-28(fp)
  802d8c:	e0bffa17 	ldw	r2,-24(fp)
  802d90:	1887c83a 	sub	r3,r3,r2
  802d94:	e0bffb17 	ldw	r2,-20(fp)
  802d98:	10c00815 	stw	r3,32(r2)

  /* "Content-Length: <length bytes>\r\n" */
  tx_wr_pos += sprintf(tx_wr_pos, HTTP_CONTENT_LENGTH);
  802d9c:	e0bff617 	ldw	r2,-40(fp)
  802da0:	00c02174 	movhi	r3,133
  802da4:	18ed7004 	addi	r3,r3,-19008
  802da8:	1009883a 	mov	r4,r2
  802dac:	180b883a 	mov	r5,r3
  802db0:	01800444 	movi	r6,17
  802db4:	08073380 	call	807338 <memcpy>
  802db8:	e0bff617 	ldw	r2,-40(fp)
  802dbc:	10800404 	addi	r2,r2,16
  802dc0:	e0bff615 	stw	r2,-40(fp)
  tx_wr_pos += sprintf(tx_wr_pos, "%d\r\n", conn->file_length);
  802dc4:	e0bffb17 	ldw	r2,-20(fp)
  802dc8:	11800817 	ldw	r6,32(r2)
  802dcc:	e13ff617 	ldw	r4,-40(fp)
  802dd0:	01402174 	movhi	r5,133
  802dd4:	296d7504 	addi	r5,r5,-18988
  802dd8:	0807b340 	call	807b34 <sprintf>
  802ddc:	1007883a 	mov	r3,r2
  802de0:	e0bff617 	ldw	r2,-40(fp)
  802de4:	10c5883a 	add	r2,r2,r3
  802de8:	e0bff615 	stw	r2,-40(fp)
   * 
   * We send a specified number of files in a single keep-alive connection,
   * we'll also close the connection. It's best to be polite and tell the client,
   * though.
   */
  if(!conn->keep_alive_count)
  802dec:	e0bffb17 	ldw	r2,-20(fp)
  802df0:	10800717 	ldw	r2,28(r2)
  802df4:	1004c03a 	cmpne	r2,r2,zero
  802df8:	1000031e 	bne	r2,zero,802e08 <http_send_file_header+0x610>
  {
    conn->close = 1;
  802dfc:	e0fffb17 	ldw	r3,-20(fp)
  802e00:	00800044 	movi	r2,1
  802e04:	18800415 	stw	r2,16(r3)
  }
  
  if(conn->close)
  802e08:	e0bffb17 	ldw	r2,-20(fp)
  802e0c:	10800417 	ldw	r2,16(r2)
  802e10:	1005003a 	cmpeq	r2,r2,zero
  802e14:	10000b1e 	bne	r2,zero,802e44 <http_send_file_header+0x64c>
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_CLOSE);
  802e18:	e0bff617 	ldw	r2,-40(fp)
  802e1c:	00c02174 	movhi	r3,133
  802e20:	18ed7704 	addi	r3,r3,-18980
  802e24:	1009883a 	mov	r4,r2
  802e28:	180b883a 	mov	r5,r3
  802e2c:	01800504 	movi	r6,20
  802e30:	08073380 	call	807338 <memcpy>
  802e34:	e0bff617 	ldw	r2,-40(fp)
  802e38:	108004c4 	addi	r2,r2,19
  802e3c:	e0bff615 	stw	r2,-40(fp)
  802e40:	00000a06 	br	802e6c <http_send_file_header+0x674>
  }
  else
  {
    tx_wr_pos += sprintf(tx_wr_pos, HTTP_KEEP_ALIVE);
  802e44:	e0bff617 	ldw	r2,-40(fp)
  802e48:	00c02174 	movhi	r3,133
  802e4c:	18ed7c04 	addi	r3,r3,-18960
  802e50:	1009883a 	mov	r4,r2
  802e54:	180b883a 	mov	r5,r3
  802e58:	01800644 	movi	r6,25
  802e5c:	08073380 	call	807338 <memcpy>
  802e60:	e0bff617 	ldw	r2,-40(fp)
  802e64:	10800604 	addi	r2,r2,24
  802e68:	e0bff615 	stw	r2,-40(fp)
  }

  /* "\r\n" (two \r\n's in a row means end of headers */
  tx_wr_pos += sprintf(tx_wr_pos, HTTP_CR_LF);
  802e6c:	e0fff617 	ldw	r3,-40(fp)
  802e70:	00800344 	movi	r2,13
  802e74:	18800005 	stb	r2,0(r3)
  802e78:	00800284 	movi	r2,10
  802e7c:	18800045 	stb	r2,1(r3)
  802e80:	18000085 	stb	zero,2(r3)
  802e84:	e0bff617 	ldw	r2,-40(fp)
  802e88:	10800084 	addi	r2,r2,2
  802e8c:	e0bff615 	stw	r2,-40(fp)

  /* Send the reply header */
  result = send(conn->fd, conn->tx_buffer, (tx_wr_pos - conn->tx_buffer), 
  802e90:	e0bffb17 	ldw	r2,-20(fp)
  802e94:	11000317 	ldw	r4,12(r2)
  802e98:	e0bffb17 	ldw	r2,-20(fp)
  802e9c:	11401217 	ldw	r5,72(r2)
  802ea0:	e0fff617 	ldw	r3,-40(fp)
  802ea4:	e0bffb17 	ldw	r2,-20(fp)
  802ea8:	10801217 	ldw	r2,72(r2)
  802eac:	188dc83a 	sub	r6,r3,r2
  802eb0:	000f883a 	mov	r7,zero
  802eb4:	082eaec0 	call	82eaec <t_send>
  802eb8:	e0bff815 	stw	r2,-32(fp)
                0);  
                
  if(result < 0)
  802ebc:	e0bff817 	ldw	r2,-32(fp)
  802ec0:	1004403a 	cmpge	r2,r2,zero
  802ec4:	10000e1e 	bne	r2,zero,802f00 <http_send_file_header+0x708>
  {
    fprintf(stderr, "[http_send_file] header send returned %d\n", result);
  802ec8:	00802174 	movhi	r2,133
  802ecc:	10828104 	addi	r2,r2,2564
  802ed0:	10800017 	ldw	r2,0(r2)
  802ed4:	11000317 	ldw	r4,12(r2)
  802ed8:	01402174 	movhi	r5,133
  802edc:	296d8304 	addi	r5,r5,-18932
  802ee0:	e1bff817 	ldw	r6,-32(fp)
  802ee4:	0805b4c0 	call	805b4c <fprintf>
    conn->state = RESET;
  802ee8:	e0fffb17 	ldw	r3,-20(fp)
  802eec:	00800104 	movi	r2,4
  802ef0:	18800015 	stw	r2,0(r3)
    return result;
  802ef4:	e0bff817 	ldw	r2,-32(fp)
  802ef8:	e0bffe15 	stw	r2,-8(fp)
  802efc:	00000806 	br	802f20 <http_send_file_header+0x728>
  802f00:	00802174 	movhi	r2,133
  802f04:	1082e604 	addi	r2,r2,2968
  802f08:	10800017 	ldw	r2,0(r2)
  802f0c:	1007883a 	mov	r3,r2
  }
  else
  {
    conn->activity_time = alt_nticks();
  802f10:	e0bffb17 	ldw	r2,-20(fp)
  802f14:	10c00c15 	stw	r3,48(r2)
  }
  
  return ret_code;
  802f18:	e0fff717 	ldw	r3,-36(fp)
  802f1c:	e0fffe15 	stw	r3,-8(fp)
  802f20:	e0bffe17 	ldw	r2,-8(fp)
}
  802f24:	e037883a 	mov	sp,fp
  802f28:	dfc00117 	ldw	ra,4(sp)
  802f2c:	df000017 	ldw	fp,0(sp)
  802f30:	dec00204 	addi	sp,sp,8
  802f34:	f800283a 	ret

00802f38 <http_find_file>:
 *
 * Try to find the file requested. If nothing is requested you get /index.html
 * If we can't find it, send a "404 - Not found" message.
 */
int http_find_file(http_conn* conn)
{
  802f38:	deffbb04 	addi	sp,sp,-276
  802f3c:	dfc04415 	stw	ra,272(sp)
  802f40:	df004315 	stw	fp,268(sp)
  802f44:	df004304 	addi	fp,sp,268
  802f48:	e13ffe15 	stw	r4,-8(fp)
  char  filename[256];
  int     ret_code = 0;
  802f4c:	e03fbd15 	stw	zero,-268(fp)

  strncpy( filename, ALTERA_RO_ZIPFS_NAME, strlen(ALTERA_RO_ZIPFS_NAME));
  802f50:	e0ffbe04 	addi	r3,fp,-264
  802f54:	009d1bb4 	movhi	r2,29806
  802f58:	109b4bc4 	addi	r2,r2,27951
  802f5c:	18800015 	stw	r2,0(r3)
  802f60:	009e9bf4 	movhi	r2,31343
  802f64:	109c8bc4 	addi	r2,r2,29231
  802f68:	18800115 	stw	r2,4(r3)
  802f6c:	009cd9b4 	movhi	r2,29542
  802f70:	109c1a44 	addi	r2,r2,28777
  802f74:	18800215 	stw	r2,8(r3)

  /* URI of "/" means get the default, usually index.html */
  if ( (conn->uri[0] == '/') && (conn->uri[1] == '\0') )
  802f78:	e0bffe17 	ldw	r2,-8(fp)
  802f7c:	10807603 	ldbu	r2,472(r2)
  802f80:	10803fcc 	andi	r2,r2,255
  802f84:	1080201c 	xori	r2,r2,128
  802f88:	10bfe004 	addi	r2,r2,-128
  802f8c:	10800bd8 	cmpnei	r2,r2,47
  802f90:	1000211e 	bne	r2,zero,803018 <http_find_file+0xe0>
  802f94:	e0bffe17 	ldw	r2,-8(fp)
  802f98:	10807643 	ldbu	r2,473(r2)
  802f9c:	10803fcc 	andi	r2,r2,255
  802fa0:	1080201c 	xori	r2,r2,128
  802fa4:	10bfe004 	addi	r2,r2,-128
  802fa8:	1004c03a 	cmpne	r2,r2,zero
  802fac:	10001a1e 	bne	r2,zero,803018 <http_find_file+0xe0>
  {
    strcpy(filename+strlen(ALTERA_RO_ZIPFS_NAME), HTTP_DEFAULT_FILE);
  802fb0:	e0bfbe04 	addi	r2,fp,-264
  802fb4:	10c00304 	addi	r3,r2,12
  802fb8:	00800bc4 	movi	r2,47
  802fbc:	18800005 	stb	r2,0(r3)
  802fc0:	00801a44 	movi	r2,105
  802fc4:	18800045 	stb	r2,1(r3)
  802fc8:	00801b84 	movi	r2,110
  802fcc:	18800085 	stb	r2,2(r3)
  802fd0:	00801904 	movi	r2,100
  802fd4:	188000c5 	stb	r2,3(r3)
  802fd8:	00801944 	movi	r2,101
  802fdc:	18800105 	stb	r2,4(r3)
  802fe0:	00801e04 	movi	r2,120
  802fe4:	18800145 	stb	r2,5(r3)
  802fe8:	00800b84 	movi	r2,46
  802fec:	18800185 	stb	r2,6(r3)
  802ff0:	00801a04 	movi	r2,104
  802ff4:	188001c5 	stb	r2,7(r3)
  802ff8:	00801d04 	movi	r2,116
  802ffc:	18800205 	stb	r2,8(r3)
  803000:	00801b44 	movi	r2,109
  803004:	18800245 	stb	r2,9(r3)
  803008:	00801b04 	movi	r2,108
  80300c:	18800285 	stb	r2,10(r3)
  803010:	180002c5 	stb	zero,11(r3)
  int     ret_code = 0;

  strncpy( filename, ALTERA_RO_ZIPFS_NAME, strlen(ALTERA_RO_ZIPFS_NAME));

  /* URI of "/" means get the default, usually index.html */
  if ( (conn->uri[0] == '/') && (conn->uri[1] == '\0') )
  803014:	00000506 	br	80302c <http_find_file+0xf4>
  {
    strcpy(filename+strlen(ALTERA_RO_ZIPFS_NAME), HTTP_DEFAULT_FILE);
  }
  else
  {
    strcpy( filename+strlen(ALTERA_RO_ZIPFS_NAME), conn->uri);
  803018:	e0bfbe04 	addi	r2,fp,-264
  80301c:	11000304 	addi	r4,r2,12
  803020:	e0bffe17 	ldw	r2,-8(fp)
  803024:	11407604 	addi	r5,r2,472
  803028:	08081440 	call	808144 <strcpy>
  }
  
  /* Try to open the file */
  printf("\nFetching file:  %s.\n", filename );
  80302c:	e17fbe04 	addi	r5,fp,-264
  803030:	01002174 	movhi	r4,133
  803034:	212d8e04 	addi	r4,r4,-18888
  803038:	08076480 	call	807648 <printf>
  conn->file_handle = fopen(filename, "r");
  80303c:	e13fbe04 	addi	r4,fp,-264
  803040:	01402174 	movhi	r5,133
  803044:	296d9404 	addi	r5,r5,-18864
  803048:	0805b300 	call	805b30 <fopen>
  80304c:	1007883a 	mov	r3,r2
  803050:	e0bffe17 	ldw	r2,-8(fp)
  803054:	10c00b15 	stw	r3,44(r2)
  
  /* Can't find the requested file? Try for a 404-page. */
  if (conn->file_handle == NULL)
  803058:	e0bffe17 	ldw	r2,-8(fp)
  80305c:	10800b17 	ldw	r2,44(r2)
  803060:	1004c03a 	cmpne	r2,r2,zero
  803064:	1000461e 	bne	r2,zero,803180 <http_find_file+0x248>
  {
    strcpy(filename, ALTERA_RO_ZIPFS_NAME);
  803068:	e0ffbe04 	addi	r3,fp,-264
  80306c:	009d1bb4 	movhi	r2,29806
  803070:	109b4bc4 	addi	r2,r2,27951
  803074:	18800015 	stw	r2,0(r3)
  803078:	009e9bf4 	movhi	r2,31343
  80307c:	109c8bc4 	addi	r2,r2,29231
  803080:	18800115 	stw	r2,4(r3)
  803084:	009cd9b4 	movhi	r2,29542
  803088:	109c1a44 	addi	r2,r2,28777
  80308c:	18800215 	stw	r2,8(r3)
  803090:	18000305 	stb	zero,12(r3)
    strcpy(filename+strlen(ALTERA_RO_ZIPFS_NAME), HTTP_NOT_FOUND_FILE);
  803094:	e0bfbe04 	addi	r2,fp,-264
  803098:	10800304 	addi	r2,r2,12
  80309c:	00c02174 	movhi	r3,133
  8030a0:	18ed9504 	addi	r3,r3,-18860
  8030a4:	1009883a 	mov	r4,r2
  8030a8:	180b883a 	mov	r5,r3
  8030ac:	01800404 	movi	r6,16
  8030b0:	08073380 	call	807338 <memcpy>
    conn->file_handle = fopen(filename, "r");
  8030b4:	e13fbe04 	addi	r4,fp,-264
  8030b8:	01402174 	movhi	r5,133
  8030bc:	296d9404 	addi	r5,r5,-18864
  8030c0:	0805b300 	call	805b30 <fopen>
  8030c4:	1007883a 	mov	r3,r2
  8030c8:	e0bffe17 	ldw	r2,-8(fp)
  8030cc:	10c00b15 	stw	r3,44(r2)
    
    /* We located the specified "404: Not-Found" page */
    if (conn->file_handle != NULL)
  8030d0:	e0bffe17 	ldw	r2,-8(fp)
  8030d4:	10800b17 	ldw	r2,44(r2)
  8030d8:	1005003a 	cmpeq	r2,r2,zero
  8030dc:	1000061e 	bne	r2,zero,8030f8 <http_find_file+0x1c0>
    {
      ALT_DEBUG_ASSERT(fd != NULL);
      ret_code = http_send_file_header(conn, filename, HTTP_NOT_FOUND);
  8030e0:	e17fbe04 	addi	r5,fp,-264
  8030e4:	e13ffe17 	ldw	r4,-8(fp)
  8030e8:	01806504 	movi	r6,404
  8030ec:	08027f80 	call	8027f8 <http_send_file_header>
  8030f0:	e0bfbd15 	stw	r2,-268(fp)
  8030f4:	00002706 	br	803194 <http_find_file+0x25c>
    }
    /* Can't find the 404 page: This likely means there is no file system */
    else
    {
      fprintf(stderr, "Can't open the 404 File Not Found error page.\n");
  8030f8:	00802174 	movhi	r2,133
  8030fc:	10828104 	addi	r2,r2,2564
  803100:	10800017 	ldw	r2,0(r2)
  803104:	11c00317 	ldw	r7,12(r2)
  803108:	01002174 	movhi	r4,133
  80310c:	212d9904 	addi	r4,r4,-18844
  803110:	01400044 	movi	r5,1
  803114:	01800b84 	movi	r6,46
  803118:	0806a240 	call	806a24 <fwrite>
      fprintf(stderr, "Have you programmed the filing system into flash?\n");
  80311c:	00802174 	movhi	r2,133
  803120:	10828104 	addi	r2,r2,2564
  803124:	10800017 	ldw	r2,0(r2)
  803128:	11c00317 	ldw	r7,12(r2)
  80312c:	01002174 	movhi	r4,133
  803130:	212da504 	addi	r4,r4,-18796
  803134:	01400044 	movi	r5,1
  803138:	01800c84 	movi	r6,50
  80313c:	0806a240 	call	806a24 <fwrite>
      send(conn->fd,(void*)canned_http_response,strlen(canned_http_response),0);
  803140:	e0bffe17 	ldw	r2,-8(fp)
  803144:	11000317 	ldw	r4,12(r2)
  803148:	01402174 	movhi	r5,133
  80314c:	296c0904 	addi	r5,r5,-20444
  803150:	01805784 	movi	r6,350
  803154:	000f883a 	mov	r7,zero
  803158:	082eaec0 	call	82eaec <t_send>
      
      fclose(conn->file_handle);
  80315c:	e0bffe17 	ldw	r2,-8(fp)
  803160:	11000b17 	ldw	r4,44(r2)
  803164:	08054f00 	call	8054f0 <fclose>
      conn->state = RESET;
  803168:	e0fffe17 	ldw	r3,-8(fp)
  80316c:	00800104 	movi	r2,4
  803170:	18800015 	stw	r2,0(r3)
      return -1;  
  803174:	00bfffc4 	movi	r2,-1
  803178:	e0bfff15 	stw	r2,-4(fp)
  80317c:	00000706 	br	80319c <http_find_file+0x264>
    }
  }
  /* We've found the requested file; send its header and move on. */  
  else
  {
    ret_code = http_send_file_header(conn, filename, HTTP_OK);
  803180:	e17fbe04 	addi	r5,fp,-264
  803184:	e13ffe17 	ldw	r4,-8(fp)
  803188:	01803204 	movi	r6,200
  80318c:	08027f80 	call	8027f8 <http_send_file_header>
  803190:	e0bfbd15 	stw	r2,-268(fp)
  }

  return ret_code;
  803194:	e0bfbd17 	ldw	r2,-268(fp)
  803198:	e0bfff15 	stw	r2,-4(fp)
  80319c:	e0bfff17 	ldw	r2,-4(fp)
}
  8031a0:	e037883a 	mov	sp,fp
  8031a4:	dfc00117 	ldw	ra,4(sp)
  8031a8:	df000017 	ldw	fp,0(sp)
  8031ac:	dec00204 	addi	sp,sp,8
  8031b0:	f800283a 	ret

008031b4 <http_send_redirect>:
 * This function sends re-directs to either program_flash.html or
 * reset_sytem.html.
 */

void http_send_redirect( alt_u8 redirect[256] )
{
  8031b4:	defffd04 	addi	sp,sp,-12
  8031b8:	dfc00215 	stw	ra,8(sp)
  8031bc:	df000115 	stw	fp,4(sp)
  8031c0:	df000104 	addi	fp,sp,4
  8031c4:	e13fff15 	stw	r4,-4(fp)
  printf ("Don't do anything....for now.\n");
  8031c8:	01002174 	movhi	r4,133
  8031cc:	212db204 	addi	r4,r4,-18744
  8031d0:	08077600 	call	807760 <puts>
}
  8031d4:	e037883a 	mov	sp,fp
  8031d8:	dfc00117 	ldw	ra,4(sp)
  8031dc:	df000017 	ldw	fp,0(sp)
  8031e0:	dec00204 	addi	sp,sp,8
  8031e4:	f800283a 	ret

008031e8 <http_handle_post>:
 * http_handle_post()
 *
 * Process the post request and take the appropriate action.
 */
int http_handle_post(http_conn* conn)
{
  8031e8:	defffa04 	addi	sp,sp,-24
  8031ec:	dfc00515 	stw	ra,20(sp)
  8031f0:	df000415 	stw	fp,16(sp)
  8031f4:	df000404 	addi	fp,sp,16
  8031f8:	e13fff15 	stw	r4,-4(fp)
  char* tx_wr_pos = conn->tx_buffer;
  8031fc:	e0bfff17 	ldw	r2,-4(fp)
  803200:	10801217 	ldw	r2,72(r2)
  803204:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = 0;
  803208:	e03ffd15 	stw	zero,-12(fp)
  struct upload_buf_struct *upload_buffer = &upload_buf;
  80320c:	008021b4 	movhi	r2,134
  803210:	10b65404 	addi	r2,r2,-9904
  803214:	e0bffc15 	stw	r2,-16(fp)
  
  tx_wr_pos += sprintf(tx_wr_pos, HTTP_VERSION_STRING);
  803218:	e0fffe17 	ldw	r3,-8(fp)
  80321c:	00801204 	movi	r2,72
  803220:	18800005 	stb	r2,0(r3)
  803224:	00801504 	movi	r2,84
  803228:	18800045 	stb	r2,1(r3)
  80322c:	00801504 	movi	r2,84
  803230:	18800085 	stb	r2,2(r3)
  803234:	00801404 	movi	r2,80
  803238:	188000c5 	stb	r2,3(r3)
  80323c:	00800bc4 	movi	r2,47
  803240:	18800105 	stb	r2,4(r3)
  803244:	00800c44 	movi	r2,49
  803248:	18800145 	stb	r2,5(r3)
  80324c:	00800b84 	movi	r2,46
  803250:	18800185 	stb	r2,6(r3)
  803254:	00800c44 	movi	r2,49
  803258:	188001c5 	stb	r2,7(r3)
  80325c:	00800804 	movi	r2,32
  803260:	18800205 	stb	r2,8(r3)
  803264:	18000245 	stb	zero,9(r3)
  803268:	e0bffe17 	ldw	r2,-8(fp)
  80326c:	10800244 	addi	r2,r2,9
  803270:	e0bffe15 	stw	r2,-8(fp)
  tx_wr_pos += sprintf(tx_wr_pos, HTTP_NO_CONTENT_STRING);
  803274:	e0bffe17 	ldw	r2,-8(fp)
  803278:	00c02174 	movhi	r3,133
  80327c:	18edba04 	addi	r3,r3,-18712
  803280:	1009883a 	mov	r4,r2
  803284:	180b883a 	mov	r5,r3
  803288:	01800444 	movi	r6,17
  80328c:	08073380 	call	807338 <memcpy>
  803290:	e0bffe17 	ldw	r2,-8(fp)
  803294:	10800404 	addi	r2,r2,16
  803298:	e0bffe15 	stw	r2,-8(fp)
  tx_wr_pos += sprintf(tx_wr_pos, HTTP_CLOSE);
  80329c:	e0bffe17 	ldw	r2,-8(fp)
  8032a0:	00c02174 	movhi	r3,133
  8032a4:	18ed7704 	addi	r3,r3,-18980
  8032a8:	1009883a 	mov	r4,r2
  8032ac:	180b883a 	mov	r5,r3
  8032b0:	01800504 	movi	r6,20
  8032b4:	08073380 	call	807338 <memcpy>
  8032b8:	e0bffe17 	ldw	r2,-8(fp)
  8032bc:	108004c4 	addi	r2,r2,19
  8032c0:	e0bffe15 	stw	r2,-8(fp)
  tx_wr_pos += sprintf(tx_wr_pos, HTTP_END_OF_HEADERS);
  8032c4:	e0fffe17 	ldw	r3,-8(fp)
  8032c8:	00800344 	movi	r2,13
  8032cc:	18800005 	stb	r2,0(r3)
  8032d0:	00800284 	movi	r2,10
  8032d4:	18800045 	stb	r2,1(r3)
  8032d8:	00800344 	movi	r2,13
  8032dc:	18800085 	stb	r2,2(r3)
  8032e0:	00800284 	movi	r2,10
  8032e4:	188000c5 	stb	r2,3(r3)
  8032e8:	18000105 	stb	zero,4(r3)
  8032ec:	e0bffe17 	ldw	r2,-8(fp)
  8032f0:	10800104 	addi	r2,r2,4
  8032f4:	e0bffe15 	stw	r2,-8(fp)

  if (!strcmp(conn->uri, mapping.name))
  8032f8:	e0bfff17 	ldw	r2,-4(fp)
  8032fc:	11007604 	addi	r4,r2,472
  803300:	d1600017 	ldw	r5,-32768(gp)
  803304:	08080880 	call	808088 <strcmp>
  803308:	1004c03a 	cmpne	r2,r2,zero
  80330c:	1000121e 	bne	r2,zero,803358 <http_handle_post+0x170>
  {
    send(conn->fd, conn->tx_buffer, (tx_wr_pos - conn->tx_buffer), 0);
  803310:	e0bfff17 	ldw	r2,-4(fp)
  803314:	11000317 	ldw	r4,12(r2)
  803318:	e0bfff17 	ldw	r2,-4(fp)
  80331c:	11401217 	ldw	r5,72(r2)
  803320:	e0fffe17 	ldw	r3,-8(fp)
  803324:	e0bfff17 	ldw	r2,-4(fp)
  803328:	10801217 	ldw	r2,72(r2)
  80332c:	188dc83a 	sub	r6,r3,r2
  803330:	000f883a 	mov	r7,zero
  803334:	082eaec0 	call	82eaec <t_send>
    conn->state = CLOSE;
  803338:	e0ffff17 	ldw	r3,-4(fp)
  80333c:	00800144 	movi	r2,5
  803340:	18800015 	stw	r2,0(r3)
    mapping.func();
  803344:	00802174 	movhi	r2,133
  803348:	10827704 	addi	r2,r2,2524
  80334c:	10800017 	ldw	r2,0(r2)
  803350:	103ee83a 	callr	r2
  803354:	00005c06 	br	8034c8 <http_handle_post+0x2e0>
  }

  else if (!strcmp(conn->uri, sweep_field.name))
  803358:	e0bfff17 	ldw	r2,-4(fp)
  80335c:	11007604 	addi	r4,r2,472
  803360:	d1600217 	ldw	r5,-32760(gp)
  803364:	08080880 	call	808088 <strcmp>
  803368:	1004c03a 	cmpne	r2,r2,zero
  80336c:	1000131e 	bne	r2,zero,8033bc <http_handle_post+0x1d4>
  {
    send(conn->fd, conn->tx_buffer, (tx_wr_pos - conn->tx_buffer), 0);
  803370:	e0bfff17 	ldw	r2,-4(fp)
  803374:	11000317 	ldw	r4,12(r2)
  803378:	e0bfff17 	ldw	r2,-4(fp)
  80337c:	11401217 	ldw	r5,72(r2)
  803380:	e0fffe17 	ldw	r3,-8(fp)
  803384:	e0bfff17 	ldw	r2,-4(fp)
  803388:	10801217 	ldw	r2,72(r2)
  80338c:	188dc83a 	sub	r6,r3,r2
  803390:	000f883a 	mov	r7,zero
  803394:	082eaec0 	call	82eaec <t_send>
    conn->state = CLOSE;
  803398:	e0ffff17 	ldw	r3,-4(fp)
  80339c:	00800144 	movi	r2,5
  8033a0:	18800015 	stw	r2,0(r3)
    sweep_field.func(conn);
  8033a4:	00802174 	movhi	r2,133
  8033a8:	10827904 	addi	r2,r2,2532
  8033ac:	10800017 	ldw	r2,0(r2)
  8033b0:	e13fff17 	ldw	r4,-4(fp)
  8033b4:	103ee83a 	callr	r2
  8033b8:	00004306 	br	8034c8 <http_handle_post+0x2e0>
  }
  
  else if (!strcmp(conn->uri, lcd_field.name))
  8033bc:	e0bfff17 	ldw	r2,-4(fp)
  8033c0:	11007604 	addi	r4,r2,472
  8033c4:	d1600417 	ldw	r5,-32752(gp)
  8033c8:	08080880 	call	808088 <strcmp>
  8033cc:	1004c03a 	cmpne	r2,r2,zero
  8033d0:	1000131e 	bne	r2,zero,803420 <http_handle_post+0x238>
  {
    send(conn->fd, conn->tx_buffer, (tx_wr_pos - conn->tx_buffer), 0);
  8033d4:	e0bfff17 	ldw	r2,-4(fp)
  8033d8:	11000317 	ldw	r4,12(r2)
  8033dc:	e0bfff17 	ldw	r2,-4(fp)
  8033e0:	11401217 	ldw	r5,72(r2)
  8033e4:	e0fffe17 	ldw	r3,-8(fp)
  8033e8:	e0bfff17 	ldw	r2,-4(fp)
  8033ec:	10801217 	ldw	r2,72(r2)
  8033f0:	188dc83a 	sub	r6,r3,r2
  8033f4:	000f883a 	mov	r7,zero
  8033f8:	082eaec0 	call	82eaec <t_send>
    conn->state = CLOSE;
  8033fc:	e0ffff17 	ldw	r3,-4(fp)
  803400:	00800144 	movi	r2,5
  803404:	18800015 	stw	r2,0(r3)
    lcd_field.func(conn);
  803408:	00802174 	movhi	r2,133
  80340c:	10827b04 	addi	r2,r2,2540
  803410:	10800017 	ldw	r2,0(r2)
  803414:	e13fff17 	ldw	r4,-4(fp)
  803418:	103ee83a 	callr	r2
  80341c:	00002a06 	br	8034c8 <http_handle_post+0x2e0>
  }

  else if (!strcmp(conn->uri, upload_field.name))
  803420:	e0bfff17 	ldw	r2,-4(fp)
  803424:	11007604 	addi	r4,r2,472
  803428:	d1600617 	ldw	r5,-32744(gp)
  80342c:	08080880 	call	808088 <strcmp>
  803430:	1004c03a 	cmpne	r2,r2,zero
  803434:	1000191e 	bne	r2,zero,80349c <http_handle_post+0x2b4>
  {
    conn->file_upload = 1;
  803438:	e0ffff17 	ldw	r3,-4(fp)
  80343c:	00800044 	movi	r2,1
  803440:	18800a15 	stw	r2,40(r3)
    upload_buffer->rd_pos = upload_buffer->wr_pos = upload_buffer->buffer;
  803444:	e0bffc17 	ldw	r2,-16(fp)
  803448:	10c00204 	addi	r3,r2,8
  80344c:	e0bffc17 	ldw	r2,-16(fp)
  803450:	10c00015 	stw	r3,0(r2)
  803454:	e0bffc17 	ldw	r2,-16(fp)
  803458:	10c00017 	ldw	r3,0(r2)
  80345c:	e0bffc17 	ldw	r2,-16(fp)
  803460:	10c00115 	stw	r3,4(r2)
    memset(upload_buffer->rd_pos, '\0', conn->content_length );
  803464:	e0bffc17 	ldw	r2,-16(fp)
  803468:	10c00117 	ldw	r3,4(r2)
  80346c:	e0bfff17 	ldw	r2,-4(fp)
  803470:	10800517 	ldw	r2,20(r2)
  803474:	1809883a 	mov	r4,r3
  803478:	100d883a 	mov	r6,r2
  80347c:	000b883a 	mov	r5,zero
  803480:	08074b80 	call	8074b8 <memset>
    upload_field.func(conn);
  803484:	00802174 	movhi	r2,133
  803488:	10827d04 	addi	r2,r2,2548
  80348c:	10800017 	ldw	r2,0(r2)
  803490:	e13fff17 	ldw	r4,-4(fp)
  803494:	103ee83a 	callr	r2
  803498:	00000b06 	br	8034c8 <http_handle_post+0x2e0>
  }
  else if (!strcmp(conn->uri, flash_field.name))
  80349c:	e0bfff17 	ldw	r2,-4(fp)
  8034a0:	11007604 	addi	r4,r2,472
  8034a4:	d1600817 	ldw	r5,-32736(gp)
  8034a8:	08080880 	call	808088 <strcmp>
  8034ac:	1004c03a 	cmpne	r2,r2,zero
  8034b0:	1000051e 	bne	r2,zero,8034c8 <http_handle_post+0x2e0>
  {
    /* Kick off the flash programming. */
    flash_field.func( conn );
  8034b4:	00802174 	movhi	r2,133
  8034b8:	10827f04 	addi	r2,r2,2556
  8034bc:	10800017 	ldw	r2,0(r2)
  8034c0:	e13fff17 	ldw	r4,-4(fp)
  8034c4:	103ee83a 	callr	r2
    /* Close the socket. */
    send(conn->fd, conn->tx_buffer, (tx_wr_pos - conn->tx_buffer), 0);
    reset_field.func();
  }
#endif  
  return ret_code;
  8034c8:	e0bffd17 	ldw	r2,-12(fp)
}
  8034cc:	e037883a 	mov	sp,fp
  8034d0:	dfc00117 	ldw	ra,4(sp)
  8034d4:	df000017 	ldw	fp,0(sp)
  8034d8:	dec00204 	addi	sp,sp,8
  8034dc:	f800283a 	ret

008034e0 <http_prepare_response>:
 * 
 * Service the various HTTP commands, calling the relevant subroutine. 
 * We only handle GET and POST.
 */
int http_prepare_response(http_conn* conn)
{
  8034e0:	defffb04 	addi	sp,sp,-20
  8034e4:	dfc00415 	stw	ra,16(sp)
  8034e8:	df000315 	stw	fp,12(sp)
  8034ec:	df000304 	addi	fp,sp,12
  8034f0:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  8034f4:	e03ffd15 	stw	zero,-12(fp)
  
  switch (conn->action)
  8034f8:	e0bffe17 	ldw	r2,-8(fp)
  8034fc:	10800117 	ldw	r2,4(r2)
  803500:	e0bfff15 	stw	r2,-4(fp)
  803504:	e0ffff17 	ldw	r3,-4(fp)
  803508:	18800060 	cmpeqi	r2,r3,1
  80350c:	1000041e 	bne	r2,zero,803520 <http_prepare_response+0x40>
  803510:	e0ffff17 	ldw	r3,-4(fp)
  803514:	188000a0 	cmpeqi	r2,r3,2
  803518:	1000051e 	bne	r2,zero,803530 <http_prepare_response+0x50>
  80351c:	00000706 	br	80353c <http_prepare_response+0x5c>
  {
    case GET:
    {
      /* Find file from uri */
      ret_code = http_find_file(conn);
  803520:	e13ffe17 	ldw	r4,-8(fp)
  803524:	0802f380 	call	802f38 <http_find_file>
  803528:	e0bffd15 	stw	r2,-12(fp)
      break;
  80352c:	00000306 	br	80353c <http_prepare_response+0x5c>
    }
    case POST:
    {
      /* Handle POSTs. */
      ret_code = http_handle_post(conn);
  803530:	e13ffe17 	ldw	r4,-8(fp)
  803534:	08031e80 	call	8031e8 <http_handle_post>
  803538:	e0bffd15 	stw	r2,-12(fp)
    {
      break;
    }
  } /* switch (conn->action) */
  
  return ret_code;
  80353c:	e0bffd17 	ldw	r2,-12(fp)
}
  803540:	e037883a 	mov	sp,fp
  803544:	dfc00117 	ldw	ra,4(sp)
  803548:	df000017 	ldw	fp,0(sp)
  80354c:	dec00204 	addi	sp,sp,8
  803550:	f800283a 	ret

00803554 <http_handle_receive>:
 * http_handle_receive()
 *
 * Work out what the request we received was, and handle it.
 */
void http_handle_receive(http_conn* conn, int http_instance)
{
  803554:	defffa04 	addi	sp,sp,-24
  803558:	dfc00515 	stw	ra,20(sp)
  80355c:	df000415 	stw	fp,16(sp)
  803560:	df000404 	addi	fp,sp,16
  803564:	e13ffe15 	stw	r4,-8(fp)
  803568:	e17fff15 	stw	r5,-4(fp)
  int data_used, rx_code;
  
  if (conn->state == READY)
  80356c:	e0bffe17 	ldw	r2,-8(fp)
  803570:	10800017 	ldw	r2,0(r2)
  803574:	1004c03a 	cmpne	r2,r2,zero
  803578:	10002c1e 	bne	r2,zero,80362c <http_handle_receive+0xd8>
  {
    rx_code = recv(conn->fd, conn->rx_wr_pos, 
  80357c:	e0bffe17 	ldw	r2,-8(fp)
  803580:	11000317 	ldw	r4,12(r2)
  803584:	e0bffe17 	ldw	r2,-8(fp)
  803588:	11400e17 	ldw	r5,56(r2)
  80358c:	e0bffe17 	ldw	r2,-8(fp)
  803590:	10801117 	ldw	r2,68(r2)
  803594:	1007883a 	mov	r3,r2
  803598:	e0bffe17 	ldw	r2,-8(fp)
  80359c:	10800e17 	ldw	r2,56(r2)
  8035a0:	1885c83a 	sub	r2,r3,r2
  8035a4:	1187ffc4 	addi	r6,r2,8191
  8035a8:	000f883a 	mov	r7,zero
  8035ac:	082e6800 	call	82e680 <t_recv>
  8035b0:	e0bffc15 	stw	r2,-16(fp)
    /* 
     * If a valid data received, take care of buffer pointer & string 
     * termination and move on. Otherwise, we need to return and wait for more
     * data to arrive (until we time out).
     */
    if(rx_code > 0)
  8035b4:	e0bffc17 	ldw	r2,-16(fp)
  8035b8:	10800050 	cmplti	r2,r2,1
  8035bc:	10001b1e 	bne	r2,zero,80362c <http_handle_receive+0xd8>
    {
      /* Increment rx_wr_pos by the amount of data received. */
      conn->rx_wr_pos += rx_code;
  8035c0:	e0bffe17 	ldw	r2,-8(fp)
  8035c4:	10c00e17 	ldw	r3,56(r2)
  8035c8:	e0bffc17 	ldw	r2,-16(fp)
  8035cc:	1887883a 	add	r3,r3,r2
  8035d0:	e0bffe17 	ldw	r2,-8(fp)
  8035d4:	10c00e15 	stw	r3,56(r2)
      /* Place a zero just after the data received to serve as a terminator. */
      *(conn->rx_wr_pos+1) = 0;
  8035d8:	e0bffe17 	ldw	r2,-8(fp)
  8035dc:	10800e17 	ldw	r2,56(r2)
  8035e0:	10800044 	addi	r2,r2,1
  8035e4:	10000005 	stb	zero,0(r2)
      
      if(strstr(conn->rx_buffer, HTTP_END_OF_HEADERS))
  8035e8:	e0bffe17 	ldw	r2,-8(fp)
  8035ec:	11001117 	ldw	r4,68(r2)
  8035f0:	01402174 	movhi	r5,133
  8035f4:	296dbf04 	addi	r5,r5,-18692
  8035f8:	0808b980 	call	808b98 <strstr>
  8035fc:	1005003a 	cmpeq	r2,r2,zero
  803600:	1000031e 	bne	r2,zero,803610 <http_handle_receive+0xbc>
      {
        conn->state = PROCESS;
  803604:	e0fffe17 	ldw	r3,-8(fp)
  803608:	00800044 	movi	r2,1
  80360c:	18800015 	stw	r2,0(r3)
      }
      /* If the connection is a file upload, skip right to DATA.*/
      if(conn->file_upload == 1)
  803610:	e0bffe17 	ldw	r2,-8(fp)
  803614:	10800a17 	ldw	r2,40(r2)
  803618:	10800058 	cmpnei	r2,r2,1
  80361c:	1000031e 	bne	r2,zero,80362c <http_handle_receive+0xd8>
      {
        conn->state = DATA;
  803620:	e0fffe17 	ldw	r3,-8(fp)
  803624:	00800084 	movi	r2,2
  803628:	18800015 	stw	r2,0(r3)
      }
    }
  }
  
  if(conn->state == PROCESS)
  80362c:	e0bffe17 	ldw	r2,-8(fp)
  803630:	10800017 	ldw	r2,0(r2)
  803634:	10800058 	cmpnei	r2,r2,1
  803638:	1000a31e 	bne	r2,zero,8038c8 <http_handle_receive+0x374>
  80363c:	00802174 	movhi	r2,133
  803640:	1082e604 	addi	r2,r2,2968
  803644:	10800017 	ldw	r2,0(r2)
  803648:	1007883a 	mov	r3,r2
  {
    /* 
     * If we (think) we have valid headers, keep the connection alive a bit
     * longer.
     */
    conn->activity_time = alt_nticks();
  80364c:	e0bffe17 	ldw	r2,-8(fp)
  803650:	10c00c15 	stw	r3,48(r2)
    /* 
     * Attempt to process the fundamentals of the HTTP request. We may 
     * error out and reset if the request wasn't complete, or something
     * was asked from us that we can't handle.
     */
    if (http_process_request(conn))
  803654:	e13ffe17 	ldw	r4,-8(fp)
  803658:	08023580 	call	802358 <http_process_request>
  80365c:	1005003a 	cmpeq	r2,r2,zero
  803660:	1000531e 	bne	r2,zero,8037b0 <http_handle_receive+0x25c>
    {
      fprintf(stderr, "[http_handle_receive] http_process_request failed\n");
  803664:	00802174 	movhi	r2,133
  803668:	10828104 	addi	r2,r2,2564
  80366c:	10800017 	ldw	r2,0(r2)
  803670:	11c00317 	ldw	r7,12(r2)
  803674:	01002174 	movhi	r4,133
  803678:	212dc104 	addi	r4,r4,-18684
  80367c:	01400044 	movi	r5,1
  803680:	01800c84 	movi	r6,50
  803684:	0806a240 	call	806a24 <fwrite>
      conn->state = RESET;
  803688:	e0fffe17 	ldw	r3,-8(fp)
  80368c:	00800104 	movi	r2,4
  803690:	18800015 	stw	r2,0(r3)
      http_manage_connection(conn, http_instance);
  803694:	e13ffe17 	ldw	r4,-8(fp)
  803698:	e17fff17 	ldw	r5,-4(fp)
  80369c:	0801cb40 	call	801cb4 <http_manage_connection>
     * done, send some headers of our own back to let the client know 
     * what's happening. Also, once all in-coming headers have been parsed
     * we can manage our RX buffer to prepare for the next in-coming 
     * connection.
     */
    while(conn->state == PROCESS)
  8036a0:	00004306 	br	8037b0 <http_handle_receive+0x25c>
    {
      if(http_read_line(conn))
  8036a4:	e13ffe17 	ldw	r4,-8(fp)
  8036a8:	0801f880 	call	801f88 <http_read_line>
  8036ac:	1005003a 	cmpeq	r2,r2,zero
  8036b0:	1000101e 	bne	r2,zero,8036f4 <http_handle_receive+0x1a0>
      {
        fprintf(stderr, "[http_handle_receive] error reading headers\n");
  8036b4:	00802174 	movhi	r2,133
  8036b8:	10828104 	addi	r2,r2,2564
  8036bc:	10800017 	ldw	r2,0(r2)
  8036c0:	11c00317 	ldw	r7,12(r2)
  8036c4:	01002174 	movhi	r4,133
  8036c8:	212dce04 	addi	r4,r4,-18632
  8036cc:	01400044 	movi	r5,1
  8036d0:	01800b04 	movi	r6,44
  8036d4:	0806a240 	call	806a24 <fwrite>
        conn->state = RESET;
  8036d8:	e0fffe17 	ldw	r3,-8(fp)
  8036dc:	00800104 	movi	r2,4
  8036e0:	18800015 	stw	r2,0(r3)
        http_manage_connection(conn, http_instance);
  8036e4:	e13ffe17 	ldw	r4,-8(fp)
  8036e8:	e17fff17 	ldw	r5,-4(fp)
  8036ec:	0801cb40 	call	801cb4 <http_manage_connection>
        break;
  8036f0:	00003306 	br	8037c0 <http_handle_receive+0x26c>
      }
      if(http_process_headers(conn))
  8036f4:	e13ffe17 	ldw	r4,-8(fp)
  8036f8:	08021240 	call	802124 <http_process_headers>
  8036fc:	1005003a 	cmpeq	r2,r2,zero
  803700:	10002b1e 	bne	r2,zero,8037b0 <http_handle_receive+0x25c>
      {
        if( (conn->rx_rd_pos = strstr(conn->rx_rd_pos, HTTP_CR_LF)) )
  803704:	e0bffe17 	ldw	r2,-8(fp)
  803708:	11000d17 	ldw	r4,52(r2)
  80370c:	01402174 	movhi	r5,133
  803710:	296dda04 	addi	r5,r5,-18584
  803714:	0808b980 	call	808b98 <strstr>
  803718:	1007883a 	mov	r3,r2
  80371c:	e0bffe17 	ldw	r2,-8(fp)
  803720:	10c00d15 	stw	r3,52(r2)
  803724:	e0bffe17 	ldw	r2,-8(fp)
  803728:	10800d17 	ldw	r2,52(r2)
  80372c:	1005003a 	cmpeq	r2,r2,zero
  803730:	10000f1e 	bne	r2,zero,803770 <http_handle_receive+0x21c>
        {
          conn->rx_rd_pos += 2;
  803734:	e0bffe17 	ldw	r2,-8(fp)
  803738:	10800d17 	ldw	r2,52(r2)
  80373c:	10c00084 	addi	r3,r2,2
  803740:	e0bffe17 	ldw	r2,-8(fp)
  803744:	10c00d15 	stw	r3,52(r2)
          conn->state = DATA;
  803748:	e0fffe17 	ldw	r3,-8(fp)
  80374c:	00800084 	movi	r2,2
  803750:	18800015 	stw	r2,0(r3)
  803754:	00802174 	movhi	r2,133
  803758:	1082e604 	addi	r2,r2,2968
  80375c:	10800017 	ldw	r2,0(r2)
  803760:	1007883a 	mov	r3,r2
          conn->activity_time = alt_nticks();
  803764:	e0bffe17 	ldw	r2,-8(fp)
  803768:	10c00c15 	stw	r3,48(r2)
  80376c:	00001006 	br	8037b0 <http_handle_receive+0x25c>
        }
        else
        {
          fprintf(stderr, "[http_handle_receive] Can't find end of headers!\n");
  803770:	00802174 	movhi	r2,133
  803774:	10828104 	addi	r2,r2,2564
  803778:	10800017 	ldw	r2,0(r2)
  80377c:	11c00317 	ldw	r7,12(r2)
  803780:	01002174 	movhi	r4,133
  803784:	212ddb04 	addi	r4,r4,-18580
  803788:	01400044 	movi	r5,1
  80378c:	01800c44 	movi	r6,49
  803790:	0806a240 	call	806a24 <fwrite>
          conn->state = RESET;
  803794:	e0fffe17 	ldw	r3,-8(fp)
  803798:	00800104 	movi	r2,4
  80379c:	18800015 	stw	r2,0(r3)
          http_manage_connection(conn, http_instance);
  8037a0:	e13ffe17 	ldw	r4,-8(fp)
  8037a4:	e17fff17 	ldw	r5,-4(fp)
  8037a8:	0801cb40 	call	801cb4 <http_manage_connection>
          break;
  8037ac:	00000406 	br	8037c0 <http_handle_receive+0x26c>
     * done, send some headers of our own back to let the client know 
     * what's happening. Also, once all in-coming headers have been parsed
     * we can manage our RX buffer to prepare for the next in-coming 
     * connection.
     */
    while(conn->state == PROCESS)
  8037b0:	e0bffe17 	ldw	r2,-8(fp)
  8037b4:	10800017 	ldw	r2,0(r2)
  8037b8:	10800060 	cmpeqi	r2,r2,1
  8037bc:	103fb91e 	bne	r2,zero,8036a4 <http_handle_receive+0x150>
          break;
        }
      } 
    } /* while(conn->state == PROCESS) */
    
    if( http_prepare_response(conn) )
  8037c0:	e13ffe17 	ldw	r4,-8(fp)
  8037c4:	08034e00 	call	8034e0 <http_prepare_response>
  8037c8:	1005003a 	cmpeq	r2,r2,zero
  8037cc:	10000f1e 	bne	r2,zero,80380c <http_handle_receive+0x2b8>
    {
      conn->state = RESET;
  8037d0:	e0fffe17 	ldw	r3,-8(fp)
  8037d4:	00800104 	movi	r2,4
  8037d8:	18800015 	stw	r2,0(r3)
      fprintf(stderr, "[http_handle_receive] Error preparing response\n");
  8037dc:	00802174 	movhi	r2,133
  8037e0:	10828104 	addi	r2,r2,2564
  8037e4:	10800017 	ldw	r2,0(r2)
  8037e8:	11c00317 	ldw	r7,12(r2)
  8037ec:	01002174 	movhi	r4,133
  8037f0:	212de804 	addi	r4,r4,-18528
  8037f4:	01400044 	movi	r5,1
  8037f8:	01800bc4 	movi	r6,47
  8037fc:	0806a240 	call	806a24 <fwrite>
      http_manage_connection(conn, http_instance);
  803800:	e13ffe17 	ldw	r4,-8(fp)
  803804:	e17fff17 	ldw	r5,-4(fp)
  803808:	0801cb40 	call	801cb4 <http_manage_connection>
    /* 
     * Manage RX Buffer: Slide any un-read data in our input buffer 
     * down over previously-read data that can now be overwritten, and 
     * zero-out any bytes in question at the top of our new un-read space. 
     */
    if(conn->rx_rd_pos > (conn->rx_buffer + HTTP_RX_BUF_SIZE))
  80380c:	e0bffe17 	ldw	r2,-8(fp)
  803810:	10c00d17 	ldw	r3,52(r2)
  803814:	e0bffe17 	ldw	r2,-8(fp)
  803818:	10801117 	ldw	r2,68(r2)
  80381c:	10880004 	addi	r2,r2,8192
  803820:	10c0052e 	bgeu	r2,r3,803838 <http_handle_receive+0x2e4>
    {
      conn->rx_rd_pos = conn->rx_buffer + HTTP_RX_BUF_SIZE;
  803824:	e0bffe17 	ldw	r2,-8(fp)
  803828:	10801117 	ldw	r2,68(r2)
  80382c:	10c80004 	addi	r3,r2,8192
  803830:	e0bffe17 	ldw	r2,-8(fp)
  803834:	10c00d15 	stw	r3,52(r2)
    }
        
    data_used = conn->rx_rd_pos - conn->rx_buffer;
  803838:	e0bffe17 	ldw	r2,-8(fp)
  80383c:	10800d17 	ldw	r2,52(r2)
  803840:	1007883a 	mov	r3,r2
  803844:	e0bffe17 	ldw	r2,-8(fp)
  803848:	10801117 	ldw	r2,68(r2)
  80384c:	1885c83a 	sub	r2,r3,r2
  803850:	e0bffd15 	stw	r2,-12(fp)
    memmove(conn->rx_buffer,conn->rx_rd_pos,conn->rx_wr_pos-conn->rx_rd_pos);
  803854:	e0bffe17 	ldw	r2,-8(fp)
  803858:	11001117 	ldw	r4,68(r2)
  80385c:	e0bffe17 	ldw	r2,-8(fp)
  803860:	11400d17 	ldw	r5,52(r2)
  803864:	e0bffe17 	ldw	r2,-8(fp)
  803868:	10800e17 	ldw	r2,56(r2)
  80386c:	1007883a 	mov	r3,r2
  803870:	e0bffe17 	ldw	r2,-8(fp)
  803874:	10800d17 	ldw	r2,52(r2)
  803878:	1885c83a 	sub	r2,r3,r2
  80387c:	100d883a 	mov	r6,r2
  803880:	08073d80 	call	8073d8 <memmove>
    conn->rx_rd_pos = conn->rx_buffer;
  803884:	e0bffe17 	ldw	r2,-8(fp)
  803888:	10c01117 	ldw	r3,68(r2)
  80388c:	e0bffe17 	ldw	r2,-8(fp)
  803890:	10c00d15 	stw	r3,52(r2)
    conn->rx_wr_pos -= data_used;
  803894:	e0bffe17 	ldw	r2,-8(fp)
  803898:	10c00e17 	ldw	r3,56(r2)
  80389c:	e0bffd17 	ldw	r2,-12(fp)
  8038a0:	1887c83a 	sub	r3,r3,r2
  8038a4:	e0bffe17 	ldw	r2,-8(fp)
  8038a8:	10c00e15 	stw	r3,56(r2)
    memset(conn->rx_wr_pos, 0, data_used);
  8038ac:	e0bffe17 	ldw	r2,-8(fp)
  8038b0:	10800e17 	ldw	r2,56(r2)
  8038b4:	e0fffd17 	ldw	r3,-12(fp)
  8038b8:	1009883a 	mov	r4,r2
  8038bc:	180d883a 	mov	r6,r3
  8038c0:	000b883a 	mov	r5,zero
  8038c4:	08074b80 	call	8074b8 <memset>
   }
   
  if (conn->state == DATA && conn->file_upload == 1 )
  8038c8:	e0bffe17 	ldw	r2,-8(fp)
  8038cc:	10800017 	ldw	r2,0(r2)
  8038d0:	10800098 	cmpnei	r2,r2,2
  8038d4:	1000091e 	bne	r2,zero,8038fc <http_handle_receive+0x3a8>
  8038d8:	e0bffe17 	ldw	r2,-8(fp)
  8038dc:	10800a17 	ldw	r2,40(r2)
  8038e0:	10800058 	cmpnei	r2,r2,1
  8038e4:	1000051e 	bne	r2,zero,8038fc <http_handle_receive+0x3a8>
  {
    /* Jump to the file_upload() function....process more received data. */
    upload_field.func(conn);
  8038e8:	00802174 	movhi	r2,133
  8038ec:	10827d04 	addi	r2,r2,2548
  8038f0:	10800017 	ldw	r2,0(r2)
  8038f4:	e13ffe17 	ldw	r4,-8(fp)
  8038f8:	103ee83a 	callr	r2
  }
}
  8038fc:	e037883a 	mov	sp,fp
  803900:	dfc00117 	ldw	ra,4(sp)
  803904:	df000017 	ldw	fp,0(sp)
  803908:	dec00204 	addi	sp,sp,8
  80390c:	f800283a 	ret

00803910 <http_handle_transmit>:
 * will be called from the thread's main loop when ever the socket is in 
 * the 'DATA' state and the socket is marked as available for writing (free
 * buffer space). 
 */
void http_handle_transmit(http_conn* conn, int http_instance)
{
  803910:	defffc04 	addi	sp,sp,-16
  803914:	dfc00315 	stw	ra,12(sp)
  803918:	df000215 	stw	fp,8(sp)
  80391c:	df000204 	addi	fp,sp,8
  803920:	e13ffe15 	stw	r4,-8(fp)
  803924:	e17fff15 	stw	r5,-4(fp)
  if( http_send_file_chunk(conn) )
  803928:	e13ffe17 	ldw	r4,-8(fp)
  80392c:	080264c0 	call	80264c <http_send_file_chunk>
  803930:	1005003a 	cmpeq	r2,r2,zero
  803934:	1000091e 	bne	r2,zero,80395c <http_handle_transmit+0x4c>
  {
    fprintf(stderr, "[http_handle_transmit]: Send file chunk failed\n");
  803938:	00802174 	movhi	r2,133
  80393c:	10828104 	addi	r2,r2,2564
  803940:	10800017 	ldw	r2,0(r2)
  803944:	11c00317 	ldw	r7,12(r2)
  803948:	01002174 	movhi	r4,133
  80394c:	212df404 	addi	r4,r4,-18480
  803950:	01400044 	movi	r5,1
  803954:	01800bc4 	movi	r6,47
  803958:	0806a240 	call	806a24 <fwrite>
  }
}
  80395c:	e037883a 	mov	sp,fp
  803960:	dfc00117 	ldw	ra,4(sp)
  803964:	df000017 	ldw	fp,0(sp)
  803968:	dec00204 	addi	sp,sp,8
  80396c:	f800283a 	ret

00803970 <WSTask>:
 * reading or writing. This, in conjunction with the use of non-blocking 
 * send() and recv() calls and sending responses broken up into chunks lets
 * us handle multiple active HTTP requests.
 */
void WSTask()
{
  803970:	deff7204 	addi	sp,sp,-568
  803974:	dfc08d15 	stw	ra,564(sp)
  803978:	df008c15 	stw	fp,560(sp)
  80397c:	df008c04 	addi	fp,sp,560
   * The socket() call creates an endpoint for TCP of UDP communication. It 
   * returns a descriptor (similar to a file descriptor) that we call fd_listen,
   * or, "the socket we're listening on for connection requests" in our web
   * server example.
   */ 
  if ((fd_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
  803980:	01000084 	movi	r4,2
  803984:	01400044 	movi	r5,1
  803988:	000d883a 	mov	r6,zero
  80398c:	082d84c0 	call	82d84c <t_socket>
  803990:	e0bf7615 	stw	r2,-552(fp)
  803994:	e0bf7617 	ldw	r2,-552(fp)
  803998:	1004403a 	cmpge	r2,r2,zero
  80399c:	1000031e 	bne	r2,zero,8039ac <WSTask+0x3c>
  {
    die_with_error("[WSTask] Listening socket creation failed");
  8039a0:	01002174 	movhi	r4,133
  8039a4:	212e0004 	addi	r4,r4,-18432
  8039a8:	0803ca80 	call	803ca8 <die_with_error>
   * port and incoming address. In this case we're binding to HTTP_PORT and to
   * INADDR_ANY address (allowing anyone to connect to us. Bind may fail for 
   * various reasons, but the most common is that some other socket is bound to
   * the port we're requesting. 
   */ 
  addr.sin_family = AF_INET;
  8039ac:	00800084 	movi	r2,2
  8039b0:	e0bf780d 	sth	r2,-544(fp)
  addr.sin_port = htons(HTTP_PORT);
  8039b4:	00940004 	movi	r2,20480
  8039b8:	e0bf788d 	sth	r2,-542(fp)
  addr.sin_addr.s_addr = INADDR_ANY;
  8039bc:	e03f7915 	stw	zero,-540(fp)
    
  if ((bind(fd_listen,(struct sockaddr *)&addr,sizeof(addr))) < 0)
  8039c0:	e17f7804 	addi	r5,fp,-544
  8039c4:	e13f7617 	ldw	r4,-552(fp)
  8039c8:	01800404 	movi	r6,16
  8039cc:	082d8dc0 	call	82d8dc <t_bind>
  8039d0:	1004403a 	cmpge	r2,r2,zero
  8039d4:	1000031e 	bne	r2,zero,8039e4 <WSTask+0x74>
  {
    die_with_error("[WSTask] Bind failed");
  8039d8:	01002174 	movhi	r4,133
  8039dc:	212e0b04 	addi	r4,r4,-18388
  8039e0:	0803ca80 	call	803ca8 <die_with_error>
   * Sockets primer, continued...
   * The listen socket is a socket which is waiting for incoming connections.
   * This call to listen will block (i.e. not return) until someone tries to 
   * connect to this port.
   */ 
  if ((listen(fd_listen,1)) < 0)
  8039e4:	e13f7617 	ldw	r4,-552(fp)
  8039e8:	01400044 	movi	r5,1
  8039ec:	082da580 	call	82da58 <t_listen>
  8039f0:	1004403a 	cmpge	r2,r2,zero
  8039f4:	1000031e 	bne	r2,zero,803a04 <WSTask+0x94>
  {
    die_with_error("[WSTask] Listen failed");
  8039f8:	01002174 	movhi	r4,133
  8039fc:	212e1104 	addi	r4,r4,-18364
  803a00:	0803ca80 	call	803ca8 <die_with_error>

  /* 
   * At this point we have successfully created a socket which is listening
   * on HTTP_PORT for connection requests from any remote address.
   */
  for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  803a04:	e03f7715 	stw	zero,-548(fp)
  803a08:	00000b06 	br	803a38 <WSTask+0xc8>
  {
    http_reset_connection(&conn[i], i);
  803a0c:	e0bf7717 	ldw	r2,-548(fp)
  803a10:	10887624 	muli	r2,r2,8664
  803a14:	1007883a 	mov	r3,r2
  803a18:	00802174 	movhi	r2,133
  803a1c:	10835804 	addi	r2,r2,3424
  803a20:	1889883a 	add	r4,r3,r2
  803a24:	e17f7717 	ldw	r5,-548(fp)
  803a28:	0801bc40 	call	801bc4 <http_reset_connection>

  /* 
   * At this point we have successfully created a socket which is listening
   * on HTTP_PORT for connection requests from any remote address.
   */
  for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  803a2c:	e0bf7717 	ldw	r2,-548(fp)
  803a30:	10800044 	addi	r2,r2,1
  803a34:	e0bf7715 	stw	r2,-548(fp)
  803a38:	e0bf7717 	ldw	r2,-548(fp)
  803a3c:	10800190 	cmplti	r2,r2,6
  803a40:	103ff21e 	bne	r2,zero,803a0c <WSTask+0x9c>
     * 
     *   FD_ZERO  - Zero's out the sockets we're interested in
     *   FD_SET   - Adds a socket to those we're interested in
     *   FD_ISSET - Tests whether the chosen socket is set 
     */
    FD_ZERO(&readfds);
  803a44:	e03f7e15 	stw	zero,-520(fp)
    FD_ZERO(&writefds);
  803a48:	e03fbf15 	stw	zero,-260(fp)
    FD_SET(fd_listen, &readfds);
  803a4c:	e17f7e04 	addi	r5,fp,-520
  803a50:	e13f7617 	ldw	r4,-552(fp)
  803a54:	0832e380 	call	832e38 <ifd_set>
    
    max_socket = fd_listen+1;
  803a58:	e0bf7617 	ldw	r2,-552(fp)
  803a5c:	10800044 	addi	r2,r2,1
  803a60:	e0bf7515 	stw	r2,-556(fp)
    
    for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  803a64:	e03f7715 	stw	zero,-548(fp)
  803a68:	00003806 	br	803b4c <WSTask+0x1dc>
    {
      if (conn[i].fd != -1)
  803a6c:	e0bf7717 	ldw	r2,-548(fp)
  803a70:	00c02174 	movhi	r3,133
  803a74:	18c35804 	addi	r3,r3,3424
  803a78:	10887624 	muli	r2,r2,8664
  803a7c:	10c5883a 	add	r2,r2,r3
  803a80:	10800304 	addi	r2,r2,12
  803a84:	10800017 	ldw	r2,0(r2)
  803a88:	10bfffe0 	cmpeqi	r2,r2,-1
  803a8c:	10002c1e 	bne	r2,zero,803b40 <WSTask+0x1d0>
      {
        /* We're interested in reading any of our active sockets */
        FD_SET(conn[i].fd, &readfds);
  803a90:	e0bf7717 	ldw	r2,-548(fp)
  803a94:	00c02174 	movhi	r3,133
  803a98:	18c35804 	addi	r3,r3,3424
  803a9c:	10887624 	muli	r2,r2,8664
  803aa0:	10c5883a 	add	r2,r2,r3
  803aa4:	10800304 	addi	r2,r2,12
  803aa8:	11000017 	ldw	r4,0(r2)
  803aac:	e17f7e04 	addi	r5,fp,-520
  803ab0:	0832e380 	call	832e38 <ifd_set>
        
        /* 
         * We're interested in writing to any of our active sockets in the DATA
         * state
         */
        if(conn[i].state == DATA)
  803ab4:	e0bf7717 	ldw	r2,-548(fp)
  803ab8:	00c02174 	movhi	r3,133
  803abc:	18c35804 	addi	r3,r3,3424
  803ac0:	10887624 	muli	r2,r2,8664
  803ac4:	10c5883a 	add	r2,r2,r3
  803ac8:	10800017 	ldw	r2,0(r2)
  803acc:	10800098 	cmpnei	r2,r2,2
  803ad0:	1000091e 	bne	r2,zero,803af8 <WSTask+0x188>
        {
          FD_SET(conn[i].fd, &writefds);
  803ad4:	e0bf7717 	ldw	r2,-548(fp)
  803ad8:	00c02174 	movhi	r3,133
  803adc:	18c35804 	addi	r3,r3,3424
  803ae0:	10887624 	muli	r2,r2,8664
  803ae4:	10c5883a 	add	r2,r2,r3
  803ae8:	10800304 	addi	r2,r2,12
  803aec:	11000017 	ldw	r4,0(r2)
  803af0:	e17fbf04 	addi	r5,fp,-260
  803af4:	0832e380 	call	832e38 <ifd_set>
        /*
         * select() must be called with the maximum number of sockets to look 
         * through. This will be the largest socket number + 1 (since we start
         * at zero).
         */
        if (max_socket <= conn[i].fd)
  803af8:	e0bf7717 	ldw	r2,-548(fp)
  803afc:	00c02174 	movhi	r3,133
  803b00:	18c35804 	addi	r3,r3,3424
  803b04:	10887624 	muli	r2,r2,8664
  803b08:	10c5883a 	add	r2,r2,r3
  803b0c:	10800304 	addi	r2,r2,12
  803b10:	10c00017 	ldw	r3,0(r2)
  803b14:	e0bf7517 	ldw	r2,-556(fp)
  803b18:	18800916 	blt	r3,r2,803b40 <WSTask+0x1d0>
        {
          max_socket = conn[i].fd+1;
  803b1c:	e0bf7717 	ldw	r2,-548(fp)
  803b20:	00c02174 	movhi	r3,133
  803b24:	18c35804 	addi	r3,r3,3424
  803b28:	10887624 	muli	r2,r2,8664
  803b2c:	10c5883a 	add	r2,r2,r3
  803b30:	10800304 	addi	r2,r2,12
  803b34:	10800017 	ldw	r2,0(r2)
  803b38:	10800044 	addi	r2,r2,1
  803b3c:	e0bf7515 	stw	r2,-556(fp)
    FD_ZERO(&writefds);
    FD_SET(fd_listen, &readfds);
    
    max_socket = fd_listen+1;
    
    for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  803b40:	e0bf7717 	ldw	r2,-548(fp)
  803b44:	10800044 	addi	r2,r2,1
  803b48:	e0bf7715 	stw	r2,-548(fp)
  803b4c:	e0bf7717 	ldw	r2,-548(fp)
  803b50:	10800190 	cmplti	r2,r2,6
  803b54:	103fc51e 	bne	r2,zero,803a6c <WSTask+0xfc>

    /* 
     * Set timeout value for select. This must be reset for each select()
     * call.
     */
    select_timeout.tv_sec = 0;
  803b58:	e03f7c15 	stw	zero,-528(fp)
    select_timeout.tv_usec = 500000;
  803b5c:	00800234 	movhi	r2,8
  803b60:	10a84804 	addi	r2,r2,-24288
  803b64:	e0bf7d15 	stw	r2,-524(fp)

    select(max_socket, &readfds, &writefds, NULL, &select_timeout);
  803b68:	e17f7e04 	addi	r5,fp,-520
  803b6c:	e1bfbf04 	addi	r6,fp,-260
  803b70:	e0bf7c04 	addi	r2,fp,-528
  803b74:	d8800015 	stw	r2,0(sp)
  803b78:	e13f7517 	ldw	r4,-556(fp)
  803b7c:	000f883a 	mov	r7,zero
  803b80:	08253300 	call	825330 <bsd_select>
     * If fd_listen (the listening socket we originally created in this thread
     * is "set" in readfds, then we have an incoming connection request. 
     * We'll call a routine to explicitly accept or deny the incoming connection 
     * request.
     */
    if (FD_ISSET(fd_listen, &readfds))
  803b84:	e17f7e04 	addi	r5,fp,-520
  803b88:	e13f7617 	ldw	r4,-552(fp)
  803b8c:	0832eac0 	call	832eac <ifd_isset>
  803b90:	1005003a 	cmpeq	r2,r2,zero
  803b94:	1000041e 	bne	r2,zero,803ba8 <WSTask+0x238>
    {
      http_handle_accept(fd_listen, conn);
  803b98:	e13f7617 	ldw	r4,-552(fp)
  803b9c:	01402174 	movhi	r5,133
  803ba0:	29435804 	addi	r5,r5,3424
  803ba4:	0801e600 	call	801e60 <http_handle_accept>
     * in conn[i].fd. Therefore if conn[i].fd is set in readfs, we have
     * incoming data for our HTTP server, and we call our receive routine
     * to process it. Likewise, if conn[i].fd is set in writefds, we have
     * an open connection that is *capable* of being written to.
     */
    for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  803ba8:	e03f7715 	stw	zero,-548(fp)
  803bac:	00003a06 	br	803c98 <WSTask+0x328>
    {
      if (conn[i].fd != -1)
  803bb0:	e0bf7717 	ldw	r2,-548(fp)
  803bb4:	00c02174 	movhi	r3,133
  803bb8:	18c35804 	addi	r3,r3,3424
  803bbc:	10887624 	muli	r2,r2,8664
  803bc0:	10c5883a 	add	r2,r2,r3
  803bc4:	10800304 	addi	r2,r2,12
  803bc8:	10800017 	ldw	r2,0(r2)
  803bcc:	10bfffe0 	cmpeqi	r2,r2,-1
  803bd0:	10002e1e 	bne	r2,zero,803c8c <WSTask+0x31c>
      { 
        if(FD_ISSET(conn[i].fd,&readfds))
  803bd4:	e0bf7717 	ldw	r2,-548(fp)
  803bd8:	00c02174 	movhi	r3,133
  803bdc:	18c35804 	addi	r3,r3,3424
  803be0:	10887624 	muli	r2,r2,8664
  803be4:	10c5883a 	add	r2,r2,r3
  803be8:	10800304 	addi	r2,r2,12
  803bec:	11000017 	ldw	r4,0(r2)
  803bf0:	e17f7e04 	addi	r5,fp,-520
  803bf4:	0832eac0 	call	832eac <ifd_isset>
  803bf8:	1005003a 	cmpeq	r2,r2,zero
  803bfc:	1000081e 	bne	r2,zero,803c20 <WSTask+0x2b0>
        {
          http_handle_receive(&conn[i], i);
  803c00:	e0bf7717 	ldw	r2,-548(fp)
  803c04:	10887624 	muli	r2,r2,8664
  803c08:	1007883a 	mov	r3,r2
  803c0c:	00802174 	movhi	r2,133
  803c10:	10835804 	addi	r2,r2,3424
  803c14:	1889883a 	add	r4,r3,r2
  803c18:	e17f7717 	ldw	r5,-548(fp)
  803c1c:	08035540 	call	803554 <http_handle_receive>
        }
        
        if(FD_ISSET(conn[i].fd,&writefds))
  803c20:	e0bf7717 	ldw	r2,-548(fp)
  803c24:	00c02174 	movhi	r3,133
  803c28:	18c35804 	addi	r3,r3,3424
  803c2c:	10887624 	muli	r2,r2,8664
  803c30:	10c5883a 	add	r2,r2,r3
  803c34:	10800304 	addi	r2,r2,12
  803c38:	11000017 	ldw	r4,0(r2)
  803c3c:	e17fbf04 	addi	r5,fp,-260
  803c40:	0832eac0 	call	832eac <ifd_isset>
  803c44:	1005003a 	cmpeq	r2,r2,zero
  803c48:	1000081e 	bne	r2,zero,803c6c <WSTask+0x2fc>
        {
          http_handle_transmit(&conn[i], i);
  803c4c:	e0bf7717 	ldw	r2,-548(fp)
  803c50:	10887624 	muli	r2,r2,8664
  803c54:	1007883a 	mov	r3,r2
  803c58:	00802174 	movhi	r2,133
  803c5c:	10835804 	addi	r2,r2,3424
  803c60:	1889883a 	add	r4,r3,r2
  803c64:	e17f7717 	ldw	r5,-548(fp)
  803c68:	08039100 	call	803910 <http_handle_transmit>
        }
        
        http_manage_connection(&conn[i], i);
  803c6c:	e0bf7717 	ldw	r2,-548(fp)
  803c70:	10887624 	muli	r2,r2,8664
  803c74:	1007883a 	mov	r3,r2
  803c78:	00802174 	movhi	r2,133
  803c7c:	10835804 	addi	r2,r2,3424
  803c80:	1889883a 	add	r4,r3,r2
  803c84:	e17f7717 	ldw	r5,-548(fp)
  803c88:	0801cb40 	call	801cb4 <http_manage_connection>
     * in conn[i].fd. Therefore if conn[i].fd is set in readfs, we have
     * incoming data for our HTTP server, and we call our receive routine
     * to process it. Likewise, if conn[i].fd is set in writefds, we have
     * an open connection that is *capable* of being written to.
     */
    for(i=0; i<HTTP_NUM_CONNECTIONS; i++)
  803c8c:	e0bf7717 	ldw	r2,-548(fp)
  803c90:	10800044 	addi	r2,r2,1
  803c94:	e0bf7715 	stw	r2,-548(fp)
  803c98:	e0bf7717 	ldw	r2,-548(fp)
  803c9c:	10800190 	cmplti	r2,r2,6
  803ca0:	103fc31e 	bne	r2,zero,803bb0 <WSTask+0x240>
        }
        
        http_manage_connection(&conn[i], i);
      }
    }  
  } /* while(1) */
  803ca4:	003f6706 	br	803a44 <WSTask+0xd4>

00803ca8 <die_with_error>:
 * 
 * This routine is just called when a blocking error occurs with the example
 * design. It deletes the current task.
 */
void die_with_error(char err_msg[DIE_WITH_ERROR_BUFFER])
{
  803ca8:	defffd04 	addi	sp,sp,-12
  803cac:	dfc00215 	stw	ra,8(sp)
  803cb0:	df000115 	stw	fp,4(sp)
  803cb4:	df000104 	addi	fp,sp,4
  803cb8:	e13fff15 	stw	r4,-4(fp)
  printf("\n%s\n", err_msg);
  803cbc:	01002174 	movhi	r4,133
  803cc0:	212e1704 	addi	r4,r4,-18340
  803cc4:	e17fff17 	ldw	r5,-4(fp)
  803cc8:	08076480 	call	807648 <printf>
  OSTaskDel(OS_PRIO_SELF);
  803ccc:	01003fc4 	movi	r4,255
  803cd0:	081eb880 	call	81eb88 <OSTaskDel>
  
  while(1);
  803cd4:	003fff06 	br	803cd4 <die_with_error+0x2c>

00803cd8 <get_serial_number>:
*
* Prompt user to enter 9-digit serial number. 
*
*/
alt_u32 get_serial_number (void)
{
  803cd8:	defff904 	addi	sp,sp,-28
  803cdc:	dfc00615 	stw	ra,24(sp)
  803ce0:	df000515 	stw	fp,20(sp)
  803ce4:	df000504 	addi	fp,sp,20
    alt_u32 ser_num = 0;
  803ce8:	e03ffc15 	stw	zero,-16(fp)
    char serial_number[9] = "040800017";
  803cec:	00c02174 	movhi	r3,133
  803cf0:	18ee5604 	addi	r3,r3,-18088
  803cf4:	18800017 	ldw	r2,0(r3)
  803cf8:	e0bffd15 	stw	r2,-12(fp)
  803cfc:	18800117 	ldw	r2,4(r3)
  803d00:	e0bffe15 	stw	r2,-8(fp)
  803d04:	18800203 	ldbu	r2,8(r3)
  803d08:	e0bfff05 	stb	r2,-4(fp)
    int i = 0;
  803d0c:	e03ffb15 	stw	zero,-20(fp)
    
    while(!ser_num)
  803d10:	00003606 	br	803dec <get_serial_number+0x114>
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
  803d14:	01002174 	movhi	r4,133
  803d18:	212e1904 	addi	r4,r4,-18332
  803d1c:	08077600 	call	807760 <puts>
        printf("label under your Nios dev. board. The first 3 digits of the \n");
  803d20:	01002174 	movhi	r4,133
  803d24:	212e2904 	addi	r4,r4,-18268
  803d28:	08077600 	call	807760 <puts>
        printf("label are ASJ and the serial number follows this.\n -->");
  803d2c:	01002174 	movhi	r4,133
  803d30:	212e3904 	addi	r4,r4,-18204
  803d34:	08076480 	call	807648 <printf>
                
        for(i=0; i<9; i++)
  803d38:	e03ffb15 	stw	zero,-20(fp)
  803d3c:	00002806 	br	803de0 <get_serial_number+0x108>
        {
            if (isdigit(serial_number[i]))
  803d40:	e0fffb17 	ldw	r3,-20(fp)
  803d44:	e0bffd04 	addi	r2,fp,-12
  803d48:	10c5883a 	add	r2,r2,r3
  803d4c:	10800003 	ldbu	r2,0(r2)
  803d50:	10803fcc 	andi	r2,r2,255
  803d54:	1080201c 	xori	r2,r2,128
  803d58:	10bfe004 	addi	r2,r2,-128
  803d5c:	1007883a 	mov	r3,r2
  803d60:	00802174 	movhi	r2,133
  803d64:	10828004 	addi	r2,r2,2560
  803d68:	10800017 	ldw	r2,0(r2)
  803d6c:	1885883a 	add	r2,r3,r2
  803d70:	10800003 	ldbu	r2,0(r2)
  803d74:	10803fcc 	andi	r2,r2,255
  803d78:	1080010c 	andi	r2,r2,4
  803d7c:	1005003a 	cmpeq	r2,r2,zero
  803d80:	1000121e 	bne	r2,zero,803dcc <get_serial_number+0xf4>
            {
                ser_num *= 10;
  803d84:	e0bffc17 	ldw	r2,-16(fp)
  803d88:	108002a4 	muli	r2,r2,10
  803d8c:	e0bffc15 	stw	r2,-16(fp)
                ser_num += serial_number[i] - '0';
  803d90:	e0fffb17 	ldw	r3,-20(fp)
  803d94:	e0bffd04 	addi	r2,fp,-12
  803d98:	10c5883a 	add	r2,r2,r3
  803d9c:	10800003 	ldbu	r2,0(r2)
  803da0:	10c03fcc 	andi	r3,r2,255
  803da4:	18c0201c 	xori	r3,r3,128
  803da8:	18ffe004 	addi	r3,r3,-128
  803dac:	e0bffc17 	ldw	r2,-16(fp)
  803db0:	1885883a 	add	r2,r3,r2
  803db4:	10bff404 	addi	r2,r2,-48
  803db8:	e0bffc15 	stw	r2,-16(fp)
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
        printf("label under your Nios dev. board. The first 3 digits of the \n");
        printf("label are ASJ and the serial number follows this.\n -->");
                
        for(i=0; i<9; i++)
  803dbc:	e0bffb17 	ldw	r2,-20(fp)
  803dc0:	10800044 	addi	r2,r2,1
  803dc4:	e0bffb15 	stw	r2,-20(fp)
  803dc8:	00000506 	br	803de0 <get_serial_number+0x108>
                ser_num *= 10;
                ser_num += serial_number[i] - '0';
            }
            else
            {
                ser_num = 0;
  803dcc:	e03ffc15 	stw	zero,-16(fp)
                printf("Serial number only contains decimal digits and is non-zero\n");
  803dd0:	01002174 	movhi	r4,133
  803dd4:	212e4704 	addi	r4,r4,-18148
  803dd8:	08077600 	call	807760 <puts>
                break;
  803ddc:	00000306 	br	803dec <get_serial_number+0x114>
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
        printf("label under your Nios dev. board. The first 3 digits of the \n");
        printf("label are ASJ and the serial number follows this.\n -->");
                
        for(i=0; i<9; i++)
  803de0:	e0bffb17 	ldw	r2,-20(fp)
  803de4:	10800250 	cmplti	r2,r2,9
  803de8:	103fd51e 	bne	r2,zero,803d40 <get_serial_number+0x68>
{
    alt_u32 ser_num = 0;
    char serial_number[9] = "040800017";
    int i = 0;
    
    while(!ser_num)
  803dec:	e0bffc17 	ldw	r2,-16(fp)
  803df0:	1005003a 	cmpeq	r2,r2,zero
  803df4:	103fc71e 	bne	r2,zero,803d14 <get_serial_number+0x3c>
                break;
            }
        }
    }
    
    return ser_num;
  803df8:	e0bffc17 	ldw	r2,-16(fp)
}
  803dfc:	e037883a 	mov	sp,fp
  803e00:	dfc00117 	ldw	ra,4(sp)
  803e04:	df000017 	ldw	fp,0(sp)
  803e08:	dec00204 	addi	sp,sp,8
  803e0c:	f800283a 	ret

00803e10 <generate_and_store_mac_addr>:
 * sections. These fail-safe static settings are compatible with previous
 * Nios Ethernet designs, and allow the "factory-safe" design to behave 
 * as expected if the last flash sector is erased.
 */
error_t generate_and_store_mac_addr()
{
  803e10:	deffef04 	addi	sp,sp,-68
  803e14:	dfc01015 	stw	ra,64(sp)
  803e18:	df000f15 	stw	fp,60(sp)
  803e1c:	df000f04 	addi	fp,sp,60
    error_t error = -1;
  803e20:	00bfffc4 	movi	r2,-1
  803e24:	e0bff715 	stw	r2,-36(fp)
    alt_u32 ser_num = 0;
  803e28:	e03ff615 	stw	zero,-40(fp)
    char flash_content[32];
    alt_flash_fd* flash_handle;
    
    printf("Can't read the MAC address from your board (this probably means\n");
  803e2c:	01002174 	movhi	r4,133
  803e30:	212e5904 	addi	r4,r4,-18076
  803e34:	08077600 	call	807760 <puts>
    printf("that your flash was erased). We will assign you a MAC address and\n");
  803e38:	01002174 	movhi	r4,133
  803e3c:	212e6904 	addi	r4,r4,-18012
  803e40:	08077600 	call	807760 <puts>
    printf("static network settings\n\n");
  803e44:	01002174 	movhi	r4,133
  803e48:	212e7a04 	addi	r4,r4,-17944
  803e4c:	08077600 	call	807760 <puts>
    
    ser_num = get_serial_number();
  803e50:	0803cd80 	call	803cd8 <get_serial_number>
  803e54:	e0bff615 	stw	r2,-40(fp)
  
    if (ser_num)
  803e58:	e0bff617 	ldw	r2,-40(fp)
  803e5c:	1005003a 	cmpeq	r2,r2,zero
  803e60:	1000501e 	bne	r2,zero,803fa4 <generate_and_store_mac_addr+0x194>
    {
        /* This says the image is safe */
        flash_content[0] = 0xfe;
  803e64:	00bfff84 	movi	r2,-2
  803e68:	e0bff805 	stb	r2,-32(fp)
        flash_content[1] = 0x5a;
  803e6c:	00801684 	movi	r2,90
  803e70:	e0bff845 	stb	r2,-31(fp)
        flash_content[2] = 0x0;
  803e74:	e03ff885 	stb	zero,-30(fp)
        flash_content[3] = 0x0;
  803e78:	e03ff8c5 	stb	zero,-29(fp)
        
        /* This is the Altera Vendor ID */
        flash_content[4] = 0x0;
  803e7c:	e03ff905 	stb	zero,-28(fp)
        flash_content[5] = 0x7;
  803e80:	008001c4 	movi	r2,7
  803e84:	e0bff945 	stb	r2,-27(fp)
        flash_content[6] = 0xed;
  803e88:	00bffb44 	movi	r2,-19
  803e8c:	e0bff985 	stb	r2,-26(fp)
        
        /* Reserverd Board identifier for erase boards */
        flash_content[7] = 0xFF;
  803e90:	00bfffc4 	movi	r2,-1
  803e94:	e0bff9c5 	stb	r2,-25(fp)
        flash_content[8] = (ser_num & 0xff00) >> 8;
  803e98:	e0bff617 	ldw	r2,-40(fp)
  803e9c:	10bfc00c 	andi	r2,r2,65280
  803ea0:	1004d23a 	srli	r2,r2,8
  803ea4:	e0bffa05 	stb	r2,-24(fp)
        flash_content[9] = ser_num & 0xff;
  803ea8:	e0bff617 	ldw	r2,-40(fp)
  803eac:	e0bffa45 	stb	r2,-23(fp)
        
        /* Then comes a 16-bit "flags" field */
        flash_content[10] = 0xFF;
  803eb0:	00bfffc4 	movi	r2,-1
  803eb4:	e0bffa85 	stb	r2,-22(fp)
        flash_content[11] = 0xFF;
  803eb8:	00bfffc4 	movi	r2,-1
  803ebc:	e0bffac5 	stb	r2,-21(fp)
        
        /* Then comes the static IP address */
        flash_content[12] = IPADDR0;
  803ec0:	e03ffb05 	stb	zero,-20(fp)
        flash_content[13] = IPADDR1;
  803ec4:	e03ffb45 	stb	zero,-19(fp)
        flash_content[14] = IPADDR2;
  803ec8:	e03ffb85 	stb	zero,-18(fp)
        flash_content[15] = IPADDR3;
  803ecc:	e03ffbc5 	stb	zero,-17(fp)
        
        /* Then comes the static nameserver address */
        flash_content[16] = 0xFF;
  803ed0:	00bfffc4 	movi	r2,-1
  803ed4:	e0bffc05 	stb	r2,-16(fp)
        flash_content[17] = 0xFF;
  803ed8:	00bfffc4 	movi	r2,-1
  803edc:	e0bffc45 	stb	r2,-15(fp)
        flash_content[18] = 0xFF;
  803ee0:	00bfffc4 	movi	r2,-1
  803ee4:	e0bffc85 	stb	r2,-14(fp)
        flash_content[19] = 0xFF;
  803ee8:	00bfffc4 	movi	r2,-1
  803eec:	e0bffcc5 	stb	r2,-13(fp)
        
        /* Then comes the static subnet mask */
        flash_content[20] = MSKADDR0;
  803ef0:	00bfffc4 	movi	r2,-1
  803ef4:	e0bffd05 	stb	r2,-12(fp)
        flash_content[21] = MSKADDR1;
  803ef8:	00bfffc4 	movi	r2,-1
  803efc:	e0bffd45 	stb	r2,-11(fp)
        flash_content[22] = MSKADDR2;
  803f00:	00bfffc4 	movi	r2,-1
  803f04:	e0bffd85 	stb	r2,-10(fp)
        flash_content[23] = MSKADDR3;
  803f08:	e03ffdc5 	stb	zero,-9(fp)
        
        /* Then comes the static gateway address */
        flash_content[24] = GWADDR0;
  803f0c:	e03ffe05 	stb	zero,-8(fp)
        flash_content[25] = GWADDR1;
  803f10:	e03ffe45 	stb	zero,-7(fp)
        flash_content[26] = GWADDR2;
  803f14:	e03ffe85 	stb	zero,-6(fp)
        flash_content[27] = GWADDR3;
  803f18:	e03ffec5 	stb	zero,-5(fp)
        
        /* And finally whether to use DHCP - set all bits to be safe */
        flash_content[28] = 0xFF;
  803f1c:	00bfffc4 	movi	r2,-1
  803f20:	e0bfff05 	stb	r2,-4(fp)
        flash_content[29] = 0xFF;
  803f24:	00bfffc4 	movi	r2,-1
  803f28:	e0bfff45 	stb	r2,-3(fp)
        flash_content[30] = 0xFF;
  803f2c:	00bfffc4 	movi	r2,-1
  803f30:	e0bfff85 	stb	r2,-2(fp)
        flash_content[31] = 0xFF;
  803f34:	00bfffc4 	movi	r2,-1
  803f38:	e0bfffc5 	stb	r2,-1(fp)
        
        /* Write the MAC address to flash */
        flash_handle = alt_flash_open_dev(EXT_FLASH_NAME);
  803f3c:	01002174 	movhi	r4,133
  803f40:	212e8104 	addi	r4,r4,-17916
  803f44:	08162440 	call	816244 <alt_flash_open_dev>
  803f48:	e0bff515 	stw	r2,-44(fp)
        if (flash_handle)
  803f4c:	e0bff517 	ldw	r2,-44(fp)
  803f50:	1005003a 	cmpeq	r2,r2,zero
  803f54:	1000131e 	bne	r2,zero,803fa4 <generate_and_store_mac_addr+0x194>
        {
            alt_write_flash(flash_handle,
  803f58:	d0a05d17 	ldw	r2,-32396(gp)
  803f5c:	1007883a 	mov	r3,r2
  803f60:	e0bff517 	ldw	r2,-44(fp)
  803f64:	e0bff115 	stw	r2,-60(fp)
  803f68:	e0fff215 	stw	r3,-56(fp)
  803f6c:	e0bff804 	addi	r2,fp,-32
  803f70:	e0bff315 	stw	r2,-52(fp)
  803f74:	00800804 	movi	r2,32
  803f78:	e0bff415 	stw	r2,-48(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
  803f7c:	e0bff117 	ldw	r2,-60(fp)
  803f80:	10800517 	ldw	r2,20(r2)
  803f84:	e13ff117 	ldw	r4,-60(fp)
  803f88:	e17ff217 	ldw	r5,-56(fp)
  803f8c:	e1bff317 	ldw	r6,-52(fp)
  803f90:	e1fff417 	ldw	r7,-48(fp)
  803f94:	103ee83a 	callr	r2
                            last_flash_sector_offset,
                            flash_content,
                            32);
            alt_flash_close_dev(flash_handle);
  803f98:	e13ff517 	ldw	r4,-44(fp)
  803f9c:	08162c00 	call	8162c0 <alt_flash_close_dev>
            error = 0;
  803fa0:	e03ff715 	stw	zero,-36(fp)
        }
    }

    return error;    
  803fa4:	e0bff717 	ldw	r2,-36(fp)
}
  803fa8:	e037883a 	mov	sp,fp
  803fac:	dfc00117 	ldw	ra,4(sp)
  803fb0:	df000017 	ldw	fp,0(sp)
  803fb4:	dec00204 	addi	sp,sp,8
  803fb8:	f800283a 	ret

00803fbc <generate_mac_addr>:
 * Development Board serial number is 040800017, the corresponding ethernet 
 * number generated will be 00:07:ED:FF:8F:11.
 * 
 */
error_t generate_mac_addr(unsigned char mac_addr[6])
{
  803fbc:	defff804 	addi	sp,sp,-32
  803fc0:	dfc00715 	stw	ra,28(sp)
  803fc4:	df000615 	stw	fp,24(sp)
  803fc8:	df000604 	addi	fp,sp,24
  803fcc:	e13fff15 	stw	r4,-4(fp)
    error_t error = -1;
  803fd0:	00bfffc4 	movi	r2,-1
  803fd4:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 ser_num = 0;
  803fd8:	e03ffd15 	stw	zero,-12(fp)
    
    printf("\nCan't read the MAC address from your board. We will assign you\n");
  803fdc:	01002174 	movhi	r4,133
  803fe0:	212e8a04 	addi	r4,r4,-17880
  803fe4:	08077600 	call	807760 <puts>
    printf("a MAC address.\n\n");
  803fe8:	01002174 	movhi	r4,133
  803fec:	212e9a04 	addi	r4,r4,-17816
  803ff0:	08077600 	call	807760 <puts>
    
    ser_num = get_serial_number();
  803ff4:	0803cd80 	call	803cd8 <get_serial_number>
  803ff8:	e0bffd15 	stw	r2,-12(fp)
  
    if (ser_num)
  803ffc:	e0bffd17 	ldw	r2,-12(fp)
  804000:	1005003a 	cmpeq	r2,r2,zero
  804004:	1000361e 	bne	r2,zero,8040e0 <generate_mac_addr+0x124>
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
  804008:	e0bfff17 	ldw	r2,-4(fp)
  80400c:	10000005 	stb	zero,0(r2)
        mac_addr[1] = 0x7;
  804010:	e0bfff17 	ldw	r2,-4(fp)
  804014:	10c00044 	addi	r3,r2,1
  804018:	008001c4 	movi	r2,7
  80401c:	18800005 	stb	r2,0(r3)
        mac_addr[2] = 0xed;
  804020:	e0bfff17 	ldw	r2,-4(fp)
  804024:	10c00084 	addi	r3,r2,2
  804028:	00bffb44 	movi	r2,-19
  80402c:	18800005 	stb	r2,0(r3)
        
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
  804030:	e0bfff17 	ldw	r2,-4(fp)
  804034:	10c000c4 	addi	r3,r2,3
  804038:	00bfffc4 	movi	r2,-1
  80403c:	18800005 	stb	r2,0(r3)
        mac_addr[4] = (ser_num & 0xff00) >> 8;
  804040:	e0bfff17 	ldw	r2,-4(fp)
  804044:	10c00104 	addi	r3,r2,4
  804048:	e0bffd17 	ldw	r2,-12(fp)
  80404c:	10bfc00c 	andi	r2,r2,65280
  804050:	1004d23a 	srli	r2,r2,8
  804054:	18800005 	stb	r2,0(r3)
        mac_addr[5] = ser_num & 0xff;
  804058:	e0bfff17 	ldw	r2,-4(fp)
  80405c:	10c00144 	addi	r3,r2,5
  804060:	e0bffd17 	ldw	r2,-12(fp)
  804064:	18800005 	stb	r2,0(r3)
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
  804068:	e0bfff17 	ldw	r2,-4(fp)
  80406c:	10800003 	ldbu	r2,0(r2)
  804070:	11403fcc 	andi	r5,r2,255
  804074:	e0bfff17 	ldw	r2,-4(fp)
  804078:	10800044 	addi	r2,r2,1
  80407c:	10800003 	ldbu	r2,0(r2)
  804080:	11803fcc 	andi	r6,r2,255
  804084:	e0bfff17 	ldw	r2,-4(fp)
  804088:	10800084 	addi	r2,r2,2
  80408c:	10800003 	ldbu	r2,0(r2)
  804090:	11c03fcc 	andi	r7,r2,255
  804094:	e0bfff17 	ldw	r2,-4(fp)
  804098:	108000c4 	addi	r2,r2,3
  80409c:	10800003 	ldbu	r2,0(r2)
  8040a0:	10c03fcc 	andi	r3,r2,255
  8040a4:	e0bfff17 	ldw	r2,-4(fp)
  8040a8:	10800104 	addi	r2,r2,4
  8040ac:	10800003 	ldbu	r2,0(r2)
  8040b0:	11003fcc 	andi	r4,r2,255
  8040b4:	e0bfff17 	ldw	r2,-4(fp)
  8040b8:	10800144 	addi	r2,r2,5
  8040bc:	10800003 	ldbu	r2,0(r2)
  8040c0:	10803fcc 	andi	r2,r2,255
  8040c4:	d8c00015 	stw	r3,0(sp)
  8040c8:	d9000115 	stw	r4,4(sp)
  8040cc:	d8800215 	stw	r2,8(sp)
  8040d0:	01002174 	movhi	r4,133
  8040d4:	212e9e04 	addi	r4,r4,-17800
  8040d8:	08076480 	call	807648 <printf>
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
        
        error = 0;
  8040dc:	e03ffe15 	stw	zero,-8(fp)
    }
  
    return error;    
  8040e0:	e0bffe17 	ldw	r2,-8(fp)
}
  8040e4:	e037883a 	mov	sp,fp
  8040e8:	dfc00117 	ldw	ra,4(sp)
  8040ec:	df000017 	ldw	fp,0(sp)
  8040f0:	dec00204 	addi	sp,sp,8
  8040f4:	f800283a 	ret

008040f8 <get_board_mac_addr>:
 *
 * Read the MAC address in a board specific way
 *
 */
error_t get_board_mac_addr(unsigned char mac_addr[6])
{
  8040f8:	defff804 	addi	sp,sp,-32
  8040fc:	dfc00715 	stw	ra,28(sp)
  804100:	df000615 	stw	fp,24(sp)
  804104:	df000604 	addi	fp,sp,24
  804108:	e13fff15 	stw	r4,-4(fp)
  error_t error = 0;
  80410c:	e03ffe15 	stw	zero,-8(fp)
  alt_u32 signature;

  /* Get the flash sector with the MAC address. */
  error = FindLastFlashSectorOffset(&last_flash_sector_offset);
  804110:	d1205d04 	addi	r4,gp,-32396
  804114:	08043400 	call	804340 <FindLastFlashSectorOffset>
  804118:	e0bffe15 	stw	r2,-8(fp)
  if (!error)
  80411c:	e0bffe17 	ldw	r2,-8(fp)
  804120:	1004c03a 	cmpne	r2,r2,zero
  804124:	1000041e 	bne	r2,zero,804138 <get_board_mac_addr+0x40>
    last_flash_sector = EXT_FLASH_BASE + last_flash_sector_offset;
  804128:	d0a05d17 	ldw	r2,-32396(gp)
  80412c:	00c05034 	movhi	r3,320
  804130:	10c5883a 	add	r2,r2,r3
  804134:	d0a05e15 	stw	r2,-32392(gp)
 * valid network settings are present, indicated by a signature of 0x00005afe at 
 * the first address of the last flash sector.  This hex value is chosen as the 
 * signature since it looks like the english word "SAFE", meaning that it is 
 * safe to use these network address values.  
*/
  if (!error)
  804138:	e0bffe17 	ldw	r2,-8(fp)
  80413c:	1004c03a 	cmpne	r2,r2,zero
  804140:	1000081e 	bne	r2,zero,804164 <get_board_mac_addr+0x6c>
  {
    signature = IORD_32DIRECT(last_flash_sector, 0);
  804144:	d0a05e17 	ldw	r2,-32392(gp)
  804148:	10800037 	ldwio	r2,0(r2)
  80414c:	e0bffd15 	stw	r2,-12(fp)
    if (signature != 0x00005afe)
  804150:	e0bffd17 	ldw	r2,-12(fp)
  804154:	1096bfa0 	cmpeqi	r2,r2,23294
  804158:	1000021e 	bne	r2,zero,804164 <get_board_mac_addr+0x6c>
    {
      error = generate_and_store_mac_addr();
  80415c:	0803e100 	call	803e10 <generate_and_store_mac_addr>
  804160:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  if (!error)
  804164:	e0bffe17 	ldw	r2,-8(fp)
  804168:	1004c03a 	cmpne	r2,r2,zero
  80416c:	1000411e 	bne	r2,zero,804274 <get_board_mac_addr+0x17c>
  {
    mac_addr[0] = IORD_8DIRECT(last_flash_sector, 4);
  804170:	d0a05e17 	ldw	r2,-32392(gp)
  804174:	10800104 	addi	r2,r2,4
  804178:	10800023 	ldbuio	r2,0(r2)
  80417c:	1007883a 	mov	r3,r2
  804180:	e0bfff17 	ldw	r2,-4(fp)
  804184:	10c00005 	stb	r3,0(r2)
    mac_addr[1] = IORD_8DIRECT(last_flash_sector, 5);
  804188:	e0bfff17 	ldw	r2,-4(fp)
  80418c:	10c00044 	addi	r3,r2,1
  804190:	d0a05e17 	ldw	r2,-32392(gp)
  804194:	10800144 	addi	r2,r2,5
  804198:	10800023 	ldbuio	r2,0(r2)
  80419c:	18800005 	stb	r2,0(r3)
    mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
  8041a0:	e0bfff17 	ldw	r2,-4(fp)
  8041a4:	10c00084 	addi	r3,r2,2
  8041a8:	d0a05e17 	ldw	r2,-32392(gp)
  8041ac:	10800184 	addi	r2,r2,6
  8041b0:	10800023 	ldbuio	r2,0(r2)
  8041b4:	18800005 	stb	r2,0(r3)
    mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
  8041b8:	e0bfff17 	ldw	r2,-4(fp)
  8041bc:	10c000c4 	addi	r3,r2,3
  8041c0:	d0a05e17 	ldw	r2,-32392(gp)
  8041c4:	108001c4 	addi	r2,r2,7
  8041c8:	10800023 	ldbuio	r2,0(r2)
  8041cc:	18800005 	stb	r2,0(r3)
    mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
  8041d0:	e0bfff17 	ldw	r2,-4(fp)
  8041d4:	10c00104 	addi	r3,r2,4
  8041d8:	d0a05e17 	ldw	r2,-32392(gp)
  8041dc:	10800204 	addi	r2,r2,8
  8041e0:	10800023 	ldbuio	r2,0(r2)
  8041e4:	18800005 	stb	r2,0(r3)
    mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
  8041e8:	e0bfff17 	ldw	r2,-4(fp)
  8041ec:	10c00144 	addi	r3,r2,5
  8041f0:	d0a05e17 	ldw	r2,-32392(gp)
  8041f4:	10800244 	addi	r2,r2,9
  8041f8:	10800023 	ldbuio	r2,0(r2)
  8041fc:	18800005 	stb	r2,0(r3)
    
    printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
  804200:	e0bfff17 	ldw	r2,-4(fp)
  804204:	10800003 	ldbu	r2,0(r2)
  804208:	11403fcc 	andi	r5,r2,255
  80420c:	e0bfff17 	ldw	r2,-4(fp)
  804210:	10800044 	addi	r2,r2,1
  804214:	10800003 	ldbu	r2,0(r2)
  804218:	11803fcc 	andi	r6,r2,255
  80421c:	e0bfff17 	ldw	r2,-4(fp)
  804220:	10800084 	addi	r2,r2,2
  804224:	10800003 	ldbu	r2,0(r2)
  804228:	11c03fcc 	andi	r7,r2,255
  80422c:	e0bfff17 	ldw	r2,-4(fp)
  804230:	108000c4 	addi	r2,r2,3
  804234:	10800003 	ldbu	r2,0(r2)
  804238:	10c03fcc 	andi	r3,r2,255
  80423c:	e0bfff17 	ldw	r2,-4(fp)
  804240:	10800104 	addi	r2,r2,4
  804244:	10800003 	ldbu	r2,0(r2)
  804248:	11003fcc 	andi	r4,r2,255
  80424c:	e0bfff17 	ldw	r2,-4(fp)
  804250:	10800144 	addi	r2,r2,5
  804254:	10800003 	ldbu	r2,0(r2)
  804258:	10803fcc 	andi	r2,r2,255
  80425c:	d8c00015 	stw	r3,0(sp)
  804260:	d9000115 	stw	r4,4(sp)
  804264:	d8800215 	stw	r2,8(sp)
  804268:	01002174 	movhi	r4,133
  80426c:	212e9e04 	addi	r4,r4,-17800
  804270:	08076480 	call	807648 <printf>
            mac_addr[4],
            mac_addr[5]);

  }

  return error;
  804274:	e0bffe17 	ldw	r2,-8(fp)
}
  804278:	e037883a 	mov	sp,fp
  80427c:	dfc00117 	ldw	ra,4(sp)
  804280:	df000017 	ldw	fp,0(sp)
  804284:	dec00204 	addi	sp,sp,8
  804288:	f800283a 	ret

0080428c <get_mac_addr>:
*
* Read the MAC address in a board specific way
*
*/
int get_mac_addr(NET net, unsigned char mac_addr[6])
{
  80428c:	defffb04 	addi	sp,sp,-20
  804290:	dfc00415 	stw	ra,16(sp)
  804294:	df000315 	stw	fp,12(sp)
  804298:	df000304 	addi	fp,sp,12
  80429c:	e13ffe15 	stw	r4,-8(fp)
  8042a0:	e17fff15 	stw	r5,-4(fp)
    error_t error = 0;
  8042a4:	e03ffd15 	stw	zero,-12(fp)
    
    error = get_board_mac_addr(mac_addr);
  8042a8:	e13fff17 	ldw	r4,-4(fp)
  8042ac:	08040f80 	call	8040f8 <get_board_mac_addr>
  8042b0:	e0bffd15 	stw	r2,-12(fp)
    
    if(error)
  8042b4:	e0bffd17 	ldw	r2,-12(fp)
  8042b8:	1005003a 	cmpeq	r2,r2,zero
  8042bc:	1000031e 	bne	r2,zero,8042cc <get_mac_addr+0x40>
    {
        /* Failed read MAC address from flash, prompt user to enter serial 
           number to generate MAC address. */
        error = generate_mac_addr(mac_addr);
  8042c0:	e13fff17 	ldw	r4,-4(fp)
  8042c4:	0803fbc0 	call	803fbc <generate_mac_addr>
  8042c8:	e0bffd15 	stw	r2,-12(fp)
    }
    return error;
  8042cc:	e0bffd17 	ldw	r2,-12(fp)
}
  8042d0:	e037883a 	mov	sp,fp
  8042d4:	dfc00117 	ldw	ra,4(sp)
  8042d8:	df000017 	ldw	fp,0(sp)
  8042dc:	dec00204 	addi	sp,sp,8
  8042e0:	f800283a 	ret

008042e4 <get_ip_addr>:
int get_ip_addr(alt_iniche_dev *p_dev,
                ip_addr* ipaddr,
                ip_addr* netmask,
                ip_addr* gw,
                int* use_dhcp)
{
  8042e4:	defffb04 	addi	sp,sp,-20
  8042e8:	df000415 	stw	fp,16(sp)
  8042ec:	df000404 	addi	fp,sp,16
  8042f0:	e13ffc15 	stw	r4,-16(fp)
  8042f4:	e17ffd15 	stw	r5,-12(fp)
  8042f8:	e1bffe15 	stw	r6,-8(fp)
  8042fc:	e1ffff15 	stw	r7,-4(fp)

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
  804300:	e0bffd17 	ldw	r2,-12(fp)
  804304:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
  804308:	e0bfff17 	ldw	r2,-4(fp)
  80430c:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);
  804310:	e0fffe17 	ldw	r3,-8(fp)
  804314:	00804034 	movhi	r2,256
  804318:	10bfffc4 	addi	r2,r2,-1
  80431c:	18800015 	stw	r2,0(r3)

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
  804320:	e0c00117 	ldw	r3,4(fp)
  804324:	00800044 	movi	r2,1
  804328:	18800015 	stw	r2,0(r3)
        ip4_addr3(*ipaddr),
        ip4_addr4(*ipaddr));
#endif /* not DHCP_CLIENT */

    /* Non-standard API: return 1 for success */
    return 1;
  80432c:	00800044 	movi	r2,1
}
  804330:	e037883a 	mov	sp,fp
  804334:	df000017 	ldw	fp,0(sp)
  804338:	dec00104 	addi	sp,sp,4
  80433c:	f800283a 	ret

00804340 <FindLastFlashSectorOffset>:
 * in pLastFlashSectorOffset.
 */

int FindLastFlashSectorOffset(
    alt_u32                     *pLastFlashSectorOffset)
{
  804340:	defff304 	addi	sp,sp,-52
  804344:	dfc00c15 	stw	ra,48(sp)
  804348:	df000b15 	stw	fp,44(sp)
  80434c:	df000b04 	addi	fp,sp,44
  804350:	e13fff15 	stw	r4,-4(fp)
    flash_region                *regions;
    int                         numRegions;
    flash_region                *pLastRegion;
    int                         lastFlashSectorOffset;
    int                         n;
    int                         error = 0;
  804354:	e03ff815 	stw	zero,-32(fp)

    /* Open the flash device. */
    fd = alt_flash_open_dev(EXT_FLASH_NAME);
  804358:	01002174 	movhi	r4,133
  80435c:	212e8104 	addi	r4,r4,-17916
  804360:	08162440 	call	816244 <alt_flash_open_dev>
  804364:	e0bffc15 	stw	r2,-16(fp)
    if (fd <= 0)
  804368:	e0bffc17 	ldw	r2,-16(fp)
  80436c:	1004c03a 	cmpne	r2,r2,zero
  804370:	1000021e 	bne	r2,zero,80437c <FindLastFlashSectorOffset+0x3c>
        error = -1;
  804374:	00bfffc4 	movi	r2,-1
  804378:	e0bff815 	stw	r2,-32(fp)

    /* Get the flash info. */
    if (!error)
  80437c:	e0bff817 	ldw	r2,-32(fp)
  804380:	1004c03a 	cmpne	r2,r2,zero
  804384:	10000d1e 	bne	r2,zero,8043bc <FindLastFlashSectorOffset+0x7c>
  804388:	e0bffc17 	ldw	r2,-16(fp)
  80438c:	e0bff515 	stw	r2,-44(fp)
  804390:	e0bffd04 	addi	r2,fp,-12
  804394:	e0bff615 	stw	r2,-40(fp)
  804398:	e0bffe04 	addi	r2,fp,-8
  80439c:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
  8043a0:	e0bff517 	ldw	r2,-44(fp)
  8043a4:	10800717 	ldw	r2,28(r2)
  8043a8:	e13ff517 	ldw	r4,-44(fp)
  8043ac:	e17ff617 	ldw	r5,-40(fp)
  8043b0:	e1bff717 	ldw	r6,-36(fp)
  8043b4:	103ee83a 	callr	r2
        error = alt_get_flash_info(fd, &regions, &numRegions);
  8043b8:	e0bff815 	stw	r2,-32(fp)

    /* Find the last flash sector. */
    if (!error)
  8043bc:	e0bff817 	ldw	r2,-32(fp)
  8043c0:	1004c03a 	cmpne	r2,r2,zero
  8043c4:	1000231e 	bne	r2,zero,804454 <FindLastFlashSectorOffset+0x114>
    {
        pLastRegion = &(regions[0]);
  8043c8:	e0bffd17 	ldw	r2,-12(fp)
  8043cc:	e0bffb15 	stw	r2,-20(fp)
        for (n = 1; n < numRegions; n++)
  8043d0:	00800044 	movi	r2,1
  8043d4:	e0bff915 	stw	r2,-28(fp)
  8043d8:	00001206 	br	804424 <FindLastFlashSectorOffset+0xe4>
        {
            if (regions[n].offset > pLastRegion->offset)
  8043dc:	e0bff917 	ldw	r2,-28(fp)
  8043e0:	1004913a 	slli	r2,r2,4
  8043e4:	1007883a 	mov	r3,r2
  8043e8:	e0bffd17 	ldw	r2,-12(fp)
  8043ec:	1885883a 	add	r2,r3,r2
  8043f0:	10c00017 	ldw	r3,0(r2)
  8043f4:	e0bffb17 	ldw	r2,-20(fp)
  8043f8:	10800017 	ldw	r2,0(r2)
  8043fc:	10c0060e 	bge	r2,r3,804418 <FindLastFlashSectorOffset+0xd8>
                pLastRegion = &(regions[n]);
  804400:	e0bff917 	ldw	r2,-28(fp)
  804404:	1004913a 	slli	r2,r2,4
  804408:	1007883a 	mov	r3,r2
  80440c:	e0bffd17 	ldw	r2,-12(fp)
  804410:	1885883a 	add	r2,r3,r2
  804414:	e0bffb15 	stw	r2,-20(fp)

    /* Find the last flash sector. */
    if (!error)
    {
        pLastRegion = &(regions[0]);
        for (n = 1; n < numRegions; n++)
  804418:	e0bff917 	ldw	r2,-28(fp)
  80441c:	10800044 	addi	r2,r2,1
  804420:	e0bff915 	stw	r2,-28(fp)
  804424:	e0fffe17 	ldw	r3,-8(fp)
  804428:	e0bff917 	ldw	r2,-28(fp)
  80442c:	10ffeb16 	blt	r2,r3,8043dc <FindLastFlashSectorOffset+0x9c>
        {
            if (regions[n].offset > pLastRegion->offset)
                pLastRegion = &(regions[n]);
        }
        lastFlashSectorOffset =   pLastRegion->offset
  804430:	e0bffb17 	ldw	r2,-20(fp)
  804434:	10c00017 	ldw	r3,0(r2)
  804438:	e0bffb17 	ldw	r2,-20(fp)
  80443c:	10800117 	ldw	r2,4(r2)
  804440:	1887883a 	add	r3,r3,r2
  804444:	e0bffb17 	ldw	r2,-20(fp)
  804448:	10800317 	ldw	r2,12(r2)
  80444c:	1885c83a 	sub	r2,r3,r2
  804450:	e0bffa15 	stw	r2,-24(fp)
                                + pLastRegion->region_size
                                - pLastRegion->block_size;
    }

    /* Return results. */
    if (!error)
  804454:	e0bff817 	ldw	r2,-32(fp)
  804458:	1004c03a 	cmpne	r2,r2,zero
  80445c:	1000031e 	bne	r2,zero,80446c <FindLastFlashSectorOffset+0x12c>
        *pLastFlashSectorOffset = lastFlashSectorOffset;
  804460:	e0fffa17 	ldw	r3,-24(fp)
  804464:	e0bfff17 	ldw	r2,-4(fp)
  804468:	10c00015 	stw	r3,0(r2)

    return (error);
  80446c:	e0bff817 	ldw	r2,-32(fp)
}
  804470:	e037883a 	mov	sp,fp
  804474:	dfc00117 	ldw	ra,4(sp)
  804478:	df000017 	ldw	fp,0(sp)
  80447c:	dec00204 	addi	sp,sp,8
  804480:	f800283a 	ret

00804484 <ProgFlash>:
*  a pointer to a data buffer, and the size of the data buffer.
*
******************************************************************/
int ProgFlash(struct flash_inf_struct *flash_info, int target_addr,
              char* data, int data_len)
{
  804484:	deffd904 	addi	sp,sp,-156
  804488:	dfc02615 	stw	ra,152(sp)
  80448c:	df002515 	stw	fp,148(sp)
  804490:	df002504 	addi	fp,sp,148
  804494:	e13ffa15 	stw	r4,-24(fp)
  804498:	e17ffb15 	stw	r5,-20(fp)
  80449c:	e1bffc15 	stw	r6,-16(fp)
  8044a0:	e1fffd15 	stw	r7,-12(fp)
  // Flash device variables
  alt_flash_fd* fd;
  int number_of_regions;
  flash_region* regions;
  char flashname[40]; /* Be conservative on the size of the string. */
  char* flashname_ptr = flashname;
  8044a4:	e0bff004 	addi	r2,fp,-64
  8044a8:	e0bfec15 	stw	r2,-80(fp)
  int new_flash_block = -1;
  8044ac:	00bfffc4 	movi	r2,-1
  8044b0:	e0bfeb15 	stw	r2,-84(fp)
  
  // General purpose variables
  unsigned int sw_offset = 0;
  8044b4:	e03fea15 	stw	zero,-88(fp)
  int ret_code = 0x0;
  8044b8:	e03fe915 	stw	zero,-92(fp)
   * - If you want your flash name to be an option, you must change the 
   * upload_image form in index.html to include your flash device's name 
   * in the pick list.  
   */
  
  flashname_ptr += sprintf( flashname_ptr, "/dev/%s", flash_info->device );  
  8044bc:	e0bffa17 	ldw	r2,-24(fp)
  8044c0:	11800204 	addi	r6,r2,8
  8044c4:	e13fec17 	ldw	r4,-80(fp)
  8044c8:	01402174 	movhi	r5,133
  8044cc:	296ead04 	addi	r5,r5,-17740
  8044d0:	0807b340 	call	807b34 <sprintf>
  8044d4:	1007883a 	mov	r3,r2
  8044d8:	e0bfec17 	ldw	r2,-80(fp)
  8044dc:	10c5883a 	add	r2,r2,r3
  8044e0:	e0bfec15 	stw	r2,-80(fp)
	*(flashname_ptr+1) = '\0';
  8044e4:	e0bfec17 	ldw	r2,-80(fp)
  8044e8:	10800044 	addi	r2,r2,1
  8044ec:	10000005 	stb	zero,0(r2)
  
  fd = alt_flash_open_dev(flashname);
  8044f0:	e13ff004 	addi	r4,fp,-64
  8044f4:	08162440 	call	816244 <alt_flash_open_dev>
  8044f8:	e0bfed15 	stw	r2,-76(fp)
  if (fd)
  8044fc:	e0bfed17 	ldw	r2,-76(fp)
  804500:	1005003a 	cmpeq	r2,r2,zero
  804504:	10007d1e 	bne	r2,zero,8046fc <ProgFlash+0x278>
  804508:	e0bfed17 	ldw	r2,-76(fp)
  80450c:	e0bfe615 	stw	r2,-104(fp)
  804510:	e0bfef04 	addi	r2,fp,-68
  804514:	e0bfe715 	stw	r2,-100(fp)
  804518:	e0bfee04 	addi	r2,fp,-72
  80451c:	e0bfe815 	stw	r2,-96(fp)
  804520:	e0bfe617 	ldw	r2,-104(fp)
  804524:	10800717 	ldw	r2,28(r2)
  804528:	e13fe617 	ldw	r4,-104(fp)
  80452c:	e17fe717 	ldw	r5,-100(fp)
  804530:	e1bfe817 	ldw	r6,-96(fp)
  804534:	103ee83a 	callr	r2
  { 
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
  804538:	e0bfe915 	stw	r2,-92(fp)
    /* new_flash_block = target_addr / regions->block_size; */
    /* Ahhh, but what happens if a line spans the end of one block and the 
     * beginning of another? 
     *  - Better to handle this case well...as well!
     */
    new_flash_block = (target_addr + data_len) / regions->block_size;
  80453c:	e0fffb17 	ldw	r3,-20(fp)
  804540:	e0bffd17 	ldw	r2,-12(fp)
  804544:	1889883a 	add	r4,r3,r2
  804548:	e0bfef17 	ldw	r2,-68(fp)
  80454c:	11400317 	ldw	r5,12(r2)
  804550:	08052f80 	call	8052f8 <__divsi3>
  804554:	e0bfeb15 	stw	r2,-84(fp)
    if( current_flash_block == -1 )
  804558:	d0a06017 	ldw	r2,-32384(gp)
  80455c:	10bfffd8 	cmpnei	r2,r2,-1
  804560:	1000061e 	bne	r2,zero,80457c <ProgFlash+0xf8>
    {
      /* Output various flash information when programming the first line. */
      printf( "\nFlash Name is %s.\nBlock size is %d bytes.\n\nProgramming Flash...\n", flashname, regions->block_size );
  804564:	e0bfef17 	ldw	r2,-68(fp)
  804568:	11800317 	ldw	r6,12(r2)
  80456c:	e17ff004 	addi	r5,fp,-64
  804570:	01002174 	movhi	r4,133
  804574:	212eaf04 	addi	r4,r4,-17732
  804578:	08076480 	call	807648 <printf>
    }
    /* if it's a new block, we need to erase it first. */
    if(new_flash_block != current_flash_block)
  80457c:	d0e06017 	ldw	r3,-32384(gp)
  804580:	e0bfeb17 	ldw	r2,-84(fp)
  804584:	10c02026 	beq	r2,r3,804608 <ProgFlash+0x184>
    {
      printf("\nFlash Block %d", new_flash_block);
  804588:	01002174 	movhi	r4,133
  80458c:	212ec004 	addi	r4,r4,-17664
  804590:	e17feb17 	ldw	r5,-84(fp)
  804594:	08076480 	call	807648 <printf>
      /* Blindly erase the new flash block */
      alt_erase_flash_block(fd, (new_flash_block * regions->block_size), regions->block_size);
  804598:	e0bfef17 	ldw	r2,-68(fp)
  80459c:	10c00317 	ldw	r3,12(r2)
  8045a0:	e0bfeb17 	ldw	r2,-84(fp)
  8045a4:	1887383a 	mul	r3,r3,r2
  8045a8:	e0bfef17 	ldw	r2,-68(fp)
  8045ac:	11000317 	ldw	r4,12(r2)
  8045b0:	e0bfed17 	ldw	r2,-76(fp)
  8045b4:	e0bfe215 	stw	r2,-120(fp)
  8045b8:	e0ffe315 	stw	r3,-116(fp)
  8045bc:	e13fe415 	stw	r4,-112(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
  8045c0:	e0bfe217 	ldw	r2,-120(fp)
  8045c4:	10800817 	ldw	r2,32(r2)
  8045c8:	e13fe217 	ldw	r4,-120(fp)
  8045cc:	e17fe317 	ldw	r5,-116(fp)
  8045d0:	103ee83a 	callr	r2
  8045d4:	e0bfe515 	stw	r2,-108(fp)
  
  if(!ret_code)
  8045d8:	e0bfe517 	ldw	r2,-108(fp)
  8045dc:	1004c03a 	cmpne	r2,r2,zero
  8045e0:	1000071e 	bne	r2,zero,804600 <ProgFlash+0x17c>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
  8045e4:	e0bfe217 	ldw	r2,-120(fp)
  8045e8:	10800a17 	ldw	r2,40(r2)
  8045ec:	1007883a 	mov	r3,r2
  8045f0:	e0bfe317 	ldw	r2,-116(fp)
  8045f4:	1889883a 	add	r4,r3,r2
  8045f8:	e17fe417 	ldw	r5,-112(fp)
  8045fc:	08161cc0 	call	8161cc <alt_dcache_flush>
      current_flash_block = new_flash_block;
  804600:	e0bfeb17 	ldw	r2,-84(fp)
  804604:	d0a06015 	stw	r2,-32384(gp)
    }
    alt_write_flash_block(fd, (current_flash_block * regions->block_size), target_addr, data, data_len);
  804608:	e0bfef17 	ldw	r2,-68(fp)
  80460c:	10c00317 	ldw	r3,12(r2)
  804610:	d0a06017 	ldw	r2,-32384(gp)
  804614:	1887383a 	mul	r3,r3,r2
  804618:	e0bfed17 	ldw	r2,-76(fp)
  80461c:	e0bfdc15 	stw	r2,-144(fp)
  804620:	e0ffdd15 	stw	r3,-140(fp)
  804624:	e0bffb17 	ldw	r2,-20(fp)
  804628:	e0bfde15 	stw	r2,-136(fp)
  80462c:	e0bffc17 	ldw	r2,-16(fp)
  804630:	e0bfdf15 	stw	r2,-132(fp)
  804634:	e0bffd17 	ldw	r2,-12(fp)
  804638:	e0bfe015 	stw	r2,-128(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
  80463c:	e0bfdc17 	ldw	r2,-144(fp)
  804640:	10c00917 	ldw	r3,36(r2)
  804644:	e0bfe017 	ldw	r2,-128(fp)
  804648:	d8800015 	stw	r2,0(sp)
  80464c:	e13fdc17 	ldw	r4,-144(fp)
  804650:	e17fdd17 	ldw	r5,-140(fp)
  804654:	e1bfde17 	ldw	r6,-136(fp)
  804658:	e1ffdf17 	ldw	r7,-132(fp)
  80465c:	183ee83a 	callr	r3
  804660:	e0bfe115 	stw	r2,-124(fp)

  if(!ret_code)
  804664:	e0bfe117 	ldw	r2,-124(fp)
  804668:	1004c03a 	cmpne	r2,r2,zero
  80466c:	1000071e 	bne	r2,zero,80468c <ProgFlash+0x208>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
  804670:	e0bfdc17 	ldw	r2,-144(fp)
  804674:	10800a17 	ldw	r2,40(r2)
  804678:	1007883a 	mov	r3,r2
  80467c:	e0bfde17 	ldw	r2,-136(fp)
  804680:	1889883a 	add	r4,r3,r2
  804684:	e17fe017 	ldw	r5,-128(fp)
  804688:	08161cc0 	call	8161cc <alt_dcache_flush>
    /* This just gives us some zippy dots so we know hard work is being done */
    if ((target_addr - sw_offset) % (regions->block_size / 8) < data_len)
  80468c:	e0fffb17 	ldw	r3,-20(fp)
  804690:	e0bfea17 	ldw	r2,-88(fp)
  804694:	1887c83a 	sub	r3,r3,r2
  804698:	e0fffe15 	stw	r3,-8(fp)
  80469c:	e0bfef17 	ldw	r2,-68(fp)
  8046a0:	10800317 	ldw	r2,12(r2)
  8046a4:	e0bfff15 	stw	r2,-4(fp)
  8046a8:	e0ffff17 	ldw	r3,-4(fp)
  8046ac:	1804403a 	cmpge	r2,r3,zero
  8046b0:	1000031e 	bne	r2,zero,8046c0 <ProgFlash+0x23c>
  8046b4:	e0bfff17 	ldw	r2,-4(fp)
  8046b8:	108001c4 	addi	r2,r2,7
  8046bc:	e0bfff15 	stw	r2,-4(fp)
  8046c0:	e0ffff17 	ldw	r3,-4(fp)
  8046c4:	1805d0fa 	srai	r2,r3,3
  8046c8:	100b883a 	mov	r5,r2
  8046cc:	e13ffe17 	ldw	r4,-8(fp)
  8046d0:	08053c00 	call	8053c0 <__umodsi3>
  8046d4:	1007883a 	mov	r3,r2
  8046d8:	e0bffd17 	ldw	r2,-12(fp)
  8046dc:	18800a2e 	bgeu	r3,r2,804708 <ProgFlash+0x284>
    {
      printf("\n 0x%8.8X: ", (target_addr & 0xFFFFFF00));
  8046e0:	e0bffb17 	ldw	r2,-20(fp)
  8046e4:	00ffc004 	movi	r3,-256
  8046e8:	10ca703a 	and	r5,r2,r3
  8046ec:	01002174 	movhi	r4,133
  8046f0:	212ec404 	addi	r4,r4,-17648
  8046f4:	08076480 	call	807648 <printf>
  8046f8:	00000306 	br	804708 <ProgFlash+0x284>
      printf(".");
    }*/
  }
  else
  {
    printf("Error Opening flash device. Exiting.");
  8046fc:	01002174 	movhi	r4,133
  804700:	212ec704 	addi	r4,r4,-17636
  804704:	08076480 	call	807648 <printf>
  }
  alt_flash_close_dev(fd);
  804708:	e13fed17 	ldw	r4,-76(fp)
  80470c:	08162c00 	call	8162c0 <alt_flash_close_dev>

  return (ret_code);  
  804710:	e0bfe917 	ldw	r2,-92(fp)
}
  804714:	e037883a 	mov	sp,fp
  804718:	dfc00117 	ldw	ra,4(sp)
  80471c:	df000017 	ldw	fp,0(sp)
  804720:	dec00204 	addi	sp,sp,8
  804724:	f800283a 	ret

00804728 <ParseAndProgramLine>:
 *    - These are left as an exercise up to the user.
 * 
 ******************************************************************/
 
 int ParseAndProgramLine( char* lineBuf, struct flash_inf_struct *flash_info )
 {
  804728:	deffde04 	addi	sp,sp,-136
  80472c:	dfc02115 	stw	ra,132(sp)
  804730:	df002015 	stw	fp,128(sp)
  804734:	df002004 	addi	fp,sp,128
  804738:	e13ffc15 	stw	r4,-16(fp)
  80473c:	e17ffd15 	stw	r5,-12(fp)
  int temp;       /* Temporary variable for checksum calculation. */
  char data[80];
  char* data_ptr;
  int data_len;

  if( *lineBuf != 'S' )
  804740:	e0bffc17 	ldw	r2,-16(fp)
  804744:	10800003 	ldbu	r2,0(r2)
  804748:	10803fcc 	andi	r2,r2,255
  80474c:	1080201c 	xori	r2,r2,128
  804750:	10bfe004 	addi	r2,r2,-128
  804754:	108014e0 	cmpeqi	r2,r2,83
  804758:	10000b1e 	bne	r2,zero,804788 <ParseAndProgramLine+0x60>
  {
    printf( "\nSREC ERROR: line starts with %c.\n", *lineBuf );
  80475c:	e0bffc17 	ldw	r2,-16(fp)
  804760:	10800003 	ldbu	r2,0(r2)
  804764:	11403fcc 	andi	r5,r2,255
  804768:	2940201c 	xori	r5,r5,128
  80476c:	297fe004 	addi	r5,r5,-128
  804770:	01002174 	movhi	r4,133
  804774:	212ed104 	addi	r4,r4,-17596
  804778:	08076480 	call	807648 <printf>
    return( 10 );
  80477c:	00800284 	movi	r2,10
  804780:	e0bfff15 	stw	r2,-4(fp)
  804784:	00009106 	br	8049cc <ParseAndProgramLine+0x2a4>
  }
   
  switch( *(lineBuf + 1) )
  804788:	e0bffc17 	ldw	r2,-16(fp)
  80478c:	10800044 	addi	r2,r2,1
  804790:	10800003 	ldbu	r2,0(r2)
  804794:	10803fcc 	andi	r2,r2,255
  804798:	1080201c 	xori	r2,r2,128
  80479c:	10bfe004 	addi	r2,r2,-128
  8047a0:	e0bffe15 	stw	r2,-8(fp)
  8047a4:	e0fffe17 	ldw	r3,-8(fp)
  8047a8:	18800c60 	cmpeqi	r2,r3,49
  8047ac:	1000101e 	bne	r2,zero,8047f0 <ParseAndProgramLine+0xc8>
  8047b0:	e0fffe17 	ldw	r3,-8(fp)
  8047b4:	18800c88 	cmpgei	r2,r3,50
  8047b8:	1000041e 	bne	r2,zero,8047cc <ParseAndProgramLine+0xa4>
  8047bc:	e0fffe17 	ldw	r3,-8(fp)
  8047c0:	18800c20 	cmpeqi	r2,r3,48
  8047c4:	1000081e 	bne	r2,zero,8047e8 <ParseAndProgramLine+0xc0>
  8047c8:	00003c06 	br	8048bc <ParseAndProgramLine+0x194>
  8047cc:	e0fffe17 	ldw	r3,-8(fp)
  8047d0:	18800ca0 	cmpeqi	r2,r3,50
  8047d4:	1000171e 	bne	r2,zero,804834 <ParseAndProgramLine+0x10c>
  8047d8:	e0fffe17 	ldw	r3,-8(fp)
  8047dc:	18800ce0 	cmpeqi	r2,r3,51
  8047e0:	1000251e 	bne	r2,zero,804878 <ParseAndProgramLine+0x150>
  8047e4:	00003506 	br	8048bc <ParseAndProgramLine+0x194>
  {
    case '0': /* Ignore S0 (header/filename) lines. */
      return( 0 );
  8047e8:	e03fff15 	stw	zero,-4(fp)
  8047ec:	00007706 	br	8049cc <ParseAndProgramLine+0x2a4>
    case '1':
      if( sscanf( lineBuf, "S1%2x%4x", &byte_count, &target_addr) != 2 )
  8047f0:	e1bfe604 	addi	r6,fp,-104
  8047f4:	e1ffe504 	addi	r7,fp,-108
  8047f8:	e13ffc17 	ldw	r4,-16(fp)
  8047fc:	01402174 	movhi	r5,133
  804800:	296eda04 	addi	r5,r5,-17560
  804804:	0807c980 	call	807c98 <sscanf>
  804808:	108000a0 	cmpeqi	r2,r2,2
  80480c:	1000061e 	bne	r2,zero,804828 <ParseAndProgramLine+0x100>
      {
        printf("\nSREC Error:  Error scanning S1 type.\n");
  804810:	01002174 	movhi	r4,133
  804814:	212edd04 	addi	r4,r4,-17548
  804818:	08077600 	call	807760 <puts>
        return( 11 );
  80481c:	008002c4 	movi	r2,11
  804820:	e0bfff15 	stw	r2,-4(fp)
  804824:	00006906 	br	8049cc <ParseAndProgramLine+0x2a4>
      }
      overhead = 3;
  804828:	008000c4 	movi	r2,3
  80482c:	e0bfe215 	stw	r2,-120(fp)
      break;
  804830:	00002406 	br	8048c4 <ParseAndProgramLine+0x19c>
    case '2':
      if( sscanf( lineBuf, "S2%2x%6x", &byte_count, &target_addr) != 2 )
  804834:	e1bfe604 	addi	r6,fp,-104
  804838:	e1ffe504 	addi	r7,fp,-108
  80483c:	e13ffc17 	ldw	r4,-16(fp)
  804840:	01402174 	movhi	r5,133
  804844:	296ee704 	addi	r5,r5,-17508
  804848:	0807c980 	call	807c98 <sscanf>
  80484c:	108000a0 	cmpeqi	r2,r2,2
  804850:	1000061e 	bne	r2,zero,80486c <ParseAndProgramLine+0x144>
      {
        printf("\nSREC Error:  Error scanning S2 type.\n");
  804854:	01002174 	movhi	r4,133
  804858:	212eea04 	addi	r4,r4,-17496
  80485c:	08077600 	call	807760 <puts>
        return( 12 );
  804860:	00c00304 	movi	r3,12
  804864:	e0ffff15 	stw	r3,-4(fp)
  804868:	00005806 	br	8049cc <ParseAndProgramLine+0x2a4>
      }
      overhead = 4;
  80486c:	00800104 	movi	r2,4
  804870:	e0bfe215 	stw	r2,-120(fp)
      break;
  804874:	00001306 	br	8048c4 <ParseAndProgramLine+0x19c>
    case '3':
      if( sscanf( lineBuf, "S3%2x%8x", &byte_count, &target_addr) != 2 )
  804878:	e1bfe604 	addi	r6,fp,-104
  80487c:	e1ffe504 	addi	r7,fp,-108
  804880:	e13ffc17 	ldw	r4,-16(fp)
  804884:	01402174 	movhi	r5,133
  804888:	296ef404 	addi	r5,r5,-17456
  80488c:	0807c980 	call	807c98 <sscanf>
  804890:	108000a0 	cmpeqi	r2,r2,2
  804894:	1000061e 	bne	r2,zero,8048b0 <ParseAndProgramLine+0x188>
      {
        printf("\nSREC Error:  Error scanning S3 type.\n");
  804898:	01002174 	movhi	r4,133
  80489c:	212ef704 	addi	r4,r4,-17444
  8048a0:	08077600 	call	807760 <puts>
        return( 13 );
  8048a4:	00800344 	movi	r2,13
  8048a8:	e0bfff15 	stw	r2,-4(fp)
  8048ac:	00004706 	br	8049cc <ParseAndProgramLine+0x2a4>
      }
      overhead = 5;
  8048b0:	00800144 	movi	r2,5
  8048b4:	e0bfe215 	stw	r2,-120(fp)
      break;
  8048b8:	00000206 	br	8048c4 <ParseAndProgramLine+0x19c>
      
    default:
      return( 0 );
  8048bc:	e03fff15 	stw	zero,-4(fp)
  8048c0:	00004206 	br	8049cc <ParseAndProgramLine+0x2a4>
  }
  
  data_len = byte_count - overhead; /* The amount of data in this SREC line. */
  8048c4:	e0ffe617 	ldw	r3,-104(fp)
  8048c8:	e0bfe217 	ldw	r2,-120(fp)
  8048cc:	1885c83a 	sub	r2,r3,r2
  8048d0:	e0bfe015 	stw	r2,-128(fp)
  data_ptr = data; /* Initialize the data pointer */
  8048d4:	e0bfe804 	addi	r2,fp,-96
  8048d8:	e0bfe115 	stw	r2,-124(fp)
  
  cksm = 0;
  8048dc:	e03fe405 	stb	zero,-112(fp)
  byte_count++; /* Add one to counter to read the final checksum, as well. */
  8048e0:	e0bfe617 	ldw	r2,-104(fp)
  8048e4:	10800044 	addi	r2,r2,1
  8048e8:	e0bfe615 	stw	r2,-104(fp)
  
  for( i = 1; i <= byte_count; i++ )
  8048ec:	00800044 	movi	r2,1
  8048f0:	e0bfe315 	stw	r2,-116(fp)
  8048f4:	00001e06 	br	804970 <ParseAndProgramLine+0x248>
  {
    sscanf( lineBuf + i*2, "%2x", &temp ); /* Do the hex->binary conversion.*/
  8048f8:	e0bfe317 	ldw	r2,-116(fp)
  8048fc:	1085883a 	add	r2,r2,r2
  804900:	1007883a 	mov	r3,r2
  804904:	e0bffc17 	ldw	r2,-16(fp)
  804908:	1889883a 	add	r4,r3,r2
  80490c:	e1bfe704 	addi	r6,fp,-100
  804910:	01402174 	movhi	r5,133
  804914:	296f0104 	addi	r5,r5,-17404
  804918:	0807c980 	call	807c98 <sscanf>
    cksm += (unsigned char) temp; /* Rolling checksum addition. */
  80491c:	e0bfe717 	ldw	r2,-100(fp)
  804920:	1007883a 	mov	r3,r2
  804924:	e0bfe403 	ldbu	r2,-112(fp)
  804928:	1885883a 	add	r2,r3,r2
  80492c:	e0bfe405 	stb	r2,-112(fp)
    if( ( i > overhead ) && ( i < byte_count )) /* Copy data into data buffer. */
  804930:	e0ffe317 	ldw	r3,-116(fp)
  804934:	e0bfe217 	ldw	r2,-120(fp)
  804938:	10c00a0e 	bge	r2,r3,804964 <ParseAndProgramLine+0x23c>
  80493c:	e0ffe617 	ldw	r3,-104(fp)
  804940:	e0bfe317 	ldw	r2,-116(fp)
  804944:	10c0070e 	bge	r2,r3,804964 <ParseAndProgramLine+0x23c>
    {
      *data_ptr++ = (unsigned char) temp; /* Copy value into the data buffer. */
  804948:	e0bfe717 	ldw	r2,-100(fp)
  80494c:	1007883a 	mov	r3,r2
  804950:	e0bfe117 	ldw	r2,-124(fp)
  804954:	10c00005 	stb	r3,0(r2)
  804958:	e0bfe117 	ldw	r2,-124(fp)
  80495c:	10800044 	addi	r2,r2,1
  804960:	e0bfe115 	stw	r2,-124(fp)
  data_ptr = data; /* Initialize the data pointer */
  
  cksm = 0;
  byte_count++; /* Add one to counter to read the final checksum, as well. */
  
  for( i = 1; i <= byte_count; i++ )
  804964:	e0bfe317 	ldw	r2,-116(fp)
  804968:	10800044 	addi	r2,r2,1
  80496c:	e0bfe315 	stw	r2,-116(fp)
  804970:	e0ffe617 	ldw	r3,-104(fp)
  804974:	e0bfe317 	ldw	r2,-116(fp)
  804978:	18bfdf0e 	bge	r3,r2,8048f8 <ParseAndProgramLine+0x1d0>
    if( ( i > overhead ) && ( i < byte_count )) /* Copy data into data buffer. */
    {
      *data_ptr++ = (unsigned char) temp; /* Copy value into the data buffer. */
    }
  }
  if( cksm += 1 ) /* Catch checksum error. */
  80497c:	e0bfe403 	ldbu	r2,-112(fp)
  804980:	10800044 	addi	r2,r2,1
  804984:	e0bfe405 	stb	r2,-112(fp)
  804988:	e0bfe407 	ldb	r2,-112(fp)
  80498c:	1005003a 	cmpeq	r2,r2,zero
  804990:	1000031e 	bne	r2,zero,8049a0 <ParseAndProgramLine+0x278>
  {
    return( 14 );
  804994:	00c00384 	movi	r3,14
  804998:	e0ffff15 	stw	r3,-4(fp)
  80499c:	00000b06 	br	8049cc <ParseAndProgramLine+0x2a4>
  }
  
  if (ProgFlash( flash_info, target_addr, data, data_len) != 0)
  8049a0:	e17fe517 	ldw	r5,-108(fp)
  8049a4:	e1bfe804 	addi	r6,fp,-96
  8049a8:	e13ffd17 	ldw	r4,-12(fp)
  8049ac:	e1ffe017 	ldw	r7,-128(fp)
  8049b0:	08044840 	call	804484 <ProgFlash>
  8049b4:	1005003a 	cmpeq	r2,r2,zero
  8049b8:	1000031e 	bne	r2,zero,8049c8 <ParseAndProgramLine+0x2a0>
  {
    printf("\nFLASH:  Error in flash programming.\n");
  8049bc:	01002174 	movhi	r4,133
  8049c0:	212f0204 	addi	r4,r4,-17400
  8049c4:	08077600 	call	807760 <puts>
  }
  
  return( 0 );
  8049c8:	e03fff15 	stw	zero,-4(fp)
  8049cc:	e0bfff17 	ldw	r2,-4(fp)
 }
  8049d0:	e037883a 	mov	sp,fp
  8049d4:	dfc00117 	ldw	ra,4(sp)
  8049d8:	df000017 	ldw	fp,0(sp)
  8049dc:	dec00204 	addi	sp,sp,8
  8049e0:	f800283a 	ret

008049e4 <ParseSRECBuf>:
 * 
 * 
 ******************************************************************/
 
int ParseSRECBuf(struct flash_inf_struct *flash_info)
{
  8049e4:	deff7604 	addi	sp,sp,-552
  8049e8:	dfc08915 	stw	ra,548(sp)
  8049ec:	df008815 	stw	fp,544(sp)
  8049f0:	df008804 	addi	fp,sp,544
  8049f4:	e13ffe15 	stw	r4,-8(fp)
  char* cur_ptr;
  char *lineBuf_ptr, *frag_end;
  int lineBuf_len = 0;
  8049f8:	e03f7a15 	stw	zero,-536(fp)
  char lineBuf[MAXLINE];
  char tmpStrBuf[MAXLINE];
  int ret_code;
  alt_u8 eol_flag = 0;
  8049fc:	e03f7805 	stb	zero,-544(fp)
  
  lineBuf_ptr = lineBuf; /* Point to beginning of line buffer. */
  804a00:	e0bf7e04 	addi	r2,fp,-520
  804a04:	e0bf7c15 	stw	r2,-528(fp)
  cur_ptr = flash_info->start; /* Point to the beginning of the SREC buffer. */
  804a08:	e0bffe17 	ldw	r2,-8(fp)
  804a0c:	10800017 	ldw	r2,0(r2)
  804a10:	e0bf7d15 	stw	r2,-524(fp)

  //printf( "cur_ptr = 0x%x\n", (int) cur_ptr );
  
  /* Iterate over entire buffer. */
  while( cur_ptr <= ( flash_info->start + flash_info->size ))
  804a14:	00007e06 	br	804c10 <ParseSRECBuf+0x22c>
  { 
    /* End of line processing follows. */
    if ( (*cur_ptr == '\r') || (*cur_ptr == '\n') )
  804a18:	e0bf7d17 	ldw	r2,-524(fp)
  804a1c:	10800003 	ldbu	r2,0(r2)
  804a20:	10803fcc 	andi	r2,r2,255
  804a24:	1080201c 	xori	r2,r2,128
  804a28:	10bfe004 	addi	r2,r2,-128
  804a2c:	10800360 	cmpeqi	r2,r2,13
  804a30:	1000071e 	bne	r2,zero,804a50 <ParseSRECBuf+0x6c>
  804a34:	e0bf7d17 	ldw	r2,-524(fp)
  804a38:	10800003 	ldbu	r2,0(r2)
  804a3c:	10803fcc 	andi	r2,r2,255
  804a40:	1080201c 	xori	r2,r2,128
  804a44:	10bfe004 	addi	r2,r2,-128
  804a48:	10800298 	cmpnei	r2,r2,10
  804a4c:	1000661e 	bne	r2,zero,804be8 <ParseSRECBuf+0x204>
    {
      /* Exception for when \r\n span buffers. */
      if ( (cur_ptr == flash_info->start) && (*cur_ptr == '\n') && (frag.len == 0))
  804a50:	e0bffe17 	ldw	r2,-8(fp)
  804a54:	10c00017 	ldw	r3,0(r2)
  804a58:	e0bf7d17 	ldw	r2,-524(fp)
  804a5c:	18800c1e 	bne	r3,r2,804a90 <ParseSRECBuf+0xac>
  804a60:	e0bf7d17 	ldw	r2,-524(fp)
  804a64:	10800003 	ldbu	r2,0(r2)
  804a68:	10803fcc 	andi	r2,r2,255
  804a6c:	1080201c 	xori	r2,r2,128
  804a70:	10bfe004 	addi	r2,r2,-128
  804a74:	10800298 	cmpnei	r2,r2,10
  804a78:	1000051e 	bne	r2,zero,804a90 <ParseSRECBuf+0xac>
  804a7c:	008038f4 	movhi	r2,227
  804a80:	10b9cd04 	addi	r2,r2,-6348
  804a84:	10800017 	ldw	r2,0(r2)
  804a88:	1005003a 	cmpeq	r2,r2,zero
  804a8c:	1000601e 	bne	r2,zero,804c10 <ParseSRECBuf+0x22c>
        /* Dont' do anything when '\n' is the first character received and
         * there's no data in the frag (line fragment) structure.
         */
        continue;
      }
      eol_flag = 1; /* Set the End of Line flag to 1. */
  804a90:	00800044 	movi	r2,1
  804a94:	e0bf7805 	stb	r2,-544(fp)
      *lineBuf_ptr = 0; /* Terminate the Line String...do not include CR/LFs. */
  804a98:	e0bf7c17 	ldw	r2,-528(fp)
  804a9c:	10000005 	stb	zero,0(r2)
      lineBuf_len = lineBuf_ptr - lineBuf;
  804aa0:	e0ff7c17 	ldw	r3,-528(fp)
  804aa4:	e0bf7e04 	addi	r2,fp,-520
  804aa8:	1885c83a 	sub	r2,r3,r2
  804aac:	e0bf7a15 	stw	r2,-536(fp)
      if ( frag.len > 0 ) /* We have leftovers from the last buffer parsed. */
  804ab0:	008038f4 	movhi	r2,227
  804ab4:	10b9cd04 	addi	r2,r2,-6348
  804ab8:	10800017 	ldw	r2,0(r2)
  804abc:	10800050 	cmplti	r2,r2,1
  804ac0:	10001f1e 	bne	r2,zero,804b40 <ParseSRECBuf+0x15c>
      {
        if ( lineBuf_len != 0 ) /* If the line buffer has a partial line. */
  804ac4:	e0bf7a17 	ldw	r2,-536(fp)
  804ac8:	1005003a 	cmpeq	r2,r2,zero
  804acc:	1000111e 	bne	r2,zero,804b14 <ParseSRECBuf+0x130>
        {
          /* A little bit of string shuffling to get things in the right order. */
          strcpy( tmpStrBuf, frag.data );
  804ad0:	e13fbe04 	addi	r4,fp,-264
  804ad4:	014038f4 	movhi	r5,227
  804ad8:	2979ce04 	addi	r5,r5,-6344
  804adc:	08081440 	call	808144 <strcpy>
          strcat( tmpStrBuf, lineBuf ); /* Concatenate the lineBuf to the leftovers. */
  804ae0:	e13fbe04 	addi	r4,fp,-264
  804ae4:	e17f7e04 	addi	r5,fp,-520
  804ae8:	0807f180 	call	807f18 <strcat>
          strcpy( lineBuf, tmpStrBuf ); /* Should have a line's worth of data, now. */
  804aec:	e13f7e04 	addi	r4,fp,-520
  804af0:	e17fbe04 	addi	r5,fp,-264
  804af4:	08081440 	call	808144 <strcpy>
          lineBuf_len = lineBuf_len + frag.len; /* Update the actual line buffer length. */
  804af8:	008038f4 	movhi	r2,227
  804afc:	10b9cd04 	addi	r2,r2,-6348
  804b00:	10c00017 	ldw	r3,0(r2)
  804b04:	e0bf7a17 	ldw	r2,-536(fp)
  804b08:	10c5883a 	add	r2,r2,r3
  804b0c:	e0bf7a15 	stw	r2,-536(fp)
  804b10:	00000806 	br	804b34 <ParseSRECBuf+0x150>
        else /* If the entire line is in frag.data. */
        {
          /* This case is possible when the buffer is '\n' terminated and
           * '\n' is the first character received in a new buffer.
           */
          strcpy( lineBuf, frag.data );
  804b14:	e13f7e04 	addi	r4,fp,-520
  804b18:	014038f4 	movhi	r5,227
  804b1c:	2979ce04 	addi	r5,r5,-6344
  804b20:	08081440 	call	808144 <strcpy>
          lineBuf_len = frag.len;
  804b24:	008038f4 	movhi	r2,227
  804b28:	10b9cd04 	addi	r2,r2,-6348
  804b2c:	10800017 	ldw	r2,0(r2)
  804b30:	e0bf7a15 	stw	r2,-536(fp)
        }
        frag.len = 0; /* The line fragment has been copied into lineBuf. */
  804b34:	008038f4 	movhi	r2,227
  804b38:	10b9cd04 	addi	r2,r2,-6348
  804b3c:	10000015 	stw	zero,0(r2)
      }
      ++line_count;
  804b40:	d0a05f17 	ldw	r2,-32388(gp)
  804b44:	10800044 	addi	r2,r2,1
  804b48:	d0a05f15 	stw	r2,-32388(gp)
      /* Since a full (hopefully valid) line has been received, parse it and
       * program it to flash.
       */
      if( (ret_code = ParseAndProgramLine( lineBuf, flash_info)) )
  804b4c:	e13f7e04 	addi	r4,fp,-520
  804b50:	e17ffe17 	ldw	r5,-8(fp)
  804b54:	08047280 	call	804728 <ParseAndProgramLine>
  804b58:	e0bf7915 	stw	r2,-540(fp)
  804b5c:	e0bf7917 	ldw	r2,-540(fp)
  804b60:	1005003a 	cmpeq	r2,r2,zero
  804b64:	1000071e 	bne	r2,zero,804b84 <ParseSRECBuf+0x1a0>
      {
        printf("SREC ERR:  SREC Line Parser returned Error %d.\n", ret_code);
  804b68:	01002174 	movhi	r4,133
  804b6c:	212f0c04 	addi	r4,r4,-17360
  804b70:	e17f7917 	ldw	r5,-540(fp)
  804b74:	08076480 	call	807648 <printf>
        return( -1 );
  804b78:	00bfffc4 	movi	r2,-1
  804b7c:	e0bfff15 	stw	r2,-4(fp)
  804b80:	00004206 	br	804c8c <ParseSRECBuf+0x2a8>
      }
      lineBuf_ptr = lineBuf; /* Reset the line buffer pointer. */
  804b84:	e0bf7e04 	addi	r2,fp,-520
  804b88:	e0bf7c15 	stw	r2,-528(fp)
      eol_flag = 0; /* Reset the end of line flag. */
  804b8c:	e03f7805 	stb	zero,-544(fp)
      /* Need to skip over the end of line markers.
       *    - Both '\n' (UNIX) and '\r\n' (DOS) are supported. */
      if ( (*cur_ptr == '\r') )
  804b90:	e0bf7d17 	ldw	r2,-524(fp)
  804b94:	10800003 	ldbu	r2,0(r2)
  804b98:	10803fcc 	andi	r2,r2,255
  804b9c:	1080201c 	xori	r2,r2,128
  804ba0:	10bfe004 	addi	r2,r2,-128
  804ba4:	10800358 	cmpnei	r2,r2,13
  804ba8:	1000041e 	bne	r2,zero,804bbc <ParseSRECBuf+0x1d8>
      {
        cur_ptr = cur_ptr + 2;
  804bac:	e0bf7d17 	ldw	r2,-524(fp)
  804bb0:	10800084 	addi	r2,r2,2
  804bb4:	e0bf7d15 	stw	r2,-524(fp)
  804bb8:	00001506 	br	804c10 <ParseSRECBuf+0x22c>
      }
      else if ( (*cur_ptr == '\n' ))
  804bbc:	e0bf7d17 	ldw	r2,-524(fp)
  804bc0:	10800003 	ldbu	r2,0(r2)
  804bc4:	10803fcc 	andi	r2,r2,255
  804bc8:	1080201c 	xori	r2,r2,128
  804bcc:	10bfe004 	addi	r2,r2,-128
  804bd0:	10800298 	cmpnei	r2,r2,10
  804bd4:	10000e1e 	bne	r2,zero,804c10 <ParseSRECBuf+0x22c>
      {
        ++cur_ptr;
  804bd8:	e0bf7d17 	ldw	r2,-524(fp)
  804bdc:	10800044 	addi	r2,r2,1
  804be0:	e0bf7d15 	stw	r2,-524(fp)
  
  /* Iterate over entire buffer. */
  while( cur_ptr <= ( flash_info->start + flash_info->size ))
  { 
    /* End of line processing follows. */
    if ( (*cur_ptr == '\r') || (*cur_ptr == '\n') )
  804be4:	00000a06 	br	804c10 <ParseSRECBuf+0x22c>
      }
    }
    else
    {
      /* Filling the line buffer. */
      *lineBuf_ptr = *cur_ptr; /* Copy byte from current buffer to line buffer. */
  804be8:	e0bf7d17 	ldw	r2,-524(fp)
  804bec:	10c00003 	ldbu	r3,0(r2)
  804bf0:	e0bf7c17 	ldw	r2,-528(fp)
  804bf4:	10c00005 	stb	r3,0(r2)
      ++cur_ptr; /* Increment current buffer pointer. */
  804bf8:	e0bf7d17 	ldw	r2,-524(fp)
  804bfc:	10800044 	addi	r2,r2,1
  804c00:	e0bf7d15 	stw	r2,-524(fp)
      ++lineBuf_ptr; /* Increment the line buffer pointer. */
  804c04:	e0bf7c17 	ldw	r2,-528(fp)
  804c08:	10800044 	addi	r2,r2,1
  804c0c:	e0bf7c15 	stw	r2,-528(fp)
  cur_ptr = flash_info->start; /* Point to the beginning of the SREC buffer. */

  //printf( "cur_ptr = 0x%x\n", (int) cur_ptr );
  
  /* Iterate over entire buffer. */
  while( cur_ptr <= ( flash_info->start + flash_info->size ))
  804c10:	e0bffe17 	ldw	r2,-8(fp)
  804c14:	10c00017 	ldw	r3,0(r2)
  804c18:	e0bffe17 	ldw	r2,-8(fp)
  804c1c:	10800117 	ldw	r2,4(r2)
  804c20:	1887883a 	add	r3,r3,r2
  804c24:	e0bf7d17 	ldw	r2,-524(fp)
  804c28:	18bf7b2e 	bgeu	r3,r2,804a18 <ParseSRECBuf+0x34>
      *lineBuf_ptr = *cur_ptr; /* Copy byte from current buffer to line buffer. */
      ++cur_ptr; /* Increment current buffer pointer. */
      ++lineBuf_ptr; /* Increment the line buffer pointer. */
    }
  } /* End of while( cur_ptr <= ( buf + buf_size )) */
  if ( !eol_flag ) /* End of line wasn't reached, but end of buffer was. */
  804c2c:	e0bf7803 	ldbu	r2,-544(fp)
  804c30:	1004c03a 	cmpne	r2,r2,zero
  804c34:	1000141e 	bne	r2,zero,804c88 <ParseSRECBuf+0x2a4>
  {
    /* The following fills the frag (line fragment) data structure
     * which is prepended to the first line received in the next buffer.
     */
    frag.len = lineBuf_ptr - lineBuf; /* Length of line "fragment". */
  804c38:	e0ff7c17 	ldw	r3,-528(fp)
  804c3c:	e0bf7e04 	addi	r2,fp,-520
  804c40:	1887c83a 	sub	r3,r3,r2
  804c44:	008038f4 	movhi	r2,227
  804c48:	10b9cd04 	addi	r2,r2,-6348
  804c4c:	10c00015 	stw	r3,0(r2)
    strcpy( frag.data, lineBuf ); /* Store line fragment. */
  804c50:	e17f7e04 	addi	r5,fp,-520
  804c54:	010038f4 	movhi	r4,227
  804c58:	2139ce04 	addi	r4,r4,-6344
  804c5c:	08081440 	call	808144 <strcpy>
    frag_end = (char*) (frag.data + frag.len); /* End of the line fragment. */
  804c60:	008038f4 	movhi	r2,227
  804c64:	10b9cd04 	addi	r2,r2,-6348
  804c68:	10800017 	ldw	r2,0(r2)
  804c6c:	1007883a 	mov	r3,r2
  804c70:	008038f4 	movhi	r2,227
  804c74:	10b9ce04 	addi	r2,r2,-6344
  804c78:	1885883a 	add	r2,r3,r2
  804c7c:	e0bf7b15 	stw	r2,-532(fp)
    *frag_end = 0; /* Be sure fragment is a NULL terminated string. */
  804c80:	e0bf7b17 	ldw	r2,-532(fp)
  804c84:	10000005 	stb	zero,0(r2)
  }
  return( 0 );
  804c88:	e03fff15 	stw	zero,-4(fp)
  804c8c:	e0bfff17 	ldw	r2,-4(fp)
}
  804c90:	e037883a 	mov	sp,fp
  804c94:	dfc00117 	ldw	ra,4(sp)
  804c98:	df000017 	ldw	fp,0(sp)
  804c9c:	dec00204 	addi	sp,sp,8
  804ca0:	f800283a 	ret

00804ca4 <lcd_ip_addr>:
/* Function which displays the obtained (or assigned) IP
 * Address on the LCD Display.
 */
#ifdef LCD_DISPLAY_NAME
void lcd_ip_addr()
{
  804ca4:	defff404 	addi	sp,sp,-48
  804ca8:	dfc00b15 	stw	ra,44(sp)
  804cac:	df000a15 	stw	fp,40(sp)
  804cb0:	df000a04 	addi	fp,sp,40
  
  /* Assign ipaddr to the network interface's IP Address. 
   * NOTE:  This code assumes that only a single network
   * interface exists
   */
  ipaddr = &nets[0]->n_ipaddr;
  804cb4:	00803934 	movhi	r2,228
  804cb8:	10a79c04 	addi	r2,r2,-24976
  804cbc:	10800017 	ldw	r2,0(r2)
  804cc0:	10800a04 	addi	r2,r2,40
  804cc4:	e0bffb15 	stw	r2,-20(fp)
  
  /* Display the IP Address (initially) on the LCD Display. */

  	alt_up_character_lcd_dev *lcd = alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
  804cc8:	01002174 	movhi	r4,133
  804ccc:	212f1b04 	addi	r4,r4,-17300
  804cd0:	0821fcc0 	call	821fcc <alt_up_character_lcd_open_dev>
  804cd4:	e0bff915 	stw	r2,-28(fp)
  	alt_up_character_lcd_init(lcd);
  804cd8:	e13ff917 	ldw	r4,-28(fp)
  804cdc:	0821f980 	call	821f98 <alt_up_character_lcd_init>
  	bufferCheck = snprintf(ipBuffer,16, "%d.%d.%d.%d",
  804ce0:	e0bffb17 	ldw	r2,-20(fp)
  804ce4:	10800017 	ldw	r2,0(r2)
  804ce8:	1004d63a 	srli	r2,r2,24
  804cec:	10c03fcc 	andi	r3,r2,255
  804cf0:	e0bffb17 	ldw	r2,-20(fp)
  804cf4:	10800017 	ldw	r2,0(r2)
  804cf8:	1004d23a 	srli	r2,r2,8
  804cfc:	10bfc00c 	andi	r2,r2,65280
  804d00:	1886b03a 	or	r3,r3,r2
  804d04:	e0bffb17 	ldw	r2,-20(fp)
  804d08:	10800017 	ldw	r2,0(r2)
  804d0c:	10bfc00c 	andi	r2,r2,65280
  804d10:	1004923a 	slli	r2,r2,8
  804d14:	1886b03a 	or	r3,r3,r2
  804d18:	e0bffb17 	ldw	r2,-20(fp)
  804d1c:	10800017 	ldw	r2,0(r2)
  804d20:	10803fcc 	andi	r2,r2,255
  804d24:	1004963a 	slli	r2,r2,24
  804d28:	1884b03a 	or	r2,r3,r2
  804d2c:	1004d63a 	srli	r2,r2,24
  804d30:	11c03fcc 	andi	r7,r2,255
  804d34:	e0bffb17 	ldw	r2,-20(fp)
  804d38:	10800017 	ldw	r2,0(r2)
  804d3c:	1004d63a 	srli	r2,r2,24
  804d40:	10c03fcc 	andi	r3,r2,255
  804d44:	e0bffb17 	ldw	r2,-20(fp)
  804d48:	10800017 	ldw	r2,0(r2)
  804d4c:	1004d23a 	srli	r2,r2,8
  804d50:	10bfc00c 	andi	r2,r2,65280
  804d54:	1886b03a 	or	r3,r3,r2
  804d58:	e0bffb17 	ldw	r2,-20(fp)
  804d5c:	10800017 	ldw	r2,0(r2)
  804d60:	10bfc00c 	andi	r2,r2,65280
  804d64:	1004923a 	slli	r2,r2,8
  804d68:	1886b03a 	or	r3,r3,r2
  804d6c:	e0bffb17 	ldw	r2,-20(fp)
  804d70:	10800017 	ldw	r2,0(r2)
  804d74:	10803fcc 	andi	r2,r2,255
  804d78:	1004963a 	slli	r2,r2,24
  804d7c:	1884b03a 	or	r2,r3,r2
  804d80:	1004d43a 	srli	r2,r2,16
  804d84:	11403fcc 	andi	r5,r2,255
  804d88:	e0bffb17 	ldw	r2,-20(fp)
  804d8c:	10800017 	ldw	r2,0(r2)
  804d90:	1004d63a 	srli	r2,r2,24
  804d94:	10c03fcc 	andi	r3,r2,255
  804d98:	e0bffb17 	ldw	r2,-20(fp)
  804d9c:	10800017 	ldw	r2,0(r2)
  804da0:	1004d23a 	srli	r2,r2,8
  804da4:	10bfc00c 	andi	r2,r2,65280
  804da8:	1886b03a 	or	r3,r3,r2
  804dac:	e0bffb17 	ldw	r2,-20(fp)
  804db0:	10800017 	ldw	r2,0(r2)
  804db4:	10bfc00c 	andi	r2,r2,65280
  804db8:	1004923a 	slli	r2,r2,8
  804dbc:	1886b03a 	or	r3,r3,r2
  804dc0:	e0bffb17 	ldw	r2,-20(fp)
  804dc4:	10800017 	ldw	r2,0(r2)
  804dc8:	10803fcc 	andi	r2,r2,255
  804dcc:	1004963a 	slli	r2,r2,24
  804dd0:	1884b03a 	or	r2,r3,r2
  804dd4:	1004d23a 	srli	r2,r2,8
  804dd8:	11803fcc 	andi	r6,r2,255
  804ddc:	e0bffb17 	ldw	r2,-20(fp)
  804de0:	10800017 	ldw	r2,0(r2)
  804de4:	1004d63a 	srli	r2,r2,24
  804de8:	10c03fcc 	andi	r3,r2,255
  804dec:	e0bffb17 	ldw	r2,-20(fp)
  804df0:	10800017 	ldw	r2,0(r2)
  804df4:	1004d23a 	srli	r2,r2,8
  804df8:	10bfc00c 	andi	r2,r2,65280
  804dfc:	1886b03a 	or	r3,r3,r2
  804e00:	e0bffb17 	ldw	r2,-20(fp)
  804e04:	10800017 	ldw	r2,0(r2)
  804e08:	10bfc00c 	andi	r2,r2,65280
  804e0c:	1004923a 	slli	r2,r2,8
  804e10:	1886b03a 	or	r3,r3,r2
  804e14:	e0bffb17 	ldw	r2,-20(fp)
  804e18:	10800017 	ldw	r2,0(r2)
  804e1c:	10803fcc 	andi	r2,r2,255
  804e20:	1004963a 	slli	r2,r2,24
  804e24:	1884b03a 	or	r2,r3,r2
  804e28:	10803fcc 	andi	r2,r2,255
  804e2c:	e13ffc04 	addi	r4,fp,-16
  804e30:	d9400015 	stw	r5,0(sp)
  804e34:	d9800115 	stw	r6,4(sp)
  804e38:	d8800215 	stw	r2,8(sp)
  804e3c:	01400404 	movi	r5,16
  804e40:	01802174 	movhi	r6,133
  804e44:	31af2104 	addi	r6,r6,-17276
  804e48:	08079c40 	call	8079c4 <snprintf>
  804e4c:	e0bffa15 	stw	r2,-24(fp)
  	        ip4_addr1(*ipaddr),
  	        ip4_addr2(*ipaddr),
  	        ip4_addr3(*ipaddr),
  	        ip4_addr4(*ipaddr));
  	if(bufferCheck >= 0 && bufferCheck < 16){
  804e50:	e0bffa17 	ldw	r2,-24(fp)
  804e54:	1004803a 	cmplt	r2,r2,zero
  804e58:	1000071e 	bne	r2,zero,804e78 <lcd_ip_addr+0x1d4>
  804e5c:	e0bffa17 	ldw	r2,-24(fp)
  804e60:	10800408 	cmpgei	r2,r2,16
  804e64:	1000041e 	bne	r2,zero,804e78 <lcd_ip_addr+0x1d4>
  		alt_up_character_lcd_string(lcd, ipBuffer);
  804e68:	e17ffc04 	addi	r5,fp,-16
  804e6c:	e13ff917 	ldw	r4,-28(fp)
  804e70:	08220840 	call	822084 <alt_up_character_lcd_string>
  	bufferCheck = snprintf(ipBuffer,16, "%d.%d.%d.%d",
  	        ip4_addr1(*ipaddr),
  	        ip4_addr2(*ipaddr),
  	        ip4_addr3(*ipaddr),
  	        ip4_addr4(*ipaddr));
  	if(bufferCheck >= 0 && bufferCheck < 16){
  804e74:	00000406 	br	804e88 <lcd_ip_addr+0x1e4>
  		alt_up_character_lcd_string(lcd, ipBuffer);
  	} else {
  		alt_up_character_lcd_string(lcd, "Error with IP");
  804e78:	e13ff917 	ldw	r4,-28(fp)
  804e7c:	01402174 	movhi	r5,133
  804e80:	296f2404 	addi	r5,r5,-17264
  804e84:	08220840 	call	822084 <alt_up_character_lcd_string>
  	}
}
  804e88:	e037883a 	mov	sp,fp
  804e8c:	dfc00117 	ldw	ra,4(sp)
  804e90:	df000017 	ldw	fp,0(sp)
  804e94:	dec00204 	addi	sp,sp,8
  804e98:	f800283a 	ret

00804e9c <WSInitialTask>:
/* WSInitialTask will initialize the NichStack TCP/IP stack and then initialize
 * the rest of the web server example tasks.
 */

void WSInitialTask(void* pdata)
{
  804e9c:	defffc04 	addi	sp,sp,-16
  804ea0:	dfc00315 	stw	ra,12(sp)
  804ea4:	df000215 	stw	fp,8(sp)
  804ea8:	df000204 	addi	fp,sp,8
  804eac:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_NO_ERR;
  804eb0:	e03ffe05 	stb	zero,-8(fp)
  * NicheStack is initialized from a task, so that RTOS will have started, and 
  * I/O drivers are available.  Two tasks are created:
  *    "Inet main"  task with priority 2
  *    "clock tick" task with priority 3
  */   
  alt_iniche_init();
  804eb4:	082aef00 	call	82aef0 <alt_iniche_init>
  /* Start the Iniche-specific network tasks and initialize the network
   * devices.
   */
  netmain(); 
  804eb8:	08261380 	call	826138 <netmain>
  /* Wait for the network stack to be ready before proceeding. */
  while (!iniche_net_ready)
  804ebc:	00000206 	br	804ec8 <WSInitialTask+0x2c>
    TK_SLEEP(1);
  804ec0:	01000084 	movi	r4,2
  804ec4:	081fc800 	call	81fc80 <OSTimeDly>
  /* Start the Iniche-specific network tasks and initialize the network
   * devices.
   */
  netmain(); 
  /* Wait for the network stack to be ready before proceeding. */
  while (!iniche_net_ready)
  804ec8:	00802174 	movhi	r2,133
  804ecc:	10830a04 	addi	r2,r2,3112
  804ed0:	10800017 	ldw	r2,0(r2)
  804ed4:	1005003a 	cmpeq	r2,r2,zero
  804ed8:	103ff91e 	bne	r2,zero,804ec0 <WSInitialTask+0x24>
    TK_SLEEP(1);

  /* Create the main network task.  In this case, a web server. */
  TK_NEWTASK(&wstask);
  804edc:	01002174 	movhi	r4,133
  804ee0:	213b1d04 	addi	r4,r4,-5004
  804ee4:	082abb00 	call	82abb0 <TK_NEWTASK>

  /* Application specific code starts here... */
  
  /*Create Tasks*/
  WSCreateTasks();
  804ee8:	08050240 	call	805024 <WSCreateTasks>
  printf("\nWeb Server starting up\n");
  804eec:	01002174 	movhi	r4,133
  804ef0:	212f2804 	addi	r4,r4,-17248
  804ef4:	08077600 	call	807760 <puts>
  /* Application specific code ends here. */

  /* Display the IP Address on the LCD Display. */
  #ifdef LCD_DISPLAY_NAME
  lcd_ip_addr();
  804ef8:	0804ca40 	call	804ca4 <lcd_ip_addr>
  #endif
  /*This task deletes itself, since there's no reason to keep it around, once
   *it's complete.
   */
  error_code = OSTaskDel(OS_PRIO_SELF);
  804efc:	01003fc4 	movi	r4,255
  804f00:	081eb880 	call	81eb88 <OSTaskDel>
  804f04:	e0bffe05 	stb	r2,-8(fp)
  alt_uCOSIIErrorHandler(error_code, 0);
  804f08:	e13ffe03 	ldbu	r4,-8(fp)
  804f0c:	000b883a 	mov	r5,zero
  804f10:	08000480 	call	800048 <alt_uCOSIIErrorHandler>

  while(1); /*Correct Program Flow should not reach here.*/
  804f14:	003fff06 	br	804f14 <WSInitialTask+0x78>

00804f18 <main>:
 * 
 */
OS_EVENT *board_control_mbox;

int main (int argc, char* argv[], char* envp[])
{
  804f18:	deffec04 	addi	sp,sp,-80
  804f1c:	dfc01315 	stw	ra,76(sp)
  804f20:	df001215 	stw	fp,72(sp)
  804f24:	df001204 	addi	fp,sp,72
  804f28:	e13ffd15 	stw	r4,-12(fp)
  804f2c:	e17ffe15 	stw	r5,-8(fp)
  804f30:	e1bfff15 	stw	r6,-4(fp)
  /* Initialize the current flash block, for flash programming. */
	DM9000A_INSTANCE(DM9000A_IF_0,dm9000a_0);
  804f34:	e03ff615 	stw	zero,-40(fp)
  804f38:	e03ff715 	stw	zero,-36(fp)
  804f3c:	e03ff815 	stw	zero,-32(fp)
  804f40:	e03ff915 	stw	zero,-28(fp)
  804f44:	e03ffa15 	stw	zero,-24(fp)
  804f48:	e03ffb15 	stw	zero,-20(fp)
  804f4c:	e03ffc15 	stw	zero,-16(fp)
  804f50:	00802174 	movhi	r2,133
  804f54:	10af2e04 	addi	r2,r2,-17224
  804f58:	e0bff815 	stw	r2,-32(fp)
  804f5c:	00802034 	movhi	r2,128
  804f60:	10831304 	addi	r2,r2,3148
  804f64:	e0bff915 	stw	r2,-28(fp)
  804f68:	00802174 	movhi	r2,133
  804f6c:	1082ac04 	addi	r2,r2,2736
  804f70:	e0bff315 	stw	r2,-52(fp)
  804f74:	e0bff604 	addi	r2,fp,-40
  804f78:	e0bff415 	stw	r2,-48(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804f7c:	e0fff417 	ldw	r3,-48(fp)
  804f80:	e0bff317 	ldw	r2,-52(fp)
  804f84:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  804f88:	e0bff317 	ldw	r2,-52(fp)
  804f8c:	10c00017 	ldw	r3,0(r2)
  804f90:	e0bff417 	ldw	r2,-48(fp)
  804f94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804f98:	e0bff317 	ldw	r2,-52(fp)
  804f9c:	10c00017 	ldw	r3,0(r2)
  804fa0:	e0bff417 	ldw	r2,-48(fp)
  804fa4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  804fa8:	e0fff317 	ldw	r3,-52(fp)
  804fac:	e0bff417 	ldw	r2,-48(fp)
  804fb0:	18800015 	stw	r2,0(r3)
	DM9000A_INIT(DM9000A_IF_0,dm9000a_0);
  
  current_flash_block = -1;
  804fb4:	00c02174 	movhi	r3,133
  804fb8:	18c2d604 	addi	r3,r3,2904
  804fbc:	00bfffc4 	movi	r2,-1
  804fc0:	18800015 	stw	r2,0(r3)
  
  INT8U error_code;

  /* Clear the RTOS timer */
  OSTimeSet(0);
  804fc4:	0009883a 	mov	r4,zero
  804fc8:	08201b40 	call	8201b4 <OSTimeSet>
  
  /* WSInitialTask will initialize the NicheStack TCP/IP Stack and then 
   * initialize the rest of the web server's tasks.
   */ 

  error_code = OSTaskCreateExt(WSInitialTask,
  804fcc:	018038f4 	movhi	r6,227
  804fd0:	318a0d04 	addi	r6,r6,10292
  804fd4:	00800144 	movi	r2,5
  804fd8:	d8800015 	stw	r2,0(sp)
  804fdc:	008038f4 	movhi	r2,227
  804fe0:	10820e04 	addi	r2,r2,2104
  804fe4:	d8800115 	stw	r2,4(sp)
  804fe8:	00820004 	movi	r2,2048
  804fec:	d8800215 	stw	r2,8(sp)
  804ff0:	d8000315 	stw	zero,12(sp)
  804ff4:	d8000415 	stw	zero,16(sp)
  804ff8:	01002034 	movhi	r4,128
  804ffc:	2113a704 	addi	r4,r4,20124
  805000:	000b883a 	mov	r5,zero
  805004:	01c00144 	movi	r7,5
  805008:	081e9880 	call	81e988 <OSTaskCreateExt>
  80500c:	e0bff505 	stb	r2,-44(fp)
                             WS_INITIAL_TASK_PRIO,
                             WSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
  805010:	e13ff503 	ldbu	r4,-44(fp)
  805014:	000b883a 	mov	r5,zero
  805018:	08000480 	call	800048 <alt_uCOSIIErrorHandler>

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and 
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
  80501c:	0817f280 	call	817f28 <OSStart>
  
  while(1); /* Correct Program Flow never gets here. */
  805020:	003fff06 	br	805020 <main+0x108>

00805024 <WSCreateTasks>:

  return -1;
}

static void WSCreateTasks()
{
  805024:	defff804 	addi	sp,sp,-32
  805028:	dfc00715 	stw	ra,28(sp)
  80502c:	df000615 	stw	fp,24(sp)
  805030:	df000604 	addi	fp,sp,24
  INT8U error_code = OS_NO_ERR;
  805034:	e03fff05 	stb	zero,-4(fp)
  
  /* Start LED Task. */
  
  error_code = OSTaskCreateExt(LED_task,
  805038:	018038f4 	movhi	r6,227
  80503c:	31920d04 	addi	r6,r6,18484
  805040:	00800184 	movi	r2,6
  805044:	d8800015 	stw	r2,0(sp)
  805048:	008038f4 	movhi	r2,227
  80504c:	108a0e04 	addi	r2,r2,10296
  805050:	d8800115 	stw	r2,4(sp)
  805054:	00820004 	movi	r2,2048
  805058:	d8800215 	stw	r2,8(sp)
  80505c:	d8000315 	stw	zero,12(sp)
  805060:	d8000415 	stw	zero,16(sp)
  805064:	01002034 	movhi	r4,128
  805068:	21148004 	addi	r4,r4,20992
  80506c:	000b883a 	mov	r5,zero
  805070:	01c00184 	movi	r7,6
  805074:	081e9880 	call	81e988 <OSTaskCreateExt>
  805078:	e0bfff05 	stb	r2,-4(fp)
                             LED_PRIO,
                             LEDTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
  80507c:	e13fff03 	ldbu	r4,-4(fp)
  805080:	000b883a 	mov	r5,zero
  805084:	08000480 	call	800048 <alt_uCOSIIErrorHandler>
  alt_uCOSIIErrorHandler(error_code, 0);
  #endif
  
  /* Start Board Control Task. */
  
  error_code = OSTaskCreateExt(board_control_task,
  805088:	018038f4 	movhi	r6,227
  80508c:	319a0d04 	addi	r6,r6,26676
  805090:	00800204 	movi	r2,8
  805094:	d8800015 	stw	r2,0(sp)
  805098:	008038f4 	movhi	r2,227
  80509c:	10920e04 	addi	r2,r2,18488
  8050a0:	d8800115 	stw	r2,4(sp)
  8050a4:	00820004 	movi	r2,2048
  8050a8:	d8800215 	stw	r2,8(sp)
  8050ac:	d8000315 	stw	zero,12(sp)
  8050b0:	d8000415 	stw	zero,16(sp)
  8050b4:	01002034 	movhi	r4,128
  8050b8:	21145a04 	addi	r4,r4,20840
  8050bc:	000b883a 	mov	r5,zero
  8050c0:	01c00204 	movi	r7,8
  8050c4:	081e9880 	call	81e988 <OSTaskCreateExt>
  8050c8:	e0bfff05 	stb	r2,-4(fp)
                             BOARD_PRIO,
                             BCTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
  8050cc:	e13fff03 	ldbu	r4,-4(fp)
  8050d0:	000b883a 	mov	r5,zero
  8050d4:	08000480 	call	800048 <alt_uCOSIIErrorHandler>
  
  /* Suspend both the LED and SSD tasks on start. */
  
  OSTaskSuspend(LED_PRIO);
  8050d8:	01000184 	movi	r4,6
  8050dc:	081f8940 	call	81f894 <OSTaskSuspend>
  OSTaskSuspend(SSD_PRIO);
  8050e0:	010001c4 	movi	r4,7
  8050e4:	081f8940 	call	81f894 <OSTaskSuspend>

  /* The web server task is started by the Interniche stack, as the "main" network servicing task. */
  
}
  8050e8:	e037883a 	mov	sp,fp
  8050ec:	dfc00117 	ldw	ra,4(sp)
  8050f0:	df000017 	ldw	fp,0(sp)
  8050f4:	dec00204 	addi	sp,sp,8
  8050f8:	f800283a 	ret

008050fc <lcd_output_text>:

#ifdef LCD_DISPLAY_NAME
void lcd_output_text( char text[20] )
{
  8050fc:	defffc04 	addi	sp,sp,-16
  805100:	dfc00315 	stw	ra,12(sp)
  805104:	df000215 	stw	fp,8(sp)
  805108:	df000204 	addi	fp,sp,8
  80510c:	e13fff15 	stw	r4,-4(fp)
  /* If the incoming string is "ip_address" (case insensitive)
   * output the IP Address.  Otherwise, dump whatever's passed
   * into the text[] array.
   */
  if ( stricmp( text, "ip_address" ) == 0 )
  805110:	e13fff17 	ldw	r4,-4(fp)
  805114:	01402174 	movhi	r5,133
  805118:	296f3304 	addi	r5,r5,-17204
  80511c:	0807e680 	call	807e68 <strcasecmp>
  805120:	1004c03a 	cmpne	r2,r2,zero
  805124:	1000021e 	bne	r2,zero,805130 <lcd_output_text+0x34>
  {
    lcd_ip_addr();
  805128:	0804ca40 	call	804ca4 <lcd_ip_addr>
  80512c:	00000906 	br	805154 <lcd_output_text+0x58>
    trigger_reset();
  }
#endif
  else
  {
	  alt_up_character_lcd_dev *lcd = alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
  805130:	01002174 	movhi	r4,133
  805134:	212f1b04 	addi	r4,r4,-17300
  805138:	0821fcc0 	call	821fcc <alt_up_character_lcd_open_dev>
  80513c:	e0bffe15 	stw	r2,-8(fp)
	  alt_up_character_lcd_init(lcd);
  805140:	e13ffe17 	ldw	r4,-8(fp)
  805144:	0821f980 	call	821f98 <alt_up_character_lcd_init>
	  alt_up_character_lcd_string(lcd, text);
  805148:	e13ffe17 	ldw	r4,-8(fp)
  80514c:	e17fff17 	ldw	r5,-4(fp)
  805150:	08220840 	call	822084 <alt_up_character_lcd_string>
  }
}
  805154:	e037883a 	mov	sp,fp
  805158:	dfc00117 	ldw	ra,4(sp)
  80515c:	df000017 	ldw	fp,0(sp)
  805160:	dec00204 	addi	sp,sp,8
  805164:	f800283a 	ret

00805168 <board_control_task>:
#endif

void board_control_task(void *pdata)
{
  805168:	defffb04 	addi	sp,sp,-20
  80516c:	dfc00415 	stw	ra,16(sp)
  805170:	df000315 	stw	fp,12(sp)
  805174:	df000304 	addi	fp,sp,12
  805178:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_NO_ERR;
  80517c:	e03ffe05 	stb	zero,-8(fp)
  board_control_mbox = OSMboxCreate((void *)NULL);
  805180:	0009883a 	mov	r4,zero
  805184:	081af540 	call	81af54 <OSMboxCreate>
  805188:	d0a06215 	stw	r2,-32376(gp)

  struct http_form_data* board_control_mbox_contents;
  
  while(1)
  {
      board_control_mbox_contents = (void*)OSMboxPend(board_control_mbox, 0, &error_code);
  80518c:	d1206217 	ldw	r4,-32376(gp)
  805190:	e1bffe04 	addi	r6,fp,-8
  805194:	000b883a 	mov	r5,zero
  805198:	081b3080 	call	81b308 <OSMboxPend>
  80519c:	e0bffd15 	stw	r2,-12(fp)
      
      if (board_control_mbox_contents->LED_ON)
  8051a0:	e0bffd17 	ldw	r2,-12(fp)
  8051a4:	10800003 	ldbu	r2,0(r2)
  8051a8:	10803fcc 	andi	r2,r2,255
  8051ac:	1005003a 	cmpeq	r2,r2,zero
  8051b0:	1000031e 	bne	r2,zero,8051c0 <board_control_task+0x58>
      {
        OSTaskResume(LED_PRIO);
  8051b4:	01000184 	movi	r4,6
  8051b8:	081f4800 	call	81f480 <OSTaskResume>
  8051bc:	00000206 	br	8051c8 <board_control_task+0x60>
      }
      else
      {
        /* Suspend the task and clear the LED. */
        OSTaskSuspend(LED_PRIO);
  8051c0:	01000184 	movi	r4,6
  8051c4:	081f8940 	call	81f894 <OSTaskSuspend>
      }
      
      if (board_control_mbox_contents->SSD_ON)
  8051c8:	e0bffd17 	ldw	r2,-12(fp)
  8051cc:	10800043 	ldbu	r2,1(r2)
  8051d0:	10803fcc 	andi	r2,r2,255
  8051d4:	1005003a 	cmpeq	r2,r2,zero
  8051d8:	1000031e 	bne	r2,zero,8051e8 <board_control_task+0x80>
      {
        OSTaskResume(SSD_PRIO);
  8051dc:	010001c4 	movi	r4,7
  8051e0:	081f4800 	call	81f480 <OSTaskResume>
  8051e4:	00000206 	br	8051f0 <board_control_task+0x88>
      }
      else
      {
        /* Suspend the task and set SSD to all zeros. */
        OSTaskSuspend(SSD_PRIO);
  8051e8:	010001c4 	movi	r4,7
  8051ec:	081f8940 	call	81f894 <OSTaskSuspend>
		#endif
      }  

      /* Always dump text to the LCD... */
	  #ifdef LCD_DISPLAY_NAME
      lcd_output_text( board_control_mbox_contents->LCD_TEXT );
  8051f0:	e0bffd17 	ldw	r2,-12(fp)
  8051f4:	11000084 	addi	r4,r2,2
  8051f8:	08050fc0 	call	8050fc <lcd_output_text>
	  #endif
  }
  8051fc:	003fe306 	br	80518c <board_control_task+0x24>

00805200 <LED_task>:
}

void LED_task(void* pdata)
{
  805200:	defffc04 	addi	sp,sp,-16
  805204:	dfc00315 	stw	ra,12(sp)
  805208:	df000215 	stw	fp,8(sp)
  80520c:	df000204 	addi	fp,sp,8
  805210:	e13fff15 	stw	r4,-4(fp)
  
  alt_u8 led = 0x2;
  805214:	00800084 	movi	r2,2
  805218:	e0bffe45 	stb	r2,-7(fp)
  alt_u8 dir = 0;
  80521c:	e03ffe05 	stb	zero,-8(fp)
   * Infinitely shift a variable with one bit set back and forth, and write
   * it to the LED PIO.  Software loop provides delay element.
   */
  while (1) 
  {
    if (led & 0x81) 
  805220:	e0bffe43 	ldbu	r2,-7(fp)
  805224:	1080204c 	andi	r2,r2,129
  805228:	1005003a 	cmpeq	r2,r2,zero
  80522c:	1000031e 	bne	r2,zero,80523c <LED_task+0x3c>
    {
      dir = (dir ^ 0x1);
  805230:	e0bffe03 	ldbu	r2,-8(fp)
  805234:	1080005c 	xori	r2,r2,1
  805238:	e0bffe05 	stb	r2,-8(fp)
    }

    if (dir) 
  80523c:	e0bffe03 	ldbu	r2,-8(fp)
  805240:	1005003a 	cmpeq	r2,r2,zero
  805244:	1000041e 	bne	r2,zero,805258 <LED_task+0x58>
    {
      led = led >> 1;
  805248:	e0bffe43 	ldbu	r2,-7(fp)
  80524c:	1004d07a 	srli	r2,r2,1
  805250:	e0bffe45 	stb	r2,-7(fp)
  805254:	00000306 	br	805264 <LED_task+0x64>
    } 
    else 
    {
      led = led << 1;
  805258:	e0bffe43 	ldbu	r2,-7(fp)
  80525c:	1085883a 	add	r2,r2,r2
  805260:	e0bffe45 	stb	r2,-7(fp)
    }
    OSTimeDlyHMSM(0,0,0,50);
  805264:	0009883a 	mov	r4,zero
  805268:	000b883a 	mov	r5,zero
  80526c:	000d883a 	mov	r6,zero
  805270:	01c00c84 	movi	r7,50
  805274:	081fdcc0 	call	81fdcc <OSTimeDlyHMSM>
  }
  805278:	003fe906 	br	805220 <LED_task+0x20>

0080527c <udivmodsi4>:
  80527c:	29001b2e 	bgeu	r5,r4,8052ec <udivmodsi4+0x70>
  805280:	28001a16 	blt	r5,zero,8052ec <udivmodsi4+0x70>
  805284:	00800044 	movi	r2,1
  805288:	0007883a 	mov	r3,zero
  80528c:	01c007c4 	movi	r7,31
  805290:	00000306 	br	8052a0 <udivmodsi4+0x24>
  805294:	19c01326 	beq	r3,r7,8052e4 <udivmodsi4+0x68>
  805298:	18c00044 	addi	r3,r3,1
  80529c:	28000416 	blt	r5,zero,8052b0 <udivmodsi4+0x34>
  8052a0:	294b883a 	add	r5,r5,r5
  8052a4:	1085883a 	add	r2,r2,r2
  8052a8:	293ffa36 	bltu	r5,r4,805294 <udivmodsi4+0x18>
  8052ac:	10000d26 	beq	r2,zero,8052e4 <udivmodsi4+0x68>
  8052b0:	0007883a 	mov	r3,zero
  8052b4:	21400236 	bltu	r4,r5,8052c0 <udivmodsi4+0x44>
  8052b8:	2149c83a 	sub	r4,r4,r5
  8052bc:	1886b03a 	or	r3,r3,r2
  8052c0:	1004d07a 	srli	r2,r2,1
  8052c4:	280ad07a 	srli	r5,r5,1
  8052c8:	103ffa1e 	bne	r2,zero,8052b4 <udivmodsi4+0x38>
  8052cc:	30000226 	beq	r6,zero,8052d8 <udivmodsi4+0x5c>
  8052d0:	2005883a 	mov	r2,r4
  8052d4:	f800283a 	ret
  8052d8:	1809883a 	mov	r4,r3
  8052dc:	2005883a 	mov	r2,r4
  8052e0:	f800283a 	ret
  8052e4:	0007883a 	mov	r3,zero
  8052e8:	003ff806 	br	8052cc <udivmodsi4+0x50>
  8052ec:	00800044 	movi	r2,1
  8052f0:	0007883a 	mov	r3,zero
  8052f4:	003fef06 	br	8052b4 <udivmodsi4+0x38>

008052f8 <__divsi3>:
  8052f8:	defffe04 	addi	sp,sp,-8
  8052fc:	dc000015 	stw	r16,0(sp)
  805300:	dfc00115 	stw	ra,4(sp)
  805304:	0021883a 	mov	r16,zero
  805308:	20000c16 	blt	r4,zero,80533c <__divsi3+0x44>
  80530c:	000d883a 	mov	r6,zero
  805310:	28000e16 	blt	r5,zero,80534c <__divsi3+0x54>
  805314:	080527c0 	call	80527c <udivmodsi4>
  805318:	1007883a 	mov	r3,r2
  80531c:	8005003a 	cmpeq	r2,r16,zero
  805320:	1000011e 	bne	r2,zero,805328 <__divsi3+0x30>
  805324:	00c7c83a 	sub	r3,zero,r3
  805328:	1805883a 	mov	r2,r3
  80532c:	dfc00117 	ldw	ra,4(sp)
  805330:	dc000017 	ldw	r16,0(sp)
  805334:	dec00204 	addi	sp,sp,8
  805338:	f800283a 	ret
  80533c:	0109c83a 	sub	r4,zero,r4
  805340:	04000044 	movi	r16,1
  805344:	000d883a 	mov	r6,zero
  805348:	283ff20e 	bge	r5,zero,805314 <__divsi3+0x1c>
  80534c:	014bc83a 	sub	r5,zero,r5
  805350:	8021003a 	cmpeq	r16,r16,zero
  805354:	003fef06 	br	805314 <__divsi3+0x1c>

00805358 <__modsi3>:
  805358:	deffff04 	addi	sp,sp,-4
  80535c:	dfc00015 	stw	ra,0(sp)
  805360:	01800044 	movi	r6,1
  805364:	2807883a 	mov	r3,r5
  805368:	20000416 	blt	r4,zero,80537c <__modsi3+0x24>
  80536c:	28000c16 	blt	r5,zero,8053a0 <__modsi3+0x48>
  805370:	dfc00017 	ldw	ra,0(sp)
  805374:	dec00104 	addi	sp,sp,4
  805378:	080527c1 	jmpi	80527c <udivmodsi4>
  80537c:	0109c83a 	sub	r4,zero,r4
  805380:	28000b16 	blt	r5,zero,8053b0 <__modsi3+0x58>
  805384:	180b883a 	mov	r5,r3
  805388:	01800044 	movi	r6,1
  80538c:	080527c0 	call	80527c <udivmodsi4>
  805390:	0085c83a 	sub	r2,zero,r2
  805394:	dfc00017 	ldw	ra,0(sp)
  805398:	dec00104 	addi	sp,sp,4
  80539c:	f800283a 	ret
  8053a0:	014bc83a 	sub	r5,zero,r5
  8053a4:	dfc00017 	ldw	ra,0(sp)
  8053a8:	dec00104 	addi	sp,sp,4
  8053ac:	080527c1 	jmpi	80527c <udivmodsi4>
  8053b0:	0147c83a 	sub	r3,zero,r5
  8053b4:	003ff306 	br	805384 <__modsi3+0x2c>

008053b8 <__udivsi3>:
  8053b8:	000d883a 	mov	r6,zero
  8053bc:	080527c1 	jmpi	80527c <udivmodsi4>

008053c0 <__umodsi3>:
  8053c0:	01800044 	movi	r6,1
  8053c4:	080527c1 	jmpi	80527c <udivmodsi4>

008053c8 <_atoi_r>:
  8053c8:	000d883a 	mov	r6,zero
  8053cc:	01c00284 	movi	r7,10
  8053d0:	08092bc1 	jmpi	8092bc <_strtol_r>

008053d4 <atoi>:
  8053d4:	000b883a 	mov	r5,zero
  8053d8:	01800284 	movi	r6,10
  8053dc:	08095001 	jmpi	809500 <strtol>

008053e0 <_fclose_r>:
  8053e0:	defffc04 	addi	sp,sp,-16
  8053e4:	dc400115 	stw	r17,4(sp)
  8053e8:	dc000015 	stw	r16,0(sp)
  8053ec:	dfc00315 	stw	ra,12(sp)
  8053f0:	dc800215 	stw	r18,8(sp)
  8053f4:	2821883a 	mov	r16,r5
  8053f8:	2023883a 	mov	r17,r4
  8053fc:	28002926 	beq	r5,zero,8054a4 <_fclose_r+0xc4>
  805400:	08057d40 	call	8057d4 <__sfp_lock_acquire>
  805404:	88000226 	beq	r17,zero,805410 <_fclose_r+0x30>
  805408:	88800e17 	ldw	r2,56(r17)
  80540c:	10002d26 	beq	r2,zero,8054c4 <_fclose_r+0xe4>
  805410:	8080030f 	ldh	r2,12(r16)
  805414:	10002226 	beq	r2,zero,8054a0 <_fclose_r+0xc0>
  805418:	8809883a 	mov	r4,r17
  80541c:	800b883a 	mov	r5,r16
  805420:	08055040 	call	805504 <_fflush_r>
  805424:	1025883a 	mov	r18,r2
  805428:	80800b17 	ldw	r2,44(r16)
  80542c:	10000426 	beq	r2,zero,805440 <_fclose_r+0x60>
  805430:	81400717 	ldw	r5,28(r16)
  805434:	8809883a 	mov	r4,r17
  805438:	103ee83a 	callr	r2
  80543c:	10002a16 	blt	r2,zero,8054e8 <_fclose_r+0x108>
  805440:	8080030b 	ldhu	r2,12(r16)
  805444:	1080200c 	andi	r2,r2,128
  805448:	1000231e 	bne	r2,zero,8054d8 <_fclose_r+0xf8>
  80544c:	81400c17 	ldw	r5,48(r16)
  805450:	28000526 	beq	r5,zero,805468 <_fclose_r+0x88>
  805454:	80801004 	addi	r2,r16,64
  805458:	28800226 	beq	r5,r2,805464 <_fclose_r+0x84>
  80545c:	8809883a 	mov	r4,r17
  805460:	0805f140 	call	805f14 <_free_r>
  805464:	80000c15 	stw	zero,48(r16)
  805468:	81401117 	ldw	r5,68(r16)
  80546c:	28000326 	beq	r5,zero,80547c <_fclose_r+0x9c>
  805470:	8809883a 	mov	r4,r17
  805474:	0805f140 	call	805f14 <_free_r>
  805478:	80001115 	stw	zero,68(r16)
  80547c:	8000030d 	sth	zero,12(r16)
  805480:	08057d80 	call	8057d8 <__sfp_lock_release>
  805484:	9005883a 	mov	r2,r18
  805488:	dfc00317 	ldw	ra,12(sp)
  80548c:	dc800217 	ldw	r18,8(sp)
  805490:	dc400117 	ldw	r17,4(sp)
  805494:	dc000017 	ldw	r16,0(sp)
  805498:	dec00404 	addi	sp,sp,16
  80549c:	f800283a 	ret
  8054a0:	08057d80 	call	8057d8 <__sfp_lock_release>
  8054a4:	0025883a 	mov	r18,zero
  8054a8:	9005883a 	mov	r2,r18
  8054ac:	dfc00317 	ldw	ra,12(sp)
  8054b0:	dc800217 	ldw	r18,8(sp)
  8054b4:	dc400117 	ldw	r17,4(sp)
  8054b8:	dc000017 	ldw	r16,0(sp)
  8054bc:	dec00404 	addi	sp,sp,16
  8054c0:	f800283a 	ret
  8054c4:	8809883a 	mov	r4,r17
  8054c8:	08057e40 	call	8057e4 <__sinit>
  8054cc:	8080030f 	ldh	r2,12(r16)
  8054d0:	103fd11e 	bne	r2,zero,805418 <_fclose_r+0x38>
  8054d4:	003ff206 	br	8054a0 <_fclose_r+0xc0>
  8054d8:	81400417 	ldw	r5,16(r16)
  8054dc:	8809883a 	mov	r4,r17
  8054e0:	0805f140 	call	805f14 <_free_r>
  8054e4:	003fd906 	br	80544c <_fclose_r+0x6c>
  8054e8:	04bfffc4 	movi	r18,-1
  8054ec:	003fd406 	br	805440 <_fclose_r+0x60>

008054f0 <fclose>:
  8054f0:	00802174 	movhi	r2,133
  8054f4:	10828104 	addi	r2,r2,2564
  8054f8:	200b883a 	mov	r5,r4
  8054fc:	11000017 	ldw	r4,0(r2)
  805500:	08053e01 	jmpi	8053e0 <_fclose_r>

00805504 <_fflush_r>:
  805504:	defffb04 	addi	sp,sp,-20
  805508:	dcc00315 	stw	r19,12(sp)
  80550c:	dc800215 	stw	r18,8(sp)
  805510:	dfc00415 	stw	ra,16(sp)
  805514:	dc400115 	stw	r17,4(sp)
  805518:	dc000015 	stw	r16,0(sp)
  80551c:	2027883a 	mov	r19,r4
  805520:	2825883a 	mov	r18,r5
  805524:	20000226 	beq	r4,zero,805530 <_fflush_r+0x2c>
  805528:	20800e17 	ldw	r2,56(r4)
  80552c:	10005626 	beq	r2,zero,805688 <_fflush_r+0x184>
  805530:	9100030b 	ldhu	r4,12(r18)
  805534:	20ffffcc 	andi	r3,r4,65535
  805538:	18e0001c 	xori	r3,r3,32768
  80553c:	18e00004 	addi	r3,r3,-32768
  805540:	1880020c 	andi	r2,r3,8
  805544:	1000261e 	bne	r2,zero,8055e0 <_fflush_r+0xdc>
  805548:	90c00117 	ldw	r3,4(r18)
  80554c:	20820014 	ori	r2,r4,2048
  805550:	9080030d 	sth	r2,12(r18)
  805554:	1009883a 	mov	r4,r2
  805558:	00c0400e 	bge	zero,r3,80565c <_fflush_r+0x158>
  80555c:	92000a17 	ldw	r8,40(r18)
  805560:	40004026 	beq	r8,zero,805664 <_fflush_r+0x160>
  805564:	2084000c 	andi	r2,r4,4096
  805568:	10005326 	beq	r2,zero,8056b8 <_fflush_r+0x1b4>
  80556c:	94001417 	ldw	r16,80(r18)
  805570:	9080030b 	ldhu	r2,12(r18)
  805574:	1080010c 	andi	r2,r2,4
  805578:	1000481e 	bne	r2,zero,80569c <_fflush_r+0x198>
  80557c:	91400717 	ldw	r5,28(r18)
  805580:	9809883a 	mov	r4,r19
  805584:	800d883a 	mov	r6,r16
  805588:	000f883a 	mov	r7,zero
  80558c:	403ee83a 	callr	r8
  805590:	8080261e 	bne	r16,r2,80562c <_fflush_r+0x128>
  805594:	9080030b 	ldhu	r2,12(r18)
  805598:	91000417 	ldw	r4,16(r18)
  80559c:	90000115 	stw	zero,4(r18)
  8055a0:	10bdffcc 	andi	r2,r2,63487
  8055a4:	10ffffcc 	andi	r3,r2,65535
  8055a8:	18c4000c 	andi	r3,r3,4096
  8055ac:	9080030d 	sth	r2,12(r18)
  8055b0:	91000015 	stw	r4,0(r18)
  8055b4:	18002b26 	beq	r3,zero,805664 <_fflush_r+0x160>
  8055b8:	0007883a 	mov	r3,zero
  8055bc:	1805883a 	mov	r2,r3
  8055c0:	94001415 	stw	r16,80(r18)
  8055c4:	dfc00417 	ldw	ra,16(sp)
  8055c8:	dcc00317 	ldw	r19,12(sp)
  8055cc:	dc800217 	ldw	r18,8(sp)
  8055d0:	dc400117 	ldw	r17,4(sp)
  8055d4:	dc000017 	ldw	r16,0(sp)
  8055d8:	dec00504 	addi	sp,sp,20
  8055dc:	f800283a 	ret
  8055e0:	94400417 	ldw	r17,16(r18)
  8055e4:	88001f26 	beq	r17,zero,805664 <_fflush_r+0x160>
  8055e8:	90800017 	ldw	r2,0(r18)
  8055ec:	18c000cc 	andi	r3,r3,3
  8055f0:	94400015 	stw	r17,0(r18)
  8055f4:	1461c83a 	sub	r16,r2,r17
  8055f8:	18002526 	beq	r3,zero,805690 <_fflush_r+0x18c>
  8055fc:	0005883a 	mov	r2,zero
  805600:	90800215 	stw	r2,8(r18)
  805604:	0400170e 	bge	zero,r16,805664 <_fflush_r+0x160>
  805608:	90c00917 	ldw	r3,36(r18)
  80560c:	91400717 	ldw	r5,28(r18)
  805610:	880d883a 	mov	r6,r17
  805614:	800f883a 	mov	r7,r16
  805618:	9809883a 	mov	r4,r19
  80561c:	183ee83a 	callr	r3
  805620:	88a3883a 	add	r17,r17,r2
  805624:	80a1c83a 	sub	r16,r16,r2
  805628:	00bff616 	blt	zero,r2,805604 <_fflush_r+0x100>
  80562c:	9080030b 	ldhu	r2,12(r18)
  805630:	00ffffc4 	movi	r3,-1
  805634:	10801014 	ori	r2,r2,64
  805638:	9080030d 	sth	r2,12(r18)
  80563c:	1805883a 	mov	r2,r3
  805640:	dfc00417 	ldw	ra,16(sp)
  805644:	dcc00317 	ldw	r19,12(sp)
  805648:	dc800217 	ldw	r18,8(sp)
  80564c:	dc400117 	ldw	r17,4(sp)
  805650:	dc000017 	ldw	r16,0(sp)
  805654:	dec00504 	addi	sp,sp,20
  805658:	f800283a 	ret
  80565c:	90800f17 	ldw	r2,60(r18)
  805660:	00bfbe16 	blt	zero,r2,80555c <_fflush_r+0x58>
  805664:	0007883a 	mov	r3,zero
  805668:	1805883a 	mov	r2,r3
  80566c:	dfc00417 	ldw	ra,16(sp)
  805670:	dcc00317 	ldw	r19,12(sp)
  805674:	dc800217 	ldw	r18,8(sp)
  805678:	dc400117 	ldw	r17,4(sp)
  80567c:	dc000017 	ldw	r16,0(sp)
  805680:	dec00504 	addi	sp,sp,20
  805684:	f800283a 	ret
  805688:	08057e40 	call	8057e4 <__sinit>
  80568c:	003fa806 	br	805530 <_fflush_r+0x2c>
  805690:	90800517 	ldw	r2,20(r18)
  805694:	90800215 	stw	r2,8(r18)
  805698:	003fda06 	br	805604 <_fflush_r+0x100>
  80569c:	90800117 	ldw	r2,4(r18)
  8056a0:	90c00c17 	ldw	r3,48(r18)
  8056a4:	80a1c83a 	sub	r16,r16,r2
  8056a8:	183fb426 	beq	r3,zero,80557c <_fflush_r+0x78>
  8056ac:	90800f17 	ldw	r2,60(r18)
  8056b0:	80a1c83a 	sub	r16,r16,r2
  8056b4:	003fb106 	br	80557c <_fflush_r+0x78>
  8056b8:	91400717 	ldw	r5,28(r18)
  8056bc:	9809883a 	mov	r4,r19
  8056c0:	000d883a 	mov	r6,zero
  8056c4:	01c00044 	movi	r7,1
  8056c8:	403ee83a 	callr	r8
  8056cc:	1021883a 	mov	r16,r2
  8056d0:	00bfffc4 	movi	r2,-1
  8056d4:	80800226 	beq	r16,r2,8056e0 <_fflush_r+0x1dc>
  8056d8:	92000a17 	ldw	r8,40(r18)
  8056dc:	003fa406 	br	805570 <_fflush_r+0x6c>
  8056e0:	98c00017 	ldw	r3,0(r19)
  8056e4:	00800744 	movi	r2,29
  8056e8:	18bfde26 	beq	r3,r2,805664 <_fflush_r+0x160>
  8056ec:	9080030b 	ldhu	r2,12(r18)
  8056f0:	8007883a 	mov	r3,r16
  8056f4:	10801014 	ori	r2,r2,64
  8056f8:	9080030d 	sth	r2,12(r18)
  8056fc:	003fcf06 	br	80563c <_fflush_r+0x138>

00805700 <fflush>:
  805700:	01402034 	movhi	r5,128
  805704:	29554104 	addi	r5,r5,21764
  805708:	2007883a 	mov	r3,r4
  80570c:	20000526 	beq	r4,zero,805724 <fflush+0x24>
  805710:	00802174 	movhi	r2,133
  805714:	10828104 	addi	r2,r2,2564
  805718:	11000017 	ldw	r4,0(r2)
  80571c:	180b883a 	mov	r5,r3
  805720:	08055041 	jmpi	805504 <_fflush_r>
  805724:	00802174 	movhi	r2,133
  805728:	10828204 	addi	r2,r2,2568
  80572c:	11000017 	ldw	r4,0(r2)
  805730:	08068081 	jmpi	806808 <_fwalk_reent>

00805734 <_fgetpos_r>:
  805734:	defffe04 	addi	sp,sp,-8
  805738:	dc400015 	stw	r17,0(sp)
  80573c:	dfc00115 	stw	ra,4(sp)
  805740:	3023883a 	mov	r17,r6
  805744:	08066fc0 	call	8066fc <_ftell_r>
  805748:	88800015 	stw	r2,0(r17)
  80574c:	10bfffe0 	cmpeqi	r2,r2,-1
  805750:	dfc00117 	ldw	ra,4(sp)
  805754:	dc400017 	ldw	r17,0(sp)
  805758:	dec00204 	addi	sp,sp,8
  80575c:	f800283a 	ret

00805760 <fgetpos>:
  805760:	01802174 	movhi	r6,133
  805764:	31828104 	addi	r6,r6,2564
  805768:	2007883a 	mov	r3,r4
  80576c:	31000017 	ldw	r4,0(r6)
  805770:	280d883a 	mov	r6,r5
  805774:	180b883a 	mov	r5,r3
  805778:	08057341 	jmpi	805734 <_fgetpos_r>

0080577c <std>:
  80577c:	00802034 	movhi	r2,128
  805780:	109f4704 	addi	r2,r2,32028
  805784:	20800b15 	stw	r2,44(r4)
  805788:	00802034 	movhi	r2,128
  80578c:	109f8204 	addi	r2,r2,32264
  805790:	20800815 	stw	r2,32(r4)
  805794:	00c02034 	movhi	r3,128
  805798:	18df6304 	addi	r3,r3,32140
  80579c:	00802034 	movhi	r2,128
  8057a0:	109f4904 	addi	r2,r2,32036
  8057a4:	2140030d 	sth	r5,12(r4)
  8057a8:	2180038d 	sth	r6,14(r4)
  8057ac:	20c00915 	stw	r3,36(r4)
  8057b0:	20800a15 	stw	r2,40(r4)
  8057b4:	20000015 	stw	zero,0(r4)
  8057b8:	20000115 	stw	zero,4(r4)
  8057bc:	20000215 	stw	zero,8(r4)
  8057c0:	20000415 	stw	zero,16(r4)
  8057c4:	20000515 	stw	zero,20(r4)
  8057c8:	20000615 	stw	zero,24(r4)
  8057cc:	21000715 	stw	r4,28(r4)
  8057d0:	f800283a 	ret

008057d4 <__sfp_lock_acquire>:
  8057d4:	f800283a 	ret

008057d8 <__sfp_lock_release>:
  8057d8:	f800283a 	ret

008057dc <__sinit_lock_acquire>:
  8057dc:	f800283a 	ret

008057e0 <__sinit_lock_release>:
  8057e0:	f800283a 	ret

008057e4 <__sinit>:
  8057e4:	20800e17 	ldw	r2,56(r4)
  8057e8:	defffd04 	addi	sp,sp,-12
  8057ec:	dc400115 	stw	r17,4(sp)
  8057f0:	dc000015 	stw	r16,0(sp)
  8057f4:	dfc00215 	stw	ra,8(sp)
  8057f8:	04400044 	movi	r17,1
  8057fc:	01400104 	movi	r5,4
  805800:	000d883a 	mov	r6,zero
  805804:	2021883a 	mov	r16,r4
  805808:	2200bb04 	addi	r8,r4,748
  80580c:	200f883a 	mov	r7,r4
  805810:	10000526 	beq	r2,zero,805828 <__sinit+0x44>
  805814:	dfc00217 	ldw	ra,8(sp)
  805818:	dc400117 	ldw	r17,4(sp)
  80581c:	dc000017 	ldw	r16,0(sp)
  805820:	dec00304 	addi	sp,sp,12
  805824:	f800283a 	ret
  805828:	21000117 	ldw	r4,4(r4)
  80582c:	00802034 	movhi	r2,128
  805830:	10963204 	addi	r2,r2,22728
  805834:	00c000c4 	movi	r3,3
  805838:	80800f15 	stw	r2,60(r16)
  80583c:	80c0b915 	stw	r3,740(r16)
  805840:	8200ba15 	stw	r8,744(r16)
  805844:	84400e15 	stw	r17,56(r16)
  805848:	8000b815 	stw	zero,736(r16)
  80584c:	080577c0 	call	80577c <std>
  805850:	81000217 	ldw	r4,8(r16)
  805854:	880d883a 	mov	r6,r17
  805858:	800f883a 	mov	r7,r16
  80585c:	01400284 	movi	r5,10
  805860:	080577c0 	call	80577c <std>
  805864:	81000317 	ldw	r4,12(r16)
  805868:	800f883a 	mov	r7,r16
  80586c:	01400484 	movi	r5,18
  805870:	01800084 	movi	r6,2
  805874:	dfc00217 	ldw	ra,8(sp)
  805878:	dc400117 	ldw	r17,4(sp)
  80587c:	dc000017 	ldw	r16,0(sp)
  805880:	dec00304 	addi	sp,sp,12
  805884:	080577c1 	jmpi	80577c <std>

00805888 <__fp_lock>:
  805888:	0005883a 	mov	r2,zero
  80588c:	f800283a 	ret

00805890 <__fp_unlock>:
  805890:	0005883a 	mov	r2,zero
  805894:	f800283a 	ret

00805898 <__fp_unlock_all>:
  805898:	00802174 	movhi	r2,133
  80589c:	10828104 	addi	r2,r2,2564
  8058a0:	11000017 	ldw	r4,0(r2)
  8058a4:	01402034 	movhi	r5,128
  8058a8:	29562404 	addi	r5,r5,22672
  8058ac:	08068d01 	jmpi	8068d0 <_fwalk>

008058b0 <__fp_lock_all>:
  8058b0:	00802174 	movhi	r2,133
  8058b4:	10828104 	addi	r2,r2,2564
  8058b8:	11000017 	ldw	r4,0(r2)
  8058bc:	01402034 	movhi	r5,128
  8058c0:	29562204 	addi	r5,r5,22664
  8058c4:	08068d01 	jmpi	8068d0 <_fwalk>

008058c8 <_cleanup_r>:
  8058c8:	01402034 	movhi	r5,128
  8058cc:	29553c04 	addi	r5,r5,21744
  8058d0:	08068d01 	jmpi	8068d0 <_fwalk>

008058d4 <_cleanup>:
  8058d4:	00802174 	movhi	r2,133
  8058d8:	10828204 	addi	r2,r2,2568
  8058dc:	11000017 	ldw	r4,0(r2)
  8058e0:	08058c81 	jmpi	8058c8 <_cleanup_r>

008058e4 <__sfmoreglue>:
  8058e4:	defffc04 	addi	sp,sp,-16
  8058e8:	dc400115 	stw	r17,4(sp)
  8058ec:	2c401724 	muli	r17,r5,92
  8058f0:	dc800215 	stw	r18,8(sp)
  8058f4:	2825883a 	mov	r18,r5
  8058f8:	89400304 	addi	r5,r17,12
  8058fc:	dc000015 	stw	r16,0(sp)
  805900:	dfc00315 	stw	ra,12(sp)
  805904:	0806bf80 	call	806bf8 <_malloc_r>
  805908:	0021883a 	mov	r16,zero
  80590c:	880d883a 	mov	r6,r17
  805910:	000b883a 	mov	r5,zero
  805914:	10000626 	beq	r2,zero,805930 <__sfmoreglue+0x4c>
  805918:	11000304 	addi	r4,r2,12
  80591c:	14800115 	stw	r18,4(r2)
  805920:	10000015 	stw	zero,0(r2)
  805924:	11000215 	stw	r4,8(r2)
  805928:	1021883a 	mov	r16,r2
  80592c:	08074b80 	call	8074b8 <memset>
  805930:	8005883a 	mov	r2,r16
  805934:	dfc00317 	ldw	ra,12(sp)
  805938:	dc800217 	ldw	r18,8(sp)
  80593c:	dc400117 	ldw	r17,4(sp)
  805940:	dc000017 	ldw	r16,0(sp)
  805944:	dec00404 	addi	sp,sp,16
  805948:	f800283a 	ret

0080594c <__sfp>:
  80594c:	defffd04 	addi	sp,sp,-12
  805950:	00802174 	movhi	r2,133
  805954:	10828204 	addi	r2,r2,2568
  805958:	dc000015 	stw	r16,0(sp)
  80595c:	14000017 	ldw	r16,0(r2)
  805960:	dc400115 	stw	r17,4(sp)
  805964:	dfc00215 	stw	ra,8(sp)
  805968:	80800e17 	ldw	r2,56(r16)
  80596c:	2023883a 	mov	r17,r4
  805970:	10002626 	beq	r2,zero,805a0c <__sfp+0xc0>
  805974:	8400b804 	addi	r16,r16,736
  805978:	80800117 	ldw	r2,4(r16)
  80597c:	81000217 	ldw	r4,8(r16)
  805980:	10ffffc4 	addi	r3,r2,-1
  805984:	18000916 	blt	r3,zero,8059ac <__sfp+0x60>
  805988:	2080030f 	ldh	r2,12(r4)
  80598c:	10000b26 	beq	r2,zero,8059bc <__sfp+0x70>
  805990:	017fffc4 	movi	r5,-1
  805994:	00000206 	br	8059a0 <__sfp+0x54>
  805998:	2080030f 	ldh	r2,12(r4)
  80599c:	10000726 	beq	r2,zero,8059bc <__sfp+0x70>
  8059a0:	18ffffc4 	addi	r3,r3,-1
  8059a4:	21001704 	addi	r4,r4,92
  8059a8:	197ffb1e 	bne	r3,r5,805998 <__sfp+0x4c>
  8059ac:	80800017 	ldw	r2,0(r16)
  8059b0:	10001926 	beq	r2,zero,805a18 <__sfp+0xcc>
  8059b4:	1021883a 	mov	r16,r2
  8059b8:	003fef06 	br	805978 <__sfp+0x2c>
  8059bc:	00bfffc4 	movi	r2,-1
  8059c0:	00c00044 	movi	r3,1
  8059c4:	2080038d 	sth	r2,14(r4)
  8059c8:	20c0030d 	sth	r3,12(r4)
  8059cc:	20000015 	stw	zero,0(r4)
  8059d0:	20000215 	stw	zero,8(r4)
  8059d4:	20000115 	stw	zero,4(r4)
  8059d8:	20000415 	stw	zero,16(r4)
  8059dc:	20000515 	stw	zero,20(r4)
  8059e0:	20000615 	stw	zero,24(r4)
  8059e4:	20000c15 	stw	zero,48(r4)
  8059e8:	20000d15 	stw	zero,52(r4)
  8059ec:	20001115 	stw	zero,68(r4)
  8059f0:	20001215 	stw	zero,72(r4)
  8059f4:	2005883a 	mov	r2,r4
  8059f8:	dfc00217 	ldw	ra,8(sp)
  8059fc:	dc400117 	ldw	r17,4(sp)
  805a00:	dc000017 	ldw	r16,0(sp)
  805a04:	dec00304 	addi	sp,sp,12
  805a08:	f800283a 	ret
  805a0c:	8009883a 	mov	r4,r16
  805a10:	08057e40 	call	8057e4 <__sinit>
  805a14:	003fd706 	br	805974 <__sfp+0x28>
  805a18:	8809883a 	mov	r4,r17
  805a1c:	01400104 	movi	r5,4
  805a20:	08058e40 	call	8058e4 <__sfmoreglue>
  805a24:	80800015 	stw	r2,0(r16)
  805a28:	103fe21e 	bne	r2,zero,8059b4 <__sfp+0x68>
  805a2c:	00800304 	movi	r2,12
  805a30:	0009883a 	mov	r4,zero
  805a34:	88800015 	stw	r2,0(r17)
  805a38:	003fee06 	br	8059f4 <__sfp+0xa8>

00805a3c <_fopen_r>:
  805a3c:	defffa04 	addi	sp,sp,-24
  805a40:	dcc00415 	stw	r19,16(sp)
  805a44:	2827883a 	mov	r19,r5
  805a48:	300b883a 	mov	r5,r6
  805a4c:	d80d883a 	mov	r6,sp
  805a50:	dc800315 	stw	r18,12(sp)
  805a54:	dc400215 	stw	r17,8(sp)
  805a58:	dc000115 	stw	r16,4(sp)
  805a5c:	dfc00515 	stw	ra,20(sp)
  805a60:	2021883a 	mov	r16,r4
  805a64:	080e5c40 	call	80e5c4 <__sflags>
  805a68:	1025883a 	mov	r18,r2
  805a6c:	8009883a 	mov	r4,r16
  805a70:	0023883a 	mov	r17,zero
  805a74:	1000081e 	bne	r2,zero,805a98 <_fopen_r+0x5c>
  805a78:	8805883a 	mov	r2,r17
  805a7c:	dfc00517 	ldw	ra,20(sp)
  805a80:	dcc00417 	ldw	r19,16(sp)
  805a84:	dc800317 	ldw	r18,12(sp)
  805a88:	dc400217 	ldw	r17,8(sp)
  805a8c:	dc000117 	ldw	r16,4(sp)
  805a90:	dec00604 	addi	sp,sp,24
  805a94:	f800283a 	ret
  805a98:	080594c0 	call	80594c <__sfp>
  805a9c:	1023883a 	mov	r17,r2
  805aa0:	980b883a 	mov	r5,r19
  805aa4:	8009883a 	mov	r4,r16
  805aa8:	01c06d84 	movi	r7,438
  805aac:	103ff226 	beq	r2,zero,805a78 <_fopen_r+0x3c>
  805ab0:	d9800017 	ldw	r6,0(sp)
  805ab4:	08075500 	call	807550 <_open_r>
  805ab8:	10001816 	blt	r2,zero,805b1c <_fopen_r+0xe0>
  805abc:	00c02034 	movhi	r3,128
  805ac0:	18df6304 	addi	r3,r3,32140
  805ac4:	923fffcc 	andi	r8,r18,65535
  805ac8:	8880038d 	sth	r2,14(r17)
  805acc:	00802034 	movhi	r2,128
  805ad0:	109f8204 	addi	r2,r2,32264
  805ad4:	88800815 	stw	r2,32(r17)
  805ad8:	88c00915 	stw	r3,36(r17)
  805adc:	00802034 	movhi	r2,128
  805ae0:	109f4904 	addi	r2,r2,32036
  805ae4:	00c02034 	movhi	r3,128
  805ae8:	18df4704 	addi	r3,r3,32028
  805aec:	4200400c 	andi	r8,r8,256
  805af0:	8c80030d 	sth	r18,12(r17)
  805af4:	8009883a 	mov	r4,r16
  805af8:	880b883a 	mov	r5,r17
  805afc:	000d883a 	mov	r6,zero
  805b00:	01c00084 	movi	r7,2
  805b04:	88800a15 	stw	r2,40(r17)
  805b08:	88c00b15 	stw	r3,44(r17)
  805b0c:	8c400715 	stw	r17,28(r17)
  805b10:	403fd926 	beq	r8,zero,805a78 <_fopen_r+0x3c>
  805b14:	08062280 	call	806228 <_fseek_r>
  805b18:	003fd706 	br	805a78 <_fopen_r+0x3c>
  805b1c:	08057d40 	call	8057d4 <__sfp_lock_acquire>
  805b20:	8800030d 	sth	zero,12(r17)
  805b24:	08057d80 	call	8057d8 <__sfp_lock_release>
  805b28:	0023883a 	mov	r17,zero
  805b2c:	003fd206 	br	805a78 <_fopen_r+0x3c>

00805b30 <fopen>:
  805b30:	01802174 	movhi	r6,133
  805b34:	31828104 	addi	r6,r6,2564
  805b38:	2007883a 	mov	r3,r4
  805b3c:	31000017 	ldw	r4,0(r6)
  805b40:	280d883a 	mov	r6,r5
  805b44:	180b883a 	mov	r5,r3
  805b48:	0805a3c1 	jmpi	805a3c <_fopen_r>

00805b4c <fprintf>:
  805b4c:	defffc04 	addi	sp,sp,-16
  805b50:	dfc00115 	stw	ra,4(sp)
  805b54:	d9800215 	stw	r6,8(sp)
  805b58:	d9c00315 	stw	r7,12(sp)
  805b5c:	d8800204 	addi	r2,sp,8
  805b60:	100d883a 	mov	r6,r2
  805b64:	d8800015 	stw	r2,0(sp)
  805b68:	080b4300 	call	80b430 <__vfprintf_internal>
  805b6c:	dfc00117 	ldw	ra,4(sp)
  805b70:	dec00404 	addi	sp,sp,16
  805b74:	f800283a 	ret

00805b78 <_fprintf_r>:
  805b78:	defffd04 	addi	sp,sp,-12
  805b7c:	2807883a 	mov	r3,r5
  805b80:	dfc00115 	stw	ra,4(sp)
  805b84:	d9c00215 	stw	r7,8(sp)
  805b88:	d8800204 	addi	r2,sp,8
  805b8c:	300b883a 	mov	r5,r6
  805b90:	1809883a 	mov	r4,r3
  805b94:	100d883a 	mov	r6,r2
  805b98:	d8800015 	stw	r2,0(sp)
  805b9c:	080b4300 	call	80b430 <__vfprintf_internal>
  805ba0:	dfc00117 	ldw	ra,4(sp)
  805ba4:	dec00304 	addi	sp,sp,12
  805ba8:	f800283a 	ret

00805bac <_fread_r>:
  805bac:	defff504 	addi	sp,sp,-44
  805bb0:	ddc00815 	stw	r23,32(sp)
  805bb4:	39af383a 	mul	r23,r7,r6
  805bb8:	df000915 	stw	fp,36(sp)
  805bbc:	dd800715 	stw	r22,28(sp)
  805bc0:	dcc00415 	stw	r19,16(sp)
  805bc4:	dc000115 	stw	r16,4(sp)
  805bc8:	dfc00a15 	stw	ra,40(sp)
  805bcc:	dd400615 	stw	r21,24(sp)
  805bd0:	dd000515 	stw	r20,20(sp)
  805bd4:	dc800315 	stw	r18,12(sp)
  805bd8:	dc400215 	stw	r17,8(sp)
  805bdc:	d9800015 	stw	r6,0(sp)
  805be0:	3839883a 	mov	fp,r7
  805be4:	2821883a 	mov	r16,r5
  805be8:	202d883a 	mov	r22,r4
  805bec:	dcc00b17 	ldw	r19,44(sp)
  805bf0:	b8005926 	beq	r23,zero,805d58 <_fread_r+0x1ac>
  805bf4:	20000226 	beq	r4,zero,805c00 <_fread_r+0x54>
  805bf8:	20800e17 	ldw	r2,56(r4)
  805bfc:	10005826 	beq	r2,zero,805d60 <_fread_r+0x1b4>
  805c00:	9c400117 	ldw	r17,4(r19)
  805c04:	88005916 	blt	r17,zero,805d6c <_fread_r+0x1c0>
  805c08:	9880030b 	ldhu	r2,12(r19)
  805c0c:	8029883a 	mov	r20,r16
  805c10:	1080008c 	andi	r2,r2,2
  805c14:	1000221e 	bne	r2,zero,805ca0 <_fread_r+0xf4>
  805c18:	b825883a 	mov	r18,r23
  805c1c:	00000106 	br	805c24 <_fread_r+0x78>
  805c20:	9c400117 	ldw	r17,4(r19)
  805c24:	a009883a 	mov	r4,r20
  805c28:	880d883a 	mov	r6,r17
  805c2c:	8c80542e 	bgeu	r17,r18,805d80 <_fread_r+0x1d4>
  805c30:	99400017 	ldw	r5,0(r19)
  805c34:	a469883a 	add	r20,r20,r17
  805c38:	9465c83a 	sub	r18,r18,r17
  805c3c:	08073380 	call	807338 <memcpy>
  805c40:	98800017 	ldw	r2,0(r19)
  805c44:	b009883a 	mov	r4,r22
  805c48:	980b883a 	mov	r5,r19
  805c4c:	1461883a 	add	r16,r2,r17
  805c50:	9c000015 	stw	r16,0(r19)
  805c54:	08077740 	call	807774 <__srefill_r>
  805c58:	103ff126 	beq	r2,zero,805c20 <_fread_r+0x74>
  805c5c:	d9400017 	ldw	r5,0(sp)
  805c60:	bc89c83a 	sub	r4,r23,r18
  805c64:	08053b80 	call	8053b8 <__udivsi3>
  805c68:	1039883a 	mov	fp,r2
  805c6c:	e005883a 	mov	r2,fp
  805c70:	dfc00a17 	ldw	ra,40(sp)
  805c74:	df000917 	ldw	fp,36(sp)
  805c78:	ddc00817 	ldw	r23,32(sp)
  805c7c:	dd800717 	ldw	r22,28(sp)
  805c80:	dd400617 	ldw	r21,24(sp)
  805c84:	dd000517 	ldw	r20,20(sp)
  805c88:	dcc00417 	ldw	r19,16(sp)
  805c8c:	dc800317 	ldw	r18,12(sp)
  805c90:	dc400217 	ldw	r17,8(sp)
  805c94:	dc000117 	ldw	r16,4(sp)
  805c98:	dec00b04 	addi	sp,sp,44
  805c9c:	f800283a 	ret
  805ca0:	b825883a 	mov	r18,r23
  805ca4:	8dc03436 	bltu	r17,r23,805d78 <_fread_r+0x1cc>
  805ca8:	99400017 	ldw	r5,0(r19)
  805cac:	a009883a 	mov	r4,r20
  805cb0:	900d883a 	mov	r6,r18
  805cb4:	08073380 	call	807338 <memcpy>
  805cb8:	9c000017 	ldw	r16,0(r19)
  805cbc:	98800117 	ldw	r2,4(r19)
  805cc0:	99400c17 	ldw	r5,48(r19)
  805cc4:	84a1883a 	add	r16,r16,r18
  805cc8:	14a3c83a 	sub	r17,r2,r18
  805ccc:	a4ab883a 	add	r21,r20,r18
  805cd0:	9c400115 	stw	r17,4(r19)
  805cd4:	9c000015 	stw	r16,0(r19)
  805cd8:	bca9c83a 	sub	r20,r23,r18
  805cdc:	28000826 	beq	r5,zero,805d00 <_fread_r+0x154>
  805ce0:	a03fe226 	beq	r20,zero,805c6c <_fread_r+0xc0>
  805ce4:	98801004 	addi	r2,r19,64
  805ce8:	28800326 	beq	r5,r2,805cf8 <_fread_r+0x14c>
  805cec:	b009883a 	mov	r4,r22
  805cf0:	0805f140 	call	805f14 <_free_r>
  805cf4:	9c000017 	ldw	r16,0(r19)
  805cf8:	98000c15 	stw	zero,48(r19)
  805cfc:	00000106 	br	805d04 <_fread_r+0x158>
  805d00:	a03fda26 	beq	r20,zero,805c6c <_fread_r+0xc0>
  805d04:	9c800417 	ldw	r18,16(r19)
  805d08:	9c400517 	ldw	r17,20(r19)
  805d0c:	9d400015 	stw	r21,0(r19)
  805d10:	9d400415 	stw	r21,16(r19)
  805d14:	9d000515 	stw	r20,20(r19)
  805d18:	b009883a 	mov	r4,r22
  805d1c:	980b883a 	mov	r5,r19
  805d20:	08077740 	call	807774 <__srefill_r>
  805d24:	98c00117 	ldw	r3,4(r19)
  805d28:	9c800415 	stw	r18,16(r19)
  805d2c:	9c400515 	stw	r17,20(r19)
  805d30:	a8eb883a 	add	r21,r21,r3
  805d34:	9c000015 	stw	r16,0(r19)
  805d38:	a0e9c83a 	sub	r20,r20,r3
  805d3c:	98000115 	stw	zero,4(r19)
  805d40:	103fef26 	beq	r2,zero,805d00 <_fread_r+0x154>
  805d44:	d9400017 	ldw	r5,0(sp)
  805d48:	bd09c83a 	sub	r4,r23,r20
  805d4c:	08053b80 	call	8053b8 <__udivsi3>
  805d50:	1039883a 	mov	fp,r2
  805d54:	003fc506 	br	805c6c <_fread_r+0xc0>
  805d58:	0039883a 	mov	fp,zero
  805d5c:	003fc306 	br	805c6c <_fread_r+0xc0>
  805d60:	08057e40 	call	8057e4 <__sinit>
  805d64:	9c400117 	ldw	r17,4(r19)
  805d68:	883fa70e 	bge	r17,zero,805c08 <_fread_r+0x5c>
  805d6c:	0023883a 	mov	r17,zero
  805d70:	98000115 	stw	zero,4(r19)
  805d74:	003fa406 	br	805c08 <_fread_r+0x5c>
  805d78:	8825883a 	mov	r18,r17
  805d7c:	003fca06 	br	805ca8 <_fread_r+0xfc>
  805d80:	99400017 	ldw	r5,0(r19)
  805d84:	900d883a 	mov	r6,r18
  805d88:	08073380 	call	807338 <memcpy>
  805d8c:	98c00117 	ldw	r3,4(r19)
  805d90:	98800017 	ldw	r2,0(r19)
  805d94:	1c87c83a 	sub	r3,r3,r18
  805d98:	1485883a 	add	r2,r2,r18
  805d9c:	98800015 	stw	r2,0(r19)
  805da0:	98c00115 	stw	r3,4(r19)
  805da4:	003fb106 	br	805c6c <_fread_r+0xc0>

00805da8 <fread>:
  805da8:	00802174 	movhi	r2,133
  805dac:	10828104 	addi	r2,r2,2564
  805db0:	2017883a 	mov	r11,r4
  805db4:	11000017 	ldw	r4,0(r2)
  805db8:	defffe04 	addi	sp,sp,-8
  805dbc:	3013883a 	mov	r9,r6
  805dc0:	2805883a 	mov	r2,r5
  805dc4:	d9c00015 	stw	r7,0(sp)
  805dc8:	580b883a 	mov	r5,r11
  805dcc:	100d883a 	mov	r6,r2
  805dd0:	480f883a 	mov	r7,r9
  805dd4:	dfc00115 	stw	ra,4(sp)
  805dd8:	0805bac0 	call	805bac <_fread_r>
  805ddc:	dfc00117 	ldw	ra,4(sp)
  805de0:	dec00204 	addi	sp,sp,8
  805de4:	f800283a 	ret

00805de8 <_malloc_trim_r>:
  805de8:	defffb04 	addi	sp,sp,-20
  805dec:	dcc00315 	stw	r19,12(sp)
  805df0:	04c02174 	movhi	r19,133
  805df4:	9cfc2304 	addi	r19,r19,-3956
  805df8:	dc800215 	stw	r18,8(sp)
  805dfc:	dc400115 	stw	r17,4(sp)
  805e00:	dc000015 	stw	r16,0(sp)
  805e04:	2823883a 	mov	r17,r5
  805e08:	2025883a 	mov	r18,r4
  805e0c:	dfc00415 	stw	ra,16(sp)
  805e10:	08170e80 	call	8170e8 <__malloc_lock>
  805e14:	98800217 	ldw	r2,8(r19)
  805e18:	9009883a 	mov	r4,r18
  805e1c:	000b883a 	mov	r5,zero
  805e20:	10c00117 	ldw	r3,4(r2)
  805e24:	00bfff04 	movi	r2,-4
  805e28:	18a0703a 	and	r16,r3,r2
  805e2c:	8463c83a 	sub	r17,r16,r17
  805e30:	8c43fbc4 	addi	r17,r17,4079
  805e34:	8822d33a 	srli	r17,r17,12
  805e38:	0083ffc4 	movi	r2,4095
  805e3c:	8c7fffc4 	addi	r17,r17,-1
  805e40:	8822933a 	slli	r17,r17,12
  805e44:	1440060e 	bge	r2,r17,805e60 <_malloc_trim_r+0x78>
  805e48:	08079540 	call	807954 <_sbrk_r>
  805e4c:	98c00217 	ldw	r3,8(r19)
  805e50:	9009883a 	mov	r4,r18
  805e54:	044bc83a 	sub	r5,zero,r17
  805e58:	80c7883a 	add	r3,r16,r3
  805e5c:	10c00926 	beq	r2,r3,805e84 <_malloc_trim_r+0x9c>
  805e60:	08171f00 	call	8171f0 <__malloc_unlock>
  805e64:	0005883a 	mov	r2,zero
  805e68:	dfc00417 	ldw	ra,16(sp)
  805e6c:	dcc00317 	ldw	r19,12(sp)
  805e70:	dc800217 	ldw	r18,8(sp)
  805e74:	dc400117 	ldw	r17,4(sp)
  805e78:	dc000017 	ldw	r16,0(sp)
  805e7c:	dec00504 	addi	sp,sp,20
  805e80:	f800283a 	ret
  805e84:	9009883a 	mov	r4,r18
  805e88:	08079540 	call	807954 <_sbrk_r>
  805e8c:	844dc83a 	sub	r6,r16,r17
  805e90:	00ffffc4 	movi	r3,-1
  805e94:	9009883a 	mov	r4,r18
  805e98:	000b883a 	mov	r5,zero
  805e9c:	01c021b4 	movhi	r7,134
  805ea0:	39f61c04 	addi	r7,r7,-10128
  805ea4:	31800054 	ori	r6,r6,1
  805ea8:	10c00926 	beq	r2,r3,805ed0 <_malloc_trim_r+0xe8>
  805eac:	38800017 	ldw	r2,0(r7)
  805eb0:	98c00217 	ldw	r3,8(r19)
  805eb4:	9009883a 	mov	r4,r18
  805eb8:	1445c83a 	sub	r2,r2,r17
  805ebc:	38800015 	stw	r2,0(r7)
  805ec0:	19800115 	stw	r6,4(r3)
  805ec4:	08171f00 	call	8171f0 <__malloc_unlock>
  805ec8:	00800044 	movi	r2,1
  805ecc:	003fe606 	br	805e68 <_malloc_trim_r+0x80>
  805ed0:	08079540 	call	807954 <_sbrk_r>
  805ed4:	99800217 	ldw	r6,8(r19)
  805ed8:	100f883a 	mov	r7,r2
  805edc:	9009883a 	mov	r4,r18
  805ee0:	1187c83a 	sub	r3,r2,r6
  805ee4:	008003c4 	movi	r2,15
  805ee8:	19400054 	ori	r5,r3,1
  805eec:	10ffdc0e 	bge	r2,r3,805e60 <_malloc_trim_r+0x78>
  805ef0:	00802174 	movhi	r2,133
  805ef4:	10828404 	addi	r2,r2,2576
  805ef8:	10c00017 	ldw	r3,0(r2)
  805efc:	008021b4 	movhi	r2,134
  805f00:	10b61c04 	addi	r2,r2,-10128
  805f04:	31400115 	stw	r5,4(r6)
  805f08:	38c7c83a 	sub	r3,r7,r3
  805f0c:	10c00015 	stw	r3,0(r2)
  805f10:	003fd306 	br	805e60 <_malloc_trim_r+0x78>

00805f14 <_free_r>:
  805f14:	defffd04 	addi	sp,sp,-12
  805f18:	dc400115 	stw	r17,4(sp)
  805f1c:	dc000015 	stw	r16,0(sp)
  805f20:	dfc00215 	stw	ra,8(sp)
  805f24:	2821883a 	mov	r16,r5
  805f28:	2023883a 	mov	r17,r4
  805f2c:	28005a26 	beq	r5,zero,806098 <_free_r+0x184>
  805f30:	08170e80 	call	8170e8 <__malloc_lock>
  805f34:	823ffe04 	addi	r8,r16,-8
  805f38:	41400117 	ldw	r5,4(r8)
  805f3c:	00bfff84 	movi	r2,-2
  805f40:	02802174 	movhi	r10,133
  805f44:	52bc2304 	addi	r10,r10,-3956
  805f48:	288e703a 	and	r7,r5,r2
  805f4c:	41cd883a 	add	r6,r8,r7
  805f50:	30c00117 	ldw	r3,4(r6)
  805f54:	51000217 	ldw	r4,8(r10)
  805f58:	00bfff04 	movi	r2,-4
  805f5c:	1892703a 	and	r9,r3,r2
  805f60:	5017883a 	mov	r11,r10
  805f64:	31006726 	beq	r6,r4,806104 <_free_r+0x1f0>
  805f68:	2880004c 	andi	r2,r5,1
  805f6c:	1005003a 	cmpeq	r2,r2,zero
  805f70:	32400115 	stw	r9,4(r6)
  805f74:	10001a1e 	bne	r2,zero,805fe0 <_free_r+0xcc>
  805f78:	000b883a 	mov	r5,zero
  805f7c:	3247883a 	add	r3,r6,r9
  805f80:	18800117 	ldw	r2,4(r3)
  805f84:	1080004c 	andi	r2,r2,1
  805f88:	1000231e 	bne	r2,zero,806018 <_free_r+0x104>
  805f8c:	280ac03a 	cmpne	r5,r5,zero
  805f90:	3a4f883a 	add	r7,r7,r9
  805f94:	2800451e 	bne	r5,zero,8060ac <_free_r+0x198>
  805f98:	31000217 	ldw	r4,8(r6)
  805f9c:	00802174 	movhi	r2,133
  805fa0:	10bc2504 	addi	r2,r2,-3948
  805fa4:	20807b26 	beq	r4,r2,806194 <_free_r+0x280>
  805fa8:	30800317 	ldw	r2,12(r6)
  805fac:	3a07883a 	add	r3,r7,r8
  805fb0:	19c00015 	stw	r7,0(r3)
  805fb4:	11000215 	stw	r4,8(r2)
  805fb8:	20800315 	stw	r2,12(r4)
  805fbc:	38800054 	ori	r2,r7,1
  805fc0:	40800115 	stw	r2,4(r8)
  805fc4:	28001a26 	beq	r5,zero,806030 <_free_r+0x11c>
  805fc8:	8809883a 	mov	r4,r17
  805fcc:	dfc00217 	ldw	ra,8(sp)
  805fd0:	dc400117 	ldw	r17,4(sp)
  805fd4:	dc000017 	ldw	r16,0(sp)
  805fd8:	dec00304 	addi	sp,sp,12
  805fdc:	08171f01 	jmpi	8171f0 <__malloc_unlock>
  805fe0:	80bffe17 	ldw	r2,-8(r16)
  805fe4:	50c00204 	addi	r3,r10,8
  805fe8:	4091c83a 	sub	r8,r8,r2
  805fec:	41000217 	ldw	r4,8(r8)
  805ff0:	388f883a 	add	r7,r7,r2
  805ff4:	20c06126 	beq	r4,r3,80617c <_free_r+0x268>
  805ff8:	40800317 	ldw	r2,12(r8)
  805ffc:	3247883a 	add	r3,r6,r9
  806000:	000b883a 	mov	r5,zero
  806004:	11000215 	stw	r4,8(r2)
  806008:	20800315 	stw	r2,12(r4)
  80600c:	18800117 	ldw	r2,4(r3)
  806010:	1080004c 	andi	r2,r2,1
  806014:	103fdd26 	beq	r2,zero,805f8c <_free_r+0x78>
  806018:	38800054 	ori	r2,r7,1
  80601c:	3a07883a 	add	r3,r7,r8
  806020:	280ac03a 	cmpne	r5,r5,zero
  806024:	40800115 	stw	r2,4(r8)
  806028:	19c00015 	stw	r7,0(r3)
  80602c:	283fe61e 	bne	r5,zero,805fc8 <_free_r+0xb4>
  806030:	00807fc4 	movi	r2,511
  806034:	11c01f2e 	bgeu	r2,r7,8060b4 <_free_r+0x1a0>
  806038:	3806d27a 	srli	r3,r7,9
  80603c:	1800481e 	bne	r3,zero,806160 <_free_r+0x24c>
  806040:	3804d0fa 	srli	r2,r7,3
  806044:	100690fa 	slli	r3,r2,3
  806048:	1acd883a 	add	r6,r3,r11
  80604c:	31400217 	ldw	r5,8(r6)
  806050:	31405926 	beq	r6,r5,8061b8 <_free_r+0x2a4>
  806054:	28800117 	ldw	r2,4(r5)
  806058:	00ffff04 	movi	r3,-4
  80605c:	10c4703a 	and	r2,r2,r3
  806060:	3880022e 	bgeu	r7,r2,80606c <_free_r+0x158>
  806064:	29400217 	ldw	r5,8(r5)
  806068:	317ffa1e 	bne	r6,r5,806054 <_free_r+0x140>
  80606c:	29800317 	ldw	r6,12(r5)
  806070:	41800315 	stw	r6,12(r8)
  806074:	41400215 	stw	r5,8(r8)
  806078:	8809883a 	mov	r4,r17
  80607c:	2a000315 	stw	r8,12(r5)
  806080:	32000215 	stw	r8,8(r6)
  806084:	dfc00217 	ldw	ra,8(sp)
  806088:	dc400117 	ldw	r17,4(sp)
  80608c:	dc000017 	ldw	r16,0(sp)
  806090:	dec00304 	addi	sp,sp,12
  806094:	08171f01 	jmpi	8171f0 <__malloc_unlock>
  806098:	dfc00217 	ldw	ra,8(sp)
  80609c:	dc400117 	ldw	r17,4(sp)
  8060a0:	dc000017 	ldw	r16,0(sp)
  8060a4:	dec00304 	addi	sp,sp,12
  8060a8:	f800283a 	ret
  8060ac:	31000217 	ldw	r4,8(r6)
  8060b0:	003fbd06 	br	805fa8 <_free_r+0x94>
  8060b4:	3806d0fa 	srli	r3,r7,3
  8060b8:	00800044 	movi	r2,1
  8060bc:	51400117 	ldw	r5,4(r10)
  8060c0:	180890fa 	slli	r4,r3,3
  8060c4:	1807d0ba 	srai	r3,r3,2
  8060c8:	22c9883a 	add	r4,r4,r11
  8060cc:	21800217 	ldw	r6,8(r4)
  8060d0:	10c4983a 	sll	r2,r2,r3
  8060d4:	41000315 	stw	r4,12(r8)
  8060d8:	41800215 	stw	r6,8(r8)
  8060dc:	288ab03a 	or	r5,r5,r2
  8060e0:	22000215 	stw	r8,8(r4)
  8060e4:	8809883a 	mov	r4,r17
  8060e8:	51400115 	stw	r5,4(r10)
  8060ec:	32000315 	stw	r8,12(r6)
  8060f0:	dfc00217 	ldw	ra,8(sp)
  8060f4:	dc400117 	ldw	r17,4(sp)
  8060f8:	dc000017 	ldw	r16,0(sp)
  8060fc:	dec00304 	addi	sp,sp,12
  806100:	08171f01 	jmpi	8171f0 <__malloc_unlock>
  806104:	2880004c 	andi	r2,r5,1
  806108:	3a4d883a 	add	r6,r7,r9
  80610c:	1000071e 	bne	r2,zero,80612c <_free_r+0x218>
  806110:	80bffe17 	ldw	r2,-8(r16)
  806114:	4091c83a 	sub	r8,r8,r2
  806118:	41000317 	ldw	r4,12(r8)
  80611c:	40c00217 	ldw	r3,8(r8)
  806120:	308d883a 	add	r6,r6,r2
  806124:	20c00215 	stw	r3,8(r4)
  806128:	19000315 	stw	r4,12(r3)
  80612c:	00802174 	movhi	r2,133
  806130:	10828304 	addi	r2,r2,2572
  806134:	11000017 	ldw	r4,0(r2)
  806138:	30c00054 	ori	r3,r6,1
  80613c:	52000215 	stw	r8,8(r10)
  806140:	40c00115 	stw	r3,4(r8)
  806144:	313fa036 	bltu	r6,r4,805fc8 <_free_r+0xb4>
  806148:	00802174 	movhi	r2,133
  80614c:	1082db04 	addi	r2,r2,2924
  806150:	11400017 	ldw	r5,0(r2)
  806154:	8809883a 	mov	r4,r17
  806158:	0805de80 	call	805de8 <_malloc_trim_r>
  80615c:	003f9a06 	br	805fc8 <_free_r+0xb4>
  806160:	00800104 	movi	r2,4
  806164:	10c0072e 	bgeu	r2,r3,806184 <_free_r+0x270>
  806168:	00800504 	movi	r2,20
  80616c:	10c01936 	bltu	r2,r3,8061d4 <_free_r+0x2c0>
  806170:	188016c4 	addi	r2,r3,91
  806174:	100690fa 	slli	r3,r2,3
  806178:	003fb306 	br	806048 <_free_r+0x134>
  80617c:	01400044 	movi	r5,1
  806180:	003f7e06 	br	805f7c <_free_r+0x68>
  806184:	3804d1ba 	srli	r2,r7,6
  806188:	10800e04 	addi	r2,r2,56
  80618c:	100690fa 	slli	r3,r2,3
  806190:	003fad06 	br	806048 <_free_r+0x134>
  806194:	22000315 	stw	r8,12(r4)
  806198:	22000215 	stw	r8,8(r4)
  80619c:	3a05883a 	add	r2,r7,r8
  8061a0:	38c00054 	ori	r3,r7,1
  8061a4:	11c00015 	stw	r7,0(r2)
  8061a8:	41000215 	stw	r4,8(r8)
  8061ac:	40c00115 	stw	r3,4(r8)
  8061b0:	41000315 	stw	r4,12(r8)
  8061b4:	003f8406 	br	805fc8 <_free_r+0xb4>
  8061b8:	1005d0ba 	srai	r2,r2,2
  8061bc:	00c00044 	movi	r3,1
  8061c0:	51000117 	ldw	r4,4(r10)
  8061c4:	1886983a 	sll	r3,r3,r2
  8061c8:	20c8b03a 	or	r4,r4,r3
  8061cc:	51000115 	stw	r4,4(r10)
  8061d0:	003fa706 	br	806070 <_free_r+0x15c>
  8061d4:	00801504 	movi	r2,84
  8061d8:	10c00436 	bltu	r2,r3,8061ec <_free_r+0x2d8>
  8061dc:	3804d33a 	srli	r2,r7,12
  8061e0:	10801b84 	addi	r2,r2,110
  8061e4:	100690fa 	slli	r3,r2,3
  8061e8:	003f9706 	br	806048 <_free_r+0x134>
  8061ec:	00805504 	movi	r2,340
  8061f0:	10c00436 	bltu	r2,r3,806204 <_free_r+0x2f0>
  8061f4:	3804d3fa 	srli	r2,r7,15
  8061f8:	10801dc4 	addi	r2,r2,119
  8061fc:	100690fa 	slli	r3,r2,3
  806200:	003f9106 	br	806048 <_free_r+0x134>
  806204:	00815504 	movi	r2,1364
  806208:	10c0032e 	bgeu	r2,r3,806218 <_free_r+0x304>
  80620c:	00801f84 	movi	r2,126
  806210:	00c0fc04 	movi	r3,1008
  806214:	003f8c06 	br	806048 <_free_r+0x134>
  806218:	3804d4ba 	srli	r2,r7,18
  80621c:	10801f04 	addi	r2,r2,124
  806220:	100690fa 	slli	r3,r2,3
  806224:	003f8806 	br	806048 <_free_r+0x134>

00806228 <_fseek_r>:
  806228:	deffe804 	addi	sp,sp,-96
  80622c:	dd801515 	stw	r22,84(sp)
  806230:	dcc01215 	stw	r19,72(sp)
  806234:	dc801115 	stw	r18,68(sp)
  806238:	dc000f15 	stw	r16,60(sp)
  80623c:	dfc01715 	stw	ra,92(sp)
  806240:	ddc01615 	stw	r23,88(sp)
  806244:	dd401415 	stw	r21,80(sp)
  806248:	dd001315 	stw	r20,76(sp)
  80624c:	dc401015 	stw	r17,64(sp)
  806250:	2025883a 	mov	r18,r4
  806254:	2821883a 	mov	r16,r5
  806258:	302d883a 	mov	r22,r6
  80625c:	3827883a 	mov	r19,r7
  806260:	20000226 	beq	r4,zero,80626c <_fseek_r+0x44>
  806264:	20800e17 	ldw	r2,56(r4)
  806268:	10007826 	beq	r2,zero,80644c <_fseek_r+0x224>
  80626c:	8080030b 	ldhu	r2,12(r16)
  806270:	00c04204 	movi	r3,264
  806274:	1080420c 	andi	r2,r2,264
  806278:	10c07926 	beq	r2,r3,806460 <_fseek_r+0x238>
  80627c:	85400a17 	ldw	r21,40(r16)
  806280:	a800ea26 	beq	r21,zero,80662c <_fseek_r+0x404>
  806284:	00800044 	movi	r2,1
  806288:	98805f26 	beq	r19,r2,806408 <_fseek_r+0x1e0>
  80628c:	00800084 	movi	r2,2
  806290:	98801026 	beq	r19,r2,8062d4 <_fseek_r+0xac>
  806294:	98000f26 	beq	r19,zero,8062d4 <_fseek_r+0xac>
  806298:	00800584 	movi	r2,22
  80629c:	013fffc4 	movi	r4,-1
  8062a0:	90800015 	stw	r2,0(r18)
  8062a4:	2005883a 	mov	r2,r4
  8062a8:	dfc01717 	ldw	ra,92(sp)
  8062ac:	ddc01617 	ldw	r23,88(sp)
  8062b0:	dd801517 	ldw	r22,84(sp)
  8062b4:	dd401417 	ldw	r21,80(sp)
  8062b8:	dd001317 	ldw	r20,76(sp)
  8062bc:	dcc01217 	ldw	r19,72(sp)
  8062c0:	dc801117 	ldw	r18,68(sp)
  8062c4:	dc401017 	ldw	r17,64(sp)
  8062c8:	dc000f17 	ldw	r16,60(sp)
  8062cc:	dec01804 	addi	sp,sp,96
  8062d0:	f800283a 	ret
  8062d4:	81800417 	ldw	r6,16(r16)
  8062d8:	0023883a 	mov	r17,zero
  8062dc:	002f883a 	mov	r23,zero
  8062e0:	3000a626 	beq	r6,zero,80657c <_fseek_r+0x354>
  8062e4:	8100030b 	ldhu	r4,12(r16)
  8062e8:	2082068c 	andi	r2,r4,2074
  8062ec:	1000081e 	bne	r2,zero,806310 <_fseek_r+0xe8>
  8062f0:	2081000c 	andi	r2,r4,1024
  8062f4:	10001b1e 	bne	r2,zero,806364 <_fseek_r+0x13c>
  8062f8:	00802034 	movhi	r2,128
  8062fc:	109f4904 	addi	r2,r2,32036
  806300:	a8800926 	beq	r21,r2,806328 <_fseek_r+0x100>
  806304:	8080030b 	ldhu	r2,12(r16)
  806308:	10820014 	ori	r2,r2,2048
  80630c:	8080030d 	sth	r2,12(r16)
  806310:	9009883a 	mov	r4,r18
  806314:	800b883a 	mov	r5,r16
  806318:	08055040 	call	805504 <_fflush_r>
  80631c:	1000a326 	beq	r2,zero,8065ac <_fseek_r+0x384>
  806320:	013fffc4 	movi	r4,-1
  806324:	003fdf06 	br	8062a4 <_fseek_r+0x7c>
  806328:	8140038f 	ldh	r5,14(r16)
  80632c:	283ff516 	blt	r5,zero,806304 <_fseek_r+0xdc>
  806330:	9009883a 	mov	r4,r18
  806334:	d80d883a 	mov	r6,sp
  806338:	08066880 	call	806688 <_fstat_r>
  80633c:	103ff11e 	bne	r2,zero,806304 <_fseek_r+0xdc>
  806340:	d8800117 	ldw	r2,4(sp)
  806344:	00e00014 	movui	r3,32768
  806348:	10bc000c 	andi	r2,r2,61440
  80634c:	10ffed1e 	bne	r2,r3,806304 <_fseek_r+0xdc>
  806350:	80c0030b 	ldhu	r3,12(r16)
  806354:	00810004 	movi	r2,1024
  806358:	80801315 	stw	r2,76(r16)
  80635c:	1886b03a 	or	r3,r3,r2
  806360:	80c0030d 	sth	r3,12(r16)
  806364:	9800701e 	bne	r19,zero,806528 <_fseek_r+0x300>
  806368:	b029883a 	mov	r20,r22
  80636c:	b804c03a 	cmpne	r2,r23,zero
  806370:	10003f1e 	bne	r2,zero,806470 <_fseek_r+0x248>
  806374:	8100030b 	ldhu	r4,12(r16)
  806378:	2084000c 	andi	r2,r4,4096
  80637c:	1000a126 	beq	r2,zero,806604 <_fseek_r+0x3dc>
  806380:	81801417 	ldw	r6,80(r16)
  806384:	80c00117 	ldw	r3,4(r16)
  806388:	81400c17 	ldw	r5,48(r16)
  80638c:	30e3c83a 	sub	r17,r6,r3
  806390:	28008026 	beq	r5,zero,806594 <_fseek_r+0x36c>
  806394:	81c00f17 	ldw	r7,60(r16)
  806398:	89e3c83a 	sub	r17,r17,r7
  80639c:	80800e17 	ldw	r2,56(r16)
  8063a0:	81800417 	ldw	r6,16(r16)
  8063a4:	88c7883a 	add	r3,r17,r3
  8063a8:	1185c83a 	sub	r2,r2,r6
  8063ac:	11cf883a 	add	r7,r2,r7
  8063b0:	1887c83a 	sub	r3,r3,r2
  8063b4:	2088000c 	andi	r2,r4,8192
  8063b8:	10003e1e 	bne	r2,zero,8064b4 <_fseek_r+0x28c>
  8063bc:	a0c03d16 	blt	r20,r3,8064b4 <_fseek_r+0x28c>
  8063c0:	38c5883a 	add	r2,r7,r3
  8063c4:	a0803b2e 	bgeu	r20,r2,8064b4 <_fseek_r+0x28c>
  8063c8:	a0c5c83a 	sub	r2,r20,r3
  8063cc:	3887c83a 	sub	r3,r7,r2
  8063d0:	3085883a 	add	r2,r6,r2
  8063d4:	80800015 	stw	r2,0(r16)
  8063d8:	80c00115 	stw	r3,4(r16)
  8063dc:	28000526 	beq	r5,zero,8063f4 <_fseek_r+0x1cc>
  8063e0:	80801004 	addi	r2,r16,64
  8063e4:	28800226 	beq	r5,r2,8063f0 <_fseek_r+0x1c8>
  8063e8:	9009883a 	mov	r4,r18
  8063ec:	0805f140 	call	805f14 <_free_r>
  8063f0:	80000c15 	stw	zero,48(r16)
  8063f4:	8080030b 	ldhu	r2,12(r16)
  8063f8:	0009883a 	mov	r4,zero
  8063fc:	10bff7cc 	andi	r2,r2,65503
  806400:	8080030d 	sth	r2,12(r16)
  806404:	003fa706 	br	8062a4 <_fseek_r+0x7c>
  806408:	9009883a 	mov	r4,r18
  80640c:	800b883a 	mov	r5,r16
  806410:	08055040 	call	805504 <_fflush_r>
  806414:	8100030b 	ldhu	r4,12(r16)
  806418:	2084000c 	andi	r2,r4,4096
  80641c:	10008726 	beq	r2,zero,80663c <_fseek_r+0x414>
  806420:	84401417 	ldw	r17,80(r16)
  806424:	2080010c 	andi	r2,r4,4
  806428:	1000171e 	bne	r2,zero,806488 <_fseek_r+0x260>
  80642c:	2080020c 	andi	r2,r4,8
  806430:	10003b26 	beq	r2,zero,806520 <_fseek_r+0x2f8>
  806434:	80800017 	ldw	r2,0(r16)
  806438:	10003926 	beq	r2,zero,806520 <_fseek_r+0x2f8>
  80643c:	81800417 	ldw	r6,16(r16)
  806440:	1185c83a 	sub	r2,r2,r6
  806444:	88a3883a 	add	r17,r17,r2
  806448:	00001606 	br	8064a4 <_fseek_r+0x27c>
  80644c:	08057e40 	call	8057e4 <__sinit>
  806450:	8080030b 	ldhu	r2,12(r16)
  806454:	00c04204 	movi	r3,264
  806458:	1080420c 	andi	r2,r2,264
  80645c:	10ff871e 	bne	r2,r3,80627c <_fseek_r+0x54>
  806460:	9009883a 	mov	r4,r18
  806464:	800b883a 	mov	r5,r16
  806468:	08055040 	call	805504 <_fflush_r>
  80646c:	003f8306 	br	80627c <_fseek_r+0x54>
  806470:	81400c17 	ldw	r5,48(r16)
  806474:	28004526 	beq	r5,zero,80658c <_fseek_r+0x364>
  806478:	8100030b 	ldhu	r4,12(r16)
  80647c:	80c00117 	ldw	r3,4(r16)
  806480:	81c00f17 	ldw	r7,60(r16)
  806484:	003fc506 	br	80639c <_fseek_r+0x174>
  806488:	80c00117 	ldw	r3,4(r16)
  80648c:	80800c17 	ldw	r2,48(r16)
  806490:	88e3c83a 	sub	r17,r17,r3
  806494:	10002226 	beq	r2,zero,806520 <_fseek_r+0x2f8>
  806498:	81c00f17 	ldw	r7,60(r16)
  80649c:	81800417 	ldw	r6,16(r16)
  8064a0:	89e3c83a 	sub	r17,r17,r7
  8064a4:	b46d883a 	add	r22,r22,r17
  8064a8:	0027883a 	mov	r19,zero
  8064ac:	05c00044 	movi	r23,1
  8064b0:	003f8b06 	br	8062e0 <_fseek_r+0xb8>
  8064b4:	80801317 	ldw	r2,76(r16)
  8064b8:	81400717 	ldw	r5,28(r16)
  8064bc:	9009883a 	mov	r4,r18
  8064c0:	0085c83a 	sub	r2,zero,r2
  8064c4:	a0a2703a 	and	r17,r20,r2
  8064c8:	880d883a 	mov	r6,r17
  8064cc:	000f883a 	mov	r7,zero
  8064d0:	a83ee83a 	callr	r21
  8064d4:	00ffffc4 	movi	r3,-1
  8064d8:	10ff8d26 	beq	r2,r3,806310 <_fseek_r+0xe8>
  8064dc:	80800417 	ldw	r2,16(r16)
  8064e0:	81400c17 	ldw	r5,48(r16)
  8064e4:	80000115 	stw	zero,4(r16)
  8064e8:	80800015 	stw	r2,0(r16)
  8064ec:	28000526 	beq	r5,zero,806504 <_fseek_r+0x2dc>
  8064f0:	80801004 	addi	r2,r16,64
  8064f4:	28800226 	beq	r5,r2,806500 <_fseek_r+0x2d8>
  8064f8:	9009883a 	mov	r4,r18
  8064fc:	0805f140 	call	805f14 <_free_r>
  806500:	80000c15 	stw	zero,48(r16)
  806504:	8080030b 	ldhu	r2,12(r16)
  806508:	a463c83a 	sub	r17,r20,r17
  80650c:	10bff7cc 	andi	r2,r2,65503
  806510:	8080030d 	sth	r2,12(r16)
  806514:	88000c1e 	bne	r17,zero,806548 <_fseek_r+0x320>
  806518:	0009883a 	mov	r4,zero
  80651c:	003f6106 	br	8062a4 <_fseek_r+0x7c>
  806520:	81800417 	ldw	r6,16(r16)
  806524:	003fdf06 	br	8064a4 <_fseek_r+0x27c>
  806528:	8140038f 	ldh	r5,14(r16)
  80652c:	9009883a 	mov	r4,r18
  806530:	d80d883a 	mov	r6,sp
  806534:	08066880 	call	806688 <_fstat_r>
  806538:	103f751e 	bne	r2,zero,806310 <_fseek_r+0xe8>
  80653c:	d8800417 	ldw	r2,16(sp)
  806540:	b0a9883a 	add	r20,r22,r2
  806544:	003f8906 	br	80636c <_fseek_r+0x144>
  806548:	9009883a 	mov	r4,r18
  80654c:	800b883a 	mov	r5,r16
  806550:	08077740 	call	807774 <__srefill_r>
  806554:	103f6e1e 	bne	r2,zero,806310 <_fseek_r+0xe8>
  806558:	80c00117 	ldw	r3,4(r16)
  80655c:	1c7f6c36 	bltu	r3,r17,806310 <_fseek_r+0xe8>
  806560:	80800017 	ldw	r2,0(r16)
  806564:	1c47c83a 	sub	r3,r3,r17
  806568:	0009883a 	mov	r4,zero
  80656c:	1445883a 	add	r2,r2,r17
  806570:	80c00115 	stw	r3,4(r16)
  806574:	80800015 	stw	r2,0(r16)
  806578:	003f4a06 	br	8062a4 <_fseek_r+0x7c>
  80657c:	9009883a 	mov	r4,r18
  806580:	800b883a 	mov	r5,r16
  806584:	0806a640 	call	806a64 <__smakebuf_r>
  806588:	003f5606 	br	8062e4 <_fseek_r+0xbc>
  80658c:	8100030b 	ldhu	r4,12(r16)
  806590:	80c00117 	ldw	r3,4(r16)
  806594:	80800017 	ldw	r2,0(r16)
  806598:	81800417 	ldw	r6,16(r16)
  80659c:	1185c83a 	sub	r2,r2,r6
  8065a0:	10cf883a 	add	r7,r2,r3
  8065a4:	8887c83a 	sub	r3,r17,r2
  8065a8:	003f8206 	br	8063b4 <_fseek_r+0x18c>
  8065ac:	81400717 	ldw	r5,28(r16)
  8065b0:	b00d883a 	mov	r6,r22
  8065b4:	980f883a 	mov	r7,r19
  8065b8:	9009883a 	mov	r4,r18
  8065bc:	a83ee83a 	callr	r21
  8065c0:	00ffffc4 	movi	r3,-1
  8065c4:	10ff5626 	beq	r2,r3,806320 <_fseek_r+0xf8>
  8065c8:	81400c17 	ldw	r5,48(r16)
  8065cc:	28000526 	beq	r5,zero,8065e4 <_fseek_r+0x3bc>
  8065d0:	80801004 	addi	r2,r16,64
  8065d4:	28800226 	beq	r5,r2,8065e0 <_fseek_r+0x3b8>
  8065d8:	9009883a 	mov	r4,r18
  8065dc:	0805f140 	call	805f14 <_free_r>
  8065e0:	80000c15 	stw	zero,48(r16)
  8065e4:	8080030b 	ldhu	r2,12(r16)
  8065e8:	80c00417 	ldw	r3,16(r16)
  8065ec:	0009883a 	mov	r4,zero
  8065f0:	10bdf7cc 	andi	r2,r2,63455
  8065f4:	8080030d 	sth	r2,12(r16)
  8065f8:	80c00015 	stw	r3,0(r16)
  8065fc:	80000115 	stw	zero,4(r16)
  806600:	003f2806 	br	8062a4 <_fseek_r+0x7c>
  806604:	81400717 	ldw	r5,28(r16)
  806608:	000d883a 	mov	r6,zero
  80660c:	9009883a 	mov	r4,r18
  806610:	01c00044 	movi	r7,1
  806614:	a83ee83a 	callr	r21
  806618:	100d883a 	mov	r6,r2
  80661c:	00bfffc4 	movi	r2,-1
  806620:	30bf3b26 	beq	r6,r2,806310 <_fseek_r+0xe8>
  806624:	8100030b 	ldhu	r4,12(r16)
  806628:	003f5606 	br	806384 <_fseek_r+0x15c>
  80662c:	00800744 	movi	r2,29
  806630:	013fffc4 	movi	r4,-1
  806634:	90800015 	stw	r2,0(r18)
  806638:	003f1a06 	br	8062a4 <_fseek_r+0x7c>
  80663c:	81400717 	ldw	r5,28(r16)
  806640:	980f883a 	mov	r7,r19
  806644:	9009883a 	mov	r4,r18
  806648:	000d883a 	mov	r6,zero
  80664c:	a83ee83a 	callr	r21
  806650:	1023883a 	mov	r17,r2
  806654:	00bfffc4 	movi	r2,-1
  806658:	88bf3126 	beq	r17,r2,806320 <_fseek_r+0xf8>
  80665c:	8100030b 	ldhu	r4,12(r16)
  806660:	003f7006 	br	806424 <_fseek_r+0x1fc>

00806664 <fseek>:
  806664:	00802174 	movhi	r2,133
  806668:	10828104 	addi	r2,r2,2564
  80666c:	2013883a 	mov	r9,r4
  806670:	11000017 	ldw	r4,0(r2)
  806674:	2805883a 	mov	r2,r5
  806678:	300f883a 	mov	r7,r6
  80667c:	480b883a 	mov	r5,r9
  806680:	100d883a 	mov	r6,r2
  806684:	08062281 	jmpi	806228 <_fseek_r>

00806688 <_fstat_r>:
  806688:	defffd04 	addi	sp,sp,-12
  80668c:	dc000015 	stw	r16,0(sp)
  806690:	04002174 	movhi	r16,133
  806694:	8402da04 	addi	r16,r16,2920
  806698:	dc400115 	stw	r17,4(sp)
  80669c:	80000015 	stw	zero,0(r16)
  8066a0:	2023883a 	mov	r17,r4
  8066a4:	2809883a 	mov	r4,r5
  8066a8:	300b883a 	mov	r5,r6
  8066ac:	dfc00215 	stw	ra,8(sp)
  8066b0:	08163140 	call	816314 <fstat>
  8066b4:	1007883a 	mov	r3,r2
  8066b8:	00bfffc4 	movi	r2,-1
  8066bc:	18800626 	beq	r3,r2,8066d8 <_fstat_r+0x50>
  8066c0:	1805883a 	mov	r2,r3
  8066c4:	dfc00217 	ldw	ra,8(sp)
  8066c8:	dc400117 	ldw	r17,4(sp)
  8066cc:	dc000017 	ldw	r16,0(sp)
  8066d0:	dec00304 	addi	sp,sp,12
  8066d4:	f800283a 	ret
  8066d8:	80800017 	ldw	r2,0(r16)
  8066dc:	103ff826 	beq	r2,zero,8066c0 <_fstat_r+0x38>
  8066e0:	88800015 	stw	r2,0(r17)
  8066e4:	1805883a 	mov	r2,r3
  8066e8:	dfc00217 	ldw	ra,8(sp)
  8066ec:	dc400117 	ldw	r17,4(sp)
  8066f0:	dc000017 	ldw	r16,0(sp)
  8066f4:	dec00304 	addi	sp,sp,12
  8066f8:	f800283a 	ret

008066fc <_ftell_r>:
  8066fc:	defffd04 	addi	sp,sp,-12
  806700:	dc400115 	stw	r17,4(sp)
  806704:	dc000015 	stw	r16,0(sp)
  806708:	dfc00215 	stw	ra,8(sp)
  80670c:	2023883a 	mov	r17,r4
  806710:	2821883a 	mov	r16,r5
  806714:	20000226 	beq	r4,zero,806720 <_ftell_r+0x24>
  806718:	20800e17 	ldw	r2,56(r4)
  80671c:	10002426 	beq	r2,zero,8067b0 <_ftell_r+0xb4>
  806720:	80800a17 	ldw	r2,40(r16)
  806724:	10002426 	beq	r2,zero,8067b8 <_ftell_r+0xbc>
  806728:	8809883a 	mov	r4,r17
  80672c:	800b883a 	mov	r5,r16
  806730:	08055040 	call	805504 <_fflush_r>
  806734:	80c0030b 	ldhu	r3,12(r16)
  806738:	1884000c 	andi	r2,r3,4096
  80673c:	10002226 	beq	r2,zero,8067c8 <_ftell_r+0xcc>
  806740:	81001417 	ldw	r4,80(r16)
  806744:	1880010c 	andi	r2,r3,4
  806748:	10000d1e 	bne	r2,zero,806780 <_ftell_r+0x84>
  80674c:	1880020c 	andi	r2,r3,8
  806750:	10001126 	beq	r2,zero,806798 <_ftell_r+0x9c>
  806754:	80c00017 	ldw	r3,0(r16)
  806758:	18000f26 	beq	r3,zero,806798 <_ftell_r+0x9c>
  80675c:	80800417 	ldw	r2,16(r16)
  806760:	1885c83a 	sub	r2,r3,r2
  806764:	2089883a 	add	r4,r4,r2
  806768:	2005883a 	mov	r2,r4
  80676c:	dfc00217 	ldw	ra,8(sp)
  806770:	dc400117 	ldw	r17,4(sp)
  806774:	dc000017 	ldw	r16,0(sp)
  806778:	dec00304 	addi	sp,sp,12
  80677c:	f800283a 	ret
  806780:	80800117 	ldw	r2,4(r16)
  806784:	80c00c17 	ldw	r3,48(r16)
  806788:	2089c83a 	sub	r4,r4,r2
  80678c:	18000226 	beq	r3,zero,806798 <_ftell_r+0x9c>
  806790:	80800f17 	ldw	r2,60(r16)
  806794:	2089c83a 	sub	r4,r4,r2
  806798:	2005883a 	mov	r2,r4
  80679c:	dfc00217 	ldw	ra,8(sp)
  8067a0:	dc400117 	ldw	r17,4(sp)
  8067a4:	dc000017 	ldw	r16,0(sp)
  8067a8:	dec00304 	addi	sp,sp,12
  8067ac:	f800283a 	ret
  8067b0:	08057e40 	call	8057e4 <__sinit>
  8067b4:	003fda06 	br	806720 <_ftell_r+0x24>
  8067b8:	00800744 	movi	r2,29
  8067bc:	013fffc4 	movi	r4,-1
  8067c0:	88800015 	stw	r2,0(r17)
  8067c4:	003ff406 	br	806798 <_ftell_r+0x9c>
  8067c8:	80c00a17 	ldw	r3,40(r16)
  8067cc:	81400717 	ldw	r5,28(r16)
  8067d0:	8809883a 	mov	r4,r17
  8067d4:	000d883a 	mov	r6,zero
  8067d8:	01c00044 	movi	r7,1
  8067dc:	183ee83a 	callr	r3
  8067e0:	1009883a 	mov	r4,r2
  8067e4:	00bfffc4 	movi	r2,-1
  8067e8:	20bfeb26 	beq	r4,r2,806798 <_ftell_r+0x9c>
  8067ec:	80c0030b 	ldhu	r3,12(r16)
  8067f0:	003fd406 	br	806744 <_ftell_r+0x48>

008067f4 <ftell>:
  8067f4:	00802174 	movhi	r2,133
  8067f8:	10828104 	addi	r2,r2,2564
  8067fc:	200b883a 	mov	r5,r4
  806800:	11000017 	ldw	r4,0(r2)
  806804:	08066fc1 	jmpi	8066fc <_ftell_r>

00806808 <_fwalk_reent>:
  806808:	defff704 	addi	sp,sp,-36
  80680c:	dcc00315 	stw	r19,12(sp)
  806810:	24c0b804 	addi	r19,r4,736
  806814:	dd800615 	stw	r22,24(sp)
  806818:	dd400515 	stw	r21,20(sp)
  80681c:	dfc00815 	stw	ra,32(sp)
  806820:	ddc00715 	stw	r23,28(sp)
  806824:	dd000415 	stw	r20,16(sp)
  806828:	dc800215 	stw	r18,8(sp)
  80682c:	dc400115 	stw	r17,4(sp)
  806830:	dc000015 	stw	r16,0(sp)
  806834:	202b883a 	mov	r21,r4
  806838:	282d883a 	mov	r22,r5
  80683c:	08057d40 	call	8057d4 <__sfp_lock_acquire>
  806840:	98002126 	beq	r19,zero,8068c8 <_fwalk_reent+0xc0>
  806844:	002f883a 	mov	r23,zero
  806848:	9c800117 	ldw	r18,4(r19)
  80684c:	9c000217 	ldw	r16,8(r19)
  806850:	90bfffc4 	addi	r2,r18,-1
  806854:	10000d16 	blt	r2,zero,80688c <_fwalk_reent+0x84>
  806858:	0023883a 	mov	r17,zero
  80685c:	053fffc4 	movi	r20,-1
  806860:	8080030f 	ldh	r2,12(r16)
  806864:	8c400044 	addi	r17,r17,1
  806868:	10000626 	beq	r2,zero,806884 <_fwalk_reent+0x7c>
  80686c:	8080038f 	ldh	r2,14(r16)
  806870:	800b883a 	mov	r5,r16
  806874:	a809883a 	mov	r4,r21
  806878:	15000226 	beq	r2,r20,806884 <_fwalk_reent+0x7c>
  80687c:	b03ee83a 	callr	r22
  806880:	b8aeb03a 	or	r23,r23,r2
  806884:	84001704 	addi	r16,r16,92
  806888:	947ff51e 	bne	r18,r17,806860 <_fwalk_reent+0x58>
  80688c:	9cc00017 	ldw	r19,0(r19)
  806890:	983fed1e 	bne	r19,zero,806848 <_fwalk_reent+0x40>
  806894:	08057d80 	call	8057d8 <__sfp_lock_release>
  806898:	b805883a 	mov	r2,r23
  80689c:	dfc00817 	ldw	ra,32(sp)
  8068a0:	ddc00717 	ldw	r23,28(sp)
  8068a4:	dd800617 	ldw	r22,24(sp)
  8068a8:	dd400517 	ldw	r21,20(sp)
  8068ac:	dd000417 	ldw	r20,16(sp)
  8068b0:	dcc00317 	ldw	r19,12(sp)
  8068b4:	dc800217 	ldw	r18,8(sp)
  8068b8:	dc400117 	ldw	r17,4(sp)
  8068bc:	dc000017 	ldw	r16,0(sp)
  8068c0:	dec00904 	addi	sp,sp,36
  8068c4:	f800283a 	ret
  8068c8:	002f883a 	mov	r23,zero
  8068cc:	003ff106 	br	806894 <_fwalk_reent+0x8c>

008068d0 <_fwalk>:
  8068d0:	defff804 	addi	sp,sp,-32
  8068d4:	dcc00315 	stw	r19,12(sp)
  8068d8:	24c0b804 	addi	r19,r4,736
  8068dc:	dd400515 	stw	r21,20(sp)
  8068e0:	dfc00715 	stw	ra,28(sp)
  8068e4:	dd800615 	stw	r22,24(sp)
  8068e8:	dd000415 	stw	r20,16(sp)
  8068ec:	dc800215 	stw	r18,8(sp)
  8068f0:	dc400115 	stw	r17,4(sp)
  8068f4:	dc000015 	stw	r16,0(sp)
  8068f8:	282b883a 	mov	r21,r5
  8068fc:	08057d40 	call	8057d4 <__sfp_lock_acquire>
  806900:	98001f26 	beq	r19,zero,806980 <_fwalk+0xb0>
  806904:	002d883a 	mov	r22,zero
  806908:	9c800117 	ldw	r18,4(r19)
  80690c:	9c000217 	ldw	r16,8(r19)
  806910:	90bfffc4 	addi	r2,r18,-1
  806914:	10000c16 	blt	r2,zero,806948 <_fwalk+0x78>
  806918:	0023883a 	mov	r17,zero
  80691c:	053fffc4 	movi	r20,-1
  806920:	8080030f 	ldh	r2,12(r16)
  806924:	8c400044 	addi	r17,r17,1
  806928:	10000526 	beq	r2,zero,806940 <_fwalk+0x70>
  80692c:	8080038f 	ldh	r2,14(r16)
  806930:	8009883a 	mov	r4,r16
  806934:	15000226 	beq	r2,r20,806940 <_fwalk+0x70>
  806938:	a83ee83a 	callr	r21
  80693c:	b0acb03a 	or	r22,r22,r2
  806940:	84001704 	addi	r16,r16,92
  806944:	947ff61e 	bne	r18,r17,806920 <_fwalk+0x50>
  806948:	9cc00017 	ldw	r19,0(r19)
  80694c:	983fee1e 	bne	r19,zero,806908 <_fwalk+0x38>
  806950:	08057d80 	call	8057d8 <__sfp_lock_release>
  806954:	b005883a 	mov	r2,r22
  806958:	dfc00717 	ldw	ra,28(sp)
  80695c:	dd800617 	ldw	r22,24(sp)
  806960:	dd400517 	ldw	r21,20(sp)
  806964:	dd000417 	ldw	r20,16(sp)
  806968:	dcc00317 	ldw	r19,12(sp)
  80696c:	dc800217 	ldw	r18,8(sp)
  806970:	dc400117 	ldw	r17,4(sp)
  806974:	dc000017 	ldw	r16,0(sp)
  806978:	dec00804 	addi	sp,sp,32
  80697c:	f800283a 	ret
  806980:	002d883a 	mov	r22,zero
  806984:	003ff206 	br	806950 <_fwalk+0x80>

00806988 <_fwrite_r>:
  806988:	defff604 	addi	sp,sp,-40
  80698c:	dc400615 	stw	r17,24(sp)
  806990:	39a3383a 	mul	r17,r7,r6
  806994:	00800044 	movi	r2,1
  806998:	dcc00815 	stw	r19,32(sp)
  80699c:	dc800715 	stw	r18,28(sp)
  8069a0:	dc000515 	stw	r16,20(sp)
  8069a4:	dfc00915 	stw	ra,36(sp)
  8069a8:	3825883a 	mov	r18,r7
  8069ac:	3027883a 	mov	r19,r6
  8069b0:	2021883a 	mov	r16,r4
  8069b4:	d9400015 	stw	r5,0(sp)
  8069b8:	d8800315 	stw	r2,12(sp)
  8069bc:	dc400115 	stw	r17,4(sp)
  8069c0:	dc400415 	stw	r17,16(sp)
  8069c4:	dec00215 	stw	sp,8(sp)
  8069c8:	20000226 	beq	r4,zero,8069d4 <_fwrite_r+0x4c>
  8069cc:	20800e17 	ldw	r2,56(r4)
  8069d0:	10001226 	beq	r2,zero,806a1c <_fwrite_r+0x94>
  8069d4:	d9400a17 	ldw	r5,40(sp)
  8069d8:	8009883a 	mov	r4,r16
  8069dc:	d9800204 	addi	r6,sp,8
  8069e0:	080e7b00 	call	80e7b0 <__sfvwrite_r>
  8069e4:	980b883a 	mov	r5,r19
  8069e8:	10000426 	beq	r2,zero,8069fc <_fwrite_r+0x74>
  8069ec:	d9000417 	ldw	r4,16(sp)
  8069f0:	8909c83a 	sub	r4,r17,r4
  8069f4:	08053b80 	call	8053b8 <__udivsi3>
  8069f8:	1025883a 	mov	r18,r2
  8069fc:	9005883a 	mov	r2,r18
  806a00:	dfc00917 	ldw	ra,36(sp)
  806a04:	dcc00817 	ldw	r19,32(sp)
  806a08:	dc800717 	ldw	r18,28(sp)
  806a0c:	dc400617 	ldw	r17,24(sp)
  806a10:	dc000517 	ldw	r16,20(sp)
  806a14:	dec00a04 	addi	sp,sp,40
  806a18:	f800283a 	ret
  806a1c:	08057e40 	call	8057e4 <__sinit>
  806a20:	003fec06 	br	8069d4 <_fwrite_r+0x4c>

00806a24 <fwrite>:
  806a24:	00802174 	movhi	r2,133
  806a28:	10828104 	addi	r2,r2,2564
  806a2c:	2017883a 	mov	r11,r4
  806a30:	11000017 	ldw	r4,0(r2)
  806a34:	defffe04 	addi	sp,sp,-8
  806a38:	3013883a 	mov	r9,r6
  806a3c:	2805883a 	mov	r2,r5
  806a40:	d9c00015 	stw	r7,0(sp)
  806a44:	580b883a 	mov	r5,r11
  806a48:	100d883a 	mov	r6,r2
  806a4c:	480f883a 	mov	r7,r9
  806a50:	dfc00115 	stw	ra,4(sp)
  806a54:	08069880 	call	806988 <_fwrite_r>
  806a58:	dfc00117 	ldw	ra,4(sp)
  806a5c:	dec00204 	addi	sp,sp,8
  806a60:	f800283a 	ret

00806a64 <__smakebuf_r>:
  806a64:	2880030b 	ldhu	r2,12(r5)
  806a68:	deffed04 	addi	sp,sp,-76
  806a6c:	dc401015 	stw	r17,64(sp)
  806a70:	1080008c 	andi	r2,r2,2
  806a74:	dc000f15 	stw	r16,60(sp)
  806a78:	dfc01215 	stw	ra,72(sp)
  806a7c:	dc801115 	stw	r18,68(sp)
  806a80:	2821883a 	mov	r16,r5
  806a84:	2023883a 	mov	r17,r4
  806a88:	10000b26 	beq	r2,zero,806ab8 <__smakebuf_r+0x54>
  806a8c:	28c010c4 	addi	r3,r5,67
  806a90:	00800044 	movi	r2,1
  806a94:	28800515 	stw	r2,20(r5)
  806a98:	28c00415 	stw	r3,16(r5)
  806a9c:	28c00015 	stw	r3,0(r5)
  806aa0:	dfc01217 	ldw	ra,72(sp)
  806aa4:	dc801117 	ldw	r18,68(sp)
  806aa8:	dc401017 	ldw	r17,64(sp)
  806aac:	dc000f17 	ldw	r16,60(sp)
  806ab0:	dec01304 	addi	sp,sp,76
  806ab4:	f800283a 	ret
  806ab8:	2940038f 	ldh	r5,14(r5)
  806abc:	28002116 	blt	r5,zero,806b44 <__smakebuf_r+0xe0>
  806ac0:	d80d883a 	mov	r6,sp
  806ac4:	08066880 	call	806688 <_fstat_r>
  806ac8:	10001e16 	blt	r2,zero,806b44 <__smakebuf_r+0xe0>
  806acc:	d8800117 	ldw	r2,4(sp)
  806ad0:	00e00014 	movui	r3,32768
  806ad4:	113c000c 	andi	r4,r2,61440
  806ad8:	20c03126 	beq	r4,r3,806ba0 <__smakebuf_r+0x13c>
  806adc:	8080030b 	ldhu	r2,12(r16)
  806ae0:	00c80004 	movi	r3,8192
  806ae4:	10820014 	ori	r2,r2,2048
  806ae8:	8080030d 	sth	r2,12(r16)
  806aec:	20c01e26 	beq	r4,r3,806b68 <__smakebuf_r+0x104>
  806af0:	04810004 	movi	r18,1024
  806af4:	8809883a 	mov	r4,r17
  806af8:	900b883a 	mov	r5,r18
  806afc:	0806bf80 	call	806bf8 <_malloc_r>
  806b00:	1009883a 	mov	r4,r2
  806b04:	10003126 	beq	r2,zero,806bcc <__smakebuf_r+0x168>
  806b08:	80c0030b 	ldhu	r3,12(r16)
  806b0c:	00802034 	movhi	r2,128
  806b10:	10963204 	addi	r2,r2,22728
  806b14:	88800f15 	stw	r2,60(r17)
  806b18:	18c02014 	ori	r3,r3,128
  806b1c:	84800515 	stw	r18,20(r16)
  806b20:	80c0030d 	sth	r3,12(r16)
  806b24:	81000415 	stw	r4,16(r16)
  806b28:	81000015 	stw	r4,0(r16)
  806b2c:	dfc01217 	ldw	ra,72(sp)
  806b30:	dc801117 	ldw	r18,68(sp)
  806b34:	dc401017 	ldw	r17,64(sp)
  806b38:	dc000f17 	ldw	r16,60(sp)
  806b3c:	dec01304 	addi	sp,sp,76
  806b40:	f800283a 	ret
  806b44:	80c0030b 	ldhu	r3,12(r16)
  806b48:	1880200c 	andi	r2,r3,128
  806b4c:	10000426 	beq	r2,zero,806b60 <__smakebuf_r+0xfc>
  806b50:	04801004 	movi	r18,64
  806b54:	18820014 	ori	r2,r3,2048
  806b58:	8080030d 	sth	r2,12(r16)
  806b5c:	003fe506 	br	806af4 <__smakebuf_r+0x90>
  806b60:	04810004 	movi	r18,1024
  806b64:	003ffb06 	br	806b54 <__smakebuf_r+0xf0>
  806b68:	8140038f 	ldh	r5,14(r16)
  806b6c:	8809883a 	mov	r4,r17
  806b70:	080ec4c0 	call	80ec4c <_isatty_r>
  806b74:	103fde26 	beq	r2,zero,806af0 <__smakebuf_r+0x8c>
  806b78:	8080030b 	ldhu	r2,12(r16)
  806b7c:	80c010c4 	addi	r3,r16,67
  806b80:	04810004 	movi	r18,1024
  806b84:	10800054 	ori	r2,r2,1
  806b88:	8080030d 	sth	r2,12(r16)
  806b8c:	00800044 	movi	r2,1
  806b90:	80c00415 	stw	r3,16(r16)
  806b94:	80800515 	stw	r2,20(r16)
  806b98:	80c00015 	stw	r3,0(r16)
  806b9c:	003fd506 	br	806af4 <__smakebuf_r+0x90>
  806ba0:	80c00a17 	ldw	r3,40(r16)
  806ba4:	00802034 	movhi	r2,128
  806ba8:	109f4904 	addi	r2,r2,32036
  806bac:	18bfcb1e 	bne	r3,r2,806adc <__smakebuf_r+0x78>
  806bb0:	8080030b 	ldhu	r2,12(r16)
  806bb4:	00c10004 	movi	r3,1024
  806bb8:	1825883a 	mov	r18,r3
  806bbc:	10c4b03a 	or	r2,r2,r3
  806bc0:	8080030d 	sth	r2,12(r16)
  806bc4:	80c01315 	stw	r3,76(r16)
  806bc8:	003fca06 	br	806af4 <__smakebuf_r+0x90>
  806bcc:	8100030b 	ldhu	r4,12(r16)
  806bd0:	2080800c 	andi	r2,r4,512
  806bd4:	103fb21e 	bne	r2,zero,806aa0 <__smakebuf_r+0x3c>
  806bd8:	80c010c4 	addi	r3,r16,67
  806bdc:	21000094 	ori	r4,r4,2
  806be0:	00800044 	movi	r2,1
  806be4:	80800515 	stw	r2,20(r16)
  806be8:	8100030d 	sth	r4,12(r16)
  806bec:	80c00415 	stw	r3,16(r16)
  806bf0:	80c00015 	stw	r3,0(r16)
  806bf4:	003faa06 	br	806aa0 <__smakebuf_r+0x3c>

00806bf8 <_malloc_r>:
  806bf8:	defff604 	addi	sp,sp,-40
  806bfc:	28c002c4 	addi	r3,r5,11
  806c00:	00800584 	movi	r2,22
  806c04:	dc800215 	stw	r18,8(sp)
  806c08:	dfc00915 	stw	ra,36(sp)
  806c0c:	df000815 	stw	fp,32(sp)
  806c10:	ddc00715 	stw	r23,28(sp)
  806c14:	dd800615 	stw	r22,24(sp)
  806c18:	dd400515 	stw	r21,20(sp)
  806c1c:	dd000415 	stw	r20,16(sp)
  806c20:	dcc00315 	stw	r19,12(sp)
  806c24:	dc400115 	stw	r17,4(sp)
  806c28:	dc000015 	stw	r16,0(sp)
  806c2c:	2025883a 	mov	r18,r4
  806c30:	10c01236 	bltu	r2,r3,806c7c <_malloc_r+0x84>
  806c34:	04400404 	movi	r17,16
  806c38:	8940142e 	bgeu	r17,r5,806c8c <_malloc_r+0x94>
  806c3c:	00800304 	movi	r2,12
  806c40:	0007883a 	mov	r3,zero
  806c44:	90800015 	stw	r2,0(r18)
  806c48:	1805883a 	mov	r2,r3
  806c4c:	dfc00917 	ldw	ra,36(sp)
  806c50:	df000817 	ldw	fp,32(sp)
  806c54:	ddc00717 	ldw	r23,28(sp)
  806c58:	dd800617 	ldw	r22,24(sp)
  806c5c:	dd400517 	ldw	r21,20(sp)
  806c60:	dd000417 	ldw	r20,16(sp)
  806c64:	dcc00317 	ldw	r19,12(sp)
  806c68:	dc800217 	ldw	r18,8(sp)
  806c6c:	dc400117 	ldw	r17,4(sp)
  806c70:	dc000017 	ldw	r16,0(sp)
  806c74:	dec00a04 	addi	sp,sp,40
  806c78:	f800283a 	ret
  806c7c:	00bffe04 	movi	r2,-8
  806c80:	18a2703a 	and	r17,r3,r2
  806c84:	883fed16 	blt	r17,zero,806c3c <_malloc_r+0x44>
  806c88:	897fec36 	bltu	r17,r5,806c3c <_malloc_r+0x44>
  806c8c:	9009883a 	mov	r4,r18
  806c90:	08170e80 	call	8170e8 <__malloc_lock>
  806c94:	00807dc4 	movi	r2,503
  806c98:	14402b2e 	bgeu	r2,r17,806d48 <_malloc_r+0x150>
  806c9c:	8806d27a 	srli	r3,r17,9
  806ca0:	18003f1e 	bne	r3,zero,806da0 <_malloc_r+0x1a8>
  806ca4:	880cd0fa 	srli	r6,r17,3
  806ca8:	300490fa 	slli	r2,r6,3
  806cac:	02c02174 	movhi	r11,133
  806cb0:	5afc2304 	addi	r11,r11,-3956
  806cb4:	12cb883a 	add	r5,r2,r11
  806cb8:	2c000317 	ldw	r16,12(r5)
  806cbc:	580f883a 	mov	r7,r11
  806cc0:	2c00041e 	bne	r5,r16,806cd4 <_malloc_r+0xdc>
  806cc4:	00000a06 	br	806cf0 <_malloc_r+0xf8>
  806cc8:	1800860e 	bge	r3,zero,806ee4 <_malloc_r+0x2ec>
  806ccc:	84000317 	ldw	r16,12(r16)
  806cd0:	2c000726 	beq	r5,r16,806cf0 <_malloc_r+0xf8>
  806cd4:	80800117 	ldw	r2,4(r16)
  806cd8:	00ffff04 	movi	r3,-4
  806cdc:	10c8703a 	and	r4,r2,r3
  806ce0:	2447c83a 	sub	r3,r4,r17
  806ce4:	008003c4 	movi	r2,15
  806ce8:	10fff70e 	bge	r2,r3,806cc8 <_malloc_r+0xd0>
  806cec:	31bfffc4 	addi	r6,r6,-1
  806cf0:	32400044 	addi	r9,r6,1
  806cf4:	02802174 	movhi	r10,133
  806cf8:	52bc2504 	addi	r10,r10,-3948
  806cfc:	54000217 	ldw	r16,8(r10)
  806d00:	8280a026 	beq	r16,r10,806f84 <_malloc_r+0x38c>
  806d04:	80800117 	ldw	r2,4(r16)
  806d08:	00ffff04 	movi	r3,-4
  806d0c:	10ca703a 	and	r5,r2,r3
  806d10:	2c4dc83a 	sub	r6,r5,r17
  806d14:	008003c4 	movi	r2,15
  806d18:	11808316 	blt	r2,r6,806f28 <_malloc_r+0x330>
  806d1c:	52800315 	stw	r10,12(r10)
  806d20:	52800215 	stw	r10,8(r10)
  806d24:	30002916 	blt	r6,zero,806dcc <_malloc_r+0x1d4>
  806d28:	8147883a 	add	r3,r16,r5
  806d2c:	18800117 	ldw	r2,4(r3)
  806d30:	9009883a 	mov	r4,r18
  806d34:	10800054 	ori	r2,r2,1
  806d38:	18800115 	stw	r2,4(r3)
  806d3c:	08171f00 	call	8171f0 <__malloc_unlock>
  806d40:	80c00204 	addi	r3,r16,8
  806d44:	003fc006 	br	806c48 <_malloc_r+0x50>
  806d48:	02c02174 	movhi	r11,133
  806d4c:	5afc2304 	addi	r11,r11,-3956
  806d50:	8ac5883a 	add	r2,r17,r11
  806d54:	14000317 	ldw	r16,12(r2)
  806d58:	580f883a 	mov	r7,r11
  806d5c:	8806d0fa 	srli	r3,r17,3
  806d60:	14006c26 	beq	r2,r16,806f14 <_malloc_r+0x31c>
  806d64:	80c00117 	ldw	r3,4(r16)
  806d68:	00bfff04 	movi	r2,-4
  806d6c:	81800317 	ldw	r6,12(r16)
  806d70:	1886703a 	and	r3,r3,r2
  806d74:	80c7883a 	add	r3,r16,r3
  806d78:	18800117 	ldw	r2,4(r3)
  806d7c:	81400217 	ldw	r5,8(r16)
  806d80:	9009883a 	mov	r4,r18
  806d84:	10800054 	ori	r2,r2,1
  806d88:	18800115 	stw	r2,4(r3)
  806d8c:	31400215 	stw	r5,8(r6)
  806d90:	29800315 	stw	r6,12(r5)
  806d94:	08171f00 	call	8171f0 <__malloc_unlock>
  806d98:	80c00204 	addi	r3,r16,8
  806d9c:	003faa06 	br	806c48 <_malloc_r+0x50>
  806da0:	00800104 	movi	r2,4
  806da4:	10c0052e 	bgeu	r2,r3,806dbc <_malloc_r+0x1c4>
  806da8:	00800504 	movi	r2,20
  806dac:	10c07836 	bltu	r2,r3,806f90 <_malloc_r+0x398>
  806db0:	198016c4 	addi	r6,r3,91
  806db4:	300490fa 	slli	r2,r6,3
  806db8:	003fbc06 	br	806cac <_malloc_r+0xb4>
  806dbc:	8804d1ba 	srli	r2,r17,6
  806dc0:	11800e04 	addi	r6,r2,56
  806dc4:	300490fa 	slli	r2,r6,3
  806dc8:	003fb806 	br	806cac <_malloc_r+0xb4>
  806dcc:	00807fc4 	movi	r2,511
  806dd0:	1140bb36 	bltu	r2,r5,8070c0 <_malloc_r+0x4c8>
  806dd4:	2806d0fa 	srli	r3,r5,3
  806dd8:	573ffe04 	addi	fp,r10,-8
  806ddc:	00800044 	movi	r2,1
  806de0:	180890fa 	slli	r4,r3,3
  806de4:	1807d0ba 	srai	r3,r3,2
  806de8:	e1c00117 	ldw	r7,4(fp)
  806dec:	5909883a 	add	r4,r11,r4
  806df0:	21400217 	ldw	r5,8(r4)
  806df4:	10c4983a 	sll	r2,r2,r3
  806df8:	81000315 	stw	r4,12(r16)
  806dfc:	81400215 	stw	r5,8(r16)
  806e00:	388eb03a 	or	r7,r7,r2
  806e04:	2c000315 	stw	r16,12(r5)
  806e08:	24000215 	stw	r16,8(r4)
  806e0c:	e1c00115 	stw	r7,4(fp)
  806e10:	4807883a 	mov	r3,r9
  806e14:	4800cd16 	blt	r9,zero,80714c <_malloc_r+0x554>
  806e18:	1807d0ba 	srai	r3,r3,2
  806e1c:	00800044 	movi	r2,1
  806e20:	10c8983a 	sll	r4,r2,r3
  806e24:	39004436 	bltu	r7,r4,806f38 <_malloc_r+0x340>
  806e28:	21c4703a 	and	r2,r4,r7
  806e2c:	10000a1e 	bne	r2,zero,806e58 <_malloc_r+0x260>
  806e30:	2109883a 	add	r4,r4,r4
  806e34:	00bfff04 	movi	r2,-4
  806e38:	4884703a 	and	r2,r9,r2
  806e3c:	3906703a 	and	r3,r7,r4
  806e40:	12400104 	addi	r9,r2,4
  806e44:	1800041e 	bne	r3,zero,806e58 <_malloc_r+0x260>
  806e48:	2109883a 	add	r4,r4,r4
  806e4c:	3904703a 	and	r2,r7,r4
  806e50:	4a400104 	addi	r9,r9,4
  806e54:	103ffc26 	beq	r2,zero,806e48 <_malloc_r+0x250>
  806e58:	480490fa 	slli	r2,r9,3
  806e5c:	4819883a 	mov	r12,r9
  806e60:	023fff04 	movi	r8,-4
  806e64:	589b883a 	add	r13,r11,r2
  806e68:	6807883a 	mov	r3,r13
  806e6c:	014003c4 	movi	r5,15
  806e70:	1c000317 	ldw	r16,12(r3)
  806e74:	1c00041e 	bne	r3,r16,806e88 <_malloc_r+0x290>
  806e78:	0000a706 	br	807118 <_malloc_r+0x520>
  806e7c:	3000ab0e 	bge	r6,zero,80712c <_malloc_r+0x534>
  806e80:	84000317 	ldw	r16,12(r16)
  806e84:	1c00a426 	beq	r3,r16,807118 <_malloc_r+0x520>
  806e88:	80800117 	ldw	r2,4(r16)
  806e8c:	1204703a 	and	r2,r2,r8
  806e90:	144dc83a 	sub	r6,r2,r17
  806e94:	29bff90e 	bge	r5,r6,806e7c <_malloc_r+0x284>
  806e98:	81000317 	ldw	r4,12(r16)
  806e9c:	80c00217 	ldw	r3,8(r16)
  806ea0:	89400054 	ori	r5,r17,1
  806ea4:	8445883a 	add	r2,r16,r17
  806ea8:	20c00215 	stw	r3,8(r4)
  806eac:	19000315 	stw	r4,12(r3)
  806eb0:	81400115 	stw	r5,4(r16)
  806eb4:	1187883a 	add	r3,r2,r6
  806eb8:	31000054 	ori	r4,r6,1
  806ebc:	50800315 	stw	r2,12(r10)
  806ec0:	50800215 	stw	r2,8(r10)
  806ec4:	19800015 	stw	r6,0(r3)
  806ec8:	11000115 	stw	r4,4(r2)
  806ecc:	12800215 	stw	r10,8(r2)
  806ed0:	12800315 	stw	r10,12(r2)
  806ed4:	9009883a 	mov	r4,r18
  806ed8:	08171f00 	call	8171f0 <__malloc_unlock>
  806edc:	80c00204 	addi	r3,r16,8
  806ee0:	003f5906 	br	806c48 <_malloc_r+0x50>
  806ee4:	8109883a 	add	r4,r16,r4
  806ee8:	20800117 	ldw	r2,4(r4)
  806eec:	80c00217 	ldw	r3,8(r16)
  806ef0:	81400317 	ldw	r5,12(r16)
  806ef4:	10800054 	ori	r2,r2,1
  806ef8:	20800115 	stw	r2,4(r4)
  806efc:	28c00215 	stw	r3,8(r5)
  806f00:	19400315 	stw	r5,12(r3)
  806f04:	9009883a 	mov	r4,r18
  806f08:	08171f00 	call	8171f0 <__malloc_unlock>
  806f0c:	80c00204 	addi	r3,r16,8
  806f10:	003f4d06 	br	806c48 <_malloc_r+0x50>
  806f14:	80800204 	addi	r2,r16,8
  806f18:	14000317 	ldw	r16,12(r2)
  806f1c:	143f911e 	bne	r2,r16,806d64 <_malloc_r+0x16c>
  806f20:	1a400084 	addi	r9,r3,2
  806f24:	003f7306 	br	806cf4 <_malloc_r+0xfc>
  806f28:	88c00054 	ori	r3,r17,1
  806f2c:	8445883a 	add	r2,r16,r17
  806f30:	80c00115 	stw	r3,4(r16)
  806f34:	003fdf06 	br	806eb4 <_malloc_r+0x2bc>
  806f38:	e4000217 	ldw	r16,8(fp)
  806f3c:	00bfff04 	movi	r2,-4
  806f40:	80c00117 	ldw	r3,4(r16)
  806f44:	802d883a 	mov	r22,r16
  806f48:	18aa703a 	and	r21,r3,r2
  806f4c:	ac401636 	bltu	r21,r17,806fa8 <_malloc_r+0x3b0>
  806f50:	ac49c83a 	sub	r4,r21,r17
  806f54:	008003c4 	movi	r2,15
  806f58:	1100130e 	bge	r2,r4,806fa8 <_malloc_r+0x3b0>
  806f5c:	88800054 	ori	r2,r17,1
  806f60:	8447883a 	add	r3,r16,r17
  806f64:	80800115 	stw	r2,4(r16)
  806f68:	20800054 	ori	r2,r4,1
  806f6c:	18800115 	stw	r2,4(r3)
  806f70:	e0c00215 	stw	r3,8(fp)
  806f74:	9009883a 	mov	r4,r18
  806f78:	08171f00 	call	8171f0 <__malloc_unlock>
  806f7c:	80c00204 	addi	r3,r16,8
  806f80:	003f3106 	br	806c48 <_malloc_r+0x50>
  806f84:	39c00117 	ldw	r7,4(r7)
  806f88:	573ffe04 	addi	fp,r10,-8
  806f8c:	003fa006 	br	806e10 <_malloc_r+0x218>
  806f90:	00801504 	movi	r2,84
  806f94:	10c06736 	bltu	r2,r3,807134 <_malloc_r+0x53c>
  806f98:	8804d33a 	srli	r2,r17,12
  806f9c:	11801b84 	addi	r6,r2,110
  806fa0:	300490fa 	slli	r2,r6,3
  806fa4:	003f4106 	br	806cac <_malloc_r+0xb4>
  806fa8:	d0a06517 	ldw	r2,-32364(gp)
  806fac:	d0e00e17 	ldw	r3,-32712(gp)
  806fb0:	053fffc4 	movi	r20,-1
  806fb4:	10800404 	addi	r2,r2,16
  806fb8:	88a7883a 	add	r19,r17,r2
  806fbc:	1d000326 	beq	r3,r20,806fcc <_malloc_r+0x3d4>
  806fc0:	98c3ffc4 	addi	r3,r19,4095
  806fc4:	00bc0004 	movi	r2,-4096
  806fc8:	18a6703a 	and	r19,r3,r2
  806fcc:	9009883a 	mov	r4,r18
  806fd0:	980b883a 	mov	r5,r19
  806fd4:	08079540 	call	807954 <_sbrk_r>
  806fd8:	1009883a 	mov	r4,r2
  806fdc:	15000426 	beq	r2,r20,806ff0 <_malloc_r+0x3f8>
  806fe0:	854b883a 	add	r5,r16,r21
  806fe4:	1029883a 	mov	r20,r2
  806fe8:	11405a2e 	bgeu	r2,r5,807154 <_malloc_r+0x55c>
  806fec:	87000c26 	beq	r16,fp,807020 <_malloc_r+0x428>
  806ff0:	e4000217 	ldw	r16,8(fp)
  806ff4:	80c00117 	ldw	r3,4(r16)
  806ff8:	00bfff04 	movi	r2,-4
  806ffc:	1884703a 	and	r2,r3,r2
  807000:	14400336 	bltu	r2,r17,807010 <_malloc_r+0x418>
  807004:	1449c83a 	sub	r4,r2,r17
  807008:	008003c4 	movi	r2,15
  80700c:	113fd316 	blt	r2,r4,806f5c <_malloc_r+0x364>
  807010:	9009883a 	mov	r4,r18
  807014:	08171f00 	call	8171f0 <__malloc_unlock>
  807018:	0007883a 	mov	r3,zero
  80701c:	003f0a06 	br	806c48 <_malloc_r+0x50>
  807020:	05c021b4 	movhi	r23,134
  807024:	bdf61c04 	addi	r23,r23,-10128
  807028:	b8800017 	ldw	r2,0(r23)
  80702c:	988d883a 	add	r6,r19,r2
  807030:	b9800015 	stw	r6,0(r23)
  807034:	d0e00e17 	ldw	r3,-32712(gp)
  807038:	00bfffc4 	movi	r2,-1
  80703c:	18808e26 	beq	r3,r2,807278 <_malloc_r+0x680>
  807040:	2145c83a 	sub	r2,r4,r5
  807044:	3085883a 	add	r2,r6,r2
  807048:	b8800015 	stw	r2,0(r23)
  80704c:	20c001cc 	andi	r3,r4,7
  807050:	18005f1e 	bne	r3,zero,8071d0 <_malloc_r+0x5d8>
  807054:	000b883a 	mov	r5,zero
  807058:	a4c5883a 	add	r2,r20,r19
  80705c:	1083ffcc 	andi	r2,r2,4095
  807060:	00c40004 	movi	r3,4096
  807064:	1887c83a 	sub	r3,r3,r2
  807068:	28e7883a 	add	r19,r5,r3
  80706c:	9009883a 	mov	r4,r18
  807070:	980b883a 	mov	r5,r19
  807074:	08079540 	call	807954 <_sbrk_r>
  807078:	1007883a 	mov	r3,r2
  80707c:	00bfffc4 	movi	r2,-1
  807080:	18807a26 	beq	r3,r2,80726c <_malloc_r+0x674>
  807084:	1d05c83a 	sub	r2,r3,r20
  807088:	9885883a 	add	r2,r19,r2
  80708c:	10c00054 	ori	r3,r2,1
  807090:	b8800017 	ldw	r2,0(r23)
  807094:	a021883a 	mov	r16,r20
  807098:	a0c00115 	stw	r3,4(r20)
  80709c:	9885883a 	add	r2,r19,r2
  8070a0:	b8800015 	stw	r2,0(r23)
  8070a4:	e5000215 	stw	r20,8(fp)
  8070a8:	b7003626 	beq	r22,fp,807184 <_malloc_r+0x58c>
  8070ac:	018003c4 	movi	r6,15
  8070b0:	35404b36 	bltu	r6,r21,8071e0 <_malloc_r+0x5e8>
  8070b4:	00800044 	movi	r2,1
  8070b8:	a0800115 	stw	r2,4(r20)
  8070bc:	003fcd06 	br	806ff4 <_malloc_r+0x3fc>
  8070c0:	2808d27a 	srli	r4,r5,9
  8070c4:	2000371e 	bne	r4,zero,8071a4 <_malloc_r+0x5ac>
  8070c8:	2808d0fa 	srli	r4,r5,3
  8070cc:	200690fa 	slli	r3,r4,3
  8070d0:	1ad1883a 	add	r8,r3,r11
  8070d4:	41800217 	ldw	r6,8(r8)
  8070d8:	41805b26 	beq	r8,r6,807248 <_malloc_r+0x650>
  8070dc:	30800117 	ldw	r2,4(r6)
  8070e0:	00ffff04 	movi	r3,-4
  8070e4:	10c4703a 	and	r2,r2,r3
  8070e8:	2880022e 	bgeu	r5,r2,8070f4 <_malloc_r+0x4fc>
  8070ec:	31800217 	ldw	r6,8(r6)
  8070f0:	41bffa1e 	bne	r8,r6,8070dc <_malloc_r+0x4e4>
  8070f4:	32000317 	ldw	r8,12(r6)
  8070f8:	39c00117 	ldw	r7,4(r7)
  8070fc:	82000315 	stw	r8,12(r16)
  807100:	81800215 	stw	r6,8(r16)
  807104:	07002174 	movhi	fp,133
  807108:	e73c2304 	addi	fp,fp,-3956
  80710c:	34000315 	stw	r16,12(r6)
  807110:	44000215 	stw	r16,8(r8)
  807114:	003f3e06 	br	806e10 <_malloc_r+0x218>
  807118:	63000044 	addi	r12,r12,1
  80711c:	608000cc 	andi	r2,r12,3
  807120:	10005d26 	beq	r2,zero,807298 <_malloc_r+0x6a0>
  807124:	18c00204 	addi	r3,r3,8
  807128:	003f5106 	br	806e70 <_malloc_r+0x278>
  80712c:	8089883a 	add	r4,r16,r2
  807130:	003f6d06 	br	806ee8 <_malloc_r+0x2f0>
  807134:	00805504 	movi	r2,340
  807138:	10c02036 	bltu	r2,r3,8071bc <_malloc_r+0x5c4>
  80713c:	8804d3fa 	srli	r2,r17,15
  807140:	11801dc4 	addi	r6,r2,119
  807144:	300490fa 	slli	r2,r6,3
  807148:	003ed806 	br	806cac <_malloc_r+0xb4>
  80714c:	48c000c4 	addi	r3,r9,3
  807150:	003f3106 	br	806e18 <_malloc_r+0x220>
  807154:	05c021b4 	movhi	r23,134
  807158:	bdf61c04 	addi	r23,r23,-10128
  80715c:	b8800017 	ldw	r2,0(r23)
  807160:	988d883a 	add	r6,r19,r2
  807164:	b9800015 	stw	r6,0(r23)
  807168:	293fb21e 	bne	r5,r4,807034 <_malloc_r+0x43c>
  80716c:	2083ffcc 	andi	r2,r4,4095
  807170:	103fb01e 	bne	r2,zero,807034 <_malloc_r+0x43c>
  807174:	e4000217 	ldw	r16,8(fp)
  807178:	9d45883a 	add	r2,r19,r21
  80717c:	10800054 	ori	r2,r2,1
  807180:	80800115 	stw	r2,4(r16)
  807184:	b8c00017 	ldw	r3,0(r23)
  807188:	d0a06617 	ldw	r2,-32360(gp)
  80718c:	10c0012e 	bgeu	r2,r3,807194 <_malloc_r+0x59c>
  807190:	d0e06615 	stw	r3,-32360(gp)
  807194:	d0a06717 	ldw	r2,-32356(gp)
  807198:	10ff962e 	bgeu	r2,r3,806ff4 <_malloc_r+0x3fc>
  80719c:	d0e06715 	stw	r3,-32356(gp)
  8071a0:	003f9406 	br	806ff4 <_malloc_r+0x3fc>
  8071a4:	00800104 	movi	r2,4
  8071a8:	11001e36 	bltu	r2,r4,807224 <_malloc_r+0x62c>
  8071ac:	2804d1ba 	srli	r2,r5,6
  8071b0:	11000e04 	addi	r4,r2,56
  8071b4:	200690fa 	slli	r3,r4,3
  8071b8:	003fc506 	br	8070d0 <_malloc_r+0x4d8>
  8071bc:	00815504 	movi	r2,1364
  8071c0:	10c01d2e 	bgeu	r2,r3,807238 <_malloc_r+0x640>
  8071c4:	01801f84 	movi	r6,126
  8071c8:	0080fc04 	movi	r2,1008
  8071cc:	003eb706 	br	806cac <_malloc_r+0xb4>
  8071d0:	00800204 	movi	r2,8
  8071d4:	10cbc83a 	sub	r5,r2,r3
  8071d8:	2169883a 	add	r20,r4,r5
  8071dc:	003f9e06 	br	807058 <_malloc_r+0x460>
  8071e0:	00bffe04 	movi	r2,-8
  8071e4:	a93ffd04 	addi	r4,r21,-12
  8071e8:	2088703a 	and	r4,r4,r2
  8071ec:	b10b883a 	add	r5,r22,r4
  8071f0:	00c00144 	movi	r3,5
  8071f4:	28c00215 	stw	r3,8(r5)
  8071f8:	28c00115 	stw	r3,4(r5)
  8071fc:	b0800117 	ldw	r2,4(r22)
  807200:	1080004c 	andi	r2,r2,1
  807204:	2084b03a 	or	r2,r4,r2
  807208:	b0800115 	stw	r2,4(r22)
  80720c:	313fdd2e 	bgeu	r6,r4,807184 <_malloc_r+0x58c>
  807210:	b1400204 	addi	r5,r22,8
  807214:	9009883a 	mov	r4,r18
  807218:	0805f140 	call	805f14 <_free_r>
  80721c:	e4000217 	ldw	r16,8(fp)
  807220:	003fd806 	br	807184 <_malloc_r+0x58c>
  807224:	00800504 	movi	r2,20
  807228:	11001536 	bltu	r2,r4,807280 <_malloc_r+0x688>
  80722c:	210016c4 	addi	r4,r4,91
  807230:	200690fa 	slli	r3,r4,3
  807234:	003fa606 	br	8070d0 <_malloc_r+0x4d8>
  807238:	8804d4ba 	srli	r2,r17,18
  80723c:	11801f04 	addi	r6,r2,124
  807240:	300490fa 	slli	r2,r6,3
  807244:	003e9906 	br	806cac <_malloc_r+0xb4>
  807248:	2009d0ba 	srai	r4,r4,2
  80724c:	01402174 	movhi	r5,133
  807250:	297c2304 	addi	r5,r5,-3956
  807254:	00c00044 	movi	r3,1
  807258:	28800117 	ldw	r2,4(r5)
  80725c:	1906983a 	sll	r3,r3,r4
  807260:	10c4b03a 	or	r2,r2,r3
  807264:	28800115 	stw	r2,4(r5)
  807268:	003fa306 	br	8070f8 <_malloc_r+0x500>
  80726c:	0027883a 	mov	r19,zero
  807270:	00c00044 	movi	r3,1
  807274:	003f8606 	br	807090 <_malloc_r+0x498>
  807278:	d1200e15 	stw	r4,-32712(gp)
  80727c:	003f7306 	br	80704c <_malloc_r+0x454>
  807280:	00801504 	movi	r2,84
  807284:	11001936 	bltu	r2,r4,8072ec <_malloc_r+0x6f4>
  807288:	2804d33a 	srli	r2,r5,12
  80728c:	11001b84 	addi	r4,r2,110
  807290:	200690fa 	slli	r3,r4,3
  807294:	003f8e06 	br	8070d0 <_malloc_r+0x4d8>
  807298:	480b883a 	mov	r5,r9
  80729c:	6807883a 	mov	r3,r13
  8072a0:	288000cc 	andi	r2,r5,3
  8072a4:	18fffe04 	addi	r3,r3,-8
  8072a8:	297fffc4 	addi	r5,r5,-1
  8072ac:	10001526 	beq	r2,zero,807304 <_malloc_r+0x70c>
  8072b0:	18800217 	ldw	r2,8(r3)
  8072b4:	10fffa26 	beq	r2,r3,8072a0 <_malloc_r+0x6a8>
  8072b8:	2109883a 	add	r4,r4,r4
  8072bc:	393f1e36 	bltu	r7,r4,806f38 <_malloc_r+0x340>
  8072c0:	203f1d26 	beq	r4,zero,806f38 <_malloc_r+0x340>
  8072c4:	21c4703a 	and	r2,r4,r7
  8072c8:	10000226 	beq	r2,zero,8072d4 <_malloc_r+0x6dc>
  8072cc:	6013883a 	mov	r9,r12
  8072d0:	003ee106 	br	806e58 <_malloc_r+0x260>
  8072d4:	2109883a 	add	r4,r4,r4
  8072d8:	3904703a 	and	r2,r7,r4
  8072dc:	63000104 	addi	r12,r12,4
  8072e0:	103ffc26 	beq	r2,zero,8072d4 <_malloc_r+0x6dc>
  8072e4:	6013883a 	mov	r9,r12
  8072e8:	003edb06 	br	806e58 <_malloc_r+0x260>
  8072ec:	00805504 	movi	r2,340
  8072f0:	11000836 	bltu	r2,r4,807314 <_malloc_r+0x71c>
  8072f4:	2804d3fa 	srli	r2,r5,15
  8072f8:	11001dc4 	addi	r4,r2,119
  8072fc:	200690fa 	slli	r3,r4,3
  807300:	003f7306 	br	8070d0 <_malloc_r+0x4d8>
  807304:	0104303a 	nor	r2,zero,r4
  807308:	388e703a 	and	r7,r7,r2
  80730c:	e1c00115 	stw	r7,4(fp)
  807310:	003fe906 	br	8072b8 <_malloc_r+0x6c0>
  807314:	00815504 	movi	r2,1364
  807318:	1100032e 	bgeu	r2,r4,807328 <_malloc_r+0x730>
  80731c:	01001f84 	movi	r4,126
  807320:	00c0fc04 	movi	r3,1008
  807324:	003f6a06 	br	8070d0 <_malloc_r+0x4d8>
  807328:	2804d4ba 	srli	r2,r5,18
  80732c:	11001f04 	addi	r4,r2,124
  807330:	200690fa 	slli	r3,r4,3
  807334:	003f6606 	br	8070d0 <_malloc_r+0x4d8>

00807338 <memcpy>:
  807338:	01c003c4 	movi	r7,15
  80733c:	2007883a 	mov	r3,r4
  807340:	3980032e 	bgeu	r7,r6,807350 <memcpy+0x18>
  807344:	2904b03a 	or	r2,r5,r4
  807348:	108000cc 	andi	r2,r2,3
  80734c:	10000926 	beq	r2,zero,807374 <memcpy+0x3c>
  807350:	30000626 	beq	r6,zero,80736c <memcpy+0x34>
  807354:	30cd883a 	add	r6,r6,r3
  807358:	28800003 	ldbu	r2,0(r5)
  80735c:	29400044 	addi	r5,r5,1
  807360:	18800005 	stb	r2,0(r3)
  807364:	18c00044 	addi	r3,r3,1
  807368:	30fffb1e 	bne	r6,r3,807358 <memcpy+0x20>
  80736c:	2005883a 	mov	r2,r4
  807370:	f800283a 	ret
  807374:	3811883a 	mov	r8,r7
  807378:	200f883a 	mov	r7,r4
  80737c:	28c00017 	ldw	r3,0(r5)
  807380:	31bffc04 	addi	r6,r6,-16
  807384:	38c00015 	stw	r3,0(r7)
  807388:	28800117 	ldw	r2,4(r5)
  80738c:	38800115 	stw	r2,4(r7)
  807390:	28c00217 	ldw	r3,8(r5)
  807394:	38c00215 	stw	r3,8(r7)
  807398:	28800317 	ldw	r2,12(r5)
  80739c:	29400404 	addi	r5,r5,16
  8073a0:	38800315 	stw	r2,12(r7)
  8073a4:	39c00404 	addi	r7,r7,16
  8073a8:	41bff436 	bltu	r8,r6,80737c <memcpy+0x44>
  8073ac:	008000c4 	movi	r2,3
  8073b0:	1180072e 	bgeu	r2,r6,8073d0 <memcpy+0x98>
  8073b4:	1007883a 	mov	r3,r2
  8073b8:	28800017 	ldw	r2,0(r5)
  8073bc:	31bfff04 	addi	r6,r6,-4
  8073c0:	29400104 	addi	r5,r5,4
  8073c4:	38800015 	stw	r2,0(r7)
  8073c8:	39c00104 	addi	r7,r7,4
  8073cc:	19bffa36 	bltu	r3,r6,8073b8 <memcpy+0x80>
  8073d0:	3807883a 	mov	r3,r7
  8073d4:	003fde06 	br	807350 <memcpy+0x18>

008073d8 <memmove>:
  8073d8:	2807883a 	mov	r3,r5
  8073dc:	2011883a 	mov	r8,r4
  8073e0:	29000c2e 	bgeu	r5,r4,807414 <memmove+0x3c>
  8073e4:	298f883a 	add	r7,r5,r6
  8073e8:	21c00a2e 	bgeu	r4,r7,807414 <memmove+0x3c>
  8073ec:	30000726 	beq	r6,zero,80740c <memmove+0x34>
  8073f0:	2187883a 	add	r3,r4,r6
  8073f4:	198dc83a 	sub	r6,r3,r6
  8073f8:	39ffffc4 	addi	r7,r7,-1
  8073fc:	38800003 	ldbu	r2,0(r7)
  807400:	18ffffc4 	addi	r3,r3,-1
  807404:	18800005 	stb	r2,0(r3)
  807408:	19bffb1e 	bne	r3,r6,8073f8 <memmove+0x20>
  80740c:	2005883a 	mov	r2,r4
  807410:	f800283a 	ret
  807414:	01c003c4 	movi	r7,15
  807418:	39800a36 	bltu	r7,r6,807444 <memmove+0x6c>
  80741c:	303ffb26 	beq	r6,zero,80740c <memmove+0x34>
  807420:	400f883a 	mov	r7,r8
  807424:	320d883a 	add	r6,r6,r8
  807428:	28800003 	ldbu	r2,0(r5)
  80742c:	29400044 	addi	r5,r5,1
  807430:	38800005 	stb	r2,0(r7)
  807434:	39c00044 	addi	r7,r7,1
  807438:	39bffb1e 	bne	r7,r6,807428 <memmove+0x50>
  80743c:	2005883a 	mov	r2,r4
  807440:	f800283a 	ret
  807444:	1904b03a 	or	r2,r3,r4
  807448:	108000cc 	andi	r2,r2,3
  80744c:	103ff31e 	bne	r2,zero,80741c <memmove+0x44>
  807450:	3811883a 	mov	r8,r7
  807454:	180b883a 	mov	r5,r3
  807458:	200f883a 	mov	r7,r4
  80745c:	28c00017 	ldw	r3,0(r5)
  807460:	31bffc04 	addi	r6,r6,-16
  807464:	38c00015 	stw	r3,0(r7)
  807468:	28800117 	ldw	r2,4(r5)
  80746c:	38800115 	stw	r2,4(r7)
  807470:	28c00217 	ldw	r3,8(r5)
  807474:	38c00215 	stw	r3,8(r7)
  807478:	28800317 	ldw	r2,12(r5)
  80747c:	29400404 	addi	r5,r5,16
  807480:	38800315 	stw	r2,12(r7)
  807484:	39c00404 	addi	r7,r7,16
  807488:	41bff436 	bltu	r8,r6,80745c <memmove+0x84>
  80748c:	008000c4 	movi	r2,3
  807490:	1180072e 	bgeu	r2,r6,8074b0 <memmove+0xd8>
  807494:	1007883a 	mov	r3,r2
  807498:	28800017 	ldw	r2,0(r5)
  80749c:	31bfff04 	addi	r6,r6,-4
  8074a0:	29400104 	addi	r5,r5,4
  8074a4:	38800015 	stw	r2,0(r7)
  8074a8:	39c00104 	addi	r7,r7,4
  8074ac:	19bffa36 	bltu	r3,r6,807498 <memmove+0xc0>
  8074b0:	3811883a 	mov	r8,r7
  8074b4:	003fd906 	br	80741c <memmove+0x44>

008074b8 <memset>:
  8074b8:	008000c4 	movi	r2,3
  8074bc:	29403fcc 	andi	r5,r5,255
  8074c0:	2007883a 	mov	r3,r4
  8074c4:	1180022e 	bgeu	r2,r6,8074d0 <memset+0x18>
  8074c8:	2084703a 	and	r2,r4,r2
  8074cc:	10000826 	beq	r2,zero,8074f0 <memset+0x38>
  8074d0:	30000526 	beq	r6,zero,8074e8 <memset+0x30>
  8074d4:	2805883a 	mov	r2,r5
  8074d8:	30cd883a 	add	r6,r6,r3
  8074dc:	18800005 	stb	r2,0(r3)
  8074e0:	18c00044 	addi	r3,r3,1
  8074e4:	19bffd1e 	bne	r3,r6,8074dc <memset+0x24>
  8074e8:	2005883a 	mov	r2,r4
  8074ec:	f800283a 	ret
  8074f0:	2804923a 	slli	r2,r5,8
  8074f4:	020003c4 	movi	r8,15
  8074f8:	200f883a 	mov	r7,r4
  8074fc:	2884b03a 	or	r2,r5,r2
  807500:	1006943a 	slli	r3,r2,16
  807504:	10c6b03a 	or	r3,r2,r3
  807508:	41800a2e 	bgeu	r8,r6,807534 <memset+0x7c>
  80750c:	4005883a 	mov	r2,r8
  807510:	31bffc04 	addi	r6,r6,-16
  807514:	38c00015 	stw	r3,0(r7)
  807518:	38c00115 	stw	r3,4(r7)
  80751c:	38c00215 	stw	r3,8(r7)
  807520:	38c00315 	stw	r3,12(r7)
  807524:	39c00404 	addi	r7,r7,16
  807528:	11bff936 	bltu	r2,r6,807510 <memset+0x58>
  80752c:	008000c4 	movi	r2,3
  807530:	1180052e 	bgeu	r2,r6,807548 <memset+0x90>
  807534:	31bfff04 	addi	r6,r6,-4
  807538:	008000c4 	movi	r2,3
  80753c:	38c00015 	stw	r3,0(r7)
  807540:	39c00104 	addi	r7,r7,4
  807544:	11bffb36 	bltu	r2,r6,807534 <memset+0x7c>
  807548:	3807883a 	mov	r3,r7
  80754c:	003fe006 	br	8074d0 <memset+0x18>

00807550 <_open_r>:
  807550:	defffd04 	addi	sp,sp,-12
  807554:	dc000015 	stw	r16,0(sp)
  807558:	04002174 	movhi	r16,133
  80755c:	8402da04 	addi	r16,r16,2920
  807560:	dc400115 	stw	r17,4(sp)
  807564:	80000015 	stw	zero,0(r16)
  807568:	2023883a 	mov	r17,r4
  80756c:	2809883a 	mov	r4,r5
  807570:	300b883a 	mov	r5,r6
  807574:	380d883a 	mov	r6,r7
  807578:	dfc00215 	stw	ra,8(sp)
  80757c:	0816a1c0 	call	816a1c <open>
  807580:	1007883a 	mov	r3,r2
  807584:	00bfffc4 	movi	r2,-1
  807588:	18800626 	beq	r3,r2,8075a4 <_open_r+0x54>
  80758c:	1805883a 	mov	r2,r3
  807590:	dfc00217 	ldw	ra,8(sp)
  807594:	dc400117 	ldw	r17,4(sp)
  807598:	dc000017 	ldw	r16,0(sp)
  80759c:	dec00304 	addi	sp,sp,12
  8075a0:	f800283a 	ret
  8075a4:	80800017 	ldw	r2,0(r16)
  8075a8:	103ff826 	beq	r2,zero,80758c <_open_r+0x3c>
  8075ac:	88800015 	stw	r2,0(r17)
  8075b0:	1805883a 	mov	r2,r3
  8075b4:	dfc00217 	ldw	ra,8(sp)
  8075b8:	dc400117 	ldw	r17,4(sp)
  8075bc:	dc000017 	ldw	r16,0(sp)
  8075c0:	dec00304 	addi	sp,sp,12
  8075c4:	f800283a 	ret

008075c8 <_perror_r>:
  8075c8:	defffe04 	addi	sp,sp,-8
  8075cc:	dc000015 	stw	r16,0(sp)
  8075d0:	dfc00115 	stw	ra,4(sp)
  8075d4:	2021883a 	mov	r16,r4
  8075d8:	28000326 	beq	r5,zero,8075e8 <_perror_r+0x20>
  8075dc:	28800007 	ldb	r2,0(r5)
  8075e0:	2809883a 	mov	r4,r5
  8075e4:	10000c1e 	bne	r2,zero,807618 <_perror_r+0x50>
  8075e8:	81000017 	ldw	r4,0(r16)
  8075ec:	08081d00 	call	8081d0 <strerror>
  8075f0:	1009883a 	mov	r4,r2
  8075f4:	10000226 	beq	r2,zero,807600 <_perror_r+0x38>
  8075f8:	81400317 	ldw	r5,12(r16)
  8075fc:	080e7940 	call	80e794 <fputs>
  807600:	81400317 	ldw	r5,12(r16)
  807604:	01000284 	movi	r4,10
  807608:	dfc00117 	ldw	ra,4(sp)
  80760c:	dc000017 	ldw	r16,0(sp)
  807610:	dec00204 	addi	sp,sp,8
  807614:	080e6641 	jmpi	80e664 <fputc>
  807618:	81400317 	ldw	r5,12(r16)
  80761c:	080e7940 	call	80e794 <fputs>
  807620:	81400317 	ldw	r5,12(r16)
  807624:	01002174 	movhi	r4,133
  807628:	212fd804 	addi	r4,r4,-16544
  80762c:	080e7940 	call	80e794 <fputs>
  807630:	003fed06 	br	8075e8 <_perror_r+0x20>

00807634 <perror>:
  807634:	00802174 	movhi	r2,133
  807638:	10828104 	addi	r2,r2,2564
  80763c:	200b883a 	mov	r5,r4
  807640:	11000017 	ldw	r4,0(r2)
  807644:	08075c81 	jmpi	8075c8 <_perror_r>

00807648 <printf>:
  807648:	defffb04 	addi	sp,sp,-20
  80764c:	dfc00115 	stw	ra,4(sp)
  807650:	d9400215 	stw	r5,8(sp)
  807654:	d9800315 	stw	r6,12(sp)
  807658:	d9c00415 	stw	r7,16(sp)
  80765c:	00802174 	movhi	r2,133
  807660:	10828104 	addi	r2,r2,2564
  807664:	10c00017 	ldw	r3,0(r2)
  807668:	200b883a 	mov	r5,r4
  80766c:	d8800204 	addi	r2,sp,8
  807670:	19000217 	ldw	r4,8(r3)
  807674:	100d883a 	mov	r6,r2
  807678:	d8800015 	stw	r2,0(sp)
  80767c:	080b4300 	call	80b430 <__vfprintf_internal>
  807680:	dfc00117 	ldw	ra,4(sp)
  807684:	dec00504 	addi	sp,sp,20
  807688:	f800283a 	ret

0080768c <_printf_r>:
  80768c:	defffc04 	addi	sp,sp,-16
  807690:	dfc00115 	stw	ra,4(sp)
  807694:	d9800215 	stw	r6,8(sp)
  807698:	d9c00315 	stw	r7,12(sp)
  80769c:	280d883a 	mov	r6,r5
  8076a0:	21400217 	ldw	r5,8(r4)
  8076a4:	d8c00204 	addi	r3,sp,8
  8076a8:	180f883a 	mov	r7,r3
  8076ac:	d8c00015 	stw	r3,0(sp)
  8076b0:	08095840 	call	809584 <___vfprintf_internal_r>
  8076b4:	dfc00117 	ldw	ra,4(sp)
  8076b8:	dec00404 	addi	sp,sp,16
  8076bc:	f800283a 	ret

008076c0 <_puts_r>:
  8076c0:	defff604 	addi	sp,sp,-40
  8076c4:	dc400715 	stw	r17,28(sp)
  8076c8:	2023883a 	mov	r17,r4
  8076cc:	2809883a 	mov	r4,r5
  8076d0:	dfc00915 	stw	ra,36(sp)
  8076d4:	dcc00815 	stw	r19,32(sp)
  8076d8:	2827883a 	mov	r19,r5
  8076dc:	08088440 	call	808844 <strlen>
  8076e0:	89400217 	ldw	r5,8(r17)
  8076e4:	00c02174 	movhi	r3,133
  8076e8:	18efd904 	addi	r3,r3,-16540
  8076ec:	01c00044 	movi	r7,1
  8076f0:	12000044 	addi	r8,r2,1
  8076f4:	d8c00515 	stw	r3,20(sp)
  8076f8:	d9c00615 	stw	r7,24(sp)
  8076fc:	d8c00304 	addi	r3,sp,12
  807700:	01c00084 	movi	r7,2
  807704:	8809883a 	mov	r4,r17
  807708:	d80d883a 	mov	r6,sp
  80770c:	d8c00015 	stw	r3,0(sp)
  807710:	dcc00315 	stw	r19,12(sp)
  807714:	da000215 	stw	r8,8(sp)
  807718:	d9c00115 	stw	r7,4(sp)
  80771c:	d8800415 	stw	r2,16(sp)
  807720:	080e7b00 	call	80e7b0 <__sfvwrite_r>
  807724:	00ffffc4 	movi	r3,-1
  807728:	10000626 	beq	r2,zero,807744 <_puts_r+0x84>
  80772c:	1805883a 	mov	r2,r3
  807730:	dfc00917 	ldw	ra,36(sp)
  807734:	dcc00817 	ldw	r19,32(sp)
  807738:	dc400717 	ldw	r17,28(sp)
  80773c:	dec00a04 	addi	sp,sp,40
  807740:	f800283a 	ret
  807744:	00c00284 	movi	r3,10
  807748:	1805883a 	mov	r2,r3
  80774c:	dfc00917 	ldw	ra,36(sp)
  807750:	dcc00817 	ldw	r19,32(sp)
  807754:	dc400717 	ldw	r17,28(sp)
  807758:	dec00a04 	addi	sp,sp,40
  80775c:	f800283a 	ret

00807760 <puts>:
  807760:	00802174 	movhi	r2,133
  807764:	10828104 	addi	r2,r2,2564
  807768:	200b883a 	mov	r5,r4
  80776c:	11000017 	ldw	r4,0(r2)
  807770:	08076c01 	jmpi	8076c0 <_puts_r>

00807774 <__srefill_r>:
  807774:	defffd04 	addi	sp,sp,-12
  807778:	dc400115 	stw	r17,4(sp)
  80777c:	dc000015 	stw	r16,0(sp)
  807780:	dfc00215 	stw	ra,8(sp)
  807784:	2023883a 	mov	r17,r4
  807788:	2821883a 	mov	r16,r5
  80778c:	20000226 	beq	r4,zero,807798 <__srefill_r+0x24>
  807790:	20800e17 	ldw	r2,56(r4)
  807794:	10004126 	beq	r2,zero,80789c <__srefill_r+0x128>
  807798:	80c0030b 	ldhu	r3,12(r16)
  80779c:	80000115 	stw	zero,4(r16)
  8077a0:	1880080c 	andi	r2,r3,32
  8077a4:	1000361e 	bne	r2,zero,807880 <__srefill_r+0x10c>
  8077a8:	1880010c 	andi	r2,r3,4
  8077ac:	1000211e 	bne	r2,zero,807834 <__srefill_r+0xc0>
  8077b0:	1880040c 	andi	r2,r3,16
  8077b4:	10005026 	beq	r2,zero,8078f8 <__srefill_r+0x184>
  8077b8:	1880020c 	andi	r2,r3,8
  8077bc:	1000541e 	bne	r2,zero,807910 <__srefill_r+0x19c>
  8077c0:	8080030b 	ldhu	r2,12(r16)
  8077c4:	10800114 	ori	r2,r2,4
  8077c8:	8080030d 	sth	r2,12(r16)
  8077cc:	80800417 	ldw	r2,16(r16)
  8077d0:	10004526 	beq	r2,zero,8078e8 <__srefill_r+0x174>
  8077d4:	8080030b 	ldhu	r2,12(r16)
  8077d8:	108000cc 	andi	r2,r2,3
  8077dc:	1000361e 	bne	r2,zero,8078b8 <__srefill_r+0x144>
  8077e0:	81800417 	ldw	r6,16(r16)
  8077e4:	80c00817 	ldw	r3,32(r16)
  8077e8:	81400717 	ldw	r5,28(r16)
  8077ec:	81c00517 	ldw	r7,20(r16)
  8077f0:	8809883a 	mov	r4,r17
  8077f4:	81800015 	stw	r6,0(r16)
  8077f8:	183ee83a 	callr	r3
  8077fc:	80c0030b 	ldhu	r3,12(r16)
  807800:	1009883a 	mov	r4,r2
  807804:	80800115 	stw	r2,4(r16)
  807808:	00b7ffc4 	movi	r2,-8193
  80780c:	1884703a 	and	r2,r3,r2
  807810:	8080030d 	sth	r2,12(r16)
  807814:	0100230e 	bge	zero,r4,8078a4 <__srefill_r+0x130>
  807818:	0009883a 	mov	r4,zero
  80781c:	2005883a 	mov	r2,r4
  807820:	dfc00217 	ldw	ra,8(sp)
  807824:	dc400117 	ldw	r17,4(sp)
  807828:	dc000017 	ldw	r16,0(sp)
  80782c:	dec00304 	addi	sp,sp,12
  807830:	f800283a 	ret
  807834:	81400c17 	ldw	r5,48(r16)
  807838:	283fe426 	beq	r5,zero,8077cc <__srefill_r+0x58>
  80783c:	80801004 	addi	r2,r16,64
  807840:	28800226 	beq	r5,r2,80784c <__srefill_r+0xd8>
  807844:	8809883a 	mov	r4,r17
  807848:	0805f140 	call	805f14 <_free_r>
  80784c:	80800f17 	ldw	r2,60(r16)
  807850:	80000c15 	stw	zero,48(r16)
  807854:	80800115 	stw	r2,4(r16)
  807858:	103fdc26 	beq	r2,zero,8077cc <__srefill_r+0x58>
  80785c:	80800e17 	ldw	r2,56(r16)
  807860:	0009883a 	mov	r4,zero
  807864:	80800015 	stw	r2,0(r16)
  807868:	2005883a 	mov	r2,r4
  80786c:	dfc00217 	ldw	ra,8(sp)
  807870:	dc400117 	ldw	r17,4(sp)
  807874:	dc000017 	ldw	r16,0(sp)
  807878:	dec00304 	addi	sp,sp,12
  80787c:	f800283a 	ret
  807880:	013fffc4 	movi	r4,-1
  807884:	2005883a 	mov	r2,r4
  807888:	dfc00217 	ldw	ra,8(sp)
  80788c:	dc400117 	ldw	r17,4(sp)
  807890:	dc000017 	ldw	r16,0(sp)
  807894:	dec00304 	addi	sp,sp,12
  807898:	f800283a 	ret
  80789c:	08057e40 	call	8057e4 <__sinit>
  8078a0:	003fbd06 	br	807798 <__srefill_r+0x24>
  8078a4:	20000b1e 	bne	r4,zero,8078d4 <__srefill_r+0x160>
  8078a8:	10800814 	ori	r2,r2,32
  8078ac:	013fffc4 	movi	r4,-1
  8078b0:	8080030d 	sth	r2,12(r16)
  8078b4:	003fd906 	br	80781c <__srefill_r+0xa8>
  8078b8:	00802174 	movhi	r2,133
  8078bc:	10828204 	addi	r2,r2,2568
  8078c0:	11000017 	ldw	r4,0(r2)
  8078c4:	01402034 	movhi	r5,128
  8078c8:	295e4e04 	addi	r5,r5,31032
  8078cc:	08068d00 	call	8068d0 <_fwalk>
  8078d0:	003fc306 	br	8077e0 <__srefill_r+0x6c>
  8078d4:	10801014 	ori	r2,r2,64
  8078d8:	013fffc4 	movi	r4,-1
  8078dc:	8080030d 	sth	r2,12(r16)
  8078e0:	80000115 	stw	zero,4(r16)
  8078e4:	003fcd06 	br	80781c <__srefill_r+0xa8>
  8078e8:	8809883a 	mov	r4,r17
  8078ec:	800b883a 	mov	r5,r16
  8078f0:	0806a640 	call	806a64 <__smakebuf_r>
  8078f4:	003fb706 	br	8077d4 <__srefill_r+0x60>
  8078f8:	18c01014 	ori	r3,r3,64
  8078fc:	00800244 	movi	r2,9
  807900:	013fffc4 	movi	r4,-1
  807904:	88800015 	stw	r2,0(r17)
  807908:	80c0030d 	sth	r3,12(r16)
  80790c:	003fc306 	br	80781c <__srefill_r+0xa8>
  807910:	8809883a 	mov	r4,r17
  807914:	800b883a 	mov	r5,r16
  807918:	08055040 	call	805504 <_fflush_r>
  80791c:	103fd81e 	bne	r2,zero,807880 <__srefill_r+0x10c>
  807920:	8080030b 	ldhu	r2,12(r16)
  807924:	80000215 	stw	zero,8(r16)
  807928:	80000615 	stw	zero,24(r16)
  80792c:	10bffdcc 	andi	r2,r2,65527
  807930:	8080030d 	sth	r2,12(r16)
  807934:	003fa206 	br	8077c0 <__srefill_r+0x4c>

00807938 <lflush>:
  807938:	20c0030b 	ldhu	r3,12(r4)
  80793c:	01400244 	movi	r5,9
  807940:	0005883a 	mov	r2,zero
  807944:	18c0024c 	andi	r3,r3,9
  807948:	19400126 	beq	r3,r5,807950 <lflush+0x18>
  80794c:	f800283a 	ret
  807950:	08057001 	jmpi	805700 <fflush>

00807954 <_sbrk_r>:
  807954:	defffd04 	addi	sp,sp,-12
  807958:	dc000015 	stw	r16,0(sp)
  80795c:	04002174 	movhi	r16,133
  807960:	8402da04 	addi	r16,r16,2920
  807964:	dc400115 	stw	r17,4(sp)
  807968:	80000015 	stw	zero,0(r16)
  80796c:	2023883a 	mov	r17,r4
  807970:	2809883a 	mov	r4,r5
  807974:	dfc00215 	stw	ra,8(sp)
  807978:	0816c640 	call	816c64 <sbrk>
  80797c:	1007883a 	mov	r3,r2
  807980:	00bfffc4 	movi	r2,-1
  807984:	18800626 	beq	r3,r2,8079a0 <_sbrk_r+0x4c>
  807988:	1805883a 	mov	r2,r3
  80798c:	dfc00217 	ldw	ra,8(sp)
  807990:	dc400117 	ldw	r17,4(sp)
  807994:	dc000017 	ldw	r16,0(sp)
  807998:	dec00304 	addi	sp,sp,12
  80799c:	f800283a 	ret
  8079a0:	80800017 	ldw	r2,0(r16)
  8079a4:	103ff826 	beq	r2,zero,807988 <_sbrk_r+0x34>
  8079a8:	88800015 	stw	r2,0(r17)
  8079ac:	1805883a 	mov	r2,r3
  8079b0:	dfc00217 	ldw	ra,8(sp)
  8079b4:	dc400117 	ldw	r17,4(sp)
  8079b8:	dc000017 	ldw	r16,0(sp)
  8079bc:	dec00304 	addi	sp,sp,12
  8079c0:	f800283a 	ret

008079c4 <snprintf>:
  8079c4:	deffe404 	addi	sp,sp,-112
  8079c8:	dc001815 	stw	r16,96(sp)
  8079cc:	2011883a 	mov	r8,r4
  8079d0:	2821883a 	mov	r16,r5
  8079d4:	dfc01a15 	stw	ra,104(sp)
  8079d8:	dc401915 	stw	r17,100(sp)
  8079dc:	d9c01b15 	stw	r7,108(sp)
  8079e0:	01002174 	movhi	r4,133
  8079e4:	21028104 	addi	r4,r4,2564
  8079e8:	00ffffc4 	movi	r3,-1
  8079ec:	24400017 	ldw	r17,0(r4)
  8079f0:	28002016 	blt	r5,zero,807a74 <snprintf+0xb0>
  8079f4:	0007883a 	mov	r3,zero
  8079f8:	28000126 	beq	r5,zero,807a00 <snprintf+0x3c>
  8079fc:	28ffffc4 	addi	r3,r5,-1
  807a00:	d8801b04 	addi	r2,sp,108
  807a04:	21000017 	ldw	r4,0(r4)
  807a08:	d8800015 	stw	r2,0(sp)
  807a0c:	100f883a 	mov	r7,r2
  807a10:	00808204 	movi	r2,520
  807a14:	d880040d 	sth	r2,16(sp)
  807a18:	d9400104 	addi	r5,sp,4
  807a1c:	00bfffc4 	movi	r2,-1
  807a20:	d8c00615 	stw	r3,24(sp)
  807a24:	d8c00315 	stw	r3,12(sp)
  807a28:	da000515 	stw	r8,20(sp)
  807a2c:	d880048d 	sth	r2,18(sp)
  807a30:	da000115 	stw	r8,4(sp)
  807a34:	08095840 	call	809584 <___vfprintf_internal_r>
  807a38:	1007883a 	mov	r3,r2
  807a3c:	00bfffc4 	movi	r2,-1
  807a40:	18800916 	blt	r3,r2,807a68 <snprintf+0xa4>
  807a44:	80000226 	beq	r16,zero,807a50 <snprintf+0x8c>
  807a48:	d8800117 	ldw	r2,4(sp)
  807a4c:	10000005 	stb	zero,0(r2)
  807a50:	1805883a 	mov	r2,r3
  807a54:	dfc01a17 	ldw	ra,104(sp)
  807a58:	dc401917 	ldw	r17,100(sp)
  807a5c:	dc001817 	ldw	r16,96(sp)
  807a60:	dec01c04 	addi	sp,sp,112
  807a64:	f800283a 	ret
  807a68:	008022c4 	movi	r2,139
  807a6c:	88800015 	stw	r2,0(r17)
  807a70:	003ff406 	br	807a44 <snprintf+0x80>
  807a74:	008022c4 	movi	r2,139
  807a78:	88800015 	stw	r2,0(r17)
  807a7c:	003ff406 	br	807a50 <snprintf+0x8c>

00807a80 <_snprintf_r>:
  807a80:	deffe504 	addi	sp,sp,-108
  807a84:	dc401915 	stw	r17,100(sp)
  807a88:	dc001815 	stw	r16,96(sp)
  807a8c:	dfc01a15 	stw	ra,104(sp)
  807a90:	3021883a 	mov	r16,r6
  807a94:	00ffffc4 	movi	r3,-1
  807a98:	2023883a 	mov	r17,r4
  807a9c:	2811883a 	mov	r8,r5
  807aa0:	30002116 	blt	r6,zero,807b28 <_snprintf_r+0xa8>
  807aa4:	0007883a 	mov	r3,zero
  807aa8:	30000126 	beq	r6,zero,807ab0 <_snprintf_r+0x30>
  807aac:	30ffffc4 	addi	r3,r6,-1
  807ab0:	d8801b04 	addi	r2,sp,108
  807ab4:	d8800015 	stw	r2,0(sp)
  807ab8:	380d883a 	mov	r6,r7
  807abc:	100f883a 	mov	r7,r2
  807ac0:	00808204 	movi	r2,520
  807ac4:	d880040d 	sth	r2,16(sp)
  807ac8:	8809883a 	mov	r4,r17
  807acc:	00bfffc4 	movi	r2,-1
  807ad0:	d9400104 	addi	r5,sp,4
  807ad4:	d8c00615 	stw	r3,24(sp)
  807ad8:	d8c00315 	stw	r3,12(sp)
  807adc:	da000515 	stw	r8,20(sp)
  807ae0:	d880048d 	sth	r2,18(sp)
  807ae4:	da000115 	stw	r8,4(sp)
  807ae8:	08095840 	call	809584 <___vfprintf_internal_r>
  807aec:	1007883a 	mov	r3,r2
  807af0:	00bfffc4 	movi	r2,-1
  807af4:	18800916 	blt	r3,r2,807b1c <_snprintf_r+0x9c>
  807af8:	80000226 	beq	r16,zero,807b04 <_snprintf_r+0x84>
  807afc:	d8800117 	ldw	r2,4(sp)
  807b00:	10000005 	stb	zero,0(r2)
  807b04:	1805883a 	mov	r2,r3
  807b08:	dfc01a17 	ldw	ra,104(sp)
  807b0c:	dc401917 	ldw	r17,100(sp)
  807b10:	dc001817 	ldw	r16,96(sp)
  807b14:	dec01b04 	addi	sp,sp,108
  807b18:	f800283a 	ret
  807b1c:	008022c4 	movi	r2,139
  807b20:	88800015 	stw	r2,0(r17)
  807b24:	003ff406 	br	807af8 <_snprintf_r+0x78>
  807b28:	008022c4 	movi	r2,139
  807b2c:	20800015 	stw	r2,0(r4)
  807b30:	003ff406 	br	807b04 <_snprintf_r+0x84>

00807b34 <sprintf>:
  807b34:	deffe504 	addi	sp,sp,-108
  807b38:	2013883a 	mov	r9,r4
  807b3c:	dfc01815 	stw	ra,96(sp)
  807b40:	d9801915 	stw	r6,100(sp)
  807b44:	d9c01a15 	stw	r7,104(sp)
  807b48:	d8801904 	addi	r2,sp,100
  807b4c:	d8800015 	stw	r2,0(sp)
  807b50:	00802174 	movhi	r2,133
  807b54:	10828104 	addi	r2,r2,2564
  807b58:	11000017 	ldw	r4,0(r2)
  807b5c:	d9c00017 	ldw	r7,0(sp)
  807b60:	00808204 	movi	r2,520
  807b64:	00e00034 	movhi	r3,32768
  807b68:	18ffffc4 	addi	r3,r3,-1
  807b6c:	280d883a 	mov	r6,r5
  807b70:	d880040d 	sth	r2,16(sp)
  807b74:	d9400104 	addi	r5,sp,4
  807b78:	00bfffc4 	movi	r2,-1
  807b7c:	d8c00615 	stw	r3,24(sp)
  807b80:	d8c00315 	stw	r3,12(sp)
  807b84:	da400515 	stw	r9,20(sp)
  807b88:	d880048d 	sth	r2,18(sp)
  807b8c:	da400115 	stw	r9,4(sp)
  807b90:	08095840 	call	809584 <___vfprintf_internal_r>
  807b94:	d8c00117 	ldw	r3,4(sp)
  807b98:	18000005 	stb	zero,0(r3)
  807b9c:	dfc01817 	ldw	ra,96(sp)
  807ba0:	dec01b04 	addi	sp,sp,108
  807ba4:	f800283a 	ret

00807ba8 <_sprintf_r>:
  807ba8:	deffe604 	addi	sp,sp,-104
  807bac:	2813883a 	mov	r9,r5
  807bb0:	dfc01815 	stw	ra,96(sp)
  807bb4:	d9c01915 	stw	r7,100(sp)
  807bb8:	d8801904 	addi	r2,sp,100
  807bbc:	d8800015 	stw	r2,0(sp)
  807bc0:	100f883a 	mov	r7,r2
  807bc4:	00808204 	movi	r2,520
  807bc8:	00e00034 	movhi	r3,32768
  807bcc:	18ffffc4 	addi	r3,r3,-1
  807bd0:	d880040d 	sth	r2,16(sp)
  807bd4:	d9400104 	addi	r5,sp,4
  807bd8:	00bfffc4 	movi	r2,-1
  807bdc:	d8c00615 	stw	r3,24(sp)
  807be0:	d8c00315 	stw	r3,12(sp)
  807be4:	da400515 	stw	r9,20(sp)
  807be8:	d880048d 	sth	r2,18(sp)
  807bec:	da400115 	stw	r9,4(sp)
  807bf0:	08095840 	call	809584 <___vfprintf_internal_r>
  807bf4:	d8c00117 	ldw	r3,4(sp)
  807bf8:	18000005 	stb	zero,0(r3)
  807bfc:	dfc01817 	ldw	ra,96(sp)
  807c00:	dec01a04 	addi	sp,sp,104
  807c04:	f800283a 	ret

00807c08 <eofread>:
  807c08:	0005883a 	mov	r2,zero
  807c0c:	f800283a 	ret

00807c10 <_sscanf_r>:
  807c10:	deffe404 	addi	sp,sp,-112
  807c14:	dcc01915 	stw	r19,100(sp)
  807c18:	2027883a 	mov	r19,r4
  807c1c:	dfc01a15 	stw	ra,104(sp)
  807c20:	dc401815 	stw	r17,96(sp)
  807c24:	d9c01b15 	stw	r7,108(sp)
  807c28:	00808104 	movi	r2,516
  807c2c:	2809883a 	mov	r4,r5
  807c30:	3023883a 	mov	r17,r6
  807c34:	d9400115 	stw	r5,4(sp)
  807c38:	d9400515 	stw	r5,20(sp)
  807c3c:	d880040d 	sth	r2,16(sp)
  807c40:	08088440 	call	808844 <strlen>
  807c44:	d8c01b04 	addi	r3,sp,108
  807c48:	d8c00015 	stw	r3,0(sp)
  807c4c:	180f883a 	mov	r7,r3
  807c50:	023fffc4 	movi	r8,-1
  807c54:	00c02034 	movhi	r3,128
  807c58:	18df0204 	addi	r3,r3,31752
  807c5c:	9809883a 	mov	r4,r19
  807c60:	880d883a 	mov	r6,r17
  807c64:	d9400104 	addi	r5,sp,4
  807c68:	d8800615 	stw	r2,24(sp)
  807c6c:	d8c00915 	stw	r3,36(sp)
  807c70:	da00048d 	sth	r8,18(sp)
  807c74:	d8800215 	stw	r2,8(sp)
  807c78:	d8000d15 	stw	zero,52(sp)
  807c7c:	d8001215 	stw	zero,72(sp)
  807c80:	080b4540 	call	80b454 <__svfscanf_r>
  807c84:	dfc01a17 	ldw	ra,104(sp)
  807c88:	dcc01917 	ldw	r19,100(sp)
  807c8c:	dc401817 	ldw	r17,96(sp)
  807c90:	dec01c04 	addi	sp,sp,112
  807c94:	f800283a 	ret

00807c98 <sscanf>:
  807c98:	deffe404 	addi	sp,sp,-112
  807c9c:	dfc01915 	stw	ra,100(sp)
  807ca0:	dc401815 	stw	r17,96(sp)
  807ca4:	d9801a15 	stw	r6,104(sp)
  807ca8:	d9c01b15 	stw	r7,108(sp)
  807cac:	00808104 	movi	r2,516
  807cb0:	2823883a 	mov	r17,r5
  807cb4:	d9000515 	stw	r4,20(sp)
  807cb8:	d9000115 	stw	r4,4(sp)
  807cbc:	d880040d 	sth	r2,16(sp)
  807cc0:	08088440 	call	808844 <strlen>
  807cc4:	d8c01a04 	addi	r3,sp,104
  807cc8:	d8c00015 	stw	r3,0(sp)
  807ccc:	00c02174 	movhi	r3,133
  807cd0:	18c28104 	addi	r3,r3,2564
  807cd4:	19000017 	ldw	r4,0(r3)
  807cd8:	d9c00017 	ldw	r7,0(sp)
  807cdc:	00c02034 	movhi	r3,128
  807ce0:	18df0204 	addi	r3,r3,31752
  807ce4:	023fffc4 	movi	r8,-1
  807ce8:	880d883a 	mov	r6,r17
  807cec:	d9400104 	addi	r5,sp,4
  807cf0:	d8800615 	stw	r2,24(sp)
  807cf4:	d8c00915 	stw	r3,36(sp)
  807cf8:	da00048d 	sth	r8,18(sp)
  807cfc:	d8800215 	stw	r2,8(sp)
  807d00:	d8000d15 	stw	zero,52(sp)
  807d04:	d8001215 	stw	zero,72(sp)
  807d08:	080b4540 	call	80b454 <__svfscanf_r>
  807d0c:	dfc01917 	ldw	ra,100(sp)
  807d10:	dc401817 	ldw	r17,96(sp)
  807d14:	dec01c04 	addi	sp,sp,112
  807d18:	f800283a 	ret

00807d1c <__sclose>:
  807d1c:	2940038f 	ldh	r5,14(r5)
  807d20:	080cd881 	jmpi	80cd88 <_close_r>

00807d24 <__sseek>:
  807d24:	defffe04 	addi	sp,sp,-8
  807d28:	dc000015 	stw	r16,0(sp)
  807d2c:	2821883a 	mov	r16,r5
  807d30:	2940038f 	ldh	r5,14(r5)
  807d34:	dfc00115 	stw	ra,4(sp)
  807d38:	080edac0 	call	80edac <_lseek_r>
  807d3c:	1007883a 	mov	r3,r2
  807d40:	00bfffc4 	movi	r2,-1
  807d44:	18800926 	beq	r3,r2,807d6c <__sseek+0x48>
  807d48:	8080030b 	ldhu	r2,12(r16)
  807d4c:	80c01415 	stw	r3,80(r16)
  807d50:	10840014 	ori	r2,r2,4096
  807d54:	8080030d 	sth	r2,12(r16)
  807d58:	1805883a 	mov	r2,r3
  807d5c:	dfc00117 	ldw	ra,4(sp)
  807d60:	dc000017 	ldw	r16,0(sp)
  807d64:	dec00204 	addi	sp,sp,8
  807d68:	f800283a 	ret
  807d6c:	8080030b 	ldhu	r2,12(r16)
  807d70:	10bbffcc 	andi	r2,r2,61439
  807d74:	8080030d 	sth	r2,12(r16)
  807d78:	1805883a 	mov	r2,r3
  807d7c:	dfc00117 	ldw	ra,4(sp)
  807d80:	dc000017 	ldw	r16,0(sp)
  807d84:	dec00204 	addi	sp,sp,8
  807d88:	f800283a 	ret

00807d8c <__swrite>:
  807d8c:	2880030b 	ldhu	r2,12(r5)
  807d90:	defffb04 	addi	sp,sp,-20
  807d94:	dcc00315 	stw	r19,12(sp)
  807d98:	1080400c 	andi	r2,r2,256
  807d9c:	dc800215 	stw	r18,8(sp)
  807da0:	dc400115 	stw	r17,4(sp)
  807da4:	dc000015 	stw	r16,0(sp)
  807da8:	3027883a 	mov	r19,r6
  807dac:	3825883a 	mov	r18,r7
  807db0:	dfc00415 	stw	ra,16(sp)
  807db4:	2821883a 	mov	r16,r5
  807db8:	000d883a 	mov	r6,zero
  807dbc:	01c00084 	movi	r7,2
  807dc0:	2023883a 	mov	r17,r4
  807dc4:	10000226 	beq	r2,zero,807dd0 <__swrite+0x44>
  807dc8:	2940038f 	ldh	r5,14(r5)
  807dcc:	080edac0 	call	80edac <_lseek_r>
  807dd0:	8080030b 	ldhu	r2,12(r16)
  807dd4:	8140038f 	ldh	r5,14(r16)
  807dd8:	8809883a 	mov	r4,r17
  807ddc:	10bbffcc 	andi	r2,r2,61439
  807de0:	980d883a 	mov	r6,r19
  807de4:	900f883a 	mov	r7,r18
  807de8:	8080030d 	sth	r2,12(r16)
  807dec:	dfc00417 	ldw	ra,16(sp)
  807df0:	dcc00317 	ldw	r19,12(sp)
  807df4:	dc800217 	ldw	r18,8(sp)
  807df8:	dc400117 	ldw	r17,4(sp)
  807dfc:	dc000017 	ldw	r16,0(sp)
  807e00:	dec00504 	addi	sp,sp,20
  807e04:	080cbd41 	jmpi	80cbd4 <_write_r>

00807e08 <__sread>:
  807e08:	defffe04 	addi	sp,sp,-8
  807e0c:	dc000015 	stw	r16,0(sp)
  807e10:	2821883a 	mov	r16,r5
  807e14:	2940038f 	ldh	r5,14(r5)
  807e18:	dfc00115 	stw	ra,4(sp)
  807e1c:	081025c0 	call	81025c <_read_r>
  807e20:	1007883a 	mov	r3,r2
  807e24:	10000816 	blt	r2,zero,807e48 <__sread+0x40>
  807e28:	80801417 	ldw	r2,80(r16)
  807e2c:	10c5883a 	add	r2,r2,r3
  807e30:	80801415 	stw	r2,80(r16)
  807e34:	1805883a 	mov	r2,r3
  807e38:	dfc00117 	ldw	ra,4(sp)
  807e3c:	dc000017 	ldw	r16,0(sp)
  807e40:	dec00204 	addi	sp,sp,8
  807e44:	f800283a 	ret
  807e48:	8080030b 	ldhu	r2,12(r16)
  807e4c:	10bbffcc 	andi	r2,r2,61439
  807e50:	8080030d 	sth	r2,12(r16)
  807e54:	1805883a 	mov	r2,r3
  807e58:	dfc00117 	ldw	ra,4(sp)
  807e5c:	dc000017 	ldw	r16,0(sp)
  807e60:	dec00204 	addi	sp,sp,8
  807e64:	f800283a 	ret

00807e68 <strcasecmp>:
  807e68:	20800007 	ldb	r2,0(r4)
  807e6c:	10002726 	beq	r2,zero,807f0c <strcasecmp+0xa4>
  807e70:	02402174 	movhi	r9,133
  807e74:	4a428004 	addi	r9,r9,2560
  807e78:	4a000017 	ldw	r8,0(r9)
  807e7c:	4087883a 	add	r3,r8,r2
  807e80:	100f883a 	mov	r7,r2
  807e84:	18800003 	ldbu	r2,0(r3)
  807e88:	1080004c 	andi	r2,r2,1
  807e8c:	1005003a 	cmpeq	r2,r2,zero
  807e90:	1000011e 	bne	r2,zero,807e98 <strcasecmp+0x30>
  807e94:	39c00804 	addi	r7,r7,32
  807e98:	29800007 	ldb	r6,0(r5)
  807e9c:	4187883a 	add	r3,r8,r6
  807ea0:	18800003 	ldbu	r2,0(r3)
  807ea4:	1080004c 	andi	r2,r2,1
  807ea8:	1005003a 	cmpeq	r2,r2,zero
  807eac:	1000011e 	bne	r2,zero,807eb4 <strcasecmp+0x4c>
  807eb0:	31800804 	addi	r6,r6,32
  807eb4:	3980041e 	bne	r7,r6,807ec8 <strcasecmp+0x60>
  807eb8:	21000044 	addi	r4,r4,1
  807ebc:	20800007 	ldb	r2,0(r4)
  807ec0:	29400044 	addi	r5,r5,1
  807ec4:	103fed1e 	bne	r2,zero,807e7c <strcasecmp+0x14>
  807ec8:	21000003 	ldbu	r4,0(r4)
  807ecc:	49800017 	ldw	r6,0(r9)
  807ed0:	3107883a 	add	r3,r6,r4
  807ed4:	18800003 	ldbu	r2,0(r3)
  807ed8:	1080004c 	andi	r2,r2,1
  807edc:	1005003a 	cmpeq	r2,r2,zero
  807ee0:	1000011e 	bne	r2,zero,807ee8 <strcasecmp+0x80>
  807ee4:	21000804 	addi	r4,r4,32
  807ee8:	29400003 	ldbu	r5,0(r5)
  807eec:	3147883a 	add	r3,r6,r5
  807ef0:	18800003 	ldbu	r2,0(r3)
  807ef4:	1080004c 	andi	r2,r2,1
  807ef8:	1005003a 	cmpeq	r2,r2,zero
  807efc:	1000011e 	bne	r2,zero,807f04 <strcasecmp+0x9c>
  807f00:	29400804 	addi	r5,r5,32
  807f04:	2145c83a 	sub	r2,r4,r5
  807f08:	f800283a 	ret
  807f0c:	02402174 	movhi	r9,133
  807f10:	4a428004 	addi	r9,r9,2560
  807f14:	003fec06 	br	807ec8 <strcasecmp+0x60>

00807f18 <strcat>:
  807f18:	defffe04 	addi	sp,sp,-8
  807f1c:	208000cc 	andi	r2,r4,3
  807f20:	dc000015 	stw	r16,0(sp)
  807f24:	dfc00115 	stw	ra,4(sp)
  807f28:	2021883a 	mov	r16,r4
  807f2c:	1000161e 	bne	r2,zero,807f88 <strcat+0x70>
  807f30:	20c00017 	ldw	r3,0(r4)
  807f34:	01bfbff4 	movhi	r6,65279
  807f38:	31bfbfc4 	addi	r6,r6,-257
  807f3c:	02202074 	movhi	r8,32897
  807f40:	42202004 	addi	r8,r8,-32640
  807f44:	1985883a 	add	r2,r3,r6
  807f48:	1204703a 	and	r2,r2,r8
  807f4c:	00c6303a 	nor	r3,zero,r3
  807f50:	1886703a 	and	r3,r3,r2
  807f54:	18000c1e 	bne	r3,zero,807f88 <strcat+0x70>
  807f58:	300f883a 	mov	r7,r6
  807f5c:	400d883a 	mov	r6,r8
  807f60:	21000104 	addi	r4,r4,4
  807f64:	20800017 	ldw	r2,0(r4)
  807f68:	11c7883a 	add	r3,r2,r7
  807f6c:	1986703a 	and	r3,r3,r6
  807f70:	0084303a 	nor	r2,zero,r2
  807f74:	10c4703a 	and	r2,r2,r3
  807f78:	103ff926 	beq	r2,zero,807f60 <strcat+0x48>
  807f7c:	20800007 	ldb	r2,0(r4)
  807f80:	10000326 	beq	r2,zero,807f90 <strcat+0x78>
  807f84:	21000044 	addi	r4,r4,1
  807f88:	20800007 	ldb	r2,0(r4)
  807f8c:	103ffd1e 	bne	r2,zero,807f84 <strcat+0x6c>
  807f90:	08081440 	call	808144 <strcpy>
  807f94:	8005883a 	mov	r2,r16
  807f98:	dfc00117 	ldw	ra,4(sp)
  807f9c:	dc000017 	ldw	r16,0(sp)
  807fa0:	dec00204 	addi	sp,sp,8
  807fa4:	f800283a 	ret

00807fa8 <strchr>:
  807fa8:	208000cc 	andi	r2,r4,3
  807fac:	2007883a 	mov	r3,r4
  807fb0:	1000311e 	bne	r2,zero,808078 <strchr+0xd0>
  807fb4:	29c03fcc 	andi	r7,r5,255
  807fb8:	0015883a 	mov	r10,zero
  807fbc:	0007883a 	mov	r3,zero
  807fc0:	01400104 	movi	r5,4
  807fc4:	5004923a 	slli	r2,r10,8
  807fc8:	18c00044 	addi	r3,r3,1
  807fcc:	3894b03a 	or	r10,r7,r2
  807fd0:	197ffc1e 	bne	r3,r5,807fc4 <strchr+0x1c>
  807fd4:	200d883a 	mov	r6,r4
  807fd8:	21000017 	ldw	r4,0(r4)
  807fdc:	017fbff4 	movhi	r5,65279
  807fe0:	297fbfc4 	addi	r5,r5,-257
  807fe4:	02202074 	movhi	r8,32897
  807fe8:	42202004 	addi	r8,r8,-32640
  807fec:	2145883a 	add	r2,r4,r5
  807ff0:	1204703a 	and	r2,r2,r8
  807ff4:	0106303a 	nor	r3,zero,r4
  807ff8:	10c4703a 	and	r2,r2,r3
  807ffc:	1000151e 	bne	r2,zero,808054 <strchr+0xac>
  808000:	2284f03a 	xor	r2,r4,r10
  808004:	1147883a 	add	r3,r2,r5
  808008:	1a06703a 	and	r3,r3,r8
  80800c:	0084303a 	nor	r2,zero,r2
  808010:	10c4703a 	and	r2,r2,r3
  808014:	10000f1e 	bne	r2,zero,808054 <strchr+0xac>
  808018:	2813883a 	mov	r9,r5
  80801c:	00000106 	br	808024 <strchr+0x7c>
  808020:	18000c1e 	bne	r3,zero,808054 <strchr+0xac>
  808024:	31800104 	addi	r6,r6,4
  808028:	30800017 	ldw	r2,0(r6)
  80802c:	1286f03a 	xor	r3,r2,r10
  808030:	124b883a 	add	r5,r2,r9
  808034:	1a49883a 	add	r4,r3,r9
  808038:	2a0a703a 	and	r5,r5,r8
  80803c:	0084303a 	nor	r2,zero,r2
  808040:	2208703a 	and	r4,r4,r8
  808044:	00c6303a 	nor	r3,zero,r3
  808048:	1144703a 	and	r2,r2,r5
  80804c:	1906703a 	and	r3,r3,r4
  808050:	103ff326 	beq	r2,zero,808020 <strchr+0x78>
  808054:	3007883a 	mov	r3,r6
  808058:	00000206 	br	808064 <strchr+0xbc>
  80805c:	38800426 	beq	r7,r2,808070 <strchr+0xc8>
  808060:	18c00044 	addi	r3,r3,1
  808064:	18800003 	ldbu	r2,0(r3)
  808068:	103ffc1e 	bne	r2,zero,80805c <strchr+0xb4>
  80806c:	3800041e 	bne	r7,zero,808080 <strchr+0xd8>
  808070:	1805883a 	mov	r2,r3
  808074:	f800283a 	ret
  808078:	29c03fcc 	andi	r7,r5,255
  80807c:	003ff906 	br	808064 <strchr+0xbc>
  808080:	0005883a 	mov	r2,zero
  808084:	f800283a 	ret

00808088 <strcmp>:
  808088:	2144b03a 	or	r2,r4,r5
  80808c:	108000cc 	andi	r2,r2,3
  808090:	10001d1e 	bne	r2,zero,808108 <strcmp+0x80>
  808094:	200f883a 	mov	r7,r4
  808098:	28800017 	ldw	r2,0(r5)
  80809c:	21000017 	ldw	r4,0(r4)
  8080a0:	280d883a 	mov	r6,r5
  8080a4:	2080161e 	bne	r4,r2,808100 <strcmp+0x78>
  8080a8:	023fbff4 	movhi	r8,65279
  8080ac:	423fbfc4 	addi	r8,r8,-257
  8080b0:	2207883a 	add	r3,r4,r8
  8080b4:	01602074 	movhi	r5,32897
  8080b8:	29602004 	addi	r5,r5,-32640
  8080bc:	1946703a 	and	r3,r3,r5
  8080c0:	0104303a 	nor	r2,zero,r4
  8080c4:	10c4703a 	and	r2,r2,r3
  8080c8:	10001c1e 	bne	r2,zero,80813c <strcmp+0xb4>
  8080cc:	4013883a 	mov	r9,r8
  8080d0:	2811883a 	mov	r8,r5
  8080d4:	00000106 	br	8080dc <strcmp+0x54>
  8080d8:	1800181e 	bne	r3,zero,80813c <strcmp+0xb4>
  8080dc:	39c00104 	addi	r7,r7,4
  8080e0:	39000017 	ldw	r4,0(r7)
  8080e4:	31800104 	addi	r6,r6,4
  8080e8:	31400017 	ldw	r5,0(r6)
  8080ec:	2245883a 	add	r2,r4,r9
  8080f0:	1204703a 	and	r2,r2,r8
  8080f4:	0106303a 	nor	r3,zero,r4
  8080f8:	1886703a 	and	r3,r3,r2
  8080fc:	217ff626 	beq	r4,r5,8080d8 <strcmp+0x50>
  808100:	3809883a 	mov	r4,r7
  808104:	300b883a 	mov	r5,r6
  808108:	20c00007 	ldb	r3,0(r4)
  80810c:	1800051e 	bne	r3,zero,808124 <strcmp+0x9c>
  808110:	00000606 	br	80812c <strcmp+0xa4>
  808114:	21000044 	addi	r4,r4,1
  808118:	20c00007 	ldb	r3,0(r4)
  80811c:	29400044 	addi	r5,r5,1
  808120:	18000226 	beq	r3,zero,80812c <strcmp+0xa4>
  808124:	28800007 	ldb	r2,0(r5)
  808128:	18bffa26 	beq	r3,r2,808114 <strcmp+0x8c>
  80812c:	20c00003 	ldbu	r3,0(r4)
  808130:	28800003 	ldbu	r2,0(r5)
  808134:	1885c83a 	sub	r2,r3,r2
  808138:	f800283a 	ret
  80813c:	0005883a 	mov	r2,zero
  808140:	f800283a 	ret

00808144 <strcpy>:
  808144:	2904b03a 	or	r2,r5,r4
  808148:	108000cc 	andi	r2,r2,3
  80814c:	10000826 	beq	r2,zero,808170 <strcpy+0x2c>
  808150:	2007883a 	mov	r3,r4
  808154:	28800003 	ldbu	r2,0(r5)
  808158:	29400044 	addi	r5,r5,1
  80815c:	18800005 	stb	r2,0(r3)
  808160:	18c00044 	addi	r3,r3,1
  808164:	103ffb1e 	bne	r2,zero,808154 <strcpy+0x10>
  808168:	2005883a 	mov	r2,r4
  80816c:	f800283a 	ret
  808170:	29800017 	ldw	r6,0(r5)
  808174:	023fbff4 	movhi	r8,65279
  808178:	423fbfc4 	addi	r8,r8,-257
  80817c:	02a02074 	movhi	r10,32897
  808180:	52a02004 	addi	r10,r10,-32640
  808184:	3205883a 	add	r2,r6,r8
  808188:	0186303a 	nor	r3,zero,r6
  80818c:	10c4703a 	and	r2,r2,r3
  808190:	1284703a 	and	r2,r2,r10
  808194:	200f883a 	mov	r7,r4
  808198:	10000b1e 	bne	r2,zero,8081c8 <strcpy+0x84>
  80819c:	4013883a 	mov	r9,r8
  8081a0:	5011883a 	mov	r8,r10
  8081a4:	39800015 	stw	r6,0(r7)
  8081a8:	29400104 	addi	r5,r5,4
  8081ac:	29800017 	ldw	r6,0(r5)
  8081b0:	39c00104 	addi	r7,r7,4
  8081b4:	3245883a 	add	r2,r6,r9
  8081b8:	0186303a 	nor	r3,zero,r6
  8081bc:	10c4703a 	and	r2,r2,r3
  8081c0:	1204703a 	and	r2,r2,r8
  8081c4:	103ff726 	beq	r2,zero,8081a4 <strcpy+0x60>
  8081c8:	3807883a 	mov	r3,r7
  8081cc:	003fe106 	br	808154 <strcpy+0x10>

008081d0 <strerror>:
  8081d0:	deffff04 	addi	sp,sp,-4
  8081d4:	00802184 	movi	r2,134
  8081d8:	dfc00015 	stw	ra,0(sp)
  8081dc:	200b883a 	mov	r5,r4
  8081e0:	11008e36 	bltu	r2,r4,80841c <strerror+0x24c>
  8081e4:	2105883a 	add	r2,r4,r4
  8081e8:	1085883a 	add	r2,r2,r2
  8081ec:	00c02074 	movhi	r3,129
  8081f0:	18e08004 	addi	r3,r3,-32256
  8081f4:	10c5883a 	add	r2,r2,r3
  8081f8:	11000017 	ldw	r4,0(r2)
  8081fc:	2000683a 	jmp	r4
  808200:	0080841c 	xori	r2,zero,528
  808204:	00808454 	movui	r2,529
  808208:	00808460 	cmpeqi	r2,zero,529
  80820c:	0080846c 	andhi	r2,zero,529
  808210:	00808478 	rdprs	r2,zero,529
  808214:	00808484 	movi	r2,530
  808218:	00808490 	cmplti	r2,zero,530
  80821c:	0080849c 	xori	r2,zero,530
  808220:	008084a8 	cmpgeui	r2,zero,530
  808224:	008084b4 	movhi	r2,530
  808228:	008084c0 	call	8084c <OSCtxSw_SWITCH_PC+0x8080c>
  80822c:	008084cc 	andi	r2,zero,531
  808230:	008084d8 	cmpnei	r2,zero,531
  808234:	008084e4 	muli	r2,zero,531
  808238:	008084f0 	cmpltui	r2,zero,531
  80823c:	008084fc 	xorhi	r2,zero,531
  808240:	00808508 	cmpgei	r2,zero,532
  808244:	00808514 	movui	r2,532
  808248:	00808520 	cmpeqi	r2,zero,532
  80824c:	0080852c 	andhi	r2,zero,532
  808250:	00808538 	rdprs	r2,zero,532
  808254:	00808544 	movi	r2,533
  808258:	00808550 	cmplti	r2,zero,533
  80825c:	0080855c 	xori	r2,zero,533
  808260:	00808568 	cmpgeui	r2,zero,533
  808264:	00808574 	movhi	r2,533
  808268:	00808580 	call	80858 <OSCtxSw_SWITCH_PC+0x80818>
  80826c:	0080858c 	andi	r2,zero,534
  808270:	00808598 	cmpnei	r2,zero,534
  808274:	008085a4 	muli	r2,zero,534
  808278:	008085b0 	cmpltui	r2,zero,534
  80827c:	008085bc 	xorhi	r2,zero,534
  808280:	008085c8 	cmpgei	r2,zero,535
  808284:	008085d4 	movui	r2,535
  808288:	008085e0 	cmpeqi	r2,zero,535
  80828c:	008085ec 	andhi	r2,zero,535
  808290:	008085f8 	rdprs	r2,zero,535
  808294:	0080841c 	xori	r2,zero,528
  808298:	0080841c 	xori	r2,zero,528
  80829c:	0080841c 	xori	r2,zero,528
  8082a0:	0080841c 	xori	r2,zero,528
  8082a4:	0080841c 	xori	r2,zero,528
  8082a8:	0080841c 	xori	r2,zero,528
  8082ac:	0080841c 	xori	r2,zero,528
  8082b0:	0080841c 	xori	r2,zero,528
  8082b4:	00808604 	movi	r2,536
  8082b8:	00808610 	cmplti	r2,zero,536
  8082bc:	0080841c 	xori	r2,zero,528
  8082c0:	0080841c 	xori	r2,zero,528
  8082c4:	0080841c 	xori	r2,zero,528
  8082c8:	0080841c 	xori	r2,zero,528
  8082cc:	0080841c 	xori	r2,zero,528
  8082d0:	0080841c 	xori	r2,zero,528
  8082d4:	0080841c 	xori	r2,zero,528
  8082d8:	0080841c 	xori	r2,zero,528
  8082dc:	0080841c 	xori	r2,zero,528
  8082e0:	0080841c 	xori	r2,zero,528
  8082e4:	0080841c 	xori	r2,zero,528
  8082e8:	0080841c 	xori	r2,zero,528
  8082ec:	0080841c 	xori	r2,zero,528
  8082f0:	0080861c 	xori	r2,zero,536
  8082f4:	0080841c 	xori	r2,zero,528
  8082f8:	00808628 	cmpgeui	r2,zero,536
  8082fc:	00808634 	movhi	r2,536
  808300:	00808640 	call	80864 <OSCtxSw_SWITCH_PC+0x80824>
  808304:	0080864c 	andi	r2,zero,537
  808308:	00808658 	cmpnei	r2,zero,537
  80830c:	00808664 	muli	r2,zero,537
  808310:	00808670 	cmpltui	r2,zero,537
  808314:	0080867c 	xorhi	r2,zero,537
  808318:	00808688 	cmpgei	r2,zero,538
  80831c:	00808694 	movui	r2,538
  808320:	0080841c 	xori	r2,zero,528
  808324:	0080841c 	xori	r2,zero,528
  808328:	008086a0 	cmpeqi	r2,zero,538
  80832c:	0080841c 	xori	r2,zero,528
  808330:	0080841c 	xori	r2,zero,528
  808334:	008086ac 	andhi	r2,zero,538
  808338:	0080841c 	xori	r2,zero,528
  80833c:	0080841c 	xori	r2,zero,528
  808340:	0080841c 	xori	r2,zero,528
  808344:	0080841c 	xori	r2,zero,528
  808348:	0080841c 	xori	r2,zero,528
  80834c:	008086b8 	rdprs	r2,zero,538
  808350:	008086c4 	movi	r2,539
  808354:	008086d0 	cmplti	r2,zero,539
  808358:	008086dc 	xori	r2,zero,539
  80835c:	008086e8 	cmpgeui	r2,zero,539
  808360:	008086f4 	movhi	r2,539
  808364:	00808700 	call	80870 <OSCtxSw_SWITCH_PC+0x80830>
  808368:	0080870c 	andi	r2,zero,540
  80836c:	00808718 	cmpnei	r2,zero,540
  808370:	00808724 	muli	r2,zero,540
  808374:	0080841c 	xori	r2,zero,528
  808378:	0080841c 	xori	r2,zero,528
  80837c:	00808730 	cmpltui	r2,zero,540
  808380:	0080841c 	xori	r2,zero,528
  808384:	0080841c 	xori	r2,zero,528
  808388:	0080841c 	xori	r2,zero,528
  80838c:	0080841c 	xori	r2,zero,528
  808390:	0080841c 	xori	r2,zero,528
  808394:	0080841c 	xori	r2,zero,528
  808398:	0080841c 	xori	r2,zero,528
  80839c:	0080841c 	xori	r2,zero,528
  8083a0:	0080841c 	xori	r2,zero,528
  8083a4:	0080873c 	xorhi	r2,zero,540
  8083a8:	00808748 	cmpgei	r2,zero,541
  8083ac:	00808754 	movui	r2,541
  8083b0:	00808760 	cmpeqi	r2,zero,541
  8083b4:	0080876c 	andhi	r2,zero,541
  8083b8:	00808778 	rdprs	r2,zero,541
  8083bc:	00808784 	movi	r2,542
  8083c0:	00808790 	cmplti	r2,zero,542
  8083c4:	0080879c 	xori	r2,zero,542
  8083c8:	008087a8 	cmpgeui	r2,zero,542
  8083cc:	008087b4 	movhi	r2,542
  8083d0:	008087c0 	call	8087c <OSCtxSw_SWITCH_PC+0x8083c>
  8083d4:	008087cc 	andi	r2,zero,543
  8083d8:	008087d8 	cmpnei	r2,zero,543
  8083dc:	008087e4 	muli	r2,zero,543
  8083e0:	008087f0 	cmpltui	r2,zero,543
  8083e4:	008087fc 	xorhi	r2,zero,543
  8083e8:	00808808 	cmpgei	r2,zero,544
  8083ec:	00808814 	movui	r2,544
  8083f0:	00808820 	cmpeqi	r2,zero,544
  8083f4:	0080841c 	xori	r2,zero,528
  8083f8:	0080841c 	xori	r2,zero,528
  8083fc:	0080882c 	andhi	r2,zero,544
  808400:	00808838 	rdprs	r2,zero,544
  808404:	0080841c 	xori	r2,zero,528
  808408:	0080841c 	xori	r2,zero,528
  80840c:	0080841c 	xori	r2,zero,528
  808410:	0080841c 	xori	r2,zero,528
  808414:	0080841c 	xori	r2,zero,528
  808418:	00808448 	cmpgei	r2,zero,529
  80841c:	2809883a 	mov	r4,r5
  808420:	08095240 	call	809524 <_user_strerror>
  808424:	10000326 	beq	r2,zero,808434 <strerror+0x264>
  808428:	dfc00017 	ldw	ra,0(sp)
  80842c:	dec00104 	addi	sp,sp,4
  808430:	f800283a 	ret
  808434:	00802174 	movhi	r2,133
  808438:	10b1d204 	addi	r2,r2,-14520
  80843c:	dfc00017 	ldw	ra,0(sp)
  808440:	dec00104 	addi	sp,sp,4
  808444:	f800283a 	ret
  808448:	00802174 	movhi	r2,133
  80844c:	10b09504 	addi	r2,r2,-15788
  808450:	003ff506 	br	808428 <strerror+0x258>
  808454:	00802174 	movhi	r2,133
  808458:	10afe504 	addi	r2,r2,-16492
  80845c:	003ff206 	br	808428 <strerror+0x258>
  808460:	00802174 	movhi	r2,133
  808464:	10afe804 	addi	r2,r2,-16480
  808468:	003fef06 	br	808428 <strerror+0x258>
  80846c:	00802174 	movhi	r2,133
  808470:	10afef04 	addi	r2,r2,-16452
  808474:	003fec06 	br	808428 <strerror+0x258>
  808478:	00802174 	movhi	r2,133
  80847c:	10aff304 	addi	r2,r2,-16436
  808480:	003fe906 	br	808428 <strerror+0x258>
  808484:	00802174 	movhi	r2,133
  808488:	10aff904 	addi	r2,r2,-16412
  80848c:	003fe606 	br	808428 <strerror+0x258>
  808490:	00802174 	movhi	r2,133
  808494:	10affc04 	addi	r2,r2,-16400
  808498:	003fe306 	br	808428 <strerror+0x258>
  80849c:	00802174 	movhi	r2,133
  8084a0:	10b00304 	addi	r2,r2,-16372
  8084a4:	003fe006 	br	808428 <strerror+0x258>
  8084a8:	00802174 	movhi	r2,133
  8084ac:	10b00804 	addi	r2,r2,-16352
  8084b0:	003fdd06 	br	808428 <strerror+0x258>
  8084b4:	00802174 	movhi	r2,133
  8084b8:	10b01404 	addi	r2,r2,-16304
  8084bc:	003fda06 	br	808428 <strerror+0x258>
  8084c0:	00802174 	movhi	r2,133
  8084c4:	10b01804 	addi	r2,r2,-16288
  8084c8:	003fd706 	br	808428 <strerror+0x258>
  8084cc:	00802174 	movhi	r2,133
  8084d0:	10b02304 	addi	r2,r2,-16244
  8084d4:	003fd406 	br	808428 <strerror+0x258>
  8084d8:	00802174 	movhi	r2,133
  8084dc:	10b02804 	addi	r2,r2,-16224
  8084e0:	003fd106 	br	808428 <strerror+0x258>
  8084e4:	00802174 	movhi	r2,133
  8084e8:	10b02d04 	addi	r2,r2,-16204
  8084ec:	003fce06 	br	808428 <strerror+0x258>
  8084f0:	00802174 	movhi	r2,133
  8084f4:	10b03204 	addi	r2,r2,-16184
  8084f8:	003fcb06 	br	808428 <strerror+0x258>
  8084fc:	00802174 	movhi	r2,133
  808500:	10b03504 	addi	r2,r2,-16172
  808504:	003fc806 	br	808428 <strerror+0x258>
  808508:	00802174 	movhi	r2,133
  80850c:	10b03b04 	addi	r2,r2,-16148
  808510:	003fc506 	br	808428 <strerror+0x258>
  808514:	00802174 	movhi	r2,133
  808518:	10b04104 	addi	r2,r2,-16124
  80851c:	003fc206 	br	808428 <strerror+0x258>
  808520:	00802174 	movhi	r2,133
  808524:	10b04404 	addi	r2,r2,-16112
  808528:	003fbf06 	br	808428 <strerror+0x258>
  80852c:	00802174 	movhi	r2,133
  808530:	10b04904 	addi	r2,r2,-16092
  808534:	003fbc06 	br	808428 <strerror+0x258>
  808538:	00802174 	movhi	r2,133
  80853c:	10b04d04 	addi	r2,r2,-16076
  808540:	003fb906 	br	808428 <strerror+0x258>
  808544:	00802174 	movhi	r2,133
  808548:	10b05d04 	addi	r2,r2,-16012
  80854c:	003fb606 	br	808428 <strerror+0x258>
  808550:	00802174 	movhi	r2,133
  808554:	10b06104 	addi	r2,r2,-15996
  808558:	003fb306 	br	808428 <strerror+0x258>
  80855c:	00802174 	movhi	r2,133
  808560:	10b06f04 	addi	r2,r2,-15940
  808564:	003fb006 	br	808428 <strerror+0x258>
  808568:	00802174 	movhi	r2,133
  80856c:	10b07704 	addi	r2,r2,-15908
  808570:	003fad06 	br	808428 <strerror+0x258>
  808574:	00802174 	movhi	r2,133
  808578:	10b07c04 	addi	r2,r2,-15888
  80857c:	003faa06 	br	808428 <strerror+0x258>
  808580:	00802174 	movhi	r2,133
  808584:	10b08204 	addi	r2,r2,-15864
  808588:	003fa706 	br	808428 <strerror+0x258>
  80858c:	00802174 	movhi	r2,133
  808590:	10b08604 	addi	r2,r2,-15848
  808594:	003fa406 	br	808428 <strerror+0x258>
  808598:	00802174 	movhi	r2,133
  80859c:	10b08f04 	addi	r2,r2,-15812
  8085a0:	003fa106 	br	808428 <strerror+0x258>
  8085a4:	00802174 	movhi	r2,133
  8085a8:	10b09904 	addi	r2,r2,-15772
  8085ac:	003f9e06 	br	808428 <strerror+0x258>
  8085b0:	00802174 	movhi	r2,133
  8085b4:	10b09d04 	addi	r2,r2,-15756
  8085b8:	003f9b06 	br	808428 <strerror+0x258>
  8085bc:	00802174 	movhi	r2,133
  8085c0:	10b0a304 	addi	r2,r2,-15732
  8085c4:	003f9806 	br	808428 <strerror+0x258>
  8085c8:	00802174 	movhi	r2,133
  8085cc:	10b0a704 	addi	r2,r2,-15716
  8085d0:	003f9506 	br	808428 <strerror+0x258>
  8085d4:	00802174 	movhi	r2,133
  8085d8:	10b0aa04 	addi	r2,r2,-15704
  8085dc:	003f9206 	br	808428 <strerror+0x258>
  8085e0:	00802174 	movhi	r2,133
  8085e4:	10b0ae04 	addi	r2,r2,-15688
  8085e8:	003f8f06 	br	808428 <strerror+0x258>
  8085ec:	00802174 	movhi	r2,133
  8085f0:	10b0b304 	addi	r2,r2,-15668
  8085f4:	003f8c06 	br	808428 <strerror+0x258>
  8085f8:	00802174 	movhi	r2,133
  8085fc:	10b0ba04 	addi	r2,r2,-15640
  808600:	003f8906 	br	808428 <strerror+0x258>
  808604:	00802174 	movhi	r2,133
  808608:	10b0bf04 	addi	r2,r2,-15620
  80860c:	003f8606 	br	808428 <strerror+0x258>
  808610:	00802174 	movhi	r2,133
  808614:	10b0c804 	addi	r2,r2,-15584
  808618:	003f8306 	br	808428 <strerror+0x258>
  80861c:	00802174 	movhi	r2,133
  808620:	10b0ca04 	addi	r2,r2,-15576
  808624:	003f8006 	br	808428 <strerror+0x258>
  808628:	00802174 	movhi	r2,133
  80862c:	10b0ce04 	addi	r2,r2,-15560
  808630:	003f7d06 	br	808428 <strerror+0x258>
  808634:	00802174 	movhi	r2,133
  808638:	10b0d404 	addi	r2,r2,-15536
  80863c:	003f7a06 	br	808428 <strerror+0x258>
  808640:	00802174 	movhi	r2,133
  808644:	10b0d904 	addi	r2,r2,-15516
  808648:	003f7706 	br	808428 <strerror+0x258>
  80864c:	00802174 	movhi	r2,133
  808650:	10b0e104 	addi	r2,r2,-15484
  808654:	003f7406 	br	808428 <strerror+0x258>
  808658:	00802174 	movhi	r2,133
  80865c:	10b0e404 	addi	r2,r2,-15472
  808660:	003f7106 	br	808428 <strerror+0x258>
  808664:	00802174 	movhi	r2,133
  808668:	10b0e904 	addi	r2,r2,-15452
  80866c:	003f6e06 	br	808428 <strerror+0x258>
  808670:	00802174 	movhi	r2,133
  808674:	10b0ef04 	addi	r2,r2,-15428
  808678:	003f6b06 	br	808428 <strerror+0x258>
  80867c:	00802174 	movhi	r2,133
  808680:	10b0f304 	addi	r2,r2,-15412
  808684:	003f6806 	br	808428 <strerror+0x258>
  808688:	00802174 	movhi	r2,133
  80868c:	10b0f704 	addi	r2,r2,-15396
  808690:	003f6506 	br	808428 <strerror+0x258>
  808694:	00802174 	movhi	r2,133
  808698:	10b0fc04 	addi	r2,r2,-15376
  80869c:	003f6206 	br	808428 <strerror+0x258>
  8086a0:	00802174 	movhi	r2,133
  8086a4:	10b10504 	addi	r2,r2,-15340
  8086a8:	003f5f06 	br	808428 <strerror+0x258>
  8086ac:	00802174 	movhi	r2,133
  8086b0:	10b10a04 	addi	r2,r2,-15320
  8086b4:	003f5c06 	br	808428 <strerror+0x258>
  8086b8:	00802174 	movhi	r2,133
  8086bc:	10b10d04 	addi	r2,r2,-15308
  8086c0:	003f5906 	br	808428 <strerror+0x258>
  8086c4:	00802174 	movhi	r2,133
  8086c8:	10b11704 	addi	r2,r2,-15268
  8086cc:	003f5606 	br	808428 <strerror+0x258>
  8086d0:	00802174 	movhi	r2,133
  8086d4:	10b12104 	addi	r2,r2,-15228
  8086d8:	003f5306 	br	808428 <strerror+0x258>
  8086dc:	00802174 	movhi	r2,133
  8086e0:	10b12904 	addi	r2,r2,-15196
  8086e4:	003f5006 	br	808428 <strerror+0x258>
  8086e8:	00802174 	movhi	r2,133
  8086ec:	10b13904 	addi	r2,r2,-15132
  8086f0:	003f4d06 	br	808428 <strerror+0x258>
  8086f4:	00802174 	movhi	r2,133
  8086f8:	10b14304 	addi	r2,r2,-15092
  8086fc:	003f4a06 	br	808428 <strerror+0x258>
  808700:	00802174 	movhi	r2,133
  808704:	10b14a04 	addi	r2,r2,-15064
  808708:	003f4706 	br	808428 <strerror+0x258>
  80870c:	00802174 	movhi	r2,133
  808710:	10b14e04 	addi	r2,r2,-15048
  808714:	003f4406 	br	808428 <strerror+0x258>
  808718:	00802174 	movhi	r2,133
  80871c:	10b15304 	addi	r2,r2,-15028
  808720:	003f4106 	br	808428 <strerror+0x258>
  808724:	00802174 	movhi	r2,133
  808728:	10b15a04 	addi	r2,r2,-15000
  80872c:	003f3e06 	br	808428 <strerror+0x258>
  808730:	00802174 	movhi	r2,133
  808734:	10b1ba04 	addi	r2,r2,-14616
  808738:	003f3b06 	br	808428 <strerror+0x258>
  80873c:	00802174 	movhi	r2,133
  808740:	10b16004 	addi	r2,r2,-14976
  808744:	003f3806 	br	808428 <strerror+0x258>
  808748:	00802174 	movhi	r2,133
  80874c:	10b16704 	addi	r2,r2,-14948
  808750:	003f3506 	br	808428 <strerror+0x258>
  808754:	00802174 	movhi	r2,133
  808758:	10b17304 	addi	r2,r2,-14900
  80875c:	003f3206 	br	808428 <strerror+0x258>
  808760:	00802174 	movhi	r2,133
  808764:	10b17b04 	addi	r2,r2,-14868
  808768:	003f2f06 	br	808428 <strerror+0x258>
  80876c:	00802174 	movhi	r2,133
  808770:	10b18304 	addi	r2,r2,-14836
  808774:	003f2c06 	br	808428 <strerror+0x258>
  808778:	00802174 	movhi	r2,133
  80877c:	10b18904 	addi	r2,r2,-14812
  808780:	003f2906 	br	808428 <strerror+0x258>
  808784:	00802174 	movhi	r2,133
  808788:	10b19204 	addi	r2,r2,-14776
  80878c:	003f2606 	br	808428 <strerror+0x258>
  808790:	00802174 	movhi	r2,133
  808794:	10b19704 	addi	r2,r2,-14756
  808798:	003f2306 	br	808428 <strerror+0x258>
  80879c:	00802174 	movhi	r2,133
  8087a0:	10b19d04 	addi	r2,r2,-14732
  8087a4:	003f2006 	br	808428 <strerror+0x258>
  8087a8:	00802174 	movhi	r2,133
  8087ac:	10b0c204 	addi	r2,r2,-15608
  8087b0:	003f1d06 	br	808428 <strerror+0x258>
  8087b4:	00802174 	movhi	r2,133
  8087b8:	10b06604 	addi	r2,r2,-15976
  8087bc:	003f1a06 	br	808428 <strerror+0x258>
  8087c0:	00802174 	movhi	r2,133
  8087c4:	10afdf04 	addi	r2,r2,-16516
  8087c8:	003f1706 	br	808428 <strerror+0x258>
  8087cc:	00802174 	movhi	r2,133
  8087d0:	10b05104 	addi	r2,r2,-16060
  8087d4:	003f1406 	br	808428 <strerror+0x258>
  8087d8:	00802174 	movhi	r2,133
  8087dc:	10b08a04 	addi	r2,r2,-15832
  8087e0:	003f1106 	br	808428 <strerror+0x258>
  8087e4:	00802174 	movhi	r2,133
  8087e8:	10b05504 	addi	r2,r2,-16044
  8087ec:	003f0e06 	br	808428 <strerror+0x258>
  8087f0:	00802174 	movhi	r2,133
  8087f4:	10b00d04 	addi	r2,r2,-16332
  8087f8:	003f0b06 	br	808428 <strerror+0x258>
  8087fc:	00802174 	movhi	r2,133
  808800:	10b01b04 	addi	r2,r2,-16276
  808804:	003f0806 	br	808428 <strerror+0x258>
  808808:	00802174 	movhi	r2,133
  80880c:	10afda04 	addi	r2,r2,-16536
  808810:	003f0506 	br	808428 <strerror+0x258>
  808814:	00802174 	movhi	r2,133
  808818:	10b10004 	addi	r2,r2,-15360
  80881c:	003f0206 	br	808428 <strerror+0x258>
  808820:	00802174 	movhi	r2,133
  808824:	10b1ac04 	addi	r2,r2,-14672
  808828:	003eff06 	br	808428 <strerror+0x258>
  80882c:	00802174 	movhi	r2,133
  808830:	10b1b304 	addi	r2,r2,-14644
  808834:	003efc06 	br	808428 <strerror+0x258>
  808838:	00802174 	movhi	r2,133
  80883c:	10b1a604 	addi	r2,r2,-14696
  808840:	003ef906 	br	808428 <strerror+0x258>

00808844 <strlen>:
  808844:	208000cc 	andi	r2,r4,3
  808848:	2011883a 	mov	r8,r4
  80884c:	1000161e 	bne	r2,zero,8088a8 <strlen+0x64>
  808850:	20c00017 	ldw	r3,0(r4)
  808854:	017fbff4 	movhi	r5,65279
  808858:	297fbfc4 	addi	r5,r5,-257
  80885c:	01e02074 	movhi	r7,32897
  808860:	39e02004 	addi	r7,r7,-32640
  808864:	1945883a 	add	r2,r3,r5
  808868:	11c4703a 	and	r2,r2,r7
  80886c:	00c6303a 	nor	r3,zero,r3
  808870:	1886703a 	and	r3,r3,r2
  808874:	18000c1e 	bne	r3,zero,8088a8 <strlen+0x64>
  808878:	280d883a 	mov	r6,r5
  80887c:	380b883a 	mov	r5,r7
  808880:	21000104 	addi	r4,r4,4
  808884:	20800017 	ldw	r2,0(r4)
  808888:	1187883a 	add	r3,r2,r6
  80888c:	1946703a 	and	r3,r3,r5
  808890:	0084303a 	nor	r2,zero,r2
  808894:	10c4703a 	and	r2,r2,r3
  808898:	103ff926 	beq	r2,zero,808880 <strlen+0x3c>
  80889c:	20800007 	ldb	r2,0(r4)
  8088a0:	10000326 	beq	r2,zero,8088b0 <strlen+0x6c>
  8088a4:	21000044 	addi	r4,r4,1
  8088a8:	20800007 	ldb	r2,0(r4)
  8088ac:	103ffd1e 	bne	r2,zero,8088a4 <strlen+0x60>
  8088b0:	2205c83a 	sub	r2,r4,r8
  8088b4:	f800283a 	ret

008088b8 <strncmp>:
  8088b8:	30003926 	beq	r6,zero,8089a0 <strncmp+0xe8>
  8088bc:	2144b03a 	or	r2,r4,r5
  8088c0:	108000cc 	andi	r2,r2,3
  8088c4:	028000c4 	movi	r10,3
  8088c8:	1000241e 	bne	r2,zero,80895c <strncmp+0xa4>
  8088cc:	2011883a 	mov	r8,r4
  8088d0:	280f883a 	mov	r7,r5
  8088d4:	51801f2e 	bgeu	r10,r6,808954 <strncmp+0x9c>
  8088d8:	21000017 	ldw	r4,0(r4)
  8088dc:	28800017 	ldw	r2,0(r5)
  8088e0:	20801c1e 	bne	r4,r2,808954 <strncmp+0x9c>
  8088e4:	31bfff04 	addi	r6,r6,-4
  8088e8:	30002d26 	beq	r6,zero,8089a0 <strncmp+0xe8>
  8088ec:	027fbff4 	movhi	r9,65279
  8088f0:	4a7fbfc4 	addi	r9,r9,-257
  8088f4:	2247883a 	add	r3,r4,r9
  8088f8:	01602074 	movhi	r5,32897
  8088fc:	29602004 	addi	r5,r5,-32640
  808900:	1946703a 	and	r3,r3,r5
  808904:	0104303a 	nor	r2,zero,r4
  808908:	10c4703a 	and	r2,r2,r3
  80890c:	1000241e 	bne	r2,zero,8089a0 <strncmp+0xe8>
  808910:	5017883a 	mov	r11,r10
  808914:	4815883a 	mov	r10,r9
  808918:	2813883a 	mov	r9,r5
  80891c:	00000a06 	br	808948 <strncmp+0x90>
  808920:	41000017 	ldw	r4,0(r8)
  808924:	39400017 	ldw	r5,0(r7)
  808928:	2285883a 	add	r2,r4,r10
  80892c:	1244703a 	and	r2,r2,r9
  808930:	0106303a 	nor	r3,zero,r4
  808934:	1886703a 	and	r3,r3,r2
  808938:	2140061e 	bne	r4,r5,808954 <strncmp+0x9c>
  80893c:	31bfff04 	addi	r6,r6,-4
  808940:	30001726 	beq	r6,zero,8089a0 <strncmp+0xe8>
  808944:	1800161e 	bne	r3,zero,8089a0 <strncmp+0xe8>
  808948:	42000104 	addi	r8,r8,4
  80894c:	39c00104 	addi	r7,r7,4
  808950:	59bff336 	bltu	r11,r6,808920 <strncmp+0x68>
  808954:	4009883a 	mov	r4,r8
  808958:	380b883a 	mov	r5,r7
  80895c:	31bfffc4 	addi	r6,r6,-1
  808960:	01ffffc4 	movi	r7,-1
  808964:	31c00a1e 	bne	r6,r7,808990 <strncmp+0xd8>
  808968:	20c00003 	ldbu	r3,0(r4)
  80896c:	28800003 	ldbu	r2,0(r5)
  808970:	1885c83a 	sub	r2,r3,r2
  808974:	f800283a 	ret
  808978:	30000926 	beq	r6,zero,8089a0 <strncmp+0xe8>
  80897c:	18000826 	beq	r3,zero,8089a0 <strncmp+0xe8>
  808980:	31bfffc4 	addi	r6,r6,-1
  808984:	21000044 	addi	r4,r4,1
  808988:	29400044 	addi	r5,r5,1
  80898c:	31fff626 	beq	r6,r7,808968 <strncmp+0xb0>
  808990:	20c00007 	ldb	r3,0(r4)
  808994:	28800007 	ldb	r2,0(r5)
  808998:	18bff726 	beq	r3,r2,808978 <strncmp+0xc0>
  80899c:	003ff206 	br	808968 <strncmp+0xb0>
  8089a0:	0005883a 	mov	r2,zero
  8089a4:	f800283a 	ret

008089a8 <strncpy>:
  8089a8:	2904b03a 	or	r2,r5,r4
  8089ac:	108000cc 	andi	r2,r2,3
  8089b0:	00c000c4 	movi	r3,3
  8089b4:	1000291e 	bne	r2,zero,808a5c <strncpy+0xb4>
  8089b8:	1980282e 	bgeu	r3,r6,808a5c <strncpy+0xb4>
  8089bc:	1817883a 	mov	r11,r3
  8089c0:	2011883a 	mov	r8,r4
  8089c4:	02bfbff4 	movhi	r10,65279
  8089c8:	52bfbfc4 	addi	r10,r10,-257
  8089cc:	02602074 	movhi	r9,32897
  8089d0:	4a602004 	addi	r9,r9,-32640
  8089d4:	29c00017 	ldw	r7,0(r5)
  8089d8:	3a85883a 	add	r2,r7,r10
  8089dc:	01c6303a 	nor	r3,zero,r7
  8089e0:	10c4703a 	and	r2,r2,r3
  8089e4:	1244703a 	and	r2,r2,r9
  8089e8:	1000051e 	bne	r2,zero,808a00 <strncpy+0x58>
  8089ec:	31bfff04 	addi	r6,r6,-4
  8089f0:	41c00015 	stw	r7,0(r8)
  8089f4:	29400104 	addi	r5,r5,4
  8089f8:	42000104 	addi	r8,r8,4
  8089fc:	59bff536 	bltu	r11,r6,8089d4 <strncpy+0x2c>
  808a00:	400f883a 	mov	r7,r8
  808a04:	30001326 	beq	r6,zero,808a54 <strncpy+0xac>
  808a08:	28800003 	ldbu	r2,0(r5)
  808a0c:	31bfffc4 	addi	r6,r6,-1
  808a10:	38c00044 	addi	r3,r7,1
  808a14:	38800005 	stb	r2,0(r7)
  808a18:	10000826 	beq	r2,zero,808a3c <strncpy+0x94>
  808a1c:	29400044 	addi	r5,r5,1
  808a20:	30000c26 	beq	r6,zero,808a54 <strncpy+0xac>
  808a24:	28800003 	ldbu	r2,0(r5)
  808a28:	31bfffc4 	addi	r6,r6,-1
  808a2c:	29400044 	addi	r5,r5,1
  808a30:	18800005 	stb	r2,0(r3)
  808a34:	18c00044 	addi	r3,r3,1
  808a38:	103ff91e 	bne	r2,zero,808a20 <strncpy+0x78>
  808a3c:	30000526 	beq	r6,zero,808a54 <strncpy+0xac>
  808a40:	1805883a 	mov	r2,r3
  808a44:	30cd883a 	add	r6,r6,r3
  808a48:	10000005 	stb	zero,0(r2)
  808a4c:	10800044 	addi	r2,r2,1
  808a50:	30bffd1e 	bne	r6,r2,808a48 <strncpy+0xa0>
  808a54:	2005883a 	mov	r2,r4
  808a58:	f800283a 	ret
  808a5c:	200f883a 	mov	r7,r4
  808a60:	003fe806 	br	808a04 <strncpy+0x5c>

00808a64 <critical_factorization>:
  808a64:	03000044 	movi	r12,1
  808a68:	6013883a 	mov	r9,r12
  808a6c:	037fffc4 	movi	r13,-1
  808a70:	0011883a 	mov	r8,zero
  808a74:	6905883a 	add	r2,r13,r4
  808a78:	424f883a 	add	r7,r8,r9
  808a7c:	1245883a 	add	r2,r2,r9
  808a80:	21c7883a 	add	r3,r4,r7
  808a84:	39400b2e 	bgeu	r7,r5,808ab4 <critical_factorization+0x50>
  808a88:	18c00003 	ldbu	r3,0(r3)
  808a8c:	10800003 	ldbu	r2,0(r2)
  808a90:	1880232e 	bgeu	r3,r2,808b20 <critical_factorization+0xbc>
  808a94:	3b59c83a 	sub	r12,r7,r13
  808a98:	02400044 	movi	r9,1
  808a9c:	3811883a 	mov	r8,r7
  808aa0:	6905883a 	add	r2,r13,r4
  808aa4:	424f883a 	add	r7,r8,r9
  808aa8:	1245883a 	add	r2,r2,r9
  808aac:	21c7883a 	add	r3,r4,r7
  808ab0:	397ff536 	bltu	r7,r5,808a88 <critical_factorization+0x24>
  808ab4:	02c00044 	movi	r11,1
  808ab8:	5815883a 	mov	r10,r11
  808abc:	027fffc4 	movi	r9,-1
  808ac0:	0011883a 	mov	r8,zero
  808ac4:	4905883a 	add	r2,r9,r4
  808ac8:	428f883a 	add	r7,r8,r10
  808acc:	33000015 	stw	r12,0(r6)
  808ad0:	1285883a 	add	r2,r2,r10
  808ad4:	3907883a 	add	r3,r7,r4
  808ad8:	39400b2e 	bgeu	r7,r5,808b08 <critical_factorization+0xa4>
  808adc:	18c00003 	ldbu	r3,0(r3)
  808ae0:	10800003 	ldbu	r2,0(r2)
  808ae4:	10c01a2e 	bgeu	r2,r3,808b50 <critical_factorization+0xec>
  808ae8:	3a57c83a 	sub	r11,r7,r9
  808aec:	02800044 	movi	r10,1
  808af0:	3811883a 	mov	r8,r7
  808af4:	4905883a 	add	r2,r9,r4
  808af8:	428f883a 	add	r7,r8,r10
  808afc:	1285883a 	add	r2,r2,r10
  808b00:	3907883a 	add	r3,r7,r4
  808b04:	397ff536 	bltu	r7,r5,808adc <critical_factorization+0x78>
  808b08:	48c00044 	addi	r3,r9,1
  808b0c:	68800044 	addi	r2,r13,1
  808b10:	18800236 	bltu	r3,r2,808b1c <critical_factorization+0xb8>
  808b14:	32c00015 	stw	r11,0(r6)
  808b18:	1805883a 	mov	r2,r3
  808b1c:	f800283a 	ret
  808b20:	18800626 	beq	r3,r2,808b3c <critical_factorization+0xd8>
  808b24:	03000044 	movi	r12,1
  808b28:	430f883a 	add	r7,r8,r12
  808b2c:	401b883a 	mov	r13,r8
  808b30:	6013883a 	mov	r9,r12
  808b34:	3811883a 	mov	r8,r7
  808b38:	003fd906 	br	808aa0 <critical_factorization+0x3c>
  808b3c:	4b001026 	beq	r9,r12,808b80 <critical_factorization+0x11c>
  808b40:	400f883a 	mov	r7,r8
  808b44:	4a400044 	addi	r9,r9,1
  808b48:	3811883a 	mov	r8,r7
  808b4c:	003fd406 	br	808aa0 <critical_factorization+0x3c>
  808b50:	18800626 	beq	r3,r2,808b6c <critical_factorization+0x108>
  808b54:	02c00044 	movi	r11,1
  808b58:	42cf883a 	add	r7,r8,r11
  808b5c:	4013883a 	mov	r9,r8
  808b60:	5815883a 	mov	r10,r11
  808b64:	3811883a 	mov	r8,r7
  808b68:	003fe206 	br	808af4 <critical_factorization+0x90>
  808b6c:	52c00726 	beq	r10,r11,808b8c <critical_factorization+0x128>
  808b70:	400f883a 	mov	r7,r8
  808b74:	52800044 	addi	r10,r10,1
  808b78:	3811883a 	mov	r8,r7
  808b7c:	003fdd06 	br	808af4 <critical_factorization+0x90>
  808b80:	02400044 	movi	r9,1
  808b84:	3811883a 	mov	r8,r7
  808b88:	003fc506 	br	808aa0 <critical_factorization+0x3c>
  808b8c:	02800044 	movi	r10,1
  808b90:	3811883a 	mov	r8,r7
  808b94:	003fd706 	br	808af4 <critical_factorization+0x90>

00808b98 <strstr>:
  808b98:	defef404 	addi	sp,sp,-1072
  808b9c:	dd810815 	stw	r22,1056(sp)
  808ba0:	dc410315 	stw	r17,1036(sp)
  808ba4:	dfc10b15 	stw	ra,1068(sp)
  808ba8:	df010a15 	stw	fp,1064(sp)
  808bac:	ddc10915 	stw	r23,1060(sp)
  808bb0:	dd410715 	stw	r21,1052(sp)
  808bb4:	dd010615 	stw	r20,1048(sp)
  808bb8:	dcc10515 	stw	r19,1044(sp)
  808bbc:	dc810415 	stw	r18,1040(sp)
  808bc0:	dc010215 	stw	r16,1032(sp)
  808bc4:	2023883a 	mov	r17,r4
  808bc8:	21000007 	ldb	r4,0(r4)
  808bcc:	282d883a 	mov	r22,r5
  808bd0:	2000d026 	beq	r4,zero,808f14 <strstr+0x37c>
  808bd4:	28800007 	ldb	r2,0(r5)
  808bd8:	10001026 	beq	r2,zero,808c1c <strstr+0x84>
  808bdc:	2821883a 	mov	r16,r5
  808be0:	8807883a 	mov	r3,r17
  808be4:	01400044 	movi	r5,1
  808be8:	00000206 	br	808bf4 <strstr+0x5c>
  808bec:	80800007 	ldb	r2,0(r16)
  808bf0:	10000826 	beq	r2,zero,808c14 <strstr+0x7c>
  808bf4:	18c00044 	addi	r3,r3,1
  808bf8:	2085003a 	cmpeq	r2,r4,r2
  808bfc:	19000007 	ldb	r4,0(r3)
  808c00:	288a703a 	and	r5,r5,r2
  808c04:	84000044 	addi	r16,r16,1
  808c08:	203ff81e 	bne	r4,zero,808bec <strstr+0x54>
  808c0c:	80800007 	ldb	r2,0(r16)
  808c10:	1000611e 	bne	r2,zero,808d98 <strstr+0x200>
  808c14:	2805003a 	cmpeq	r2,r5,zero
  808c18:	10000e1e 	bne	r2,zero,808c54 <strstr+0xbc>
  808c1c:	8825883a 	mov	r18,r17
  808c20:	9005883a 	mov	r2,r18
  808c24:	dfc10b17 	ldw	ra,1068(sp)
  808c28:	df010a17 	ldw	fp,1064(sp)
  808c2c:	ddc10917 	ldw	r23,1060(sp)
  808c30:	dd810817 	ldw	r22,1056(sp)
  808c34:	dd410717 	ldw	r21,1052(sp)
  808c38:	dd010617 	ldw	r20,1048(sp)
  808c3c:	dcc10517 	ldw	r19,1044(sp)
  808c40:	dc810417 	ldw	r18,1040(sp)
  808c44:	dc410317 	ldw	r17,1036(sp)
  808c48:	dc010217 	ldw	r16,1032(sp)
  808c4c:	dec10c04 	addi	sp,sp,1072
  808c50:	f800283a 	ret
  808c54:	b1400007 	ldb	r5,0(r22)
  808c58:	89000044 	addi	r4,r17,1
  808c5c:	04c00044 	movi	r19,1
  808c60:	0807fa80 	call	807fa8 <strchr>
  808c64:	1025883a 	mov	r18,r2
  808c68:	103fed26 	beq	r2,zero,808c20 <strstr+0x88>
  808c6c:	85a1c83a 	sub	r16,r16,r22
  808c70:	84ffeb26 	beq	r16,r19,808c20 <strstr+0x88>
  808c74:	8c09883a 	add	r4,r17,r16
  808c78:	2080492e 	bgeu	r4,r2,808da0 <strstr+0x208>
  808c7c:	9829883a 	mov	r20,r19
  808c80:	008007c4 	movi	r2,31
  808c84:	14004836 	bltu	r2,r16,808da8 <strstr+0x210>
  808c88:	b009883a 	mov	r4,r22
  808c8c:	800b883a 	mov	r5,r16
  808c90:	d80d883a 	mov	r6,sp
  808c94:	0808a640 	call	808a64 <critical_factorization>
  808c98:	d9400017 	ldw	r5,0(sp)
  808c9c:	b009883a 	mov	r4,r22
  808ca0:	100d883a 	mov	r6,r2
  808ca4:	b14b883a 	add	r5,r22,r5
  808ca8:	1027883a 	mov	r19,r2
  808cac:	080f0080 	call	80f008 <memcmp>
  808cb0:	1000b526 	beq	r2,zero,808f88 <strstr+0x3f0>
  808cb4:	84efc83a 	sub	r23,r16,r19
  808cb8:	9805883a 	mov	r2,r19
  808cbc:	9dc0012e 	bgeu	r19,r23,808cc4 <strstr+0x12c>
  808cc0:	b805883a 	mov	r2,r23
  808cc4:	10800044 	addi	r2,r2,1
  808cc8:	002b883a 	mov	r21,zero
  808ccc:	d8800015 	stw	r2,0(sp)
  808cd0:	ac23883a 	add	r17,r21,r16
  808cd4:	8d0dc83a 	sub	r6,r17,r20
  808cd8:	9509883a 	add	r4,r18,r20
  808cdc:	000b883a 	mov	r5,zero
  808ce0:	080ef240 	call	80ef24 <memchr>
  808ce4:	10002c1e 	bne	r2,zero,808d98 <strstr+0x200>
  808ce8:	88002b26 	beq	r17,zero,808d98 <strstr+0x200>
  808cec:	9c00122e 	bgeu	r19,r16,808d38 <strstr+0x1a0>
  808cf0:	acc5883a 	add	r2,r21,r19
  808cf4:	908b883a 	add	r5,r18,r2
  808cf8:	b4c9883a 	add	r4,r22,r19
  808cfc:	20c00003 	ldbu	r3,0(r4)
  808d00:	28800003 	ldbu	r2,0(r5)
  808d04:	1881331e 	bne	r3,r2,8091d4 <strstr+0x63c>
  808d08:	200d883a 	mov	r6,r4
  808d0c:	29400044 	addi	r5,r5,1
  808d10:	9809883a 	mov	r4,r19
  808d14:	9dcf883a 	add	r7,r19,r23
  808d18:	00000506 	br	808d30 <strstr+0x198>
  808d1c:	30c00043 	ldbu	r3,1(r6)
  808d20:	28800003 	ldbu	r2,0(r5)
  808d24:	31800044 	addi	r6,r6,1
  808d28:	29400044 	addi	r5,r5,1
  808d2c:	10c1161e 	bne	r2,r3,809188 <strstr+0x5f0>
  808d30:	21000044 	addi	r4,r4,1
  808d34:	21fff91e 	bne	r4,r7,808d1c <strstr+0x184>
  808d38:	01ffffc4 	movi	r7,-1
  808d3c:	99cd883a 	add	r6,r19,r7
  808d40:	31c12726 	beq	r6,r7,8091e0 <strstr+0x648>
  808d44:	ac91883a 	add	r8,r21,r18
  808d48:	b187883a 	add	r3,r22,r6
  808d4c:	4189883a 	add	r4,r8,r6
  808d50:	19400003 	ldbu	r5,0(r3)
  808d54:	20800003 	ldbu	r2,0(r4)
  808d58:	2881141e 	bne	r5,r2,8091ac <strstr+0x614>
  808d5c:	acc5883a 	add	r2,r21,r19
  808d60:	9085883a 	add	r2,r18,r2
  808d64:	b4c7883a 	add	r3,r22,r19
  808d68:	197fff84 	addi	r5,r3,-2
  808d6c:	113fff84 	addi	r4,r2,-2
  808d70:	00000506 	br	808d88 <strstr+0x1f0>
  808d74:	28c00003 	ldbu	r3,0(r5)
  808d78:	20800003 	ldbu	r2,0(r4)
  808d7c:	297fffc4 	addi	r5,r5,-1
  808d80:	213fffc4 	addi	r4,r4,-1
  808d84:	10c1091e 	bne	r2,r3,8091ac <strstr+0x614>
  808d88:	31bfffc4 	addi	r6,r6,-1
  808d8c:	31fff91e 	bne	r6,r7,808d74 <strstr+0x1dc>
  808d90:	4025883a 	mov	r18,r8
  808d94:	003fa206 	br	808c20 <strstr+0x88>
  808d98:	0025883a 	mov	r18,zero
  808d9c:	003fa006 	br	808c20 <strstr+0x88>
  808da0:	20a9c83a 	sub	r20,r4,r2
  808da4:	003fb606 	br	808c80 <strstr+0xe8>
  808da8:	b009883a 	mov	r4,r22
  808dac:	800b883a 	mov	r5,r16
  808db0:	d80d883a 	mov	r6,sp
  808db4:	0808a640 	call	808a64 <critical_factorization>
  808db8:	102b883a 	mov	r21,r2
  808dbc:	d8c10104 	addi	r3,sp,1028
  808dc0:	d8800104 	addi	r2,sp,4
  808dc4:	14000015 	stw	r16,0(r2)
  808dc8:	10800104 	addi	r2,r2,4
  808dcc:	10fffd1e 	bne	r2,r3,808dc4 <strstr+0x22c>
  808dd0:	84ffffc4 	addi	r19,r16,-1
  808dd4:	b009883a 	mov	r4,r22
  808dd8:	9807883a 	mov	r3,r19
  808ddc:	017fffc4 	movi	r5,-1
  808de0:	20800003 	ldbu	r2,0(r4)
  808de4:	21000044 	addi	r4,r4,1
  808de8:	1085883a 	add	r2,r2,r2
  808dec:	1085883a 	add	r2,r2,r2
  808df0:	16c5883a 	add	r2,r2,sp
  808df4:	10c00115 	stw	r3,4(r2)
  808df8:	18ffffc4 	addi	r3,r3,-1
  808dfc:	197ff81e 	bne	r3,r5,808de0 <strstr+0x248>
  808e00:	d9400017 	ldw	r5,0(sp)
  808e04:	b009883a 	mov	r4,r22
  808e08:	a80d883a 	mov	r6,r21
  808e0c:	b14b883a 	add	r5,r22,r5
  808e10:	080f0080 	call	80f008 <memcmp>
  808e14:	10004226 	beq	r2,zero,808f20 <strstr+0x388>
  808e18:	8547c83a 	sub	r3,r16,r21
  808e1c:	a805883a 	mov	r2,r21
  808e20:	a8c0012e 	bgeu	r21,r3,808e28 <strstr+0x290>
  808e24:	1805883a 	mov	r2,r3
  808e28:	10800044 	addi	r2,r2,1
  808e2c:	002f883a 	mov	r23,zero
  808e30:	b579883a 	add	fp,r22,r21
  808e34:	d8800015 	stw	r2,0(sp)
  808e38:	bc23883a 	add	r17,r23,r16
  808e3c:	8d0dc83a 	sub	r6,r17,r20
  808e40:	9509883a 	add	r4,r18,r20
  808e44:	000b883a 	mov	r5,zero
  808e48:	080ef240 	call	80ef24 <memchr>
  808e4c:	103fd21e 	bne	r2,zero,808d98 <strstr+0x200>
  808e50:	883fd126 	beq	r17,zero,808d98 <strstr+0x200>
  808e54:	9447883a 	add	r3,r18,r17
  808e58:	18bfffc3 	ldbu	r2,-1(r3)
  808e5c:	1085883a 	add	r2,r2,r2
  808e60:	1085883a 	add	r2,r2,r2
  808e64:	16c5883a 	add	r2,r2,sp
  808e68:	10800117 	ldw	r2,4(r2)
  808e6c:	1000b61e 	bne	r2,zero,809148 <strstr+0x5b0>
  808e70:	acc0102e 	bgeu	r21,r19,808eb4 <strstr+0x31c>
  808e74:	bd45883a 	add	r2,r23,r21
  808e78:	9089883a 	add	r4,r18,r2
  808e7c:	20c00003 	ldbu	r3,0(r4)
  808e80:	e0800003 	ldbu	r2,0(fp)
  808e84:	1880af1e 	bne	r3,r2,809144 <strstr+0x5ac>
  808e88:	21800044 	addi	r6,r4,1
  808e8c:	e00b883a 	mov	r5,fp
  808e90:	a809883a 	mov	r4,r21
  808e94:	00000506 	br	808eac <strstr+0x314>
  808e98:	28c00043 	ldbu	r3,1(r5)
  808e9c:	30800003 	ldbu	r2,0(r6)
  808ea0:	29400044 	addi	r5,r5,1
  808ea4:	31800044 	addi	r6,r6,1
  808ea8:	10c0bc1e 	bne	r2,r3,80919c <strstr+0x604>
  808eac:	21000044 	addi	r4,r4,1
  808eb0:	24fff936 	bltu	r4,r19,808e98 <strstr+0x300>
  808eb4:	01ffffc4 	movi	r7,-1
  808eb8:	a9cd883a 	add	r6,r21,r7
  808ebc:	31c0cb26 	beq	r6,r7,8091ec <strstr+0x654>
  808ec0:	bc91883a 	add	r8,r23,r18
  808ec4:	b187883a 	add	r3,r22,r6
  808ec8:	4189883a 	add	r4,r8,r6
  808ecc:	19400003 	ldbu	r5,0(r3)
  808ed0:	20800003 	ldbu	r2,0(r4)
  808ed4:	2880b91e 	bne	r5,r2,8091bc <strstr+0x624>
  808ed8:	bd45883a 	add	r2,r23,r21
  808edc:	9085883a 	add	r2,r18,r2
  808ee0:	b547883a 	add	r3,r22,r21
  808ee4:	197fff84 	addi	r5,r3,-2
  808ee8:	113fff84 	addi	r4,r2,-2
  808eec:	00000506 	br	808f04 <strstr+0x36c>
  808ef0:	28c00003 	ldbu	r3,0(r5)
  808ef4:	20800003 	ldbu	r2,0(r4)
  808ef8:	297fffc4 	addi	r5,r5,-1
  808efc:	213fffc4 	addi	r4,r4,-1
  808f00:	10c0ae1e 	bne	r2,r3,8091bc <strstr+0x624>
  808f04:	31bfffc4 	addi	r6,r6,-1
  808f08:	31fff91e 	bne	r6,r7,808ef0 <strstr+0x358>
  808f0c:	4025883a 	mov	r18,r8
  808f10:	003f4306 	br	808c20 <strstr+0x88>
  808f14:	2821883a 	mov	r16,r5
  808f18:	01400044 	movi	r5,1
  808f1c:	003f3b06 	br	808c0c <strstr+0x74>
  808f20:	a8bfffc4 	addi	r2,r21,-1
  808f24:	002f883a 	mov	r23,zero
  808f28:	0039883a 	mov	fp,zero
  808f2c:	d8810115 	stw	r2,1028(sp)
  808f30:	bc23883a 	add	r17,r23,r16
  808f34:	8d0dc83a 	sub	r6,r17,r20
  808f38:	9509883a 	add	r4,r18,r20
  808f3c:	000b883a 	mov	r5,zero
  808f40:	080ef240 	call	80ef24 <memchr>
  808f44:	103f941e 	bne	r2,zero,808d98 <strstr+0x200>
  808f48:	883f9326 	beq	r17,zero,808d98 <strstr+0x200>
  808f4c:	9447883a 	add	r3,r18,r17
  808f50:	18bfffc3 	ldbu	r2,-1(r3)
  808f54:	1085883a 	add	r2,r2,r2
  808f58:	1085883a 	add	r2,r2,r2
  808f5c:	16c5883a 	add	r2,r2,sp
  808f60:	10800117 	ldw	r2,4(r2)
  808f64:	10004526 	beq	r2,zero,80907c <strstr+0x4e4>
  808f68:	e0000426 	beq	fp,zero,808f7c <strstr+0x3e4>
  808f6c:	d8c00017 	ldw	r3,0(sp)
  808f70:	10c0022e 	bgeu	r2,r3,808f7c <strstr+0x3e4>
  808f74:	80c5c83a 	sub	r2,r16,r3
  808f78:	0039883a 	mov	fp,zero
  808f7c:	b8af883a 	add	r23,r23,r2
  808f80:	8829883a 	mov	r20,r17
  808f84:	003fea06 	br	808f30 <strstr+0x398>
  808f88:	002f883a 	mov	r23,zero
  808f8c:	0023883a 	mov	r17,zero
  808f90:	9f3fffc4 	addi	fp,r19,-1
  808f94:	bc2b883a 	add	r21,r23,r16
  808f98:	ad0dc83a 	sub	r6,r21,r20
  808f9c:	9509883a 	add	r4,r18,r20
  808fa0:	000b883a 	mov	r5,zero
  808fa4:	080ef240 	call	80ef24 <memchr>
  808fa8:	103f7b1e 	bne	r2,zero,808d98 <strstr+0x200>
  808fac:	a83f7a26 	beq	r21,zero,808d98 <strstr+0x200>
  808fb0:	880b883a 	mov	r5,r17
  808fb4:	8cc0012e 	bgeu	r17,r19,808fbc <strstr+0x424>
  808fb8:	980b883a 	mov	r5,r19
  808fbc:	2c00112e 	bgeu	r5,r16,809004 <strstr+0x46c>
  808fc0:	b945883a 	add	r2,r23,r5
  808fc4:	908f883a 	add	r7,r18,r2
  808fc8:	b149883a 	add	r4,r22,r5
  808fcc:	20c00003 	ldbu	r3,0(r4)
  808fd0:	38800003 	ldbu	r2,0(r7)
  808fd4:	1880551e 	bne	r3,r2,80912c <strstr+0x594>
  808fd8:	200d883a 	mov	r6,r4
  808fdc:	39000044 	addi	r4,r7,1
  808fe0:	800f883a 	mov	r7,r16
  808fe4:	00000506 	br	808ffc <strstr+0x464>
  808fe8:	30c00043 	ldbu	r3,1(r6)
  808fec:	20800003 	ldbu	r2,0(r4)
  808ff0:	31800044 	addi	r6,r6,1
  808ff4:	21000044 	addi	r4,r4,1
  808ff8:	10c04c1e 	bne	r2,r3,80912c <strstr+0x594>
  808ffc:	29400044 	addi	r5,r5,1
  809000:	29fff91e 	bne	r5,r7,808fe8 <strstr+0x450>
  809004:	980f883a 	mov	r7,r19
  809008:	8cc0152e 	bgeu	r17,r19,809060 <strstr+0x4c8>
  80900c:	bc85883a 	add	r2,r23,r18
  809010:	1705883a 	add	r2,r2,fp
  809014:	b707883a 	add	r3,r22,fp
  809018:	19400003 	ldbu	r5,0(r3)
  80901c:	11000003 	ldbu	r4,0(r2)
  809020:	29000f1e 	bne	r5,r4,809060 <strstr+0x4c8>
  809024:	bcc5883a 	add	r2,r23,r19
  809028:	9085883a 	add	r2,r18,r2
  80902c:	9d87883a 	add	r3,r19,r22
  809030:	e00f883a 	mov	r7,fp
  809034:	19bfff84 	addi	r6,r3,-2
  809038:	117fff84 	addi	r5,r2,-2
  80903c:	89c0082e 	bgeu	r17,r7,809060 <strstr+0x4c8>
  809040:	30c00003 	ldbu	r3,0(r6)
  809044:	28800003 	ldbu	r2,0(r5)
  809048:	31bfffc4 	addi	r6,r6,-1
  80904c:	297fffc4 	addi	r5,r5,-1
  809050:	393fffc4 	addi	r4,r7,-1
  809054:	10c0021e 	bne	r2,r3,809060 <strstr+0x4c8>
  809058:	200f883a 	mov	r7,r4
  80905c:	89fff836 	bltu	r17,r7,809040 <strstr+0x4a8>
  809060:	88800044 	addi	r2,r17,1
  809064:	38805936 	bltu	r7,r2,8091cc <strstr+0x634>
  809068:	d8800017 	ldw	r2,0(sp)
  80906c:	a829883a 	mov	r20,r21
  809070:	b8af883a 	add	r23,r23,r2
  809074:	80a3c83a 	sub	r17,r16,r2
  809078:	003fc606 	br	808f94 <strstr+0x3fc>
  80907c:	e00d883a 	mov	r6,fp
  809080:	e540012e 	bgeu	fp,r21,809088 <strstr+0x4f0>
  809084:	a80d883a 	mov	r6,r21
  809088:	34c0102e 	bgeu	r6,r19,8090cc <strstr+0x534>
  80908c:	b985883a 	add	r2,r23,r6
  809090:	908f883a 	add	r7,r18,r2
  809094:	b189883a 	add	r4,r22,r6
  809098:	20c00003 	ldbu	r3,0(r4)
  80909c:	38800003 	ldbu	r2,0(r7)
  8090a0:	1880331e 	bne	r3,r2,809170 <strstr+0x5d8>
  8090a4:	200b883a 	mov	r5,r4
  8090a8:	39000044 	addi	r4,r7,1
  8090ac:	00000506 	br	8090c4 <strstr+0x52c>
  8090b0:	28c00043 	ldbu	r3,1(r5)
  8090b4:	20800003 	ldbu	r2,0(r4)
  8090b8:	29400044 	addi	r5,r5,1
  8090bc:	21000044 	addi	r4,r4,1
  8090c0:	10c02b1e 	bne	r2,r3,809170 <strstr+0x5d8>
  8090c4:	31800044 	addi	r6,r6,1
  8090c8:	34fff936 	bltu	r6,r19,8090b0 <strstr+0x518>
  8090cc:	a80f883a 	mov	r7,r21
  8090d0:	e540202e 	bgeu	fp,r21,809154 <strstr+0x5bc>
  8090d4:	d8c10117 	ldw	r3,1028(sp)
  8090d8:	bc85883a 	add	r2,r23,r18
  8090dc:	10c5883a 	add	r2,r2,r3
  8090e0:	1d87883a 	add	r3,r3,r22
  8090e4:	19400003 	ldbu	r5,0(r3)
  8090e8:	11000003 	ldbu	r4,0(r2)
  8090ec:	2900191e 	bne	r5,r4,809154 <strstr+0x5bc>
  8090f0:	bd45883a 	add	r2,r23,r21
  8090f4:	d9c10117 	ldw	r7,1028(sp)
  8090f8:	9085883a 	add	r2,r18,r2
  8090fc:	b547883a 	add	r3,r22,r21
  809100:	19bfff84 	addi	r6,r3,-2
  809104:	117fff84 	addi	r5,r2,-2
  809108:	e1c0122e 	bgeu	fp,r7,809154 <strstr+0x5bc>
  80910c:	30c00003 	ldbu	r3,0(r6)
  809110:	28800003 	ldbu	r2,0(r5)
  809114:	31bfffc4 	addi	r6,r6,-1
  809118:	297fffc4 	addi	r5,r5,-1
  80911c:	393fffc4 	addi	r4,r7,-1
  809120:	10c00c1e 	bne	r2,r3,809154 <strstr+0x5bc>
  809124:	200f883a 	mov	r7,r4
  809128:	003ff706 	br	809108 <strstr+0x570>
  80912c:	2cc5c83a 	sub	r2,r5,r19
  809130:	10800044 	addi	r2,r2,1
  809134:	b8af883a 	add	r23,r23,r2
  809138:	0023883a 	mov	r17,zero
  80913c:	a829883a 	mov	r20,r21
  809140:	003f9406 	br	808f94 <strstr+0x3fc>
  809144:	00800044 	movi	r2,1
  809148:	b8af883a 	add	r23,r23,r2
  80914c:	8829883a 	mov	r20,r17
  809150:	003f3906 	br	808e38 <strstr+0x2a0>
  809154:	e0800044 	addi	r2,fp,1
  809158:	38801c36 	bltu	r7,r2,8091cc <strstr+0x634>
  80915c:	d8800017 	ldw	r2,0(sp)
  809160:	8829883a 	mov	r20,r17
  809164:	b8af883a 	add	r23,r23,r2
  809168:	80b9c83a 	sub	fp,r16,r2
  80916c:	003f7006 	br	808f30 <strstr+0x398>
  809170:	3545c83a 	sub	r2,r6,r21
  809174:	10800044 	addi	r2,r2,1
  809178:	b8af883a 	add	r23,r23,r2
  80917c:	0039883a 	mov	fp,zero
  809180:	8829883a 	mov	r20,r17
  809184:	003f6a06 	br	808f30 <strstr+0x398>
  809188:	24c5c83a 	sub	r2,r4,r19
  80918c:	10800044 	addi	r2,r2,1
  809190:	a8ab883a 	add	r21,r21,r2
  809194:	8829883a 	mov	r20,r17
  809198:	003ecd06 	br	808cd0 <strstr+0x138>
  80919c:	2545c83a 	sub	r2,r4,r21
  8091a0:	10800044 	addi	r2,r2,1
  8091a4:	b8af883a 	add	r23,r23,r2
  8091a8:	003fe806 	br	80914c <strstr+0x5b4>
  8091ac:	d8800017 	ldw	r2,0(sp)
  8091b0:	8829883a 	mov	r20,r17
  8091b4:	a8ab883a 	add	r21,r21,r2
  8091b8:	003ec506 	br	808cd0 <strstr+0x138>
  8091bc:	d8800017 	ldw	r2,0(sp)
  8091c0:	8829883a 	mov	r20,r17
  8091c4:	b8af883a 	add	r23,r23,r2
  8091c8:	003f1b06 	br	808e38 <strstr+0x2a0>
  8091cc:	95e5883a 	add	r18,r18,r23
  8091d0:	003e9306 	br	808c20 <strstr+0x88>
  8091d4:	00800044 	movi	r2,1
  8091d8:	a8ab883a 	add	r21,r21,r2
  8091dc:	003fed06 	br	809194 <strstr+0x5fc>
  8091e0:	ac91883a 	add	r8,r21,r18
  8091e4:	4025883a 	mov	r18,r8
  8091e8:	003e8d06 	br	808c20 <strstr+0x88>
  8091ec:	bc91883a 	add	r8,r23,r18
  8091f0:	4025883a 	mov	r18,r8
  8091f4:	003e8a06 	br	808c20 <strstr+0x88>

008091f8 <strtok>:
  8091f8:	00802174 	movhi	r2,133
  8091fc:	10828104 	addi	r2,r2,2564
  809200:	11800017 	ldw	r6,0(r2)
  809204:	01c00044 	movi	r7,1
  809208:	31801704 	addi	r6,r6,92
  80920c:	08092101 	jmpi	809210 <__strtok_r>

00809210 <__strtok_r>:
  809210:	20002426 	beq	r4,zero,8092a4 <__strtok_r+0x94>
  809214:	22000007 	ldb	r8,0(r4)
  809218:	21000044 	addi	r4,r4,1
  80921c:	2807883a 	mov	r3,r5
  809220:	3812c03a 	cmpne	r9,r7,zero
  809224:	22bfffc4 	addi	r10,r4,-1
  809228:	18800007 	ldb	r2,0(r3)
  80922c:	18c00044 	addi	r3,r3,1
  809230:	10000626 	beq	r2,zero,80924c <__strtok_r+0x3c>
  809234:	40bffc1e 	bne	r8,r2,809228 <__strtok_r+0x18>
  809238:	483ff61e 	bne	r9,zero,809214 <__strtok_r+0x4>
  80923c:	31000015 	stw	r4,0(r6)
  809240:	5005883a 	mov	r2,r10
  809244:	203fffc5 	stb	zero,-1(r4)
  809248:	f800283a 	ret
  80924c:	2013883a 	mov	r9,r4
  809250:	40001226 	beq	r8,zero,80929c <__strtok_r+0x8c>
  809254:	21c00007 	ldb	r7,0(r4)
  809258:	2807883a 	mov	r3,r5
  80925c:	21000044 	addi	r4,r4,1
  809260:	4a3fffc4 	addi	r8,r9,-1
  809264:	00000106 	br	80926c <__strtok_r+0x5c>
  809268:	103ffa26 	beq	r2,zero,809254 <__strtok_r+0x44>
  80926c:	18800007 	ldb	r2,0(r3)
  809270:	18c00044 	addi	r3,r3,1
  809274:	38bffc1e 	bne	r7,r2,809268 <__strtok_r+0x58>
  809278:	1000041e 	bne	r2,zero,80928c <__strtok_r+0x7c>
  80927c:	0009883a 	mov	r4,zero
  809280:	4005883a 	mov	r2,r8
  809284:	31000015 	stw	r4,0(r6)
  809288:	f800283a 	ret
  80928c:	203fffc5 	stb	zero,-1(r4)
  809290:	4005883a 	mov	r2,r8
  809294:	31000015 	stw	r4,0(r6)
  809298:	f800283a 	ret
  80929c:	30000015 	stw	zero,0(r6)
  8092a0:	f800283a 	ret
  8092a4:	31000017 	ldw	r4,0(r6)
  8092a8:	203fda1e 	bne	r4,zero,809214 <__strtok_r+0x4>
  8092ac:	0005883a 	mov	r2,zero
  8092b0:	f800283a 	ret

008092b4 <strtok_r>:
  8092b4:	01c00044 	movi	r7,1
  8092b8:	08092101 	jmpi	809210 <__strtok_r>

008092bc <_strtol_r>:
  8092bc:	defff304 	addi	sp,sp,-52
  8092c0:	00802174 	movhi	r2,133
  8092c4:	10828004 	addi	r2,r2,2560
  8092c8:	dcc00615 	stw	r19,24(sp)
  8092cc:	14c00017 	ldw	r19,0(r2)
  8092d0:	ddc00a15 	stw	r23,40(sp)
  8092d4:	dc000315 	stw	r16,12(sp)
  8092d8:	dfc00c15 	stw	ra,48(sp)
  8092dc:	df000b15 	stw	fp,44(sp)
  8092e0:	dd800915 	stw	r22,36(sp)
  8092e4:	dd400815 	stw	r21,32(sp)
  8092e8:	dd000715 	stw	r20,28(sp)
  8092ec:	dc800515 	stw	r18,20(sp)
  8092f0:	dc400415 	stw	r17,16(sp)
  8092f4:	282f883a 	mov	r23,r5
  8092f8:	d9000015 	stw	r4,0(sp)
  8092fc:	d9800115 	stw	r6,4(sp)
  809300:	2821883a 	mov	r16,r5
  809304:	84400007 	ldb	r17,0(r16)
  809308:	84000044 	addi	r16,r16,1
  80930c:	9c47883a 	add	r3,r19,r17
  809310:	18800003 	ldbu	r2,0(r3)
  809314:	1080020c 	andi	r2,r2,8
  809318:	103ffa1e 	bne	r2,zero,809304 <_strtol_r+0x48>
  80931c:	00800b44 	movi	r2,45
  809320:	88805c26 	beq	r17,r2,809494 <_strtol_r+0x1d8>
  809324:	00800ac4 	movi	r2,43
  809328:	88805726 	beq	r17,r2,809488 <_strtol_r+0x1cc>
  80932c:	0039883a 	mov	fp,zero
  809330:	3807003a 	cmpeq	r3,r7,zero
  809334:	1800431e 	bne	r3,zero,809444 <_strtol_r+0x188>
  809338:	00800404 	movi	r2,16
  80933c:	38804126 	beq	r7,r2,809444 <_strtol_r+0x188>
  809340:	3829883a 	mov	r20,r7
  809344:	e02cc03a 	cmpne	r22,fp,zero
  809348:	b0004b1e 	bne	r22,zero,809478 <_strtol_r+0x1bc>
  80934c:	04a00034 	movhi	r18,32768
  809350:	94bfffc4 	addi	r18,r18,-1
  809354:	9009883a 	mov	r4,r18
  809358:	a00b883a 	mov	r5,r20
  80935c:	d9c00215 	stw	r7,8(sp)
  809360:	08053c00 	call	8053c0 <__umodsi3>
  809364:	9009883a 	mov	r4,r18
  809368:	a00b883a 	mov	r5,r20
  80936c:	102b883a 	mov	r21,r2
  809370:	08053b80 	call	8053b8 <__udivsi3>
  809374:	1011883a 	mov	r8,r2
  809378:	9c45883a 	add	r2,r19,r17
  80937c:	11000003 	ldbu	r4,0(r2)
  809380:	000b883a 	mov	r5,zero
  809384:	000d883a 	mov	r6,zero
  809388:	20c0010c 	andi	r3,r4,4
  80938c:	d9c00217 	ldw	r7,8(sp)
  809390:	18000e26 	beq	r3,zero,8093cc <_strtol_r+0x110>
  809394:	88fff404 	addi	r3,r17,-48
  809398:	19c0140e 	bge	r3,r7,8093ec <_strtol_r+0x130>
  80939c:	30003116 	blt	r6,zero,809464 <_strtol_r+0x1a8>
  8093a0:	41403036 	bltu	r8,r5,809464 <_strtol_r+0x1a8>
  8093a4:	2a002e26 	beq	r5,r8,809460 <_strtol_r+0x1a4>
  8093a8:	2d05383a 	mul	r2,r5,r20
  8093ac:	01800044 	movi	r6,1
  8093b0:	10cb883a 	add	r5,r2,r3
  8093b4:	84400007 	ldb	r17,0(r16)
  8093b8:	84000044 	addi	r16,r16,1
  8093bc:	9c45883a 	add	r2,r19,r17
  8093c0:	11000003 	ldbu	r4,0(r2)
  8093c4:	20c0010c 	andi	r3,r4,4
  8093c8:	183ff21e 	bne	r3,zero,809394 <_strtol_r+0xd8>
  8093cc:	208000cc 	andi	r2,r4,3
  8093d0:	10000626 	beq	r2,zero,8093ec <_strtol_r+0x130>
  8093d4:	2080004c 	andi	r2,r4,1
  8093d8:	1005003a 	cmpeq	r2,r2,zero
  8093dc:	1000231e 	bne	r2,zero,80946c <_strtol_r+0x1b0>
  8093e0:	00800dc4 	movi	r2,55
  8093e4:	8887c83a 	sub	r3,r17,r2
  8093e8:	19ffec16 	blt	r3,r7,80939c <_strtol_r+0xe0>
  8093ec:	30002d16 	blt	r6,zero,8094a4 <_strtol_r+0x1e8>
  8093f0:	b000231e 	bne	r22,zero,809480 <_strtol_r+0x1c4>
  8093f4:	2807883a 	mov	r3,r5
  8093f8:	d8800117 	ldw	r2,4(sp)
  8093fc:	10000426 	beq	r2,zero,809410 <_strtol_r+0x154>
  809400:	30000126 	beq	r6,zero,809408 <_strtol_r+0x14c>
  809404:	85ffffc4 	addi	r23,r16,-1
  809408:	d9000117 	ldw	r4,4(sp)
  80940c:	25c00015 	stw	r23,0(r4)
  809410:	1805883a 	mov	r2,r3
  809414:	dfc00c17 	ldw	ra,48(sp)
  809418:	df000b17 	ldw	fp,44(sp)
  80941c:	ddc00a17 	ldw	r23,40(sp)
  809420:	dd800917 	ldw	r22,36(sp)
  809424:	dd400817 	ldw	r21,32(sp)
  809428:	dd000717 	ldw	r20,28(sp)
  80942c:	dcc00617 	ldw	r19,24(sp)
  809430:	dc800517 	ldw	r18,20(sp)
  809434:	dc400417 	ldw	r17,16(sp)
  809438:	dc000317 	ldw	r16,12(sp)
  80943c:	dec00d04 	addi	sp,sp,52
  809440:	f800283a 	ret
  809444:	00800c04 	movi	r2,48
  809448:	88801d26 	beq	r17,r2,8094c0 <_strtol_r+0x204>
  80944c:	183fbc26 	beq	r3,zero,809340 <_strtol_r+0x84>
  809450:	00800c04 	movi	r2,48
  809454:	88802726 	beq	r17,r2,8094f4 <_strtol_r+0x238>
  809458:	01c00284 	movi	r7,10
  80945c:	003fb806 	br	809340 <_strtol_r+0x84>
  809460:	a8ffd10e 	bge	r21,r3,8093a8 <_strtol_r+0xec>
  809464:	01bfffc4 	movi	r6,-1
  809468:	003fd206 	br	8093b4 <_strtol_r+0xf8>
  80946c:	008015c4 	movi	r2,87
  809470:	8887c83a 	sub	r3,r17,r2
  809474:	003fdc06 	br	8093e8 <_strtol_r+0x12c>
  809478:	04a00034 	movhi	r18,32768
  80947c:	003fb506 	br	809354 <_strtol_r+0x98>
  809480:	0147c83a 	sub	r3,zero,r5
  809484:	003fdc06 	br	8093f8 <_strtol_r+0x13c>
  809488:	84400007 	ldb	r17,0(r16)
  80948c:	84000044 	addi	r16,r16,1
  809490:	003fa606 	br	80932c <_strtol_r+0x70>
  809494:	84400007 	ldb	r17,0(r16)
  809498:	07000044 	movi	fp,1
  80949c:	84000044 	addi	r16,r16,1
  8094a0:	003fa306 	br	809330 <_strtol_r+0x74>
  8094a4:	e005003a 	cmpeq	r2,fp,zero
  8094a8:	10000f1e 	bne	r2,zero,8094e8 <_strtol_r+0x22c>
  8094ac:	00e00034 	movhi	r3,32768
  8094b0:	d9000017 	ldw	r4,0(sp)
  8094b4:	00800884 	movi	r2,34
  8094b8:	20800015 	stw	r2,0(r4)
  8094bc:	003fce06 	br	8093f8 <_strtol_r+0x13c>
  8094c0:	81000007 	ldb	r4,0(r16)
  8094c4:	00801e04 	movi	r2,120
  8094c8:	20800226 	beq	r4,r2,8094d4 <_strtol_r+0x218>
  8094cc:	00801604 	movi	r2,88
  8094d0:	20bfde1e 	bne	r4,r2,80944c <_strtol_r+0x190>
  8094d4:	84400047 	ldb	r17,1(r16)
  8094d8:	01c00404 	movi	r7,16
  8094dc:	84000084 	addi	r16,r16,2
  8094e0:	3829883a 	mov	r20,r7
  8094e4:	003f9706 	br	809344 <_strtol_r+0x88>
  8094e8:	00e00034 	movhi	r3,32768
  8094ec:	18ffffc4 	addi	r3,r3,-1
  8094f0:	003fef06 	br	8094b0 <_strtol_r+0x1f4>
  8094f4:	01c00204 	movi	r7,8
  8094f8:	3829883a 	mov	r20,r7
  8094fc:	003f9106 	br	809344 <_strtol_r+0x88>

00809500 <strtol>:
  809500:	00802174 	movhi	r2,133
  809504:	10828104 	addi	r2,r2,2564
  809508:	2013883a 	mov	r9,r4
  80950c:	11000017 	ldw	r4,0(r2)
  809510:	2805883a 	mov	r2,r5
  809514:	300f883a 	mov	r7,r6
  809518:	480b883a 	mov	r5,r9
  80951c:	100d883a 	mov	r6,r2
  809520:	08092bc1 	jmpi	8092bc <_strtol_r>

00809524 <_user_strerror>:
  809524:	0005883a 	mov	r2,zero
  809528:	f800283a 	ret

0080952c <__sprint_r>:
  80952c:	30800217 	ldw	r2,8(r6)
  809530:	defffe04 	addi	sp,sp,-8
  809534:	dc000015 	stw	r16,0(sp)
  809538:	dfc00115 	stw	ra,4(sp)
  80953c:	3021883a 	mov	r16,r6
  809540:	0007883a 	mov	r3,zero
  809544:	1000061e 	bne	r2,zero,809560 <__sprint_r+0x34>
  809548:	1805883a 	mov	r2,r3
  80954c:	30000115 	stw	zero,4(r6)
  809550:	dfc00117 	ldw	ra,4(sp)
  809554:	dc000017 	ldw	r16,0(sp)
  809558:	dec00204 	addi	sp,sp,8
  80955c:	f800283a 	ret
  809560:	080e7b00 	call	80e7b0 <__sfvwrite_r>
  809564:	1007883a 	mov	r3,r2
  809568:	1805883a 	mov	r2,r3
  80956c:	80000115 	stw	zero,4(r16)
  809570:	80000215 	stw	zero,8(r16)
  809574:	dfc00117 	ldw	ra,4(sp)
  809578:	dc000017 	ldw	r16,0(sp)
  80957c:	dec00204 	addi	sp,sp,8
  809580:	f800283a 	ret

00809584 <___vfprintf_internal_r>:
  809584:	defea404 	addi	sp,sp,-1392
  809588:	dd815815 	stw	r22,1376(sp)
  80958c:	dc015215 	stw	r16,1352(sp)
  809590:	d9c15115 	stw	r7,1348(sp)
  809594:	dfc15b15 	stw	ra,1388(sp)
  809598:	df015a15 	stw	fp,1384(sp)
  80959c:	ddc15915 	stw	r23,1380(sp)
  8095a0:	dd415715 	stw	r21,1372(sp)
  8095a4:	dd015615 	stw	r20,1368(sp)
  8095a8:	dcc15515 	stw	r19,1364(sp)
  8095ac:	dc815415 	stw	r18,1360(sp)
  8095b0:	dc415315 	stw	r17,1356(sp)
  8095b4:	282d883a 	mov	r22,r5
  8095b8:	3021883a 	mov	r16,r6
  8095bc:	d9014f15 	stw	r4,1340(sp)
  8095c0:	080ecf00 	call	80ecf0 <_localeconv_r>
  8095c4:	10800017 	ldw	r2,0(r2)
  8095c8:	d9c15117 	ldw	r7,1348(sp)
  8095cc:	d8814915 	stw	r2,1316(sp)
  8095d0:	d8814f17 	ldw	r2,1340(sp)
  8095d4:	10000226 	beq	r2,zero,8095e0 <___vfprintf_internal_r+0x5c>
  8095d8:	10800e17 	ldw	r2,56(r2)
  8095dc:	10020d26 	beq	r2,zero,809e14 <___vfprintf_internal_r+0x890>
  8095e0:	b080030b 	ldhu	r2,12(r22)
  8095e4:	1080020c 	andi	r2,r2,8
  8095e8:	10020e26 	beq	r2,zero,809e24 <___vfprintf_internal_r+0x8a0>
  8095ec:	b0800417 	ldw	r2,16(r22)
  8095f0:	10020c26 	beq	r2,zero,809e24 <___vfprintf_internal_r+0x8a0>
  8095f4:	b200030b 	ldhu	r8,12(r22)
  8095f8:	00800284 	movi	r2,10
  8095fc:	40c0068c 	andi	r3,r8,26
  809600:	18802f1e 	bne	r3,r2,8096c0 <___vfprintf_internal_r+0x13c>
  809604:	b080038f 	ldh	r2,14(r22)
  809608:	10002d16 	blt	r2,zero,8096c0 <___vfprintf_internal_r+0x13c>
  80960c:	b240038b 	ldhu	r9,14(r22)
  809610:	b2800717 	ldw	r10,28(r22)
  809614:	b2c00917 	ldw	r11,36(r22)
  809618:	d9014f17 	ldw	r4,1340(sp)
  80961c:	dc402904 	addi	r17,sp,164
  809620:	d8804004 	addi	r2,sp,256
  809624:	00c10004 	movi	r3,1024
  809628:	423fff4c 	andi	r8,r8,65533
  80962c:	800d883a 	mov	r6,r16
  809630:	880b883a 	mov	r5,r17
  809634:	da002c0d 	sth	r8,176(sp)
  809638:	da402c8d 	sth	r9,178(sp)
  80963c:	da803015 	stw	r10,192(sp)
  809640:	dac03215 	stw	r11,200(sp)
  809644:	d8802d15 	stw	r2,180(sp)
  809648:	d8c02e15 	stw	r3,184(sp)
  80964c:	d8802915 	stw	r2,164(sp)
  809650:	d8c02b15 	stw	r3,172(sp)
  809654:	d8002f15 	stw	zero,188(sp)
  809658:	08095840 	call	809584 <___vfprintf_internal_r>
  80965c:	d8814b15 	stw	r2,1324(sp)
  809660:	10000416 	blt	r2,zero,809674 <___vfprintf_internal_r+0xf0>
  809664:	d9014f17 	ldw	r4,1340(sp)
  809668:	880b883a 	mov	r5,r17
  80966c:	08055040 	call	805504 <_fflush_r>
  809670:	1002321e 	bne	r2,zero,809f3c <___vfprintf_internal_r+0x9b8>
  809674:	d8802c0b 	ldhu	r2,176(sp)
  809678:	1080100c 	andi	r2,r2,64
  80967c:	10000326 	beq	r2,zero,80968c <___vfprintf_internal_r+0x108>
  809680:	b080030b 	ldhu	r2,12(r22)
  809684:	10801014 	ori	r2,r2,64
  809688:	b080030d 	sth	r2,12(r22)
  80968c:	d8814b17 	ldw	r2,1324(sp)
  809690:	dfc15b17 	ldw	ra,1388(sp)
  809694:	df015a17 	ldw	fp,1384(sp)
  809698:	ddc15917 	ldw	r23,1380(sp)
  80969c:	dd815817 	ldw	r22,1376(sp)
  8096a0:	dd415717 	ldw	r21,1372(sp)
  8096a4:	dd015617 	ldw	r20,1368(sp)
  8096a8:	dcc15517 	ldw	r19,1364(sp)
  8096ac:	dc815417 	ldw	r18,1360(sp)
  8096b0:	dc415317 	ldw	r17,1356(sp)
  8096b4:	dc015217 	ldw	r16,1352(sp)
  8096b8:	dec15c04 	addi	sp,sp,1392
  8096bc:	f800283a 	ret
  8096c0:	0005883a 	mov	r2,zero
  8096c4:	0007883a 	mov	r3,zero
  8096c8:	dd401904 	addi	r21,sp,100
  8096cc:	d8814215 	stw	r2,1288(sp)
  8096d0:	802f883a 	mov	r23,r16
  8096d4:	d8c14315 	stw	r3,1292(sp)
  8096d8:	d8014b15 	stw	zero,1324(sp)
  8096dc:	d8014815 	stw	zero,1312(sp)
  8096e0:	d8014415 	stw	zero,1296(sp)
  8096e4:	d8014715 	stw	zero,1308(sp)
  8096e8:	dd400c15 	stw	r21,48(sp)
  8096ec:	d8000e15 	stw	zero,56(sp)
  8096f0:	d8000d15 	stw	zero,52(sp)
  8096f4:	b8800007 	ldb	r2,0(r23)
  8096f8:	10001926 	beq	r2,zero,809760 <___vfprintf_internal_r+0x1dc>
  8096fc:	00c00944 	movi	r3,37
  809700:	10c01726 	beq	r2,r3,809760 <___vfprintf_internal_r+0x1dc>
  809704:	b821883a 	mov	r16,r23
  809708:	00000106 	br	809710 <___vfprintf_internal_r+0x18c>
  80970c:	10c00326 	beq	r2,r3,80971c <___vfprintf_internal_r+0x198>
  809710:	84000044 	addi	r16,r16,1
  809714:	80800007 	ldb	r2,0(r16)
  809718:	103ffc1e 	bne	r2,zero,80970c <___vfprintf_internal_r+0x188>
  80971c:	85e7c83a 	sub	r19,r16,r23
  809720:	98000e26 	beq	r19,zero,80975c <___vfprintf_internal_r+0x1d8>
  809724:	dc800e17 	ldw	r18,56(sp)
  809728:	dc400d17 	ldw	r17,52(sp)
  80972c:	008001c4 	movi	r2,7
  809730:	94e5883a 	add	r18,r18,r19
  809734:	8c400044 	addi	r17,r17,1
  809738:	adc00015 	stw	r23,0(r21)
  80973c:	dc800e15 	stw	r18,56(sp)
  809740:	acc00115 	stw	r19,4(r21)
  809744:	dc400d15 	stw	r17,52(sp)
  809748:	14428b16 	blt	r2,r17,80a178 <___vfprintf_internal_r+0xbf4>
  80974c:	ad400204 	addi	r21,r21,8
  809750:	d9014b17 	ldw	r4,1324(sp)
  809754:	24c9883a 	add	r4,r4,r19
  809758:	d9014b15 	stw	r4,1324(sp)
  80975c:	802f883a 	mov	r23,r16
  809760:	b8800007 	ldb	r2,0(r23)
  809764:	10013c26 	beq	r2,zero,809c58 <___vfprintf_internal_r+0x6d4>
  809768:	bdc00044 	addi	r23,r23,1
  80976c:	d8000405 	stb	zero,16(sp)
  809770:	b8c00007 	ldb	r3,0(r23)
  809774:	04ffffc4 	movi	r19,-1
  809778:	d8014c15 	stw	zero,1328(sp)
  80977c:	d8014a15 	stw	zero,1320(sp)
  809780:	d8c14d15 	stw	r3,1332(sp)
  809784:	bdc00044 	addi	r23,r23,1
  809788:	d9414d17 	ldw	r5,1332(sp)
  80978c:	00801604 	movi	r2,88
  809790:	28fff804 	addi	r3,r5,-32
  809794:	10c06036 	bltu	r2,r3,809918 <___vfprintf_internal_r+0x394>
  809798:	18c5883a 	add	r2,r3,r3
  80979c:	1085883a 	add	r2,r2,r2
  8097a0:	00c02074 	movhi	r3,129
  8097a4:	18e5ed04 	addi	r3,r3,-26700
  8097a8:	10c5883a 	add	r2,r2,r3
  8097ac:	11000017 	ldw	r4,0(r2)
  8097b0:	2000683a 	jmp	r4
  8097b4:	0080a728 	cmpgeui	r2,zero,668
  8097b8:	00809918 	cmpnei	r2,zero,612
  8097bc:	00809918 	cmpnei	r2,zero,612
  8097c0:	0080a714 	movui	r2,668
  8097c4:	00809918 	cmpnei	r2,zero,612
  8097c8:	00809918 	cmpnei	r2,zero,612
  8097cc:	00809918 	cmpnei	r2,zero,612
  8097d0:	00809918 	cmpnei	r2,zero,612
  8097d4:	00809918 	cmpnei	r2,zero,612
  8097d8:	00809918 	cmpnei	r2,zero,612
  8097dc:	0080a4f4 	movhi	r2,659
  8097e0:	0080a704 	movi	r2,668
  8097e4:	00809918 	cmpnei	r2,zero,612
  8097e8:	0080a50c 	andi	r2,zero,660
  8097ec:	0080a7a0 	cmpeqi	r2,zero,670
  8097f0:	00809918 	cmpnei	r2,zero,612
  8097f4:	0080a78c 	andi	r2,zero,670
  8097f8:	0080a754 	movui	r2,669
  8097fc:	0080a754 	movui	r2,669
  809800:	0080a754 	movui	r2,669
  809804:	0080a754 	movui	r2,669
  809808:	0080a754 	movui	r2,669
  80980c:	0080a754 	movui	r2,669
  809810:	0080a754 	movui	r2,669
  809814:	0080a754 	movui	r2,669
  809818:	0080a754 	movui	r2,669
  80981c:	00809918 	cmpnei	r2,zero,612
  809820:	00809918 	cmpnei	r2,zero,612
  809824:	00809918 	cmpnei	r2,zero,612
  809828:	00809918 	cmpnei	r2,zero,612
  80982c:	00809918 	cmpnei	r2,zero,612
  809830:	00809918 	cmpnei	r2,zero,612
  809834:	00809918 	cmpnei	r2,zero,612
  809838:	00809918 	cmpnei	r2,zero,612
  80983c:	00809918 	cmpnei	r2,zero,612
  809840:	00809918 	cmpnei	r2,zero,612
  809844:	00809f70 	cmpltui	r2,zero,637
  809848:	0080a5dc 	xori	r2,zero,663
  80984c:	00809918 	cmpnei	r2,zero,612
  809850:	0080a5dc 	xori	r2,zero,663
  809854:	00809918 	cmpnei	r2,zero,612
  809858:	00809918 	cmpnei	r2,zero,612
  80985c:	00809918 	cmpnei	r2,zero,612
  809860:	00809918 	cmpnei	r2,zero,612
  809864:	0080a740 	call	80a74 <OSCtxSw_SWITCH_PC+0x80a34>
  809868:	00809918 	cmpnei	r2,zero,612
  80986c:	00809918 	cmpnei	r2,zero,612
  809870:	0080a024 	muli	r2,zero,640
  809874:	00809918 	cmpnei	r2,zero,612
  809878:	00809918 	cmpnei	r2,zero,612
  80987c:	00809918 	cmpnei	r2,zero,612
  809880:	00809918 	cmpnei	r2,zero,612
  809884:	00809918 	cmpnei	r2,zero,612
  809888:	0080a070 	cmpltui	r2,zero,641
  80988c:	00809918 	cmpnei	r2,zero,612
  809890:	00809918 	cmpnei	r2,zero,612
  809894:	0080a690 	cmplti	r2,zero,666
  809898:	00809918 	cmpnei	r2,zero,612
  80989c:	00809918 	cmpnei	r2,zero,612
  8098a0:	00809918 	cmpnei	r2,zero,612
  8098a4:	00809918 	cmpnei	r2,zero,612
  8098a8:	00809918 	cmpnei	r2,zero,612
  8098ac:	00809918 	cmpnei	r2,zero,612
  8098b0:	00809918 	cmpnei	r2,zero,612
  8098b4:	00809918 	cmpnei	r2,zero,612
  8098b8:	00809918 	cmpnei	r2,zero,612
  8098bc:	00809918 	cmpnei	r2,zero,612
  8098c0:	0080a664 	muli	r2,zero,665
  8098c4:	00809f7c 	xorhi	r2,zero,637
  8098c8:	0080a5dc 	xori	r2,zero,663
  8098cc:	0080a5dc 	xori	r2,zero,663
  8098d0:	0080a5dc 	xori	r2,zero,663
  8098d4:	0080a5c8 	cmpgei	r2,zero,663
  8098d8:	00809f7c 	xorhi	r2,zero,637
  8098dc:	00809918 	cmpnei	r2,zero,612
  8098e0:	00809918 	cmpnei	r2,zero,612
  8098e4:	0080a550 	cmplti	r2,zero,661
  8098e8:	00809918 	cmpnei	r2,zero,612
  8098ec:	0080a520 	cmpeqi	r2,zero,660
  8098f0:	0080a030 	cmpltui	r2,zero,640
  8098f4:	0080a580 	call	80a58 <OSCtxSw_SWITCH_PC+0x80a18>
  8098f8:	0080a56c 	andhi	r2,zero,661
  8098fc:	00809918 	cmpnei	r2,zero,612
  809900:	0080a7fc 	xorhi	r2,zero,671
  809904:	00809918 	cmpnei	r2,zero,612
  809908:	0080a07c 	xorhi	r2,zero,641
  80990c:	00809918 	cmpnei	r2,zero,612
  809910:	00809918 	cmpnei	r2,zero,612
  809914:	0080a6f4 	movhi	r2,667
  809918:	d9014d17 	ldw	r4,1332(sp)
  80991c:	2000ce26 	beq	r4,zero,809c58 <___vfprintf_internal_r+0x6d4>
  809920:	01400044 	movi	r5,1
  809924:	d9800f04 	addi	r6,sp,60
  809928:	d9c14015 	stw	r7,1280(sp)
  80992c:	d9414515 	stw	r5,1300(sp)
  809930:	d9814115 	stw	r6,1284(sp)
  809934:	280f883a 	mov	r7,r5
  809938:	d9000f05 	stb	r4,60(sp)
  80993c:	d8000405 	stb	zero,16(sp)
  809940:	d8014615 	stw	zero,1304(sp)
  809944:	d8c14c17 	ldw	r3,1328(sp)
  809948:	1880008c 	andi	r2,r3,2
  80994c:	1005003a 	cmpeq	r2,r2,zero
  809950:	d8815015 	stw	r2,1344(sp)
  809954:	1000031e 	bne	r2,zero,809964 <___vfprintf_internal_r+0x3e0>
  809958:	d9014517 	ldw	r4,1300(sp)
  80995c:	21000084 	addi	r4,r4,2
  809960:	d9014515 	stw	r4,1300(sp)
  809964:	d9414c17 	ldw	r5,1328(sp)
  809968:	2940210c 	andi	r5,r5,132
  80996c:	d9414e15 	stw	r5,1336(sp)
  809970:	28002d1e 	bne	r5,zero,809a28 <___vfprintf_internal_r+0x4a4>
  809974:	d9814a17 	ldw	r6,1320(sp)
  809978:	d8814517 	ldw	r2,1300(sp)
  80997c:	30a1c83a 	sub	r16,r6,r2
  809980:	0400290e 	bge	zero,r16,809a28 <___vfprintf_internal_r+0x4a4>
  809984:	00800404 	movi	r2,16
  809988:	1404580e 	bge	r2,r16,80aaec <___vfprintf_internal_r+0x1568>
  80998c:	dc800e17 	ldw	r18,56(sp)
  809990:	dc400d17 	ldw	r17,52(sp)
  809994:	1027883a 	mov	r19,r2
  809998:	07002174 	movhi	fp,133
  80999c:	e731de84 	addi	fp,fp,-14470
  8099a0:	050001c4 	movi	r20,7
  8099a4:	00000306 	br	8099b4 <___vfprintf_internal_r+0x430>
  8099a8:	843ffc04 	addi	r16,r16,-16
  8099ac:	ad400204 	addi	r21,r21,8
  8099b0:	9c00130e 	bge	r19,r16,809a00 <___vfprintf_internal_r+0x47c>
  8099b4:	94800404 	addi	r18,r18,16
  8099b8:	8c400044 	addi	r17,r17,1
  8099bc:	af000015 	stw	fp,0(r21)
  8099c0:	acc00115 	stw	r19,4(r21)
  8099c4:	dc800e15 	stw	r18,56(sp)
  8099c8:	dc400d15 	stw	r17,52(sp)
  8099cc:	a47ff60e 	bge	r20,r17,8099a8 <___vfprintf_internal_r+0x424>
  8099d0:	d9014f17 	ldw	r4,1340(sp)
  8099d4:	b00b883a 	mov	r5,r22
  8099d8:	d9800c04 	addi	r6,sp,48
  8099dc:	d9c15115 	stw	r7,1348(sp)
  8099e0:	080952c0 	call	80952c <__sprint_r>
  8099e4:	d9c15117 	ldw	r7,1348(sp)
  8099e8:	10009e1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  8099ec:	843ffc04 	addi	r16,r16,-16
  8099f0:	dc800e17 	ldw	r18,56(sp)
  8099f4:	dc400d17 	ldw	r17,52(sp)
  8099f8:	dd401904 	addi	r21,sp,100
  8099fc:	9c3fed16 	blt	r19,r16,8099b4 <___vfprintf_internal_r+0x430>
  809a00:	9425883a 	add	r18,r18,r16
  809a04:	8c400044 	addi	r17,r17,1
  809a08:	008001c4 	movi	r2,7
  809a0c:	af000015 	stw	fp,0(r21)
  809a10:	ac000115 	stw	r16,4(r21)
  809a14:	dc800e15 	stw	r18,56(sp)
  809a18:	dc400d15 	stw	r17,52(sp)
  809a1c:	1441f516 	blt	r2,r17,80a1f4 <___vfprintf_internal_r+0xc70>
  809a20:	ad400204 	addi	r21,r21,8
  809a24:	00000206 	br	809a30 <___vfprintf_internal_r+0x4ac>
  809a28:	dc800e17 	ldw	r18,56(sp)
  809a2c:	dc400d17 	ldw	r17,52(sp)
  809a30:	d8800407 	ldb	r2,16(sp)
  809a34:	10000b26 	beq	r2,zero,809a64 <___vfprintf_internal_r+0x4e0>
  809a38:	00800044 	movi	r2,1
  809a3c:	94800044 	addi	r18,r18,1
  809a40:	8c400044 	addi	r17,r17,1
  809a44:	a8800115 	stw	r2,4(r21)
  809a48:	d8c00404 	addi	r3,sp,16
  809a4c:	008001c4 	movi	r2,7
  809a50:	a8c00015 	stw	r3,0(r21)
  809a54:	dc800e15 	stw	r18,56(sp)
  809a58:	dc400d15 	stw	r17,52(sp)
  809a5c:	1441da16 	blt	r2,r17,80a1c8 <___vfprintf_internal_r+0xc44>
  809a60:	ad400204 	addi	r21,r21,8
  809a64:	d9015017 	ldw	r4,1344(sp)
  809a68:	20000b1e 	bne	r4,zero,809a98 <___vfprintf_internal_r+0x514>
  809a6c:	d8800444 	addi	r2,sp,17
  809a70:	94800084 	addi	r18,r18,2
  809a74:	8c400044 	addi	r17,r17,1
  809a78:	a8800015 	stw	r2,0(r21)
  809a7c:	00c00084 	movi	r3,2
  809a80:	008001c4 	movi	r2,7
  809a84:	a8c00115 	stw	r3,4(r21)
  809a88:	dc800e15 	stw	r18,56(sp)
  809a8c:	dc400d15 	stw	r17,52(sp)
  809a90:	1441c216 	blt	r2,r17,80a19c <___vfprintf_internal_r+0xc18>
  809a94:	ad400204 	addi	r21,r21,8
  809a98:	d9414e17 	ldw	r5,1336(sp)
  809a9c:	00802004 	movi	r2,128
  809aa0:	2880b126 	beq	r5,r2,809d68 <___vfprintf_internal_r+0x7e4>
  809aa4:	d8c14617 	ldw	r3,1304(sp)
  809aa8:	19e1c83a 	sub	r16,r3,r7
  809aac:	0400260e 	bge	zero,r16,809b48 <___vfprintf_internal_r+0x5c4>
  809ab0:	00800404 	movi	r2,16
  809ab4:	1403c90e 	bge	r2,r16,80a9dc <___vfprintf_internal_r+0x1458>
  809ab8:	1027883a 	mov	r19,r2
  809abc:	07002174 	movhi	fp,133
  809ac0:	e731da84 	addi	fp,fp,-14486
  809ac4:	050001c4 	movi	r20,7
  809ac8:	00000306 	br	809ad8 <___vfprintf_internal_r+0x554>
  809acc:	843ffc04 	addi	r16,r16,-16
  809ad0:	ad400204 	addi	r21,r21,8
  809ad4:	9c00130e 	bge	r19,r16,809b24 <___vfprintf_internal_r+0x5a0>
  809ad8:	94800404 	addi	r18,r18,16
  809adc:	8c400044 	addi	r17,r17,1
  809ae0:	af000015 	stw	fp,0(r21)
  809ae4:	acc00115 	stw	r19,4(r21)
  809ae8:	dc800e15 	stw	r18,56(sp)
  809aec:	dc400d15 	stw	r17,52(sp)
  809af0:	a47ff60e 	bge	r20,r17,809acc <___vfprintf_internal_r+0x548>
  809af4:	d9014f17 	ldw	r4,1340(sp)
  809af8:	b00b883a 	mov	r5,r22
  809afc:	d9800c04 	addi	r6,sp,48
  809b00:	d9c15115 	stw	r7,1348(sp)
  809b04:	080952c0 	call	80952c <__sprint_r>
  809b08:	d9c15117 	ldw	r7,1348(sp)
  809b0c:	1000551e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  809b10:	843ffc04 	addi	r16,r16,-16
  809b14:	dc800e17 	ldw	r18,56(sp)
  809b18:	dc400d17 	ldw	r17,52(sp)
  809b1c:	dd401904 	addi	r21,sp,100
  809b20:	9c3fed16 	blt	r19,r16,809ad8 <___vfprintf_internal_r+0x554>
  809b24:	9425883a 	add	r18,r18,r16
  809b28:	8c400044 	addi	r17,r17,1
  809b2c:	008001c4 	movi	r2,7
  809b30:	af000015 	stw	fp,0(r21)
  809b34:	ac000115 	stw	r16,4(r21)
  809b38:	dc800e15 	stw	r18,56(sp)
  809b3c:	dc400d15 	stw	r17,52(sp)
  809b40:	14418216 	blt	r2,r17,80a14c <___vfprintf_internal_r+0xbc8>
  809b44:	ad400204 	addi	r21,r21,8
  809b48:	d9014c17 	ldw	r4,1328(sp)
  809b4c:	2080400c 	andi	r2,r4,256
  809b50:	10004a1e 	bne	r2,zero,809c7c <___vfprintf_internal_r+0x6f8>
  809b54:	d9414117 	ldw	r5,1284(sp)
  809b58:	91e5883a 	add	r18,r18,r7
  809b5c:	8c400044 	addi	r17,r17,1
  809b60:	008001c4 	movi	r2,7
  809b64:	a9400015 	stw	r5,0(r21)
  809b68:	a9c00115 	stw	r7,4(r21)
  809b6c:	dc800e15 	stw	r18,56(sp)
  809b70:	dc400d15 	stw	r17,52(sp)
  809b74:	14416716 	blt	r2,r17,80a114 <___vfprintf_internal_r+0xb90>
  809b78:	a8c00204 	addi	r3,r21,8
  809b7c:	d9814c17 	ldw	r6,1328(sp)
  809b80:	3080010c 	andi	r2,r6,4
  809b84:	10002826 	beq	r2,zero,809c28 <___vfprintf_internal_r+0x6a4>
  809b88:	d8814a17 	ldw	r2,1320(sp)
  809b8c:	d9014517 	ldw	r4,1300(sp)
  809b90:	1121c83a 	sub	r16,r2,r4
  809b94:	0400240e 	bge	zero,r16,809c28 <___vfprintf_internal_r+0x6a4>
  809b98:	00800404 	movi	r2,16
  809b9c:	14044f0e 	bge	r2,r16,80acdc <___vfprintf_internal_r+0x1758>
  809ba0:	dc400d17 	ldw	r17,52(sp)
  809ba4:	1027883a 	mov	r19,r2
  809ba8:	07002174 	movhi	fp,133
  809bac:	e731de84 	addi	fp,fp,-14470
  809bb0:	050001c4 	movi	r20,7
  809bb4:	00000306 	br	809bc4 <___vfprintf_internal_r+0x640>
  809bb8:	843ffc04 	addi	r16,r16,-16
  809bbc:	18c00204 	addi	r3,r3,8
  809bc0:	9c00110e 	bge	r19,r16,809c08 <___vfprintf_internal_r+0x684>
  809bc4:	94800404 	addi	r18,r18,16
  809bc8:	8c400044 	addi	r17,r17,1
  809bcc:	1f000015 	stw	fp,0(r3)
  809bd0:	1cc00115 	stw	r19,4(r3)
  809bd4:	dc800e15 	stw	r18,56(sp)
  809bd8:	dc400d15 	stw	r17,52(sp)
  809bdc:	a47ff60e 	bge	r20,r17,809bb8 <___vfprintf_internal_r+0x634>
  809be0:	d9014f17 	ldw	r4,1340(sp)
  809be4:	b00b883a 	mov	r5,r22
  809be8:	d9800c04 	addi	r6,sp,48
  809bec:	080952c0 	call	80952c <__sprint_r>
  809bf0:	10001c1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  809bf4:	843ffc04 	addi	r16,r16,-16
  809bf8:	dc800e17 	ldw	r18,56(sp)
  809bfc:	dc400d17 	ldw	r17,52(sp)
  809c00:	d8c01904 	addi	r3,sp,100
  809c04:	9c3fef16 	blt	r19,r16,809bc4 <___vfprintf_internal_r+0x640>
  809c08:	9425883a 	add	r18,r18,r16
  809c0c:	8c400044 	addi	r17,r17,1
  809c10:	008001c4 	movi	r2,7
  809c14:	1f000015 	stw	fp,0(r3)
  809c18:	1c000115 	stw	r16,4(r3)
  809c1c:	dc800e15 	stw	r18,56(sp)
  809c20:	dc400d15 	stw	r17,52(sp)
  809c24:	1440cb16 	blt	r2,r17,809f54 <___vfprintf_internal_r+0x9d0>
  809c28:	d8814a17 	ldw	r2,1320(sp)
  809c2c:	d9414517 	ldw	r5,1300(sp)
  809c30:	1140010e 	bge	r2,r5,809c38 <___vfprintf_internal_r+0x6b4>
  809c34:	2805883a 	mov	r2,r5
  809c38:	d9814b17 	ldw	r6,1324(sp)
  809c3c:	308d883a 	add	r6,r6,r2
  809c40:	d9814b15 	stw	r6,1324(sp)
  809c44:	90013b1e 	bne	r18,zero,80a134 <___vfprintf_internal_r+0xbb0>
  809c48:	d9c14017 	ldw	r7,1280(sp)
  809c4c:	dd401904 	addi	r21,sp,100
  809c50:	d8000d15 	stw	zero,52(sp)
  809c54:	003ea706 	br	8096f4 <___vfprintf_internal_r+0x170>
  809c58:	d8800e17 	ldw	r2,56(sp)
  809c5c:	10053f1e 	bne	r2,zero,80b15c <___vfprintf_internal_r+0x1bd8>
  809c60:	d8000d15 	stw	zero,52(sp)
  809c64:	b080030b 	ldhu	r2,12(r22)
  809c68:	1080100c 	andi	r2,r2,64
  809c6c:	103e8726 	beq	r2,zero,80968c <___vfprintf_internal_r+0x108>
  809c70:	00bfffc4 	movi	r2,-1
  809c74:	d8814b15 	stw	r2,1324(sp)
  809c78:	003e8406 	br	80968c <___vfprintf_internal_r+0x108>
  809c7c:	d9814d17 	ldw	r6,1332(sp)
  809c80:	00801944 	movi	r2,101
  809c84:	11806e16 	blt	r2,r6,809e40 <___vfprintf_internal_r+0x8bc>
  809c88:	d9414717 	ldw	r5,1308(sp)
  809c8c:	00c00044 	movi	r3,1
  809c90:	1943430e 	bge	r3,r5,80a9a0 <___vfprintf_internal_r+0x141c>
  809c94:	d8814117 	ldw	r2,1284(sp)
  809c98:	94800044 	addi	r18,r18,1
  809c9c:	8c400044 	addi	r17,r17,1
  809ca0:	a8800015 	stw	r2,0(r21)
  809ca4:	008001c4 	movi	r2,7
  809ca8:	a8c00115 	stw	r3,4(r21)
  809cac:	dc800e15 	stw	r18,56(sp)
  809cb0:	dc400d15 	stw	r17,52(sp)
  809cb4:	1441ca16 	blt	r2,r17,80a3e0 <___vfprintf_internal_r+0xe5c>
  809cb8:	a8c00204 	addi	r3,r21,8
  809cbc:	d9014917 	ldw	r4,1316(sp)
  809cc0:	00800044 	movi	r2,1
  809cc4:	94800044 	addi	r18,r18,1
  809cc8:	8c400044 	addi	r17,r17,1
  809ccc:	18800115 	stw	r2,4(r3)
  809cd0:	008001c4 	movi	r2,7
  809cd4:	19000015 	stw	r4,0(r3)
  809cd8:	dc800e15 	stw	r18,56(sp)
  809cdc:	dc400d15 	stw	r17,52(sp)
  809ce0:	1441b616 	blt	r2,r17,80a3bc <___vfprintf_internal_r+0xe38>
  809ce4:	1cc00204 	addi	r19,r3,8
  809ce8:	d9014217 	ldw	r4,1288(sp)
  809cec:	d9414317 	ldw	r5,1292(sp)
  809cf0:	000d883a 	mov	r6,zero
  809cf4:	000f883a 	mov	r7,zero
  809cf8:	08152bc0 	call	8152bc <__nedf2>
  809cfc:	10017426 	beq	r2,zero,80a2d0 <___vfprintf_internal_r+0xd4c>
  809d00:	d9414717 	ldw	r5,1308(sp)
  809d04:	d9814117 	ldw	r6,1284(sp)
  809d08:	8c400044 	addi	r17,r17,1
  809d0c:	2c85883a 	add	r2,r5,r18
  809d10:	14bfffc4 	addi	r18,r2,-1
  809d14:	28bfffc4 	addi	r2,r5,-1
  809d18:	30c00044 	addi	r3,r6,1
  809d1c:	98800115 	stw	r2,4(r19)
  809d20:	008001c4 	movi	r2,7
  809d24:	98c00015 	stw	r3,0(r19)
  809d28:	dc800e15 	stw	r18,56(sp)
  809d2c:	dc400d15 	stw	r17,52(sp)
  809d30:	14418e16 	blt	r2,r17,80a36c <___vfprintf_internal_r+0xde8>
  809d34:	9cc00204 	addi	r19,r19,8
  809d38:	d9414817 	ldw	r5,1312(sp)
  809d3c:	d8800804 	addi	r2,sp,32
  809d40:	8c400044 	addi	r17,r17,1
  809d44:	9165883a 	add	r18,r18,r5
  809d48:	98800015 	stw	r2,0(r19)
  809d4c:	008001c4 	movi	r2,7
  809d50:	99400115 	stw	r5,4(r19)
  809d54:	dc800e15 	stw	r18,56(sp)
  809d58:	dc400d15 	stw	r17,52(sp)
  809d5c:	1440ed16 	blt	r2,r17,80a114 <___vfprintf_internal_r+0xb90>
  809d60:	98c00204 	addi	r3,r19,8
  809d64:	003f8506 	br	809b7c <___vfprintf_internal_r+0x5f8>
  809d68:	d9814a17 	ldw	r6,1320(sp)
  809d6c:	d8814517 	ldw	r2,1300(sp)
  809d70:	30a1c83a 	sub	r16,r6,r2
  809d74:	043f4b0e 	bge	zero,r16,809aa4 <___vfprintf_internal_r+0x520>
  809d78:	00800404 	movi	r2,16
  809d7c:	1404340e 	bge	r2,r16,80ae50 <___vfprintf_internal_r+0x18cc>
  809d80:	1027883a 	mov	r19,r2
  809d84:	07002174 	movhi	fp,133
  809d88:	e731da84 	addi	fp,fp,-14486
  809d8c:	050001c4 	movi	r20,7
  809d90:	00000306 	br	809da0 <___vfprintf_internal_r+0x81c>
  809d94:	843ffc04 	addi	r16,r16,-16
  809d98:	ad400204 	addi	r21,r21,8
  809d9c:	9c00130e 	bge	r19,r16,809dec <___vfprintf_internal_r+0x868>
  809da0:	94800404 	addi	r18,r18,16
  809da4:	8c400044 	addi	r17,r17,1
  809da8:	af000015 	stw	fp,0(r21)
  809dac:	acc00115 	stw	r19,4(r21)
  809db0:	dc800e15 	stw	r18,56(sp)
  809db4:	dc400d15 	stw	r17,52(sp)
  809db8:	a47ff60e 	bge	r20,r17,809d94 <___vfprintf_internal_r+0x810>
  809dbc:	d9014f17 	ldw	r4,1340(sp)
  809dc0:	b00b883a 	mov	r5,r22
  809dc4:	d9800c04 	addi	r6,sp,48
  809dc8:	d9c15115 	stw	r7,1348(sp)
  809dcc:	080952c0 	call	80952c <__sprint_r>
  809dd0:	d9c15117 	ldw	r7,1348(sp)
  809dd4:	103fa31e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  809dd8:	843ffc04 	addi	r16,r16,-16
  809ddc:	dc800e17 	ldw	r18,56(sp)
  809de0:	dc400d17 	ldw	r17,52(sp)
  809de4:	dd401904 	addi	r21,sp,100
  809de8:	9c3fed16 	blt	r19,r16,809da0 <___vfprintf_internal_r+0x81c>
  809dec:	9425883a 	add	r18,r18,r16
  809df0:	8c400044 	addi	r17,r17,1
  809df4:	008001c4 	movi	r2,7
  809df8:	af000015 	stw	fp,0(r21)
  809dfc:	ac000115 	stw	r16,4(r21)
  809e00:	dc800e15 	stw	r18,56(sp)
  809e04:	dc400d15 	stw	r17,52(sp)
  809e08:	14416116 	blt	r2,r17,80a390 <___vfprintf_internal_r+0xe0c>
  809e0c:	ad400204 	addi	r21,r21,8
  809e10:	003f2406 	br	809aa4 <___vfprintf_internal_r+0x520>
  809e14:	d9014f17 	ldw	r4,1340(sp)
  809e18:	08057e40 	call	8057e4 <__sinit>
  809e1c:	d9c15117 	ldw	r7,1348(sp)
  809e20:	003def06 	br	8095e0 <___vfprintf_internal_r+0x5c>
  809e24:	d9014f17 	ldw	r4,1340(sp)
  809e28:	b00b883a 	mov	r5,r22
  809e2c:	d9c15115 	stw	r7,1348(sp)
  809e30:	080cc4c0 	call	80cc4c <__swsetup_r>
  809e34:	d9c15117 	ldw	r7,1348(sp)
  809e38:	103dee26 	beq	r2,zero,8095f4 <___vfprintf_internal_r+0x70>
  809e3c:	003f8c06 	br	809c70 <___vfprintf_internal_r+0x6ec>
  809e40:	d9014217 	ldw	r4,1288(sp)
  809e44:	d9414317 	ldw	r5,1292(sp)
  809e48:	000d883a 	mov	r6,zero
  809e4c:	000f883a 	mov	r7,zero
  809e50:	08152340 	call	815234 <__eqdf2>
  809e54:	1000f21e 	bne	r2,zero,80a220 <___vfprintf_internal_r+0xc9c>
  809e58:	00802174 	movhi	r2,133
  809e5c:	10b1da04 	addi	r2,r2,-14488
  809e60:	94800044 	addi	r18,r18,1
  809e64:	8c400044 	addi	r17,r17,1
  809e68:	a8800015 	stw	r2,0(r21)
  809e6c:	00c00044 	movi	r3,1
  809e70:	008001c4 	movi	r2,7
  809e74:	a8c00115 	stw	r3,4(r21)
  809e78:	dc800e15 	stw	r18,56(sp)
  809e7c:	dc400d15 	stw	r17,52(sp)
  809e80:	1442fa16 	blt	r2,r17,80aa6c <___vfprintf_internal_r+0x14e8>
  809e84:	a8c00204 	addi	r3,r21,8
  809e88:	d8800517 	ldw	r2,20(sp)
  809e8c:	d9014717 	ldw	r4,1308(sp)
  809e90:	11015c0e 	bge	r2,r4,80a404 <___vfprintf_internal_r+0xe80>
  809e94:	dc400d17 	ldw	r17,52(sp)
  809e98:	d9814917 	ldw	r6,1316(sp)
  809e9c:	00800044 	movi	r2,1
  809ea0:	94800044 	addi	r18,r18,1
  809ea4:	8c400044 	addi	r17,r17,1
  809ea8:	18800115 	stw	r2,4(r3)
  809eac:	008001c4 	movi	r2,7
  809eb0:	19800015 	stw	r6,0(r3)
  809eb4:	dc800e15 	stw	r18,56(sp)
  809eb8:	dc400d15 	stw	r17,52(sp)
  809ebc:	14431016 	blt	r2,r17,80ab00 <___vfprintf_internal_r+0x157c>
  809ec0:	18c00204 	addi	r3,r3,8
  809ec4:	d8814717 	ldw	r2,1308(sp)
  809ec8:	143fffc4 	addi	r16,r2,-1
  809ecc:	043f2b0e 	bge	zero,r16,809b7c <___vfprintf_internal_r+0x5f8>
  809ed0:	00800404 	movi	r2,16
  809ed4:	1402a20e 	bge	r2,r16,80a960 <___vfprintf_internal_r+0x13dc>
  809ed8:	dc400d17 	ldw	r17,52(sp)
  809edc:	1027883a 	mov	r19,r2
  809ee0:	07002174 	movhi	fp,133
  809ee4:	e731da84 	addi	fp,fp,-14486
  809ee8:	050001c4 	movi	r20,7
  809eec:	00000306 	br	809efc <___vfprintf_internal_r+0x978>
  809ef0:	18c00204 	addi	r3,r3,8
  809ef4:	843ffc04 	addi	r16,r16,-16
  809ef8:	9c029c0e 	bge	r19,r16,80a96c <___vfprintf_internal_r+0x13e8>
  809efc:	94800404 	addi	r18,r18,16
  809f00:	8c400044 	addi	r17,r17,1
  809f04:	1f000015 	stw	fp,0(r3)
  809f08:	1cc00115 	stw	r19,4(r3)
  809f0c:	dc800e15 	stw	r18,56(sp)
  809f10:	dc400d15 	stw	r17,52(sp)
  809f14:	a47ff60e 	bge	r20,r17,809ef0 <___vfprintf_internal_r+0x96c>
  809f18:	d9014f17 	ldw	r4,1340(sp)
  809f1c:	b00b883a 	mov	r5,r22
  809f20:	d9800c04 	addi	r6,sp,48
  809f24:	080952c0 	call	80952c <__sprint_r>
  809f28:	103f4e1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  809f2c:	dc800e17 	ldw	r18,56(sp)
  809f30:	dc400d17 	ldw	r17,52(sp)
  809f34:	d8c01904 	addi	r3,sp,100
  809f38:	003fee06 	br	809ef4 <___vfprintf_internal_r+0x970>
  809f3c:	d8802c0b 	ldhu	r2,176(sp)
  809f40:	00ffffc4 	movi	r3,-1
  809f44:	d8c14b15 	stw	r3,1324(sp)
  809f48:	1080100c 	andi	r2,r2,64
  809f4c:	103dcc1e 	bne	r2,zero,809680 <___vfprintf_internal_r+0xfc>
  809f50:	003dce06 	br	80968c <___vfprintf_internal_r+0x108>
  809f54:	d9014f17 	ldw	r4,1340(sp)
  809f58:	b00b883a 	mov	r5,r22
  809f5c:	d9800c04 	addi	r6,sp,48
  809f60:	080952c0 	call	80952c <__sprint_r>
  809f64:	103f3f1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  809f68:	dc800e17 	ldw	r18,56(sp)
  809f6c:	003f2e06 	br	809c28 <___vfprintf_internal_r+0x6a4>
  809f70:	d9414c17 	ldw	r5,1328(sp)
  809f74:	29400414 	ori	r5,r5,16
  809f78:	d9414c15 	stw	r5,1328(sp)
  809f7c:	d9814c17 	ldw	r6,1328(sp)
  809f80:	3080080c 	andi	r2,r6,32
  809f84:	10014f1e 	bne	r2,zero,80a4c4 <___vfprintf_internal_r+0xf40>
  809f88:	d8c14c17 	ldw	r3,1328(sp)
  809f8c:	1880040c 	andi	r2,r3,16
  809f90:	1002ea1e 	bne	r2,zero,80ab3c <___vfprintf_internal_r+0x15b8>
  809f94:	d9014c17 	ldw	r4,1328(sp)
  809f98:	2080100c 	andi	r2,r4,64
  809f9c:	1002e726 	beq	r2,zero,80ab3c <___vfprintf_internal_r+0x15b8>
  809fa0:	3880000f 	ldh	r2,0(r7)
  809fa4:	39c00104 	addi	r7,r7,4
  809fa8:	d9c14015 	stw	r7,1280(sp)
  809fac:	1023d7fa 	srai	r17,r2,31
  809fb0:	1021883a 	mov	r16,r2
  809fb4:	88037216 	blt	r17,zero,80ad80 <___vfprintf_internal_r+0x17fc>
  809fb8:	01000044 	movi	r4,1
  809fbc:	98000416 	blt	r19,zero,809fd0 <___vfprintf_internal_r+0xa4c>
  809fc0:	d8c14c17 	ldw	r3,1328(sp)
  809fc4:	00bfdfc4 	movi	r2,-129
  809fc8:	1886703a 	and	r3,r3,r2
  809fcc:	d8c14c15 	stw	r3,1328(sp)
  809fd0:	8444b03a 	or	r2,r16,r17
  809fd4:	1002261e 	bne	r2,zero,80a870 <___vfprintf_internal_r+0x12ec>
  809fd8:	9802251e 	bne	r19,zero,80a870 <___vfprintf_internal_r+0x12ec>
  809fdc:	20803fcc 	andi	r2,r4,255
  809fe0:	10029b26 	beq	r2,zero,80aa50 <___vfprintf_internal_r+0x14cc>
  809fe4:	d8c01904 	addi	r3,sp,100
  809fe8:	dd000f04 	addi	r20,sp,60
  809fec:	d8c14115 	stw	r3,1284(sp)
  809ff0:	d8c14117 	ldw	r3,1284(sp)
  809ff4:	dcc14515 	stw	r19,1300(sp)
  809ff8:	a0c5c83a 	sub	r2,r20,r3
  809ffc:	11c00a04 	addi	r7,r2,40
  80a000:	99c0010e 	bge	r19,r7,80a008 <___vfprintf_internal_r+0xa84>
  80a004:	d9c14515 	stw	r7,1300(sp)
  80a008:	dcc14615 	stw	r19,1304(sp)
  80a00c:	d8800407 	ldb	r2,16(sp)
  80a010:	103e4c26 	beq	r2,zero,809944 <___vfprintf_internal_r+0x3c0>
  80a014:	d8814517 	ldw	r2,1300(sp)
  80a018:	10800044 	addi	r2,r2,1
  80a01c:	d8814515 	stw	r2,1300(sp)
  80a020:	003e4806 	br	809944 <___vfprintf_internal_r+0x3c0>
  80a024:	d9814c17 	ldw	r6,1328(sp)
  80a028:	31800414 	ori	r6,r6,16
  80a02c:	d9814c15 	stw	r6,1328(sp)
  80a030:	d8c14c17 	ldw	r3,1328(sp)
  80a034:	1880080c 	andi	r2,r3,32
  80a038:	1001271e 	bne	r2,zero,80a4d8 <___vfprintf_internal_r+0xf54>
  80a03c:	d9414c17 	ldw	r5,1328(sp)
  80a040:	2880040c 	andi	r2,r5,16
  80a044:	1002b61e 	bne	r2,zero,80ab20 <___vfprintf_internal_r+0x159c>
  80a048:	d9814c17 	ldw	r6,1328(sp)
  80a04c:	3080100c 	andi	r2,r6,64
  80a050:	1002b326 	beq	r2,zero,80ab20 <___vfprintf_internal_r+0x159c>
  80a054:	3c00000b 	ldhu	r16,0(r7)
  80a058:	0009883a 	mov	r4,zero
  80a05c:	39c00104 	addi	r7,r7,4
  80a060:	0023883a 	mov	r17,zero
  80a064:	d9c14015 	stw	r7,1280(sp)
  80a068:	d8000405 	stb	zero,16(sp)
  80a06c:	003fd306 	br	809fbc <___vfprintf_internal_r+0xa38>
  80a070:	d9014c17 	ldw	r4,1328(sp)
  80a074:	21000414 	ori	r4,r4,16
  80a078:	d9014c15 	stw	r4,1328(sp)
  80a07c:	d9414c17 	ldw	r5,1328(sp)
  80a080:	2880080c 	andi	r2,r5,32
  80a084:	1001081e 	bne	r2,zero,80a4a8 <___vfprintf_internal_r+0xf24>
  80a088:	d8c14c17 	ldw	r3,1328(sp)
  80a08c:	1880040c 	andi	r2,r3,16
  80a090:	1002b01e 	bne	r2,zero,80ab54 <___vfprintf_internal_r+0x15d0>
  80a094:	d9014c17 	ldw	r4,1328(sp)
  80a098:	2080100c 	andi	r2,r4,64
  80a09c:	1002ad26 	beq	r2,zero,80ab54 <___vfprintf_internal_r+0x15d0>
  80a0a0:	3c00000b 	ldhu	r16,0(r7)
  80a0a4:	01000044 	movi	r4,1
  80a0a8:	39c00104 	addi	r7,r7,4
  80a0ac:	0023883a 	mov	r17,zero
  80a0b0:	d9c14015 	stw	r7,1280(sp)
  80a0b4:	d8000405 	stb	zero,16(sp)
  80a0b8:	003fc006 	br	809fbc <___vfprintf_internal_r+0xa38>
  80a0bc:	d9014f17 	ldw	r4,1340(sp)
  80a0c0:	b00b883a 	mov	r5,r22
  80a0c4:	d9800c04 	addi	r6,sp,48
  80a0c8:	080952c0 	call	80952c <__sprint_r>
  80a0cc:	103ee51e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a0d0:	dc800e17 	ldw	r18,56(sp)
  80a0d4:	d8c01904 	addi	r3,sp,100
  80a0d8:	d9814c17 	ldw	r6,1328(sp)
  80a0dc:	3080004c 	andi	r2,r6,1
  80a0e0:	1005003a 	cmpeq	r2,r2,zero
  80a0e4:	103ea51e 	bne	r2,zero,809b7c <___vfprintf_internal_r+0x5f8>
  80a0e8:	00800044 	movi	r2,1
  80a0ec:	dc400d17 	ldw	r17,52(sp)
  80a0f0:	18800115 	stw	r2,4(r3)
  80a0f4:	d8814917 	ldw	r2,1316(sp)
  80a0f8:	94800044 	addi	r18,r18,1
  80a0fc:	8c400044 	addi	r17,r17,1
  80a100:	18800015 	stw	r2,0(r3)
  80a104:	008001c4 	movi	r2,7
  80a108:	dc800e15 	stw	r18,56(sp)
  80a10c:	dc400d15 	stw	r17,52(sp)
  80a110:	14421e0e 	bge	r2,r17,80a98c <___vfprintf_internal_r+0x1408>
  80a114:	d9014f17 	ldw	r4,1340(sp)
  80a118:	b00b883a 	mov	r5,r22
  80a11c:	d9800c04 	addi	r6,sp,48
  80a120:	080952c0 	call	80952c <__sprint_r>
  80a124:	103ecf1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a128:	dc800e17 	ldw	r18,56(sp)
  80a12c:	d8c01904 	addi	r3,sp,100
  80a130:	003e9206 	br	809b7c <___vfprintf_internal_r+0x5f8>
  80a134:	d9014f17 	ldw	r4,1340(sp)
  80a138:	b00b883a 	mov	r5,r22
  80a13c:	d9800c04 	addi	r6,sp,48
  80a140:	080952c0 	call	80952c <__sprint_r>
  80a144:	103ec026 	beq	r2,zero,809c48 <___vfprintf_internal_r+0x6c4>
  80a148:	003ec606 	br	809c64 <___vfprintf_internal_r+0x6e0>
  80a14c:	d9014f17 	ldw	r4,1340(sp)
  80a150:	b00b883a 	mov	r5,r22
  80a154:	d9800c04 	addi	r6,sp,48
  80a158:	d9c15115 	stw	r7,1348(sp)
  80a15c:	080952c0 	call	80952c <__sprint_r>
  80a160:	d9c15117 	ldw	r7,1348(sp)
  80a164:	103ebf1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a168:	dc800e17 	ldw	r18,56(sp)
  80a16c:	dc400d17 	ldw	r17,52(sp)
  80a170:	dd401904 	addi	r21,sp,100
  80a174:	003e7406 	br	809b48 <___vfprintf_internal_r+0x5c4>
  80a178:	d9014f17 	ldw	r4,1340(sp)
  80a17c:	b00b883a 	mov	r5,r22
  80a180:	d9800c04 	addi	r6,sp,48
  80a184:	d9c15115 	stw	r7,1348(sp)
  80a188:	080952c0 	call	80952c <__sprint_r>
  80a18c:	d9c15117 	ldw	r7,1348(sp)
  80a190:	103eb41e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a194:	dd401904 	addi	r21,sp,100
  80a198:	003d6d06 	br	809750 <___vfprintf_internal_r+0x1cc>
  80a19c:	d9014f17 	ldw	r4,1340(sp)
  80a1a0:	b00b883a 	mov	r5,r22
  80a1a4:	d9800c04 	addi	r6,sp,48
  80a1a8:	d9c15115 	stw	r7,1348(sp)
  80a1ac:	080952c0 	call	80952c <__sprint_r>
  80a1b0:	d9c15117 	ldw	r7,1348(sp)
  80a1b4:	103eab1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a1b8:	dc800e17 	ldw	r18,56(sp)
  80a1bc:	dc400d17 	ldw	r17,52(sp)
  80a1c0:	dd401904 	addi	r21,sp,100
  80a1c4:	003e3406 	br	809a98 <___vfprintf_internal_r+0x514>
  80a1c8:	d9014f17 	ldw	r4,1340(sp)
  80a1cc:	b00b883a 	mov	r5,r22
  80a1d0:	d9800c04 	addi	r6,sp,48
  80a1d4:	d9c15115 	stw	r7,1348(sp)
  80a1d8:	080952c0 	call	80952c <__sprint_r>
  80a1dc:	d9c15117 	ldw	r7,1348(sp)
  80a1e0:	103ea01e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a1e4:	dc800e17 	ldw	r18,56(sp)
  80a1e8:	dc400d17 	ldw	r17,52(sp)
  80a1ec:	dd401904 	addi	r21,sp,100
  80a1f0:	003e1c06 	br	809a64 <___vfprintf_internal_r+0x4e0>
  80a1f4:	d9014f17 	ldw	r4,1340(sp)
  80a1f8:	b00b883a 	mov	r5,r22
  80a1fc:	d9800c04 	addi	r6,sp,48
  80a200:	d9c15115 	stw	r7,1348(sp)
  80a204:	080952c0 	call	80952c <__sprint_r>
  80a208:	d9c15117 	ldw	r7,1348(sp)
  80a20c:	103e951e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a210:	dc800e17 	ldw	r18,56(sp)
  80a214:	dc400d17 	ldw	r17,52(sp)
  80a218:	dd401904 	addi	r21,sp,100
  80a21c:	003e0406 	br	809a30 <___vfprintf_internal_r+0x4ac>
  80a220:	d9000517 	ldw	r4,20(sp)
  80a224:	0102520e 	bge	zero,r4,80ab70 <___vfprintf_internal_r+0x15ec>
  80a228:	d9814717 	ldw	r6,1308(sp)
  80a22c:	21807a16 	blt	r4,r6,80a418 <___vfprintf_internal_r+0xe94>
  80a230:	d8814117 	ldw	r2,1284(sp)
  80a234:	91a5883a 	add	r18,r18,r6
  80a238:	8c400044 	addi	r17,r17,1
  80a23c:	a8800015 	stw	r2,0(r21)
  80a240:	008001c4 	movi	r2,7
  80a244:	a9800115 	stw	r6,4(r21)
  80a248:	dc800e15 	stw	r18,56(sp)
  80a24c:	dc400d15 	stw	r17,52(sp)
  80a250:	1442f616 	blt	r2,r17,80ae2c <___vfprintf_internal_r+0x18a8>
  80a254:	a8c00204 	addi	r3,r21,8
  80a258:	d9414717 	ldw	r5,1308(sp)
  80a25c:	2161c83a 	sub	r16,r4,r5
  80a260:	043f9d0e 	bge	zero,r16,80a0d8 <___vfprintf_internal_r+0xb54>
  80a264:	00800404 	movi	r2,16
  80a268:	1402130e 	bge	r2,r16,80aab8 <___vfprintf_internal_r+0x1534>
  80a26c:	dc400d17 	ldw	r17,52(sp)
  80a270:	1027883a 	mov	r19,r2
  80a274:	07002174 	movhi	fp,133
  80a278:	e731da84 	addi	fp,fp,-14486
  80a27c:	050001c4 	movi	r20,7
  80a280:	00000306 	br	80a290 <___vfprintf_internal_r+0xd0c>
  80a284:	18c00204 	addi	r3,r3,8
  80a288:	843ffc04 	addi	r16,r16,-16
  80a28c:	9c020d0e 	bge	r19,r16,80aac4 <___vfprintf_internal_r+0x1540>
  80a290:	94800404 	addi	r18,r18,16
  80a294:	8c400044 	addi	r17,r17,1
  80a298:	1f000015 	stw	fp,0(r3)
  80a29c:	1cc00115 	stw	r19,4(r3)
  80a2a0:	dc800e15 	stw	r18,56(sp)
  80a2a4:	dc400d15 	stw	r17,52(sp)
  80a2a8:	a47ff60e 	bge	r20,r17,80a284 <___vfprintf_internal_r+0xd00>
  80a2ac:	d9014f17 	ldw	r4,1340(sp)
  80a2b0:	b00b883a 	mov	r5,r22
  80a2b4:	d9800c04 	addi	r6,sp,48
  80a2b8:	080952c0 	call	80952c <__sprint_r>
  80a2bc:	103e691e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a2c0:	dc800e17 	ldw	r18,56(sp)
  80a2c4:	dc400d17 	ldw	r17,52(sp)
  80a2c8:	d8c01904 	addi	r3,sp,100
  80a2cc:	003fee06 	br	80a288 <___vfprintf_internal_r+0xd04>
  80a2d0:	d8814717 	ldw	r2,1308(sp)
  80a2d4:	143fffc4 	addi	r16,r2,-1
  80a2d8:	043e970e 	bge	zero,r16,809d38 <___vfprintf_internal_r+0x7b4>
  80a2dc:	00800404 	movi	r2,16
  80a2e0:	1400180e 	bge	r2,r16,80a344 <___vfprintf_internal_r+0xdc0>
  80a2e4:	1029883a 	mov	r20,r2
  80a2e8:	07002174 	movhi	fp,133
  80a2ec:	e731da84 	addi	fp,fp,-14486
  80a2f0:	054001c4 	movi	r21,7
  80a2f4:	00000306 	br	80a304 <___vfprintf_internal_r+0xd80>
  80a2f8:	9cc00204 	addi	r19,r19,8
  80a2fc:	843ffc04 	addi	r16,r16,-16
  80a300:	a400120e 	bge	r20,r16,80a34c <___vfprintf_internal_r+0xdc8>
  80a304:	94800404 	addi	r18,r18,16
  80a308:	8c400044 	addi	r17,r17,1
  80a30c:	9f000015 	stw	fp,0(r19)
  80a310:	9d000115 	stw	r20,4(r19)
  80a314:	dc800e15 	stw	r18,56(sp)
  80a318:	dc400d15 	stw	r17,52(sp)
  80a31c:	ac7ff60e 	bge	r21,r17,80a2f8 <___vfprintf_internal_r+0xd74>
  80a320:	d9014f17 	ldw	r4,1340(sp)
  80a324:	b00b883a 	mov	r5,r22
  80a328:	d9800c04 	addi	r6,sp,48
  80a32c:	080952c0 	call	80952c <__sprint_r>
  80a330:	103e4c1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a334:	dc800e17 	ldw	r18,56(sp)
  80a338:	dc400d17 	ldw	r17,52(sp)
  80a33c:	dcc01904 	addi	r19,sp,100
  80a340:	003fee06 	br	80a2fc <___vfprintf_internal_r+0xd78>
  80a344:	07002174 	movhi	fp,133
  80a348:	e731da84 	addi	fp,fp,-14486
  80a34c:	9425883a 	add	r18,r18,r16
  80a350:	8c400044 	addi	r17,r17,1
  80a354:	008001c4 	movi	r2,7
  80a358:	9f000015 	stw	fp,0(r19)
  80a35c:	9c000115 	stw	r16,4(r19)
  80a360:	dc800e15 	stw	r18,56(sp)
  80a364:	dc400d15 	stw	r17,52(sp)
  80a368:	147e720e 	bge	r2,r17,809d34 <___vfprintf_internal_r+0x7b0>
  80a36c:	d9014f17 	ldw	r4,1340(sp)
  80a370:	b00b883a 	mov	r5,r22
  80a374:	d9800c04 	addi	r6,sp,48
  80a378:	080952c0 	call	80952c <__sprint_r>
  80a37c:	103e391e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a380:	dc800e17 	ldw	r18,56(sp)
  80a384:	dc400d17 	ldw	r17,52(sp)
  80a388:	dcc01904 	addi	r19,sp,100
  80a38c:	003e6a06 	br	809d38 <___vfprintf_internal_r+0x7b4>
  80a390:	d9014f17 	ldw	r4,1340(sp)
  80a394:	b00b883a 	mov	r5,r22
  80a398:	d9800c04 	addi	r6,sp,48
  80a39c:	d9c15115 	stw	r7,1348(sp)
  80a3a0:	080952c0 	call	80952c <__sprint_r>
  80a3a4:	d9c15117 	ldw	r7,1348(sp)
  80a3a8:	103e2e1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a3ac:	dc800e17 	ldw	r18,56(sp)
  80a3b0:	dc400d17 	ldw	r17,52(sp)
  80a3b4:	dd401904 	addi	r21,sp,100
  80a3b8:	003dba06 	br	809aa4 <___vfprintf_internal_r+0x520>
  80a3bc:	d9014f17 	ldw	r4,1340(sp)
  80a3c0:	b00b883a 	mov	r5,r22
  80a3c4:	d9800c04 	addi	r6,sp,48
  80a3c8:	080952c0 	call	80952c <__sprint_r>
  80a3cc:	103e251e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a3d0:	dc800e17 	ldw	r18,56(sp)
  80a3d4:	dc400d17 	ldw	r17,52(sp)
  80a3d8:	dcc01904 	addi	r19,sp,100
  80a3dc:	003e4206 	br	809ce8 <___vfprintf_internal_r+0x764>
  80a3e0:	d9014f17 	ldw	r4,1340(sp)
  80a3e4:	b00b883a 	mov	r5,r22
  80a3e8:	d9800c04 	addi	r6,sp,48
  80a3ec:	080952c0 	call	80952c <__sprint_r>
  80a3f0:	103e1c1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80a3f4:	dc800e17 	ldw	r18,56(sp)
  80a3f8:	dc400d17 	ldw	r17,52(sp)
  80a3fc:	d8c01904 	addi	r3,sp,100
  80a400:	003e2e06 	br	809cbc <___vfprintf_internal_r+0x738>
  80a404:	d9414c17 	ldw	r5,1328(sp)
  80a408:	2880004c 	andi	r2,r5,1
  80a40c:	1005003a 	cmpeq	r2,r2,zero
  80a410:	103dda1e 	bne	r2,zero,809b7c <___vfprintf_internal_r+0x5f8>
  80a414:	003e9f06 	br	809e94 <___vfprintf_internal_r+0x910>
  80a418:	d8c14117 	ldw	r3,1284(sp)
  80a41c:	9125883a 	add	r18,r18,r4
  80a420:	8c400044 	addi	r17,r17,1
  80a424:	008001c4 	movi	r2,7
  80a428:	a8c00015 	stw	r3,0(r21)
  80a42c:	a9000115 	stw	r4,4(r21)
  80a430:	dc800e15 	stw	r18,56(sp)
  80a434:	dc400d15 	stw	r17,52(sp)
  80a438:	14426616 	blt	r2,r17,80add4 <___vfprintf_internal_r+0x1850>
  80a43c:	a8c00204 	addi	r3,r21,8
  80a440:	d9414917 	ldw	r5,1316(sp)
  80a444:	00800044 	movi	r2,1
  80a448:	94800044 	addi	r18,r18,1
  80a44c:	8c400044 	addi	r17,r17,1
  80a450:	18800115 	stw	r2,4(r3)
  80a454:	008001c4 	movi	r2,7
  80a458:	19400015 	stw	r5,0(r3)
  80a45c:	dc800e15 	stw	r18,56(sp)
  80a460:	dc400d15 	stw	r17,52(sp)
  80a464:	2021883a 	mov	r16,r4
  80a468:	14425016 	blt	r2,r17,80adac <___vfprintf_internal_r+0x1828>
  80a46c:	19400204 	addi	r5,r3,8
  80a470:	d9814717 	ldw	r6,1308(sp)
  80a474:	8c400044 	addi	r17,r17,1
  80a478:	dc400d15 	stw	r17,52(sp)
  80a47c:	3107c83a 	sub	r3,r6,r4
  80a480:	d9014117 	ldw	r4,1284(sp)
  80a484:	90e5883a 	add	r18,r18,r3
  80a488:	28c00115 	stw	r3,4(r5)
  80a48c:	8105883a 	add	r2,r16,r4
  80a490:	28800015 	stw	r2,0(r5)
  80a494:	008001c4 	movi	r2,7
  80a498:	dc800e15 	stw	r18,56(sp)
  80a49c:	147f1d16 	blt	r2,r17,80a114 <___vfprintf_internal_r+0xb90>
  80a4a0:	28c00204 	addi	r3,r5,8
  80a4a4:	003db506 	br	809b7c <___vfprintf_internal_r+0x5f8>
  80a4a8:	3c000017 	ldw	r16,0(r7)
  80a4ac:	3c400117 	ldw	r17,4(r7)
  80a4b0:	39800204 	addi	r6,r7,8
  80a4b4:	01000044 	movi	r4,1
  80a4b8:	d9814015 	stw	r6,1280(sp)
  80a4bc:	d8000405 	stb	zero,16(sp)
  80a4c0:	003ebe06 	br	809fbc <___vfprintf_internal_r+0xa38>
  80a4c4:	3c000017 	ldw	r16,0(r7)
  80a4c8:	3c400117 	ldw	r17,4(r7)
  80a4cc:	38800204 	addi	r2,r7,8
  80a4d0:	d8814015 	stw	r2,1280(sp)
  80a4d4:	003eb706 	br	809fb4 <___vfprintf_internal_r+0xa30>
  80a4d8:	3c000017 	ldw	r16,0(r7)
  80a4dc:	3c400117 	ldw	r17,4(r7)
  80a4e0:	39000204 	addi	r4,r7,8
  80a4e4:	d9014015 	stw	r4,1280(sp)
  80a4e8:	0009883a 	mov	r4,zero
  80a4ec:	d8000405 	stb	zero,16(sp)
  80a4f0:	003eb206 	br	809fbc <___vfprintf_internal_r+0xa38>
  80a4f4:	38c00017 	ldw	r3,0(r7)
  80a4f8:	39c00104 	addi	r7,r7,4
  80a4fc:	d8c14a15 	stw	r3,1320(sp)
  80a500:	1800d10e 	bge	r3,zero,80a848 <___vfprintf_internal_r+0x12c4>
  80a504:	00c7c83a 	sub	r3,zero,r3
  80a508:	d8c14a15 	stw	r3,1320(sp)
  80a50c:	d9014c17 	ldw	r4,1328(sp)
  80a510:	b8c00007 	ldb	r3,0(r23)
  80a514:	21000114 	ori	r4,r4,4
  80a518:	d9014c15 	stw	r4,1328(sp)
  80a51c:	003c9806 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a520:	d9814c17 	ldw	r6,1328(sp)
  80a524:	3080080c 	andi	r2,r6,32
  80a528:	1001f026 	beq	r2,zero,80acec <___vfprintf_internal_r+0x1768>
  80a52c:	d9014b17 	ldw	r4,1324(sp)
  80a530:	38800017 	ldw	r2,0(r7)
  80a534:	39c00104 	addi	r7,r7,4
  80a538:	d9c14015 	stw	r7,1280(sp)
  80a53c:	2007d7fa 	srai	r3,r4,31
  80a540:	d9c14017 	ldw	r7,1280(sp)
  80a544:	11000015 	stw	r4,0(r2)
  80a548:	10c00115 	stw	r3,4(r2)
  80a54c:	003c6906 	br	8096f4 <___vfprintf_internal_r+0x170>
  80a550:	b8c00007 	ldb	r3,0(r23)
  80a554:	00801b04 	movi	r2,108
  80a558:	18824f26 	beq	r3,r2,80ae98 <___vfprintf_internal_r+0x1914>
  80a55c:	d9414c17 	ldw	r5,1328(sp)
  80a560:	29400414 	ori	r5,r5,16
  80a564:	d9414c15 	stw	r5,1328(sp)
  80a568:	003c8506 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a56c:	d9814c17 	ldw	r6,1328(sp)
  80a570:	b8c00007 	ldb	r3,0(r23)
  80a574:	31800814 	ori	r6,r6,32
  80a578:	d9814c15 	stw	r6,1328(sp)
  80a57c:	003c8006 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a580:	d8814c17 	ldw	r2,1328(sp)
  80a584:	3c000017 	ldw	r16,0(r7)
  80a588:	00c01e04 	movi	r3,120
  80a58c:	10800094 	ori	r2,r2,2
  80a590:	d8814c15 	stw	r2,1328(sp)
  80a594:	39c00104 	addi	r7,r7,4
  80a598:	01402174 	movhi	r5,133
  80a59c:	2971c304 	addi	r5,r5,-14580
  80a5a0:	00800c04 	movi	r2,48
  80a5a4:	0023883a 	mov	r17,zero
  80a5a8:	01000084 	movi	r4,2
  80a5ac:	d9c14015 	stw	r7,1280(sp)
  80a5b0:	d8c14d15 	stw	r3,1332(sp)
  80a5b4:	d9414415 	stw	r5,1296(sp)
  80a5b8:	d8800445 	stb	r2,17(sp)
  80a5bc:	d8c00485 	stb	r3,18(sp)
  80a5c0:	d8000405 	stb	zero,16(sp)
  80a5c4:	003e7d06 	br	809fbc <___vfprintf_internal_r+0xa38>
  80a5c8:	d8814c17 	ldw	r2,1328(sp)
  80a5cc:	b8c00007 	ldb	r3,0(r23)
  80a5d0:	10801014 	ori	r2,r2,64
  80a5d4:	d8814c15 	stw	r2,1328(sp)
  80a5d8:	003c6906 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a5dc:	d9414c17 	ldw	r5,1328(sp)
  80a5e0:	2880020c 	andi	r2,r5,8
  80a5e4:	1001df26 	beq	r2,zero,80ad64 <___vfprintf_internal_r+0x17e0>
  80a5e8:	39800017 	ldw	r6,0(r7)
  80a5ec:	38800204 	addi	r2,r7,8
  80a5f0:	d8814015 	stw	r2,1280(sp)
  80a5f4:	d9814215 	stw	r6,1288(sp)
  80a5f8:	39c00117 	ldw	r7,4(r7)
  80a5fc:	d9c14315 	stw	r7,1292(sp)
  80a600:	d9014217 	ldw	r4,1288(sp)
  80a604:	d9414317 	ldw	r5,1292(sp)
  80a608:	08108c80 	call	8108c8 <__isinfd>
  80a60c:	10021726 	beq	r2,zero,80ae6c <___vfprintf_internal_r+0x18e8>
  80a610:	d9014217 	ldw	r4,1288(sp)
  80a614:	d9414317 	ldw	r5,1292(sp)
  80a618:	000d883a 	mov	r6,zero
  80a61c:	000f883a 	mov	r7,zero
  80a620:	08154540 	call	815454 <__ltdf2>
  80a624:	1002ca16 	blt	r2,zero,80b150 <___vfprintf_internal_r+0x1bcc>
  80a628:	d9414d17 	ldw	r5,1332(sp)
  80a62c:	008011c4 	movi	r2,71
  80a630:	11420a16 	blt	r2,r5,80ae5c <___vfprintf_internal_r+0x18d8>
  80a634:	01802174 	movhi	r6,133
  80a638:	31b1c804 	addi	r6,r6,-14560
  80a63c:	d9814115 	stw	r6,1284(sp)
  80a640:	d9014c17 	ldw	r4,1328(sp)
  80a644:	00c000c4 	movi	r3,3
  80a648:	00bfdfc4 	movi	r2,-129
  80a64c:	2088703a 	and	r4,r4,r2
  80a650:	180f883a 	mov	r7,r3
  80a654:	d8c14515 	stw	r3,1300(sp)
  80a658:	d9014c15 	stw	r4,1328(sp)
  80a65c:	d8014615 	stw	zero,1304(sp)
  80a660:	003e6a06 	br	80a00c <___vfprintf_internal_r+0xa88>
  80a664:	38800017 	ldw	r2,0(r7)
  80a668:	00c00044 	movi	r3,1
  80a66c:	39c00104 	addi	r7,r7,4
  80a670:	d9c14015 	stw	r7,1280(sp)
  80a674:	d9000f04 	addi	r4,sp,60
  80a678:	180f883a 	mov	r7,r3
  80a67c:	d8c14515 	stw	r3,1300(sp)
  80a680:	d9014115 	stw	r4,1284(sp)
  80a684:	d8800f05 	stb	r2,60(sp)
  80a688:	d8000405 	stb	zero,16(sp)
  80a68c:	003cac06 	br	809940 <___vfprintf_internal_r+0x3bc>
  80a690:	01402174 	movhi	r5,133
  80a694:	2971ce04 	addi	r5,r5,-14536
  80a698:	d9414415 	stw	r5,1296(sp)
  80a69c:	d9814c17 	ldw	r6,1328(sp)
  80a6a0:	3080080c 	andi	r2,r6,32
  80a6a4:	1000f926 	beq	r2,zero,80aa8c <___vfprintf_internal_r+0x1508>
  80a6a8:	3c000017 	ldw	r16,0(r7)
  80a6ac:	3c400117 	ldw	r17,4(r7)
  80a6b0:	38800204 	addi	r2,r7,8
  80a6b4:	d8814015 	stw	r2,1280(sp)
  80a6b8:	d9414c17 	ldw	r5,1328(sp)
  80a6bc:	2880004c 	andi	r2,r5,1
  80a6c0:	1005003a 	cmpeq	r2,r2,zero
  80a6c4:	1000b31e 	bne	r2,zero,80a994 <___vfprintf_internal_r+0x1410>
  80a6c8:	8444b03a 	or	r2,r16,r17
  80a6cc:	1000b126 	beq	r2,zero,80a994 <___vfprintf_internal_r+0x1410>
  80a6d0:	d9814d17 	ldw	r6,1332(sp)
  80a6d4:	29400094 	ori	r5,r5,2
  80a6d8:	00800c04 	movi	r2,48
  80a6dc:	01000084 	movi	r4,2
  80a6e0:	d9414c15 	stw	r5,1328(sp)
  80a6e4:	d8800445 	stb	r2,17(sp)
  80a6e8:	d9800485 	stb	r6,18(sp)
  80a6ec:	d8000405 	stb	zero,16(sp)
  80a6f0:	003e3206 	br	809fbc <___vfprintf_internal_r+0xa38>
  80a6f4:	01802174 	movhi	r6,133
  80a6f8:	31b1c304 	addi	r6,r6,-14580
  80a6fc:	d9814415 	stw	r6,1296(sp)
  80a700:	003fe606 	br	80a69c <___vfprintf_internal_r+0x1118>
  80a704:	00800ac4 	movi	r2,43
  80a708:	d8800405 	stb	r2,16(sp)
  80a70c:	b8c00007 	ldb	r3,0(r23)
  80a710:	003c1b06 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a714:	d8814c17 	ldw	r2,1328(sp)
  80a718:	b8c00007 	ldb	r3,0(r23)
  80a71c:	10800054 	ori	r2,r2,1
  80a720:	d8814c15 	stw	r2,1328(sp)
  80a724:	003c1606 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a728:	d8800407 	ldb	r2,16(sp)
  80a72c:	1000461e 	bne	r2,zero,80a848 <___vfprintf_internal_r+0x12c4>
  80a730:	00800804 	movi	r2,32
  80a734:	d8800405 	stb	r2,16(sp)
  80a738:	b8c00007 	ldb	r3,0(r23)
  80a73c:	003c1006 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a740:	d9814c17 	ldw	r6,1328(sp)
  80a744:	b8c00007 	ldb	r3,0(r23)
  80a748:	31800214 	ori	r6,r6,8
  80a74c:	d9814c15 	stw	r6,1328(sp)
  80a750:	003c0b06 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a754:	0007883a 	mov	r3,zero
  80a758:	01000244 	movi	r4,9
  80a75c:	188002a4 	muli	r2,r3,10
  80a760:	b8c00007 	ldb	r3,0(r23)
  80a764:	d9814d17 	ldw	r6,1332(sp)
  80a768:	bdc00044 	addi	r23,r23,1
  80a76c:	d8c14d15 	stw	r3,1332(sp)
  80a770:	d9414d17 	ldw	r5,1332(sp)
  80a774:	3085883a 	add	r2,r6,r2
  80a778:	10fff404 	addi	r3,r2,-48
  80a77c:	28bff404 	addi	r2,r5,-48
  80a780:	20bff62e 	bgeu	r4,r2,80a75c <___vfprintf_internal_r+0x11d8>
  80a784:	d8c14a15 	stw	r3,1320(sp)
  80a788:	003bff06 	br	809788 <___vfprintf_internal_r+0x204>
  80a78c:	d9414c17 	ldw	r5,1328(sp)
  80a790:	b8c00007 	ldb	r3,0(r23)
  80a794:	29402014 	ori	r5,r5,128
  80a798:	d9414c15 	stw	r5,1328(sp)
  80a79c:	003bf806 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a7a0:	b8c00007 	ldb	r3,0(r23)
  80a7a4:	00800a84 	movi	r2,42
  80a7a8:	bdc00044 	addi	r23,r23,1
  80a7ac:	18831526 	beq	r3,r2,80b404 <___vfprintf_internal_r+0x1e80>
  80a7b0:	d8c14d15 	stw	r3,1332(sp)
  80a7b4:	18bff404 	addi	r2,r3,-48
  80a7b8:	00c00244 	movi	r3,9
  80a7bc:	18827836 	bltu	r3,r2,80b1a0 <___vfprintf_internal_r+0x1c1c>
  80a7c0:	000d883a 	mov	r6,zero
  80a7c4:	308002a4 	muli	r2,r6,10
  80a7c8:	b9800007 	ldb	r6,0(r23)
  80a7cc:	d9414d17 	ldw	r5,1332(sp)
  80a7d0:	bdc00044 	addi	r23,r23,1
  80a7d4:	d9814d15 	stw	r6,1332(sp)
  80a7d8:	d9014d17 	ldw	r4,1332(sp)
  80a7dc:	1145883a 	add	r2,r2,r5
  80a7e0:	11bff404 	addi	r6,r2,-48
  80a7e4:	20bff404 	addi	r2,r4,-48
  80a7e8:	18bff62e 	bgeu	r3,r2,80a7c4 <___vfprintf_internal_r+0x1240>
  80a7ec:	3027883a 	mov	r19,r6
  80a7f0:	303be50e 	bge	r6,zero,809788 <___vfprintf_internal_r+0x204>
  80a7f4:	04ffffc4 	movi	r19,-1
  80a7f8:	003be306 	br	809788 <___vfprintf_internal_r+0x204>
  80a7fc:	d8000405 	stb	zero,16(sp)
  80a800:	39800017 	ldw	r6,0(r7)
  80a804:	39c00104 	addi	r7,r7,4
  80a808:	d9c14015 	stw	r7,1280(sp)
  80a80c:	d9814115 	stw	r6,1284(sp)
  80a810:	3001c926 	beq	r6,zero,80af38 <___vfprintf_internal_r+0x19b4>
  80a814:	98000e16 	blt	r19,zero,80a850 <___vfprintf_internal_r+0x12cc>
  80a818:	d9014117 	ldw	r4,1284(sp)
  80a81c:	000b883a 	mov	r5,zero
  80a820:	980d883a 	mov	r6,r19
  80a824:	080ef240 	call	80ef24 <memchr>
  80a828:	10025926 	beq	r2,zero,80b190 <___vfprintf_internal_r+0x1c0c>
  80a82c:	d8c14117 	ldw	r3,1284(sp)
  80a830:	10cfc83a 	sub	r7,r2,r3
  80a834:	99c19e16 	blt	r19,r7,80aeb0 <___vfprintf_internal_r+0x192c>
  80a838:	d9c14515 	stw	r7,1300(sp)
  80a83c:	38000916 	blt	r7,zero,80a864 <___vfprintf_internal_r+0x12e0>
  80a840:	d8014615 	stw	zero,1304(sp)
  80a844:	003df106 	br	80a00c <___vfprintf_internal_r+0xa88>
  80a848:	b8c00007 	ldb	r3,0(r23)
  80a84c:	003bcc06 	br	809780 <___vfprintf_internal_r+0x1fc>
  80a850:	d9014117 	ldw	r4,1284(sp)
  80a854:	08088440 	call	808844 <strlen>
  80a858:	d8814515 	stw	r2,1300(sp)
  80a85c:	100f883a 	mov	r7,r2
  80a860:	103ff70e 	bge	r2,zero,80a840 <___vfprintf_internal_r+0x12bc>
  80a864:	d8014515 	stw	zero,1300(sp)
  80a868:	d8014615 	stw	zero,1304(sp)
  80a86c:	003de706 	br	80a00c <___vfprintf_internal_r+0xa88>
  80a870:	20c03fcc 	andi	r3,r4,255
  80a874:	00800044 	movi	r2,1
  80a878:	18802d26 	beq	r3,r2,80a930 <___vfprintf_internal_r+0x13ac>
  80a87c:	18800e36 	bltu	r3,r2,80a8b8 <___vfprintf_internal_r+0x1334>
  80a880:	00800084 	movi	r2,2
  80a884:	1880fa26 	beq	r3,r2,80ac70 <___vfprintf_internal_r+0x16ec>
  80a888:	01002174 	movhi	r4,133
  80a88c:	2131d304 	addi	r4,r4,-14516
  80a890:	08088440 	call	808844 <strlen>
  80a894:	100f883a 	mov	r7,r2
  80a898:	dcc14515 	stw	r19,1300(sp)
  80a89c:	9880010e 	bge	r19,r2,80a8a4 <___vfprintf_internal_r+0x1320>
  80a8a0:	d8814515 	stw	r2,1300(sp)
  80a8a4:	00802174 	movhi	r2,133
  80a8a8:	10b1d304 	addi	r2,r2,-14516
  80a8ac:	dcc14615 	stw	r19,1304(sp)
  80a8b0:	d8814115 	stw	r2,1284(sp)
  80a8b4:	003dd506 	br	80a00c <___vfprintf_internal_r+0xa88>
  80a8b8:	d9401904 	addi	r5,sp,100
  80a8bc:	dd000f04 	addi	r20,sp,60
  80a8c0:	d9414115 	stw	r5,1284(sp)
  80a8c4:	880a977a 	slli	r5,r17,29
  80a8c8:	d9814117 	ldw	r6,1284(sp)
  80a8cc:	8004d0fa 	srli	r2,r16,3
  80a8d0:	8806d0fa 	srli	r3,r17,3
  80a8d4:	810001cc 	andi	r4,r16,7
  80a8d8:	2884b03a 	or	r2,r5,r2
  80a8dc:	31bfffc4 	addi	r6,r6,-1
  80a8e0:	21000c04 	addi	r4,r4,48
  80a8e4:	d9814115 	stw	r6,1284(sp)
  80a8e8:	10cab03a 	or	r5,r2,r3
  80a8ec:	31000005 	stb	r4,0(r6)
  80a8f0:	1021883a 	mov	r16,r2
  80a8f4:	1823883a 	mov	r17,r3
  80a8f8:	283ff21e 	bne	r5,zero,80a8c4 <___vfprintf_internal_r+0x1340>
  80a8fc:	d8c14c17 	ldw	r3,1328(sp)
  80a900:	1880004c 	andi	r2,r3,1
  80a904:	1005003a 	cmpeq	r2,r2,zero
  80a908:	103db91e 	bne	r2,zero,809ff0 <___vfprintf_internal_r+0xa6c>
  80a90c:	20803fcc 	andi	r2,r4,255
  80a910:	1080201c 	xori	r2,r2,128
  80a914:	10bfe004 	addi	r2,r2,-128
  80a918:	00c00c04 	movi	r3,48
  80a91c:	10fdb426 	beq	r2,r3,809ff0 <___vfprintf_internal_r+0xa6c>
  80a920:	31bfffc4 	addi	r6,r6,-1
  80a924:	d9814115 	stw	r6,1284(sp)
  80a928:	30c00005 	stb	r3,0(r6)
  80a92c:	003db006 	br	809ff0 <___vfprintf_internal_r+0xa6c>
  80a930:	88800068 	cmpgeui	r2,r17,1
  80a934:	10002c1e 	bne	r2,zero,80a9e8 <___vfprintf_internal_r+0x1464>
  80a938:	8800021e 	bne	r17,zero,80a944 <___vfprintf_internal_r+0x13c0>
  80a93c:	00800244 	movi	r2,9
  80a940:	14002936 	bltu	r2,r16,80a9e8 <___vfprintf_internal_r+0x1464>
  80a944:	d90018c4 	addi	r4,sp,99
  80a948:	dd000f04 	addi	r20,sp,60
  80a94c:	d9014115 	stw	r4,1284(sp)
  80a950:	d9014117 	ldw	r4,1284(sp)
  80a954:	80800c04 	addi	r2,r16,48
  80a958:	20800005 	stb	r2,0(r4)
  80a95c:	003da406 	br	809ff0 <___vfprintf_internal_r+0xa6c>
  80a960:	dc400d17 	ldw	r17,52(sp)
  80a964:	07002174 	movhi	fp,133
  80a968:	e731da84 	addi	fp,fp,-14486
  80a96c:	9425883a 	add	r18,r18,r16
  80a970:	8c400044 	addi	r17,r17,1
  80a974:	008001c4 	movi	r2,7
  80a978:	1f000015 	stw	fp,0(r3)
  80a97c:	1c000115 	stw	r16,4(r3)
  80a980:	dc800e15 	stw	r18,56(sp)
  80a984:	dc400d15 	stw	r17,52(sp)
  80a988:	147de216 	blt	r2,r17,80a114 <___vfprintf_internal_r+0xb90>
  80a98c:	18c00204 	addi	r3,r3,8
  80a990:	003c7a06 	br	809b7c <___vfprintf_internal_r+0x5f8>
  80a994:	01000084 	movi	r4,2
  80a998:	d8000405 	stb	zero,16(sp)
  80a99c:	003d8706 	br	809fbc <___vfprintf_internal_r+0xa38>
  80a9a0:	d9814c17 	ldw	r6,1328(sp)
  80a9a4:	30c4703a 	and	r2,r6,r3
  80a9a8:	1005003a 	cmpeq	r2,r2,zero
  80a9ac:	103cb926 	beq	r2,zero,809c94 <___vfprintf_internal_r+0x710>
  80a9b0:	d9014117 	ldw	r4,1284(sp)
  80a9b4:	94800044 	addi	r18,r18,1
  80a9b8:	8c400044 	addi	r17,r17,1
  80a9bc:	008001c4 	movi	r2,7
  80a9c0:	a9000015 	stw	r4,0(r21)
  80a9c4:	a8c00115 	stw	r3,4(r21)
  80a9c8:	dc800e15 	stw	r18,56(sp)
  80a9cc:	dc400d15 	stw	r17,52(sp)
  80a9d0:	147e6616 	blt	r2,r17,80a36c <___vfprintf_internal_r+0xde8>
  80a9d4:	acc00204 	addi	r19,r21,8
  80a9d8:	003cd706 	br	809d38 <___vfprintf_internal_r+0x7b4>
  80a9dc:	07002174 	movhi	fp,133
  80a9e0:	e731da84 	addi	fp,fp,-14486
  80a9e4:	003c4f06 	br	809b24 <___vfprintf_internal_r+0x5a0>
  80a9e8:	dd000f04 	addi	r20,sp,60
  80a9ec:	dc801904 	addi	r18,sp,100
  80a9f0:	8009883a 	mov	r4,r16
  80a9f4:	880b883a 	mov	r5,r17
  80a9f8:	01800284 	movi	r6,10
  80a9fc:	000f883a 	mov	r7,zero
  80aa00:	0813ffc0 	call	813ffc <__umoddi3>
  80aa04:	12000c04 	addi	r8,r2,48
  80aa08:	94bfffc4 	addi	r18,r18,-1
  80aa0c:	8009883a 	mov	r4,r16
  80aa10:	880b883a 	mov	r5,r17
  80aa14:	01800284 	movi	r6,10
  80aa18:	000f883a 	mov	r7,zero
  80aa1c:	92000005 	stb	r8,0(r18)
  80aa20:	0813a200 	call	813a20 <__udivdi3>
  80aa24:	1009883a 	mov	r4,r2
  80aa28:	1021883a 	mov	r16,r2
  80aa2c:	18800068 	cmpgeui	r2,r3,1
  80aa30:	1823883a 	mov	r17,r3
  80aa34:	103fee1e 	bne	r2,zero,80a9f0 <___vfprintf_internal_r+0x146c>
  80aa38:	1800021e 	bne	r3,zero,80aa44 <___vfprintf_internal_r+0x14c0>
  80aa3c:	00800244 	movi	r2,9
  80aa40:	113feb36 	bltu	r2,r4,80a9f0 <___vfprintf_internal_r+0x146c>
  80aa44:	94bfffc4 	addi	r18,r18,-1
  80aa48:	dc814115 	stw	r18,1284(sp)
  80aa4c:	003fc006 	br	80a950 <___vfprintf_internal_r+0x13cc>
  80aa50:	d9014c17 	ldw	r4,1328(sp)
  80aa54:	2080004c 	andi	r2,r4,1
  80aa58:	10009a1e 	bne	r2,zero,80acc4 <___vfprintf_internal_r+0x1740>
  80aa5c:	d9401904 	addi	r5,sp,100
  80aa60:	dd000f04 	addi	r20,sp,60
  80aa64:	d9414115 	stw	r5,1284(sp)
  80aa68:	003d6106 	br	809ff0 <___vfprintf_internal_r+0xa6c>
  80aa6c:	d9014f17 	ldw	r4,1340(sp)
  80aa70:	b00b883a 	mov	r5,r22
  80aa74:	d9800c04 	addi	r6,sp,48
  80aa78:	080952c0 	call	80952c <__sprint_r>
  80aa7c:	103c791e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80aa80:	dc800e17 	ldw	r18,56(sp)
  80aa84:	d8c01904 	addi	r3,sp,100
  80aa88:	003cff06 	br	809e88 <___vfprintf_internal_r+0x904>
  80aa8c:	d8c14c17 	ldw	r3,1328(sp)
  80aa90:	1880040c 	andi	r2,r3,16
  80aa94:	1000711e 	bne	r2,zero,80ac5c <___vfprintf_internal_r+0x16d8>
  80aa98:	d9014c17 	ldw	r4,1328(sp)
  80aa9c:	2080100c 	andi	r2,r4,64
  80aaa0:	10006e26 	beq	r2,zero,80ac5c <___vfprintf_internal_r+0x16d8>
  80aaa4:	3c00000b 	ldhu	r16,0(r7)
  80aaa8:	0023883a 	mov	r17,zero
  80aaac:	39c00104 	addi	r7,r7,4
  80aab0:	d9c14015 	stw	r7,1280(sp)
  80aab4:	003f0006 	br	80a6b8 <___vfprintf_internal_r+0x1134>
  80aab8:	dc400d17 	ldw	r17,52(sp)
  80aabc:	07002174 	movhi	fp,133
  80aac0:	e731da84 	addi	fp,fp,-14486
  80aac4:	9425883a 	add	r18,r18,r16
  80aac8:	8c400044 	addi	r17,r17,1
  80aacc:	008001c4 	movi	r2,7
  80aad0:	1f000015 	stw	fp,0(r3)
  80aad4:	1c000115 	stw	r16,4(r3)
  80aad8:	dc800e15 	stw	r18,56(sp)
  80aadc:	dc400d15 	stw	r17,52(sp)
  80aae0:	147d7616 	blt	r2,r17,80a0bc <___vfprintf_internal_r+0xb38>
  80aae4:	18c00204 	addi	r3,r3,8
  80aae8:	003d7b06 	br	80a0d8 <___vfprintf_internal_r+0xb54>
  80aaec:	dc800e17 	ldw	r18,56(sp)
  80aaf0:	dc400d17 	ldw	r17,52(sp)
  80aaf4:	07002174 	movhi	fp,133
  80aaf8:	e731de84 	addi	fp,fp,-14470
  80aafc:	003bc006 	br	809a00 <___vfprintf_internal_r+0x47c>
  80ab00:	d9014f17 	ldw	r4,1340(sp)
  80ab04:	b00b883a 	mov	r5,r22
  80ab08:	d9800c04 	addi	r6,sp,48
  80ab0c:	080952c0 	call	80952c <__sprint_r>
  80ab10:	103c541e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80ab14:	dc800e17 	ldw	r18,56(sp)
  80ab18:	d8c01904 	addi	r3,sp,100
  80ab1c:	003ce906 	br	809ec4 <___vfprintf_internal_r+0x940>
  80ab20:	3c000017 	ldw	r16,0(r7)
  80ab24:	0009883a 	mov	r4,zero
  80ab28:	39c00104 	addi	r7,r7,4
  80ab2c:	0023883a 	mov	r17,zero
  80ab30:	d9c14015 	stw	r7,1280(sp)
  80ab34:	d8000405 	stb	zero,16(sp)
  80ab38:	003d2006 	br	809fbc <___vfprintf_internal_r+0xa38>
  80ab3c:	38800017 	ldw	r2,0(r7)
  80ab40:	39c00104 	addi	r7,r7,4
  80ab44:	d9c14015 	stw	r7,1280(sp)
  80ab48:	1023d7fa 	srai	r17,r2,31
  80ab4c:	1021883a 	mov	r16,r2
  80ab50:	003d1806 	br	809fb4 <___vfprintf_internal_r+0xa30>
  80ab54:	3c000017 	ldw	r16,0(r7)
  80ab58:	01000044 	movi	r4,1
  80ab5c:	39c00104 	addi	r7,r7,4
  80ab60:	0023883a 	mov	r17,zero
  80ab64:	d9c14015 	stw	r7,1280(sp)
  80ab68:	d8000405 	stb	zero,16(sp)
  80ab6c:	003d1306 	br	809fbc <___vfprintf_internal_r+0xa38>
  80ab70:	00802174 	movhi	r2,133
  80ab74:	10b1da04 	addi	r2,r2,-14488
  80ab78:	94800044 	addi	r18,r18,1
  80ab7c:	8c400044 	addi	r17,r17,1
  80ab80:	a8800015 	stw	r2,0(r21)
  80ab84:	00c00044 	movi	r3,1
  80ab88:	008001c4 	movi	r2,7
  80ab8c:	a8c00115 	stw	r3,4(r21)
  80ab90:	dc800e15 	stw	r18,56(sp)
  80ab94:	dc400d15 	stw	r17,52(sp)
  80ab98:	1440ca16 	blt	r2,r17,80aec4 <___vfprintf_internal_r+0x1940>
  80ab9c:	a8c00204 	addi	r3,r21,8
  80aba0:	2000061e 	bne	r4,zero,80abbc <___vfprintf_internal_r+0x1638>
  80aba4:	d9414717 	ldw	r5,1308(sp)
  80aba8:	2800041e 	bne	r5,zero,80abbc <___vfprintf_internal_r+0x1638>
  80abac:	d9814c17 	ldw	r6,1328(sp)
  80abb0:	3080004c 	andi	r2,r6,1
  80abb4:	1005003a 	cmpeq	r2,r2,zero
  80abb8:	103bf01e 	bne	r2,zero,809b7c <___vfprintf_internal_r+0x5f8>
  80abbc:	00800044 	movi	r2,1
  80abc0:	dc400d17 	ldw	r17,52(sp)
  80abc4:	18800115 	stw	r2,4(r3)
  80abc8:	d8814917 	ldw	r2,1316(sp)
  80abcc:	94800044 	addi	r18,r18,1
  80abd0:	8c400044 	addi	r17,r17,1
  80abd4:	18800015 	stw	r2,0(r3)
  80abd8:	008001c4 	movi	r2,7
  80abdc:	dc800e15 	stw	r18,56(sp)
  80abe0:	dc400d15 	stw	r17,52(sp)
  80abe4:	1440ca16 	blt	r2,r17,80af10 <___vfprintf_internal_r+0x198c>
  80abe8:	18c00204 	addi	r3,r3,8
  80abec:	0121c83a 	sub	r16,zero,r4
  80abf0:	0400500e 	bge	zero,r16,80ad34 <___vfprintf_internal_r+0x17b0>
  80abf4:	00800404 	movi	r2,16
  80abf8:	1400800e 	bge	r2,r16,80adfc <___vfprintf_internal_r+0x1878>
  80abfc:	1027883a 	mov	r19,r2
  80ac00:	07002174 	movhi	fp,133
  80ac04:	e731da84 	addi	fp,fp,-14486
  80ac08:	050001c4 	movi	r20,7
  80ac0c:	00000306 	br	80ac1c <___vfprintf_internal_r+0x1698>
  80ac10:	18c00204 	addi	r3,r3,8
  80ac14:	843ffc04 	addi	r16,r16,-16
  80ac18:	9c007a0e 	bge	r19,r16,80ae04 <___vfprintf_internal_r+0x1880>
  80ac1c:	94800404 	addi	r18,r18,16
  80ac20:	8c400044 	addi	r17,r17,1
  80ac24:	1f000015 	stw	fp,0(r3)
  80ac28:	1cc00115 	stw	r19,4(r3)
  80ac2c:	dc800e15 	stw	r18,56(sp)
  80ac30:	dc400d15 	stw	r17,52(sp)
  80ac34:	a47ff60e 	bge	r20,r17,80ac10 <___vfprintf_internal_r+0x168c>
  80ac38:	d9014f17 	ldw	r4,1340(sp)
  80ac3c:	b00b883a 	mov	r5,r22
  80ac40:	d9800c04 	addi	r6,sp,48
  80ac44:	080952c0 	call	80952c <__sprint_r>
  80ac48:	103c061e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80ac4c:	dc800e17 	ldw	r18,56(sp)
  80ac50:	dc400d17 	ldw	r17,52(sp)
  80ac54:	d8c01904 	addi	r3,sp,100
  80ac58:	003fee06 	br	80ac14 <___vfprintf_internal_r+0x1690>
  80ac5c:	3c000017 	ldw	r16,0(r7)
  80ac60:	0023883a 	mov	r17,zero
  80ac64:	39c00104 	addi	r7,r7,4
  80ac68:	d9c14015 	stw	r7,1280(sp)
  80ac6c:	003e9206 	br	80a6b8 <___vfprintf_internal_r+0x1134>
  80ac70:	d9401904 	addi	r5,sp,100
  80ac74:	dd000f04 	addi	r20,sp,60
  80ac78:	d9414115 	stw	r5,1284(sp)
  80ac7c:	d9814417 	ldw	r6,1296(sp)
  80ac80:	880a973a 	slli	r5,r17,28
  80ac84:	8004d13a 	srli	r2,r16,4
  80ac88:	810003cc 	andi	r4,r16,15
  80ac8c:	3109883a 	add	r4,r6,r4
  80ac90:	2884b03a 	or	r2,r5,r2
  80ac94:	21400003 	ldbu	r5,0(r4)
  80ac98:	d9014117 	ldw	r4,1284(sp)
  80ac9c:	8806d13a 	srli	r3,r17,4
  80aca0:	1021883a 	mov	r16,r2
  80aca4:	213fffc4 	addi	r4,r4,-1
  80aca8:	d9014115 	stw	r4,1284(sp)
  80acac:	d9814117 	ldw	r6,1284(sp)
  80acb0:	10c8b03a 	or	r4,r2,r3
  80acb4:	1823883a 	mov	r17,r3
  80acb8:	31400005 	stb	r5,0(r6)
  80acbc:	203fef1e 	bne	r4,zero,80ac7c <___vfprintf_internal_r+0x16f8>
  80acc0:	003ccb06 	br	809ff0 <___vfprintf_internal_r+0xa6c>
  80acc4:	00800c04 	movi	r2,48
  80acc8:	d98018c4 	addi	r6,sp,99
  80accc:	dd000f04 	addi	r20,sp,60
  80acd0:	d88018c5 	stb	r2,99(sp)
  80acd4:	d9814115 	stw	r6,1284(sp)
  80acd8:	003cc506 	br	809ff0 <___vfprintf_internal_r+0xa6c>
  80acdc:	dc400d17 	ldw	r17,52(sp)
  80ace0:	07002174 	movhi	fp,133
  80ace4:	e731de84 	addi	fp,fp,-14470
  80ace8:	003bc706 	br	809c08 <___vfprintf_internal_r+0x684>
  80acec:	d9414c17 	ldw	r5,1328(sp)
  80acf0:	2880040c 	andi	r2,r5,16
  80acf4:	10007c26 	beq	r2,zero,80aee8 <___vfprintf_internal_r+0x1964>
  80acf8:	38800017 	ldw	r2,0(r7)
  80acfc:	39c00104 	addi	r7,r7,4
  80ad00:	d9c14015 	stw	r7,1280(sp)
  80ad04:	d9814b17 	ldw	r6,1324(sp)
  80ad08:	d9c14017 	ldw	r7,1280(sp)
  80ad0c:	11800015 	stw	r6,0(r2)
  80ad10:	003a7806 	br	8096f4 <___vfprintf_internal_r+0x170>
  80ad14:	d9014f17 	ldw	r4,1340(sp)
  80ad18:	b00b883a 	mov	r5,r22
  80ad1c:	d9800c04 	addi	r6,sp,48
  80ad20:	080952c0 	call	80952c <__sprint_r>
  80ad24:	103bcf1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80ad28:	dc800e17 	ldw	r18,56(sp)
  80ad2c:	dc400d17 	ldw	r17,52(sp)
  80ad30:	d8c01904 	addi	r3,sp,100
  80ad34:	d9014717 	ldw	r4,1308(sp)
  80ad38:	d9414117 	ldw	r5,1284(sp)
  80ad3c:	8c400044 	addi	r17,r17,1
  80ad40:	9125883a 	add	r18,r18,r4
  80ad44:	008001c4 	movi	r2,7
  80ad48:	19400015 	stw	r5,0(r3)
  80ad4c:	19000115 	stw	r4,4(r3)
  80ad50:	dc800e15 	stw	r18,56(sp)
  80ad54:	dc400d15 	stw	r17,52(sp)
  80ad58:	147cee16 	blt	r2,r17,80a114 <___vfprintf_internal_r+0xb90>
  80ad5c:	18c00204 	addi	r3,r3,8
  80ad60:	003b8606 	br	809b7c <___vfprintf_internal_r+0x5f8>
  80ad64:	38c00017 	ldw	r3,0(r7)
  80ad68:	39000204 	addi	r4,r7,8
  80ad6c:	d9014015 	stw	r4,1280(sp)
  80ad70:	d8c14215 	stw	r3,1288(sp)
  80ad74:	39c00117 	ldw	r7,4(r7)
  80ad78:	d9c14315 	stw	r7,1292(sp)
  80ad7c:	003e2006 	br	80a600 <___vfprintf_internal_r+0x107c>
  80ad80:	0005883a 	mov	r2,zero
  80ad84:	1409c83a 	sub	r4,r2,r16
  80ad88:	1105803a 	cmpltu	r2,r2,r4
  80ad8c:	044bc83a 	sub	r5,zero,r17
  80ad90:	2885c83a 	sub	r2,r5,r2
  80ad94:	2021883a 	mov	r16,r4
  80ad98:	1023883a 	mov	r17,r2
  80ad9c:	01000044 	movi	r4,1
  80ada0:	00800b44 	movi	r2,45
  80ada4:	d8800405 	stb	r2,16(sp)
  80ada8:	003c8406 	br	809fbc <___vfprintf_internal_r+0xa38>
  80adac:	d9014f17 	ldw	r4,1340(sp)
  80adb0:	b00b883a 	mov	r5,r22
  80adb4:	d9800c04 	addi	r6,sp,48
  80adb8:	080952c0 	call	80952c <__sprint_r>
  80adbc:	103ba91e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80adc0:	dc800e17 	ldw	r18,56(sp)
  80adc4:	dc400d17 	ldw	r17,52(sp)
  80adc8:	d9000517 	ldw	r4,20(sp)
  80adcc:	d9401904 	addi	r5,sp,100
  80add0:	003da706 	br	80a470 <___vfprintf_internal_r+0xeec>
  80add4:	d9014f17 	ldw	r4,1340(sp)
  80add8:	b00b883a 	mov	r5,r22
  80addc:	d9800c04 	addi	r6,sp,48
  80ade0:	080952c0 	call	80952c <__sprint_r>
  80ade4:	103b9f1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80ade8:	dc800e17 	ldw	r18,56(sp)
  80adec:	dc400d17 	ldw	r17,52(sp)
  80adf0:	d9000517 	ldw	r4,20(sp)
  80adf4:	d8c01904 	addi	r3,sp,100
  80adf8:	003d9106 	br	80a440 <___vfprintf_internal_r+0xebc>
  80adfc:	07002174 	movhi	fp,133
  80ae00:	e731da84 	addi	fp,fp,-14486
  80ae04:	9425883a 	add	r18,r18,r16
  80ae08:	8c400044 	addi	r17,r17,1
  80ae0c:	008001c4 	movi	r2,7
  80ae10:	1f000015 	stw	fp,0(r3)
  80ae14:	1c000115 	stw	r16,4(r3)
  80ae18:	dc800e15 	stw	r18,56(sp)
  80ae1c:	dc400d15 	stw	r17,52(sp)
  80ae20:	147fbc16 	blt	r2,r17,80ad14 <___vfprintf_internal_r+0x1790>
  80ae24:	18c00204 	addi	r3,r3,8
  80ae28:	003fc206 	br	80ad34 <___vfprintf_internal_r+0x17b0>
  80ae2c:	d9014f17 	ldw	r4,1340(sp)
  80ae30:	b00b883a 	mov	r5,r22
  80ae34:	d9800c04 	addi	r6,sp,48
  80ae38:	080952c0 	call	80952c <__sprint_r>
  80ae3c:	103b891e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80ae40:	dc800e17 	ldw	r18,56(sp)
  80ae44:	d9000517 	ldw	r4,20(sp)
  80ae48:	d8c01904 	addi	r3,sp,100
  80ae4c:	003d0206 	br	80a258 <___vfprintf_internal_r+0xcd4>
  80ae50:	07002174 	movhi	fp,133
  80ae54:	e731da84 	addi	fp,fp,-14486
  80ae58:	003be406 	br	809dec <___vfprintf_internal_r+0x868>
  80ae5c:	00802174 	movhi	r2,133
  80ae60:	10b1c904 	addi	r2,r2,-14556
  80ae64:	d8814115 	stw	r2,1284(sp)
  80ae68:	003df506 	br	80a640 <___vfprintf_internal_r+0x10bc>
  80ae6c:	d9014217 	ldw	r4,1288(sp)
  80ae70:	d9414317 	ldw	r5,1292(sp)
  80ae74:	08109080 	call	810908 <__isnand>
  80ae78:	10003926 	beq	r2,zero,80af60 <___vfprintf_internal_r+0x19dc>
  80ae7c:	d9414d17 	ldw	r5,1332(sp)
  80ae80:	008011c4 	movi	r2,71
  80ae84:	1140ce16 	blt	r2,r5,80b1c0 <___vfprintf_internal_r+0x1c3c>
  80ae88:	01802174 	movhi	r6,133
  80ae8c:	31b1ca04 	addi	r6,r6,-14552
  80ae90:	d9814115 	stw	r6,1284(sp)
  80ae94:	003dea06 	br	80a640 <___vfprintf_internal_r+0x10bc>
  80ae98:	d9014c17 	ldw	r4,1328(sp)
  80ae9c:	bdc00044 	addi	r23,r23,1
  80aea0:	b8c00007 	ldb	r3,0(r23)
  80aea4:	21000814 	ori	r4,r4,32
  80aea8:	d9014c15 	stw	r4,1328(sp)
  80aeac:	003a3406 	br	809780 <___vfprintf_internal_r+0x1fc>
  80aeb0:	dcc14515 	stw	r19,1300(sp)
  80aeb4:	98011016 	blt	r19,zero,80b2f8 <___vfprintf_internal_r+0x1d74>
  80aeb8:	980f883a 	mov	r7,r19
  80aebc:	d8014615 	stw	zero,1304(sp)
  80aec0:	003c5206 	br	80a00c <___vfprintf_internal_r+0xa88>
  80aec4:	d9014f17 	ldw	r4,1340(sp)
  80aec8:	b00b883a 	mov	r5,r22
  80aecc:	d9800c04 	addi	r6,sp,48
  80aed0:	080952c0 	call	80952c <__sprint_r>
  80aed4:	103b631e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80aed8:	dc800e17 	ldw	r18,56(sp)
  80aedc:	d9000517 	ldw	r4,20(sp)
  80aee0:	d8c01904 	addi	r3,sp,100
  80aee4:	003f2e06 	br	80aba0 <___vfprintf_internal_r+0x161c>
  80aee8:	d8c14c17 	ldw	r3,1328(sp)
  80aeec:	1880100c 	andi	r2,r3,64
  80aef0:	1000a026 	beq	r2,zero,80b174 <___vfprintf_internal_r+0x1bf0>
  80aef4:	38800017 	ldw	r2,0(r7)
  80aef8:	39c00104 	addi	r7,r7,4
  80aefc:	d9c14015 	stw	r7,1280(sp)
  80af00:	d9014b17 	ldw	r4,1324(sp)
  80af04:	d9c14017 	ldw	r7,1280(sp)
  80af08:	1100000d 	sth	r4,0(r2)
  80af0c:	0039f906 	br	8096f4 <___vfprintf_internal_r+0x170>
  80af10:	d9014f17 	ldw	r4,1340(sp)
  80af14:	b00b883a 	mov	r5,r22
  80af18:	d9800c04 	addi	r6,sp,48
  80af1c:	080952c0 	call	80952c <__sprint_r>
  80af20:	103b501e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80af24:	dc800e17 	ldw	r18,56(sp)
  80af28:	dc400d17 	ldw	r17,52(sp)
  80af2c:	d9000517 	ldw	r4,20(sp)
  80af30:	d8c01904 	addi	r3,sp,100
  80af34:	003f2d06 	br	80abec <___vfprintf_internal_r+0x1668>
  80af38:	00800184 	movi	r2,6
  80af3c:	14c09a36 	bltu	r2,r19,80b1a8 <___vfprintf_internal_r+0x1c24>
  80af40:	dcc14515 	stw	r19,1300(sp)
  80af44:	9800010e 	bge	r19,zero,80af4c <___vfprintf_internal_r+0x19c8>
  80af48:	d8014515 	stw	zero,1300(sp)
  80af4c:	00802174 	movhi	r2,133
  80af50:	10b1cc04 	addi	r2,r2,-14544
  80af54:	980f883a 	mov	r7,r19
  80af58:	d8814115 	stw	r2,1284(sp)
  80af5c:	003a7806 	br	809940 <___vfprintf_internal_r+0x3bc>
  80af60:	00bfffc4 	movi	r2,-1
  80af64:	9880e226 	beq	r19,r2,80b2f0 <___vfprintf_internal_r+0x1d6c>
  80af68:	d9414d17 	ldw	r5,1332(sp)
  80af6c:	008019c4 	movi	r2,103
  80af70:	2880dc26 	beq	r5,r2,80b2e4 <___vfprintf_internal_r+0x1d60>
  80af74:	008011c4 	movi	r2,71
  80af78:	2880da26 	beq	r5,r2,80b2e4 <___vfprintf_internal_r+0x1d60>
  80af7c:	d9414c17 	ldw	r5,1328(sp)
  80af80:	d9014317 	ldw	r4,1292(sp)
  80af84:	d9814217 	ldw	r6,1288(sp)
  80af88:	29404014 	ori	r5,r5,256
  80af8c:	d9414c15 	stw	r5,1328(sp)
  80af90:	2000cc16 	blt	r4,zero,80b2c4 <___vfprintf_internal_r+0x1d40>
  80af94:	3021883a 	mov	r16,r6
  80af98:	2023883a 	mov	r17,r4
  80af9c:	0039883a 	mov	fp,zero
  80afa0:	d9414d17 	ldw	r5,1332(sp)
  80afa4:	00801984 	movi	r2,102
  80afa8:	2880b726 	beq	r5,r2,80b288 <___vfprintf_internal_r+0x1d04>
  80afac:	00801184 	movi	r2,70
  80afb0:	2880b526 	beq	r5,r2,80b288 <___vfprintf_internal_r+0x1d04>
  80afb4:	00801944 	movi	r2,101
  80afb8:	2880c826 	beq	r5,r2,80b2dc <___vfprintf_internal_r+0x1d58>
  80afbc:	00801144 	movi	r2,69
  80afc0:	2880c626 	beq	r5,r2,80b2dc <___vfprintf_internal_r+0x1d58>
  80afc4:	9829883a 	mov	r20,r19
  80afc8:	d9014f17 	ldw	r4,1340(sp)
  80afcc:	d8800504 	addi	r2,sp,20
  80afd0:	880d883a 	mov	r6,r17
  80afd4:	d8800115 	stw	r2,4(sp)
  80afd8:	d8c00604 	addi	r3,sp,24
  80afdc:	d8800704 	addi	r2,sp,28
  80afe0:	800b883a 	mov	r5,r16
  80afe4:	01c00084 	movi	r7,2
  80afe8:	d8c00215 	stw	r3,8(sp)
  80afec:	d8800315 	stw	r2,12(sp)
  80aff0:	dd000015 	stw	r20,0(sp)
  80aff4:	080d0100 	call	80d010 <_dtoa_r>
  80aff8:	d9814d17 	ldw	r6,1332(sp)
  80affc:	d8814115 	stw	r2,1284(sp)
  80b000:	008019c4 	movi	r2,103
  80b004:	30809526 	beq	r6,r2,80b25c <___vfprintf_internal_r+0x1cd8>
  80b008:	d8c14d17 	ldw	r3,1332(sp)
  80b00c:	008011c4 	movi	r2,71
  80b010:	18809226 	beq	r3,r2,80b25c <___vfprintf_internal_r+0x1cd8>
  80b014:	d9414117 	ldw	r5,1284(sp)
  80b018:	d9814d17 	ldw	r6,1332(sp)
  80b01c:	00801984 	movi	r2,102
  80b020:	2d25883a 	add	r18,r5,r20
  80b024:	30808626 	beq	r6,r2,80b240 <___vfprintf_internal_r+0x1cbc>
  80b028:	00801184 	movi	r2,70
  80b02c:	30808426 	beq	r6,r2,80b240 <___vfprintf_internal_r+0x1cbc>
  80b030:	000d883a 	mov	r6,zero
  80b034:	000f883a 	mov	r7,zero
  80b038:	880b883a 	mov	r5,r17
  80b03c:	8009883a 	mov	r4,r16
  80b040:	08152340 	call	815234 <__eqdf2>
  80b044:	1000751e 	bne	r2,zero,80b21c <___vfprintf_internal_r+0x1c98>
  80b048:	9005883a 	mov	r2,r18
  80b04c:	dc800715 	stw	r18,28(sp)
  80b050:	d9014117 	ldw	r4,1284(sp)
  80b054:	d9414d17 	ldw	r5,1332(sp)
  80b058:	00c019c4 	movi	r3,103
  80b05c:	1125c83a 	sub	r18,r2,r4
  80b060:	28c06826 	beq	r5,r3,80b204 <___vfprintf_internal_r+0x1c80>
  80b064:	008011c4 	movi	r2,71
  80b068:	28806626 	beq	r5,r2,80b204 <___vfprintf_internal_r+0x1c80>
  80b06c:	d9000517 	ldw	r4,20(sp)
  80b070:	d8c14d17 	ldw	r3,1332(sp)
  80b074:	00801944 	movi	r2,101
  80b078:	10c05516 	blt	r2,r3,80b1d0 <___vfprintf_internal_r+0x1c4c>
  80b07c:	213fffc4 	addi	r4,r4,-1
  80b080:	d9000515 	stw	r4,20(sp)
  80b084:	d8c00805 	stb	r3,32(sp)
  80b088:	2021883a 	mov	r16,r4
  80b08c:	2000c116 	blt	r4,zero,80b394 <___vfprintf_internal_r+0x1e10>
  80b090:	00800ac4 	movi	r2,43
  80b094:	d8800845 	stb	r2,33(sp)
  80b098:	00800244 	movi	r2,9
  80b09c:	1400af0e 	bge	r2,r16,80b35c <___vfprintf_internal_r+0x1dd8>
  80b0a0:	1027883a 	mov	r19,r2
  80b0a4:	dc400b84 	addi	r17,sp,46
  80b0a8:	8009883a 	mov	r4,r16
  80b0ac:	01400284 	movi	r5,10
  80b0b0:	08053580 	call	805358 <__modsi3>
  80b0b4:	10800c04 	addi	r2,r2,48
  80b0b8:	8c7fffc4 	addi	r17,r17,-1
  80b0bc:	8009883a 	mov	r4,r16
  80b0c0:	01400284 	movi	r5,10
  80b0c4:	88800005 	stb	r2,0(r17)
  80b0c8:	08052f80 	call	8052f8 <__divsi3>
  80b0cc:	1021883a 	mov	r16,r2
  80b0d0:	98bff516 	blt	r19,r2,80b0a8 <___vfprintf_internal_r+0x1b24>
  80b0d4:	10c00c04 	addi	r3,r2,48
  80b0d8:	d88009c4 	addi	r2,sp,39
  80b0dc:	108001c4 	addi	r2,r2,7
  80b0e0:	897fffc4 	addi	r5,r17,-1
  80b0e4:	88ffffc5 	stb	r3,-1(r17)
  80b0e8:	2880a72e 	bgeu	r5,r2,80b388 <___vfprintf_internal_r+0x1e04>
  80b0ec:	1009883a 	mov	r4,r2
  80b0f0:	d9800804 	addi	r6,sp,32
  80b0f4:	d8c00884 	addi	r3,sp,34
  80b0f8:	28800003 	ldbu	r2,0(r5)
  80b0fc:	29400044 	addi	r5,r5,1
  80b100:	18800005 	stb	r2,0(r3)
  80b104:	18c00044 	addi	r3,r3,1
  80b108:	293ffb36 	bltu	r5,r4,80b0f8 <___vfprintf_internal_r+0x1b74>
  80b10c:	1987c83a 	sub	r3,r3,r6
  80b110:	00800044 	movi	r2,1
  80b114:	d8c14815 	stw	r3,1312(sp)
  80b118:	90cf883a 	add	r7,r18,r3
  80b11c:	1480960e 	bge	r2,r18,80b378 <___vfprintf_internal_r+0x1df4>
  80b120:	39c00044 	addi	r7,r7,1
  80b124:	d9c14515 	stw	r7,1300(sp)
  80b128:	38003416 	blt	r7,zero,80b1fc <___vfprintf_internal_r+0x1c78>
  80b12c:	e0803fcc 	andi	r2,fp,255
  80b130:	1080201c 	xori	r2,r2,128
  80b134:	10bfe004 	addi	r2,r2,-128
  80b138:	10004e26 	beq	r2,zero,80b274 <___vfprintf_internal_r+0x1cf0>
  80b13c:	00800b44 	movi	r2,45
  80b140:	dc814715 	stw	r18,1308(sp)
  80b144:	d8014615 	stw	zero,1304(sp)
  80b148:	d8800405 	stb	r2,16(sp)
  80b14c:	003bb106 	br	80a014 <___vfprintf_internal_r+0xa90>
  80b150:	00800b44 	movi	r2,45
  80b154:	d8800405 	stb	r2,16(sp)
  80b158:	003d3306 	br	80a628 <___vfprintf_internal_r+0x10a4>
  80b15c:	d9014f17 	ldw	r4,1340(sp)
  80b160:	b00b883a 	mov	r5,r22
  80b164:	d9800c04 	addi	r6,sp,48
  80b168:	080952c0 	call	80952c <__sprint_r>
  80b16c:	103abd1e 	bne	r2,zero,809c64 <___vfprintf_internal_r+0x6e0>
  80b170:	003abb06 	br	809c60 <___vfprintf_internal_r+0x6dc>
  80b174:	38800017 	ldw	r2,0(r7)
  80b178:	39c00104 	addi	r7,r7,4
  80b17c:	d9c14015 	stw	r7,1280(sp)
  80b180:	d9414b17 	ldw	r5,1324(sp)
  80b184:	d9c14017 	ldw	r7,1280(sp)
  80b188:	11400015 	stw	r5,0(r2)
  80b18c:	00395906 	br	8096f4 <___vfprintf_internal_r+0x170>
  80b190:	980f883a 	mov	r7,r19
  80b194:	dcc14515 	stw	r19,1300(sp)
  80b198:	d8014615 	stw	zero,1304(sp)
  80b19c:	003b9b06 	br	80a00c <___vfprintf_internal_r+0xa88>
  80b1a0:	0027883a 	mov	r19,zero
  80b1a4:	00397806 	br	809788 <___vfprintf_internal_r+0x204>
  80b1a8:	00c02174 	movhi	r3,133
  80b1ac:	18f1cc04 	addi	r3,r3,-14544
  80b1b0:	100f883a 	mov	r7,r2
  80b1b4:	d8814515 	stw	r2,1300(sp)
  80b1b8:	d8c14115 	stw	r3,1284(sp)
  80b1bc:	0039e006 	br	809940 <___vfprintf_internal_r+0x3bc>
  80b1c0:	00802174 	movhi	r2,133
  80b1c4:	10b1cb04 	addi	r2,r2,-14548
  80b1c8:	d8814115 	stw	r2,1284(sp)
  80b1cc:	003d1c06 	br	80a640 <___vfprintf_internal_r+0x10bc>
  80b1d0:	d9414d17 	ldw	r5,1332(sp)
  80b1d4:	00801984 	movi	r2,102
  80b1d8:	28804926 	beq	r5,r2,80b300 <___vfprintf_internal_r+0x1d7c>
  80b1dc:	200f883a 	mov	r7,r4
  80b1e0:	24805716 	blt	r4,r18,80b340 <___vfprintf_internal_r+0x1dbc>
  80b1e4:	d9414c17 	ldw	r5,1328(sp)
  80b1e8:	2880004c 	andi	r2,r5,1
  80b1ec:	10000126 	beq	r2,zero,80b1f4 <___vfprintf_internal_r+0x1c70>
  80b1f0:	21c00044 	addi	r7,r4,1
  80b1f4:	d9c14515 	stw	r7,1300(sp)
  80b1f8:	383fcc0e 	bge	r7,zero,80b12c <___vfprintf_internal_r+0x1ba8>
  80b1fc:	d8014515 	stw	zero,1300(sp)
  80b200:	003fca06 	br	80b12c <___vfprintf_internal_r+0x1ba8>
  80b204:	d9000517 	ldw	r4,20(sp)
  80b208:	00bfff04 	movi	r2,-4
  80b20c:	1100480e 	bge	r2,r4,80b330 <___vfprintf_internal_r+0x1dac>
  80b210:	99004716 	blt	r19,r4,80b330 <___vfprintf_internal_r+0x1dac>
  80b214:	d8c14d15 	stw	r3,1332(sp)
  80b218:	003ff006 	br	80b1dc <___vfprintf_internal_r+0x1c58>
  80b21c:	d8800717 	ldw	r2,28(sp)
  80b220:	14bf8b2e 	bgeu	r2,r18,80b050 <___vfprintf_internal_r+0x1acc>
  80b224:	9007883a 	mov	r3,r18
  80b228:	01000c04 	movi	r4,48
  80b22c:	11000005 	stb	r4,0(r2)
  80b230:	10800044 	addi	r2,r2,1
  80b234:	d8800715 	stw	r2,28(sp)
  80b238:	18bffc1e 	bne	r3,r2,80b22c <___vfprintf_internal_r+0x1ca8>
  80b23c:	003f8406 	br	80b050 <___vfprintf_internal_r+0x1acc>
  80b240:	d8814117 	ldw	r2,1284(sp)
  80b244:	10c00007 	ldb	r3,0(r2)
  80b248:	00800c04 	movi	r2,48
  80b24c:	18805b26 	beq	r3,r2,80b3bc <___vfprintf_internal_r+0x1e38>
  80b250:	d9000517 	ldw	r4,20(sp)
  80b254:	9125883a 	add	r18,r18,r4
  80b258:	003f7506 	br	80b030 <___vfprintf_internal_r+0x1aac>
  80b25c:	d9014c17 	ldw	r4,1328(sp)
  80b260:	2080004c 	andi	r2,r4,1
  80b264:	1005003a 	cmpeq	r2,r2,zero
  80b268:	103f6a26 	beq	r2,zero,80b014 <___vfprintf_internal_r+0x1a90>
  80b26c:	d8800717 	ldw	r2,28(sp)
  80b270:	003f7706 	br	80b050 <___vfprintf_internal_r+0x1acc>
  80b274:	d9c14515 	stw	r7,1300(sp)
  80b278:	38004d16 	blt	r7,zero,80b3b0 <___vfprintf_internal_r+0x1e2c>
  80b27c:	dc814715 	stw	r18,1308(sp)
  80b280:	d8014615 	stw	zero,1304(sp)
  80b284:	003b6106 	br	80a00c <___vfprintf_internal_r+0xa88>
  80b288:	d9014f17 	ldw	r4,1340(sp)
  80b28c:	d8800504 	addi	r2,sp,20
  80b290:	d8800115 	stw	r2,4(sp)
  80b294:	d8c00604 	addi	r3,sp,24
  80b298:	d8800704 	addi	r2,sp,28
  80b29c:	800b883a 	mov	r5,r16
  80b2a0:	880d883a 	mov	r6,r17
  80b2a4:	01c000c4 	movi	r7,3
  80b2a8:	d8c00215 	stw	r3,8(sp)
  80b2ac:	d8800315 	stw	r2,12(sp)
  80b2b0:	dcc00015 	stw	r19,0(sp)
  80b2b4:	9829883a 	mov	r20,r19
  80b2b8:	080d0100 	call	80d010 <_dtoa_r>
  80b2bc:	d8814115 	stw	r2,1284(sp)
  80b2c0:	003f5106 	br	80b008 <___vfprintf_internal_r+0x1a84>
  80b2c4:	d8c14217 	ldw	r3,1288(sp)
  80b2c8:	d9014317 	ldw	r4,1292(sp)
  80b2cc:	07000b44 	movi	fp,45
  80b2d0:	1821883a 	mov	r16,r3
  80b2d4:	2460003c 	xorhi	r17,r4,32768
  80b2d8:	003f3106 	br	80afa0 <___vfprintf_internal_r+0x1a1c>
  80b2dc:	9d000044 	addi	r20,r19,1
  80b2e0:	003f3906 	br	80afc8 <___vfprintf_internal_r+0x1a44>
  80b2e4:	983f251e 	bne	r19,zero,80af7c <___vfprintf_internal_r+0x19f8>
  80b2e8:	04c00044 	movi	r19,1
  80b2ec:	003f2306 	br	80af7c <___vfprintf_internal_r+0x19f8>
  80b2f0:	04c00184 	movi	r19,6
  80b2f4:	003f2106 	br	80af7c <___vfprintf_internal_r+0x19f8>
  80b2f8:	d8014515 	stw	zero,1300(sp)
  80b2fc:	003eee06 	br	80aeb8 <___vfprintf_internal_r+0x1934>
  80b300:	200f883a 	mov	r7,r4
  80b304:	0100370e 	bge	zero,r4,80b3e4 <___vfprintf_internal_r+0x1e60>
  80b308:	9800031e 	bne	r19,zero,80b318 <___vfprintf_internal_r+0x1d94>
  80b30c:	d9814c17 	ldw	r6,1328(sp)
  80b310:	3080004c 	andi	r2,r6,1
  80b314:	103fb726 	beq	r2,zero,80b1f4 <___vfprintf_internal_r+0x1c70>
  80b318:	20800044 	addi	r2,r4,1
  80b31c:	98a7883a 	add	r19,r19,r2
  80b320:	dcc14515 	stw	r19,1300(sp)
  80b324:	980f883a 	mov	r7,r19
  80b328:	983f800e 	bge	r19,zero,80b12c <___vfprintf_internal_r+0x1ba8>
  80b32c:	003fb306 	br	80b1fc <___vfprintf_internal_r+0x1c78>
  80b330:	d9814d17 	ldw	r6,1332(sp)
  80b334:	31bfff84 	addi	r6,r6,-2
  80b338:	d9814d15 	stw	r6,1332(sp)
  80b33c:	003f4c06 	br	80b070 <___vfprintf_internal_r+0x1aec>
  80b340:	0100180e 	bge	zero,r4,80b3a4 <___vfprintf_internal_r+0x1e20>
  80b344:	00800044 	movi	r2,1
  80b348:	1485883a 	add	r2,r2,r18
  80b34c:	d8814515 	stw	r2,1300(sp)
  80b350:	100f883a 	mov	r7,r2
  80b354:	103f750e 	bge	r2,zero,80b12c <___vfprintf_internal_r+0x1ba8>
  80b358:	003fa806 	br	80b1fc <___vfprintf_internal_r+0x1c78>
  80b35c:	80c00c04 	addi	r3,r16,48
  80b360:	00800c04 	movi	r2,48
  80b364:	d8c008c5 	stb	r3,35(sp)
  80b368:	d9800804 	addi	r6,sp,32
  80b36c:	d8c00904 	addi	r3,sp,36
  80b370:	d8800885 	stb	r2,34(sp)
  80b374:	003f6506 	br	80b10c <___vfprintf_internal_r+0x1b88>
  80b378:	d9014c17 	ldw	r4,1328(sp)
  80b37c:	2084703a 	and	r2,r4,r2
  80b380:	103f9c26 	beq	r2,zero,80b1f4 <___vfprintf_internal_r+0x1c70>
  80b384:	003f6606 	br	80b120 <___vfprintf_internal_r+0x1b9c>
  80b388:	d9800804 	addi	r6,sp,32
  80b38c:	d8c00884 	addi	r3,sp,34
  80b390:	003f5e06 	br	80b10c <___vfprintf_internal_r+0x1b88>
  80b394:	00800b44 	movi	r2,45
  80b398:	0121c83a 	sub	r16,zero,r4
  80b39c:	d8800845 	stb	r2,33(sp)
  80b3a0:	003f3d06 	br	80b098 <___vfprintf_internal_r+0x1b14>
  80b3a4:	00800084 	movi	r2,2
  80b3a8:	1105c83a 	sub	r2,r2,r4
  80b3ac:	003fe606 	br	80b348 <___vfprintf_internal_r+0x1dc4>
  80b3b0:	d8014515 	stw	zero,1300(sp)
  80b3b4:	dc814715 	stw	r18,1308(sp)
  80b3b8:	003fb106 	br	80b280 <___vfprintf_internal_r+0x1cfc>
  80b3bc:	000d883a 	mov	r6,zero
  80b3c0:	000f883a 	mov	r7,zero
  80b3c4:	8009883a 	mov	r4,r16
  80b3c8:	880b883a 	mov	r5,r17
  80b3cc:	08152bc0 	call	8152bc <__nedf2>
  80b3d0:	103f9f26 	beq	r2,zero,80b250 <___vfprintf_internal_r+0x1ccc>
  80b3d4:	00800044 	movi	r2,1
  80b3d8:	1509c83a 	sub	r4,r2,r20
  80b3dc:	d9000515 	stw	r4,20(sp)
  80b3e0:	003f9b06 	br	80b250 <___vfprintf_internal_r+0x1ccc>
  80b3e4:	98000d1e 	bne	r19,zero,80b41c <___vfprintf_internal_r+0x1e98>
  80b3e8:	d8c14c17 	ldw	r3,1328(sp)
  80b3ec:	1880004c 	andi	r2,r3,1
  80b3f0:	10000a1e 	bne	r2,zero,80b41c <___vfprintf_internal_r+0x1e98>
  80b3f4:	01000044 	movi	r4,1
  80b3f8:	200f883a 	mov	r7,r4
  80b3fc:	d9014515 	stw	r4,1300(sp)
  80b400:	003f4a06 	br	80b12c <___vfprintf_internal_r+0x1ba8>
  80b404:	3cc00017 	ldw	r19,0(r7)
  80b408:	39c00104 	addi	r7,r7,4
  80b40c:	983d0e0e 	bge	r19,zero,80a848 <___vfprintf_internal_r+0x12c4>
  80b410:	b8c00007 	ldb	r3,0(r23)
  80b414:	04ffffc4 	movi	r19,-1
  80b418:	0038d906 	br	809780 <___vfprintf_internal_r+0x1fc>
  80b41c:	9cc00084 	addi	r19,r19,2
  80b420:	dcc14515 	stw	r19,1300(sp)
  80b424:	980f883a 	mov	r7,r19
  80b428:	983f400e 	bge	r19,zero,80b12c <___vfprintf_internal_r+0x1ba8>
  80b42c:	003f7306 	br	80b1fc <___vfprintf_internal_r+0x1c78>

0080b430 <__vfprintf_internal>:
  80b430:	00802174 	movhi	r2,133
  80b434:	10828104 	addi	r2,r2,2564
  80b438:	2013883a 	mov	r9,r4
  80b43c:	11000017 	ldw	r4,0(r2)
  80b440:	2805883a 	mov	r2,r5
  80b444:	300f883a 	mov	r7,r6
  80b448:	480b883a 	mov	r5,r9
  80b44c:	100d883a 	mov	r6,r2
  80b450:	08095841 	jmpi	809584 <___vfprintf_internal_r>

0080b454 <__svfscanf_r>:
  80b454:	deff4e04 	addi	sp,sp,-712
  80b458:	dd80ae15 	stw	r22,696(sp)
  80b45c:	dd00ac15 	stw	r20,688(sp)
  80b460:	dc40a915 	stw	r17,676(sp)
  80b464:	dc00a815 	stw	r16,672(sp)
  80b468:	dfc0b115 	stw	ra,708(sp)
  80b46c:	df00b015 	stw	fp,704(sp)
  80b470:	ddc0af15 	stw	r23,700(sp)
  80b474:	dd40ad15 	stw	r21,692(sp)
  80b478:	dcc0ab15 	stw	r19,684(sp)
  80b47c:	dc80aa15 	stw	r18,680(sp)
  80b480:	202d883a 	mov	r22,r4
  80b484:	2821883a 	mov	r16,r5
  80b488:	d9c0a415 	stw	r7,656(sp)
  80b48c:	3029883a 	mov	r20,r6
  80b490:	d800a215 	stw	zero,648(sp)
  80b494:	0023883a 	mov	r17,zero
  80b498:	d800a115 	stw	zero,644(sp)
  80b49c:	d800a015 	stw	zero,640(sp)
  80b4a0:	a1000007 	ldb	r4,0(r20)
  80b4a4:	d9000115 	stw	r4,4(sp)
  80b4a8:	20001f26 	beq	r4,zero,80b528 <__svfscanf_r+0xd4>
  80b4ac:	04802174 	movhi	r18,133
  80b4b0:	94828004 	addi	r18,r18,2560
  80b4b4:	91800017 	ldw	r6,0(r18)
  80b4b8:	a5000044 	addi	r20,r20,1
  80b4bc:	3107883a 	add	r3,r6,r4
  80b4c0:	18800003 	ldbu	r2,0(r3)
  80b4c4:	1080020c 	andi	r2,r2,8
  80b4c8:	10002426 	beq	r2,zero,80b55c <__svfscanf_r+0x108>
  80b4cc:	80c00117 	ldw	r3,4(r16)
  80b4d0:	00c00e0e 	bge	zero,r3,80b50c <__svfscanf_r+0xb8>
  80b4d4:	81400017 	ldw	r5,0(r16)
  80b4d8:	90800017 	ldw	r2,0(r18)
  80b4dc:	28c00003 	ldbu	r3,0(r5)
  80b4e0:	1887883a 	add	r3,r3,r2
  80b4e4:	19000003 	ldbu	r4,0(r3)
  80b4e8:	2100020c 	andi	r4,r4,8
  80b4ec:	203fec26 	beq	r4,zero,80b4a0 <__svfscanf_r+0x4c>
  80b4f0:	80c00117 	ldw	r3,4(r16)
  80b4f4:	29800044 	addi	r6,r5,1
  80b4f8:	8c400044 	addi	r17,r17,1
  80b4fc:	18ffffc4 	addi	r3,r3,-1
  80b500:	81800015 	stw	r6,0(r16)
  80b504:	80c00115 	stw	r3,4(r16)
  80b508:	00fff216 	blt	zero,r3,80b4d4 <__svfscanf_r+0x80>
  80b50c:	b009883a 	mov	r4,r22
  80b510:	800b883a 	mov	r5,r16
  80b514:	08077740 	call	807774 <__srefill_r>
  80b518:	103fee26 	beq	r2,zero,80b4d4 <__svfscanf_r+0x80>
  80b51c:	a1000007 	ldb	r4,0(r20)
  80b520:	d9000115 	stw	r4,4(sp)
  80b524:	203fe11e 	bne	r4,zero,80b4ac <__svfscanf_r+0x58>
  80b528:	d880a217 	ldw	r2,648(sp)
  80b52c:	dfc0b117 	ldw	ra,708(sp)
  80b530:	df00b017 	ldw	fp,704(sp)
  80b534:	ddc0af17 	ldw	r23,700(sp)
  80b538:	dd80ae17 	ldw	r22,696(sp)
  80b53c:	dd40ad17 	ldw	r21,692(sp)
  80b540:	dd00ac17 	ldw	r20,688(sp)
  80b544:	dcc0ab17 	ldw	r19,684(sp)
  80b548:	dc80aa17 	ldw	r18,680(sp)
  80b54c:	dc40a917 	ldw	r17,676(sp)
  80b550:	dc00a817 	ldw	r16,672(sp)
  80b554:	dec0b204 	addi	sp,sp,712
  80b558:	f800283a 	ret
  80b55c:	00800944 	movi	r2,37
  80b560:	20801626 	beq	r4,r2,80b5bc <__svfscanf_r+0x168>
  80b564:	80800117 	ldw	r2,4(r16)
  80b568:	00800b0e 	bge	zero,r2,80b598 <__svfscanf_r+0x144>
  80b56c:	81000017 	ldw	r4,0(r16)
  80b570:	a0ffffc7 	ldb	r3,-1(r20)
  80b574:	20800003 	ldbu	r2,0(r4)
  80b578:	10ffeb1e 	bne	r2,r3,80b528 <__svfscanf_r+0xd4>
  80b57c:	80c00117 	ldw	r3,4(r16)
  80b580:	21800044 	addi	r6,r4,1
  80b584:	8c400044 	addi	r17,r17,1
  80b588:	18ffffc4 	addi	r3,r3,-1
  80b58c:	80c00115 	stw	r3,4(r16)
  80b590:	81800015 	stw	r6,0(r16)
  80b594:	003fc206 	br	80b4a0 <__svfscanf_r+0x4c>
  80b598:	b009883a 	mov	r4,r22
  80b59c:	800b883a 	mov	r5,r16
  80b5a0:	08077740 	call	807774 <__srefill_r>
  80b5a4:	103ff126 	beq	r2,zero,80b56c <__svfscanf_r+0x118>
  80b5a8:	d900a217 	ldw	r4,648(sp)
  80b5ac:	2004c91e 	bne	r4,zero,80c8d4 <__svfscanf_r+0x1480>
  80b5b0:	00bfffc4 	movi	r2,-1
  80b5b4:	d880a215 	stw	r2,648(sp)
  80b5b8:	003fdb06 	br	80b528 <__svfscanf_r+0xd4>
  80b5bc:	d800a315 	stw	zero,652(sp)
  80b5c0:	0027883a 	mov	r19,zero
  80b5c4:	a0c00003 	ldbu	r3,0(r20)
  80b5c8:	00801e04 	movi	r2,120
  80b5cc:	a5000044 	addi	r20,r20,1
  80b5d0:	19403fcc 	andi	r5,r3,255
  80b5d4:	2940201c 	xori	r5,r5,128
  80b5d8:	297fe004 	addi	r5,r5,-128
  80b5dc:	10c08036 	bltu	r2,r3,80b7e0 <__svfscanf_r+0x38c>
  80b5e0:	18c5883a 	add	r2,r3,r3
  80b5e4:	1085883a 	add	r2,r2,r2
  80b5e8:	00c02074 	movhi	r3,129
  80b5ec:	18ed7f04 	addi	r3,r3,-18948
  80b5f0:	10c5883a 	add	r2,r2,r3
  80b5f4:	11000017 	ldw	r4,0(r2)
  80b5f8:	2000683a 	jmp	r4
  80b5fc:	0080b5b0 	cmpltui	r2,zero,726
  80b600:	0080b7e0 	cmpeqi	r2,zero,735
  80b604:	0080b7e0 	cmpeqi	r2,zero,735
  80b608:	0080b7e0 	cmpeqi	r2,zero,735
  80b60c:	0080b7e0 	cmpeqi	r2,zero,735
  80b610:	0080b7e0 	cmpeqi	r2,zero,735
  80b614:	0080b7e0 	cmpeqi	r2,zero,735
  80b618:	0080b7e0 	cmpeqi	r2,zero,735
  80b61c:	0080b7e0 	cmpeqi	r2,zero,735
  80b620:	0080b7e0 	cmpeqi	r2,zero,735
  80b624:	0080b7e0 	cmpeqi	r2,zero,735
  80b628:	0080b7e0 	cmpeqi	r2,zero,735
  80b62c:	0080b7e0 	cmpeqi	r2,zero,735
  80b630:	0080b7e0 	cmpeqi	r2,zero,735
  80b634:	0080b7e0 	cmpeqi	r2,zero,735
  80b638:	0080b7e0 	cmpeqi	r2,zero,735
  80b63c:	0080b7e0 	cmpeqi	r2,zero,735
  80b640:	0080b7e0 	cmpeqi	r2,zero,735
  80b644:	0080b7e0 	cmpeqi	r2,zero,735
  80b648:	0080b7e0 	cmpeqi	r2,zero,735
  80b64c:	0080b7e0 	cmpeqi	r2,zero,735
  80b650:	0080b7e0 	cmpeqi	r2,zero,735
  80b654:	0080b7e0 	cmpeqi	r2,zero,735
  80b658:	0080b7e0 	cmpeqi	r2,zero,735
  80b65c:	0080b7e0 	cmpeqi	r2,zero,735
  80b660:	0080b7e0 	cmpeqi	r2,zero,735
  80b664:	0080b7e0 	cmpeqi	r2,zero,735
  80b668:	0080b7e0 	cmpeqi	r2,zero,735
  80b66c:	0080b7e0 	cmpeqi	r2,zero,735
  80b670:	0080b7e0 	cmpeqi	r2,zero,735
  80b674:	0080b7e0 	cmpeqi	r2,zero,735
  80b678:	0080b7e0 	cmpeqi	r2,zero,735
  80b67c:	0080b7e0 	cmpeqi	r2,zero,735
  80b680:	0080b7e0 	cmpeqi	r2,zero,735
  80b684:	0080b7e0 	cmpeqi	r2,zero,735
  80b688:	0080b7e0 	cmpeqi	r2,zero,735
  80b68c:	0080b7e0 	cmpeqi	r2,zero,735
  80b690:	0080b564 	muli	r2,zero,725
  80b694:	0080b7e0 	cmpeqi	r2,zero,735
  80b698:	0080b7e0 	cmpeqi	r2,zero,735
  80b69c:	0080b7e0 	cmpeqi	r2,zero,735
  80b6a0:	0080b7e0 	cmpeqi	r2,zero,735
  80b6a4:	0080c804 	movi	r2,800
  80b6a8:	0080b7e0 	cmpeqi	r2,zero,735
  80b6ac:	0080b7e0 	cmpeqi	r2,zero,735
  80b6b0:	0080b7e0 	cmpeqi	r2,zero,735
  80b6b4:	0080b7e0 	cmpeqi	r2,zero,735
  80b6b8:	0080b7e0 	cmpeqi	r2,zero,735
  80b6bc:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6c0:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6c4:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6c8:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6cc:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6d0:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6d4:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6d8:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6dc:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6e0:	0080c200 	call	80c20 <OSCtxSw_SWITCH_PC+0x80be0>
  80b6e4:	0080b7e0 	cmpeqi	r2,zero,735
  80b6e8:	0080b7e0 	cmpeqi	r2,zero,735
  80b6ec:	0080b7e0 	cmpeqi	r2,zero,735
  80b6f0:	0080b7e0 	cmpeqi	r2,zero,735
  80b6f4:	0080b7e0 	cmpeqi	r2,zero,735
  80b6f8:	0080b7e0 	cmpeqi	r2,zero,735
  80b6fc:	0080b7e0 	cmpeqi	r2,zero,735
  80b700:	0080b7e0 	cmpeqi	r2,zero,735
  80b704:	0080b7e0 	cmpeqi	r2,zero,735
  80b708:	0080b7e0 	cmpeqi	r2,zero,735
  80b70c:	0080c980 	call	80c98 <OSCtxSw_SWITCH_PC+0x80c58>
  80b710:	0080c978 	rdprs	r2,zero,805
  80b714:	0080b7e0 	cmpeqi	r2,zero,735
  80b718:	0080c978 	rdprs	r2,zero,805
  80b71c:	0080b7e0 	cmpeqi	r2,zero,735
  80b720:	0080b7e0 	cmpeqi	r2,zero,735
  80b724:	0080b7e0 	cmpeqi	r2,zero,735
  80b728:	0080b7e0 	cmpeqi	r2,zero,735
  80b72c:	0080ca10 	cmplti	r2,zero,808
  80b730:	0080b7e0 	cmpeqi	r2,zero,735
  80b734:	0080b7e0 	cmpeqi	r2,zero,735
  80b738:	0080c9c8 	cmpgei	r2,zero,807
  80b73c:	0080b7e0 	cmpeqi	r2,zero,735
  80b740:	0080b7e0 	cmpeqi	r2,zero,735
  80b744:	0080b7e0 	cmpeqi	r2,zero,735
  80b748:	0080b7e0 	cmpeqi	r2,zero,735
  80b74c:	0080b7e0 	cmpeqi	r2,zero,735
  80b750:	0080b7e0 	cmpeqi	r2,zero,735
  80b754:	0080b7e0 	cmpeqi	r2,zero,735
  80b758:	0080b7e0 	cmpeqi	r2,zero,735
  80b75c:	0080c80c 	andi	r2,zero,800
  80b760:	0080b7e0 	cmpeqi	r2,zero,735
  80b764:	0080b7e0 	cmpeqi	r2,zero,735
  80b768:	0080c9ac 	andhi	r2,zero,806
  80b76c:	0080b7e0 	cmpeqi	r2,zero,735
  80b770:	0080b7e0 	cmpeqi	r2,zero,735
  80b774:	0080b7e0 	cmpeqi	r2,zero,735
  80b778:	0080b7e0 	cmpeqi	r2,zero,735
  80b77c:	0080b7e0 	cmpeqi	r2,zero,735
  80b780:	0080b7e0 	cmpeqi	r2,zero,735
  80b784:	0080b7e0 	cmpeqi	r2,zero,735
  80b788:	0080c9a0 	cmpeqi	r2,zero,806
  80b78c:	0080c984 	movi	r2,806
  80b790:	0080c978 	rdprs	r2,zero,805
  80b794:	0080c978 	rdprs	r2,zero,805
  80b798:	0080c978 	rdprs	r2,zero,805
  80b79c:	0080c970 	cmpltui	r2,zero,805
  80b7a0:	0080ca64 	muli	r2,zero,809
  80b7a4:	0080b7e0 	cmpeqi	r2,zero,735
  80b7a8:	0080b7e0 	cmpeqi	r2,zero,735
  80b7ac:	0080ca50 	cmplti	r2,zero,809
  80b7b0:	0080b7e0 	cmpeqi	r2,zero,735
  80b7b4:	0080c9e8 	cmpgeui	r2,zero,807
  80b7b8:	0080c9cc 	andi	r2,zero,807
  80b7bc:	0080ca20 	cmpeqi	r2,zero,808
  80b7c0:	0080b7e0 	cmpeqi	r2,zero,735
  80b7c4:	0080b7e0 	cmpeqi	r2,zero,735
  80b7c8:	0080ca18 	cmpnei	r2,zero,808
  80b7cc:	0080b7e0 	cmpeqi	r2,zero,735
  80b7d0:	0080bd50 	cmplti	r2,zero,757
  80b7d4:	0080b7e0 	cmpeqi	r2,zero,735
  80b7d8:	0080b7e0 	cmpeqi	r2,zero,735
  80b7dc:	0080c80c 	andi	r2,zero,800
  80b7e0:	2987883a 	add	r3,r5,r6
  80b7e4:	18800003 	ldbu	r2,0(r3)
  80b7e8:	1080004c 	andi	r2,r2,1
  80b7ec:	1005003a 	cmpeq	r2,r2,zero
  80b7f0:	10002c26 	beq	r2,zero,80b8a4 <__svfscanf_r+0x450>
  80b7f4:	01002074 	movhi	r4,129
  80b7f8:	2124af04 	addi	r4,r4,-27972
  80b7fc:	00800284 	movi	r2,10
  80b800:	d900a015 	stw	r4,640(sp)
  80b804:	054000c4 	movi	r21,3
  80b808:	d880a115 	stw	r2,644(sp)
  80b80c:	80c00117 	ldw	r3,4(r16)
  80b810:	00c14a0e 	bge	zero,r3,80bd3c <__svfscanf_r+0x8e8>
  80b814:	9880100c 	andi	r2,r19,64
  80b818:	10001326 	beq	r2,zero,80b868 <__svfscanf_r+0x414>
  80b81c:	00800104 	movi	r2,4
  80b820:	157f1f36 	bltu	r2,r21,80b4a0 <__svfscanf_r+0x4c>
  80b824:	ad45883a 	add	r2,r21,r21
  80b828:	1085883a 	add	r2,r2,r2
  80b82c:	00c02074 	movhi	r3,129
  80b830:	18ee1004 	addi	r3,r3,-18368
  80b834:	10c5883a 	add	r2,r2,r3
  80b838:	11000017 	ldw	r4,0(r2)
  80b83c:	2000683a 	jmp	r4
  80b840:	0080b8ac 	andhi	r2,zero,738
  80b844:	0080b9b8 	rdprs	r2,zero,742
  80b848:	0080ba2c 	andhi	r2,zero,744
  80b84c:	0080bd18 	cmpnei	r2,zero,756
  80b850:	0080bb64 	muli	r2,zero,749
  80b854:	b009883a 	mov	r4,r22
  80b858:	800b883a 	mov	r5,r16
  80b85c:	08077740 	call	807774 <__srefill_r>
  80b860:	103f511e 	bne	r2,zero,80b5a8 <__svfscanf_r+0x154>
  80b864:	8c400044 	addi	r17,r17,1
  80b868:	81400017 	ldw	r5,0(r16)
  80b86c:	90800017 	ldw	r2,0(r18)
  80b870:	28c00003 	ldbu	r3,0(r5)
  80b874:	1887883a 	add	r3,r3,r2
  80b878:	19000003 	ldbu	r4,0(r3)
  80b87c:	2100020c 	andi	r4,r4,8
  80b880:	203fe626 	beq	r4,zero,80b81c <__svfscanf_r+0x3c8>
  80b884:	80c00117 	ldw	r3,4(r16)
  80b888:	18ffffc4 	addi	r3,r3,-1
  80b88c:	80c00115 	stw	r3,4(r16)
  80b890:	00fff00e 	bge	zero,r3,80b854 <__svfscanf_r+0x400>
  80b894:	29800044 	addi	r6,r5,1
  80b898:	8c400044 	addi	r17,r17,1
  80b89c:	81800015 	stw	r6,0(r16)
  80b8a0:	003ff106 	br	80b868 <__svfscanf_r+0x414>
  80b8a4:	9cc00054 	ori	r19,r19,1
  80b8a8:	003fd206 	br	80b7f4 <__svfscanf_r+0x3a0>
  80b8ac:	d8c0a317 	ldw	r3,652(sp)
  80b8b0:	1800021e 	bne	r3,zero,80b8bc <__svfscanf_r+0x468>
  80b8b4:	01000044 	movi	r4,1
  80b8b8:	d900a315 	stw	r4,652(sp)
  80b8bc:	9880004c 	andi	r2,r19,1
  80b8c0:	1005003a 	cmpeq	r2,r2,zero
  80b8c4:	1003d91e 	bne	r2,zero,80c82c <__svfscanf_r+0x13d8>
  80b8c8:	9d40040c 	andi	r21,r19,16
  80b8cc:	a839003a 	cmpeq	fp,r21,zero
  80b8d0:	e0042526 	beq	fp,zero,80c968 <__svfscanf_r+0x1514>
  80b8d4:	d880a417 	ldw	r2,656(sp)
  80b8d8:	14c00017 	ldw	r19,0(r2)
  80b8dc:	10800104 	addi	r2,r2,4
  80b8e0:	d880a415 	stw	r2,656(sp)
  80b8e4:	d8c0a317 	ldw	r3,652(sp)
  80b8e8:	18041a26 	beq	r3,zero,80c954 <__svfscanf_r+0x1500>
  80b8ec:	01002174 	movhi	r4,133
  80b8f0:	21028504 	addi	r4,r4,2580
  80b8f4:	20800017 	ldw	r2,0(r4)
  80b8f8:	103f2b26 	beq	r2,zero,80b5a8 <__svfscanf_r+0x154>
  80b8fc:	d8804404 	addi	r2,sp,272
  80b900:	0025883a 	mov	r18,zero
  80b904:	d880a615 	stw	r2,664(sp)
  80b908:	05ffffc4 	movi	r23,-1
  80b90c:	80800017 	ldw	r2,0(r16)
  80b910:	80c00117 	ldw	r3,4(r16)
  80b914:	d900a617 	ldw	r4,664(sp)
  80b918:	12000003 	ldbu	r8,0(r2)
  80b91c:	18ffffc4 	addi	r3,r3,-1
  80b920:	11800044 	addi	r6,r2,1
  80b924:	248f883a 	add	r7,r4,r18
  80b928:	80c00115 	stw	r3,4(r16)
  80b92c:	81800015 	stw	r6,0(r16)
  80b930:	3a000005 	stb	r8,0(r7)
  80b934:	d9000204 	addi	r4,sp,8
  80b938:	000b883a 	mov	r5,zero
  80b93c:	01800204 	movi	r6,8
  80b940:	08074b80 	call	8074b8 <memset>
  80b944:	d980a617 	ldw	r6,664(sp)
  80b948:	94800044 	addi	r18,r18,1
  80b94c:	d8800204 	addi	r2,sp,8
  80b950:	b009883a 	mov	r4,r22
  80b954:	980b883a 	mov	r5,r19
  80b958:	900f883a 	mov	r7,r18
  80b95c:	d8800015 	stw	r2,0(sp)
  80b960:	080ee240 	call	80ee24 <_mbrtowc_r>
  80b964:	1007883a 	mov	r3,r2
  80b968:	15ff0f26 	beq	r2,r23,80b5a8 <__svfscanf_r+0x154>
  80b96c:	1003f11e 	bne	r2,zero,80c934 <__svfscanf_r+0x14e0>
  80b970:	a800011e 	bne	r21,zero,80b978 <__svfscanf_r+0x524>
  80b974:	98000015 	stw	zero,0(r19)
  80b978:	d8c0a317 	ldw	r3,652(sp)
  80b97c:	8ca3883a 	add	r17,r17,r18
  80b980:	18ffffc4 	addi	r3,r3,-1
  80b984:	d8c0a315 	stw	r3,652(sp)
  80b988:	e0000126 	beq	fp,zero,80b990 <__svfscanf_r+0x53c>
  80b98c:	9cc00104 	addi	r19,r19,4
  80b990:	0025883a 	mov	r18,zero
  80b994:	80c00117 	ldw	r3,4(r16)
  80b998:	00c3e90e 	bge	zero,r3,80c940 <__svfscanf_r+0x14ec>
  80b99c:	d900a317 	ldw	r4,652(sp)
  80b9a0:	2003ec26 	beq	r4,zero,80c954 <__svfscanf_r+0x1500>
  80b9a4:	00c02174 	movhi	r3,133
  80b9a8:	18c28504 	addi	r3,r3,2580
  80b9ac:	18800017 	ldw	r2,0(r3)
  80b9b0:	90bfd61e 	bne	r18,r2,80b90c <__svfscanf_r+0x4b8>
  80b9b4:	003efc06 	br	80b5a8 <__svfscanf_r+0x154>
  80b9b8:	d880a317 	ldw	r2,652(sp)
  80b9bc:	1000021e 	bne	r2,zero,80b9c8 <__svfscanf_r+0x574>
  80b9c0:	00ffffc4 	movi	r3,-1
  80b9c4:	d8c0a315 	stw	r3,652(sp)
  80b9c8:	9880040c 	andi	r2,r19,16
  80b9cc:	10036526 	beq	r2,zero,80c764 <__svfscanf_r+0x1310>
  80b9d0:	0027883a 	mov	r19,zero
  80b9d4:	dd400404 	addi	r21,sp,16
  80b9d8:	81000017 	ldw	r4,0(r16)
  80b9dc:	20800003 	ldbu	r2,0(r4)
  80b9e0:	a885883a 	add	r2,r21,r2
  80b9e4:	10c00007 	ldb	r3,0(r2)
  80b9e8:	1803be26 	beq	r3,zero,80c8e4 <__svfscanf_r+0x1490>
  80b9ec:	80c00117 	ldw	r3,4(r16)
  80b9f0:	21800044 	addi	r6,r4,1
  80b9f4:	d900a317 	ldw	r4,652(sp)
  80b9f8:	18ffffc4 	addi	r3,r3,-1
  80b9fc:	9cc00044 	addi	r19,r19,1
  80ba00:	81800015 	stw	r6,0(r16)
  80ba04:	80c00115 	stw	r3,4(r16)
  80ba08:	24c3b626 	beq	r4,r19,80c8e4 <__svfscanf_r+0x1490>
  80ba0c:	00fff216 	blt	zero,r3,80b9d8 <__svfscanf_r+0x584>
  80ba10:	b009883a 	mov	r4,r22
  80ba14:	800b883a 	mov	r5,r16
  80ba18:	08077740 	call	807774 <__srefill_r>
  80ba1c:	103fee26 	beq	r2,zero,80b9d8 <__svfscanf_r+0x584>
  80ba20:	983ee126 	beq	r19,zero,80b5a8 <__svfscanf_r+0x154>
  80ba24:	8ce3883a 	add	r17,r17,r19
  80ba28:	003e9d06 	br	80b4a0 <__svfscanf_r+0x4c>
  80ba2c:	d900a317 	ldw	r4,652(sp)
  80ba30:	2000021e 	bne	r4,zero,80ba3c <__svfscanf_r+0x5e8>
  80ba34:	00bfffc4 	movi	r2,-1
  80ba38:	d880a315 	stw	r2,652(sp)
  80ba3c:	9880004c 	andi	r2,r19,1
  80ba40:	1005003a 	cmpeq	r2,r2,zero
  80ba44:	1001f41e 	bne	r2,zero,80c218 <__svfscanf_r+0xdc4>
  80ba48:	9dc0040c 	andi	r23,r19,16
  80ba4c:	b807003a 	cmpeq	r3,r23,zero
  80ba50:	d8c0a515 	stw	r3,660(sp)
  80ba54:	1803b21e 	bne	r3,zero,80c920 <__svfscanf_r+0x14cc>
  80ba58:	dd400104 	addi	r21,sp,4
  80ba5c:	0027883a 	mov	r19,zero
  80ba60:	073fffc4 	movi	fp,-1
  80ba64:	81400017 	ldw	r5,0(r16)
  80ba68:	90800017 	ldw	r2,0(r18)
  80ba6c:	29c00003 	ldbu	r7,0(r5)
  80ba70:	38c03fcc 	andi	r3,r7,255
  80ba74:	1887883a 	add	r3,r3,r2
  80ba78:	19000003 	ldbu	r4,0(r3)
  80ba7c:	2100020c 	andi	r4,r4,8
  80ba80:	2000321e 	bne	r4,zero,80bb4c <__svfscanf_r+0x6f8>
  80ba84:	d8c0a317 	ldw	r3,652(sp)
  80ba88:	18003026 	beq	r3,zero,80bb4c <__svfscanf_r+0x6f8>
  80ba8c:	00802174 	movhi	r2,133
  80ba90:	10828504 	addi	r2,r2,2580
  80ba94:	10c00017 	ldw	r3,0(r2)
  80ba98:	98fec326 	beq	r19,r3,80b5a8 <__svfscanf_r+0x154>
  80ba9c:	d8c04404 	addi	r3,sp,272
  80baa0:	80800117 	ldw	r2,4(r16)
  80baa4:	d8c0a615 	stw	r3,664(sp)
  80baa8:	d900a617 	ldw	r4,664(sp)
  80baac:	10ffffc4 	addi	r3,r2,-1
  80bab0:	29800044 	addi	r6,r5,1
  80bab4:	80c00115 	stw	r3,4(r16)
  80bab8:	24c5883a 	add	r2,r4,r19
  80babc:	81800015 	stw	r6,0(r16)
  80bac0:	d9000204 	addi	r4,sp,8
  80bac4:	000b883a 	mov	r5,zero
  80bac8:	01800204 	movi	r6,8
  80bacc:	11c00005 	stb	r7,0(r2)
  80bad0:	08074b80 	call	8074b8 <memset>
  80bad4:	d980a617 	ldw	r6,664(sp)
  80bad8:	9cc00044 	addi	r19,r19,1
  80badc:	d8800204 	addi	r2,sp,8
  80bae0:	b009883a 	mov	r4,r22
  80bae4:	a80b883a 	mov	r5,r21
  80bae8:	980f883a 	mov	r7,r19
  80baec:	d8800015 	stw	r2,0(sp)
  80baf0:	080ee240 	call	80ee24 <_mbrtowc_r>
  80baf4:	1007883a 	mov	r3,r2
  80baf8:	173eab26 	beq	r2,fp,80b5a8 <__svfscanf_r+0x154>
  80bafc:	1003851e 	bne	r2,zero,80c914 <__svfscanf_r+0x14c0>
  80bb00:	a8000015 	stw	zero,0(r21)
  80bb04:	a9000017 	ldw	r4,0(r21)
  80bb08:	080ecbc0 	call	80ecbc <iswspace>
  80bb0c:	1003781e 	bne	r2,zero,80c8f0 <__svfscanf_r+0x149c>
  80bb10:	d900a317 	ldw	r4,652(sp)
  80bb14:	d880a517 	ldw	r2,660(sp)
  80bb18:	8ce3883a 	add	r17,r17,r19
  80bb1c:	213fffc4 	addi	r4,r4,-1
  80bb20:	d900a315 	stw	r4,652(sp)
  80bb24:	10000126 	beq	r2,zero,80bb2c <__svfscanf_r+0x6d8>
  80bb28:	ad400104 	addi	r21,r21,4
  80bb2c:	0027883a 	mov	r19,zero
  80bb30:	80c00117 	ldw	r3,4(r16)
  80bb34:	00ffcb16 	blt	zero,r3,80ba64 <__svfscanf_r+0x610>
  80bb38:	b009883a 	mov	r4,r22
  80bb3c:	800b883a 	mov	r5,r16
  80bb40:	08077740 	call	807774 <__srefill_r>
  80bb44:	103fc726 	beq	r2,zero,80ba64 <__svfscanf_r+0x610>
  80bb48:	983e971e 	bne	r19,zero,80b5a8 <__svfscanf_r+0x154>
  80bb4c:	b83e541e 	bne	r23,zero,80b4a0 <__svfscanf_r+0x4c>
  80bb50:	d900a217 	ldw	r4,648(sp)
  80bb54:	a8000015 	stw	zero,0(r21)
  80bb58:	21000044 	addi	r4,r4,1
  80bb5c:	d900a215 	stw	r4,648(sp)
  80bb60:	003e4f06 	br	80b4a0 <__svfscanf_r+0x4c>
  80bb64:	d900a317 	ldw	r4,652(sp)
  80bb68:	00805704 	movi	r2,348
  80bb6c:	20ffffc4 	addi	r3,r4,-1
  80bb70:	10c1ed2e 	bgeu	r2,r3,80c328 <__svfscanf_r+0xed4>
  80bb74:	00805744 	movi	r2,349
  80bb78:	21bfa8c4 	addi	r6,r4,-349
  80bb7c:	9d41e014 	ori	r21,r19,1920
  80bb80:	d880a315 	stw	r2,652(sp)
  80bb84:	d8c04404 	addi	r3,sp,272
  80bb88:	d8c0a615 	stw	r3,664(sp)
  80bb8c:	182f883a 	mov	r23,r3
  80bb90:	d8009f15 	stw	zero,636(sp)
  80bb94:	d8009e15 	stw	zero,632(sp)
  80bb98:	d8009d15 	stw	zero,628(sp)
  80bb9c:	d8009c15 	stw	zero,624(sp)
  80bba0:	0039883a 	mov	fp,zero
  80bba4:	0025883a 	mov	r18,zero
  80bba8:	80800017 	ldw	r2,0(r16)
  80bbac:	11400003 	ldbu	r5,0(r2)
  80bbb0:	00801384 	movi	r2,78
  80bbb4:	28fff544 	addi	r3,r5,-43
  80bbb8:	18c03fcc 	andi	r3,r3,255
  80bbbc:	10c07d36 	bltu	r2,r3,80bdb4 <__svfscanf_r+0x960>
  80bbc0:	18c5883a 	add	r2,r3,r3
  80bbc4:	1085883a 	add	r2,r2,r2
  80bbc8:	00c02074 	movhi	r3,129
  80bbcc:	18eef704 	addi	r3,r3,-17444
  80bbd0:	10c5883a 	add	r2,r2,r3
  80bbd4:	11000017 	ldw	r4,0(r2)
  80bbd8:	2000683a 	jmp	r4
  80bbdc:	0080bd6c 	andhi	r2,zero,757
  80bbe0:	0080bdb4 	movhi	r2,758
  80bbe4:	0080bd6c 	andhi	r2,zero,757
  80bbe8:	0080bf00 	call	80bf0 <OSCtxSw_SWITCH_PC+0x80bb0>
  80bbec:	0080bdb4 	movhi	r2,758
  80bbf0:	0080bf38 	rdprs	r2,zero,764
  80bbf4:	0080bf6c 	andhi	r2,zero,765
  80bbf8:	0080bf6c 	andhi	r2,zero,765
  80bbfc:	0080bf6c 	andhi	r2,zero,765
  80bc00:	0080bf6c 	andhi	r2,zero,765
  80bc04:	0080bf6c 	andhi	r2,zero,765
  80bc08:	0080bf6c 	andhi	r2,zero,765
  80bc0c:	0080bf6c 	andhi	r2,zero,765
  80bc10:	0080bf6c 	andhi	r2,zero,765
  80bc14:	0080bf6c 	andhi	r2,zero,765
  80bc18:	0080bdb4 	movhi	r2,758
  80bc1c:	0080bdb4 	movhi	r2,758
  80bc20:	0080bdb4 	movhi	r2,758
  80bc24:	0080bdb4 	movhi	r2,758
  80bc28:	0080bdb4 	movhi	r2,758
  80bc2c:	0080bdb4 	movhi	r2,758
  80bc30:	0080bdb4 	movhi	r2,758
  80bc34:	0080bf8c 	andi	r2,zero,766
  80bc38:	0080bdb4 	movhi	r2,758
  80bc3c:	0080bdb4 	movhi	r2,758
  80bc40:	0080bdb4 	movhi	r2,758
  80bc44:	0080bf9c 	xori	r2,zero,766
  80bc48:	0080c038 	rdprs	r2,zero,768
  80bc4c:	0080bdb4 	movhi	r2,758
  80bc50:	0080bdb4 	movhi	r2,758
  80bc54:	0080c054 	movui	r2,769
  80bc58:	0080bdb4 	movhi	r2,758
  80bc5c:	0080bdb4 	movhi	r2,758
  80bc60:	0080bdb4 	movhi	r2,758
  80bc64:	0080bdb4 	movhi	r2,758
  80bc68:	0080c080 	call	80c08 <OSCtxSw_SWITCH_PC+0x80bc8>
  80bc6c:	0080bdb4 	movhi	r2,758
  80bc70:	0080bdb4 	movhi	r2,758
  80bc74:	0080bdb4 	movhi	r2,758
  80bc78:	0080bdb4 	movhi	r2,758
  80bc7c:	0080bdb4 	movhi	r2,758
  80bc80:	0080c0d4 	movui	r2,771
  80bc84:	0080bdb4 	movhi	r2,758
  80bc88:	0080bdb4 	movhi	r2,758
  80bc8c:	0080bdb4 	movhi	r2,758
  80bc90:	0080bdb4 	movhi	r2,758
  80bc94:	0080c1e4 	muli	r2,zero,775
  80bc98:	0080bdb4 	movhi	r2,758
  80bc9c:	0080bdb4 	movhi	r2,758
  80bca0:	0080bdb4 	movhi	r2,758
  80bca4:	0080bdb4 	movhi	r2,758
  80bca8:	0080bdb4 	movhi	r2,758
  80bcac:	0080bdb4 	movhi	r2,758
  80bcb0:	0080bdb4 	movhi	r2,758
  80bcb4:	0080bf8c 	andi	r2,zero,766
  80bcb8:	0080bdb4 	movhi	r2,758
  80bcbc:	0080bdb4 	movhi	r2,758
  80bcc0:	0080bdb4 	movhi	r2,758
  80bcc4:	0080bf9c 	xori	r2,zero,766
  80bcc8:	0080c038 	rdprs	r2,zero,768
  80bccc:	0080bdb4 	movhi	r2,758
  80bcd0:	0080bdb4 	movhi	r2,758
  80bcd4:	0080c054 	movui	r2,769
  80bcd8:	0080bdb4 	movhi	r2,758
  80bcdc:	0080bdb4 	movhi	r2,758
  80bce0:	0080bdb4 	movhi	r2,758
  80bce4:	0080bdb4 	movhi	r2,758
  80bce8:	0080c080 	call	80c08 <OSCtxSw_SWITCH_PC+0x80bc8>
  80bcec:	0080bdb4 	movhi	r2,758
  80bcf0:	0080bdb4 	movhi	r2,758
  80bcf4:	0080bdb4 	movhi	r2,758
  80bcf8:	0080bdb4 	movhi	r2,758
  80bcfc:	0080bdb4 	movhi	r2,758
  80bd00:	0080c0d4 	movui	r2,771
  80bd04:	0080bdb4 	movhi	r2,758
  80bd08:	0080bdb4 	movhi	r2,758
  80bd0c:	0080bdb4 	movhi	r2,758
  80bd10:	0080bdb4 	movhi	r2,758
  80bd14:	0080c1e4 	muli	r2,zero,775
  80bd18:	d900a317 	ldw	r4,652(sp)
  80bd1c:	00805704 	movi	r2,348
  80bd20:	20ffffc4 	addi	r3,r4,-1
  80bd24:	10c18c2e 	bgeu	r2,r3,80c358 <__svfscanf_r+0xf04>
  80bd28:	00805744 	movi	r2,349
  80bd2c:	257fa8c4 	addi	r21,r4,-349
  80bd30:	9c836014 	ori	r18,r19,3456
  80bd34:	d880a315 	stw	r2,652(sp)
  80bd38:	0001a106 	br	80c3c0 <__svfscanf_r+0xf6c>
  80bd3c:	b009883a 	mov	r4,r22
  80bd40:	800b883a 	mov	r5,r16
  80bd44:	08077740 	call	807774 <__srefill_r>
  80bd48:	103eb226 	beq	r2,zero,80b814 <__svfscanf_r+0x3c0>
  80bd4c:	003e1606 	br	80b5a8 <__svfscanf_r+0x154>
  80bd50:	01000284 	movi	r4,10
  80bd54:	00802074 	movhi	r2,129
  80bd58:	1088e104 	addi	r2,r2,9092
  80bd5c:	054000c4 	movi	r21,3
  80bd60:	d900a115 	stw	r4,644(sp)
  80bd64:	d880a015 	stw	r2,640(sp)
  80bd68:	003ea806 	br	80b80c <__svfscanf_r+0x3b8>
  80bd6c:	a880200c 	andi	r2,r21,128
  80bd70:	10001026 	beq	r2,zero,80bdb4 <__svfscanf_r+0x960>
  80bd74:	00bfdfc4 	movi	r2,-129
  80bd78:	a8aa703a 	and	r21,r21,r2
  80bd7c:	b9400005 	stb	r5,0(r23)
  80bd80:	bdc00044 	addi	r23,r23,1
  80bd84:	80c00117 	ldw	r3,4(r16)
  80bd88:	8c400044 	addi	r17,r17,1
  80bd8c:	18bfffc4 	addi	r2,r3,-1
  80bd90:	80800115 	stw	r2,4(r16)
  80bd94:	0080610e 	bge	zero,r2,80bf1c <__svfscanf_r+0xac8>
  80bd98:	80800017 	ldw	r2,0(r16)
  80bd9c:	10800044 	addi	r2,r2,1
  80bda0:	80800015 	stw	r2,0(r16)
  80bda4:	d880a317 	ldw	r2,652(sp)
  80bda8:	10bfffc4 	addi	r2,r2,-1
  80bdac:	d880a315 	stw	r2,652(sp)
  80bdb0:	103f7d1e 	bne	r2,zero,80bba8 <__svfscanf_r+0x754>
  80bdb4:	d8c09e17 	ldw	r3,632(sp)
  80bdb8:	18000226 	beq	r3,zero,80bdc4 <__svfscanf_r+0x970>
  80bdbc:	00bfbfc4 	movi	r2,-257
  80bdc0:	a8aa703a 	and	r21,r21,r2
  80bdc4:	90ffffc4 	addi	r3,r18,-1
  80bdc8:	00800044 	movi	r2,1
  80bdcc:	10c0cd2e 	bgeu	r2,r3,80c104 <__svfscanf_r+0xcb0>
  80bdd0:	e1003fcc 	andi	r4,fp,255
  80bdd4:	2100201c 	xori	r4,r4,128
  80bdd8:	213fe004 	addi	r4,r4,-128
  80bddc:	20ffffc4 	addi	r3,r4,-1
  80bde0:	00800184 	movi	r2,6
  80bde4:	10c01736 	bltu	r2,r3,80be44 <__svfscanf_r+0x9f0>
  80bde8:	00c00084 	movi	r3,2
  80bdec:	1900880e 	bge	r3,r4,80c010 <__svfscanf_r+0xbbc>
  80bdf0:	008000c4 	movi	r2,3
  80bdf4:	1100130e 	bge	r2,r4,80be44 <__svfscanf_r+0x9f0>
  80bdf8:	e4ffffc4 	addi	r19,fp,-1
  80bdfc:	b825883a 	mov	r18,r23
  80be00:	94bfffc4 	addi	r18,r18,-1
  80be04:	91400007 	ldb	r5,0(r18)
  80be08:	b009883a 	mov	r4,r22
  80be0c:	800d883a 	mov	r6,r16
  80be10:	08129a40 	call	8129a4 <_ungetc_r>
  80be14:	9cffffc4 	addi	r19,r19,-1
  80be18:	98c03fcc 	andi	r3,r19,255
  80be1c:	18c0201c 	xori	r3,r3,128
  80be20:	18ffe004 	addi	r3,r3,-128
  80be24:	00800084 	movi	r2,2
  80be28:	18bff51e 	bne	r3,r2,80be00 <__svfscanf_r+0x9ac>
  80be2c:	e0bfff04 	addi	r2,fp,-4
  80be30:	10803fcc 	andi	r2,r2,255
  80be34:	b887c83a 	sub	r3,r23,r2
  80be38:	8885c83a 	sub	r2,r17,r2
  80be3c:	147fffc4 	addi	r17,r2,-1
  80be40:	1dffffc4 	addi	r23,r3,-1
  80be44:	a880400c 	andi	r2,r21,256
  80be48:	10001226 	beq	r2,zero,80be94 <__svfscanf_r+0xa40>
  80be4c:	a881000c 	andi	r2,r21,1024
  80be50:	1000651e 	bne	r2,zero,80bfe8 <__svfscanf_r+0xb94>
  80be54:	bdffffc4 	addi	r23,r23,-1
  80be58:	b9400007 	ldb	r5,0(r23)
  80be5c:	00801944 	movi	r2,101
  80be60:	8c7fffc4 	addi	r17,r17,-1
  80be64:	28800826 	beq	r5,r2,80be88 <__svfscanf_r+0xa34>
  80be68:	00801144 	movi	r2,69
  80be6c:	28800626 	beq	r5,r2,80be88 <__svfscanf_r+0xa34>
  80be70:	bdffffc4 	addi	r23,r23,-1
  80be74:	b009883a 	mov	r4,r22
  80be78:	800d883a 	mov	r6,r16
  80be7c:	08129a40 	call	8129a4 <_ungetc_r>
  80be80:	b9400007 	ldb	r5,0(r23)
  80be84:	8c7fffc4 	addi	r17,r17,-1
  80be88:	b009883a 	mov	r4,r22
  80be8c:	800d883a 	mov	r6,r16
  80be90:	08129a40 	call	8129a4 <_ungetc_r>
  80be94:	a880040c 	andi	r2,r21,16
  80be98:	103d811e 	bne	r2,zero,80b4a0 <__svfscanf_r+0x4c>
  80be9c:	a8c1800c 	andi	r3,r21,1536
  80bea0:	00810004 	movi	r2,1024
  80bea4:	b8000005 	stb	zero,0(r23)
  80bea8:	1880bb26 	beq	r3,r2,80c198 <__svfscanf_r+0xd44>
  80beac:	d8809d17 	ldw	r2,628(sp)
  80beb0:	1000a61e 	bne	r2,zero,80c14c <__svfscanf_r+0xcf8>
  80beb4:	d940a617 	ldw	r5,664(sp)
  80beb8:	b009883a 	mov	r4,r22
  80bebc:	000d883a 	mov	r6,zero
  80bec0:	0810a480 	call	810a48 <_strtod_r>
  80bec4:	a900004c 	andi	r4,r21,1
  80bec8:	2009003a 	cmpeq	r4,r4,zero
  80becc:	1025883a 	mov	r18,r2
  80bed0:	1827883a 	mov	r19,r3
  80bed4:	2000951e 	bne	r4,zero,80c12c <__svfscanf_r+0xcd8>
  80bed8:	d8c0a417 	ldw	r3,656(sp)
  80bedc:	18800017 	ldw	r2,0(r3)
  80bee0:	1d400104 	addi	r21,r3,4
  80bee4:	14c00115 	stw	r19,4(r2)
  80bee8:	14800015 	stw	r18,0(r2)
  80beec:	d8c0a217 	ldw	r3,648(sp)
  80bef0:	dd40a415 	stw	r21,656(sp)
  80bef4:	18c00044 	addi	r3,r3,1
  80bef8:	d8c0a215 	stw	r3,648(sp)
  80befc:	003d6806 	br	80b4a0 <__svfscanf_r+0x4c>
  80bf00:	a880800c 	andi	r2,r21,512
  80bf04:	103fab26 	beq	r2,zero,80bdb4 <__svfscanf_r+0x960>
  80bf08:	d9009e17 	ldw	r4,632(sp)
  80bf0c:	00bf5fc4 	movi	r2,-641
  80bf10:	a8aa703a 	and	r21,r21,r2
  80bf14:	d9009f15 	stw	r4,636(sp)
  80bf18:	003f9806 	br	80bd7c <__svfscanf_r+0x928>
  80bf1c:	b009883a 	mov	r4,r22
  80bf20:	800b883a 	mov	r5,r16
  80bf24:	d980a715 	stw	r6,668(sp)
  80bf28:	08077740 	call	807774 <__srefill_r>
  80bf2c:	d980a717 	ldw	r6,668(sp)
  80bf30:	103f9c26 	beq	r2,zero,80bda4 <__svfscanf_r+0x950>
  80bf34:	003f9f06 	br	80bdb4 <__svfscanf_r+0x960>
  80bf38:	a880400c 	andi	r2,r21,256
  80bf3c:	10000b26 	beq	r2,zero,80bf6c <__svfscanf_r+0xb18>
  80bf40:	00bfdfc4 	movi	r2,-129
  80bf44:	a8aa703a 	and	r21,r21,r2
  80bf48:	d8809e17 	ldw	r2,632(sp)
  80bf4c:	10800044 	addi	r2,r2,1
  80bf50:	d8809e15 	stw	r2,632(sp)
  80bf54:	303f8b26 	beq	r6,zero,80bd84 <__svfscanf_r+0x930>
  80bf58:	d8c0a317 	ldw	r3,652(sp)
  80bf5c:	31bfffc4 	addi	r6,r6,-1
  80bf60:	18c00044 	addi	r3,r3,1
  80bf64:	d8c0a315 	stw	r3,652(sp)
  80bf68:	003f8606 	br	80bd84 <__svfscanf_r+0x930>
  80bf6c:	e0803fcc 	andi	r2,fp,255
  80bf70:	1080201c 	xori	r2,r2,128
  80bf74:	10bfe004 	addi	r2,r2,-128
  80bf78:	9085883a 	add	r2,r18,r2
  80bf7c:	103f8d1e 	bne	r2,zero,80bdb4 <__svfscanf_r+0x960>
  80bf80:	00bf9fc4 	movi	r2,-385
  80bf84:	a8aa703a 	and	r21,r21,r2
  80bf88:	003f7c06 	br	80bd7c <__svfscanf_r+0x928>
  80bf8c:	00800044 	movi	r2,1
  80bf90:	90bf881e 	bne	r18,r2,80bdb4 <__svfscanf_r+0x960>
  80bf94:	04800084 	movi	r18,2
  80bf98:	003f7806 	br	80bd7c <__svfscanf_r+0x928>
  80bf9c:	a8c1400c 	andi	r3,r21,1280
  80bfa0:	00810004 	movi	r2,1024
  80bfa4:	18800426 	beq	r3,r2,80bfb8 <__svfscanf_r+0xb64>
  80bfa8:	a884703a 	and	r2,r21,r2
  80bfac:	103f8126 	beq	r2,zero,80bdb4 <__svfscanf_r+0x960>
  80bfb0:	d8809e17 	ldw	r2,632(sp)
  80bfb4:	103f8326 	beq	r2,zero,80bdc4 <__svfscanf_r+0x970>
  80bfb8:	a880800c 	andi	r2,r21,512
  80bfbc:	1000051e 	bne	r2,zero,80bfd4 <__svfscanf_r+0xb80>
  80bfc0:	d8c09e17 	ldw	r3,632(sp)
  80bfc4:	d9009f17 	ldw	r4,636(sp)
  80bfc8:	ddc09c15 	stw	r23,624(sp)
  80bfcc:	1907c83a 	sub	r3,r3,r4
  80bfd0:	d8c09d15 	stw	r3,628(sp)
  80bfd4:	00be7fc4 	movi	r2,-1537
  80bfd8:	a884703a 	and	r2,r21,r2
  80bfdc:	15406014 	ori	r21,r2,384
  80bfe0:	d8009e15 	stw	zero,632(sp)
  80bfe4:	003f6506 	br	80bd7c <__svfscanf_r+0x928>
  80bfe8:	d900a617 	ldw	r4,664(sp)
  80bfec:	25fd4e2e 	bgeu	r4,r23,80b528 <__svfscanf_r+0xd4>
  80bff0:	bdffffc4 	addi	r23,r23,-1
  80bff4:	b9400007 	ldb	r5,0(r23)
  80bff8:	b009883a 	mov	r4,r22
  80bffc:	800d883a 	mov	r6,r16
  80c000:	08129a40 	call	8129a4 <_ungetc_r>
  80c004:	d880a617 	ldw	r2,664(sp)
  80c008:	15fff936 	bltu	r2,r23,80bff0 <__svfscanf_r+0xb9c>
  80c00c:	003d4606 	br	80b528 <__svfscanf_r+0xd4>
  80c010:	d900a617 	ldw	r4,664(sp)
  80c014:	25fd442e 	bgeu	r4,r23,80b528 <__svfscanf_r+0xd4>
  80c018:	bdffffc4 	addi	r23,r23,-1
  80c01c:	b9400007 	ldb	r5,0(r23)
  80c020:	b009883a 	mov	r4,r22
  80c024:	800d883a 	mov	r6,r16
  80c028:	08129a40 	call	8129a4 <_ungetc_r>
  80c02c:	d8c0a617 	ldw	r3,664(sp)
  80c030:	1dfff936 	bltu	r3,r23,80c018 <__svfscanf_r+0xbc4>
  80c034:	003d3c06 	br	80b528 <__svfscanf_r+0xd4>
  80c038:	e0c03fcc 	andi	r3,fp,255
  80c03c:	18c0201c 	xori	r3,r3,128
  80c040:	18ffe004 	addi	r3,r3,-128
  80c044:	00800084 	movi	r2,2
  80c048:	18bf5a1e 	bne	r3,r2,80bdb4 <__svfscanf_r+0x960>
  80c04c:	070000c4 	movi	fp,3
  80c050:	003f4a06 	br	80bd7c <__svfscanf_r+0x928>
  80c054:	e0c03fcc 	andi	r3,fp,255
  80c058:	18c0201c 	xori	r3,r3,128
  80c05c:	18ffe004 	addi	r3,r3,-128
  80c060:	1800231e 	bne	r3,zero,80c0f0 <__svfscanf_r+0xc9c>
  80c064:	a8c1c00c 	andi	r3,r21,1792
  80c068:	0081c004 	movi	r2,1792
  80c06c:	18bf511e 	bne	r3,r2,80bdb4 <__svfscanf_r+0x960>
  80c070:	00be1fc4 	movi	r2,-1921
  80c074:	a8aa703a 	and	r21,r21,r2
  80c078:	07000044 	movi	fp,1
  80c07c:	003f3f06 	br	80bd7c <__svfscanf_r+0x928>
  80c080:	9000101e 	bne	r18,zero,80c0c4 <__svfscanf_r+0xc70>
  80c084:	a8c1c00c 	andi	r3,r21,1792
  80c088:	0081c004 	movi	r2,1792
  80c08c:	18800926 	beq	r3,r2,80c0b4 <__svfscanf_r+0xc60>
  80c090:	e0c03fcc 	andi	r3,fp,255
  80c094:	18c0201c 	xori	r3,r3,128
  80c098:	18ffe004 	addi	r3,r3,-128
  80c09c:	00800044 	movi	r2,1
  80c0a0:	18800226 	beq	r3,r2,80c0ac <__svfscanf_r+0xc58>
  80c0a4:	00800104 	movi	r2,4
  80c0a8:	18bf421e 	bne	r3,r2,80bdb4 <__svfscanf_r+0x960>
  80c0ac:	e7000044 	addi	fp,fp,1
  80c0b0:	003f3206 	br	80bd7c <__svfscanf_r+0x928>
  80c0b4:	00be1fc4 	movi	r2,-1921
  80c0b8:	a8aa703a 	and	r21,r21,r2
  80c0bc:	04800044 	movi	r18,1
  80c0c0:	003f2e06 	br	80bd7c <__svfscanf_r+0x928>
  80c0c4:	00800084 	movi	r2,2
  80c0c8:	90bff11e 	bne	r18,r2,80c090 <__svfscanf_r+0xc3c>
  80c0cc:	048000c4 	movi	r18,3
  80c0d0:	003f2a06 	br	80bd7c <__svfscanf_r+0x928>
  80c0d4:	e0c03fcc 	andi	r3,fp,255
  80c0d8:	18c0201c 	xori	r3,r3,128
  80c0dc:	18ffe004 	addi	r3,r3,-128
  80c0e0:	00800184 	movi	r2,6
  80c0e4:	18bf331e 	bne	r3,r2,80bdb4 <__svfscanf_r+0x960>
  80c0e8:	070001c4 	movi	fp,7
  80c0ec:	003f2306 	br	80bd7c <__svfscanf_r+0x928>
  80c0f0:	008000c4 	movi	r2,3
  80c0f4:	18bfed26 	beq	r3,r2,80c0ac <__svfscanf_r+0xc58>
  80c0f8:	00800144 	movi	r2,5
  80c0fc:	18bfeb26 	beq	r3,r2,80c0ac <__svfscanf_r+0xc58>
  80c100:	003f2c06 	br	80bdb4 <__svfscanf_r+0x960>
  80c104:	d900a617 	ldw	r4,664(sp)
  80c108:	25fd072e 	bgeu	r4,r23,80b528 <__svfscanf_r+0xd4>
  80c10c:	bdffffc4 	addi	r23,r23,-1
  80c110:	b9400007 	ldb	r5,0(r23)
  80c114:	b009883a 	mov	r4,r22
  80c118:	800d883a 	mov	r6,r16
  80c11c:	08129a40 	call	8129a4 <_ungetc_r>
  80c120:	d880a617 	ldw	r2,664(sp)
  80c124:	15fff936 	bltu	r2,r23,80c10c <__svfscanf_r+0xcb8>
  80c128:	003cff06 	br	80b528 <__svfscanf_r+0xd4>
  80c12c:	a880008c 	andi	r2,r21,2
  80c130:	10002026 	beq	r2,zero,80c1b4 <__svfscanf_r+0xd60>
  80c134:	d900a417 	ldw	r4,656(sp)
  80c138:	20800017 	ldw	r2,0(r4)
  80c13c:	25400104 	addi	r21,r4,4
  80c140:	10c00115 	stw	r3,4(r2)
  80c144:	14800015 	stw	r18,0(r2)
  80c148:	003f6806 	br	80beec <__svfscanf_r+0xa98>
  80c14c:	d8c09c17 	ldw	r3,624(sp)
  80c150:	b009883a 	mov	r4,r22
  80c154:	000d883a 	mov	r6,zero
  80c158:	19400044 	addi	r5,r3,1
  80c15c:	01c00284 	movi	r7,10
  80c160:	08092bc0 	call	8092bc <_strtol_r>
  80c164:	d9009d17 	ldw	r4,628(sp)
  80c168:	110dc83a 	sub	r6,r2,r4
  80c16c:	d8c0a617 	ldw	r3,664(sp)
  80c170:	d9009c17 	ldw	r4,624(sp)
  80c174:	188054c4 	addi	r2,r3,339
  80c178:	20800236 	bltu	r4,r2,80c184 <__svfscanf_r+0xd30>
  80c17c:	18805484 	addi	r2,r3,338
  80c180:	d8809c15 	stw	r2,624(sp)
  80c184:	d9009c17 	ldw	r4,624(sp)
  80c188:	01402174 	movhi	r5,133
  80c18c:	2971e304 	addi	r5,r5,-14452
  80c190:	0807b340 	call	807b34 <sprintf>
  80c194:	003f4706 	br	80beb4 <__svfscanf_r+0xa60>
  80c198:	d8c09e17 	ldw	r3,632(sp)
  80c19c:	d9009f17 	ldw	r4,636(sp)
  80c1a0:	1905c83a 	sub	r2,r3,r4
  80c1a4:	103f4326 	beq	r2,zero,80beb4 <__svfscanf_r+0xa60>
  80c1a8:	008dc83a 	sub	r6,zero,r2
  80c1ac:	ddc09c15 	stw	r23,624(sp)
  80c1b0:	003fee06 	br	80c16c <__svfscanf_r+0xd18>
  80c1b4:	d880a417 	ldw	r2,656(sp)
  80c1b8:	9009883a 	mov	r4,r18
  80c1bc:	180b883a 	mov	r5,r3
  80c1c0:	15c00017 	ldw	r23,0(r2)
  80c1c4:	15400104 	addi	r21,r2,4
  80c1c8:	08109080 	call	810908 <__isnand>
  80c1cc:	10021c1e 	bne	r2,zero,80ca40 <__svfscanf_r+0x15ec>
  80c1d0:	980b883a 	mov	r5,r19
  80c1d4:	9009883a 	mov	r4,r18
  80c1d8:	08157340 	call	815734 <__truncdfsf2>
  80c1dc:	b8800015 	stw	r2,0(r23)
  80c1e0:	003f4206 	br	80beec <__svfscanf_r+0xa98>
  80c1e4:	e0c03fcc 	andi	r3,fp,255
  80c1e8:	18c0201c 	xori	r3,r3,128
  80c1ec:	18ffe004 	addi	r3,r3,-128
  80c1f0:	008001c4 	movi	r2,7
  80c1f4:	18beef1e 	bne	r3,r2,80bdb4 <__svfscanf_r+0x960>
  80c1f8:	07000204 	movi	fp,8
  80c1fc:	003edf06 	br	80bd7c <__svfscanf_r+0x928>
  80c200:	d900a317 	ldw	r4,652(sp)
  80c204:	208002a4 	muli	r2,r4,10
  80c208:	1145883a 	add	r2,r2,r5
  80c20c:	10bff404 	addi	r2,r2,-48
  80c210:	d880a315 	stw	r2,652(sp)
  80c214:	003ceb06 	br	80b5c4 <__svfscanf_r+0x170>
  80c218:	9880040c 	andi	r2,r19,16
  80c21c:	10001426 	beq	r2,zero,80c270 <__svfscanf_r+0xe1c>
  80c220:	0027883a 	mov	r19,zero
  80c224:	00000906 	br	80c24c <__svfscanf_r+0xdf8>
  80c228:	80c00117 	ldw	r3,4(r16)
  80c22c:	d880a317 	ldw	r2,652(sp)
  80c230:	29800044 	addi	r6,r5,1
  80c234:	18ffffc4 	addi	r3,r3,-1
  80c238:	9cc00044 	addi	r19,r19,1
  80c23c:	81800015 	stw	r6,0(r16)
  80c240:	80c00115 	stw	r3,4(r16)
  80c244:	14fdf726 	beq	r2,r19,80ba24 <__svfscanf_r+0x5d0>
  80c248:	00c02c0e 	bge	zero,r3,80c2fc <__svfscanf_r+0xea8>
  80c24c:	81400017 	ldw	r5,0(r16)
  80c250:	90800017 	ldw	r2,0(r18)
  80c254:	28c00003 	ldbu	r3,0(r5)
  80c258:	1887883a 	add	r3,r3,r2
  80c25c:	19000003 	ldbu	r4,0(r3)
  80c260:	2100020c 	andi	r4,r4,8
  80c264:	203ff026 	beq	r4,zero,80c228 <__svfscanf_r+0xdd4>
  80c268:	8ce3883a 	add	r17,r17,r19
  80c26c:	003c8c06 	br	80b4a0 <__svfscanf_r+0x4c>
  80c270:	d8c0a417 	ldw	r3,656(sp)
  80c274:	1d400017 	ldw	r21,0(r3)
  80c278:	a827883a 	mov	r19,r21
  80c27c:	00000e06 	br	80c2b8 <__svfscanf_r+0xe64>
  80c280:	80800117 	ldw	r2,4(r16)
  80c284:	d900a317 	ldw	r4,652(sp)
  80c288:	29800044 	addi	r6,r5,1
  80c28c:	10ffffc4 	addi	r3,r2,-1
  80c290:	213fffc4 	addi	r4,r4,-1
  80c294:	d900a315 	stw	r4,652(sp)
  80c298:	80c00115 	stw	r3,4(r16)
  80c29c:	28800003 	ldbu	r2,0(r5)
  80c2a0:	98800005 	stb	r2,0(r19)
  80c2a4:	81800015 	stw	r6,0(r16)
  80c2a8:	9cc00044 	addi	r19,r19,1
  80c2ac:	20000926 	beq	r4,zero,80c2d4 <__svfscanf_r+0xe80>
  80c2b0:	80800117 	ldw	r2,4(r16)
  80c2b4:	0080170e 	bge	zero,r2,80c314 <__svfscanf_r+0xec0>
  80c2b8:	81400017 	ldw	r5,0(r16)
  80c2bc:	90800017 	ldw	r2,0(r18)
  80c2c0:	28c00003 	ldbu	r3,0(r5)
  80c2c4:	1887883a 	add	r3,r3,r2
  80c2c8:	19000003 	ldbu	r4,0(r3)
  80c2cc:	2100020c 	andi	r4,r4,8
  80c2d0:	203feb26 	beq	r4,zero,80c280 <__svfscanf_r+0xe2c>
  80c2d4:	9d45c83a 	sub	r2,r19,r21
  80c2d8:	d8c0a217 	ldw	r3,648(sp)
  80c2dc:	88a3883a 	add	r17,r17,r2
  80c2e0:	d880a417 	ldw	r2,656(sp)
  80c2e4:	18c00044 	addi	r3,r3,1
  80c2e8:	d8c0a215 	stw	r3,648(sp)
  80c2ec:	10800104 	addi	r2,r2,4
  80c2f0:	d880a415 	stw	r2,656(sp)
  80c2f4:	98000005 	stb	zero,0(r19)
  80c2f8:	003c6906 	br	80b4a0 <__svfscanf_r+0x4c>
  80c2fc:	b009883a 	mov	r4,r22
  80c300:	800b883a 	mov	r5,r16
  80c304:	08077740 	call	807774 <__srefill_r>
  80c308:	103fd026 	beq	r2,zero,80c24c <__svfscanf_r+0xdf8>
  80c30c:	8ce3883a 	add	r17,r17,r19
  80c310:	003c6306 	br	80b4a0 <__svfscanf_r+0x4c>
  80c314:	b009883a 	mov	r4,r22
  80c318:	800b883a 	mov	r5,r16
  80c31c:	08077740 	call	807774 <__srefill_r>
  80c320:	103fe526 	beq	r2,zero,80c2b8 <__svfscanf_r+0xe64>
  80c324:	003feb06 	br	80c2d4 <__svfscanf_r+0xe80>
  80c328:	d900a317 	ldw	r4,652(sp)
  80c32c:	9d41e014 	ori	r21,r19,1920
  80c330:	2000821e 	bne	r4,zero,80c53c <__svfscanf_r+0x10e8>
  80c334:	d8c04404 	addi	r3,sp,272
  80c338:	182f883a 	mov	r23,r3
  80c33c:	0039883a 	mov	fp,zero
  80c340:	d8c0a615 	stw	r3,664(sp)
  80c344:	d8009c15 	stw	zero,624(sp)
  80c348:	d8009d15 	stw	zero,628(sp)
  80c34c:	d8009f15 	stw	zero,636(sp)
  80c350:	d8009e15 	stw	zero,632(sp)
  80c354:	003e9e06 	br	80bdd0 <__svfscanf_r+0x97c>
  80c358:	d900a317 	ldw	r4,652(sp)
  80c35c:	9c836014 	ori	r18,r19,3456
  80c360:	2000161e 	bne	r4,zero,80c3bc <__svfscanf_r+0xf68>
  80c364:	d8804404 	addi	r2,sp,272
  80c368:	d880a615 	stw	r2,664(sp)
  80c36c:	002f883a 	mov	r23,zero
  80c370:	1027883a 	mov	r19,r2
  80c374:	9080400c 	andi	r2,r18,256
  80c378:	10000926 	beq	r2,zero,80c3a0 <__svfscanf_r+0xf4c>
  80c37c:	d8c0a617 	ldw	r3,664(sp)
  80c380:	1cc0052e 	bgeu	r3,r19,80c398 <__svfscanf_r+0xf44>
  80c384:	9cffffc4 	addi	r19,r19,-1
  80c388:	99400007 	ldb	r5,0(r19)
  80c38c:	b009883a 	mov	r4,r22
  80c390:	800d883a 	mov	r6,r16
  80c394:	08129a40 	call	8129a4 <_ungetc_r>
  80c398:	d900a617 	ldw	r4,664(sp)
  80c39c:	24fc6226 	beq	r4,r19,80b528 <__svfscanf_r+0xd4>
  80c3a0:	9080040c 	andi	r2,r18,16
  80c3a4:	10006726 	beq	r2,zero,80c544 <__svfscanf_r+0x10f0>
  80c3a8:	d8c0a617 	ldw	r3,664(sp)
  80c3ac:	98c5c83a 	sub	r2,r19,r3
  80c3b0:	b885883a 	add	r2,r23,r2
  80c3b4:	88a3883a 	add	r17,r17,r2
  80c3b8:	003c3906 	br	80b4a0 <__svfscanf_r+0x4c>
  80c3bc:	002b883a 	mov	r21,zero
  80c3c0:	d8c04404 	addi	r3,sp,272
  80c3c4:	d8c0a615 	stw	r3,664(sp)
  80c3c8:	002f883a 	mov	r23,zero
  80c3cc:	1827883a 	mov	r19,r3
  80c3d0:	81800017 	ldw	r6,0(r16)
  80c3d4:	00c01344 	movi	r3,77
  80c3d8:	31400003 	ldbu	r5,0(r6)
  80c3dc:	28bff544 	addi	r2,r5,-43
  80c3e0:	10803fcc 	andi	r2,r2,255
  80c3e4:	18bfe336 	bltu	r3,r2,80c374 <__svfscanf_r+0xf20>
  80c3e8:	1085883a 	add	r2,r2,r2
  80c3ec:	1085883a 	add	r2,r2,r2
  80c3f0:	00c02074 	movhi	r3,129
  80c3f4:	18f10104 	addi	r3,r3,-15356
  80c3f8:	10c5883a 	add	r2,r2,r3
  80c3fc:	11000017 	ldw	r4,0(r2)
  80c400:	2000683a 	jmp	r4
  80c404:	0080c598 	cmpnei	r2,zero,790
  80c408:	0080c374 	movhi	r2,781
  80c40c:	0080c598 	cmpnei	r2,zero,790
  80c410:	0080c374 	movhi	r2,781
  80c414:	0080c374 	movhi	r2,781
  80c418:	0080c5dc 	xori	r2,zero,791
  80c41c:	0080c6d8 	cmpnei	r2,zero,795
  80c420:	0080c6d8 	cmpnei	r2,zero,795
  80c424:	0080c6d8 	cmpnei	r2,zero,795
  80c428:	0080c6d8 	cmpnei	r2,zero,795
  80c42c:	0080c6d8 	cmpnei	r2,zero,795
  80c430:	0080c6d8 	cmpnei	r2,zero,795
  80c434:	0080c6d8 	cmpnei	r2,zero,795
  80c438:	0080c700 	call	80c70 <OSCtxSw_SWITCH_PC+0x80c30>
  80c43c:	0080c700 	call	80c70 <OSCtxSw_SWITCH_PC+0x80c30>
  80c440:	0080c374 	movhi	r2,781
  80c444:	0080c374 	movhi	r2,781
  80c448:	0080c374 	movhi	r2,781
  80c44c:	0080c374 	movhi	r2,781
  80c450:	0080c374 	movhi	r2,781
  80c454:	0080c374 	movhi	r2,781
  80c458:	0080c374 	movhi	r2,781
  80c45c:	0080c730 	cmpltui	r2,zero,796
  80c460:	0080c730 	cmpltui	r2,zero,796
  80c464:	0080c730 	cmpltui	r2,zero,796
  80c468:	0080c730 	cmpltui	r2,zero,796
  80c46c:	0080c730 	cmpltui	r2,zero,796
  80c470:	0080c730 	cmpltui	r2,zero,796
  80c474:	0080c374 	movhi	r2,781
  80c478:	0080c374 	movhi	r2,781
  80c47c:	0080c374 	movhi	r2,781
  80c480:	0080c374 	movhi	r2,781
  80c484:	0080c374 	movhi	r2,781
  80c488:	0080c374 	movhi	r2,781
  80c48c:	0080c374 	movhi	r2,781
  80c490:	0080c374 	movhi	r2,781
  80c494:	0080c374 	movhi	r2,781
  80c498:	0080c374 	movhi	r2,781
  80c49c:	0080c374 	movhi	r2,781
  80c4a0:	0080c374 	movhi	r2,781
  80c4a4:	0080c374 	movhi	r2,781
  80c4a8:	0080c374 	movhi	r2,781
  80c4ac:	0080c374 	movhi	r2,781
  80c4b0:	0080c374 	movhi	r2,781
  80c4b4:	0080c374 	movhi	r2,781
  80c4b8:	0080c740 	call	80c74 <OSCtxSw_SWITCH_PC+0x80c34>
  80c4bc:	0080c374 	movhi	r2,781
  80c4c0:	0080c374 	movhi	r2,781
  80c4c4:	0080c374 	movhi	r2,781
  80c4c8:	0080c374 	movhi	r2,781
  80c4cc:	0080c374 	movhi	r2,781
  80c4d0:	0080c374 	movhi	r2,781
  80c4d4:	0080c374 	movhi	r2,781
  80c4d8:	0080c374 	movhi	r2,781
  80c4dc:	0080c730 	cmpltui	r2,zero,796
  80c4e0:	0080c730 	cmpltui	r2,zero,796
  80c4e4:	0080c730 	cmpltui	r2,zero,796
  80c4e8:	0080c730 	cmpltui	r2,zero,796
  80c4ec:	0080c730 	cmpltui	r2,zero,796
  80c4f0:	0080c730 	cmpltui	r2,zero,796
  80c4f4:	0080c374 	movhi	r2,781
  80c4f8:	0080c374 	movhi	r2,781
  80c4fc:	0080c374 	movhi	r2,781
  80c500:	0080c374 	movhi	r2,781
  80c504:	0080c374 	movhi	r2,781
  80c508:	0080c374 	movhi	r2,781
  80c50c:	0080c374 	movhi	r2,781
  80c510:	0080c374 	movhi	r2,781
  80c514:	0080c374 	movhi	r2,781
  80c518:	0080c374 	movhi	r2,781
  80c51c:	0080c374 	movhi	r2,781
  80c520:	0080c374 	movhi	r2,781
  80c524:	0080c374 	movhi	r2,781
  80c528:	0080c374 	movhi	r2,781
  80c52c:	0080c374 	movhi	r2,781
  80c530:	0080c374 	movhi	r2,781
  80c534:	0080c374 	movhi	r2,781
  80c538:	0080c740 	call	80c74 <OSCtxSw_SWITCH_PC+0x80c34>
  80c53c:	000d883a 	mov	r6,zero
  80c540:	003d9006 	br	80bb84 <__svfscanf_r+0x730>
  80c544:	98000005 	stb	zero,0(r19)
  80c548:	d8c0a017 	ldw	r3,640(sp)
  80c54c:	d940a617 	ldw	r5,664(sp)
  80c550:	d9c0a117 	ldw	r7,644(sp)
  80c554:	b009883a 	mov	r4,r22
  80c558:	000d883a 	mov	r6,zero
  80c55c:	183ee83a 	callr	r3
  80c560:	1007883a 	mov	r3,r2
  80c564:	9080080c 	andi	r2,r18,32
  80c568:	10004d1e 	bne	r2,zero,80c6a0 <__svfscanf_r+0x124c>
  80c56c:	9080010c 	andi	r2,r18,4
  80c570:	10003426 	beq	r2,zero,80c644 <__svfscanf_r+0x11f0>
  80c574:	d900a417 	ldw	r4,656(sp)
  80c578:	20800017 	ldw	r2,0(r4)
  80c57c:	21000104 	addi	r4,r4,4
  80c580:	d900a415 	stw	r4,656(sp)
  80c584:	10c0000d 	sth	r3,0(r2)
  80c588:	d880a217 	ldw	r2,648(sp)
  80c58c:	10800044 	addi	r2,r2,1
  80c590:	d880a215 	stw	r2,648(sp)
  80c594:	003f8406 	br	80c3a8 <__svfscanf_r+0xf54>
  80c598:	9080200c 	andi	r2,r18,128
  80c59c:	103f7526 	beq	r2,zero,80c374 <__svfscanf_r+0xf20>
  80c5a0:	00bfdfc4 	movi	r2,-129
  80c5a4:	90a4703a 	and	r18,r18,r2
  80c5a8:	99400005 	stb	r5,0(r19)
  80c5ac:	9cc00044 	addi	r19,r19,1
  80c5b0:	80c00117 	ldw	r3,4(r16)
  80c5b4:	18ffffc4 	addi	r3,r3,-1
  80c5b8:	80c00115 	stw	r3,4(r16)
  80c5bc:	00c0130e 	bge	zero,r3,80c60c <__svfscanf_r+0x11b8>
  80c5c0:	31800044 	addi	r6,r6,1
  80c5c4:	81800015 	stw	r6,0(r16)
  80c5c8:	d880a317 	ldw	r2,652(sp)
  80c5cc:	10bfffc4 	addi	r2,r2,-1
  80c5d0:	d880a315 	stw	r2,652(sp)
  80c5d4:	103f7e1e 	bne	r2,zero,80c3d0 <__svfscanf_r+0xf7c>
  80c5d8:	003f6606 	br	80c374 <__svfscanf_r+0xf20>
  80c5dc:	9082000c 	andi	r2,r18,2048
  80c5e0:	103ff126 	beq	r2,zero,80c5a8 <__svfscanf_r+0x1154>
  80c5e4:	d8c0a117 	ldw	r3,644(sp)
  80c5e8:	1800031e 	bne	r3,zero,80c5f8 <__svfscanf_r+0x11a4>
  80c5ec:	01000204 	movi	r4,8
  80c5f0:	94808014 	ori	r18,r18,512
  80c5f4:	d900a115 	stw	r4,644(sp)
  80c5f8:	9081000c 	andi	r2,r18,1024
  80c5fc:	10000826 	beq	r2,zero,80c620 <__svfscanf_r+0x11cc>
  80c600:	00be9fc4 	movi	r2,-1409
  80c604:	90a4703a 	and	r18,r18,r2
  80c608:	003fe706 	br	80c5a8 <__svfscanf_r+0x1154>
  80c60c:	b009883a 	mov	r4,r22
  80c610:	800b883a 	mov	r5,r16
  80c614:	08077740 	call	807774 <__srefill_r>
  80c618:	103feb26 	beq	r2,zero,80c5c8 <__svfscanf_r+0x1174>
  80c61c:	003f5506 	br	80c374 <__svfscanf_r+0xf20>
  80c620:	a8000426 	beq	r21,zero,80c634 <__svfscanf_r+0x11e0>
  80c624:	d880a317 	ldw	r2,652(sp)
  80c628:	ad7fffc4 	addi	r21,r21,-1
  80c62c:	10800044 	addi	r2,r2,1
  80c630:	d880a315 	stw	r2,652(sp)
  80c634:	00bf1fc4 	movi	r2,-897
  80c638:	90a4703a 	and	r18,r18,r2
  80c63c:	bdc00044 	addi	r23,r23,1
  80c640:	003fdb06 	br	80c5b0 <__svfscanf_r+0x115c>
  80c644:	9080004c 	andi	r2,r18,1
  80c648:	1005003a 	cmpeq	r2,r2,zero
  80c64c:	10001426 	beq	r2,zero,80c6a0 <__svfscanf_r+0x124c>
  80c650:	9080008c 	andi	r2,r18,2
  80c654:	10001226 	beq	r2,zero,80c6a0 <__svfscanf_r+0x124c>
  80c658:	d8c0a017 	ldw	r3,640(sp)
  80c65c:	00802074 	movhi	r2,129
  80c660:	1088e104 	addi	r2,r2,9092
  80c664:	18801426 	beq	r3,r2,80c6b8 <__svfscanf_r+0x1264>
  80c668:	d9c0a117 	ldw	r7,644(sp)
  80c66c:	d940a617 	ldw	r5,664(sp)
  80c670:	000d883a 	mov	r6,zero
  80c674:	b009883a 	mov	r4,r22
  80c678:	081206c0 	call	81206c <_strtoll_r>
  80c67c:	100d883a 	mov	r6,r2
  80c680:	180f883a 	mov	r7,r3
  80c684:	d900a417 	ldw	r4,656(sp)
  80c688:	20800017 	ldw	r2,0(r4)
  80c68c:	21000104 	addi	r4,r4,4
  80c690:	d900a415 	stw	r4,656(sp)
  80c694:	11c00115 	stw	r7,4(r2)
  80c698:	11800015 	stw	r6,0(r2)
  80c69c:	003fba06 	br	80c588 <__svfscanf_r+0x1134>
  80c6a0:	d900a417 	ldw	r4,656(sp)
  80c6a4:	20800017 	ldw	r2,0(r4)
  80c6a8:	21000104 	addi	r4,r4,4
  80c6ac:	d900a415 	stw	r4,656(sp)
  80c6b0:	10c00015 	stw	r3,0(r2)
  80c6b4:	003fb406 	br	80c588 <__svfscanf_r+0x1134>
  80c6b8:	d9c0a117 	ldw	r7,644(sp)
  80c6bc:	d940a617 	ldw	r5,664(sp)
  80c6c0:	000d883a 	mov	r6,zero
  80c6c4:	b009883a 	mov	r4,r22
  80c6c8:	08125d80 	call	8125d8 <_strtoull_r>
  80c6cc:	100d883a 	mov	r6,r2
  80c6d0:	180f883a 	mov	r7,r3
  80c6d4:	003feb06 	br	80c684 <__svfscanf_r+0x1230>
  80c6d8:	d8c0a117 	ldw	r3,644(sp)
  80c6dc:	18c5883a 	add	r2,r3,r3
  80c6e0:	00c02174 	movhi	r3,133
  80c6e4:	18f1e484 	addi	r3,r3,-14446
  80c6e8:	10c5883a 	add	r2,r2,r3
  80c6ec:	1080000f 	ldh	r2,0(r2)
  80c6f0:	00fd1fc4 	movi	r3,-2945
  80c6f4:	90e4703a 	and	r18,r18,r3
  80c6f8:	d880a115 	stw	r2,644(sp)
  80c6fc:	003faa06 	br	80c5a8 <__svfscanf_r+0x1154>
  80c700:	d900a117 	ldw	r4,644(sp)
  80c704:	00c02174 	movhi	r3,133
  80c708:	18f1e484 	addi	r3,r3,-14446
  80c70c:	2105883a 	add	r2,r4,r4
  80c710:	10c5883a 	add	r2,r2,r3
  80c714:	1080000f 	ldh	r2,0(r2)
  80c718:	00c00204 	movi	r3,8
  80c71c:	d880a115 	stw	r2,644(sp)
  80c720:	18bf140e 	bge	r3,r2,80c374 <__svfscanf_r+0xf20>
  80c724:	00bd1fc4 	movi	r2,-2945
  80c728:	90a4703a 	and	r18,r18,r2
  80c72c:	003f9e06 	br	80c5a8 <__svfscanf_r+0x1154>
  80c730:	d8c0a117 	ldw	r3,644(sp)
  80c734:	00800284 	movi	r2,10
  80c738:	10fffa16 	blt	r2,r3,80c724 <__svfscanf_r+0x12d0>
  80c73c:	003f0d06 	br	80c374 <__svfscanf_r+0xf20>
  80c740:	90c1800c 	andi	r3,r18,1536
  80c744:	00808004 	movi	r2,512
  80c748:	18bf0a1e 	bne	r3,r2,80c374 <__svfscanf_r+0xf20>
  80c74c:	00bf7fc4 	movi	r2,-513
  80c750:	9084703a 	and	r2,r18,r2
  80c754:	01000404 	movi	r4,16
  80c758:	14814014 	ori	r18,r2,1280
  80c75c:	d900a115 	stw	r4,644(sp)
  80c760:	003f9106 	br	80c5a8 <__svfscanf_r+0x1154>
  80c764:	d880a417 	ldw	r2,656(sp)
  80c768:	dd400404 	addi	r21,sp,16
  80c76c:	14800017 	ldw	r18,0(r2)
  80c770:	9027883a 	mov	r19,r18
  80c774:	81000017 	ldw	r4,0(r16)
  80c778:	20800003 	ldbu	r2,0(r4)
  80c77c:	a885883a 	add	r2,r21,r2
  80c780:	10c00007 	ldb	r3,0(r2)
  80c784:	18001426 	beq	r3,zero,80c7d8 <__svfscanf_r+0x1384>
  80c788:	d8c0a317 	ldw	r3,652(sp)
  80c78c:	80800117 	ldw	r2,4(r16)
  80c790:	21800044 	addi	r6,r4,1
  80c794:	18ffffc4 	addi	r3,r3,-1
  80c798:	d8c0a315 	stw	r3,652(sp)
  80c79c:	10ffffc4 	addi	r3,r2,-1
  80c7a0:	80c00115 	stw	r3,4(r16)
  80c7a4:	20800003 	ldbu	r2,0(r4)
  80c7a8:	90800005 	stb	r2,0(r18)
  80c7ac:	d900a317 	ldw	r4,652(sp)
  80c7b0:	81800015 	stw	r6,0(r16)
  80c7b4:	94800044 	addi	r18,r18,1
  80c7b8:	20000726 	beq	r4,zero,80c7d8 <__svfscanf_r+0x1384>
  80c7bc:	80800117 	ldw	r2,4(r16)
  80c7c0:	00bfec16 	blt	zero,r2,80c774 <__svfscanf_r+0x1320>
  80c7c4:	b009883a 	mov	r4,r22
  80c7c8:	800b883a 	mov	r5,r16
  80c7cc:	08077740 	call	807774 <__srefill_r>
  80c7d0:	103fe826 	beq	r2,zero,80c774 <__svfscanf_r+0x1320>
  80c7d4:	9cbb7426 	beq	r19,r18,80b5a8 <__svfscanf_r+0x154>
  80c7d8:	94e7c83a 	sub	r19,r18,r19
  80c7dc:	983b5226 	beq	r19,zero,80b528 <__svfscanf_r+0xd4>
  80c7e0:	90000005 	stb	zero,0(r18)
  80c7e4:	d880a417 	ldw	r2,656(sp)
  80c7e8:	d8c0a217 	ldw	r3,648(sp)
  80c7ec:	8ce3883a 	add	r17,r17,r19
  80c7f0:	10800104 	addi	r2,r2,4
  80c7f4:	18c00044 	addi	r3,r3,1
  80c7f8:	d880a415 	stw	r2,656(sp)
  80c7fc:	d8c0a215 	stw	r3,648(sp)
  80c800:	003b2706 	br	80b4a0 <__svfscanf_r+0x4c>
  80c804:	9cc00414 	ori	r19,r19,16
  80c808:	003b6e06 	br	80b5c4 <__svfscanf_r+0x170>
  80c80c:	00c00404 	movi	r3,16
  80c810:	01002074 	movhi	r4,129
  80c814:	2108e104 	addi	r4,r4,9092
  80c818:	9cc08014 	ori	r19,r19,512
  80c81c:	054000c4 	movi	r21,3
  80c820:	d8c0a115 	stw	r3,644(sp)
  80c824:	d900a015 	stw	r4,640(sp)
  80c828:	003bf806 	br	80b80c <__svfscanf_r+0x3b8>
  80c82c:	9880040c 	andi	r2,r19,16
  80c830:	10001926 	beq	r2,zero,80c898 <__svfscanf_r+0x1444>
  80c834:	0027883a 	mov	r19,zero
  80c838:	00000b06 	br	80c868 <__svfscanf_r+0x1414>
  80c83c:	80800017 	ldw	r2,0(r16)
  80c840:	b009883a 	mov	r4,r22
  80c844:	800b883a 	mov	r5,r16
  80c848:	148d883a 	add	r6,r2,r18
  80c84c:	81800015 	stw	r6,0(r16)
  80c850:	9ca7883a 	add	r19,r19,r18
  80c854:	08077740 	call	807774 <__srefill_r>
  80c858:	103c711e 	bne	r2,zero,80ba20 <__svfscanf_r+0x5cc>
  80c85c:	d900a317 	ldw	r4,652(sp)
  80c860:	2489c83a 	sub	r4,r4,r18
  80c864:	d900a315 	stw	r4,652(sp)
  80c868:	84800117 	ldw	r18,4(r16)
  80c86c:	d8c0a317 	ldw	r3,652(sp)
  80c870:	90fff216 	blt	r18,r3,80c83c <__svfscanf_r+0x13e8>
  80c874:	d900a317 	ldw	r4,652(sp)
  80c878:	80800017 	ldw	r2,0(r16)
  80c87c:	9927883a 	add	r19,r19,r4
  80c880:	9107c83a 	sub	r3,r18,r4
  80c884:	110d883a 	add	r6,r2,r4
  80c888:	8ce3883a 	add	r17,r17,r19
  80c88c:	80c00115 	stw	r3,4(r16)
  80c890:	81800015 	stw	r6,0(r16)
  80c894:	003b0206 	br	80b4a0 <__svfscanf_r+0x4c>
  80c898:	d880a417 	ldw	r2,656(sp)
  80c89c:	d980a317 	ldw	r6,652(sp)
  80c8a0:	01400044 	movi	r5,1
  80c8a4:	11000017 	ldw	r4,0(r2)
  80c8a8:	800f883a 	mov	r7,r16
  80c8ac:	0805da80 	call	805da8 <fread>
  80c8b0:	103b3d26 	beq	r2,zero,80b5a8 <__svfscanf_r+0x154>
  80c8b4:	d8c0a417 	ldw	r3,656(sp)
  80c8b8:	d900a217 	ldw	r4,648(sp)
  80c8bc:	88a3883a 	add	r17,r17,r2
  80c8c0:	18c00104 	addi	r3,r3,4
  80c8c4:	21000044 	addi	r4,r4,1
  80c8c8:	d8c0a415 	stw	r3,656(sp)
  80c8cc:	d900a215 	stw	r4,648(sp)
  80c8d0:	003af306 	br	80b4a0 <__svfscanf_r+0x4c>
  80c8d4:	8080030b 	ldhu	r2,12(r16)
  80c8d8:	1080100c 	andi	r2,r2,64
  80c8dc:	103b1226 	beq	r2,zero,80b528 <__svfscanf_r+0xd4>
  80c8e0:	003b3306 	br	80b5b0 <__svfscanf_r+0x15c>
  80c8e4:	983b1026 	beq	r19,zero,80b528 <__svfscanf_r+0xd4>
  80c8e8:	8ce3883a 	add	r17,r17,r19
  80c8ec:	003aec06 	br	80b4a0 <__svfscanf_r+0x4c>
  80c8f0:	983c9626 	beq	r19,zero,80bb4c <__svfscanf_r+0x6f8>
  80c8f4:	9cffffc4 	addi	r19,r19,-1
  80c8f8:	d8c04404 	addi	r3,sp,272
  80c8fc:	1cc5883a 	add	r2,r3,r19
  80c900:	11400003 	ldbu	r5,0(r2)
  80c904:	b009883a 	mov	r4,r22
  80c908:	800d883a 	mov	r6,r16
  80c90c:	08129a40 	call	8129a4 <_ungetc_r>
  80c910:	003ff706 	br	80c8f0 <__svfscanf_r+0x149c>
  80c914:	00bfff84 	movi	r2,-2
  80c918:	18bc7a1e 	bne	r3,r2,80bb04 <__svfscanf_r+0x6b0>
  80c91c:	003c8406 	br	80bb30 <__svfscanf_r+0x6dc>
  80c920:	d900a417 	ldw	r4,656(sp)
  80c924:	25400017 	ldw	r21,0(r4)
  80c928:	21000104 	addi	r4,r4,4
  80c92c:	d900a415 	stw	r4,656(sp)
  80c930:	003c4a06 	br	80ba5c <__svfscanf_r+0x608>
  80c934:	00bfff84 	movi	r2,-2
  80c938:	18bc0f1e 	bne	r3,r2,80b978 <__svfscanf_r+0x524>
  80c93c:	003c1506 	br	80b994 <__svfscanf_r+0x540>
  80c940:	b009883a 	mov	r4,r22
  80c944:	800b883a 	mov	r5,r16
  80c948:	08077740 	call	807774 <__srefill_r>
  80c94c:	103c1326 	beq	r2,zero,80b99c <__svfscanf_r+0x548>
  80c950:	903b151e 	bne	r18,zero,80b5a8 <__svfscanf_r+0x154>
  80c954:	a83ad21e 	bne	r21,zero,80b4a0 <__svfscanf_r+0x4c>
  80c958:	d880a217 	ldw	r2,648(sp)
  80c95c:	10800044 	addi	r2,r2,1
  80c960:	d880a215 	stw	r2,648(sp)
  80c964:	003ace06 	br	80b4a0 <__svfscanf_r+0x4c>
  80c968:	0027883a 	mov	r19,zero
  80c96c:	003bdd06 	br	80b8e4 <__svfscanf_r+0x490>
  80c970:	9cc00114 	ori	r19,r19,4
  80c974:	003b1306 	br	80b5c4 <__svfscanf_r+0x170>
  80c978:	05400104 	movi	r21,4
  80c97c:	003ba306 	br	80b80c <__svfscanf_r+0x3b8>
  80c980:	9cc00054 	ori	r19,r19,1
  80c984:	00802074 	movhi	r2,129
  80c988:	10a4af04 	addi	r2,r2,-27972
  80c98c:	00c00284 	movi	r3,10
  80c990:	054000c4 	movi	r21,3
  80c994:	d880a015 	stw	r2,640(sp)
  80c998:	d8c0a115 	stw	r3,644(sp)
  80c99c:	003b9b06 	br	80b80c <__svfscanf_r+0x3b8>
  80c9a0:	9cc01014 	ori	r19,r19,64
  80c9a4:	002b883a 	mov	r21,zero
  80c9a8:	003b9806 	br	80b80c <__svfscanf_r+0x3b8>
  80c9ac:	a00b883a 	mov	r5,r20
  80c9b0:	d9000404 	addi	r4,sp,16
  80c9b4:	08109380 	call	810938 <__sccl>
  80c9b8:	1029883a 	mov	r20,r2
  80c9bc:	9cc01014 	ori	r19,r19,64
  80c9c0:	05400044 	movi	r21,1
  80c9c4:	003b9106 	br	80b80c <__svfscanf_r+0x3b8>
  80c9c8:	9cc00054 	ori	r19,r19,1
  80c9cc:	00800204 	movi	r2,8
  80c9d0:	00c02074 	movhi	r3,129
  80c9d4:	18c8e104 	addi	r3,r3,9092
  80c9d8:	054000c4 	movi	r21,3
  80c9dc:	d880a115 	stw	r2,644(sp)
  80c9e0:	d8c0a015 	stw	r3,640(sp)
  80c9e4:	003b8906 	br	80b80c <__svfscanf_r+0x3b8>
  80c9e8:	9880040c 	andi	r2,r19,16
  80c9ec:	103aac1e 	bne	r2,zero,80b4a0 <__svfscanf_r+0x4c>
  80c9f0:	9880010c 	andi	r2,r19,4
  80c9f4:	10002426 	beq	r2,zero,80ca88 <__svfscanf_r+0x1634>
  80c9f8:	d900a417 	ldw	r4,656(sp)
  80c9fc:	20800017 	ldw	r2,0(r4)
  80ca00:	21000104 	addi	r4,r4,4
  80ca04:	d900a415 	stw	r4,656(sp)
  80ca08:	1440000d 	sth	r17,0(r2)
  80ca0c:	003aa406 	br	80b4a0 <__svfscanf_r+0x4c>
  80ca10:	9cc00094 	ori	r19,r19,2
  80ca14:	003aeb06 	br	80b5c4 <__svfscanf_r+0x170>
  80ca18:	05400084 	movi	r21,2
  80ca1c:	003b7b06 	br	80b80c <__svfscanf_r+0x3b8>
  80ca20:	00800404 	movi	r2,16
  80ca24:	00c02074 	movhi	r3,129
  80ca28:	18c8e104 	addi	r3,r3,9092
  80ca2c:	9cc08814 	ori	r19,r19,544
  80ca30:	054000c4 	movi	r21,3
  80ca34:	d880a115 	stw	r2,644(sp)
  80ca38:	d8c0a015 	stw	r3,640(sp)
  80ca3c:	003b7306 	br	80b80c <__svfscanf_r+0x3b8>
  80ca40:	0009883a 	mov	r4,zero
  80ca44:	08109f80 	call	8109f8 <nanf>
  80ca48:	b8800015 	stw	r2,0(r23)
  80ca4c:	003d2706 	br	80beec <__svfscanf_r+0xa98>
  80ca50:	a0c00007 	ldb	r3,0(r20)
  80ca54:	00801b04 	movi	r2,108
  80ca58:	18800826 	beq	r3,r2,80ca7c <__svfscanf_r+0x1628>
  80ca5c:	9cc00054 	ori	r19,r19,1
  80ca60:	003ad806 	br	80b5c4 <__svfscanf_r+0x170>
  80ca64:	01002074 	movhi	r4,129
  80ca68:	2124af04 	addi	r4,r4,-27972
  80ca6c:	054000c4 	movi	r21,3
  80ca70:	d900a015 	stw	r4,640(sp)
  80ca74:	d800a115 	stw	zero,644(sp)
  80ca78:	003b6406 	br	80b80c <__svfscanf_r+0x3b8>
  80ca7c:	a5000044 	addi	r20,r20,1
  80ca80:	9cc00094 	ori	r19,r19,2
  80ca84:	003acf06 	br	80b5c4 <__svfscanf_r+0x170>
  80ca88:	9880004c 	andi	r2,r19,1
  80ca8c:	1005003a 	cmpeq	r2,r2,zero
  80ca90:	10000a26 	beq	r2,zero,80cabc <__svfscanf_r+0x1668>
  80ca94:	9880008c 	andi	r2,r19,2
  80ca98:	10000826 	beq	r2,zero,80cabc <__svfscanf_r+0x1668>
  80ca9c:	d900a417 	ldw	r4,656(sp)
  80caa0:	8807d7fa 	srai	r3,r17,31
  80caa4:	20800017 	ldw	r2,0(r4)
  80caa8:	21000104 	addi	r4,r4,4
  80caac:	d900a415 	stw	r4,656(sp)
  80cab0:	14400015 	stw	r17,0(r2)
  80cab4:	10c00115 	stw	r3,4(r2)
  80cab8:	003a7906 	br	80b4a0 <__svfscanf_r+0x4c>
  80cabc:	d8c0a417 	ldw	r3,656(sp)
  80cac0:	18800017 	ldw	r2,0(r3)
  80cac4:	18c00104 	addi	r3,r3,4
  80cac8:	d8c0a415 	stw	r3,656(sp)
  80cacc:	14400015 	stw	r17,0(r2)
  80cad0:	003a7306 	br	80b4a0 <__svfscanf_r+0x4c>

0080cad4 <__svfscanf>:
  80cad4:	00802174 	movhi	r2,133
  80cad8:	10828104 	addi	r2,r2,2564
  80cadc:	2013883a 	mov	r9,r4
  80cae0:	11000017 	ldw	r4,0(r2)
  80cae4:	2805883a 	mov	r2,r5
  80cae8:	300f883a 	mov	r7,r6
  80caec:	480b883a 	mov	r5,r9
  80caf0:	100d883a 	mov	r6,r2
  80caf4:	080b4541 	jmpi	80b454 <__svfscanf_r>

0080caf8 <_vfscanf_r>:
  80caf8:	defffb04 	addi	sp,sp,-20
  80cafc:	dcc00315 	stw	r19,12(sp)
  80cb00:	dc800215 	stw	r18,8(sp)
  80cb04:	dc400115 	stw	r17,4(sp)
  80cb08:	dc000015 	stw	r16,0(sp)
  80cb0c:	dfc00415 	stw	ra,16(sp)
  80cb10:	2021883a 	mov	r16,r4
  80cb14:	2823883a 	mov	r17,r5
  80cb18:	3025883a 	mov	r18,r6
  80cb1c:	3827883a 	mov	r19,r7
  80cb20:	20000226 	beq	r4,zero,80cb2c <_vfscanf_r+0x34>
  80cb24:	20800e17 	ldw	r2,56(r4)
  80cb28:	10000b26 	beq	r2,zero,80cb58 <_vfscanf_r+0x60>
  80cb2c:	8009883a 	mov	r4,r16
  80cb30:	880b883a 	mov	r5,r17
  80cb34:	900d883a 	mov	r6,r18
  80cb38:	980f883a 	mov	r7,r19
  80cb3c:	dfc00417 	ldw	ra,16(sp)
  80cb40:	dcc00317 	ldw	r19,12(sp)
  80cb44:	dc800217 	ldw	r18,8(sp)
  80cb48:	dc400117 	ldw	r17,4(sp)
  80cb4c:	dc000017 	ldw	r16,0(sp)
  80cb50:	dec00504 	addi	sp,sp,20
  80cb54:	080b4541 	jmpi	80b454 <__svfscanf_r>
  80cb58:	08057e40 	call	8057e4 <__sinit>
  80cb5c:	003ff306 	br	80cb2c <_vfscanf_r+0x34>

0080cb60 <vfscanf>:
  80cb60:	defffb04 	addi	sp,sp,-20
  80cb64:	dcc00315 	stw	r19,12(sp)
  80cb68:	04c02174 	movhi	r19,133
  80cb6c:	9cc28104 	addi	r19,r19,2564
  80cb70:	98c00017 	ldw	r3,0(r19)
  80cb74:	dc800215 	stw	r18,8(sp)
  80cb78:	dc400115 	stw	r17,4(sp)
  80cb7c:	dc000015 	stw	r16,0(sp)
  80cb80:	dfc00415 	stw	ra,16(sp)
  80cb84:	2021883a 	mov	r16,r4
  80cb88:	2823883a 	mov	r17,r5
  80cb8c:	3025883a 	mov	r18,r6
  80cb90:	18000326 	beq	r3,zero,80cba0 <vfscanf+0x40>
  80cb94:	18800e17 	ldw	r2,56(r3)
  80cb98:	1809883a 	mov	r4,r3
  80cb9c:	10000b26 	beq	r2,zero,80cbcc <vfscanf+0x6c>
  80cba0:	99000017 	ldw	r4,0(r19)
  80cba4:	800b883a 	mov	r5,r16
  80cba8:	880d883a 	mov	r6,r17
  80cbac:	900f883a 	mov	r7,r18
  80cbb0:	dfc00417 	ldw	ra,16(sp)
  80cbb4:	dcc00317 	ldw	r19,12(sp)
  80cbb8:	dc800217 	ldw	r18,8(sp)
  80cbbc:	dc400117 	ldw	r17,4(sp)
  80cbc0:	dc000017 	ldw	r16,0(sp)
  80cbc4:	dec00504 	addi	sp,sp,20
  80cbc8:	080b4541 	jmpi	80b454 <__svfscanf_r>
  80cbcc:	08057e40 	call	8057e4 <__sinit>
  80cbd0:	003ff306 	br	80cba0 <vfscanf+0x40>

0080cbd4 <_write_r>:
  80cbd4:	defffd04 	addi	sp,sp,-12
  80cbd8:	dc000015 	stw	r16,0(sp)
  80cbdc:	04002174 	movhi	r16,133
  80cbe0:	8402da04 	addi	r16,r16,2920
  80cbe4:	dc400115 	stw	r17,4(sp)
  80cbe8:	80000015 	stw	zero,0(r16)
  80cbec:	2023883a 	mov	r17,r4
  80cbf0:	2809883a 	mov	r4,r5
  80cbf4:	300b883a 	mov	r5,r6
  80cbf8:	380d883a 	mov	r6,r7
  80cbfc:	dfc00215 	stw	ra,8(sp)
  80cc00:	08226280 	call	822628 <write>
  80cc04:	1007883a 	mov	r3,r2
  80cc08:	00bfffc4 	movi	r2,-1
  80cc0c:	18800626 	beq	r3,r2,80cc28 <_write_r+0x54>
  80cc10:	1805883a 	mov	r2,r3
  80cc14:	dfc00217 	ldw	ra,8(sp)
  80cc18:	dc400117 	ldw	r17,4(sp)
  80cc1c:	dc000017 	ldw	r16,0(sp)
  80cc20:	dec00304 	addi	sp,sp,12
  80cc24:	f800283a 	ret
  80cc28:	80800017 	ldw	r2,0(r16)
  80cc2c:	103ff826 	beq	r2,zero,80cc10 <_write_r+0x3c>
  80cc30:	88800015 	stw	r2,0(r17)
  80cc34:	1805883a 	mov	r2,r3
  80cc38:	dfc00217 	ldw	ra,8(sp)
  80cc3c:	dc400117 	ldw	r17,4(sp)
  80cc40:	dc000017 	ldw	r16,0(sp)
  80cc44:	dec00304 	addi	sp,sp,12
  80cc48:	f800283a 	ret

0080cc4c <__swsetup_r>:
  80cc4c:	00802174 	movhi	r2,133
  80cc50:	10828104 	addi	r2,r2,2564
  80cc54:	10c00017 	ldw	r3,0(r2)
  80cc58:	defffd04 	addi	sp,sp,-12
  80cc5c:	dc400115 	stw	r17,4(sp)
  80cc60:	dc000015 	stw	r16,0(sp)
  80cc64:	dfc00215 	stw	ra,8(sp)
  80cc68:	2023883a 	mov	r17,r4
  80cc6c:	2821883a 	mov	r16,r5
  80cc70:	18000226 	beq	r3,zero,80cc7c <__swsetup_r+0x30>
  80cc74:	18800e17 	ldw	r2,56(r3)
  80cc78:	10001f26 	beq	r2,zero,80ccf8 <__swsetup_r+0xac>
  80cc7c:	8100030b 	ldhu	r4,12(r16)
  80cc80:	2080020c 	andi	r2,r4,8
  80cc84:	10002826 	beq	r2,zero,80cd28 <__swsetup_r+0xdc>
  80cc88:	81400417 	ldw	r5,16(r16)
  80cc8c:	28001d26 	beq	r5,zero,80cd04 <__swsetup_r+0xb8>
  80cc90:	2080004c 	andi	r2,r4,1
  80cc94:	1005003a 	cmpeq	r2,r2,zero
  80cc98:	10000b26 	beq	r2,zero,80ccc8 <__swsetup_r+0x7c>
  80cc9c:	2080008c 	andi	r2,r4,2
  80cca0:	10001226 	beq	r2,zero,80ccec <__swsetup_r+0xa0>
  80cca4:	0005883a 	mov	r2,zero
  80cca8:	80800215 	stw	r2,8(r16)
  80ccac:	28000b26 	beq	r5,zero,80ccdc <__swsetup_r+0x90>
  80ccb0:	0005883a 	mov	r2,zero
  80ccb4:	dfc00217 	ldw	ra,8(sp)
  80ccb8:	dc400117 	ldw	r17,4(sp)
  80ccbc:	dc000017 	ldw	r16,0(sp)
  80ccc0:	dec00304 	addi	sp,sp,12
  80ccc4:	f800283a 	ret
  80ccc8:	80800517 	ldw	r2,20(r16)
  80cccc:	80000215 	stw	zero,8(r16)
  80ccd0:	0085c83a 	sub	r2,zero,r2
  80ccd4:	80800615 	stw	r2,24(r16)
  80ccd8:	283ff51e 	bne	r5,zero,80ccb0 <__swsetup_r+0x64>
  80ccdc:	2080200c 	andi	r2,r4,128
  80cce0:	103ff326 	beq	r2,zero,80ccb0 <__swsetup_r+0x64>
  80cce4:	00bfffc4 	movi	r2,-1
  80cce8:	003ff206 	br	80ccb4 <__swsetup_r+0x68>
  80ccec:	80800517 	ldw	r2,20(r16)
  80ccf0:	80800215 	stw	r2,8(r16)
  80ccf4:	003fed06 	br	80ccac <__swsetup_r+0x60>
  80ccf8:	1809883a 	mov	r4,r3
  80ccfc:	08057e40 	call	8057e4 <__sinit>
  80cd00:	003fde06 	br	80cc7c <__swsetup_r+0x30>
  80cd04:	20c0a00c 	andi	r3,r4,640
  80cd08:	00808004 	movi	r2,512
  80cd0c:	18bfe026 	beq	r3,r2,80cc90 <__swsetup_r+0x44>
  80cd10:	8809883a 	mov	r4,r17
  80cd14:	800b883a 	mov	r5,r16
  80cd18:	0806a640 	call	806a64 <__smakebuf_r>
  80cd1c:	8100030b 	ldhu	r4,12(r16)
  80cd20:	81400417 	ldw	r5,16(r16)
  80cd24:	003fda06 	br	80cc90 <__swsetup_r+0x44>
  80cd28:	2080040c 	andi	r2,r4,16
  80cd2c:	103fed26 	beq	r2,zero,80cce4 <__swsetup_r+0x98>
  80cd30:	2080010c 	andi	r2,r4,4
  80cd34:	10001226 	beq	r2,zero,80cd80 <__swsetup_r+0x134>
  80cd38:	81400c17 	ldw	r5,48(r16)
  80cd3c:	28000526 	beq	r5,zero,80cd54 <__swsetup_r+0x108>
  80cd40:	80801004 	addi	r2,r16,64
  80cd44:	28800226 	beq	r5,r2,80cd50 <__swsetup_r+0x104>
  80cd48:	8809883a 	mov	r4,r17
  80cd4c:	0805f140 	call	805f14 <_free_r>
  80cd50:	80000c15 	stw	zero,48(r16)
  80cd54:	8080030b 	ldhu	r2,12(r16)
  80cd58:	81400417 	ldw	r5,16(r16)
  80cd5c:	80000115 	stw	zero,4(r16)
  80cd60:	10bff6cc 	andi	r2,r2,65499
  80cd64:	8080030d 	sth	r2,12(r16)
  80cd68:	81400015 	stw	r5,0(r16)
  80cd6c:	8080030b 	ldhu	r2,12(r16)
  80cd70:	10800214 	ori	r2,r2,8
  80cd74:	113fffcc 	andi	r4,r2,65535
  80cd78:	8080030d 	sth	r2,12(r16)
  80cd7c:	003fc306 	br	80cc8c <__swsetup_r+0x40>
  80cd80:	81400417 	ldw	r5,16(r16)
  80cd84:	003ff906 	br	80cd6c <__swsetup_r+0x120>

0080cd88 <_close_r>:
  80cd88:	defffd04 	addi	sp,sp,-12
  80cd8c:	dc000015 	stw	r16,0(sp)
  80cd90:	04002174 	movhi	r16,133
  80cd94:	8402da04 	addi	r16,r16,2920
  80cd98:	dc400115 	stw	r17,4(sp)
  80cd9c:	80000015 	stw	zero,0(r16)
  80cda0:	2023883a 	mov	r17,r4
  80cda4:	2809883a 	mov	r4,r5
  80cda8:	dfc00215 	stw	ra,8(sp)
  80cdac:	08224180 	call	822418 <close>
  80cdb0:	1007883a 	mov	r3,r2
  80cdb4:	00bfffc4 	movi	r2,-1
  80cdb8:	18800626 	beq	r3,r2,80cdd4 <_close_r+0x4c>
  80cdbc:	1805883a 	mov	r2,r3
  80cdc0:	dfc00217 	ldw	ra,8(sp)
  80cdc4:	dc400117 	ldw	r17,4(sp)
  80cdc8:	dc000017 	ldw	r16,0(sp)
  80cdcc:	dec00304 	addi	sp,sp,12
  80cdd0:	f800283a 	ret
  80cdd4:	80800017 	ldw	r2,0(r16)
  80cdd8:	103ff826 	beq	r2,zero,80cdbc <_close_r+0x34>
  80cddc:	88800015 	stw	r2,0(r17)
  80cde0:	1805883a 	mov	r2,r3
  80cde4:	dfc00217 	ldw	ra,8(sp)
  80cde8:	dc400117 	ldw	r17,4(sp)
  80cdec:	dc000017 	ldw	r16,0(sp)
  80cdf0:	dec00304 	addi	sp,sp,12
  80cdf4:	f800283a 	ret

0080cdf8 <quorem>:
  80cdf8:	28c00417 	ldw	r3,16(r5)
  80cdfc:	20800417 	ldw	r2,16(r4)
  80ce00:	defff604 	addi	sp,sp,-40
  80ce04:	ddc00715 	stw	r23,28(sp)
  80ce08:	dd400515 	stw	r21,20(sp)
  80ce0c:	dfc00915 	stw	ra,36(sp)
  80ce10:	df000815 	stw	fp,32(sp)
  80ce14:	dd800615 	stw	r22,24(sp)
  80ce18:	dd000415 	stw	r20,16(sp)
  80ce1c:	dcc00315 	stw	r19,12(sp)
  80ce20:	dc800215 	stw	r18,8(sp)
  80ce24:	dc400115 	stw	r17,4(sp)
  80ce28:	dc000015 	stw	r16,0(sp)
  80ce2c:	202f883a 	mov	r23,r4
  80ce30:	282b883a 	mov	r21,r5
  80ce34:	10c07416 	blt	r2,r3,80d008 <quorem+0x210>
  80ce38:	1c7fffc4 	addi	r17,r3,-1
  80ce3c:	8c45883a 	add	r2,r17,r17
  80ce40:	1085883a 	add	r2,r2,r2
  80ce44:	2c000504 	addi	r16,r5,20
  80ce48:	24c00504 	addi	r19,r4,20
  80ce4c:	14ed883a 	add	r22,r2,r19
  80ce50:	80a5883a 	add	r18,r16,r2
  80ce54:	b7000017 	ldw	fp,0(r22)
  80ce58:	91400017 	ldw	r5,0(r18)
  80ce5c:	e009883a 	mov	r4,fp
  80ce60:	29400044 	addi	r5,r5,1
  80ce64:	08053b80 	call	8053b8 <__udivsi3>
  80ce68:	1029883a 	mov	r20,r2
  80ce6c:	10003c1e 	bne	r2,zero,80cf60 <quorem+0x168>
  80ce70:	a80b883a 	mov	r5,r21
  80ce74:	b809883a 	mov	r4,r23
  80ce78:	080f1d80 	call	80f1d8 <__mcmp>
  80ce7c:	10002b16 	blt	r2,zero,80cf2c <quorem+0x134>
  80ce80:	a5000044 	addi	r20,r20,1
  80ce84:	980f883a 	mov	r7,r19
  80ce88:	0011883a 	mov	r8,zero
  80ce8c:	0009883a 	mov	r4,zero
  80ce90:	81400017 	ldw	r5,0(r16)
  80ce94:	38c00017 	ldw	r3,0(r7)
  80ce98:	84000104 	addi	r16,r16,4
  80ce9c:	28bfffcc 	andi	r2,r5,65535
  80cea0:	2085883a 	add	r2,r4,r2
  80cea4:	11bfffcc 	andi	r6,r2,65535
  80cea8:	193fffcc 	andi	r4,r3,65535
  80ceac:	1004d43a 	srli	r2,r2,16
  80ceb0:	280ad43a 	srli	r5,r5,16
  80ceb4:	2189c83a 	sub	r4,r4,r6
  80ceb8:	2209883a 	add	r4,r4,r8
  80cebc:	1806d43a 	srli	r3,r3,16
  80cec0:	288b883a 	add	r5,r5,r2
  80cec4:	200dd43a 	srai	r6,r4,16
  80cec8:	28bfffcc 	andi	r2,r5,65535
  80cecc:	1887c83a 	sub	r3,r3,r2
  80ced0:	1987883a 	add	r3,r3,r6
  80ced4:	3900000d 	sth	r4,0(r7)
  80ced8:	38c0008d 	sth	r3,2(r7)
  80cedc:	2808d43a 	srli	r4,r5,16
  80cee0:	39c00104 	addi	r7,r7,4
  80cee4:	1811d43a 	srai	r8,r3,16
  80cee8:	943fe92e 	bgeu	r18,r16,80ce90 <quorem+0x98>
  80ceec:	8c45883a 	add	r2,r17,r17
  80cef0:	1085883a 	add	r2,r2,r2
  80cef4:	9885883a 	add	r2,r19,r2
  80cef8:	10c00017 	ldw	r3,0(r2)
  80cefc:	18000b1e 	bne	r3,zero,80cf2c <quorem+0x134>
  80cf00:	113fff04 	addi	r4,r2,-4
  80cf04:	9900082e 	bgeu	r19,r4,80cf28 <quorem+0x130>
  80cf08:	10bfff17 	ldw	r2,-4(r2)
  80cf0c:	10000326 	beq	r2,zero,80cf1c <quorem+0x124>
  80cf10:	00000506 	br	80cf28 <quorem+0x130>
  80cf14:	20800017 	ldw	r2,0(r4)
  80cf18:	1000031e 	bne	r2,zero,80cf28 <quorem+0x130>
  80cf1c:	213fff04 	addi	r4,r4,-4
  80cf20:	8c7fffc4 	addi	r17,r17,-1
  80cf24:	993ffb36 	bltu	r19,r4,80cf14 <quorem+0x11c>
  80cf28:	bc400415 	stw	r17,16(r23)
  80cf2c:	a005883a 	mov	r2,r20
  80cf30:	dfc00917 	ldw	ra,36(sp)
  80cf34:	df000817 	ldw	fp,32(sp)
  80cf38:	ddc00717 	ldw	r23,28(sp)
  80cf3c:	dd800617 	ldw	r22,24(sp)
  80cf40:	dd400517 	ldw	r21,20(sp)
  80cf44:	dd000417 	ldw	r20,16(sp)
  80cf48:	dcc00317 	ldw	r19,12(sp)
  80cf4c:	dc800217 	ldw	r18,8(sp)
  80cf50:	dc400117 	ldw	r17,4(sp)
  80cf54:	dc000017 	ldw	r16,0(sp)
  80cf58:	dec00a04 	addi	sp,sp,40
  80cf5c:	f800283a 	ret
  80cf60:	980f883a 	mov	r7,r19
  80cf64:	8011883a 	mov	r8,r16
  80cf68:	0013883a 	mov	r9,zero
  80cf6c:	000d883a 	mov	r6,zero
  80cf70:	40c00017 	ldw	r3,0(r8)
  80cf74:	39000017 	ldw	r4,0(r7)
  80cf78:	42000104 	addi	r8,r8,4
  80cf7c:	18bfffcc 	andi	r2,r3,65535
  80cf80:	a085383a 	mul	r2,r20,r2
  80cf84:	1806d43a 	srli	r3,r3,16
  80cf88:	217fffcc 	andi	r5,r4,65535
  80cf8c:	3085883a 	add	r2,r6,r2
  80cf90:	11bfffcc 	andi	r6,r2,65535
  80cf94:	a0c7383a 	mul	r3,r20,r3
  80cf98:	1004d43a 	srli	r2,r2,16
  80cf9c:	298bc83a 	sub	r5,r5,r6
  80cfa0:	2a4b883a 	add	r5,r5,r9
  80cfa4:	2008d43a 	srli	r4,r4,16
  80cfa8:	1887883a 	add	r3,r3,r2
  80cfac:	280dd43a 	srai	r6,r5,16
  80cfb0:	18bfffcc 	andi	r2,r3,65535
  80cfb4:	2089c83a 	sub	r4,r4,r2
  80cfb8:	2189883a 	add	r4,r4,r6
  80cfbc:	3900008d 	sth	r4,2(r7)
  80cfc0:	3940000d 	sth	r5,0(r7)
  80cfc4:	180cd43a 	srli	r6,r3,16
  80cfc8:	39c00104 	addi	r7,r7,4
  80cfcc:	2013d43a 	srai	r9,r4,16
  80cfd0:	923fe72e 	bgeu	r18,r8,80cf70 <quorem+0x178>
  80cfd4:	e03fa61e 	bne	fp,zero,80ce70 <quorem+0x78>
  80cfd8:	b0ffff04 	addi	r3,r22,-4
  80cfdc:	98c0082e 	bgeu	r19,r3,80d000 <quorem+0x208>
  80cfe0:	b0bfff17 	ldw	r2,-4(r22)
  80cfe4:	10000326 	beq	r2,zero,80cff4 <quorem+0x1fc>
  80cfe8:	00000506 	br	80d000 <quorem+0x208>
  80cfec:	18800017 	ldw	r2,0(r3)
  80cff0:	1000031e 	bne	r2,zero,80d000 <quorem+0x208>
  80cff4:	18ffff04 	addi	r3,r3,-4
  80cff8:	8c7fffc4 	addi	r17,r17,-1
  80cffc:	98fffb36 	bltu	r19,r3,80cfec <quorem+0x1f4>
  80d000:	bc400415 	stw	r17,16(r23)
  80d004:	003f9a06 	br	80ce70 <quorem+0x78>
  80d008:	0005883a 	mov	r2,zero
  80d00c:	003fc806 	br	80cf30 <quorem+0x138>

0080d010 <_dtoa_r>:
  80d010:	22001017 	ldw	r8,64(r4)
  80d014:	deffda04 	addi	sp,sp,-152
  80d018:	dd402115 	stw	r21,132(sp)
  80d01c:	dd002015 	stw	r20,128(sp)
  80d020:	dc801e15 	stw	r18,120(sp)
  80d024:	dc401d15 	stw	r17,116(sp)
  80d028:	dfc02515 	stw	ra,148(sp)
  80d02c:	df002415 	stw	fp,144(sp)
  80d030:	ddc02315 	stw	r23,140(sp)
  80d034:	dd802215 	stw	r22,136(sp)
  80d038:	dcc01f15 	stw	r19,124(sp)
  80d03c:	dc001c15 	stw	r16,112(sp)
  80d040:	d9001615 	stw	r4,88(sp)
  80d044:	3023883a 	mov	r17,r6
  80d048:	2829883a 	mov	r20,r5
  80d04c:	d9c01715 	stw	r7,92(sp)
  80d050:	dc802817 	ldw	r18,160(sp)
  80d054:	302b883a 	mov	r21,r6
  80d058:	40000a26 	beq	r8,zero,80d084 <_dtoa_r+0x74>
  80d05c:	20801117 	ldw	r2,68(r4)
  80d060:	400b883a 	mov	r5,r8
  80d064:	40800115 	stw	r2,4(r8)
  80d068:	20c01117 	ldw	r3,68(r4)
  80d06c:	00800044 	movi	r2,1
  80d070:	10c4983a 	sll	r2,r2,r3
  80d074:	40800215 	stw	r2,8(r8)
  80d078:	080f07c0 	call	80f07c <_Bfree>
  80d07c:	d8c01617 	ldw	r3,88(sp)
  80d080:	18001015 	stw	zero,64(r3)
  80d084:	8800a316 	blt	r17,zero,80d314 <_dtoa_r+0x304>
  80d088:	90000015 	stw	zero,0(r18)
  80d08c:	a8dffc2c 	andhi	r3,r21,32752
  80d090:	009ffc34 	movhi	r2,32752
  80d094:	18809126 	beq	r3,r2,80d2dc <_dtoa_r+0x2cc>
  80d098:	000d883a 	mov	r6,zero
  80d09c:	000f883a 	mov	r7,zero
  80d0a0:	a009883a 	mov	r4,r20
  80d0a4:	a80b883a 	mov	r5,r21
  80d0a8:	dd001215 	stw	r20,72(sp)
  80d0ac:	dd401315 	stw	r21,76(sp)
  80d0b0:	08152bc0 	call	8152bc <__nedf2>
  80d0b4:	1000171e 	bne	r2,zero,80d114 <_dtoa_r+0x104>
  80d0b8:	d9802717 	ldw	r6,156(sp)
  80d0bc:	00800044 	movi	r2,1
  80d0c0:	30800015 	stw	r2,0(r6)
  80d0c4:	d8802917 	ldw	r2,164(sp)
  80d0c8:	10029b26 	beq	r2,zero,80db38 <_dtoa_r+0xb28>
  80d0cc:	d9002917 	ldw	r4,164(sp)
  80d0d0:	00802174 	movhi	r2,133
  80d0d4:	10b1da44 	addi	r2,r2,-14487
  80d0d8:	10ffffc4 	addi	r3,r2,-1
  80d0dc:	20800015 	stw	r2,0(r4)
  80d0e0:	1805883a 	mov	r2,r3
  80d0e4:	dfc02517 	ldw	ra,148(sp)
  80d0e8:	df002417 	ldw	fp,144(sp)
  80d0ec:	ddc02317 	ldw	r23,140(sp)
  80d0f0:	dd802217 	ldw	r22,136(sp)
  80d0f4:	dd402117 	ldw	r21,132(sp)
  80d0f8:	dd002017 	ldw	r20,128(sp)
  80d0fc:	dcc01f17 	ldw	r19,124(sp)
  80d100:	dc801e17 	ldw	r18,120(sp)
  80d104:	dc401d17 	ldw	r17,116(sp)
  80d108:	dc001c17 	ldw	r16,112(sp)
  80d10c:	dec02604 	addi	sp,sp,152
  80d110:	f800283a 	ret
  80d114:	d9001617 	ldw	r4,88(sp)
  80d118:	d9401217 	ldw	r5,72(sp)
  80d11c:	d8800104 	addi	r2,sp,4
  80d120:	a80d883a 	mov	r6,r21
  80d124:	d9c00204 	addi	r7,sp,8
  80d128:	d8800015 	stw	r2,0(sp)
  80d12c:	080f6b80 	call	80f6b8 <__d2b>
  80d130:	d8800715 	stw	r2,28(sp)
  80d134:	a804d53a 	srli	r2,r21,20
  80d138:	1101ffcc 	andi	r4,r2,2047
  80d13c:	20008626 	beq	r4,zero,80d358 <_dtoa_r+0x348>
  80d140:	d8c01217 	ldw	r3,72(sp)
  80d144:	00800434 	movhi	r2,16
  80d148:	10bfffc4 	addi	r2,r2,-1
  80d14c:	ddc00117 	ldw	r23,4(sp)
  80d150:	a884703a 	and	r2,r21,r2
  80d154:	1811883a 	mov	r8,r3
  80d158:	124ffc34 	orhi	r9,r2,16368
  80d15c:	25bf0044 	addi	r22,r4,-1023
  80d160:	d8000815 	stw	zero,32(sp)
  80d164:	0005883a 	mov	r2,zero
  80d168:	00cffe34 	movhi	r3,16376
  80d16c:	480b883a 	mov	r5,r9
  80d170:	4009883a 	mov	r4,r8
  80d174:	180f883a 	mov	r7,r3
  80d178:	100d883a 	mov	r6,r2
  80d17c:	0814b240 	call	814b24 <__subdf3>
  80d180:	0218dbf4 	movhi	r8,25455
  80d184:	4210d844 	addi	r8,r8,17249
  80d188:	024ff4f4 	movhi	r9,16339
  80d18c:	4a61e9c4 	addi	r9,r9,-30809
  80d190:	480f883a 	mov	r7,r9
  80d194:	400d883a 	mov	r6,r8
  80d198:	180b883a 	mov	r5,r3
  80d19c:	1009883a 	mov	r4,r2
  80d1a0:	0814c180 	call	814c18 <__muldf3>
  80d1a4:	0222d874 	movhi	r8,35681
  80d1a8:	42322cc4 	addi	r8,r8,-14157
  80d1ac:	024ff1f4 	movhi	r9,16327
  80d1b0:	4a628a04 	addi	r9,r9,-30168
  80d1b4:	480f883a 	mov	r7,r9
  80d1b8:	400d883a 	mov	r6,r8
  80d1bc:	180b883a 	mov	r5,r3
  80d1c0:	1009883a 	mov	r4,r2
  80d1c4:	0814ba40 	call	814ba4 <__adddf3>
  80d1c8:	b009883a 	mov	r4,r22
  80d1cc:	1021883a 	mov	r16,r2
  80d1d0:	1823883a 	mov	r17,r3
  80d1d4:	08155640 	call	815564 <__floatsidf>
  80d1d8:	021427f4 	movhi	r8,20639
  80d1dc:	421e7ec4 	addi	r8,r8,31227
  80d1e0:	024ff4f4 	movhi	r9,16339
  80d1e4:	4a5104c4 	addi	r9,r9,17427
  80d1e8:	480f883a 	mov	r7,r9
  80d1ec:	400d883a 	mov	r6,r8
  80d1f0:	180b883a 	mov	r5,r3
  80d1f4:	1009883a 	mov	r4,r2
  80d1f8:	0814c180 	call	814c18 <__muldf3>
  80d1fc:	180f883a 	mov	r7,r3
  80d200:	880b883a 	mov	r5,r17
  80d204:	100d883a 	mov	r6,r2
  80d208:	8009883a 	mov	r4,r16
  80d20c:	0814ba40 	call	814ba4 <__adddf3>
  80d210:	1009883a 	mov	r4,r2
  80d214:	180b883a 	mov	r5,r3
  80d218:	1021883a 	mov	r16,r2
  80d21c:	1823883a 	mov	r17,r3
  80d220:	081565c0 	call	81565c <__fixdfsi>
  80d224:	000d883a 	mov	r6,zero
  80d228:	000f883a 	mov	r7,zero
  80d22c:	8009883a 	mov	r4,r16
  80d230:	880b883a 	mov	r5,r17
  80d234:	d8800d15 	stw	r2,52(sp)
  80d238:	08154540 	call	815454 <__ltdf2>
  80d23c:	10031716 	blt	r2,zero,80de9c <_dtoa_r+0xe8c>
  80d240:	d8c00d17 	ldw	r3,52(sp)
  80d244:	00800584 	movi	r2,22
  80d248:	10c1482e 	bgeu	r2,r3,80d76c <_dtoa_r+0x75c>
  80d24c:	01000044 	movi	r4,1
  80d250:	d9000c15 	stw	r4,48(sp)
  80d254:	bd85c83a 	sub	r2,r23,r22
  80d258:	11bfffc4 	addi	r6,r2,-1
  80d25c:	30030b16 	blt	r6,zero,80de8c <_dtoa_r+0xe7c>
  80d260:	d9800a15 	stw	r6,40(sp)
  80d264:	d8001115 	stw	zero,68(sp)
  80d268:	d8c00d17 	ldw	r3,52(sp)
  80d26c:	1802ff16 	blt	r3,zero,80de6c <_dtoa_r+0xe5c>
  80d270:	d9000a17 	ldw	r4,40(sp)
  80d274:	d8c00915 	stw	r3,36(sp)
  80d278:	d8001015 	stw	zero,64(sp)
  80d27c:	20c9883a 	add	r4,r4,r3
  80d280:	d9000a15 	stw	r4,40(sp)
  80d284:	d9001717 	ldw	r4,92(sp)
  80d288:	00800244 	movi	r2,9
  80d28c:	11004636 	bltu	r2,r4,80d3a8 <_dtoa_r+0x398>
  80d290:	00800144 	movi	r2,5
  80d294:	11020416 	blt	r2,r4,80daa8 <_dtoa_r+0xa98>
  80d298:	04400044 	movi	r17,1
  80d29c:	d8c01717 	ldw	r3,92(sp)
  80d2a0:	00800144 	movi	r2,5
  80d2a4:	10c1ed36 	bltu	r2,r3,80da5c <_dtoa_r+0xa4c>
  80d2a8:	18c5883a 	add	r2,r3,r3
  80d2ac:	1085883a 	add	r2,r2,r2
  80d2b0:	00c02074 	movhi	r3,129
  80d2b4:	18f4b104 	addi	r3,r3,-11580
  80d2b8:	10c5883a 	add	r2,r2,r3
  80d2bc:	11000017 	ldw	r4,0(r2)
  80d2c0:	2000683a 	jmp	r4
  80d2c4:	0080d3b0 	cmpltui	r2,zero,846
  80d2c8:	0080d3b0 	cmpltui	r2,zero,846
  80d2cc:	0080ddb0 	cmpltui	r2,zero,886
  80d2d0:	0080dd88 	cmpgei	r2,zero,886
  80d2d4:	0080ddcc 	andi	r2,zero,887
  80d2d8:	0080ddd8 	cmpnei	r2,zero,887
  80d2dc:	d9002717 	ldw	r4,156(sp)
  80d2e0:	0089c3c4 	movi	r2,9999
  80d2e4:	20800015 	stw	r2,0(r4)
  80d2e8:	a0001026 	beq	r20,zero,80d32c <_dtoa_r+0x31c>
  80d2ec:	00c02174 	movhi	r3,133
  80d2f0:	18f1f004 	addi	r3,r3,-14400
  80d2f4:	d9802917 	ldw	r6,164(sp)
  80d2f8:	303f7926 	beq	r6,zero,80d0e0 <_dtoa_r+0xd0>
  80d2fc:	188000c7 	ldb	r2,3(r3)
  80d300:	190000c4 	addi	r4,r3,3
  80d304:	1000101e 	bne	r2,zero,80d348 <_dtoa_r+0x338>
  80d308:	d8802917 	ldw	r2,164(sp)
  80d30c:	11000015 	stw	r4,0(r2)
  80d310:	003f7306 	br	80d0e0 <_dtoa_r+0xd0>
  80d314:	00a00034 	movhi	r2,32768
  80d318:	10bfffc4 	addi	r2,r2,-1
  80d31c:	00c00044 	movi	r3,1
  80d320:	88aa703a 	and	r21,r17,r2
  80d324:	90c00015 	stw	r3,0(r18)
  80d328:	003f5806 	br	80d08c <_dtoa_r+0x7c>
  80d32c:	00800434 	movhi	r2,16
  80d330:	10bfffc4 	addi	r2,r2,-1
  80d334:	a884703a 	and	r2,r21,r2
  80d338:	103fec1e 	bne	r2,zero,80d2ec <_dtoa_r+0x2dc>
  80d33c:	00c02174 	movhi	r3,133
  80d340:	18f1ed04 	addi	r3,r3,-14412
  80d344:	003feb06 	br	80d2f4 <_dtoa_r+0x2e4>
  80d348:	d8802917 	ldw	r2,164(sp)
  80d34c:	19000204 	addi	r4,r3,8
  80d350:	11000015 	stw	r4,0(r2)
  80d354:	003f6206 	br	80d0e0 <_dtoa_r+0xd0>
  80d358:	ddc00117 	ldw	r23,4(sp)
  80d35c:	d8800217 	ldw	r2,8(sp)
  80d360:	01000804 	movi	r4,32
  80d364:	b8c10c84 	addi	r3,r23,1074
  80d368:	18a3883a 	add	r17,r3,r2
  80d36c:	2441b80e 	bge	r4,r17,80da50 <_dtoa_r+0xa40>
  80d370:	00c01004 	movi	r3,64
  80d374:	1c47c83a 	sub	r3,r3,r17
  80d378:	88bff804 	addi	r2,r17,-32
  80d37c:	a8c6983a 	sll	r3,r21,r3
  80d380:	a084d83a 	srl	r2,r20,r2
  80d384:	1888b03a 	or	r4,r3,r2
  80d388:	08157a80 	call	8157a8 <__floatunsidf>
  80d38c:	1011883a 	mov	r8,r2
  80d390:	00bf8434 	movhi	r2,65040
  80d394:	01000044 	movi	r4,1
  80d398:	10d3883a 	add	r9,r2,r3
  80d39c:	8dbef344 	addi	r22,r17,-1075
  80d3a0:	d9000815 	stw	r4,32(sp)
  80d3a4:	003f6f06 	br	80d164 <_dtoa_r+0x154>
  80d3a8:	d8001715 	stw	zero,92(sp)
  80d3ac:	04400044 	movi	r17,1
  80d3b0:	00bfffc4 	movi	r2,-1
  80d3b4:	00c00044 	movi	r3,1
  80d3b8:	d8800e15 	stw	r2,56(sp)
  80d3bc:	d8002615 	stw	zero,152(sp)
  80d3c0:	d8800f15 	stw	r2,60(sp)
  80d3c4:	d8c00b15 	stw	r3,44(sp)
  80d3c8:	1021883a 	mov	r16,r2
  80d3cc:	d8801617 	ldw	r2,88(sp)
  80d3d0:	10001115 	stw	zero,68(r2)
  80d3d4:	d8801617 	ldw	r2,88(sp)
  80d3d8:	11401117 	ldw	r5,68(r2)
  80d3dc:	1009883a 	mov	r4,r2
  80d3e0:	080f5fc0 	call	80f5fc <_Balloc>
  80d3e4:	d8c01617 	ldw	r3,88(sp)
  80d3e8:	d8800515 	stw	r2,20(sp)
  80d3ec:	18801015 	stw	r2,64(r3)
  80d3f0:	00800384 	movi	r2,14
  80d3f4:	14006836 	bltu	r2,r16,80d598 <_dtoa_r+0x588>
  80d3f8:	8805003a 	cmpeq	r2,r17,zero
  80d3fc:	1000661e 	bne	r2,zero,80d598 <_dtoa_r+0x588>
  80d400:	d9000d17 	ldw	r4,52(sp)
  80d404:	0102300e 	bge	zero,r4,80dcc8 <_dtoa_r+0xcb8>
  80d408:	208003cc 	andi	r2,r4,15
  80d40c:	100490fa 	slli	r2,r2,3
  80d410:	2025d13a 	srai	r18,r4,4
  80d414:	00c02174 	movhi	r3,133
  80d418:	18f20104 	addi	r3,r3,-14332
  80d41c:	10c5883a 	add	r2,r2,r3
  80d420:	90c0040c 	andi	r3,r18,16
  80d424:	14000017 	ldw	r16,0(r2)
  80d428:	14400117 	ldw	r17,4(r2)
  80d42c:	18036a1e 	bne	r3,zero,80e1d8 <_dtoa_r+0x11c8>
  80d430:	05800084 	movi	r22,2
  80d434:	90001026 	beq	r18,zero,80d478 <_dtoa_r+0x468>
  80d438:	04c02174 	movhi	r19,133
  80d43c:	9cf23304 	addi	r19,r19,-14132
  80d440:	9080004c 	andi	r2,r18,1
  80d444:	1005003a 	cmpeq	r2,r2,zero
  80d448:	1000081e 	bne	r2,zero,80d46c <_dtoa_r+0x45c>
  80d44c:	99800017 	ldw	r6,0(r19)
  80d450:	99c00117 	ldw	r7,4(r19)
  80d454:	880b883a 	mov	r5,r17
  80d458:	8009883a 	mov	r4,r16
  80d45c:	0814c180 	call	814c18 <__muldf3>
  80d460:	1021883a 	mov	r16,r2
  80d464:	b5800044 	addi	r22,r22,1
  80d468:	1823883a 	mov	r17,r3
  80d46c:	9025d07a 	srai	r18,r18,1
  80d470:	9cc00204 	addi	r19,r19,8
  80d474:	903ff21e 	bne	r18,zero,80d440 <_dtoa_r+0x430>
  80d478:	a80b883a 	mov	r5,r21
  80d47c:	a009883a 	mov	r4,r20
  80d480:	880f883a 	mov	r7,r17
  80d484:	800d883a 	mov	r6,r16
  80d488:	0814fdc0 	call	814fdc <__divdf3>
  80d48c:	1029883a 	mov	r20,r2
  80d490:	182b883a 	mov	r21,r3
  80d494:	d8c00c17 	ldw	r3,48(sp)
  80d498:	1805003a 	cmpeq	r2,r3,zero
  80d49c:	1000081e 	bne	r2,zero,80d4c0 <_dtoa_r+0x4b0>
  80d4a0:	0005883a 	mov	r2,zero
  80d4a4:	00cffc34 	movhi	r3,16368
  80d4a8:	180f883a 	mov	r7,r3
  80d4ac:	a009883a 	mov	r4,r20
  80d4b0:	a80b883a 	mov	r5,r21
  80d4b4:	100d883a 	mov	r6,r2
  80d4b8:	08154540 	call	815454 <__ltdf2>
  80d4bc:	1003fe16 	blt	r2,zero,80e4b8 <_dtoa_r+0x14a8>
  80d4c0:	b009883a 	mov	r4,r22
  80d4c4:	08155640 	call	815564 <__floatsidf>
  80d4c8:	180b883a 	mov	r5,r3
  80d4cc:	1009883a 	mov	r4,r2
  80d4d0:	a00d883a 	mov	r6,r20
  80d4d4:	a80f883a 	mov	r7,r21
  80d4d8:	0814c180 	call	814c18 <__muldf3>
  80d4dc:	0011883a 	mov	r8,zero
  80d4e0:	02500734 	movhi	r9,16412
  80d4e4:	1009883a 	mov	r4,r2
  80d4e8:	180b883a 	mov	r5,r3
  80d4ec:	480f883a 	mov	r7,r9
  80d4f0:	400d883a 	mov	r6,r8
  80d4f4:	0814ba40 	call	814ba4 <__adddf3>
  80d4f8:	d9000f17 	ldw	r4,60(sp)
  80d4fc:	102d883a 	mov	r22,r2
  80d500:	00bf3034 	movhi	r2,64704
  80d504:	18b9883a 	add	fp,r3,r2
  80d508:	e02f883a 	mov	r23,fp
  80d50c:	20028f1e 	bne	r4,zero,80df4c <_dtoa_r+0xf3c>
  80d510:	0005883a 	mov	r2,zero
  80d514:	00d00534 	movhi	r3,16404
  80d518:	a009883a 	mov	r4,r20
  80d51c:	a80b883a 	mov	r5,r21
  80d520:	180f883a 	mov	r7,r3
  80d524:	100d883a 	mov	r6,r2
  80d528:	0814b240 	call	814b24 <__subdf3>
  80d52c:	1009883a 	mov	r4,r2
  80d530:	e00f883a 	mov	r7,fp
  80d534:	180b883a 	mov	r5,r3
  80d538:	b00d883a 	mov	r6,r22
  80d53c:	1025883a 	mov	r18,r2
  80d540:	1827883a 	mov	r19,r3
  80d544:	08153440 	call	815344 <__gtdf2>
  80d548:	00834f16 	blt	zero,r2,80e288 <_dtoa_r+0x1278>
  80d54c:	e0e0003c 	xorhi	r3,fp,32768
  80d550:	9009883a 	mov	r4,r18
  80d554:	980b883a 	mov	r5,r19
  80d558:	180f883a 	mov	r7,r3
  80d55c:	b00d883a 	mov	r6,r22
  80d560:	08154540 	call	815454 <__ltdf2>
  80d564:	1000080e 	bge	r2,zero,80d588 <_dtoa_r+0x578>
  80d568:	0027883a 	mov	r19,zero
  80d56c:	0025883a 	mov	r18,zero
  80d570:	d8802617 	ldw	r2,152(sp)
  80d574:	df000517 	ldw	fp,20(sp)
  80d578:	d8000615 	stw	zero,24(sp)
  80d57c:	0084303a 	nor	r2,zero,r2
  80d580:	d8800d15 	stw	r2,52(sp)
  80d584:	00019b06 	br	80dbf4 <_dtoa_r+0xbe4>
  80d588:	d9801217 	ldw	r6,72(sp)
  80d58c:	d8801317 	ldw	r2,76(sp)
  80d590:	3029883a 	mov	r20,r6
  80d594:	102b883a 	mov	r21,r2
  80d598:	d8c00217 	ldw	r3,8(sp)
  80d59c:	18008516 	blt	r3,zero,80d7b4 <_dtoa_r+0x7a4>
  80d5a0:	d9000d17 	ldw	r4,52(sp)
  80d5a4:	00800384 	movi	r2,14
  80d5a8:	11008216 	blt	r2,r4,80d7b4 <_dtoa_r+0x7a4>
  80d5ac:	200490fa 	slli	r2,r4,3
  80d5b0:	d9802617 	ldw	r6,152(sp)
  80d5b4:	00c02174 	movhi	r3,133
  80d5b8:	18f20104 	addi	r3,r3,-14332
  80d5bc:	10c5883a 	add	r2,r2,r3
  80d5c0:	14800017 	ldw	r18,0(r2)
  80d5c4:	14c00117 	ldw	r19,4(r2)
  80d5c8:	30031e16 	blt	r6,zero,80e244 <_dtoa_r+0x1234>
  80d5cc:	d9000517 	ldw	r4,20(sp)
  80d5d0:	d8c00f17 	ldw	r3,60(sp)
  80d5d4:	a823883a 	mov	r17,r21
  80d5d8:	a021883a 	mov	r16,r20
  80d5dc:	192b883a 	add	r21,r3,r4
  80d5e0:	2039883a 	mov	fp,r4
  80d5e4:	00000f06 	br	80d624 <_dtoa_r+0x614>
  80d5e8:	0005883a 	mov	r2,zero
  80d5ec:	00d00934 	movhi	r3,16420
  80d5f0:	5009883a 	mov	r4,r10
  80d5f4:	580b883a 	mov	r5,r11
  80d5f8:	180f883a 	mov	r7,r3
  80d5fc:	100d883a 	mov	r6,r2
  80d600:	0814c180 	call	814c18 <__muldf3>
  80d604:	180b883a 	mov	r5,r3
  80d608:	000d883a 	mov	r6,zero
  80d60c:	000f883a 	mov	r7,zero
  80d610:	1009883a 	mov	r4,r2
  80d614:	1021883a 	mov	r16,r2
  80d618:	1823883a 	mov	r17,r3
  80d61c:	08152bc0 	call	8152bc <__nedf2>
  80d620:	10004526 	beq	r2,zero,80d738 <_dtoa_r+0x728>
  80d624:	900d883a 	mov	r6,r18
  80d628:	980f883a 	mov	r7,r19
  80d62c:	8009883a 	mov	r4,r16
  80d630:	880b883a 	mov	r5,r17
  80d634:	0814fdc0 	call	814fdc <__divdf3>
  80d638:	180b883a 	mov	r5,r3
  80d63c:	1009883a 	mov	r4,r2
  80d640:	081565c0 	call	81565c <__fixdfsi>
  80d644:	1009883a 	mov	r4,r2
  80d648:	1029883a 	mov	r20,r2
  80d64c:	08155640 	call	815564 <__floatsidf>
  80d650:	180f883a 	mov	r7,r3
  80d654:	9009883a 	mov	r4,r18
  80d658:	980b883a 	mov	r5,r19
  80d65c:	100d883a 	mov	r6,r2
  80d660:	0814c180 	call	814c18 <__muldf3>
  80d664:	180f883a 	mov	r7,r3
  80d668:	880b883a 	mov	r5,r17
  80d66c:	8009883a 	mov	r4,r16
  80d670:	100d883a 	mov	r6,r2
  80d674:	0814b240 	call	814b24 <__subdf3>
  80d678:	1015883a 	mov	r10,r2
  80d67c:	a0800c04 	addi	r2,r20,48
  80d680:	e0800005 	stb	r2,0(fp)
  80d684:	e7000044 	addi	fp,fp,1
  80d688:	1817883a 	mov	r11,r3
  80d68c:	e57fd61e 	bne	fp,r21,80d5e8 <_dtoa_r+0x5d8>
  80d690:	500d883a 	mov	r6,r10
  80d694:	180f883a 	mov	r7,r3
  80d698:	5009883a 	mov	r4,r10
  80d69c:	180b883a 	mov	r5,r3
  80d6a0:	0814ba40 	call	814ba4 <__adddf3>
  80d6a4:	100d883a 	mov	r6,r2
  80d6a8:	9009883a 	mov	r4,r18
  80d6ac:	980b883a 	mov	r5,r19
  80d6b0:	180f883a 	mov	r7,r3
  80d6b4:	1021883a 	mov	r16,r2
  80d6b8:	1823883a 	mov	r17,r3
  80d6bc:	08154540 	call	815454 <__ltdf2>
  80d6c0:	10000816 	blt	r2,zero,80d6e4 <_dtoa_r+0x6d4>
  80d6c4:	980b883a 	mov	r5,r19
  80d6c8:	800d883a 	mov	r6,r16
  80d6cc:	880f883a 	mov	r7,r17
  80d6d0:	9009883a 	mov	r4,r18
  80d6d4:	08152340 	call	815234 <__eqdf2>
  80d6d8:	1000171e 	bne	r2,zero,80d738 <_dtoa_r+0x728>
  80d6dc:	a080004c 	andi	r2,r20,1
  80d6e0:	10001526 	beq	r2,zero,80d738 <_dtoa_r+0x728>
  80d6e4:	d8800d17 	ldw	r2,52(sp)
  80d6e8:	d8800415 	stw	r2,16(sp)
  80d6ec:	e009883a 	mov	r4,fp
  80d6f0:	213fffc4 	addi	r4,r4,-1
  80d6f4:	20c00007 	ldb	r3,0(r4)
  80d6f8:	00800e44 	movi	r2,57
  80d6fc:	1880081e 	bne	r3,r2,80d720 <_dtoa_r+0x710>
  80d700:	d8800517 	ldw	r2,20(sp)
  80d704:	113ffa1e 	bne	r2,r4,80d6f0 <_dtoa_r+0x6e0>
  80d708:	d8c00417 	ldw	r3,16(sp)
  80d70c:	d9800517 	ldw	r6,20(sp)
  80d710:	00800c04 	movi	r2,48
  80d714:	18c00044 	addi	r3,r3,1
  80d718:	d8c00415 	stw	r3,16(sp)
  80d71c:	30800005 	stb	r2,0(r6)
  80d720:	20800003 	ldbu	r2,0(r4)
  80d724:	d8c00417 	ldw	r3,16(sp)
  80d728:	27000044 	addi	fp,r4,1
  80d72c:	10800044 	addi	r2,r2,1
  80d730:	d8c00d15 	stw	r3,52(sp)
  80d734:	20800005 	stb	r2,0(r4)
  80d738:	d9001617 	ldw	r4,88(sp)
  80d73c:	d9400717 	ldw	r5,28(sp)
  80d740:	080f07c0 	call	80f07c <_Bfree>
  80d744:	e0000005 	stb	zero,0(fp)
  80d748:	d9800d17 	ldw	r6,52(sp)
  80d74c:	d8c02717 	ldw	r3,156(sp)
  80d750:	d9002917 	ldw	r4,164(sp)
  80d754:	30800044 	addi	r2,r6,1
  80d758:	18800015 	stw	r2,0(r3)
  80d75c:	20029c26 	beq	r4,zero,80e1d0 <_dtoa_r+0x11c0>
  80d760:	d8c00517 	ldw	r3,20(sp)
  80d764:	27000015 	stw	fp,0(r4)
  80d768:	003e5d06 	br	80d0e0 <_dtoa_r+0xd0>
  80d76c:	d9800d17 	ldw	r6,52(sp)
  80d770:	00c02174 	movhi	r3,133
  80d774:	18f20104 	addi	r3,r3,-14332
  80d778:	d9001217 	ldw	r4,72(sp)
  80d77c:	300490fa 	slli	r2,r6,3
  80d780:	d9401317 	ldw	r5,76(sp)
  80d784:	10c5883a 	add	r2,r2,r3
  80d788:	12000017 	ldw	r8,0(r2)
  80d78c:	12400117 	ldw	r9,4(r2)
  80d790:	400d883a 	mov	r6,r8
  80d794:	480f883a 	mov	r7,r9
  80d798:	08154540 	call	815454 <__ltdf2>
  80d79c:	1000030e 	bge	r2,zero,80d7ac <_dtoa_r+0x79c>
  80d7a0:	d8800d17 	ldw	r2,52(sp)
  80d7a4:	10bfffc4 	addi	r2,r2,-1
  80d7a8:	d8800d15 	stw	r2,52(sp)
  80d7ac:	d8000c15 	stw	zero,48(sp)
  80d7b0:	003ea806 	br	80d254 <_dtoa_r+0x244>
  80d7b4:	d9000b17 	ldw	r4,44(sp)
  80d7b8:	202cc03a 	cmpne	r22,r4,zero
  80d7bc:	b000c71e 	bne	r22,zero,80dadc <_dtoa_r+0xacc>
  80d7c0:	dc001117 	ldw	r16,68(sp)
  80d7c4:	dc801017 	ldw	r18,64(sp)
  80d7c8:	0027883a 	mov	r19,zero
  80d7cc:	04000b0e 	bge	zero,r16,80d7fc <_dtoa_r+0x7ec>
  80d7d0:	d8c00a17 	ldw	r3,40(sp)
  80d7d4:	00c0090e 	bge	zero,r3,80d7fc <_dtoa_r+0x7ec>
  80d7d8:	8005883a 	mov	r2,r16
  80d7dc:	1c011316 	blt	r3,r16,80dc2c <_dtoa_r+0xc1c>
  80d7e0:	d9000a17 	ldw	r4,40(sp)
  80d7e4:	d9801117 	ldw	r6,68(sp)
  80d7e8:	80a1c83a 	sub	r16,r16,r2
  80d7ec:	2089c83a 	sub	r4,r4,r2
  80d7f0:	308dc83a 	sub	r6,r6,r2
  80d7f4:	d9000a15 	stw	r4,40(sp)
  80d7f8:	d9801115 	stw	r6,68(sp)
  80d7fc:	d8801017 	ldw	r2,64(sp)
  80d800:	0080150e 	bge	zero,r2,80d858 <_dtoa_r+0x848>
  80d804:	d8c00b17 	ldw	r3,44(sp)
  80d808:	1805003a 	cmpeq	r2,r3,zero
  80d80c:	1001c91e 	bne	r2,zero,80df34 <_dtoa_r+0xf24>
  80d810:	04800e0e 	bge	zero,r18,80d84c <_dtoa_r+0x83c>
  80d814:	d9001617 	ldw	r4,88(sp)
  80d818:	980b883a 	mov	r5,r19
  80d81c:	900d883a 	mov	r6,r18
  80d820:	080fe300 	call	80fe30 <__pow5mult>
  80d824:	d9001617 	ldw	r4,88(sp)
  80d828:	d9800717 	ldw	r6,28(sp)
  80d82c:	100b883a 	mov	r5,r2
  80d830:	1027883a 	mov	r19,r2
  80d834:	080fb0c0 	call	80fb0c <__multiply>
  80d838:	d9001617 	ldw	r4,88(sp)
  80d83c:	d9400717 	ldw	r5,28(sp)
  80d840:	1023883a 	mov	r17,r2
  80d844:	080f07c0 	call	80f07c <_Bfree>
  80d848:	dc400715 	stw	r17,28(sp)
  80d84c:	d9001017 	ldw	r4,64(sp)
  80d850:	248dc83a 	sub	r6,r4,r18
  80d854:	30010e1e 	bne	r6,zero,80dc90 <_dtoa_r+0xc80>
  80d858:	d9001617 	ldw	r4,88(sp)
  80d85c:	04400044 	movi	r17,1
  80d860:	880b883a 	mov	r5,r17
  80d864:	080fcf40 	call	80fcf4 <__i2b>
  80d868:	d9800917 	ldw	r6,36(sp)
  80d86c:	1025883a 	mov	r18,r2
  80d870:	0180040e 	bge	zero,r6,80d884 <_dtoa_r+0x874>
  80d874:	d9001617 	ldw	r4,88(sp)
  80d878:	100b883a 	mov	r5,r2
  80d87c:	080fe300 	call	80fe30 <__pow5mult>
  80d880:	1025883a 	mov	r18,r2
  80d884:	d8801717 	ldw	r2,92(sp)
  80d888:	8880f30e 	bge	r17,r2,80dc58 <_dtoa_r+0xc48>
  80d88c:	0023883a 	mov	r17,zero
  80d890:	d9800917 	ldw	r6,36(sp)
  80d894:	30019e1e 	bne	r6,zero,80df10 <_dtoa_r+0xf00>
  80d898:	00c00044 	movi	r3,1
  80d89c:	d9000a17 	ldw	r4,40(sp)
  80d8a0:	20c5883a 	add	r2,r4,r3
  80d8a4:	10c007cc 	andi	r3,r2,31
  80d8a8:	1800841e 	bne	r3,zero,80dabc <_dtoa_r+0xaac>
  80d8ac:	00800704 	movi	r2,28
  80d8b0:	d9000a17 	ldw	r4,40(sp)
  80d8b4:	d9801117 	ldw	r6,68(sp)
  80d8b8:	80a1883a 	add	r16,r16,r2
  80d8bc:	2089883a 	add	r4,r4,r2
  80d8c0:	308d883a 	add	r6,r6,r2
  80d8c4:	d9000a15 	stw	r4,40(sp)
  80d8c8:	d9801115 	stw	r6,68(sp)
  80d8cc:	d8801117 	ldw	r2,68(sp)
  80d8d0:	0080050e 	bge	zero,r2,80d8e8 <_dtoa_r+0x8d8>
  80d8d4:	d9400717 	ldw	r5,28(sp)
  80d8d8:	d9001617 	ldw	r4,88(sp)
  80d8dc:	100d883a 	mov	r6,r2
  80d8e0:	080f9c00 	call	80f9c0 <__lshift>
  80d8e4:	d8800715 	stw	r2,28(sp)
  80d8e8:	d8c00a17 	ldw	r3,40(sp)
  80d8ec:	00c0050e 	bge	zero,r3,80d904 <_dtoa_r+0x8f4>
  80d8f0:	d9001617 	ldw	r4,88(sp)
  80d8f4:	900b883a 	mov	r5,r18
  80d8f8:	180d883a 	mov	r6,r3
  80d8fc:	080f9c00 	call	80f9c0 <__lshift>
  80d900:	1025883a 	mov	r18,r2
  80d904:	d9000c17 	ldw	r4,48(sp)
  80d908:	2005003a 	cmpeq	r2,r4,zero
  80d90c:	10016f26 	beq	r2,zero,80decc <_dtoa_r+0xebc>
  80d910:	d9000f17 	ldw	r4,60(sp)
  80d914:	0102170e 	bge	zero,r4,80e174 <_dtoa_r+0x1164>
  80d918:	d9800b17 	ldw	r6,44(sp)
  80d91c:	3005003a 	cmpeq	r2,r6,zero
  80d920:	1000881e 	bne	r2,zero,80db44 <_dtoa_r+0xb34>
  80d924:	0400050e 	bge	zero,r16,80d93c <_dtoa_r+0x92c>
  80d928:	d9001617 	ldw	r4,88(sp)
  80d92c:	980b883a 	mov	r5,r19
  80d930:	800d883a 	mov	r6,r16
  80d934:	080f9c00 	call	80f9c0 <__lshift>
  80d938:	1027883a 	mov	r19,r2
  80d93c:	8804c03a 	cmpne	r2,r17,zero
  80d940:	1002541e 	bne	r2,zero,80e294 <_dtoa_r+0x1284>
  80d944:	980b883a 	mov	r5,r19
  80d948:	dd800517 	ldw	r22,20(sp)
  80d94c:	dcc00615 	stw	r19,24(sp)
  80d950:	a700004c 	andi	fp,r20,1
  80d954:	2827883a 	mov	r19,r5
  80d958:	d9000717 	ldw	r4,28(sp)
  80d95c:	900b883a 	mov	r5,r18
  80d960:	080cdf80 	call	80cdf8 <quorem>
  80d964:	d9000717 	ldw	r4,28(sp)
  80d968:	d9400617 	ldw	r5,24(sp)
  80d96c:	1023883a 	mov	r17,r2
  80d970:	8dc00c04 	addi	r23,r17,48
  80d974:	080f1d80 	call	80f1d8 <__mcmp>
  80d978:	d9001617 	ldw	r4,88(sp)
  80d97c:	900b883a 	mov	r5,r18
  80d980:	980d883a 	mov	r6,r19
  80d984:	1029883a 	mov	r20,r2
  80d988:	080f8340 	call	80f834 <__mdiff>
  80d98c:	102b883a 	mov	r21,r2
  80d990:	10800317 	ldw	r2,12(r2)
  80d994:	1001281e 	bne	r2,zero,80de38 <_dtoa_r+0xe28>
  80d998:	d9000717 	ldw	r4,28(sp)
  80d99c:	a80b883a 	mov	r5,r21
  80d9a0:	080f1d80 	call	80f1d8 <__mcmp>
  80d9a4:	d9001617 	ldw	r4,88(sp)
  80d9a8:	1021883a 	mov	r16,r2
  80d9ac:	a80b883a 	mov	r5,r21
  80d9b0:	080f07c0 	call	80f07c <_Bfree>
  80d9b4:	8000041e 	bne	r16,zero,80d9c8 <_dtoa_r+0x9b8>
  80d9b8:	d8801717 	ldw	r2,92(sp)
  80d9bc:	1000021e 	bne	r2,zero,80d9c8 <_dtoa_r+0x9b8>
  80d9c0:	e004c03a 	cmpne	r2,fp,zero
  80d9c4:	10011726 	beq	r2,zero,80de24 <_dtoa_r+0xe14>
  80d9c8:	a0010616 	blt	r20,zero,80dde4 <_dtoa_r+0xdd4>
  80d9cc:	a000041e 	bne	r20,zero,80d9e0 <_dtoa_r+0x9d0>
  80d9d0:	d8c01717 	ldw	r3,92(sp)
  80d9d4:	1800021e 	bne	r3,zero,80d9e0 <_dtoa_r+0x9d0>
  80d9d8:	e004c03a 	cmpne	r2,fp,zero
  80d9dc:	10010126 	beq	r2,zero,80dde4 <_dtoa_r+0xdd4>
  80d9e0:	04023d16 	blt	zero,r16,80e2d8 <_dtoa_r+0x12c8>
  80d9e4:	b5c00005 	stb	r23,0(r22)
  80d9e8:	d9800517 	ldw	r6,20(sp)
  80d9ec:	d9000f17 	ldw	r4,60(sp)
  80d9f0:	b5800044 	addi	r22,r22,1
  80d9f4:	3105883a 	add	r2,r6,r4
  80d9f8:	b0806526 	beq	r22,r2,80db90 <_dtoa_r+0xb80>
  80d9fc:	d9400717 	ldw	r5,28(sp)
  80da00:	d9001617 	ldw	r4,88(sp)
  80da04:	01800284 	movi	r6,10
  80da08:	000f883a 	mov	r7,zero
  80da0c:	080fd300 	call	80fd30 <__multadd>
  80da10:	d8800715 	stw	r2,28(sp)
  80da14:	d8800617 	ldw	r2,24(sp)
  80da18:	14c10c26 	beq	r2,r19,80de4c <_dtoa_r+0xe3c>
  80da1c:	d9400617 	ldw	r5,24(sp)
  80da20:	d9001617 	ldw	r4,88(sp)
  80da24:	01800284 	movi	r6,10
  80da28:	000f883a 	mov	r7,zero
  80da2c:	080fd300 	call	80fd30 <__multadd>
  80da30:	d9001617 	ldw	r4,88(sp)
  80da34:	980b883a 	mov	r5,r19
  80da38:	01800284 	movi	r6,10
  80da3c:	000f883a 	mov	r7,zero
  80da40:	d8800615 	stw	r2,24(sp)
  80da44:	080fd300 	call	80fd30 <__multadd>
  80da48:	1027883a 	mov	r19,r2
  80da4c:	003fc206 	br	80d958 <_dtoa_r+0x948>
  80da50:	2445c83a 	sub	r2,r4,r17
  80da54:	a088983a 	sll	r4,r20,r2
  80da58:	003e4b06 	br	80d388 <_dtoa_r+0x378>
  80da5c:	01bfffc4 	movi	r6,-1
  80da60:	00800044 	movi	r2,1
  80da64:	d9800e15 	stw	r6,56(sp)
  80da68:	d9800f15 	stw	r6,60(sp)
  80da6c:	d8800b15 	stw	r2,44(sp)
  80da70:	d8c01617 	ldw	r3,88(sp)
  80da74:	008005c4 	movi	r2,23
  80da78:	18001115 	stw	zero,68(r3)
  80da7c:	1580082e 	bgeu	r2,r22,80daa0 <_dtoa_r+0xa90>
  80da80:	00c00104 	movi	r3,4
  80da84:	0009883a 	mov	r4,zero
  80da88:	18c7883a 	add	r3,r3,r3
  80da8c:	18800504 	addi	r2,r3,20
  80da90:	21000044 	addi	r4,r4,1
  80da94:	b0bffc2e 	bgeu	r22,r2,80da88 <_dtoa_r+0xa78>
  80da98:	d9801617 	ldw	r6,88(sp)
  80da9c:	31001115 	stw	r4,68(r6)
  80daa0:	dc000f17 	ldw	r16,60(sp)
  80daa4:	003e4b06 	br	80d3d4 <_dtoa_r+0x3c4>
  80daa8:	d9801717 	ldw	r6,92(sp)
  80daac:	0023883a 	mov	r17,zero
  80dab0:	31bfff04 	addi	r6,r6,-4
  80dab4:	d9801715 	stw	r6,92(sp)
  80dab8:	003df806 	br	80d29c <_dtoa_r+0x28c>
  80dabc:	00800804 	movi	r2,32
  80dac0:	10c9c83a 	sub	r4,r2,r3
  80dac4:	00c00104 	movi	r3,4
  80dac8:	19005a16 	blt	r3,r4,80dc34 <_dtoa_r+0xc24>
  80dacc:	008000c4 	movi	r2,3
  80dad0:	113f7e16 	blt	r2,r4,80d8cc <_dtoa_r+0x8bc>
  80dad4:	20800704 	addi	r2,r4,28
  80dad8:	003f7506 	br	80d8b0 <_dtoa_r+0x8a0>
  80dadc:	d9801717 	ldw	r6,92(sp)
  80dae0:	00800044 	movi	r2,1
  80dae4:	1180a10e 	bge	r2,r6,80dd6c <_dtoa_r+0xd5c>
  80dae8:	d9800f17 	ldw	r6,60(sp)
  80daec:	d8c01017 	ldw	r3,64(sp)
  80daf0:	30bfffc4 	addi	r2,r6,-1
  80daf4:	1881c616 	blt	r3,r2,80e210 <_dtoa_r+0x1200>
  80daf8:	18a5c83a 	sub	r18,r3,r2
  80dafc:	d8800f17 	ldw	r2,60(sp)
  80db00:	10026216 	blt	r2,zero,80e48c <_dtoa_r+0x147c>
  80db04:	dc001117 	ldw	r16,68(sp)
  80db08:	1007883a 	mov	r3,r2
  80db0c:	d9800a17 	ldw	r6,40(sp)
  80db10:	d8801117 	ldw	r2,68(sp)
  80db14:	d9001617 	ldw	r4,88(sp)
  80db18:	30cd883a 	add	r6,r6,r3
  80db1c:	10c5883a 	add	r2,r2,r3
  80db20:	01400044 	movi	r5,1
  80db24:	d9800a15 	stw	r6,40(sp)
  80db28:	d8801115 	stw	r2,68(sp)
  80db2c:	080fcf40 	call	80fcf4 <__i2b>
  80db30:	1027883a 	mov	r19,r2
  80db34:	003f2506 	br	80d7cc <_dtoa_r+0x7bc>
  80db38:	00c02174 	movhi	r3,133
  80db3c:	18f1da04 	addi	r3,r3,-14488
  80db40:	003d6706 	br	80d0e0 <_dtoa_r+0xd0>
  80db44:	dd800517 	ldw	r22,20(sp)
  80db48:	04000044 	movi	r16,1
  80db4c:	00000706 	br	80db6c <_dtoa_r+0xb5c>
  80db50:	d9400717 	ldw	r5,28(sp)
  80db54:	d9001617 	ldw	r4,88(sp)
  80db58:	01800284 	movi	r6,10
  80db5c:	000f883a 	mov	r7,zero
  80db60:	080fd300 	call	80fd30 <__multadd>
  80db64:	d8800715 	stw	r2,28(sp)
  80db68:	84000044 	addi	r16,r16,1
  80db6c:	d9000717 	ldw	r4,28(sp)
  80db70:	900b883a 	mov	r5,r18
  80db74:	080cdf80 	call	80cdf8 <quorem>
  80db78:	15c00c04 	addi	r23,r2,48
  80db7c:	b5c00005 	stb	r23,0(r22)
  80db80:	d8c00f17 	ldw	r3,60(sp)
  80db84:	b5800044 	addi	r22,r22,1
  80db88:	80fff116 	blt	r16,r3,80db50 <_dtoa_r+0xb40>
  80db8c:	d8000615 	stw	zero,24(sp)
  80db90:	d9400717 	ldw	r5,28(sp)
  80db94:	d9001617 	ldw	r4,88(sp)
  80db98:	01800044 	movi	r6,1
  80db9c:	080f9c00 	call	80f9c0 <__lshift>
  80dba0:	1009883a 	mov	r4,r2
  80dba4:	900b883a 	mov	r5,r18
  80dba8:	d8800715 	stw	r2,28(sp)
  80dbac:	080f1d80 	call	80f1d8 <__mcmp>
  80dbb0:	00803c0e 	bge	zero,r2,80dca4 <_dtoa_r+0xc94>
  80dbb4:	b009883a 	mov	r4,r22
  80dbb8:	213fffc4 	addi	r4,r4,-1
  80dbbc:	21400003 	ldbu	r5,0(r4)
  80dbc0:	00800e44 	movi	r2,57
  80dbc4:	28c03fcc 	andi	r3,r5,255
  80dbc8:	18c0201c 	xori	r3,r3,128
  80dbcc:	18ffe004 	addi	r3,r3,-128
  80dbd0:	1881981e 	bne	r3,r2,80e234 <_dtoa_r+0x1224>
  80dbd4:	d9800517 	ldw	r6,20(sp)
  80dbd8:	21bff71e 	bne	r4,r6,80dbb8 <_dtoa_r+0xba8>
  80dbdc:	d8800d17 	ldw	r2,52(sp)
  80dbe0:	37000044 	addi	fp,r6,1
  80dbe4:	10800044 	addi	r2,r2,1
  80dbe8:	d8800d15 	stw	r2,52(sp)
  80dbec:	00800c44 	movi	r2,49
  80dbf0:	30800005 	stb	r2,0(r6)
  80dbf4:	d9001617 	ldw	r4,88(sp)
  80dbf8:	900b883a 	mov	r5,r18
  80dbfc:	080f07c0 	call	80f07c <_Bfree>
  80dc00:	983ecd26 	beq	r19,zero,80d738 <_dtoa_r+0x728>
  80dc04:	d8c00617 	ldw	r3,24(sp)
  80dc08:	18000426 	beq	r3,zero,80dc1c <_dtoa_r+0xc0c>
  80dc0c:	1cc00326 	beq	r3,r19,80dc1c <_dtoa_r+0xc0c>
  80dc10:	d9001617 	ldw	r4,88(sp)
  80dc14:	180b883a 	mov	r5,r3
  80dc18:	080f07c0 	call	80f07c <_Bfree>
  80dc1c:	d9001617 	ldw	r4,88(sp)
  80dc20:	980b883a 	mov	r5,r19
  80dc24:	080f07c0 	call	80f07c <_Bfree>
  80dc28:	003ec306 	br	80d738 <_dtoa_r+0x728>
  80dc2c:	1805883a 	mov	r2,r3
  80dc30:	003eeb06 	br	80d7e0 <_dtoa_r+0x7d0>
  80dc34:	d9800a17 	ldw	r6,40(sp)
  80dc38:	d8c01117 	ldw	r3,68(sp)
  80dc3c:	20bfff04 	addi	r2,r4,-4
  80dc40:	308d883a 	add	r6,r6,r2
  80dc44:	1887883a 	add	r3,r3,r2
  80dc48:	80a1883a 	add	r16,r16,r2
  80dc4c:	d9800a15 	stw	r6,40(sp)
  80dc50:	d8c01115 	stw	r3,68(sp)
  80dc54:	003f1d06 	br	80d8cc <_dtoa_r+0x8bc>
  80dc58:	a03f0c1e 	bne	r20,zero,80d88c <_dtoa_r+0x87c>
  80dc5c:	00800434 	movhi	r2,16
  80dc60:	10bfffc4 	addi	r2,r2,-1
  80dc64:	a884703a 	and	r2,r21,r2
  80dc68:	103f081e 	bne	r2,zero,80d88c <_dtoa_r+0x87c>
  80dc6c:	a89ffc2c 	andhi	r2,r21,32752
  80dc70:	103f0626 	beq	r2,zero,80d88c <_dtoa_r+0x87c>
  80dc74:	d8c01117 	ldw	r3,68(sp)
  80dc78:	d9000a17 	ldw	r4,40(sp)
  80dc7c:	18c00044 	addi	r3,r3,1
  80dc80:	21000044 	addi	r4,r4,1
  80dc84:	d8c01115 	stw	r3,68(sp)
  80dc88:	d9000a15 	stw	r4,40(sp)
  80dc8c:	003f0006 	br	80d890 <_dtoa_r+0x880>
  80dc90:	d9400717 	ldw	r5,28(sp)
  80dc94:	d9001617 	ldw	r4,88(sp)
  80dc98:	080fe300 	call	80fe30 <__pow5mult>
  80dc9c:	d8800715 	stw	r2,28(sp)
  80dca0:	003eed06 	br	80d858 <_dtoa_r+0x848>
  80dca4:	1000021e 	bne	r2,zero,80dcb0 <_dtoa_r+0xca0>
  80dca8:	b880004c 	andi	r2,r23,1
  80dcac:	103fc11e 	bne	r2,zero,80dbb4 <_dtoa_r+0xba4>
  80dcb0:	b5bfffc4 	addi	r22,r22,-1
  80dcb4:	b0c00007 	ldb	r3,0(r22)
  80dcb8:	00800c04 	movi	r2,48
  80dcbc:	18bffc26 	beq	r3,r2,80dcb0 <_dtoa_r+0xca0>
  80dcc0:	b7000044 	addi	fp,r22,1
  80dcc4:	003fcb06 	br	80dbf4 <_dtoa_r+0xbe4>
  80dcc8:	d9800d17 	ldw	r6,52(sp)
  80dccc:	018fc83a 	sub	r7,zero,r6
  80dcd0:	3801f726 	beq	r7,zero,80e4b0 <_dtoa_r+0x14a0>
  80dcd4:	398003cc 	andi	r6,r7,15
  80dcd8:	300c90fa 	slli	r6,r6,3
  80dcdc:	01402174 	movhi	r5,133
  80dce0:	29720104 	addi	r5,r5,-14332
  80dce4:	d9001217 	ldw	r4,72(sp)
  80dce8:	314d883a 	add	r6,r6,r5
  80dcec:	30c00117 	ldw	r3,4(r6)
  80dcf0:	30800017 	ldw	r2,0(r6)
  80dcf4:	d9401317 	ldw	r5,76(sp)
  80dcf8:	3821d13a 	srai	r16,r7,4
  80dcfc:	100d883a 	mov	r6,r2
  80dd00:	180f883a 	mov	r7,r3
  80dd04:	0814c180 	call	814c18 <__muldf3>
  80dd08:	1011883a 	mov	r8,r2
  80dd0c:	1813883a 	mov	r9,r3
  80dd10:	1029883a 	mov	r20,r2
  80dd14:	182b883a 	mov	r21,r3
  80dd18:	8001e526 	beq	r16,zero,80e4b0 <_dtoa_r+0x14a0>
  80dd1c:	05800084 	movi	r22,2
  80dd20:	04402174 	movhi	r17,133
  80dd24:	8c723304 	addi	r17,r17,-14132
  80dd28:	8080004c 	andi	r2,r16,1
  80dd2c:	1005003a 	cmpeq	r2,r2,zero
  80dd30:	1000081e 	bne	r2,zero,80dd54 <_dtoa_r+0xd44>
  80dd34:	89800017 	ldw	r6,0(r17)
  80dd38:	89c00117 	ldw	r7,4(r17)
  80dd3c:	480b883a 	mov	r5,r9
  80dd40:	4009883a 	mov	r4,r8
  80dd44:	0814c180 	call	814c18 <__muldf3>
  80dd48:	1011883a 	mov	r8,r2
  80dd4c:	b5800044 	addi	r22,r22,1
  80dd50:	1813883a 	mov	r9,r3
  80dd54:	8021d07a 	srai	r16,r16,1
  80dd58:	8c400204 	addi	r17,r17,8
  80dd5c:	803ff21e 	bne	r16,zero,80dd28 <_dtoa_r+0xd18>
  80dd60:	4029883a 	mov	r20,r8
  80dd64:	482b883a 	mov	r21,r9
  80dd68:	003dca06 	br	80d494 <_dtoa_r+0x484>
  80dd6c:	d9000817 	ldw	r4,32(sp)
  80dd70:	2005003a 	cmpeq	r2,r4,zero
  80dd74:	1001f61e 	bne	r2,zero,80e550 <_dtoa_r+0x1540>
  80dd78:	dc001117 	ldw	r16,68(sp)
  80dd7c:	dc801017 	ldw	r18,64(sp)
  80dd80:	18c10cc4 	addi	r3,r3,1075
  80dd84:	003f6106 	br	80db0c <_dtoa_r+0xafc>
  80dd88:	d8000b15 	stw	zero,44(sp)
  80dd8c:	d9802617 	ldw	r6,152(sp)
  80dd90:	d8c00d17 	ldw	r3,52(sp)
  80dd94:	30800044 	addi	r2,r6,1
  80dd98:	18ad883a 	add	r22,r3,r2
  80dd9c:	b13fffc4 	addi	r4,r22,-1
  80dda0:	d9000e15 	stw	r4,56(sp)
  80dda4:	0581f60e 	bge	zero,r22,80e580 <_dtoa_r+0x1570>
  80dda8:	dd800f15 	stw	r22,60(sp)
  80ddac:	003f3006 	br	80da70 <_dtoa_r+0xa60>
  80ddb0:	d8000b15 	stw	zero,44(sp)
  80ddb4:	d9002617 	ldw	r4,152(sp)
  80ddb8:	0101eb0e 	bge	zero,r4,80e568 <_dtoa_r+0x1558>
  80ddbc:	202d883a 	mov	r22,r4
  80ddc0:	d9000e15 	stw	r4,56(sp)
  80ddc4:	d9000f15 	stw	r4,60(sp)
  80ddc8:	003f2906 	br	80da70 <_dtoa_r+0xa60>
  80ddcc:	01800044 	movi	r6,1
  80ddd0:	d9800b15 	stw	r6,44(sp)
  80ddd4:	003ff706 	br	80ddb4 <_dtoa_r+0xda4>
  80ddd8:	01000044 	movi	r4,1
  80dddc:	d9000b15 	stw	r4,44(sp)
  80dde0:	003fea06 	br	80dd8c <_dtoa_r+0xd7c>
  80dde4:	04000c0e 	bge	zero,r16,80de18 <_dtoa_r+0xe08>
  80dde8:	d9400717 	ldw	r5,28(sp)
  80ddec:	d9001617 	ldw	r4,88(sp)
  80ddf0:	01800044 	movi	r6,1
  80ddf4:	080f9c00 	call	80f9c0 <__lshift>
  80ddf8:	1009883a 	mov	r4,r2
  80ddfc:	900b883a 	mov	r5,r18
  80de00:	d8800715 	stw	r2,28(sp)
  80de04:	080f1d80 	call	80f1d8 <__mcmp>
  80de08:	0081e00e 	bge	zero,r2,80e58c <_dtoa_r+0x157c>
  80de0c:	bdc00044 	addi	r23,r23,1
  80de10:	00800e84 	movi	r2,58
  80de14:	b881a226 	beq	r23,r2,80e4a0 <_dtoa_r+0x1490>
  80de18:	b7000044 	addi	fp,r22,1
  80de1c:	b5c00005 	stb	r23,0(r22)
  80de20:	003f7406 	br	80dbf4 <_dtoa_r+0xbe4>
  80de24:	00800e44 	movi	r2,57
  80de28:	b8819d26 	beq	r23,r2,80e4a0 <_dtoa_r+0x1490>
  80de2c:	053ffa0e 	bge	zero,r20,80de18 <_dtoa_r+0xe08>
  80de30:	8dc00c44 	addi	r23,r17,49
  80de34:	003ff806 	br	80de18 <_dtoa_r+0xe08>
  80de38:	d9001617 	ldw	r4,88(sp)
  80de3c:	a80b883a 	mov	r5,r21
  80de40:	04000044 	movi	r16,1
  80de44:	080f07c0 	call	80f07c <_Bfree>
  80de48:	003edf06 	br	80d9c8 <_dtoa_r+0x9b8>
  80de4c:	d9001617 	ldw	r4,88(sp)
  80de50:	980b883a 	mov	r5,r19
  80de54:	01800284 	movi	r6,10
  80de58:	000f883a 	mov	r7,zero
  80de5c:	080fd300 	call	80fd30 <__multadd>
  80de60:	1027883a 	mov	r19,r2
  80de64:	d8800615 	stw	r2,24(sp)
  80de68:	003ebb06 	br	80d958 <_dtoa_r+0x948>
  80de6c:	d9801117 	ldw	r6,68(sp)
  80de70:	d8800d17 	ldw	r2,52(sp)
  80de74:	d8000915 	stw	zero,36(sp)
  80de78:	308dc83a 	sub	r6,r6,r2
  80de7c:	0087c83a 	sub	r3,zero,r2
  80de80:	d9801115 	stw	r6,68(sp)
  80de84:	d8c01015 	stw	r3,64(sp)
  80de88:	003cfe06 	br	80d284 <_dtoa_r+0x274>
  80de8c:	018dc83a 	sub	r6,zero,r6
  80de90:	d9801115 	stw	r6,68(sp)
  80de94:	d8000a15 	stw	zero,40(sp)
  80de98:	003cf306 	br	80d268 <_dtoa_r+0x258>
  80de9c:	d9000d17 	ldw	r4,52(sp)
  80dea0:	08155640 	call	815564 <__floatsidf>
  80dea4:	880b883a 	mov	r5,r17
  80dea8:	8009883a 	mov	r4,r16
  80deac:	180f883a 	mov	r7,r3
  80deb0:	100d883a 	mov	r6,r2
  80deb4:	08152bc0 	call	8152bc <__nedf2>
  80deb8:	103ce126 	beq	r2,zero,80d240 <_dtoa_r+0x230>
  80debc:	d9800d17 	ldw	r6,52(sp)
  80dec0:	31bfffc4 	addi	r6,r6,-1
  80dec4:	d9800d15 	stw	r6,52(sp)
  80dec8:	003cdd06 	br	80d240 <_dtoa_r+0x230>
  80decc:	d9000717 	ldw	r4,28(sp)
  80ded0:	900b883a 	mov	r5,r18
  80ded4:	080f1d80 	call	80f1d8 <__mcmp>
  80ded8:	103e8d0e 	bge	r2,zero,80d910 <_dtoa_r+0x900>
  80dedc:	d9400717 	ldw	r5,28(sp)
  80dee0:	d9001617 	ldw	r4,88(sp)
  80dee4:	01800284 	movi	r6,10
  80dee8:	000f883a 	mov	r7,zero
  80deec:	080fd300 	call	80fd30 <__multadd>
  80def0:	d9800d17 	ldw	r6,52(sp)
  80def4:	d8800715 	stw	r2,28(sp)
  80def8:	31bfffc4 	addi	r6,r6,-1
  80defc:	d9800d15 	stw	r6,52(sp)
  80df00:	b001a71e 	bne	r22,zero,80e5a0 <_dtoa_r+0x1590>
  80df04:	d8800e17 	ldw	r2,56(sp)
  80df08:	d8800f15 	stw	r2,60(sp)
  80df0c:	003e8006 	br	80d910 <_dtoa_r+0x900>
  80df10:	90800417 	ldw	r2,16(r18)
  80df14:	1085883a 	add	r2,r2,r2
  80df18:	1085883a 	add	r2,r2,r2
  80df1c:	1485883a 	add	r2,r2,r18
  80df20:	11000417 	ldw	r4,16(r2)
  80df24:	080f0a40 	call	80f0a4 <__hi0bits>
  80df28:	00c00804 	movi	r3,32
  80df2c:	1887c83a 	sub	r3,r3,r2
  80df30:	003e5a06 	br	80d89c <_dtoa_r+0x88c>
  80df34:	d9400717 	ldw	r5,28(sp)
  80df38:	d9801017 	ldw	r6,64(sp)
  80df3c:	d9001617 	ldw	r4,88(sp)
  80df40:	080fe300 	call	80fe30 <__pow5mult>
  80df44:	d8800715 	stw	r2,28(sp)
  80df48:	003e4306 	br	80d858 <_dtoa_r+0x848>
  80df4c:	d9800f17 	ldw	r6,60(sp)
  80df50:	d8800d17 	ldw	r2,52(sp)
  80df54:	d9800315 	stw	r6,12(sp)
  80df58:	d8800415 	stw	r2,16(sp)
  80df5c:	d8c00b17 	ldw	r3,44(sp)
  80df60:	1805003a 	cmpeq	r2,r3,zero
  80df64:	1000e21e 	bne	r2,zero,80e2f0 <_dtoa_r+0x12e0>
  80df68:	d9000317 	ldw	r4,12(sp)
  80df6c:	0005883a 	mov	r2,zero
  80df70:	00cff834 	movhi	r3,16352
  80df74:	200c90fa 	slli	r6,r4,3
  80df78:	01002174 	movhi	r4,133
  80df7c:	21320104 	addi	r4,r4,-14332
  80df80:	180b883a 	mov	r5,r3
  80df84:	310d883a 	add	r6,r6,r4
  80df88:	327fff17 	ldw	r9,-4(r6)
  80df8c:	323ffe17 	ldw	r8,-8(r6)
  80df90:	1009883a 	mov	r4,r2
  80df94:	480f883a 	mov	r7,r9
  80df98:	400d883a 	mov	r6,r8
  80df9c:	0814fdc0 	call	814fdc <__divdf3>
  80dfa0:	180b883a 	mov	r5,r3
  80dfa4:	b00d883a 	mov	r6,r22
  80dfa8:	b80f883a 	mov	r7,r23
  80dfac:	1009883a 	mov	r4,r2
  80dfb0:	0814b240 	call	814b24 <__subdf3>
  80dfb4:	a80b883a 	mov	r5,r21
  80dfb8:	a009883a 	mov	r4,r20
  80dfbc:	d8c01915 	stw	r3,100(sp)
  80dfc0:	d8801815 	stw	r2,96(sp)
  80dfc4:	081565c0 	call	81565c <__fixdfsi>
  80dfc8:	1009883a 	mov	r4,r2
  80dfcc:	1027883a 	mov	r19,r2
  80dfd0:	08155640 	call	815564 <__floatsidf>
  80dfd4:	a80b883a 	mov	r5,r21
  80dfd8:	a009883a 	mov	r4,r20
  80dfdc:	180f883a 	mov	r7,r3
  80dfe0:	100d883a 	mov	r6,r2
  80dfe4:	0814b240 	call	814b24 <__subdf3>
  80dfe8:	d9801817 	ldw	r6,96(sp)
  80dfec:	1823883a 	mov	r17,r3
  80dff0:	d8801415 	stw	r2,80(sp)
  80dff4:	302d883a 	mov	r22,r6
  80dff8:	d9800517 	ldw	r6,20(sp)
  80dffc:	9cc00c04 	addi	r19,r19,48
  80e000:	dc401515 	stw	r17,84(sp)
  80e004:	d8c01917 	ldw	r3,100(sp)
  80e008:	34c00005 	stb	r19,0(r6)
  80e00c:	d8800517 	ldw	r2,20(sp)
  80e010:	d9401917 	ldw	r5,100(sp)
  80e014:	d9801417 	ldw	r6,80(sp)
  80e018:	b009883a 	mov	r4,r22
  80e01c:	880f883a 	mov	r7,r17
  80e020:	182f883a 	mov	r23,r3
  80e024:	17000044 	addi	fp,r2,1
  80e028:	08153440 	call	815344 <__gtdf2>
  80e02c:	00804e16 	blt	zero,r2,80e168 <_dtoa_r+0x1158>
  80e030:	d9801417 	ldw	r6,80(sp)
  80e034:	0005883a 	mov	r2,zero
  80e038:	00cffc34 	movhi	r3,16368
  80e03c:	180b883a 	mov	r5,r3
  80e040:	880f883a 	mov	r7,r17
  80e044:	1009883a 	mov	r4,r2
  80e048:	0814b240 	call	814b24 <__subdf3>
  80e04c:	d9401917 	ldw	r5,100(sp)
  80e050:	180f883a 	mov	r7,r3
  80e054:	b009883a 	mov	r4,r22
  80e058:	100d883a 	mov	r6,r2
  80e05c:	08153440 	call	815344 <__gtdf2>
  80e060:	00bda216 	blt	zero,r2,80d6ec <_dtoa_r+0x6dc>
  80e064:	d8c00317 	ldw	r3,12(sp)
  80e068:	00800044 	movi	r2,1
  80e06c:	10c01216 	blt	r2,r3,80e0b8 <_dtoa_r+0x10a8>
  80e070:	003d4506 	br	80d588 <_dtoa_r+0x578>
  80e074:	d9801417 	ldw	r6,80(sp)
  80e078:	0005883a 	mov	r2,zero
  80e07c:	00cffc34 	movhi	r3,16368
  80e080:	180b883a 	mov	r5,r3
  80e084:	880f883a 	mov	r7,r17
  80e088:	1009883a 	mov	r4,r2
  80e08c:	0814b240 	call	814b24 <__subdf3>
  80e090:	d9c01b17 	ldw	r7,108(sp)
  80e094:	180b883a 	mov	r5,r3
  80e098:	1009883a 	mov	r4,r2
  80e09c:	b00d883a 	mov	r6,r22
  80e0a0:	08154540 	call	815454 <__ltdf2>
  80e0a4:	103d9116 	blt	r2,zero,80d6ec <_dtoa_r+0x6dc>
  80e0a8:	d9800517 	ldw	r6,20(sp)
  80e0ac:	d9000317 	ldw	r4,12(sp)
  80e0b0:	3105883a 	add	r2,r6,r4
  80e0b4:	e0bd3426 	beq	fp,r2,80d588 <_dtoa_r+0x578>
  80e0b8:	04500934 	movhi	r17,16420
  80e0bc:	0021883a 	mov	r16,zero
  80e0c0:	b80b883a 	mov	r5,r23
  80e0c4:	b009883a 	mov	r4,r22
  80e0c8:	800d883a 	mov	r6,r16
  80e0cc:	880f883a 	mov	r7,r17
  80e0d0:	0814c180 	call	814c18 <__muldf3>
  80e0d4:	d9401517 	ldw	r5,84(sp)
  80e0d8:	d9001417 	ldw	r4,80(sp)
  80e0dc:	880f883a 	mov	r7,r17
  80e0e0:	000d883a 	mov	r6,zero
  80e0e4:	d8801a15 	stw	r2,104(sp)
  80e0e8:	d8c01b15 	stw	r3,108(sp)
  80e0ec:	0814c180 	call	814c18 <__muldf3>
  80e0f0:	180b883a 	mov	r5,r3
  80e0f4:	1009883a 	mov	r4,r2
  80e0f8:	1823883a 	mov	r17,r3
  80e0fc:	1021883a 	mov	r16,r2
  80e100:	081565c0 	call	81565c <__fixdfsi>
  80e104:	1009883a 	mov	r4,r2
  80e108:	102b883a 	mov	r21,r2
  80e10c:	08155640 	call	815564 <__floatsidf>
  80e110:	880b883a 	mov	r5,r17
  80e114:	8009883a 	mov	r4,r16
  80e118:	180f883a 	mov	r7,r3
  80e11c:	100d883a 	mov	r6,r2
  80e120:	0814b240 	call	814b24 <__subdf3>
  80e124:	1021883a 	mov	r16,r2
  80e128:	d9001b17 	ldw	r4,108(sp)
  80e12c:	1823883a 	mov	r17,r3
  80e130:	dc001415 	stw	r16,80(sp)
  80e134:	ad400c04 	addi	r21,r21,48
  80e138:	dc401515 	stw	r17,84(sp)
  80e13c:	d8801a17 	ldw	r2,104(sp)
  80e140:	e5400005 	stb	r21,0(fp)
  80e144:	202f883a 	mov	r23,r4
  80e148:	d9c01b17 	ldw	r7,108(sp)
  80e14c:	d9001417 	ldw	r4,80(sp)
  80e150:	880b883a 	mov	r5,r17
  80e154:	100d883a 	mov	r6,r2
  80e158:	102d883a 	mov	r22,r2
  80e15c:	e7000044 	addi	fp,fp,1
  80e160:	08154540 	call	815454 <__ltdf2>
  80e164:	103fc30e 	bge	r2,zero,80e074 <_dtoa_r+0x1064>
  80e168:	d9000417 	ldw	r4,16(sp)
  80e16c:	d9000d15 	stw	r4,52(sp)
  80e170:	003d7106 	br	80d738 <_dtoa_r+0x728>
  80e174:	d9801717 	ldw	r6,92(sp)
  80e178:	00800084 	movi	r2,2
  80e17c:	11bde60e 	bge	r2,r6,80d918 <_dtoa_r+0x908>
  80e180:	203cfb1e 	bne	r4,zero,80d570 <_dtoa_r+0x560>
  80e184:	d9001617 	ldw	r4,88(sp)
  80e188:	900b883a 	mov	r5,r18
  80e18c:	01800144 	movi	r6,5
  80e190:	000f883a 	mov	r7,zero
  80e194:	080fd300 	call	80fd30 <__multadd>
  80e198:	d9000717 	ldw	r4,28(sp)
  80e19c:	100b883a 	mov	r5,r2
  80e1a0:	1025883a 	mov	r18,r2
  80e1a4:	080f1d80 	call	80f1d8 <__mcmp>
  80e1a8:	00bcf10e 	bge	zero,r2,80d570 <_dtoa_r+0x560>
  80e1ac:	d8c00d17 	ldw	r3,52(sp)
  80e1b0:	d9000517 	ldw	r4,20(sp)
  80e1b4:	d8000615 	stw	zero,24(sp)
  80e1b8:	18c00044 	addi	r3,r3,1
  80e1bc:	d8c00d15 	stw	r3,52(sp)
  80e1c0:	00800c44 	movi	r2,49
  80e1c4:	27000044 	addi	fp,r4,1
  80e1c8:	20800005 	stb	r2,0(r4)
  80e1cc:	003e8906 	br	80dbf4 <_dtoa_r+0xbe4>
  80e1d0:	d8c00517 	ldw	r3,20(sp)
  80e1d4:	003bc206 	br	80d0e0 <_dtoa_r+0xd0>
  80e1d8:	01802174 	movhi	r6,133
  80e1dc:	31b23304 	addi	r6,r6,-14132
  80e1e0:	30c00917 	ldw	r3,36(r6)
  80e1e4:	30800817 	ldw	r2,32(r6)
  80e1e8:	d9001217 	ldw	r4,72(sp)
  80e1ec:	d9401317 	ldw	r5,76(sp)
  80e1f0:	180f883a 	mov	r7,r3
  80e1f4:	100d883a 	mov	r6,r2
  80e1f8:	0814fdc0 	call	814fdc <__divdf3>
  80e1fc:	948003cc 	andi	r18,r18,15
  80e200:	058000c4 	movi	r22,3
  80e204:	1029883a 	mov	r20,r2
  80e208:	182b883a 	mov	r21,r3
  80e20c:	003c8906 	br	80d434 <_dtoa_r+0x424>
  80e210:	d9001017 	ldw	r4,64(sp)
  80e214:	d9800917 	ldw	r6,36(sp)
  80e218:	0025883a 	mov	r18,zero
  80e21c:	1105c83a 	sub	r2,r2,r4
  80e220:	2089883a 	add	r4,r4,r2
  80e224:	308d883a 	add	r6,r6,r2
  80e228:	d9001015 	stw	r4,64(sp)
  80e22c:	d9800915 	stw	r6,36(sp)
  80e230:	003e3206 	br	80dafc <_dtoa_r+0xaec>
  80e234:	28800044 	addi	r2,r5,1
  80e238:	27000044 	addi	fp,r4,1
  80e23c:	20800005 	stb	r2,0(r4)
  80e240:	003e6c06 	br	80dbf4 <_dtoa_r+0xbe4>
  80e244:	d8800f17 	ldw	r2,60(sp)
  80e248:	00bce016 	blt	zero,r2,80d5cc <_dtoa_r+0x5bc>
  80e24c:	d9800f17 	ldw	r6,60(sp)
  80e250:	303cc51e 	bne	r6,zero,80d568 <_dtoa_r+0x558>
  80e254:	0005883a 	mov	r2,zero
  80e258:	00d00534 	movhi	r3,16404
  80e25c:	980b883a 	mov	r5,r19
  80e260:	180f883a 	mov	r7,r3
  80e264:	9009883a 	mov	r4,r18
  80e268:	100d883a 	mov	r6,r2
  80e26c:	0814c180 	call	814c18 <__muldf3>
  80e270:	180b883a 	mov	r5,r3
  80e274:	a80f883a 	mov	r7,r21
  80e278:	1009883a 	mov	r4,r2
  80e27c:	a00d883a 	mov	r6,r20
  80e280:	08153cc0 	call	8153cc <__gedf2>
  80e284:	103cb80e 	bge	r2,zero,80d568 <_dtoa_r+0x558>
  80e288:	0027883a 	mov	r19,zero
  80e28c:	0025883a 	mov	r18,zero
  80e290:	003fc606 	br	80e1ac <_dtoa_r+0x119c>
  80e294:	99400117 	ldw	r5,4(r19)
  80e298:	d9001617 	ldw	r4,88(sp)
  80e29c:	080f5fc0 	call	80f5fc <_Balloc>
  80e2a0:	99800417 	ldw	r6,16(r19)
  80e2a4:	11000304 	addi	r4,r2,12
  80e2a8:	99400304 	addi	r5,r19,12
  80e2ac:	318d883a 	add	r6,r6,r6
  80e2b0:	318d883a 	add	r6,r6,r6
  80e2b4:	31800204 	addi	r6,r6,8
  80e2b8:	1023883a 	mov	r17,r2
  80e2bc:	08073380 	call	807338 <memcpy>
  80e2c0:	d9001617 	ldw	r4,88(sp)
  80e2c4:	880b883a 	mov	r5,r17
  80e2c8:	01800044 	movi	r6,1
  80e2cc:	080f9c00 	call	80f9c0 <__lshift>
  80e2d0:	100b883a 	mov	r5,r2
  80e2d4:	003d9c06 	br	80d948 <_dtoa_r+0x938>
  80e2d8:	00800e44 	movi	r2,57
  80e2dc:	b8807026 	beq	r23,r2,80e4a0 <_dtoa_r+0x1490>
  80e2e0:	b8800044 	addi	r2,r23,1
  80e2e4:	b7000044 	addi	fp,r22,1
  80e2e8:	b0800005 	stb	r2,0(r22)
  80e2ec:	003e4106 	br	80dbf4 <_dtoa_r+0xbe4>
  80e2f0:	d8800317 	ldw	r2,12(sp)
  80e2f4:	01802174 	movhi	r6,133
  80e2f8:	31b20104 	addi	r6,r6,-14332
  80e2fc:	b009883a 	mov	r4,r22
  80e300:	100e90fa 	slli	r7,r2,3
  80e304:	b80b883a 	mov	r5,r23
  80e308:	398f883a 	add	r7,r7,r6
  80e30c:	38bffe17 	ldw	r2,-8(r7)
  80e310:	d9800517 	ldw	r6,20(sp)
  80e314:	38ffff17 	ldw	r3,-4(r7)
  80e318:	37000044 	addi	fp,r6,1
  80e31c:	180f883a 	mov	r7,r3
  80e320:	100d883a 	mov	r6,r2
  80e324:	0814c180 	call	814c18 <__muldf3>
  80e328:	a80b883a 	mov	r5,r21
  80e32c:	a009883a 	mov	r4,r20
  80e330:	182f883a 	mov	r23,r3
  80e334:	102d883a 	mov	r22,r2
  80e338:	081565c0 	call	81565c <__fixdfsi>
  80e33c:	1009883a 	mov	r4,r2
  80e340:	1027883a 	mov	r19,r2
  80e344:	08155640 	call	815564 <__floatsidf>
  80e348:	a80b883a 	mov	r5,r21
  80e34c:	a009883a 	mov	r4,r20
  80e350:	180f883a 	mov	r7,r3
  80e354:	100d883a 	mov	r6,r2
  80e358:	0814b240 	call	814b24 <__subdf3>
  80e35c:	180b883a 	mov	r5,r3
  80e360:	d8c00517 	ldw	r3,20(sp)
  80e364:	9cc00c04 	addi	r19,r19,48
  80e368:	1009883a 	mov	r4,r2
  80e36c:	1cc00005 	stb	r19,0(r3)
  80e370:	2021883a 	mov	r16,r4
  80e374:	d9000317 	ldw	r4,12(sp)
  80e378:	00800044 	movi	r2,1
  80e37c:	2823883a 	mov	r17,r5
  80e380:	20802226 	beq	r4,r2,80e40c <_dtoa_r+0x13fc>
  80e384:	1029883a 	mov	r20,r2
  80e388:	0005883a 	mov	r2,zero
  80e38c:	00d00934 	movhi	r3,16420
  80e390:	180f883a 	mov	r7,r3
  80e394:	100d883a 	mov	r6,r2
  80e398:	880b883a 	mov	r5,r17
  80e39c:	8009883a 	mov	r4,r16
  80e3a0:	0814c180 	call	814c18 <__muldf3>
  80e3a4:	180b883a 	mov	r5,r3
  80e3a8:	1009883a 	mov	r4,r2
  80e3ac:	1823883a 	mov	r17,r3
  80e3b0:	1021883a 	mov	r16,r2
  80e3b4:	081565c0 	call	81565c <__fixdfsi>
  80e3b8:	1009883a 	mov	r4,r2
  80e3bc:	102b883a 	mov	r21,r2
  80e3c0:	08155640 	call	815564 <__floatsidf>
  80e3c4:	880b883a 	mov	r5,r17
  80e3c8:	8009883a 	mov	r4,r16
  80e3cc:	180f883a 	mov	r7,r3
  80e3d0:	100d883a 	mov	r6,r2
  80e3d4:	0814b240 	call	814b24 <__subdf3>
  80e3d8:	180b883a 	mov	r5,r3
  80e3dc:	d8c00517 	ldw	r3,20(sp)
  80e3e0:	1009883a 	mov	r4,r2
  80e3e4:	ad400c04 	addi	r21,r21,48
  80e3e8:	1d05883a 	add	r2,r3,r20
  80e3ec:	15400005 	stb	r21,0(r2)
  80e3f0:	2021883a 	mov	r16,r4
  80e3f4:	d9000317 	ldw	r4,12(sp)
  80e3f8:	a5000044 	addi	r20,r20,1
  80e3fc:	2823883a 	mov	r17,r5
  80e400:	a13fe11e 	bne	r20,r4,80e388 <_dtoa_r+0x1378>
  80e404:	e505883a 	add	r2,fp,r20
  80e408:	173fffc4 	addi	fp,r2,-1
  80e40c:	0025883a 	mov	r18,zero
  80e410:	04cff834 	movhi	r19,16352
  80e414:	b009883a 	mov	r4,r22
  80e418:	b80b883a 	mov	r5,r23
  80e41c:	900d883a 	mov	r6,r18
  80e420:	980f883a 	mov	r7,r19
  80e424:	0814ba40 	call	814ba4 <__adddf3>
  80e428:	180b883a 	mov	r5,r3
  80e42c:	1009883a 	mov	r4,r2
  80e430:	800d883a 	mov	r6,r16
  80e434:	880f883a 	mov	r7,r17
  80e438:	08154540 	call	815454 <__ltdf2>
  80e43c:	103cab16 	blt	r2,zero,80d6ec <_dtoa_r+0x6dc>
  80e440:	0009883a 	mov	r4,zero
  80e444:	980b883a 	mov	r5,r19
  80e448:	b80f883a 	mov	r7,r23
  80e44c:	b00d883a 	mov	r6,r22
  80e450:	0814b240 	call	814b24 <__subdf3>
  80e454:	180b883a 	mov	r5,r3
  80e458:	880f883a 	mov	r7,r17
  80e45c:	1009883a 	mov	r4,r2
  80e460:	800d883a 	mov	r6,r16
  80e464:	08153440 	call	815344 <__gtdf2>
  80e468:	00bc470e 	bge	zero,r2,80d588 <_dtoa_r+0x578>
  80e46c:	00c00c04 	movi	r3,48
  80e470:	e73fffc4 	addi	fp,fp,-1
  80e474:	e0800007 	ldb	r2,0(fp)
  80e478:	10fffd26 	beq	r2,r3,80e470 <_dtoa_r+0x1460>
  80e47c:	d9800417 	ldw	r6,16(sp)
  80e480:	e7000044 	addi	fp,fp,1
  80e484:	d9800d15 	stw	r6,52(sp)
  80e488:	003cab06 	br	80d738 <_dtoa_r+0x728>
  80e48c:	d8c00f17 	ldw	r3,60(sp)
  80e490:	d9001117 	ldw	r4,68(sp)
  80e494:	20e1c83a 	sub	r16,r4,r3
  80e498:	0007883a 	mov	r3,zero
  80e49c:	003d9b06 	br	80db0c <_dtoa_r+0xafc>
  80e4a0:	00800e44 	movi	r2,57
  80e4a4:	b0800005 	stb	r2,0(r22)
  80e4a8:	b5800044 	addi	r22,r22,1
  80e4ac:	003dc106 	br	80dbb4 <_dtoa_r+0xba4>
  80e4b0:	05800084 	movi	r22,2
  80e4b4:	003bf706 	br	80d494 <_dtoa_r+0x484>
  80e4b8:	d9000f17 	ldw	r4,60(sp)
  80e4bc:	013c000e 	bge	zero,r4,80d4c0 <_dtoa_r+0x4b0>
  80e4c0:	d9800e17 	ldw	r6,56(sp)
  80e4c4:	01bc300e 	bge	zero,r6,80d588 <_dtoa_r+0x578>
  80e4c8:	0005883a 	mov	r2,zero
  80e4cc:	00d00934 	movhi	r3,16420
  80e4d0:	a80b883a 	mov	r5,r21
  80e4d4:	180f883a 	mov	r7,r3
  80e4d8:	a009883a 	mov	r4,r20
  80e4dc:	100d883a 	mov	r6,r2
  80e4e0:	0814c180 	call	814c18 <__muldf3>
  80e4e4:	b1000044 	addi	r4,r22,1
  80e4e8:	1021883a 	mov	r16,r2
  80e4ec:	1823883a 	mov	r17,r3
  80e4f0:	08155640 	call	815564 <__floatsidf>
  80e4f4:	880b883a 	mov	r5,r17
  80e4f8:	8009883a 	mov	r4,r16
  80e4fc:	180f883a 	mov	r7,r3
  80e500:	100d883a 	mov	r6,r2
  80e504:	0814c180 	call	814c18 <__muldf3>
  80e508:	0011883a 	mov	r8,zero
  80e50c:	02500734 	movhi	r9,16412
  80e510:	180b883a 	mov	r5,r3
  80e514:	480f883a 	mov	r7,r9
  80e518:	1009883a 	mov	r4,r2
  80e51c:	400d883a 	mov	r6,r8
  80e520:	0814ba40 	call	814ba4 <__adddf3>
  80e524:	102d883a 	mov	r22,r2
  80e528:	00bf3034 	movhi	r2,64704
  80e52c:	10ef883a 	add	r23,r2,r3
  80e530:	d8800d17 	ldw	r2,52(sp)
  80e534:	d8c00e17 	ldw	r3,56(sp)
  80e538:	8029883a 	mov	r20,r16
  80e53c:	10bfffc4 	addi	r2,r2,-1
  80e540:	882b883a 	mov	r21,r17
  80e544:	d8800415 	stw	r2,16(sp)
  80e548:	d8c00315 	stw	r3,12(sp)
  80e54c:	003e8306 	br	80df5c <_dtoa_r+0xf4c>
  80e550:	d8800117 	ldw	r2,4(sp)
  80e554:	dc001117 	ldw	r16,68(sp)
  80e558:	dc801017 	ldw	r18,64(sp)
  80e55c:	00c00d84 	movi	r3,54
  80e560:	1887c83a 	sub	r3,r3,r2
  80e564:	003d6906 	br	80db0c <_dtoa_r+0xafc>
  80e568:	01800044 	movi	r6,1
  80e56c:	3021883a 	mov	r16,r6
  80e570:	d9800f15 	stw	r6,60(sp)
  80e574:	d9802615 	stw	r6,152(sp)
  80e578:	d9800e15 	stw	r6,56(sp)
  80e57c:	003b9306 	br	80d3cc <_dtoa_r+0x3bc>
  80e580:	b021883a 	mov	r16,r22
  80e584:	dd800f15 	stw	r22,60(sp)
  80e588:	003b9006 	br	80d3cc <_dtoa_r+0x3bc>
  80e58c:	103e221e 	bne	r2,zero,80de18 <_dtoa_r+0xe08>
  80e590:	b880004c 	andi	r2,r23,1
  80e594:	1005003a 	cmpeq	r2,r2,zero
  80e598:	103e1f1e 	bne	r2,zero,80de18 <_dtoa_r+0xe08>
  80e59c:	003e1b06 	br	80de0c <_dtoa_r+0xdfc>
  80e5a0:	d9001617 	ldw	r4,88(sp)
  80e5a4:	980b883a 	mov	r5,r19
  80e5a8:	01800284 	movi	r6,10
  80e5ac:	000f883a 	mov	r7,zero
  80e5b0:	080fd300 	call	80fd30 <__multadd>
  80e5b4:	d8c00e17 	ldw	r3,56(sp)
  80e5b8:	1027883a 	mov	r19,r2
  80e5bc:	d8c00f15 	stw	r3,60(sp)
  80e5c0:	003cd306 	br	80d910 <_dtoa_r+0x900>

0080e5c4 <__sflags>:
  80e5c4:	28c00007 	ldb	r3,0(r5)
  80e5c8:	00801c84 	movi	r2,114
  80e5cc:	18800926 	beq	r3,r2,80e5f4 <__sflags+0x30>
  80e5d0:	00801dc4 	movi	r2,119
  80e5d4:	18801426 	beq	r3,r2,80e628 <__sflags+0x64>
  80e5d8:	00801844 	movi	r2,97
  80e5dc:	18801626 	beq	r3,r2,80e638 <__sflags+0x74>
  80e5e0:	0007883a 	mov	r3,zero
  80e5e4:	00800584 	movi	r2,22
  80e5e8:	20800015 	stw	r2,0(r4)
  80e5ec:	1805883a 	mov	r2,r3
  80e5f0:	f800283a 	ret
  80e5f4:	000f883a 	mov	r7,zero
  80e5f8:	0011883a 	mov	r8,zero
  80e5fc:	00c00104 	movi	r3,4
  80e600:	28800047 	ldb	r2,1(r5)
  80e604:	10000426 	beq	r2,zero,80e618 <__sflags+0x54>
  80e608:	01000ac4 	movi	r4,43
  80e60c:	11000e26 	beq	r2,r4,80e648 <__sflags+0x84>
  80e610:	28800087 	ldb	r2,2(r5)
  80e614:	11000c26 	beq	r2,r4,80e648 <__sflags+0x84>
  80e618:	3a04b03a 	or	r2,r7,r8
  80e61c:	30800015 	stw	r2,0(r6)
  80e620:	1805883a 	mov	r2,r3
  80e624:	f800283a 	ret
  80e628:	01c00044 	movi	r7,1
  80e62c:	02018004 	movi	r8,1536
  80e630:	00c00204 	movi	r3,8
  80e634:	003ff206 	br	80e600 <__sflags+0x3c>
  80e638:	01c00044 	movi	r7,1
  80e63c:	02008204 	movi	r8,520
  80e640:	00c04204 	movi	r3,264
  80e644:	003fee06 	br	80e600 <__sflags+0x3c>
  80e648:	00bffcc4 	movi	r2,-13
  80e64c:	1884703a 	and	r2,r3,r2
  80e650:	01c00084 	movi	r7,2
  80e654:	10c00414 	ori	r3,r2,16
  80e658:	3a04b03a 	or	r2,r7,r8
  80e65c:	30800015 	stw	r2,0(r6)
  80e660:	003fef06 	br	80e620 <__sflags+0x5c>

0080e664 <fputc>:
  80e664:	defffc04 	addi	sp,sp,-16
  80e668:	dc800215 	stw	r18,8(sp)
  80e66c:	04802174 	movhi	r18,133
  80e670:	94828104 	addi	r18,r18,2564
  80e674:	90c00017 	ldw	r3,0(r18)
  80e678:	dc400115 	stw	r17,4(sp)
  80e67c:	dc000015 	stw	r16,0(sp)
  80e680:	dfc00315 	stw	ra,12(sp)
  80e684:	2021883a 	mov	r16,r4
  80e688:	2823883a 	mov	r17,r5
  80e68c:	18000326 	beq	r3,zero,80e69c <fputc+0x38>
  80e690:	18800e17 	ldw	r2,56(r3)
  80e694:	1809883a 	mov	r4,r3
  80e698:	10000926 	beq	r2,zero,80e6c0 <fputc+0x5c>
  80e69c:	91000017 	ldw	r4,0(r18)
  80e6a0:	800b883a 	mov	r5,r16
  80e6a4:	880d883a 	mov	r6,r17
  80e6a8:	dfc00317 	ldw	ra,12(sp)
  80e6ac:	dc800217 	ldw	r18,8(sp)
  80e6b0:	dc400117 	ldw	r17,4(sp)
  80e6b4:	dc000017 	ldw	r16,0(sp)
  80e6b8:	dec00404 	addi	sp,sp,16
  80e6bc:	08101741 	jmpi	810174 <_putc_r>
  80e6c0:	08057e40 	call	8057e4 <__sinit>
  80e6c4:	003ff506 	br	80e69c <fputc+0x38>

0080e6c8 <_fputc_r>:
  80e6c8:	defffc04 	addi	sp,sp,-16
  80e6cc:	dc800215 	stw	r18,8(sp)
  80e6d0:	dc400115 	stw	r17,4(sp)
  80e6d4:	dc000015 	stw	r16,0(sp)
  80e6d8:	dfc00315 	stw	ra,12(sp)
  80e6dc:	2021883a 	mov	r16,r4
  80e6e0:	2823883a 	mov	r17,r5
  80e6e4:	3025883a 	mov	r18,r6
  80e6e8:	20000226 	beq	r4,zero,80e6f4 <_fputc_r+0x2c>
  80e6ec:	20800e17 	ldw	r2,56(r4)
  80e6f0:	10000926 	beq	r2,zero,80e718 <_fputc_r+0x50>
  80e6f4:	8009883a 	mov	r4,r16
  80e6f8:	880b883a 	mov	r5,r17
  80e6fc:	900d883a 	mov	r6,r18
  80e700:	dfc00317 	ldw	ra,12(sp)
  80e704:	dc800217 	ldw	r18,8(sp)
  80e708:	dc400117 	ldw	r17,4(sp)
  80e70c:	dc000017 	ldw	r16,0(sp)
  80e710:	dec00404 	addi	sp,sp,16
  80e714:	08101741 	jmpi	810174 <_putc_r>
  80e718:	08057e40 	call	8057e4 <__sinit>
  80e71c:	003ff506 	br	80e6f4 <_fputc_r+0x2c>

0080e720 <_fputs_r>:
  80e720:	defff804 	addi	sp,sp,-32
  80e724:	dc000515 	stw	r16,20(sp)
  80e728:	2021883a 	mov	r16,r4
  80e72c:	2809883a 	mov	r4,r5
  80e730:	dc400615 	stw	r17,24(sp)
  80e734:	dfc00715 	stw	ra,28(sp)
  80e738:	3023883a 	mov	r17,r6
  80e73c:	d9400015 	stw	r5,0(sp)
  80e740:	08088440 	call	808844 <strlen>
  80e744:	00c00044 	movi	r3,1
  80e748:	d8800115 	stw	r2,4(sp)
  80e74c:	d8c00315 	stw	r3,12(sp)
  80e750:	d8800415 	stw	r2,16(sp)
  80e754:	dec00215 	stw	sp,8(sp)
  80e758:	80000326 	beq	r16,zero,80e768 <_fputs_r+0x48>
  80e75c:	80800e17 	ldw	r2,56(r16)
  80e760:	8009883a 	mov	r4,r16
  80e764:	10000926 	beq	r2,zero,80e78c <_fputs_r+0x6c>
  80e768:	8009883a 	mov	r4,r16
  80e76c:	880b883a 	mov	r5,r17
  80e770:	d9800204 	addi	r6,sp,8
  80e774:	080e7b00 	call	80e7b0 <__sfvwrite_r>
  80e778:	dfc00717 	ldw	ra,28(sp)
  80e77c:	dc400617 	ldw	r17,24(sp)
  80e780:	dc000517 	ldw	r16,20(sp)
  80e784:	dec00804 	addi	sp,sp,32
  80e788:	f800283a 	ret
  80e78c:	08057e40 	call	8057e4 <__sinit>
  80e790:	003ff506 	br	80e768 <_fputs_r+0x48>

0080e794 <fputs>:
  80e794:	01802174 	movhi	r6,133
  80e798:	31828104 	addi	r6,r6,2564
  80e79c:	2007883a 	mov	r3,r4
  80e7a0:	31000017 	ldw	r4,0(r6)
  80e7a4:	280d883a 	mov	r6,r5
  80e7a8:	180b883a 	mov	r5,r3
  80e7ac:	080e7201 	jmpi	80e720 <_fputs_r>

0080e7b0 <__sfvwrite_r>:
  80e7b0:	30800217 	ldw	r2,8(r6)
  80e7b4:	defff504 	addi	sp,sp,-44
  80e7b8:	df000915 	stw	fp,36(sp)
  80e7bc:	dd800715 	stw	r22,28(sp)
  80e7c0:	dc800315 	stw	r18,12(sp)
  80e7c4:	dfc00a15 	stw	ra,40(sp)
  80e7c8:	ddc00815 	stw	r23,32(sp)
  80e7cc:	dd400615 	stw	r21,24(sp)
  80e7d0:	dd000515 	stw	r20,20(sp)
  80e7d4:	dcc00415 	stw	r19,16(sp)
  80e7d8:	dc400215 	stw	r17,8(sp)
  80e7dc:	dc000115 	stw	r16,4(sp)
  80e7e0:	302d883a 	mov	r22,r6
  80e7e4:	2039883a 	mov	fp,r4
  80e7e8:	2825883a 	mov	r18,r5
  80e7ec:	10001c26 	beq	r2,zero,80e860 <__sfvwrite_r+0xb0>
  80e7f0:	29c0030b 	ldhu	r7,12(r5)
  80e7f4:	3880020c 	andi	r2,r7,8
  80e7f8:	10002726 	beq	r2,zero,80e898 <__sfvwrite_r+0xe8>
  80e7fc:	28800417 	ldw	r2,16(r5)
  80e800:	10002526 	beq	r2,zero,80e898 <__sfvwrite_r+0xe8>
  80e804:	3880008c 	andi	r2,r7,2
  80e808:	b5400017 	ldw	r21,0(r22)
  80e80c:	10002826 	beq	r2,zero,80e8b0 <__sfvwrite_r+0x100>
  80e810:	0021883a 	mov	r16,zero
  80e814:	0023883a 	mov	r17,zero
  80e818:	880d883a 	mov	r6,r17
  80e81c:	e009883a 	mov	r4,fp
  80e820:	00810004 	movi	r2,1024
  80e824:	80006e26 	beq	r16,zero,80e9e0 <__sfvwrite_r+0x230>
  80e828:	800f883a 	mov	r7,r16
  80e82c:	91400717 	ldw	r5,28(r18)
  80e830:	1400012e 	bgeu	r2,r16,80e838 <__sfvwrite_r+0x88>
  80e834:	100f883a 	mov	r7,r2
  80e838:	90c00917 	ldw	r3,36(r18)
  80e83c:	183ee83a 	callr	r3
  80e840:	1007883a 	mov	r3,r2
  80e844:	80a1c83a 	sub	r16,r16,r2
  80e848:	88a3883a 	add	r17,r17,r2
  80e84c:	00806d0e 	bge	zero,r2,80ea04 <__sfvwrite_r+0x254>
  80e850:	b0800217 	ldw	r2,8(r22)
  80e854:	10c5c83a 	sub	r2,r2,r3
  80e858:	b0800215 	stw	r2,8(r22)
  80e85c:	103fee1e 	bne	r2,zero,80e818 <__sfvwrite_r+0x68>
  80e860:	0009883a 	mov	r4,zero
  80e864:	2005883a 	mov	r2,r4
  80e868:	dfc00a17 	ldw	ra,40(sp)
  80e86c:	df000917 	ldw	fp,36(sp)
  80e870:	ddc00817 	ldw	r23,32(sp)
  80e874:	dd800717 	ldw	r22,28(sp)
  80e878:	dd400617 	ldw	r21,24(sp)
  80e87c:	dd000517 	ldw	r20,20(sp)
  80e880:	dcc00417 	ldw	r19,16(sp)
  80e884:	dc800317 	ldw	r18,12(sp)
  80e888:	dc400217 	ldw	r17,8(sp)
  80e88c:	dc000117 	ldw	r16,4(sp)
  80e890:	dec00b04 	addi	sp,sp,44
  80e894:	f800283a 	ret
  80e898:	080cc4c0 	call	80cc4c <__swsetup_r>
  80e89c:	1000e41e 	bne	r2,zero,80ec30 <__sfvwrite_r+0x480>
  80e8a0:	91c0030b 	ldhu	r7,12(r18)
  80e8a4:	b5400017 	ldw	r21,0(r22)
  80e8a8:	3880008c 	andi	r2,r7,2
  80e8ac:	103fd81e 	bne	r2,zero,80e810 <__sfvwrite_r+0x60>
  80e8b0:	3880004c 	andi	r2,r7,1
  80e8b4:	1005003a 	cmpeq	r2,r2,zero
  80e8b8:	10005726 	beq	r2,zero,80ea18 <__sfvwrite_r+0x268>
  80e8bc:	0029883a 	mov	r20,zero
  80e8c0:	002f883a 	mov	r23,zero
  80e8c4:	a0004226 	beq	r20,zero,80e9d0 <__sfvwrite_r+0x220>
  80e8c8:	3880800c 	andi	r2,r7,512
  80e8cc:	94000217 	ldw	r16,8(r18)
  80e8d0:	10008b26 	beq	r2,zero,80eb00 <__sfvwrite_r+0x350>
  80e8d4:	800d883a 	mov	r6,r16
  80e8d8:	a400a536 	bltu	r20,r16,80eb70 <__sfvwrite_r+0x3c0>
  80e8dc:	3881200c 	andi	r2,r7,1152
  80e8e0:	10002726 	beq	r2,zero,80e980 <__sfvwrite_r+0x1d0>
  80e8e4:	90800517 	ldw	r2,20(r18)
  80e8e8:	92000417 	ldw	r8,16(r18)
  80e8ec:	91400017 	ldw	r5,0(r18)
  80e8f0:	1087883a 	add	r3,r2,r2
  80e8f4:	1887883a 	add	r3,r3,r2
  80e8f8:	1808d7fa 	srli	r4,r3,31
  80e8fc:	2a21c83a 	sub	r16,r5,r8
  80e900:	80800044 	addi	r2,r16,1
  80e904:	20c9883a 	add	r4,r4,r3
  80e908:	2027d07a 	srai	r19,r4,1
  80e90c:	a085883a 	add	r2,r20,r2
  80e910:	980d883a 	mov	r6,r19
  80e914:	9880022e 	bgeu	r19,r2,80e920 <__sfvwrite_r+0x170>
  80e918:	1027883a 	mov	r19,r2
  80e91c:	100d883a 	mov	r6,r2
  80e920:	3881000c 	andi	r2,r7,1024
  80e924:	1000b826 	beq	r2,zero,80ec08 <__sfvwrite_r+0x458>
  80e928:	300b883a 	mov	r5,r6
  80e92c:	e009883a 	mov	r4,fp
  80e930:	0806bf80 	call	806bf8 <_malloc_r>
  80e934:	10003126 	beq	r2,zero,80e9fc <__sfvwrite_r+0x24c>
  80e938:	91400417 	ldw	r5,16(r18)
  80e93c:	1009883a 	mov	r4,r2
  80e940:	800d883a 	mov	r6,r16
  80e944:	1023883a 	mov	r17,r2
  80e948:	08073380 	call	807338 <memcpy>
  80e94c:	90c0030b 	ldhu	r3,12(r18)
  80e950:	00beffc4 	movi	r2,-1025
  80e954:	1886703a 	and	r3,r3,r2
  80e958:	18c02014 	ori	r3,r3,128
  80e95c:	90c0030d 	sth	r3,12(r18)
  80e960:	9c07c83a 	sub	r3,r19,r16
  80e964:	8c05883a 	add	r2,r17,r16
  80e968:	a00d883a 	mov	r6,r20
  80e96c:	a021883a 	mov	r16,r20
  80e970:	90800015 	stw	r2,0(r18)
  80e974:	90c00215 	stw	r3,8(r18)
  80e978:	94400415 	stw	r17,16(r18)
  80e97c:	94c00515 	stw	r19,20(r18)
  80e980:	91000017 	ldw	r4,0(r18)
  80e984:	b80b883a 	mov	r5,r23
  80e988:	a023883a 	mov	r17,r20
  80e98c:	08073d80 	call	8073d8 <memmove>
  80e990:	90c00217 	ldw	r3,8(r18)
  80e994:	90800017 	ldw	r2,0(r18)
  80e998:	a027883a 	mov	r19,r20
  80e99c:	1c07c83a 	sub	r3,r3,r16
  80e9a0:	1405883a 	add	r2,r2,r16
  80e9a4:	90c00215 	stw	r3,8(r18)
  80e9a8:	a021883a 	mov	r16,r20
  80e9ac:	90800015 	stw	r2,0(r18)
  80e9b0:	b0800217 	ldw	r2,8(r22)
  80e9b4:	1405c83a 	sub	r2,r2,r16
  80e9b8:	b0800215 	stw	r2,8(r22)
  80e9bc:	103fa826 	beq	r2,zero,80e860 <__sfvwrite_r+0xb0>
  80e9c0:	a469c83a 	sub	r20,r20,r17
  80e9c4:	91c0030b 	ldhu	r7,12(r18)
  80e9c8:	bcef883a 	add	r23,r23,r19
  80e9cc:	a03fbe1e 	bne	r20,zero,80e8c8 <__sfvwrite_r+0x118>
  80e9d0:	adc00017 	ldw	r23,0(r21)
  80e9d4:	ad000117 	ldw	r20,4(r21)
  80e9d8:	ad400204 	addi	r21,r21,8
  80e9dc:	003fb906 	br	80e8c4 <__sfvwrite_r+0x114>
  80e9e0:	ac400017 	ldw	r17,0(r21)
  80e9e4:	ac000117 	ldw	r16,4(r21)
  80e9e8:	ad400204 	addi	r21,r21,8
  80e9ec:	003f8a06 	br	80e818 <__sfvwrite_r+0x68>
  80e9f0:	91400417 	ldw	r5,16(r18)
  80e9f4:	e009883a 	mov	r4,fp
  80e9f8:	0805f140 	call	805f14 <_free_r>
  80e9fc:	00800304 	movi	r2,12
  80ea00:	e0800015 	stw	r2,0(fp)
  80ea04:	9080030b 	ldhu	r2,12(r18)
  80ea08:	013fffc4 	movi	r4,-1
  80ea0c:	10801014 	ori	r2,r2,64
  80ea10:	9080030d 	sth	r2,12(r18)
  80ea14:	003f9306 	br	80e864 <__sfvwrite_r+0xb4>
  80ea18:	0027883a 	mov	r19,zero
  80ea1c:	002f883a 	mov	r23,zero
  80ea20:	d8000015 	stw	zero,0(sp)
  80ea24:	0029883a 	mov	r20,zero
  80ea28:	98001e26 	beq	r19,zero,80eaa4 <__sfvwrite_r+0x2f4>
  80ea2c:	d8c00017 	ldw	r3,0(sp)
  80ea30:	1804c03a 	cmpne	r2,r3,zero
  80ea34:	10005e26 	beq	r2,zero,80ebb0 <__sfvwrite_r+0x400>
  80ea38:	9821883a 	mov	r16,r19
  80ea3c:	a4c0012e 	bgeu	r20,r19,80ea44 <__sfvwrite_r+0x294>
  80ea40:	a021883a 	mov	r16,r20
  80ea44:	91000017 	ldw	r4,0(r18)
  80ea48:	90800417 	ldw	r2,16(r18)
  80ea4c:	91800217 	ldw	r6,8(r18)
  80ea50:	91c00517 	ldw	r7,20(r18)
  80ea54:	1100022e 	bgeu	r2,r4,80ea60 <__sfvwrite_r+0x2b0>
  80ea58:	31e3883a 	add	r17,r6,r7
  80ea5c:	8c001616 	blt	r17,r16,80eab8 <__sfvwrite_r+0x308>
  80ea60:	81c03816 	blt	r16,r7,80eb44 <__sfvwrite_r+0x394>
  80ea64:	90c00917 	ldw	r3,36(r18)
  80ea68:	91400717 	ldw	r5,28(r18)
  80ea6c:	e009883a 	mov	r4,fp
  80ea70:	b80d883a 	mov	r6,r23
  80ea74:	183ee83a 	callr	r3
  80ea78:	1023883a 	mov	r17,r2
  80ea7c:	00bfe10e 	bge	zero,r2,80ea04 <__sfvwrite_r+0x254>
  80ea80:	a469c83a 	sub	r20,r20,r17
  80ea84:	a0001826 	beq	r20,zero,80eae8 <__sfvwrite_r+0x338>
  80ea88:	b0800217 	ldw	r2,8(r22)
  80ea8c:	1445c83a 	sub	r2,r2,r17
  80ea90:	b0800215 	stw	r2,8(r22)
  80ea94:	103f7226 	beq	r2,zero,80e860 <__sfvwrite_r+0xb0>
  80ea98:	9c67c83a 	sub	r19,r19,r17
  80ea9c:	bc6f883a 	add	r23,r23,r17
  80eaa0:	983fe21e 	bne	r19,zero,80ea2c <__sfvwrite_r+0x27c>
  80eaa4:	adc00017 	ldw	r23,0(r21)
  80eaa8:	acc00117 	ldw	r19,4(r21)
  80eaac:	ad400204 	addi	r21,r21,8
  80eab0:	d8000015 	stw	zero,0(sp)
  80eab4:	003fdc06 	br	80ea28 <__sfvwrite_r+0x278>
  80eab8:	b80b883a 	mov	r5,r23
  80eabc:	880d883a 	mov	r6,r17
  80eac0:	08073d80 	call	8073d8 <memmove>
  80eac4:	90c00017 	ldw	r3,0(r18)
  80eac8:	e009883a 	mov	r4,fp
  80eacc:	900b883a 	mov	r5,r18
  80ead0:	1c47883a 	add	r3,r3,r17
  80ead4:	90c00015 	stw	r3,0(r18)
  80ead8:	08055040 	call	805504 <_fflush_r>
  80eadc:	103fc91e 	bne	r2,zero,80ea04 <__sfvwrite_r+0x254>
  80eae0:	a469c83a 	sub	r20,r20,r17
  80eae4:	a03fe81e 	bne	r20,zero,80ea88 <__sfvwrite_r+0x2d8>
  80eae8:	e009883a 	mov	r4,fp
  80eaec:	900b883a 	mov	r5,r18
  80eaf0:	08055040 	call	805504 <_fflush_r>
  80eaf4:	103fc31e 	bne	r2,zero,80ea04 <__sfvwrite_r+0x254>
  80eaf8:	d8000015 	stw	zero,0(sp)
  80eafc:	003fe206 	br	80ea88 <__sfvwrite_r+0x2d8>
  80eb00:	91000017 	ldw	r4,0(r18)
  80eb04:	90800417 	ldw	r2,16(r18)
  80eb08:	1100022e 	bgeu	r2,r4,80eb14 <__sfvwrite_r+0x364>
  80eb0c:	8023883a 	mov	r17,r16
  80eb10:	85003136 	bltu	r16,r20,80ebd8 <__sfvwrite_r+0x428>
  80eb14:	91c00517 	ldw	r7,20(r18)
  80eb18:	a1c01836 	bltu	r20,r7,80eb7c <__sfvwrite_r+0x3cc>
  80eb1c:	90c00917 	ldw	r3,36(r18)
  80eb20:	91400717 	ldw	r5,28(r18)
  80eb24:	e009883a 	mov	r4,fp
  80eb28:	b80d883a 	mov	r6,r23
  80eb2c:	183ee83a 	callr	r3
  80eb30:	1021883a 	mov	r16,r2
  80eb34:	00bfb30e 	bge	zero,r2,80ea04 <__sfvwrite_r+0x254>
  80eb38:	1023883a 	mov	r17,r2
  80eb3c:	1027883a 	mov	r19,r2
  80eb40:	003f9b06 	br	80e9b0 <__sfvwrite_r+0x200>
  80eb44:	b80b883a 	mov	r5,r23
  80eb48:	800d883a 	mov	r6,r16
  80eb4c:	08073d80 	call	8073d8 <memmove>
  80eb50:	90c00217 	ldw	r3,8(r18)
  80eb54:	90800017 	ldw	r2,0(r18)
  80eb58:	8023883a 	mov	r17,r16
  80eb5c:	1c07c83a 	sub	r3,r3,r16
  80eb60:	1405883a 	add	r2,r2,r16
  80eb64:	90c00215 	stw	r3,8(r18)
  80eb68:	90800015 	stw	r2,0(r18)
  80eb6c:	003fc406 	br	80ea80 <__sfvwrite_r+0x2d0>
  80eb70:	a00d883a 	mov	r6,r20
  80eb74:	a021883a 	mov	r16,r20
  80eb78:	003f8106 	br	80e980 <__sfvwrite_r+0x1d0>
  80eb7c:	b80b883a 	mov	r5,r23
  80eb80:	a00d883a 	mov	r6,r20
  80eb84:	08073d80 	call	8073d8 <memmove>
  80eb88:	90c00217 	ldw	r3,8(r18)
  80eb8c:	90800017 	ldw	r2,0(r18)
  80eb90:	a021883a 	mov	r16,r20
  80eb94:	1d07c83a 	sub	r3,r3,r20
  80eb98:	1505883a 	add	r2,r2,r20
  80eb9c:	a023883a 	mov	r17,r20
  80eba0:	a027883a 	mov	r19,r20
  80eba4:	90c00215 	stw	r3,8(r18)
  80eba8:	90800015 	stw	r2,0(r18)
  80ebac:	003f8006 	br	80e9b0 <__sfvwrite_r+0x200>
  80ebb0:	b809883a 	mov	r4,r23
  80ebb4:	01400284 	movi	r5,10
  80ebb8:	980d883a 	mov	r6,r19
  80ebbc:	080ef240 	call	80ef24 <memchr>
  80ebc0:	10001726 	beq	r2,zero,80ec20 <__sfvwrite_r+0x470>
  80ebc4:	15c5c83a 	sub	r2,r2,r23
  80ebc8:	15000044 	addi	r20,r2,1
  80ebcc:	00800044 	movi	r2,1
  80ebd0:	d8800015 	stw	r2,0(sp)
  80ebd4:	003f9806 	br	80ea38 <__sfvwrite_r+0x288>
  80ebd8:	b80b883a 	mov	r5,r23
  80ebdc:	800d883a 	mov	r6,r16
  80ebe0:	08073d80 	call	8073d8 <memmove>
  80ebe4:	90c00017 	ldw	r3,0(r18)
  80ebe8:	e009883a 	mov	r4,fp
  80ebec:	900b883a 	mov	r5,r18
  80ebf0:	1c07883a 	add	r3,r3,r16
  80ebf4:	90c00015 	stw	r3,0(r18)
  80ebf8:	8027883a 	mov	r19,r16
  80ebfc:	08055040 	call	805504 <_fflush_r>
  80ec00:	103f6b26 	beq	r2,zero,80e9b0 <__sfvwrite_r+0x200>
  80ec04:	003f7f06 	br	80ea04 <__sfvwrite_r+0x254>
  80ec08:	400b883a 	mov	r5,r8
  80ec0c:	e009883a 	mov	r4,fp
  80ec10:	08102d40 	call	8102d4 <_realloc_r>
  80ec14:	103f7626 	beq	r2,zero,80e9f0 <__sfvwrite_r+0x240>
  80ec18:	1023883a 	mov	r17,r2
  80ec1c:	003f5006 	br	80e960 <__sfvwrite_r+0x1b0>
  80ec20:	00c00044 	movi	r3,1
  80ec24:	9d000044 	addi	r20,r19,1
  80ec28:	d8c00015 	stw	r3,0(sp)
  80ec2c:	003f8206 	br	80ea38 <__sfvwrite_r+0x288>
  80ec30:	9080030b 	ldhu	r2,12(r18)
  80ec34:	00c00244 	movi	r3,9
  80ec38:	013fffc4 	movi	r4,-1
  80ec3c:	10801014 	ori	r2,r2,64
  80ec40:	9080030d 	sth	r2,12(r18)
  80ec44:	e0c00015 	stw	r3,0(fp)
  80ec48:	003f0606 	br	80e864 <__sfvwrite_r+0xb4>

0080ec4c <_isatty_r>:
  80ec4c:	defffd04 	addi	sp,sp,-12
  80ec50:	dc000015 	stw	r16,0(sp)
  80ec54:	04002174 	movhi	r16,133
  80ec58:	8402da04 	addi	r16,r16,2920
  80ec5c:	dc400115 	stw	r17,4(sp)
  80ec60:	80000015 	stw	zero,0(r16)
  80ec64:	2023883a 	mov	r17,r4
  80ec68:	2809883a 	mov	r4,r5
  80ec6c:	dfc00215 	stw	ra,8(sp)
  80ec70:	08166080 	call	816608 <isatty>
  80ec74:	1007883a 	mov	r3,r2
  80ec78:	00bfffc4 	movi	r2,-1
  80ec7c:	18800626 	beq	r3,r2,80ec98 <_isatty_r+0x4c>
  80ec80:	1805883a 	mov	r2,r3
  80ec84:	dfc00217 	ldw	ra,8(sp)
  80ec88:	dc400117 	ldw	r17,4(sp)
  80ec8c:	dc000017 	ldw	r16,0(sp)
  80ec90:	dec00304 	addi	sp,sp,12
  80ec94:	f800283a 	ret
  80ec98:	80800017 	ldw	r2,0(r16)
  80ec9c:	103ff826 	beq	r2,zero,80ec80 <_isatty_r+0x34>
  80eca0:	88800015 	stw	r2,0(r17)
  80eca4:	1805883a 	mov	r2,r3
  80eca8:	dfc00217 	ldw	ra,8(sp)
  80ecac:	dc400117 	ldw	r17,4(sp)
  80ecb0:	dc000017 	ldw	r16,0(sp)
  80ecb4:	dec00304 	addi	sp,sp,12
  80ecb8:	f800283a 	ret

0080ecbc <iswspace>:
  80ecbc:	00803fc4 	movi	r2,255
  80ecc0:	0007883a 	mov	r3,zero
  80ecc4:	11000636 	bltu	r2,r4,80ece0 <iswspace+0x24>
  80ecc8:	00802174 	movhi	r2,133
  80eccc:	10828004 	addi	r2,r2,2560
  80ecd0:	10c00017 	ldw	r3,0(r2)
  80ecd4:	1907883a 	add	r3,r3,r4
  80ecd8:	18800003 	ldbu	r2,0(r3)
  80ecdc:	10c0020c 	andi	r3,r2,8
  80ece0:	1805883a 	mov	r2,r3
  80ece4:	f800283a 	ret

0080ece8 <__locale_charset>:
  80ece8:	d0a01017 	ldw	r2,-32704(gp)
  80ecec:	f800283a 	ret

0080ecf0 <_localeconv_r>:
  80ecf0:	00802174 	movhi	r2,133
  80ecf4:	10b1f504 	addi	r2,r2,-14380
  80ecf8:	f800283a 	ret

0080ecfc <localeconv>:
  80ecfc:	00802174 	movhi	r2,133
  80ed00:	10828104 	addi	r2,r2,2564
  80ed04:	11000017 	ldw	r4,0(r2)
  80ed08:	080ecf01 	jmpi	80ecf0 <_localeconv_r>

0080ed0c <_setlocale_r>:
  80ed0c:	defffc04 	addi	sp,sp,-16
  80ed10:	00c02174 	movhi	r3,133
  80ed14:	18efd704 	addi	r3,r3,-16548
  80ed18:	dc800215 	stw	r18,8(sp)
  80ed1c:	dc400115 	stw	r17,4(sp)
  80ed20:	dc000015 	stw	r16,0(sp)
  80ed24:	2023883a 	mov	r17,r4
  80ed28:	2825883a 	mov	r18,r5
  80ed2c:	dfc00315 	stw	ra,12(sp)
  80ed30:	3021883a 	mov	r16,r6
  80ed34:	3009883a 	mov	r4,r6
  80ed38:	180b883a 	mov	r5,r3
  80ed3c:	30000926 	beq	r6,zero,80ed64 <_setlocale_r+0x58>
  80ed40:	08080880 	call	808088 <strcmp>
  80ed44:	8009883a 	mov	r4,r16
  80ed48:	01402174 	movhi	r5,133
  80ed4c:	2971d204 	addi	r5,r5,-14520
  80ed50:	10000b1e 	bne	r2,zero,80ed80 <_setlocale_r+0x74>
  80ed54:	8c000d15 	stw	r16,52(r17)
  80ed58:	8c800c15 	stw	r18,48(r17)
  80ed5c:	00c02174 	movhi	r3,133
  80ed60:	18efd704 	addi	r3,r3,-16548
  80ed64:	1805883a 	mov	r2,r3
  80ed68:	dfc00317 	ldw	ra,12(sp)
  80ed6c:	dc800217 	ldw	r18,8(sp)
  80ed70:	dc400117 	ldw	r17,4(sp)
  80ed74:	dc000017 	ldw	r16,0(sp)
  80ed78:	dec00404 	addi	sp,sp,16
  80ed7c:	f800283a 	ret
  80ed80:	08080880 	call	808088 <strcmp>
  80ed84:	0007883a 	mov	r3,zero
  80ed88:	103ff226 	beq	r2,zero,80ed54 <_setlocale_r+0x48>
  80ed8c:	003ff506 	br	80ed64 <_setlocale_r+0x58>

0080ed90 <setlocale>:
  80ed90:	01802174 	movhi	r6,133
  80ed94:	31828104 	addi	r6,r6,2564
  80ed98:	2007883a 	mov	r3,r4
  80ed9c:	31000017 	ldw	r4,0(r6)
  80eda0:	280d883a 	mov	r6,r5
  80eda4:	180b883a 	mov	r5,r3
  80eda8:	080ed0c1 	jmpi	80ed0c <_setlocale_r>

0080edac <_lseek_r>:
  80edac:	defffd04 	addi	sp,sp,-12
  80edb0:	dc000015 	stw	r16,0(sp)
  80edb4:	04002174 	movhi	r16,133
  80edb8:	8402da04 	addi	r16,r16,2920
  80edbc:	dc400115 	stw	r17,4(sp)
  80edc0:	80000015 	stw	zero,0(r16)
  80edc4:	2023883a 	mov	r17,r4
  80edc8:	2809883a 	mov	r4,r5
  80edcc:	300b883a 	mov	r5,r6
  80edd0:	380d883a 	mov	r6,r7
  80edd4:	dfc00215 	stw	ra,8(sp)
  80edd8:	08167280 	call	816728 <lseek>
  80eddc:	1007883a 	mov	r3,r2
  80ede0:	00bfffc4 	movi	r2,-1
  80ede4:	18800626 	beq	r3,r2,80ee00 <_lseek_r+0x54>
  80ede8:	1805883a 	mov	r2,r3
  80edec:	dfc00217 	ldw	ra,8(sp)
  80edf0:	dc400117 	ldw	r17,4(sp)
  80edf4:	dc000017 	ldw	r16,0(sp)
  80edf8:	dec00304 	addi	sp,sp,12
  80edfc:	f800283a 	ret
  80ee00:	80800017 	ldw	r2,0(r16)
  80ee04:	103ff826 	beq	r2,zero,80ede8 <_lseek_r+0x3c>
  80ee08:	88800015 	stw	r2,0(r17)
  80ee0c:	1805883a 	mov	r2,r3
  80ee10:	dfc00217 	ldw	ra,8(sp)
  80ee14:	dc400117 	ldw	r17,4(sp)
  80ee18:	dc000017 	ldw	r16,0(sp)
  80ee1c:	dec00304 	addi	sp,sp,12
  80ee20:	f800283a 	ret

0080ee24 <_mbrtowc_r>:
  80ee24:	defffc04 	addi	sp,sp,-16
  80ee28:	dc400215 	stw	r17,8(sp)
  80ee2c:	dc000115 	stw	r16,4(sp)
  80ee30:	dfc00315 	stw	ra,12(sp)
  80ee34:	dc000417 	ldw	r16,16(sp)
  80ee38:	2023883a 	mov	r17,r4
  80ee3c:	30000f26 	beq	r6,zero,80ee7c <_mbrtowc_r+0x58>
  80ee40:	dc000015 	stw	r16,0(sp)
  80ee44:	080eee40 	call	80eee4 <_mbtowc_r>
  80ee48:	1007883a 	mov	r3,r2
  80ee4c:	00bfffc4 	movi	r2,-1
  80ee50:	1809883a 	mov	r4,r3
  80ee54:	1880111e 	bne	r3,r2,80ee9c <_mbrtowc_r+0x78>
  80ee58:	80000015 	stw	zero,0(r16)
  80ee5c:	00802284 	movi	r2,138
  80ee60:	88800015 	stw	r2,0(r17)
  80ee64:	2005883a 	mov	r2,r4
  80ee68:	dfc00317 	ldw	ra,12(sp)
  80ee6c:	dc400217 	ldw	r17,8(sp)
  80ee70:	dc000117 	ldw	r16,4(sp)
  80ee74:	dec00404 	addi	sp,sp,16
  80ee78:	f800283a 	ret
  80ee7c:	000b883a 	mov	r5,zero
  80ee80:	01802174 	movhi	r6,133
  80ee84:	31b1d204 	addi	r6,r6,-14520
  80ee88:	01c00044 	movi	r7,1
  80ee8c:	dc000015 	stw	r16,0(sp)
  80ee90:	080eee40 	call	80eee4 <_mbtowc_r>
  80ee94:	1007883a 	mov	r3,r2
  80ee98:	003fec06 	br	80ee4c <_mbrtowc_r+0x28>
  80ee9c:	1809883a 	mov	r4,r3
  80eea0:	003ff006 	br	80ee64 <_mbrtowc_r+0x40>

0080eea4 <mbrtowc>:
  80eea4:	00802174 	movhi	r2,133
  80eea8:	10828104 	addi	r2,r2,2564
  80eeac:	2017883a 	mov	r11,r4
  80eeb0:	11000017 	ldw	r4,0(r2)
  80eeb4:	defffe04 	addi	sp,sp,-8
  80eeb8:	3013883a 	mov	r9,r6
  80eebc:	2805883a 	mov	r2,r5
  80eec0:	d9c00015 	stw	r7,0(sp)
  80eec4:	580b883a 	mov	r5,r11
  80eec8:	100d883a 	mov	r6,r2
  80eecc:	480f883a 	mov	r7,r9
  80eed0:	dfc00115 	stw	ra,4(sp)
  80eed4:	080ee240 	call	80ee24 <_mbrtowc_r>
  80eed8:	dfc00117 	ldw	ra,4(sp)
  80eedc:	dec00204 	addi	sp,sp,8
  80eee0:	f800283a 	ret

0080eee4 <_mbtowc_r>:
  80eee4:	deffff04 	addi	sp,sp,-4
  80eee8:	0005883a 	mov	r2,zero
  80eeec:	28000326 	beq	r5,zero,80eefc <_mbtowc_r+0x18>
  80eef0:	3000041e 	bne	r6,zero,80ef04 <_mbtowc_r+0x20>
  80eef4:	dec00104 	addi	sp,sp,4
  80eef8:	f800283a 	ret
  80eefc:	d80b883a 	mov	r5,sp
  80ef00:	303ffc26 	beq	r6,zero,80eef4 <_mbtowc_r+0x10>
  80ef04:	00bfff84 	movi	r2,-2
  80ef08:	383ffa26 	beq	r7,zero,80eef4 <_mbtowc_r+0x10>
  80ef0c:	30800003 	ldbu	r2,0(r6)
  80ef10:	28800015 	stw	r2,0(r5)
  80ef14:	30c00003 	ldbu	r3,0(r6)
  80ef18:	1804c03a 	cmpne	r2,r3,zero
  80ef1c:	dec00104 	addi	sp,sp,4
  80ef20:	f800283a 	ret

0080ef24 <memchr>:
  80ef24:	008000c4 	movi	r2,3
  80ef28:	29403fcc 	andi	r5,r5,255
  80ef2c:	2007883a 	mov	r3,r4
  80ef30:	1180022e 	bgeu	r2,r6,80ef3c <memchr+0x18>
  80ef34:	2084703a 	and	r2,r4,r2
  80ef38:	10000b26 	beq	r2,zero,80ef68 <memchr+0x44>
  80ef3c:	313fffc4 	addi	r4,r6,-1
  80ef40:	3000051e 	bne	r6,zero,80ef58 <memchr+0x34>
  80ef44:	00002c06 	br	80eff8 <memchr+0xd4>
  80ef48:	213fffc4 	addi	r4,r4,-1
  80ef4c:	00bfffc4 	movi	r2,-1
  80ef50:	18c00044 	addi	r3,r3,1
  80ef54:	20802826 	beq	r4,r2,80eff8 <memchr+0xd4>
  80ef58:	18800003 	ldbu	r2,0(r3)
  80ef5c:	28bffa1e 	bne	r5,r2,80ef48 <memchr+0x24>
  80ef60:	1805883a 	mov	r2,r3
  80ef64:	f800283a 	ret
  80ef68:	0011883a 	mov	r8,zero
  80ef6c:	0007883a 	mov	r3,zero
  80ef70:	01c00104 	movi	r7,4
  80ef74:	4004923a 	slli	r2,r8,8
  80ef78:	18c00044 	addi	r3,r3,1
  80ef7c:	1151883a 	add	r8,r2,r5
  80ef80:	19fffc1e 	bne	r3,r7,80ef74 <memchr+0x50>
  80ef84:	02bfbff4 	movhi	r10,65279
  80ef88:	52bfbfc4 	addi	r10,r10,-257
  80ef8c:	02602074 	movhi	r9,32897
  80ef90:	4a602004 	addi	r9,r9,-32640
  80ef94:	02c000c4 	movi	r11,3
  80ef98:	20800017 	ldw	r2,0(r4)
  80ef9c:	31bfff04 	addi	r6,r6,-4
  80efa0:	200f883a 	mov	r7,r4
  80efa4:	1204f03a 	xor	r2,r2,r8
  80efa8:	1287883a 	add	r3,r2,r10
  80efac:	1a46703a 	and	r3,r3,r9
  80efb0:	0084303a 	nor	r2,zero,r2
  80efb4:	10c4703a 	and	r2,r2,r3
  80efb8:	10000b26 	beq	r2,zero,80efe8 <memchr+0xc4>
  80efbc:	20800003 	ldbu	r2,0(r4)
  80efc0:	28800f26 	beq	r5,r2,80f000 <memchr+0xdc>
  80efc4:	20800043 	ldbu	r2,1(r4)
  80efc8:	21c00044 	addi	r7,r4,1
  80efcc:	28800c26 	beq	r5,r2,80f000 <memchr+0xdc>
  80efd0:	20800083 	ldbu	r2,2(r4)
  80efd4:	21c00084 	addi	r7,r4,2
  80efd8:	28800926 	beq	r5,r2,80f000 <memchr+0xdc>
  80efdc:	208000c3 	ldbu	r2,3(r4)
  80efe0:	21c000c4 	addi	r7,r4,3
  80efe4:	28800626 	beq	r5,r2,80f000 <memchr+0xdc>
  80efe8:	21000104 	addi	r4,r4,4
  80efec:	59bfea36 	bltu	r11,r6,80ef98 <memchr+0x74>
  80eff0:	2007883a 	mov	r3,r4
  80eff4:	003fd106 	br	80ef3c <memchr+0x18>
  80eff8:	0005883a 	mov	r2,zero
  80effc:	f800283a 	ret
  80f000:	3805883a 	mov	r2,r7
  80f004:	f800283a 	ret

0080f008 <memcmp>:
  80f008:	00c000c4 	movi	r3,3
  80f00c:	1980032e 	bgeu	r3,r6,80f01c <memcmp+0x14>
  80f010:	2144b03a 	or	r2,r4,r5
  80f014:	10c4703a 	and	r2,r2,r3
  80f018:	10000f26 	beq	r2,zero,80f058 <memcmp+0x50>
  80f01c:	31ffffc4 	addi	r7,r6,-1
  80f020:	3000061e 	bne	r6,zero,80f03c <memcmp+0x34>
  80f024:	00000a06 	br	80f050 <memcmp+0x48>
  80f028:	39ffffc4 	addi	r7,r7,-1
  80f02c:	00bfffc4 	movi	r2,-1
  80f030:	21000044 	addi	r4,r4,1
  80f034:	29400044 	addi	r5,r5,1
  80f038:	38800526 	beq	r7,r2,80f050 <memcmp+0x48>
  80f03c:	20c00003 	ldbu	r3,0(r4)
  80f040:	28800003 	ldbu	r2,0(r5)
  80f044:	18bff826 	beq	r3,r2,80f028 <memcmp+0x20>
  80f048:	1885c83a 	sub	r2,r3,r2
  80f04c:	f800283a 	ret
  80f050:	0005883a 	mov	r2,zero
  80f054:	f800283a 	ret
  80f058:	180f883a 	mov	r7,r3
  80f05c:	20c00017 	ldw	r3,0(r4)
  80f060:	28800017 	ldw	r2,0(r5)
  80f064:	18bfed1e 	bne	r3,r2,80f01c <memcmp+0x14>
  80f068:	31bfff04 	addi	r6,r6,-4
  80f06c:	21000104 	addi	r4,r4,4
  80f070:	29400104 	addi	r5,r5,4
  80f074:	39bff936 	bltu	r7,r6,80f05c <memcmp+0x54>
  80f078:	003fe806 	br	80f01c <memcmp+0x14>

0080f07c <_Bfree>:
  80f07c:	28000826 	beq	r5,zero,80f0a0 <_Bfree+0x24>
  80f080:	28800117 	ldw	r2,4(r5)
  80f084:	21001317 	ldw	r4,76(r4)
  80f088:	1085883a 	add	r2,r2,r2
  80f08c:	1085883a 	add	r2,r2,r2
  80f090:	1105883a 	add	r2,r2,r4
  80f094:	10c00017 	ldw	r3,0(r2)
  80f098:	28c00015 	stw	r3,0(r5)
  80f09c:	11400015 	stw	r5,0(r2)
  80f0a0:	f800283a 	ret

0080f0a4 <__hi0bits>:
  80f0a4:	20bfffec 	andhi	r2,r4,65535
  80f0a8:	10001426 	beq	r2,zero,80f0fc <__hi0bits+0x58>
  80f0ac:	0007883a 	mov	r3,zero
  80f0b0:	20bfc02c 	andhi	r2,r4,65280
  80f0b4:	1000021e 	bne	r2,zero,80f0c0 <__hi0bits+0x1c>
  80f0b8:	2008923a 	slli	r4,r4,8
  80f0bc:	18c00204 	addi	r3,r3,8
  80f0c0:	20bc002c 	andhi	r2,r4,61440
  80f0c4:	1000021e 	bne	r2,zero,80f0d0 <__hi0bits+0x2c>
  80f0c8:	2008913a 	slli	r4,r4,4
  80f0cc:	18c00104 	addi	r3,r3,4
  80f0d0:	20b0002c 	andhi	r2,r4,49152
  80f0d4:	1000031e 	bne	r2,zero,80f0e4 <__hi0bits+0x40>
  80f0d8:	2105883a 	add	r2,r4,r4
  80f0dc:	18c00084 	addi	r3,r3,2
  80f0e0:	1089883a 	add	r4,r2,r2
  80f0e4:	20000316 	blt	r4,zero,80f0f4 <__hi0bits+0x50>
  80f0e8:	2090002c 	andhi	r2,r4,16384
  80f0ec:	10000626 	beq	r2,zero,80f108 <__hi0bits+0x64>
  80f0f0:	18c00044 	addi	r3,r3,1
  80f0f4:	1805883a 	mov	r2,r3
  80f0f8:	f800283a 	ret
  80f0fc:	2008943a 	slli	r4,r4,16
  80f100:	00c00404 	movi	r3,16
  80f104:	003fea06 	br	80f0b0 <__hi0bits+0xc>
  80f108:	00c00804 	movi	r3,32
  80f10c:	1805883a 	mov	r2,r3
  80f110:	f800283a 	ret

0080f114 <__lo0bits>:
  80f114:	20c00017 	ldw	r3,0(r4)
  80f118:	188001cc 	andi	r2,r3,7
  80f11c:	10000a26 	beq	r2,zero,80f148 <__lo0bits+0x34>
  80f120:	1880004c 	andi	r2,r3,1
  80f124:	1005003a 	cmpeq	r2,r2,zero
  80f128:	10002126 	beq	r2,zero,80f1b0 <__lo0bits+0x9c>
  80f12c:	1880008c 	andi	r2,r3,2
  80f130:	1000251e 	bne	r2,zero,80f1c8 <__lo0bits+0xb4>
  80f134:	1804d0ba 	srli	r2,r3,2
  80f138:	01400084 	movi	r5,2
  80f13c:	20800015 	stw	r2,0(r4)
  80f140:	2805883a 	mov	r2,r5
  80f144:	f800283a 	ret
  80f148:	18bfffcc 	andi	r2,r3,65535
  80f14c:	10001526 	beq	r2,zero,80f1a4 <__lo0bits+0x90>
  80f150:	000b883a 	mov	r5,zero
  80f154:	18803fcc 	andi	r2,r3,255
  80f158:	1000021e 	bne	r2,zero,80f164 <__lo0bits+0x50>
  80f15c:	1806d23a 	srli	r3,r3,8
  80f160:	29400204 	addi	r5,r5,8
  80f164:	188003cc 	andi	r2,r3,15
  80f168:	1000021e 	bne	r2,zero,80f174 <__lo0bits+0x60>
  80f16c:	1806d13a 	srli	r3,r3,4
  80f170:	29400104 	addi	r5,r5,4
  80f174:	188000cc 	andi	r2,r3,3
  80f178:	1000021e 	bne	r2,zero,80f184 <__lo0bits+0x70>
  80f17c:	1806d0ba 	srli	r3,r3,2
  80f180:	29400084 	addi	r5,r5,2
  80f184:	1880004c 	andi	r2,r3,1
  80f188:	1000031e 	bne	r2,zero,80f198 <__lo0bits+0x84>
  80f18c:	1806d07a 	srli	r3,r3,1
  80f190:	18000a26 	beq	r3,zero,80f1bc <__lo0bits+0xa8>
  80f194:	29400044 	addi	r5,r5,1
  80f198:	2805883a 	mov	r2,r5
  80f19c:	20c00015 	stw	r3,0(r4)
  80f1a0:	f800283a 	ret
  80f1a4:	1806d43a 	srli	r3,r3,16
  80f1a8:	01400404 	movi	r5,16
  80f1ac:	003fe906 	br	80f154 <__lo0bits+0x40>
  80f1b0:	000b883a 	mov	r5,zero
  80f1b4:	2805883a 	mov	r2,r5
  80f1b8:	f800283a 	ret
  80f1bc:	01400804 	movi	r5,32
  80f1c0:	2805883a 	mov	r2,r5
  80f1c4:	f800283a 	ret
  80f1c8:	1804d07a 	srli	r2,r3,1
  80f1cc:	01400044 	movi	r5,1
  80f1d0:	20800015 	stw	r2,0(r4)
  80f1d4:	003fda06 	br	80f140 <__lo0bits+0x2c>

0080f1d8 <__mcmp>:
  80f1d8:	20800417 	ldw	r2,16(r4)
  80f1dc:	28c00417 	ldw	r3,16(r5)
  80f1e0:	10cfc83a 	sub	r7,r2,r3
  80f1e4:	38000c1e 	bne	r7,zero,80f218 <__mcmp+0x40>
  80f1e8:	18c5883a 	add	r2,r3,r3
  80f1ec:	1085883a 	add	r2,r2,r2
  80f1f0:	10c00504 	addi	r3,r2,20
  80f1f4:	21000504 	addi	r4,r4,20
  80f1f8:	28cb883a 	add	r5,r5,r3
  80f1fc:	2085883a 	add	r2,r4,r2
  80f200:	10bfff04 	addi	r2,r2,-4
  80f204:	297fff04 	addi	r5,r5,-4
  80f208:	11800017 	ldw	r6,0(r2)
  80f20c:	28c00017 	ldw	r3,0(r5)
  80f210:	30c0031e 	bne	r6,r3,80f220 <__mcmp+0x48>
  80f214:	20bffa36 	bltu	r4,r2,80f200 <__mcmp+0x28>
  80f218:	3805883a 	mov	r2,r7
  80f21c:	f800283a 	ret
  80f220:	30c00336 	bltu	r6,r3,80f230 <__mcmp+0x58>
  80f224:	01c00044 	movi	r7,1
  80f228:	3805883a 	mov	r2,r7
  80f22c:	f800283a 	ret
  80f230:	01ffffc4 	movi	r7,-1
  80f234:	003ff806 	br	80f218 <__mcmp+0x40>

0080f238 <__ulp>:
  80f238:	295ffc2c 	andhi	r5,r5,32752
  80f23c:	013f3034 	movhi	r4,64704
  80f240:	290b883a 	add	r5,r5,r4
  80f244:	0145c83a 	sub	r2,zero,r5
  80f248:	1007d53a 	srai	r3,r2,20
  80f24c:	000d883a 	mov	r6,zero
  80f250:	0140040e 	bge	zero,r5,80f264 <__ulp+0x2c>
  80f254:	280f883a 	mov	r7,r5
  80f258:	3807883a 	mov	r3,r7
  80f25c:	3005883a 	mov	r2,r6
  80f260:	f800283a 	ret
  80f264:	008004c4 	movi	r2,19
  80f268:	193ffb04 	addi	r4,r3,-20
  80f26c:	10c00c0e 	bge	r2,r3,80f2a0 <__ulp+0x68>
  80f270:	008007c4 	movi	r2,31
  80f274:	1107c83a 	sub	r3,r2,r4
  80f278:	00800784 	movi	r2,30
  80f27c:	01400044 	movi	r5,1
  80f280:	11000216 	blt	r2,r4,80f28c <__ulp+0x54>
  80f284:	00800044 	movi	r2,1
  80f288:	10ca983a 	sll	r5,r2,r3
  80f28c:	000f883a 	mov	r7,zero
  80f290:	280d883a 	mov	r6,r5
  80f294:	3807883a 	mov	r3,r7
  80f298:	3005883a 	mov	r2,r6
  80f29c:	f800283a 	ret
  80f2a0:	00800234 	movhi	r2,8
  80f2a4:	10cfd83a 	sra	r7,r2,r3
  80f2a8:	000d883a 	mov	r6,zero
  80f2ac:	3005883a 	mov	r2,r6
  80f2b0:	3807883a 	mov	r3,r7
  80f2b4:	f800283a 	ret

0080f2b8 <__b2d>:
  80f2b8:	20800417 	ldw	r2,16(r4)
  80f2bc:	defff904 	addi	sp,sp,-28
  80f2c0:	dd000415 	stw	r20,16(sp)
  80f2c4:	1085883a 	add	r2,r2,r2
  80f2c8:	25000504 	addi	r20,r4,20
  80f2cc:	1085883a 	add	r2,r2,r2
  80f2d0:	dc000015 	stw	r16,0(sp)
  80f2d4:	a0a1883a 	add	r16,r20,r2
  80f2d8:	dd400515 	stw	r21,20(sp)
  80f2dc:	857fff17 	ldw	r21,-4(r16)
  80f2e0:	dc400115 	stw	r17,4(sp)
  80f2e4:	dfc00615 	stw	ra,24(sp)
  80f2e8:	a809883a 	mov	r4,r21
  80f2ec:	2823883a 	mov	r17,r5
  80f2f0:	dcc00315 	stw	r19,12(sp)
  80f2f4:	dc800215 	stw	r18,8(sp)
  80f2f8:	080f0a40 	call	80f0a4 <__hi0bits>
  80f2fc:	100b883a 	mov	r5,r2
  80f300:	00800804 	movi	r2,32
  80f304:	1145c83a 	sub	r2,r2,r5
  80f308:	88800015 	stw	r2,0(r17)
  80f30c:	00800284 	movi	r2,10
  80f310:	80ffff04 	addi	r3,r16,-4
  80f314:	11401416 	blt	r2,r5,80f368 <__b2d+0xb0>
  80f318:	008002c4 	movi	r2,11
  80f31c:	1149c83a 	sub	r4,r2,r5
  80f320:	a0c02736 	bltu	r20,r3,80f3c0 <__b2d+0x108>
  80f324:	000d883a 	mov	r6,zero
  80f328:	28800544 	addi	r2,r5,21
  80f32c:	a906d83a 	srl	r3,r21,r4
  80f330:	a884983a 	sll	r2,r21,r2
  80f334:	1ccffc34 	orhi	r19,r3,16368
  80f338:	11a4b03a 	or	r18,r2,r6
  80f33c:	9005883a 	mov	r2,r18
  80f340:	9807883a 	mov	r3,r19
  80f344:	dfc00617 	ldw	ra,24(sp)
  80f348:	dd400517 	ldw	r21,20(sp)
  80f34c:	dd000417 	ldw	r20,16(sp)
  80f350:	dcc00317 	ldw	r19,12(sp)
  80f354:	dc800217 	ldw	r18,8(sp)
  80f358:	dc400117 	ldw	r17,4(sp)
  80f35c:	dc000017 	ldw	r16,0(sp)
  80f360:	dec00704 	addi	sp,sp,28
  80f364:	f800283a 	ret
  80f368:	a0c00e36 	bltu	r20,r3,80f3a4 <__b2d+0xec>
  80f36c:	293ffd44 	addi	r4,r5,-11
  80f370:	000d883a 	mov	r6,zero
  80f374:	20000f26 	beq	r4,zero,80f3b4 <__b2d+0xfc>
  80f378:	00800804 	movi	r2,32
  80f37c:	110bc83a 	sub	r5,r2,r4
  80f380:	a0c01236 	bltu	r20,r3,80f3cc <__b2d+0x114>
  80f384:	000f883a 	mov	r7,zero
  80f388:	a904983a 	sll	r2,r21,r4
  80f38c:	3146d83a 	srl	r3,r6,r5
  80f390:	3108983a 	sll	r4,r6,r4
  80f394:	108ffc34 	orhi	r2,r2,16368
  80f398:	18a6b03a 	or	r19,r3,r2
  80f39c:	3924b03a 	or	r18,r7,r4
  80f3a0:	003fe606 	br	80f33c <__b2d+0x84>
  80f3a4:	293ffd44 	addi	r4,r5,-11
  80f3a8:	81bffe17 	ldw	r6,-8(r16)
  80f3ac:	80fffe04 	addi	r3,r16,-8
  80f3b0:	203ff11e 	bne	r4,zero,80f378 <__b2d+0xc0>
  80f3b4:	accffc34 	orhi	r19,r21,16368
  80f3b8:	3025883a 	mov	r18,r6
  80f3bc:	003fdf06 	br	80f33c <__b2d+0x84>
  80f3c0:	18bfff17 	ldw	r2,-4(r3)
  80f3c4:	110cd83a 	srl	r6,r2,r4
  80f3c8:	003fd706 	br	80f328 <__b2d+0x70>
  80f3cc:	18bfff17 	ldw	r2,-4(r3)
  80f3d0:	114ed83a 	srl	r7,r2,r5
  80f3d4:	003fec06 	br	80f388 <__b2d+0xd0>

0080f3d8 <__ratio>:
  80f3d8:	defff904 	addi	sp,sp,-28
  80f3dc:	dc400215 	stw	r17,8(sp)
  80f3e0:	2823883a 	mov	r17,r5
  80f3e4:	d80b883a 	mov	r5,sp
  80f3e8:	dfc00615 	stw	ra,24(sp)
  80f3ec:	dd000515 	stw	r20,20(sp)
  80f3f0:	dcc00415 	stw	r19,16(sp)
  80f3f4:	dc800315 	stw	r18,12(sp)
  80f3f8:	2025883a 	mov	r18,r4
  80f3fc:	080f2b80 	call	80f2b8 <__b2d>
  80f400:	8809883a 	mov	r4,r17
  80f404:	d9400104 	addi	r5,sp,4
  80f408:	1027883a 	mov	r19,r2
  80f40c:	1829883a 	mov	r20,r3
  80f410:	080f2b80 	call	80f2b8 <__b2d>
  80f414:	89000417 	ldw	r4,16(r17)
  80f418:	91c00417 	ldw	r7,16(r18)
  80f41c:	d9800117 	ldw	r6,4(sp)
  80f420:	180b883a 	mov	r5,r3
  80f424:	390fc83a 	sub	r7,r7,r4
  80f428:	1009883a 	mov	r4,r2
  80f42c:	d8800017 	ldw	r2,0(sp)
  80f430:	380e917a 	slli	r7,r7,5
  80f434:	2011883a 	mov	r8,r4
  80f438:	1185c83a 	sub	r2,r2,r6
  80f43c:	11c5883a 	add	r2,r2,r7
  80f440:	1006953a 	slli	r3,r2,20
  80f444:	2813883a 	mov	r9,r5
  80f448:	00800d0e 	bge	zero,r2,80f480 <__ratio+0xa8>
  80f44c:	1d29883a 	add	r20,r3,r20
  80f450:	a00b883a 	mov	r5,r20
  80f454:	480f883a 	mov	r7,r9
  80f458:	9809883a 	mov	r4,r19
  80f45c:	400d883a 	mov	r6,r8
  80f460:	0814fdc0 	call	814fdc <__divdf3>
  80f464:	dfc00617 	ldw	ra,24(sp)
  80f468:	dd000517 	ldw	r20,20(sp)
  80f46c:	dcc00417 	ldw	r19,16(sp)
  80f470:	dc800317 	ldw	r18,12(sp)
  80f474:	dc400217 	ldw	r17,8(sp)
  80f478:	dec00704 	addi	sp,sp,28
  80f47c:	f800283a 	ret
  80f480:	28d3c83a 	sub	r9,r5,r3
  80f484:	003ff206 	br	80f450 <__ratio+0x78>

0080f488 <_mprec_log10>:
  80f488:	defffe04 	addi	sp,sp,-8
  80f48c:	008005c4 	movi	r2,23
  80f490:	dc000015 	stw	r16,0(sp)
  80f494:	dfc00115 	stw	ra,4(sp)
  80f498:	2021883a 	mov	r16,r4
  80f49c:	11000c16 	blt	r2,r4,80f4d0 <_mprec_log10+0x48>
  80f4a0:	200490fa 	slli	r2,r4,3
  80f4a4:	00c02174 	movhi	r3,133
  80f4a8:	18f20104 	addi	r3,r3,-14332
  80f4ac:	10c5883a 	add	r2,r2,r3
  80f4b0:	12400117 	ldw	r9,4(r2)
  80f4b4:	12000017 	ldw	r8,0(r2)
  80f4b8:	4807883a 	mov	r3,r9
  80f4bc:	4005883a 	mov	r2,r8
  80f4c0:	dfc00117 	ldw	ra,4(sp)
  80f4c4:	dc000017 	ldw	r16,0(sp)
  80f4c8:	dec00204 	addi	sp,sp,8
  80f4cc:	f800283a 	ret
  80f4d0:	0011883a 	mov	r8,zero
  80f4d4:	024ffc34 	movhi	r9,16368
  80f4d8:	0005883a 	mov	r2,zero
  80f4dc:	00d00934 	movhi	r3,16420
  80f4e0:	480b883a 	mov	r5,r9
  80f4e4:	4009883a 	mov	r4,r8
  80f4e8:	180f883a 	mov	r7,r3
  80f4ec:	100d883a 	mov	r6,r2
  80f4f0:	0814c180 	call	814c18 <__muldf3>
  80f4f4:	843fffc4 	addi	r16,r16,-1
  80f4f8:	1011883a 	mov	r8,r2
  80f4fc:	1813883a 	mov	r9,r3
  80f500:	803ff51e 	bne	r16,zero,80f4d8 <_mprec_log10+0x50>
  80f504:	4005883a 	mov	r2,r8
  80f508:	4807883a 	mov	r3,r9
  80f50c:	dfc00117 	ldw	ra,4(sp)
  80f510:	dc000017 	ldw	r16,0(sp)
  80f514:	dec00204 	addi	sp,sp,8
  80f518:	f800283a 	ret

0080f51c <__copybits>:
  80f51c:	297fffc4 	addi	r5,r5,-1
  80f520:	30800417 	ldw	r2,16(r6)
  80f524:	280bd17a 	srai	r5,r5,5
  80f528:	31800504 	addi	r6,r6,20
  80f52c:	1085883a 	add	r2,r2,r2
  80f530:	294b883a 	add	r5,r5,r5
  80f534:	294b883a 	add	r5,r5,r5
  80f538:	1085883a 	add	r2,r2,r2
  80f53c:	290b883a 	add	r5,r5,r4
  80f540:	3087883a 	add	r3,r6,r2
  80f544:	29400104 	addi	r5,r5,4
  80f548:	30c0052e 	bgeu	r6,r3,80f560 <__copybits+0x44>
  80f54c:	30800017 	ldw	r2,0(r6)
  80f550:	31800104 	addi	r6,r6,4
  80f554:	20800015 	stw	r2,0(r4)
  80f558:	21000104 	addi	r4,r4,4
  80f55c:	30fffb36 	bltu	r6,r3,80f54c <__copybits+0x30>
  80f560:	2140032e 	bgeu	r4,r5,80f570 <__copybits+0x54>
  80f564:	20000015 	stw	zero,0(r4)
  80f568:	21000104 	addi	r4,r4,4
  80f56c:	217ffd36 	bltu	r4,r5,80f564 <__copybits+0x48>
  80f570:	f800283a 	ret

0080f574 <__any_on>:
  80f574:	20800417 	ldw	r2,16(r4)
  80f578:	2807d17a 	srai	r3,r5,5
  80f57c:	21000504 	addi	r4,r4,20
  80f580:	10c00d0e 	bge	r2,r3,80f5b8 <__any_on+0x44>
  80f584:	1085883a 	add	r2,r2,r2
  80f588:	1085883a 	add	r2,r2,r2
  80f58c:	208d883a 	add	r6,r4,r2
  80f590:	2180182e 	bgeu	r4,r6,80f5f4 <__any_on+0x80>
  80f594:	30bfff17 	ldw	r2,-4(r6)
  80f598:	30ffff04 	addi	r3,r6,-4
  80f59c:	1000041e 	bne	r2,zero,80f5b0 <__any_on+0x3c>
  80f5a0:	20c0142e 	bgeu	r4,r3,80f5f4 <__any_on+0x80>
  80f5a4:	18ffff04 	addi	r3,r3,-4
  80f5a8:	18800017 	ldw	r2,0(r3)
  80f5ac:	103ffc26 	beq	r2,zero,80f5a0 <__any_on+0x2c>
  80f5b0:	00800044 	movi	r2,1
  80f5b4:	f800283a 	ret
  80f5b8:	18800a0e 	bge	r3,r2,80f5e4 <__any_on+0x70>
  80f5bc:	294007cc 	andi	r5,r5,31
  80f5c0:	28000826 	beq	r5,zero,80f5e4 <__any_on+0x70>
  80f5c4:	18c5883a 	add	r2,r3,r3
  80f5c8:	1085883a 	add	r2,r2,r2
  80f5cc:	208d883a 	add	r6,r4,r2
  80f5d0:	30c00017 	ldw	r3,0(r6)
  80f5d4:	1944d83a 	srl	r2,r3,r5
  80f5d8:	1144983a 	sll	r2,r2,r5
  80f5dc:	18bff41e 	bne	r3,r2,80f5b0 <__any_on+0x3c>
  80f5e0:	003feb06 	br	80f590 <__any_on+0x1c>
  80f5e4:	18c5883a 	add	r2,r3,r3
  80f5e8:	1085883a 	add	r2,r2,r2
  80f5ec:	208d883a 	add	r6,r4,r2
  80f5f0:	003fe706 	br	80f590 <__any_on+0x1c>
  80f5f4:	0005883a 	mov	r2,zero
  80f5f8:	f800283a 	ret

0080f5fc <_Balloc>:
  80f5fc:	20c01317 	ldw	r3,76(r4)
  80f600:	defffb04 	addi	sp,sp,-20
  80f604:	dcc00315 	stw	r19,12(sp)
  80f608:	dc800215 	stw	r18,8(sp)
  80f60c:	dfc00415 	stw	ra,16(sp)
  80f610:	2825883a 	mov	r18,r5
  80f614:	dc400115 	stw	r17,4(sp)
  80f618:	dc000015 	stw	r16,0(sp)
  80f61c:	2027883a 	mov	r19,r4
  80f620:	01800404 	movi	r6,16
  80f624:	01400104 	movi	r5,4
  80f628:	18001726 	beq	r3,zero,80f688 <_Balloc+0x8c>
  80f62c:	01400044 	movi	r5,1
  80f630:	9485883a 	add	r2,r18,r18
  80f634:	2ca2983a 	sll	r17,r5,r18
  80f638:	1085883a 	add	r2,r2,r2
  80f63c:	10c7883a 	add	r3,r2,r3
  80f640:	1c000017 	ldw	r16,0(r3)
  80f644:	8c4d883a 	add	r6,r17,r17
  80f648:	318d883a 	add	r6,r6,r6
  80f64c:	9809883a 	mov	r4,r19
  80f650:	31800504 	addi	r6,r6,20
  80f654:	80001226 	beq	r16,zero,80f6a0 <_Balloc+0xa4>
  80f658:	80800017 	ldw	r2,0(r16)
  80f65c:	18800015 	stw	r2,0(r3)
  80f660:	80000415 	stw	zero,16(r16)
  80f664:	80000315 	stw	zero,12(r16)
  80f668:	8005883a 	mov	r2,r16
  80f66c:	dfc00417 	ldw	ra,16(sp)
  80f670:	dcc00317 	ldw	r19,12(sp)
  80f674:	dc800217 	ldw	r18,8(sp)
  80f678:	dc400117 	ldw	r17,4(sp)
  80f67c:	dc000017 	ldw	r16,0(sp)
  80f680:	dec00504 	addi	sp,sp,20
  80f684:	f800283a 	ret
  80f688:	0812ca80 	call	812ca8 <_calloc_r>
  80f68c:	1007883a 	mov	r3,r2
  80f690:	0021883a 	mov	r16,zero
  80f694:	98801315 	stw	r2,76(r19)
  80f698:	103fe41e 	bne	r2,zero,80f62c <_Balloc+0x30>
  80f69c:	003ff206 	br	80f668 <_Balloc+0x6c>
  80f6a0:	0812ca80 	call	812ca8 <_calloc_r>
  80f6a4:	103ff026 	beq	r2,zero,80f668 <_Balloc+0x6c>
  80f6a8:	1021883a 	mov	r16,r2
  80f6ac:	14800115 	stw	r18,4(r2)
  80f6b0:	14400215 	stw	r17,8(r2)
  80f6b4:	003fea06 	br	80f660 <_Balloc+0x64>

0080f6b8 <__d2b>:
  80f6b8:	defff504 	addi	sp,sp,-44
  80f6bc:	dcc00515 	stw	r19,20(sp)
  80f6c0:	04c00044 	movi	r19,1
  80f6c4:	dc000215 	stw	r16,8(sp)
  80f6c8:	2821883a 	mov	r16,r5
  80f6cc:	980b883a 	mov	r5,r19
  80f6d0:	ddc00915 	stw	r23,36(sp)
  80f6d4:	dd800815 	stw	r22,32(sp)
  80f6d8:	dd400715 	stw	r21,28(sp)
  80f6dc:	dd000615 	stw	r20,24(sp)
  80f6e0:	dc800415 	stw	r18,16(sp)
  80f6e4:	dc400315 	stw	r17,12(sp)
  80f6e8:	dfc00a15 	stw	ra,40(sp)
  80f6ec:	3023883a 	mov	r17,r6
  80f6f0:	382d883a 	mov	r22,r7
  80f6f4:	ddc00b17 	ldw	r23,44(sp)
  80f6f8:	080f5fc0 	call	80f5fc <_Balloc>
  80f6fc:	1025883a 	mov	r18,r2
  80f700:	00a00034 	movhi	r2,32768
  80f704:	10bfffc4 	addi	r2,r2,-1
  80f708:	8888703a 	and	r4,r17,r2
  80f70c:	202ad53a 	srli	r21,r4,20
  80f710:	00800434 	movhi	r2,16
  80f714:	10bfffc4 	addi	r2,r2,-1
  80f718:	8886703a 	and	r3,r17,r2
  80f71c:	a829003a 	cmpeq	r20,r21,zero
  80f720:	800b883a 	mov	r5,r16
  80f724:	d8c00115 	stw	r3,4(sp)
  80f728:	94000504 	addi	r16,r18,20
  80f72c:	a000021e 	bne	r20,zero,80f738 <__d2b+0x80>
  80f730:	18c00434 	orhi	r3,r3,16
  80f734:	d8c00115 	stw	r3,4(sp)
  80f738:	28002726 	beq	r5,zero,80f7d8 <__d2b+0x120>
  80f73c:	d809883a 	mov	r4,sp
  80f740:	d9400015 	stw	r5,0(sp)
  80f744:	080f1140 	call	80f114 <__lo0bits>
  80f748:	100d883a 	mov	r6,r2
  80f74c:	10003526 	beq	r2,zero,80f824 <__d2b+0x16c>
  80f750:	d8c00117 	ldw	r3,4(sp)
  80f754:	00800804 	movi	r2,32
  80f758:	1185c83a 	sub	r2,r2,r6
  80f75c:	d9000017 	ldw	r4,0(sp)
  80f760:	1886983a 	sll	r3,r3,r2
  80f764:	1906b03a 	or	r3,r3,r4
  80f768:	90c00515 	stw	r3,20(r18)
  80f76c:	d8c00117 	ldw	r3,4(sp)
  80f770:	1986d83a 	srl	r3,r3,r6
  80f774:	d8c00115 	stw	r3,4(sp)
  80f778:	180b003a 	cmpeq	r5,r3,zero
  80f77c:	00800084 	movi	r2,2
  80f780:	114bc83a 	sub	r5,r2,r5
  80f784:	80c00115 	stw	r3,4(r16)
  80f788:	91400415 	stw	r5,16(r18)
  80f78c:	a0001a1e 	bne	r20,zero,80f7f8 <__d2b+0x140>
  80f790:	3545883a 	add	r2,r6,r21
  80f794:	10bef344 	addi	r2,r2,-1075
  80f798:	00c00d44 	movi	r3,53
  80f79c:	b0800015 	stw	r2,0(r22)
  80f7a0:	1987c83a 	sub	r3,r3,r6
  80f7a4:	b8c00015 	stw	r3,0(r23)
  80f7a8:	9005883a 	mov	r2,r18
  80f7ac:	dfc00a17 	ldw	ra,40(sp)
  80f7b0:	ddc00917 	ldw	r23,36(sp)
  80f7b4:	dd800817 	ldw	r22,32(sp)
  80f7b8:	dd400717 	ldw	r21,28(sp)
  80f7bc:	dd000617 	ldw	r20,24(sp)
  80f7c0:	dcc00517 	ldw	r19,20(sp)
  80f7c4:	dc800417 	ldw	r18,16(sp)
  80f7c8:	dc400317 	ldw	r17,12(sp)
  80f7cc:	dc000217 	ldw	r16,8(sp)
  80f7d0:	dec00b04 	addi	sp,sp,44
  80f7d4:	f800283a 	ret
  80f7d8:	d9000104 	addi	r4,sp,4
  80f7dc:	080f1140 	call	80f114 <__lo0bits>
  80f7e0:	11800804 	addi	r6,r2,32
  80f7e4:	d8800117 	ldw	r2,4(sp)
  80f7e8:	94c00415 	stw	r19,16(r18)
  80f7ec:	980b883a 	mov	r5,r19
  80f7f0:	90800515 	stw	r2,20(r18)
  80f7f4:	a03fe626 	beq	r20,zero,80f790 <__d2b+0xd8>
  80f7f8:	2945883a 	add	r2,r5,r5
  80f7fc:	1085883a 	add	r2,r2,r2
  80f800:	1405883a 	add	r2,r2,r16
  80f804:	113fff17 	ldw	r4,-4(r2)
  80f808:	30fef384 	addi	r3,r6,-1074
  80f80c:	2820917a 	slli	r16,r5,5
  80f810:	b0c00015 	stw	r3,0(r22)
  80f814:	080f0a40 	call	80f0a4 <__hi0bits>
  80f818:	80a1c83a 	sub	r16,r16,r2
  80f81c:	bc000015 	stw	r16,0(r23)
  80f820:	003fe106 	br	80f7a8 <__d2b+0xf0>
  80f824:	d8800017 	ldw	r2,0(sp)
  80f828:	90800515 	stw	r2,20(r18)
  80f82c:	d8c00117 	ldw	r3,4(sp)
  80f830:	003fd106 	br	80f778 <__d2b+0xc0>

0080f834 <__mdiff>:
  80f834:	defffb04 	addi	sp,sp,-20
  80f838:	dc000015 	stw	r16,0(sp)
  80f83c:	2821883a 	mov	r16,r5
  80f840:	dc800215 	stw	r18,8(sp)
  80f844:	300b883a 	mov	r5,r6
  80f848:	2025883a 	mov	r18,r4
  80f84c:	8009883a 	mov	r4,r16
  80f850:	dc400115 	stw	r17,4(sp)
  80f854:	dfc00415 	stw	ra,16(sp)
  80f858:	dcc00315 	stw	r19,12(sp)
  80f85c:	3023883a 	mov	r17,r6
  80f860:	080f1d80 	call	80f1d8 <__mcmp>
  80f864:	10004226 	beq	r2,zero,80f970 <__mdiff+0x13c>
  80f868:	10005016 	blt	r2,zero,80f9ac <__mdiff+0x178>
  80f86c:	0027883a 	mov	r19,zero
  80f870:	81400117 	ldw	r5,4(r16)
  80f874:	9009883a 	mov	r4,r18
  80f878:	080f5fc0 	call	80f5fc <_Balloc>
  80f87c:	1019883a 	mov	r12,r2
  80f880:	82800417 	ldw	r10,16(r16)
  80f884:	88800417 	ldw	r2,16(r17)
  80f888:	81800504 	addi	r6,r16,20
  80f88c:	5287883a 	add	r3,r10,r10
  80f890:	1085883a 	add	r2,r2,r2
  80f894:	18c7883a 	add	r3,r3,r3
  80f898:	1085883a 	add	r2,r2,r2
  80f89c:	8a000504 	addi	r8,r17,20
  80f8a0:	64c00315 	stw	r19,12(r12)
  80f8a4:	30db883a 	add	r13,r6,r3
  80f8a8:	4097883a 	add	r11,r8,r2
  80f8ac:	61c00504 	addi	r7,r12,20
  80f8b0:	0013883a 	mov	r9,zero
  80f8b4:	31000017 	ldw	r4,0(r6)
  80f8b8:	41400017 	ldw	r5,0(r8)
  80f8bc:	42000104 	addi	r8,r8,4
  80f8c0:	20bfffcc 	andi	r2,r4,65535
  80f8c4:	28ffffcc 	andi	r3,r5,65535
  80f8c8:	10c5c83a 	sub	r2,r2,r3
  80f8cc:	1245883a 	add	r2,r2,r9
  80f8d0:	2008d43a 	srli	r4,r4,16
  80f8d4:	280ad43a 	srli	r5,r5,16
  80f8d8:	1007d43a 	srai	r3,r2,16
  80f8dc:	3880000d 	sth	r2,0(r7)
  80f8e0:	2149c83a 	sub	r4,r4,r5
  80f8e4:	20c9883a 	add	r4,r4,r3
  80f8e8:	3900008d 	sth	r4,2(r7)
  80f8ec:	31800104 	addi	r6,r6,4
  80f8f0:	39c00104 	addi	r7,r7,4
  80f8f4:	2013d43a 	srai	r9,r4,16
  80f8f8:	42ffee36 	bltu	r8,r11,80f8b4 <__mdiff+0x80>
  80f8fc:	33400c2e 	bgeu	r6,r13,80f930 <__mdiff+0xfc>
  80f900:	30800017 	ldw	r2,0(r6)
  80f904:	31800104 	addi	r6,r6,4
  80f908:	10ffffcc 	andi	r3,r2,65535
  80f90c:	1a47883a 	add	r3,r3,r9
  80f910:	1004d43a 	srli	r2,r2,16
  80f914:	1809d43a 	srai	r4,r3,16
  80f918:	38c0000d 	sth	r3,0(r7)
  80f91c:	1105883a 	add	r2,r2,r4
  80f920:	3880008d 	sth	r2,2(r7)
  80f924:	1013d43a 	srai	r9,r2,16
  80f928:	39c00104 	addi	r7,r7,4
  80f92c:	337ff436 	bltu	r6,r13,80f900 <__mdiff+0xcc>
  80f930:	38bfff17 	ldw	r2,-4(r7)
  80f934:	38ffff04 	addi	r3,r7,-4
  80f938:	1000041e 	bne	r2,zero,80f94c <__mdiff+0x118>
  80f93c:	18ffff04 	addi	r3,r3,-4
  80f940:	18800017 	ldw	r2,0(r3)
  80f944:	52bfffc4 	addi	r10,r10,-1
  80f948:	103ffc26 	beq	r2,zero,80f93c <__mdiff+0x108>
  80f94c:	6005883a 	mov	r2,r12
  80f950:	62800415 	stw	r10,16(r12)
  80f954:	dfc00417 	ldw	ra,16(sp)
  80f958:	dcc00317 	ldw	r19,12(sp)
  80f95c:	dc800217 	ldw	r18,8(sp)
  80f960:	dc400117 	ldw	r17,4(sp)
  80f964:	dc000017 	ldw	r16,0(sp)
  80f968:	dec00504 	addi	sp,sp,20
  80f96c:	f800283a 	ret
  80f970:	9009883a 	mov	r4,r18
  80f974:	000b883a 	mov	r5,zero
  80f978:	080f5fc0 	call	80f5fc <_Balloc>
  80f97c:	1019883a 	mov	r12,r2
  80f980:	00800044 	movi	r2,1
  80f984:	60800415 	stw	r2,16(r12)
  80f988:	6005883a 	mov	r2,r12
  80f98c:	60000515 	stw	zero,20(r12)
  80f990:	dfc00417 	ldw	ra,16(sp)
  80f994:	dcc00317 	ldw	r19,12(sp)
  80f998:	dc800217 	ldw	r18,8(sp)
  80f99c:	dc400117 	ldw	r17,4(sp)
  80f9a0:	dc000017 	ldw	r16,0(sp)
  80f9a4:	dec00504 	addi	sp,sp,20
  80f9a8:	f800283a 	ret
  80f9ac:	880d883a 	mov	r6,r17
  80f9b0:	04c00044 	movi	r19,1
  80f9b4:	8023883a 	mov	r17,r16
  80f9b8:	3021883a 	mov	r16,r6
  80f9bc:	003fac06 	br	80f870 <__mdiff+0x3c>

0080f9c0 <__lshift>:
  80f9c0:	defff904 	addi	sp,sp,-28
  80f9c4:	28800417 	ldw	r2,16(r5)
  80f9c8:	dc000015 	stw	r16,0(sp)
  80f9cc:	3021d17a 	srai	r16,r6,5
  80f9d0:	28c00217 	ldw	r3,8(r5)
  80f9d4:	10800044 	addi	r2,r2,1
  80f9d8:	dc400115 	stw	r17,4(sp)
  80f9dc:	80a3883a 	add	r17,r16,r2
  80f9e0:	dd400515 	stw	r21,20(sp)
  80f9e4:	dd000415 	stw	r20,16(sp)
  80f9e8:	dc800215 	stw	r18,8(sp)
  80f9ec:	dfc00615 	stw	ra,24(sp)
  80f9f0:	2825883a 	mov	r18,r5
  80f9f4:	dcc00315 	stw	r19,12(sp)
  80f9f8:	3029883a 	mov	r20,r6
  80f9fc:	202b883a 	mov	r21,r4
  80fa00:	29400117 	ldw	r5,4(r5)
  80fa04:	1c40030e 	bge	r3,r17,80fa14 <__lshift+0x54>
  80fa08:	18c7883a 	add	r3,r3,r3
  80fa0c:	29400044 	addi	r5,r5,1
  80fa10:	1c7ffd16 	blt	r3,r17,80fa08 <__lshift+0x48>
  80fa14:	a809883a 	mov	r4,r21
  80fa18:	080f5fc0 	call	80f5fc <_Balloc>
  80fa1c:	1027883a 	mov	r19,r2
  80fa20:	11400504 	addi	r5,r2,20
  80fa24:	0400090e 	bge	zero,r16,80fa4c <__lshift+0x8c>
  80fa28:	2805883a 	mov	r2,r5
  80fa2c:	0007883a 	mov	r3,zero
  80fa30:	18c00044 	addi	r3,r3,1
  80fa34:	10000015 	stw	zero,0(r2)
  80fa38:	10800104 	addi	r2,r2,4
  80fa3c:	80fffc1e 	bne	r16,r3,80fa30 <__lshift+0x70>
  80fa40:	8405883a 	add	r2,r16,r16
  80fa44:	1085883a 	add	r2,r2,r2
  80fa48:	288b883a 	add	r5,r5,r2
  80fa4c:	90800417 	ldw	r2,16(r18)
  80fa50:	91000504 	addi	r4,r18,20
  80fa54:	a18007cc 	andi	r6,r20,31
  80fa58:	1085883a 	add	r2,r2,r2
  80fa5c:	1085883a 	add	r2,r2,r2
  80fa60:	208f883a 	add	r7,r4,r2
  80fa64:	30001e26 	beq	r6,zero,80fae0 <__lshift+0x120>
  80fa68:	00800804 	movi	r2,32
  80fa6c:	1191c83a 	sub	r8,r2,r6
  80fa70:	0007883a 	mov	r3,zero
  80fa74:	20800017 	ldw	r2,0(r4)
  80fa78:	1184983a 	sll	r2,r2,r6
  80fa7c:	1884b03a 	or	r2,r3,r2
  80fa80:	28800015 	stw	r2,0(r5)
  80fa84:	20c00017 	ldw	r3,0(r4)
  80fa88:	21000104 	addi	r4,r4,4
  80fa8c:	29400104 	addi	r5,r5,4
  80fa90:	1a06d83a 	srl	r3,r3,r8
  80fa94:	21fff736 	bltu	r4,r7,80fa74 <__lshift+0xb4>
  80fa98:	28c00015 	stw	r3,0(r5)
  80fa9c:	18000126 	beq	r3,zero,80faa4 <__lshift+0xe4>
  80faa0:	8c400044 	addi	r17,r17,1
  80faa4:	88bfffc4 	addi	r2,r17,-1
  80faa8:	98800415 	stw	r2,16(r19)
  80faac:	a809883a 	mov	r4,r21
  80fab0:	900b883a 	mov	r5,r18
  80fab4:	080f07c0 	call	80f07c <_Bfree>
  80fab8:	9805883a 	mov	r2,r19
  80fabc:	dfc00617 	ldw	ra,24(sp)
  80fac0:	dd400517 	ldw	r21,20(sp)
  80fac4:	dd000417 	ldw	r20,16(sp)
  80fac8:	dcc00317 	ldw	r19,12(sp)
  80facc:	dc800217 	ldw	r18,8(sp)
  80fad0:	dc400117 	ldw	r17,4(sp)
  80fad4:	dc000017 	ldw	r16,0(sp)
  80fad8:	dec00704 	addi	sp,sp,28
  80fadc:	f800283a 	ret
  80fae0:	20800017 	ldw	r2,0(r4)
  80fae4:	21000104 	addi	r4,r4,4
  80fae8:	28800015 	stw	r2,0(r5)
  80faec:	29400104 	addi	r5,r5,4
  80faf0:	21ffec2e 	bgeu	r4,r7,80faa4 <__lshift+0xe4>
  80faf4:	20800017 	ldw	r2,0(r4)
  80faf8:	21000104 	addi	r4,r4,4
  80fafc:	28800015 	stw	r2,0(r5)
  80fb00:	29400104 	addi	r5,r5,4
  80fb04:	21fff636 	bltu	r4,r7,80fae0 <__lshift+0x120>
  80fb08:	003fe606 	br	80faa4 <__lshift+0xe4>

0080fb0c <__multiply>:
  80fb0c:	defff904 	addi	sp,sp,-28
  80fb10:	dcc00315 	stw	r19,12(sp)
  80fb14:	dc800215 	stw	r18,8(sp)
  80fb18:	2cc00417 	ldw	r19,16(r5)
  80fb1c:	34800417 	ldw	r18,16(r6)
  80fb20:	dd000415 	stw	r20,16(sp)
  80fb24:	dc400115 	stw	r17,4(sp)
  80fb28:	dfc00615 	stw	ra,24(sp)
  80fb2c:	dd400515 	stw	r21,20(sp)
  80fb30:	dc000015 	stw	r16,0(sp)
  80fb34:	2823883a 	mov	r17,r5
  80fb38:	3029883a 	mov	r20,r6
  80fb3c:	9c80040e 	bge	r19,r18,80fb50 <__multiply+0x44>
  80fb40:	9027883a 	mov	r19,r18
  80fb44:	2c800417 	ldw	r18,16(r5)
  80fb48:	2829883a 	mov	r20,r5
  80fb4c:	3023883a 	mov	r17,r6
  80fb50:	88800217 	ldw	r2,8(r17)
  80fb54:	9ca1883a 	add	r16,r19,r18
  80fb58:	89400117 	ldw	r5,4(r17)
  80fb5c:	1400010e 	bge	r2,r16,80fb64 <__multiply+0x58>
  80fb60:	29400044 	addi	r5,r5,1
  80fb64:	080f5fc0 	call	80f5fc <_Balloc>
  80fb68:	102b883a 	mov	r21,r2
  80fb6c:	8405883a 	add	r2,r16,r16
  80fb70:	1085883a 	add	r2,r2,r2
  80fb74:	a9000504 	addi	r4,r21,20
  80fb78:	209d883a 	add	r14,r4,r2
  80fb7c:	2380042e 	bgeu	r4,r14,80fb90 <__multiply+0x84>
  80fb80:	2005883a 	mov	r2,r4
  80fb84:	10000015 	stw	zero,0(r2)
  80fb88:	10800104 	addi	r2,r2,4
  80fb8c:	13bffd36 	bltu	r2,r14,80fb84 <__multiply+0x78>
  80fb90:	9485883a 	add	r2,r18,r18
  80fb94:	9cc7883a 	add	r3,r19,r19
  80fb98:	a1800504 	addi	r6,r20,20
  80fb9c:	1085883a 	add	r2,r2,r2
  80fba0:	8b400504 	addi	r13,r17,20
  80fba4:	18c7883a 	add	r3,r3,r3
  80fba8:	309f883a 	add	r15,r6,r2
  80fbac:	68d7883a 	add	r11,r13,r3
  80fbb0:	33c03b2e 	bgeu	r6,r15,80fca0 <__multiply+0x194>
  80fbb4:	2019883a 	mov	r12,r4
  80fbb8:	30800017 	ldw	r2,0(r6)
  80fbbc:	127fffcc 	andi	r9,r2,65535
  80fbc0:	48001826 	beq	r9,zero,80fc24 <__multiply+0x118>
  80fbc4:	6811883a 	mov	r8,r13
  80fbc8:	600f883a 	mov	r7,r12
  80fbcc:	0015883a 	mov	r10,zero
  80fbd0:	40c00017 	ldw	r3,0(r8)
  80fbd4:	39400017 	ldw	r5,0(r7)
  80fbd8:	42000104 	addi	r8,r8,4
  80fbdc:	193fffcc 	andi	r4,r3,65535
  80fbe0:	4909383a 	mul	r4,r9,r4
  80fbe4:	1806d43a 	srli	r3,r3,16
  80fbe8:	28bfffcc 	andi	r2,r5,65535
  80fbec:	5085883a 	add	r2,r10,r2
  80fbf0:	2089883a 	add	r4,r4,r2
  80fbf4:	48c7383a 	mul	r3,r9,r3
  80fbf8:	280ad43a 	srli	r5,r5,16
  80fbfc:	2004d43a 	srli	r2,r4,16
  80fc00:	3900000d 	sth	r4,0(r7)
  80fc04:	1947883a 	add	r3,r3,r5
  80fc08:	10c5883a 	add	r2,r2,r3
  80fc0c:	3880008d 	sth	r2,2(r7)
  80fc10:	1014d43a 	srli	r10,r2,16
  80fc14:	39c00104 	addi	r7,r7,4
  80fc18:	42ffed36 	bltu	r8,r11,80fbd0 <__multiply+0xc4>
  80fc1c:	3a800015 	stw	r10,0(r7)
  80fc20:	30800017 	ldw	r2,0(r6)
  80fc24:	1012d43a 	srli	r9,r2,16
  80fc28:	48001926 	beq	r9,zero,80fc90 <__multiply+0x184>
  80fc2c:	60800017 	ldw	r2,0(r12)
  80fc30:	6811883a 	mov	r8,r13
  80fc34:	600f883a 	mov	r7,r12
  80fc38:	0015883a 	mov	r10,zero
  80fc3c:	100b883a 	mov	r5,r2
  80fc40:	41000017 	ldw	r4,0(r8)
  80fc44:	2806d43a 	srli	r3,r5,16
  80fc48:	3880000d 	sth	r2,0(r7)
  80fc4c:	20bfffcc 	andi	r2,r4,65535
  80fc50:	4885383a 	mul	r2,r9,r2
  80fc54:	50c7883a 	add	r3,r10,r3
  80fc58:	2008d43a 	srli	r4,r4,16
  80fc5c:	10c5883a 	add	r2,r2,r3
  80fc60:	3880008d 	sth	r2,2(r7)
  80fc64:	39c00104 	addi	r7,r7,4
  80fc68:	39400017 	ldw	r5,0(r7)
  80fc6c:	4909383a 	mul	r4,r9,r4
  80fc70:	1004d43a 	srli	r2,r2,16
  80fc74:	28ffffcc 	andi	r3,r5,65535
  80fc78:	20c9883a 	add	r4,r4,r3
  80fc7c:	1105883a 	add	r2,r2,r4
  80fc80:	42000104 	addi	r8,r8,4
  80fc84:	1014d43a 	srli	r10,r2,16
  80fc88:	42ffed36 	bltu	r8,r11,80fc40 <__multiply+0x134>
  80fc8c:	38800015 	stw	r2,0(r7)
  80fc90:	31800104 	addi	r6,r6,4
  80fc94:	33c0022e 	bgeu	r6,r15,80fca0 <__multiply+0x194>
  80fc98:	63000104 	addi	r12,r12,4
  80fc9c:	003fc606 	br	80fbb8 <__multiply+0xac>
  80fca0:	0400090e 	bge	zero,r16,80fcc8 <__multiply+0x1bc>
  80fca4:	70bfff17 	ldw	r2,-4(r14)
  80fca8:	70ffff04 	addi	r3,r14,-4
  80fcac:	10000326 	beq	r2,zero,80fcbc <__multiply+0x1b0>
  80fcb0:	00000506 	br	80fcc8 <__multiply+0x1bc>
  80fcb4:	18800017 	ldw	r2,0(r3)
  80fcb8:	1000031e 	bne	r2,zero,80fcc8 <__multiply+0x1bc>
  80fcbc:	843fffc4 	addi	r16,r16,-1
  80fcc0:	18ffff04 	addi	r3,r3,-4
  80fcc4:	803ffb1e 	bne	r16,zero,80fcb4 <__multiply+0x1a8>
  80fcc8:	a805883a 	mov	r2,r21
  80fccc:	ac000415 	stw	r16,16(r21)
  80fcd0:	dfc00617 	ldw	ra,24(sp)
  80fcd4:	dd400517 	ldw	r21,20(sp)
  80fcd8:	dd000417 	ldw	r20,16(sp)
  80fcdc:	dcc00317 	ldw	r19,12(sp)
  80fce0:	dc800217 	ldw	r18,8(sp)
  80fce4:	dc400117 	ldw	r17,4(sp)
  80fce8:	dc000017 	ldw	r16,0(sp)
  80fcec:	dec00704 	addi	sp,sp,28
  80fcf0:	f800283a 	ret

0080fcf4 <__i2b>:
  80fcf4:	defffd04 	addi	sp,sp,-12
  80fcf8:	dc000015 	stw	r16,0(sp)
  80fcfc:	04000044 	movi	r16,1
  80fd00:	dc800115 	stw	r18,4(sp)
  80fd04:	2825883a 	mov	r18,r5
  80fd08:	800b883a 	mov	r5,r16
  80fd0c:	dfc00215 	stw	ra,8(sp)
  80fd10:	080f5fc0 	call	80f5fc <_Balloc>
  80fd14:	14000415 	stw	r16,16(r2)
  80fd18:	14800515 	stw	r18,20(r2)
  80fd1c:	dfc00217 	ldw	ra,8(sp)
  80fd20:	dc800117 	ldw	r18,4(sp)
  80fd24:	dc000017 	ldw	r16,0(sp)
  80fd28:	dec00304 	addi	sp,sp,12
  80fd2c:	f800283a 	ret

0080fd30 <__multadd>:
  80fd30:	defffa04 	addi	sp,sp,-24
  80fd34:	dc800215 	stw	r18,8(sp)
  80fd38:	2c800417 	ldw	r18,16(r5)
  80fd3c:	dd000415 	stw	r20,16(sp)
  80fd40:	dcc00315 	stw	r19,12(sp)
  80fd44:	dc000015 	stw	r16,0(sp)
  80fd48:	dfc00515 	stw	ra,20(sp)
  80fd4c:	3821883a 	mov	r16,r7
  80fd50:	dc400115 	stw	r17,4(sp)
  80fd54:	2827883a 	mov	r19,r5
  80fd58:	2029883a 	mov	r20,r4
  80fd5c:	2a000504 	addi	r8,r5,20
  80fd60:	000f883a 	mov	r7,zero
  80fd64:	40800017 	ldw	r2,0(r8)
  80fd68:	39c00044 	addi	r7,r7,1
  80fd6c:	10ffffcc 	andi	r3,r2,65535
  80fd70:	1987383a 	mul	r3,r3,r6
  80fd74:	1004d43a 	srli	r2,r2,16
  80fd78:	1c07883a 	add	r3,r3,r16
  80fd7c:	180ad43a 	srli	r5,r3,16
  80fd80:	1185383a 	mul	r2,r2,r6
  80fd84:	18ffffcc 	andi	r3,r3,65535
  80fd88:	1145883a 	add	r2,r2,r5
  80fd8c:	1008943a 	slli	r4,r2,16
  80fd90:	1020d43a 	srli	r16,r2,16
  80fd94:	20c9883a 	add	r4,r4,r3
  80fd98:	41000015 	stw	r4,0(r8)
  80fd9c:	42000104 	addi	r8,r8,4
  80fda0:	3cbff016 	blt	r7,r18,80fd64 <__multadd+0x34>
  80fda4:	80000826 	beq	r16,zero,80fdc8 <__multadd+0x98>
  80fda8:	98800217 	ldw	r2,8(r19)
  80fdac:	90800f0e 	bge	r18,r2,80fdec <__multadd+0xbc>
  80fdb0:	9485883a 	add	r2,r18,r18
  80fdb4:	1085883a 	add	r2,r2,r2
  80fdb8:	14c5883a 	add	r2,r2,r19
  80fdbc:	90c00044 	addi	r3,r18,1
  80fdc0:	14000515 	stw	r16,20(r2)
  80fdc4:	98c00415 	stw	r3,16(r19)
  80fdc8:	9805883a 	mov	r2,r19
  80fdcc:	dfc00517 	ldw	ra,20(sp)
  80fdd0:	dd000417 	ldw	r20,16(sp)
  80fdd4:	dcc00317 	ldw	r19,12(sp)
  80fdd8:	dc800217 	ldw	r18,8(sp)
  80fddc:	dc400117 	ldw	r17,4(sp)
  80fde0:	dc000017 	ldw	r16,0(sp)
  80fde4:	dec00604 	addi	sp,sp,24
  80fde8:	f800283a 	ret
  80fdec:	99400117 	ldw	r5,4(r19)
  80fdf0:	a009883a 	mov	r4,r20
  80fdf4:	29400044 	addi	r5,r5,1
  80fdf8:	080f5fc0 	call	80f5fc <_Balloc>
  80fdfc:	99800417 	ldw	r6,16(r19)
  80fe00:	99400304 	addi	r5,r19,12
  80fe04:	11000304 	addi	r4,r2,12
  80fe08:	318d883a 	add	r6,r6,r6
  80fe0c:	318d883a 	add	r6,r6,r6
  80fe10:	31800204 	addi	r6,r6,8
  80fe14:	1023883a 	mov	r17,r2
  80fe18:	08073380 	call	807338 <memcpy>
  80fe1c:	980b883a 	mov	r5,r19
  80fe20:	a009883a 	mov	r4,r20
  80fe24:	080f07c0 	call	80f07c <_Bfree>
  80fe28:	8827883a 	mov	r19,r17
  80fe2c:	003fe006 	br	80fdb0 <__multadd+0x80>

0080fe30 <__pow5mult>:
  80fe30:	defffa04 	addi	sp,sp,-24
  80fe34:	308000cc 	andi	r2,r6,3
  80fe38:	dd000415 	stw	r20,16(sp)
  80fe3c:	dcc00315 	stw	r19,12(sp)
  80fe40:	dc000015 	stw	r16,0(sp)
  80fe44:	dfc00515 	stw	ra,20(sp)
  80fe48:	dc800215 	stw	r18,8(sp)
  80fe4c:	dc400115 	stw	r17,4(sp)
  80fe50:	3021883a 	mov	r16,r6
  80fe54:	2027883a 	mov	r19,r4
  80fe58:	2829883a 	mov	r20,r5
  80fe5c:	10002b1e 	bne	r2,zero,80ff0c <__pow5mult+0xdc>
  80fe60:	8025d0ba 	srai	r18,r16,2
  80fe64:	90001b26 	beq	r18,zero,80fed4 <__pow5mult+0xa4>
  80fe68:	9c001217 	ldw	r16,72(r19)
  80fe6c:	8000081e 	bne	r16,zero,80fe90 <__pow5mult+0x60>
  80fe70:	00003006 	br	80ff34 <__pow5mult+0x104>
  80fe74:	800b883a 	mov	r5,r16
  80fe78:	800d883a 	mov	r6,r16
  80fe7c:	9809883a 	mov	r4,r19
  80fe80:	90001426 	beq	r18,zero,80fed4 <__pow5mult+0xa4>
  80fe84:	80800017 	ldw	r2,0(r16)
  80fe88:	10001b26 	beq	r2,zero,80fef8 <__pow5mult+0xc8>
  80fe8c:	1021883a 	mov	r16,r2
  80fe90:	9080004c 	andi	r2,r18,1
  80fe94:	1005003a 	cmpeq	r2,r2,zero
  80fe98:	9025d07a 	srai	r18,r18,1
  80fe9c:	800d883a 	mov	r6,r16
  80fea0:	9809883a 	mov	r4,r19
  80fea4:	a00b883a 	mov	r5,r20
  80fea8:	103ff21e 	bne	r2,zero,80fe74 <__pow5mult+0x44>
  80feac:	080fb0c0 	call	80fb0c <__multiply>
  80feb0:	a00b883a 	mov	r5,r20
  80feb4:	9809883a 	mov	r4,r19
  80feb8:	1023883a 	mov	r17,r2
  80febc:	080f07c0 	call	80f07c <_Bfree>
  80fec0:	8829883a 	mov	r20,r17
  80fec4:	800b883a 	mov	r5,r16
  80fec8:	800d883a 	mov	r6,r16
  80fecc:	9809883a 	mov	r4,r19
  80fed0:	903fec1e 	bne	r18,zero,80fe84 <__pow5mult+0x54>
  80fed4:	a005883a 	mov	r2,r20
  80fed8:	dfc00517 	ldw	ra,20(sp)
  80fedc:	dd000417 	ldw	r20,16(sp)
  80fee0:	dcc00317 	ldw	r19,12(sp)
  80fee4:	dc800217 	ldw	r18,8(sp)
  80fee8:	dc400117 	ldw	r17,4(sp)
  80feec:	dc000017 	ldw	r16,0(sp)
  80fef0:	dec00604 	addi	sp,sp,24
  80fef4:	f800283a 	ret
  80fef8:	080fb0c0 	call	80fb0c <__multiply>
  80fefc:	80800015 	stw	r2,0(r16)
  80ff00:	1021883a 	mov	r16,r2
  80ff04:	10000015 	stw	zero,0(r2)
  80ff08:	003fe106 	br	80fe90 <__pow5mult+0x60>
  80ff0c:	1085883a 	add	r2,r2,r2
  80ff10:	00c02174 	movhi	r3,133
  80ff14:	18f24704 	addi	r3,r3,-14052
  80ff18:	1085883a 	add	r2,r2,r2
  80ff1c:	10c5883a 	add	r2,r2,r3
  80ff20:	11bfff17 	ldw	r6,-4(r2)
  80ff24:	000f883a 	mov	r7,zero
  80ff28:	080fd300 	call	80fd30 <__multadd>
  80ff2c:	1029883a 	mov	r20,r2
  80ff30:	003fcb06 	br	80fe60 <__pow5mult+0x30>
  80ff34:	9809883a 	mov	r4,r19
  80ff38:	01409c44 	movi	r5,625
  80ff3c:	080fcf40 	call	80fcf4 <__i2b>
  80ff40:	98801215 	stw	r2,72(r19)
  80ff44:	1021883a 	mov	r16,r2
  80ff48:	10000015 	stw	zero,0(r2)
  80ff4c:	003fd006 	br	80fe90 <__pow5mult+0x60>

0080ff50 <__s2b>:
  80ff50:	defff904 	addi	sp,sp,-28
  80ff54:	dcc00315 	stw	r19,12(sp)
  80ff58:	dc800215 	stw	r18,8(sp)
  80ff5c:	2827883a 	mov	r19,r5
  80ff60:	2025883a 	mov	r18,r4
  80ff64:	01400244 	movi	r5,9
  80ff68:	39000204 	addi	r4,r7,8
  80ff6c:	dd000415 	stw	r20,16(sp)
  80ff70:	dc400115 	stw	r17,4(sp)
  80ff74:	dfc00615 	stw	ra,24(sp)
  80ff78:	dd400515 	stw	r21,20(sp)
  80ff7c:	dc000015 	stw	r16,0(sp)
  80ff80:	3829883a 	mov	r20,r7
  80ff84:	3023883a 	mov	r17,r6
  80ff88:	08052f80 	call	8052f8 <__divsi3>
  80ff8c:	00c00044 	movi	r3,1
  80ff90:	1880350e 	bge	r3,r2,810068 <__s2b+0x118>
  80ff94:	000b883a 	mov	r5,zero
  80ff98:	18c7883a 	add	r3,r3,r3
  80ff9c:	29400044 	addi	r5,r5,1
  80ffa0:	18bffd16 	blt	r3,r2,80ff98 <__s2b+0x48>
  80ffa4:	9009883a 	mov	r4,r18
  80ffa8:	080f5fc0 	call	80f5fc <_Balloc>
  80ffac:	1011883a 	mov	r8,r2
  80ffb0:	d8800717 	ldw	r2,28(sp)
  80ffb4:	00c00044 	movi	r3,1
  80ffb8:	01800244 	movi	r6,9
  80ffbc:	40800515 	stw	r2,20(r8)
  80ffc0:	40c00415 	stw	r3,16(r8)
  80ffc4:	3440260e 	bge	r6,r17,810060 <__s2b+0x110>
  80ffc8:	3021883a 	mov	r16,r6
  80ffcc:	99ab883a 	add	r21,r19,r6
  80ffd0:	9c05883a 	add	r2,r19,r16
  80ffd4:	11c00007 	ldb	r7,0(r2)
  80ffd8:	400b883a 	mov	r5,r8
  80ffdc:	9009883a 	mov	r4,r18
  80ffe0:	39fff404 	addi	r7,r7,-48
  80ffe4:	01800284 	movi	r6,10
  80ffe8:	080fd300 	call	80fd30 <__multadd>
  80ffec:	84000044 	addi	r16,r16,1
  80fff0:	1011883a 	mov	r8,r2
  80fff4:	8c3ff61e 	bne	r17,r16,80ffd0 <__s2b+0x80>
  80fff8:	ac45883a 	add	r2,r21,r17
  80fffc:	117ffe04 	addi	r5,r2,-8
  810000:	880d883a 	mov	r6,r17
  810004:	35000c0e 	bge	r6,r20,810038 <__s2b+0xe8>
  810008:	a185c83a 	sub	r2,r20,r6
  81000c:	2821883a 	mov	r16,r5
  810010:	28a3883a 	add	r17,r5,r2
  810014:	81c00007 	ldb	r7,0(r16)
  810018:	400b883a 	mov	r5,r8
  81001c:	9009883a 	mov	r4,r18
  810020:	39fff404 	addi	r7,r7,-48
  810024:	01800284 	movi	r6,10
  810028:	080fd300 	call	80fd30 <__multadd>
  81002c:	84000044 	addi	r16,r16,1
  810030:	1011883a 	mov	r8,r2
  810034:	847ff71e 	bne	r16,r17,810014 <__s2b+0xc4>
  810038:	4005883a 	mov	r2,r8
  81003c:	dfc00617 	ldw	ra,24(sp)
  810040:	dd400517 	ldw	r21,20(sp)
  810044:	dd000417 	ldw	r20,16(sp)
  810048:	dcc00317 	ldw	r19,12(sp)
  81004c:	dc800217 	ldw	r18,8(sp)
  810050:	dc400117 	ldw	r17,4(sp)
  810054:	dc000017 	ldw	r16,0(sp)
  810058:	dec00704 	addi	sp,sp,28
  81005c:	f800283a 	ret
  810060:	99400284 	addi	r5,r19,10
  810064:	003fe706 	br	810004 <__s2b+0xb4>
  810068:	000b883a 	mov	r5,zero
  81006c:	003fcd06 	br	80ffa4 <__s2b+0x54>

00810070 <putc>:
  810070:	defffc04 	addi	sp,sp,-16
  810074:	dc800215 	stw	r18,8(sp)
  810078:	04802174 	movhi	r18,133
  81007c:	94828104 	addi	r18,r18,2564
  810080:	90c00017 	ldw	r3,0(r18)
  810084:	dc400115 	stw	r17,4(sp)
  810088:	dc000015 	stw	r16,0(sp)
  81008c:	dfc00315 	stw	ra,12(sp)
  810090:	2023883a 	mov	r17,r4
  810094:	2821883a 	mov	r16,r5
  810098:	18000226 	beq	r3,zero,8100a4 <putc+0x34>
  81009c:	18800e17 	ldw	r2,56(r3)
  8100a0:	10001126 	beq	r2,zero,8100e8 <putc+0x78>
  8100a4:	80800217 	ldw	r2,8(r16)
  8100a8:	10ffffc4 	addi	r3,r2,-1
  8100ac:	80c00215 	stw	r3,8(r16)
  8100b0:	18001316 	blt	r3,zero,810100 <putc+0x90>
  8100b4:	80800017 	ldw	r2,0(r16)
  8100b8:	14400005 	stb	r17,0(r2)
  8100bc:	80c00017 	ldw	r3,0(r16)
  8100c0:	18800044 	addi	r2,r3,1
  8100c4:	18c00003 	ldbu	r3,0(r3)
  8100c8:	80800015 	stw	r2,0(r16)
  8100cc:	1805883a 	mov	r2,r3
  8100d0:	dfc00317 	ldw	ra,12(sp)
  8100d4:	dc800217 	ldw	r18,8(sp)
  8100d8:	dc400117 	ldw	r17,4(sp)
  8100dc:	dc000017 	ldw	r16,0(sp)
  8100e0:	dec00404 	addi	sp,sp,16
  8100e4:	f800283a 	ret
  8100e8:	1809883a 	mov	r4,r3
  8100ec:	08057e40 	call	8057e4 <__sinit>
  8100f0:	80800217 	ldw	r2,8(r16)
  8100f4:	10ffffc4 	addi	r3,r2,-1
  8100f8:	80c00215 	stw	r3,8(r16)
  8100fc:	183fed0e 	bge	r3,zero,8100b4 <putc+0x44>
  810100:	80800617 	ldw	r2,24(r16)
  810104:	18800f16 	blt	r3,r2,810144 <putc+0xd4>
  810108:	80800017 	ldw	r2,0(r16)
  81010c:	14400005 	stb	r17,0(r2)
  810110:	81000017 	ldw	r4,0(r16)
  810114:	00800284 	movi	r2,10
  810118:	20c00003 	ldbu	r3,0(r4)
  81011c:	18801226 	beq	r3,r2,810168 <putc+0xf8>
  810120:	20800044 	addi	r2,r4,1
  810124:	80800015 	stw	r2,0(r16)
  810128:	1805883a 	mov	r2,r3
  81012c:	dfc00317 	ldw	ra,12(sp)
  810130:	dc800217 	ldw	r18,8(sp)
  810134:	dc400117 	ldw	r17,4(sp)
  810138:	dc000017 	ldw	r16,0(sp)
  81013c:	dec00404 	addi	sp,sp,16
  810140:	f800283a 	ret
  810144:	91000017 	ldw	r4,0(r18)
  810148:	880b883a 	mov	r5,r17
  81014c:	800d883a 	mov	r6,r16
  810150:	dfc00317 	ldw	ra,12(sp)
  810154:	dc800217 	ldw	r18,8(sp)
  810158:	dc400117 	ldw	r17,4(sp)
  81015c:	dc000017 	ldw	r16,0(sp)
  810160:	dec00404 	addi	sp,sp,16
  810164:	0812b5c1 	jmpi	812b5c <__swbuf_r>
  810168:	91000017 	ldw	r4,0(r18)
  81016c:	180b883a 	mov	r5,r3
  810170:	003ff606 	br	81014c <putc+0xdc>

00810174 <_putc_r>:
  810174:	defffc04 	addi	sp,sp,-16
  810178:	dc400215 	stw	r17,8(sp)
  81017c:	dc000115 	stw	r16,4(sp)
  810180:	dfc00315 	stw	ra,12(sp)
  810184:	2021883a 	mov	r16,r4
  810188:	2823883a 	mov	r17,r5
  81018c:	20000226 	beq	r4,zero,810198 <_putc_r+0x24>
  810190:	20800e17 	ldw	r2,56(r4)
  810194:	10001026 	beq	r2,zero,8101d8 <_putc_r+0x64>
  810198:	30800217 	ldw	r2,8(r6)
  81019c:	10ffffc4 	addi	r3,r2,-1
  8101a0:	30c00215 	stw	r3,8(r6)
  8101a4:	18001316 	blt	r3,zero,8101f4 <_putc_r+0x80>
  8101a8:	30800017 	ldw	r2,0(r6)
  8101ac:	14400005 	stb	r17,0(r2)
  8101b0:	30c00017 	ldw	r3,0(r6)
  8101b4:	18800044 	addi	r2,r3,1
  8101b8:	18c00003 	ldbu	r3,0(r3)
  8101bc:	30800015 	stw	r2,0(r6)
  8101c0:	1805883a 	mov	r2,r3
  8101c4:	dfc00317 	ldw	ra,12(sp)
  8101c8:	dc400217 	ldw	r17,8(sp)
  8101cc:	dc000117 	ldw	r16,4(sp)
  8101d0:	dec00404 	addi	sp,sp,16
  8101d4:	f800283a 	ret
  8101d8:	d9800015 	stw	r6,0(sp)
  8101dc:	08057e40 	call	8057e4 <__sinit>
  8101e0:	d9800017 	ldw	r6,0(sp)
  8101e4:	30800217 	ldw	r2,8(r6)
  8101e8:	10ffffc4 	addi	r3,r2,-1
  8101ec:	30c00215 	stw	r3,8(r6)
  8101f0:	183fed0e 	bge	r3,zero,8101a8 <_putc_r+0x34>
  8101f4:	30800617 	ldw	r2,24(r6)
  8101f8:	18800e16 	blt	r3,r2,810234 <_putc_r+0xc0>
  8101fc:	30800017 	ldw	r2,0(r6)
  810200:	14400005 	stb	r17,0(r2)
  810204:	31000017 	ldw	r4,0(r6)
  810208:	00800284 	movi	r2,10
  81020c:	20c00003 	ldbu	r3,0(r4)
  810210:	18800f26 	beq	r3,r2,810250 <_putc_r+0xdc>
  810214:	20800044 	addi	r2,r4,1
  810218:	30800015 	stw	r2,0(r6)
  81021c:	1805883a 	mov	r2,r3
  810220:	dfc00317 	ldw	ra,12(sp)
  810224:	dc400217 	ldw	r17,8(sp)
  810228:	dc000117 	ldw	r16,4(sp)
  81022c:	dec00404 	addi	sp,sp,16
  810230:	f800283a 	ret
  810234:	8009883a 	mov	r4,r16
  810238:	880b883a 	mov	r5,r17
  81023c:	dfc00317 	ldw	ra,12(sp)
  810240:	dc400217 	ldw	r17,8(sp)
  810244:	dc000117 	ldw	r16,4(sp)
  810248:	dec00404 	addi	sp,sp,16
  81024c:	0812b5c1 	jmpi	812b5c <__swbuf_r>
  810250:	8009883a 	mov	r4,r16
  810254:	180b883a 	mov	r5,r3
  810258:	003ff806 	br	81023c <_putc_r+0xc8>

0081025c <_read_r>:
  81025c:	defffd04 	addi	sp,sp,-12
  810260:	dc000015 	stw	r16,0(sp)
  810264:	04002174 	movhi	r16,133
  810268:	8402da04 	addi	r16,r16,2920
  81026c:	dc400115 	stw	r17,4(sp)
  810270:	80000015 	stw	zero,0(r16)
  810274:	2023883a 	mov	r17,r4
  810278:	2809883a 	mov	r4,r5
  81027c:	300b883a 	mov	r5,r6
  810280:	380d883a 	mov	r6,r7
  810284:	dfc00215 	stw	ra,8(sp)
  810288:	08225b00 	call	8225b0 <read>
  81028c:	1007883a 	mov	r3,r2
  810290:	00bfffc4 	movi	r2,-1
  810294:	18800626 	beq	r3,r2,8102b0 <_read_r+0x54>
  810298:	1805883a 	mov	r2,r3
  81029c:	dfc00217 	ldw	ra,8(sp)
  8102a0:	dc400117 	ldw	r17,4(sp)
  8102a4:	dc000017 	ldw	r16,0(sp)
  8102a8:	dec00304 	addi	sp,sp,12
  8102ac:	f800283a 	ret
  8102b0:	80800017 	ldw	r2,0(r16)
  8102b4:	103ff826 	beq	r2,zero,810298 <_read_r+0x3c>
  8102b8:	88800015 	stw	r2,0(r17)
  8102bc:	1805883a 	mov	r2,r3
  8102c0:	dfc00217 	ldw	ra,8(sp)
  8102c4:	dc400117 	ldw	r17,4(sp)
  8102c8:	dc000017 	ldw	r16,0(sp)
  8102cc:	dec00304 	addi	sp,sp,12
  8102d0:	f800283a 	ret

008102d4 <_realloc_r>:
  8102d4:	defff404 	addi	sp,sp,-48
  8102d8:	dd800815 	stw	r22,32(sp)
  8102dc:	dc800415 	stw	r18,16(sp)
  8102e0:	dc400315 	stw	r17,12(sp)
  8102e4:	dfc00b15 	stw	ra,44(sp)
  8102e8:	df000a15 	stw	fp,40(sp)
  8102ec:	ddc00915 	stw	r23,36(sp)
  8102f0:	dd400715 	stw	r21,28(sp)
  8102f4:	dd000615 	stw	r20,24(sp)
  8102f8:	dcc00515 	stw	r19,20(sp)
  8102fc:	dc000215 	stw	r16,8(sp)
  810300:	2825883a 	mov	r18,r5
  810304:	3023883a 	mov	r17,r6
  810308:	202d883a 	mov	r22,r4
  81030c:	2800c926 	beq	r5,zero,810634 <_realloc_r+0x360>
  810310:	08170e80 	call	8170e8 <__malloc_lock>
  810314:	943ffe04 	addi	r16,r18,-8
  810318:	88c002c4 	addi	r3,r17,11
  81031c:	00800584 	movi	r2,22
  810320:	82000117 	ldw	r8,4(r16)
  810324:	10c01b2e 	bgeu	r2,r3,810394 <_realloc_r+0xc0>
  810328:	00bffe04 	movi	r2,-8
  81032c:	188e703a 	and	r7,r3,r2
  810330:	3839883a 	mov	fp,r7
  810334:	38001a16 	blt	r7,zero,8103a0 <_realloc_r+0xcc>
  810338:	e4401936 	bltu	fp,r17,8103a0 <_realloc_r+0xcc>
  81033c:	013fff04 	movi	r4,-4
  810340:	4126703a 	and	r19,r8,r4
  810344:	99c02616 	blt	r19,r7,8103e0 <_realloc_r+0x10c>
  810348:	802b883a 	mov	r21,r16
  81034c:	9829883a 	mov	r20,r19
  810350:	84000204 	addi	r16,r16,8
  810354:	a80f883a 	mov	r7,r21
  810358:	a70dc83a 	sub	r6,r20,fp
  81035c:	008003c4 	movi	r2,15
  810360:	1180c136 	bltu	r2,r6,810668 <_realloc_r+0x394>
  810364:	38800117 	ldw	r2,4(r7)
  810368:	a549883a 	add	r4,r20,r21
  81036c:	1080004c 	andi	r2,r2,1
  810370:	a084b03a 	or	r2,r20,r2
  810374:	38800115 	stw	r2,4(r7)
  810378:	20c00117 	ldw	r3,4(r4)
  81037c:	18c00054 	ori	r3,r3,1
  810380:	20c00115 	stw	r3,4(r4)
  810384:	b009883a 	mov	r4,r22
  810388:	08171f00 	call	8171f0 <__malloc_unlock>
  81038c:	8023883a 	mov	r17,r16
  810390:	00000606 	br	8103ac <_realloc_r+0xd8>
  810394:	01c00404 	movi	r7,16
  810398:	3839883a 	mov	fp,r7
  81039c:	e47fe72e 	bgeu	fp,r17,81033c <_realloc_r+0x68>
  8103a0:	00800304 	movi	r2,12
  8103a4:	0023883a 	mov	r17,zero
  8103a8:	b0800015 	stw	r2,0(r22)
  8103ac:	8805883a 	mov	r2,r17
  8103b0:	dfc00b17 	ldw	ra,44(sp)
  8103b4:	df000a17 	ldw	fp,40(sp)
  8103b8:	ddc00917 	ldw	r23,36(sp)
  8103bc:	dd800817 	ldw	r22,32(sp)
  8103c0:	dd400717 	ldw	r21,28(sp)
  8103c4:	dd000617 	ldw	r20,24(sp)
  8103c8:	dcc00517 	ldw	r19,20(sp)
  8103cc:	dc800417 	ldw	r18,16(sp)
  8103d0:	dc400317 	ldw	r17,12(sp)
  8103d4:	dc000217 	ldw	r16,8(sp)
  8103d8:	dec00c04 	addi	sp,sp,48
  8103dc:	f800283a 	ret
  8103e0:	00802174 	movhi	r2,133
  8103e4:	10bc2304 	addi	r2,r2,-3956
  8103e8:	12400217 	ldw	r9,8(r2)
  8103ec:	84cd883a 	add	r6,r16,r19
  8103f0:	802b883a 	mov	r21,r16
  8103f4:	3240b926 	beq	r6,r9,8106dc <_realloc_r+0x408>
  8103f8:	31400117 	ldw	r5,4(r6)
  8103fc:	00bfff84 	movi	r2,-2
  810400:	2884703a 	and	r2,r5,r2
  810404:	1185883a 	add	r2,r2,r6
  810408:	10c00117 	ldw	r3,4(r2)
  81040c:	18c0004c 	andi	r3,r3,1
  810410:	1807003a 	cmpeq	r3,r3,zero
  810414:	1800a326 	beq	r3,zero,8106a4 <_realloc_r+0x3d0>
  810418:	2908703a 	and	r4,r5,r4
  81041c:	9929883a 	add	r20,r19,r4
  810420:	a1c0a30e 	bge	r20,r7,8106b0 <_realloc_r+0x3dc>
  810424:	4080004c 	andi	r2,r8,1
  810428:	1000551e 	bne	r2,zero,810580 <_realloc_r+0x2ac>
  81042c:	80800017 	ldw	r2,0(r16)
  810430:	80afc83a 	sub	r23,r16,r2
  810434:	b8c00117 	ldw	r3,4(r23)
  810438:	00bfff04 	movi	r2,-4
  81043c:	1884703a 	and	r2,r3,r2
  810440:	30002e26 	beq	r6,zero,8104fc <_realloc_r+0x228>
  810444:	3240b926 	beq	r6,r9,81072c <_realloc_r+0x458>
  810448:	98a9883a 	add	r20,r19,r2
  81044c:	2509883a 	add	r4,r4,r20
  810450:	d9000015 	stw	r4,0(sp)
  810454:	21c02a16 	blt	r4,r7,810500 <_realloc_r+0x22c>
  810458:	30800317 	ldw	r2,12(r6)
  81045c:	30c00217 	ldw	r3,8(r6)
  810460:	01400904 	movi	r5,36
  810464:	99bfff04 	addi	r6,r19,-4
  810468:	18800315 	stw	r2,12(r3)
  81046c:	10c00215 	stw	r3,8(r2)
  810470:	b9000317 	ldw	r4,12(r23)
  810474:	b8800217 	ldw	r2,8(r23)
  810478:	b82b883a 	mov	r21,r23
  81047c:	bc000204 	addi	r16,r23,8
  810480:	20800215 	stw	r2,8(r4)
  810484:	11000315 	stw	r4,12(r2)
  810488:	2980e436 	bltu	r5,r6,81081c <_realloc_r+0x548>
  81048c:	008004c4 	movi	r2,19
  810490:	9009883a 	mov	r4,r18
  810494:	8011883a 	mov	r8,r16
  810498:	11800f2e 	bgeu	r2,r6,8104d8 <_realloc_r+0x204>
  81049c:	90800017 	ldw	r2,0(r18)
  8104a0:	ba000404 	addi	r8,r23,16
  8104a4:	91000204 	addi	r4,r18,8
  8104a8:	b8800215 	stw	r2,8(r23)
  8104ac:	90c00117 	ldw	r3,4(r18)
  8104b0:	008006c4 	movi	r2,27
  8104b4:	b8c00315 	stw	r3,12(r23)
  8104b8:	1180072e 	bgeu	r2,r6,8104d8 <_realloc_r+0x204>
  8104bc:	90c00217 	ldw	r3,8(r18)
  8104c0:	ba000604 	addi	r8,r23,24
  8104c4:	91000404 	addi	r4,r18,16
  8104c8:	b8c00415 	stw	r3,16(r23)
  8104cc:	90800317 	ldw	r2,12(r18)
  8104d0:	b8800515 	stw	r2,20(r23)
  8104d4:	3140e726 	beq	r6,r5,810874 <_realloc_r+0x5a0>
  8104d8:	20800017 	ldw	r2,0(r4)
  8104dc:	dd000017 	ldw	r20,0(sp)
  8104e0:	b80f883a 	mov	r7,r23
  8104e4:	40800015 	stw	r2,0(r8)
  8104e8:	20c00117 	ldw	r3,4(r4)
  8104ec:	40c00115 	stw	r3,4(r8)
  8104f0:	20800217 	ldw	r2,8(r4)
  8104f4:	40800215 	stw	r2,8(r8)
  8104f8:	003f9706 	br	810358 <_realloc_r+0x84>
  8104fc:	98a9883a 	add	r20,r19,r2
  810500:	a1c01f16 	blt	r20,r7,810580 <_realloc_r+0x2ac>
  810504:	b8c00317 	ldw	r3,12(r23)
  810508:	b8800217 	ldw	r2,8(r23)
  81050c:	99bfff04 	addi	r6,r19,-4
  810510:	01400904 	movi	r5,36
  810514:	b82b883a 	mov	r21,r23
  810518:	18800215 	stw	r2,8(r3)
  81051c:	10c00315 	stw	r3,12(r2)
  810520:	bc000204 	addi	r16,r23,8
  810524:	2980c336 	bltu	r5,r6,810834 <_realloc_r+0x560>
  810528:	008004c4 	movi	r2,19
  81052c:	9009883a 	mov	r4,r18
  810530:	8011883a 	mov	r8,r16
  810534:	11800f2e 	bgeu	r2,r6,810574 <_realloc_r+0x2a0>
  810538:	90800017 	ldw	r2,0(r18)
  81053c:	ba000404 	addi	r8,r23,16
  810540:	91000204 	addi	r4,r18,8
  810544:	b8800215 	stw	r2,8(r23)
  810548:	90c00117 	ldw	r3,4(r18)
  81054c:	008006c4 	movi	r2,27
  810550:	b8c00315 	stw	r3,12(r23)
  810554:	1180072e 	bgeu	r2,r6,810574 <_realloc_r+0x2a0>
  810558:	90c00217 	ldw	r3,8(r18)
  81055c:	ba000604 	addi	r8,r23,24
  810560:	91000404 	addi	r4,r18,16
  810564:	b8c00415 	stw	r3,16(r23)
  810568:	90800317 	ldw	r2,12(r18)
  81056c:	b8800515 	stw	r2,20(r23)
  810570:	3140c726 	beq	r6,r5,810890 <_realloc_r+0x5bc>
  810574:	20800017 	ldw	r2,0(r4)
  810578:	b80f883a 	mov	r7,r23
  81057c:	003fd906 	br	8104e4 <_realloc_r+0x210>
  810580:	880b883a 	mov	r5,r17
  810584:	b009883a 	mov	r4,r22
  810588:	0806bf80 	call	806bf8 <_malloc_r>
  81058c:	1023883a 	mov	r17,r2
  810590:	10002526 	beq	r2,zero,810628 <_realloc_r+0x354>
  810594:	80800117 	ldw	r2,4(r16)
  810598:	00ffff84 	movi	r3,-2
  81059c:	893ffe04 	addi	r4,r17,-8
  8105a0:	10c4703a 	and	r2,r2,r3
  8105a4:	8085883a 	add	r2,r16,r2
  8105a8:	20809526 	beq	r4,r2,810800 <_realloc_r+0x52c>
  8105ac:	99bfff04 	addi	r6,r19,-4
  8105b0:	01c00904 	movi	r7,36
  8105b4:	39804536 	bltu	r7,r6,8106cc <_realloc_r+0x3f8>
  8105b8:	008004c4 	movi	r2,19
  8105bc:	9009883a 	mov	r4,r18
  8105c0:	880b883a 	mov	r5,r17
  8105c4:	11800f2e 	bgeu	r2,r6,810604 <_realloc_r+0x330>
  8105c8:	90800017 	ldw	r2,0(r18)
  8105cc:	89400204 	addi	r5,r17,8
  8105d0:	91000204 	addi	r4,r18,8
  8105d4:	88800015 	stw	r2,0(r17)
  8105d8:	90c00117 	ldw	r3,4(r18)
  8105dc:	008006c4 	movi	r2,27
  8105e0:	88c00115 	stw	r3,4(r17)
  8105e4:	1180072e 	bgeu	r2,r6,810604 <_realloc_r+0x330>
  8105e8:	90c00217 	ldw	r3,8(r18)
  8105ec:	89400404 	addi	r5,r17,16
  8105f0:	91000404 	addi	r4,r18,16
  8105f4:	88c00215 	stw	r3,8(r17)
  8105f8:	90800317 	ldw	r2,12(r18)
  8105fc:	88800315 	stw	r2,12(r17)
  810600:	31c09126 	beq	r6,r7,810848 <_realloc_r+0x574>
  810604:	20800017 	ldw	r2,0(r4)
  810608:	28800015 	stw	r2,0(r5)
  81060c:	20c00117 	ldw	r3,4(r4)
  810610:	28c00115 	stw	r3,4(r5)
  810614:	20800217 	ldw	r2,8(r4)
  810618:	28800215 	stw	r2,8(r5)
  81061c:	900b883a 	mov	r5,r18
  810620:	b009883a 	mov	r4,r22
  810624:	0805f140 	call	805f14 <_free_r>
  810628:	b009883a 	mov	r4,r22
  81062c:	08171f00 	call	8171f0 <__malloc_unlock>
  810630:	003f5e06 	br	8103ac <_realloc_r+0xd8>
  810634:	300b883a 	mov	r5,r6
  810638:	dfc00b17 	ldw	ra,44(sp)
  81063c:	df000a17 	ldw	fp,40(sp)
  810640:	ddc00917 	ldw	r23,36(sp)
  810644:	dd800817 	ldw	r22,32(sp)
  810648:	dd400717 	ldw	r21,28(sp)
  81064c:	dd000617 	ldw	r20,24(sp)
  810650:	dcc00517 	ldw	r19,20(sp)
  810654:	dc800417 	ldw	r18,16(sp)
  810658:	dc400317 	ldw	r17,12(sp)
  81065c:	dc000217 	ldw	r16,8(sp)
  810660:	dec00c04 	addi	sp,sp,48
  810664:	0806bf81 	jmpi	806bf8 <_malloc_r>
  810668:	38800117 	ldw	r2,4(r7)
  81066c:	e54b883a 	add	r5,fp,r21
  810670:	31000054 	ori	r4,r6,1
  810674:	1080004c 	andi	r2,r2,1
  810678:	1704b03a 	or	r2,r2,fp
  81067c:	38800115 	stw	r2,4(r7)
  810680:	29000115 	stw	r4,4(r5)
  810684:	2987883a 	add	r3,r5,r6
  810688:	18800117 	ldw	r2,4(r3)
  81068c:	29400204 	addi	r5,r5,8
  810690:	b009883a 	mov	r4,r22
  810694:	10800054 	ori	r2,r2,1
  810698:	18800115 	stw	r2,4(r3)
  81069c:	0805f140 	call	805f14 <_free_r>
  8106a0:	003f3806 	br	810384 <_realloc_r+0xb0>
  8106a4:	000d883a 	mov	r6,zero
  8106a8:	0009883a 	mov	r4,zero
  8106ac:	003f5d06 	br	810424 <_realloc_r+0x150>
  8106b0:	30c00217 	ldw	r3,8(r6)
  8106b4:	30800317 	ldw	r2,12(r6)
  8106b8:	800f883a 	mov	r7,r16
  8106bc:	84000204 	addi	r16,r16,8
  8106c0:	10c00215 	stw	r3,8(r2)
  8106c4:	18800315 	stw	r2,12(r3)
  8106c8:	003f2306 	br	810358 <_realloc_r+0x84>
  8106cc:	8809883a 	mov	r4,r17
  8106d0:	900b883a 	mov	r5,r18
  8106d4:	08073d80 	call	8073d8 <memmove>
  8106d8:	003fd006 	br	81061c <_realloc_r+0x348>
  8106dc:	30800117 	ldw	r2,4(r6)
  8106e0:	e0c00404 	addi	r3,fp,16
  8106e4:	1108703a 	and	r4,r2,r4
  8106e8:	9905883a 	add	r2,r19,r4
  8106ec:	10ff4d16 	blt	r2,r3,810424 <_realloc_r+0x150>
  8106f0:	1705c83a 	sub	r2,r2,fp
  8106f4:	870b883a 	add	r5,r16,fp
  8106f8:	10800054 	ori	r2,r2,1
  8106fc:	28800115 	stw	r2,4(r5)
  810700:	80c00117 	ldw	r3,4(r16)
  810704:	00802174 	movhi	r2,133
  810708:	10bc2304 	addi	r2,r2,-3956
  81070c:	b009883a 	mov	r4,r22
  810710:	18c0004c 	andi	r3,r3,1
  810714:	e0c6b03a 	or	r3,fp,r3
  810718:	11400215 	stw	r5,8(r2)
  81071c:	80c00115 	stw	r3,4(r16)
  810720:	08171f00 	call	8171f0 <__malloc_unlock>
  810724:	84400204 	addi	r17,r16,8
  810728:	003f2006 	br	8103ac <_realloc_r+0xd8>
  81072c:	98a9883a 	add	r20,r19,r2
  810730:	2509883a 	add	r4,r4,r20
  810734:	e0800404 	addi	r2,fp,16
  810738:	d9000115 	stw	r4,4(sp)
  81073c:	20bf7016 	blt	r4,r2,810500 <_realloc_r+0x22c>
  810740:	b8c00317 	ldw	r3,12(r23)
  810744:	b8800217 	ldw	r2,8(r23)
  810748:	99bfff04 	addi	r6,r19,-4
  81074c:	01400904 	movi	r5,36
  810750:	18800215 	stw	r2,8(r3)
  810754:	10c00315 	stw	r3,12(r2)
  810758:	bc400204 	addi	r17,r23,8
  81075c:	29804136 	bltu	r5,r6,810864 <_realloc_r+0x590>
  810760:	008004c4 	movi	r2,19
  810764:	9009883a 	mov	r4,r18
  810768:	880f883a 	mov	r7,r17
  81076c:	11800f2e 	bgeu	r2,r6,8107ac <_realloc_r+0x4d8>
  810770:	90800017 	ldw	r2,0(r18)
  810774:	b9c00404 	addi	r7,r23,16
  810778:	91000204 	addi	r4,r18,8
  81077c:	b8800215 	stw	r2,8(r23)
  810780:	90c00117 	ldw	r3,4(r18)
  810784:	008006c4 	movi	r2,27
  810788:	b8c00315 	stw	r3,12(r23)
  81078c:	1180072e 	bgeu	r2,r6,8107ac <_realloc_r+0x4d8>
  810790:	90c00217 	ldw	r3,8(r18)
  810794:	b9c00604 	addi	r7,r23,24
  810798:	91000404 	addi	r4,r18,16
  81079c:	b8c00415 	stw	r3,16(r23)
  8107a0:	90800317 	ldw	r2,12(r18)
  8107a4:	b8800515 	stw	r2,20(r23)
  8107a8:	31404026 	beq	r6,r5,8108ac <_realloc_r+0x5d8>
  8107ac:	20800017 	ldw	r2,0(r4)
  8107b0:	38800015 	stw	r2,0(r7)
  8107b4:	20c00117 	ldw	r3,4(r4)
  8107b8:	38c00115 	stw	r3,4(r7)
  8107bc:	20800217 	ldw	r2,8(r4)
  8107c0:	38800215 	stw	r2,8(r7)
  8107c4:	d8c00117 	ldw	r3,4(sp)
  8107c8:	bf0b883a 	add	r5,r23,fp
  8107cc:	b009883a 	mov	r4,r22
  8107d0:	1f05c83a 	sub	r2,r3,fp
  8107d4:	10800054 	ori	r2,r2,1
  8107d8:	28800115 	stw	r2,4(r5)
  8107dc:	b8c00117 	ldw	r3,4(r23)
  8107e0:	00802174 	movhi	r2,133
  8107e4:	10bc2304 	addi	r2,r2,-3956
  8107e8:	11400215 	stw	r5,8(r2)
  8107ec:	18c0004c 	andi	r3,r3,1
  8107f0:	e0c6b03a 	or	r3,fp,r3
  8107f4:	b8c00115 	stw	r3,4(r23)
  8107f8:	08171f00 	call	8171f0 <__malloc_unlock>
  8107fc:	003eeb06 	br	8103ac <_realloc_r+0xd8>
  810800:	20800117 	ldw	r2,4(r4)
  810804:	00ffff04 	movi	r3,-4
  810808:	800f883a 	mov	r7,r16
  81080c:	10c4703a 	and	r2,r2,r3
  810810:	98a9883a 	add	r20,r19,r2
  810814:	84000204 	addi	r16,r16,8
  810818:	003ecf06 	br	810358 <_realloc_r+0x84>
  81081c:	900b883a 	mov	r5,r18
  810820:	8009883a 	mov	r4,r16
  810824:	08073d80 	call	8073d8 <memmove>
  810828:	dd000017 	ldw	r20,0(sp)
  81082c:	b80f883a 	mov	r7,r23
  810830:	003ec906 	br	810358 <_realloc_r+0x84>
  810834:	900b883a 	mov	r5,r18
  810838:	8009883a 	mov	r4,r16
  81083c:	08073d80 	call	8073d8 <memmove>
  810840:	b80f883a 	mov	r7,r23
  810844:	003ec406 	br	810358 <_realloc_r+0x84>
  810848:	90c00417 	ldw	r3,16(r18)
  81084c:	89400604 	addi	r5,r17,24
  810850:	91000604 	addi	r4,r18,24
  810854:	88c00415 	stw	r3,16(r17)
  810858:	90800517 	ldw	r2,20(r18)
  81085c:	88800515 	stw	r2,20(r17)
  810860:	003f6806 	br	810604 <_realloc_r+0x330>
  810864:	900b883a 	mov	r5,r18
  810868:	8809883a 	mov	r4,r17
  81086c:	08073d80 	call	8073d8 <memmove>
  810870:	003fd406 	br	8107c4 <_realloc_r+0x4f0>
  810874:	90c00417 	ldw	r3,16(r18)
  810878:	91000604 	addi	r4,r18,24
  81087c:	ba000804 	addi	r8,r23,32
  810880:	b8c00615 	stw	r3,24(r23)
  810884:	90800517 	ldw	r2,20(r18)
  810888:	b8800715 	stw	r2,28(r23)
  81088c:	003f1206 	br	8104d8 <_realloc_r+0x204>
  810890:	90c00417 	ldw	r3,16(r18)
  810894:	91000604 	addi	r4,r18,24
  810898:	ba000804 	addi	r8,r23,32
  81089c:	b8c00615 	stw	r3,24(r23)
  8108a0:	90800517 	ldw	r2,20(r18)
  8108a4:	b8800715 	stw	r2,28(r23)
  8108a8:	003f3206 	br	810574 <_realloc_r+0x2a0>
  8108ac:	90c00417 	ldw	r3,16(r18)
  8108b0:	91000604 	addi	r4,r18,24
  8108b4:	b9c00804 	addi	r7,r23,32
  8108b8:	b8c00615 	stw	r3,24(r23)
  8108bc:	90800517 	ldw	r2,20(r18)
  8108c0:	b8800715 	stw	r2,28(r23)
  8108c4:	003fb906 	br	8107ac <_realloc_r+0x4d8>

008108c8 <__isinfd>:
  8108c8:	200d883a 	mov	r6,r4
  8108cc:	0109c83a 	sub	r4,zero,r4
  8108d0:	2188b03a 	or	r4,r4,r6
  8108d4:	2008d7fa 	srli	r4,r4,31
  8108d8:	00a00034 	movhi	r2,32768
  8108dc:	10bfffc4 	addi	r2,r2,-1
  8108e0:	1144703a 	and	r2,r2,r5
  8108e4:	2088b03a 	or	r4,r4,r2
  8108e8:	009ffc34 	movhi	r2,32752
  8108ec:	1105c83a 	sub	r2,r2,r4
  8108f0:	0087c83a 	sub	r3,zero,r2
  8108f4:	10c4b03a 	or	r2,r2,r3
  8108f8:	1004d7fa 	srli	r2,r2,31
  8108fc:	00c00044 	movi	r3,1
  810900:	1885c83a 	sub	r2,r3,r2
  810904:	f800283a 	ret

00810908 <__isnand>:
  810908:	200d883a 	mov	r6,r4
  81090c:	0109c83a 	sub	r4,zero,r4
  810910:	2188b03a 	or	r4,r4,r6
  810914:	2008d7fa 	srli	r4,r4,31
  810918:	00a00034 	movhi	r2,32768
  81091c:	10bfffc4 	addi	r2,r2,-1
  810920:	1144703a 	and	r2,r2,r5
  810924:	2088b03a 	or	r4,r4,r2
  810928:	009ffc34 	movhi	r2,32752
  81092c:	1105c83a 	sub	r2,r2,r4
  810930:	1004d7fa 	srli	r2,r2,31
  810934:	f800283a 	ret

00810938 <__sccl>:
  810938:	28c00003 	ldbu	r3,0(r5)
  81093c:	00801784 	movi	r2,94
  810940:	2a000044 	addi	r8,r5,1
  810944:	18802526 	beq	r3,r2,8109dc <__sccl+0xa4>
  810948:	180f883a 	mov	r7,r3
  81094c:	0013883a 	mov	r9,zero
  810950:	000d883a 	mov	r6,zero
  810954:	0007883a 	mov	r3,zero
  810958:	01404004 	movi	r5,256
  81095c:	1905883a 	add	r2,r3,r4
  810960:	18c00044 	addi	r3,r3,1
  810964:	11800005 	stb	r6,0(r2)
  810968:	197ffc1e 	bne	r3,r5,81095c <__sccl+0x24>
  81096c:	38000c26 	beq	r7,zero,8109a0 <__sccl+0x68>
  810970:	00800044 	movi	r2,1
  810974:	124dc83a 	sub	r6,r2,r9
  810978:	3905883a 	add	r2,r7,r4
  81097c:	11800005 	stb	r6,0(r2)
  810980:	41400044 	addi	r5,r8,1
  810984:	02400b44 	movi	r9,45
  810988:	02801744 	movi	r10,93
  81098c:	28bfffc3 	ldbu	r2,-1(r5)
  810990:	2811883a 	mov	r8,r5
  810994:	12400726 	beq	r2,r9,8109b4 <__sccl+0x7c>
  810998:	12800226 	beq	r2,r10,8109a4 <__sccl+0x6c>
  81099c:	1000031e 	bne	r2,zero,8109ac <__sccl+0x74>
  8109a0:	423fffc4 	addi	r8,r8,-1
  8109a4:	4005883a 	mov	r2,r8
  8109a8:	f800283a 	ret
  8109ac:	100f883a 	mov	r7,r2
  8109b0:	003ff106 	br	810978 <__sccl+0x40>
  8109b4:	28c00003 	ldbu	r3,0(r5)
  8109b8:	1a800d26 	beq	r3,r10,8109f0 <__sccl+0xb8>
  8109bc:	19c00c16 	blt	r3,r7,8109f0 <__sccl+0xb8>
  8109c0:	21c5883a 	add	r2,r4,r7
  8109c4:	39c00044 	addi	r7,r7,1
  8109c8:	11800045 	stb	r6,1(r2)
  8109cc:	10800044 	addi	r2,r2,1
  8109d0:	38fffc16 	blt	r7,r3,8109c4 <__sccl+0x8c>
  8109d4:	29400084 	addi	r5,r5,2
  8109d8:	003fec06 	br	81098c <__sccl+0x54>
  8109dc:	29c00043 	ldbu	r7,1(r5)
  8109e0:	02400044 	movi	r9,1
  8109e4:	2a000084 	addi	r8,r5,2
  8109e8:	480d883a 	mov	r6,r9
  8109ec:	003fd906 	br	810954 <__sccl+0x1c>
  8109f0:	01c00b44 	movi	r7,45
  8109f4:	003fe006 	br	810978 <__sccl+0x40>

008109f8 <nanf>:
  8109f8:	009ff034 	movhi	r2,32704
  8109fc:	f800283a 	ret

00810a00 <match>:
  810a00:	21800017 	ldw	r6,0(r4)
  810a04:	01c01004 	movi	r7,64
  810a08:	02001684 	movi	r8,90
  810a0c:	28800007 	ldb	r2,0(r5)
  810a10:	29400044 	addi	r5,r5,1
  810a14:	10000826 	beq	r2,zero,810a38 <match+0x38>
  810a18:	31800044 	addi	r6,r6,1
  810a1c:	30c00007 	ldb	r3,0(r6)
  810a20:	38c0020e 	bge	r7,r3,810a2c <match+0x2c>
  810a24:	40c00116 	blt	r8,r3,810a2c <match+0x2c>
  810a28:	18c00804 	addi	r3,r3,32
  810a2c:	18bff726 	beq	r3,r2,810a0c <match+0xc>
  810a30:	0005883a 	mov	r2,zero
  810a34:	f800283a 	ret
  810a38:	30800044 	addi	r2,r6,1
  810a3c:	20800015 	stw	r2,0(r4)
  810a40:	00800044 	movi	r2,1
  810a44:	f800283a 	ret

00810a48 <_strtod_r>:
  810a48:	deffde04 	addi	sp,sp,-136
  810a4c:	df002015 	stw	fp,128(sp)
  810a50:	dd401d15 	stw	r21,116(sp)
  810a54:	dc401915 	stw	r17,100(sp)
  810a58:	dfc02115 	stw	ra,132(sp)
  810a5c:	ddc01f15 	stw	r23,124(sp)
  810a60:	dd801e15 	stw	r22,120(sp)
  810a64:	dd001c15 	stw	r20,112(sp)
  810a68:	dcc01b15 	stw	r19,108(sp)
  810a6c:	dc801a15 	stw	r18,104(sp)
  810a70:	dc001815 	stw	r16,96(sp)
  810a74:	2823883a 	mov	r17,r5
  810a78:	202b883a 	mov	r21,r4
  810a7c:	d9801515 	stw	r6,84(sp)
  810a80:	d8000915 	stw	zero,36(sp)
  810a84:	d8000a15 	stw	zero,40(sp)
  810a88:	d9400415 	stw	r5,16(sp)
  810a8c:	df000904 	addi	fp,sp,36
  810a90:	da000417 	ldw	r8,16(sp)
  810a94:	00800b44 	movi	r2,45
  810a98:	40c00003 	ldbu	r3,0(r8)
  810a9c:	10c03536 	bltu	r2,r3,810b74 <_strtod_r+0x12c>
  810aa0:	18c5883a 	add	r2,r3,r3
  810aa4:	1085883a 	add	r2,r2,r2
  810aa8:	00c02074 	movhi	r3,129
  810aac:	18c2af04 	addi	r3,r3,2748
  810ab0:	10c5883a 	add	r2,r2,r3
  810ab4:	11000017 	ldw	r4,0(r2)
  810ab8:	2000683a 	jmp	r4
  810abc:	00810cb0 	cmpltui	r2,zero,1074
  810ac0:	00810b74 	movhi	r2,1069
  810ac4:	00810b74 	movhi	r2,1069
  810ac8:	00810b74 	movhi	r2,1069
  810acc:	00810b74 	movhi	r2,1069
  810ad0:	00810b74 	movhi	r2,1069
  810ad4:	00810b74 	movhi	r2,1069
  810ad8:	00810b74 	movhi	r2,1069
  810adc:	00810b74 	movhi	r2,1069
  810ae0:	00810fc8 	cmpgei	r2,zero,1087
  810ae4:	00810fc8 	cmpgei	r2,zero,1087
  810ae8:	00810fc8 	cmpgei	r2,zero,1087
  810aec:	00810fc8 	cmpgei	r2,zero,1087
  810af0:	00810fc8 	cmpgei	r2,zero,1087
  810af4:	00810b74 	movhi	r2,1069
  810af8:	00810b74 	movhi	r2,1069
  810afc:	00810b74 	movhi	r2,1069
  810b00:	00810b74 	movhi	r2,1069
  810b04:	00810b74 	movhi	r2,1069
  810b08:	00810b74 	movhi	r2,1069
  810b0c:	00810b74 	movhi	r2,1069
  810b10:	00810b74 	movhi	r2,1069
  810b14:	00810b74 	movhi	r2,1069
  810b18:	00810b74 	movhi	r2,1069
  810b1c:	00810b74 	movhi	r2,1069
  810b20:	00810b74 	movhi	r2,1069
  810b24:	00810b74 	movhi	r2,1069
  810b28:	00810b74 	movhi	r2,1069
  810b2c:	00810b74 	movhi	r2,1069
  810b30:	00810b74 	movhi	r2,1069
  810b34:	00810b74 	movhi	r2,1069
  810b38:	00810b74 	movhi	r2,1069
  810b3c:	00810fc8 	cmpgei	r2,zero,1087
  810b40:	00810b74 	movhi	r2,1069
  810b44:	00810b74 	movhi	r2,1069
  810b48:	00810b74 	movhi	r2,1069
  810b4c:	00810b74 	movhi	r2,1069
  810b50:	00810b74 	movhi	r2,1069
  810b54:	00810b74 	movhi	r2,1069
  810b58:	00810b74 	movhi	r2,1069
  810b5c:	00810b74 	movhi	r2,1069
  810b60:	00810b74 	movhi	r2,1069
  810b64:	00810b74 	movhi	r2,1069
  810b68:	00810fa8 	cmpgeui	r2,zero,1086
  810b6c:	00810b74 	movhi	r2,1069
  810b70:	00810fd4 	movui	r2,1087
  810b74:	d8001115 	stw	zero,68(sp)
  810b78:	40c00007 	ldb	r3,0(r8)
  810b7c:	00800c04 	movi	r2,48
  810b80:	1880d026 	beq	r3,r2,810ec4 <_strtod_r+0x47c>
  810b84:	001f883a 	mov	r15,zero
  810b88:	41000007 	ldb	r4,0(r8)
  810b8c:	00c00bc4 	movi	r3,47
  810b90:	402d883a 	mov	r22,r8
  810b94:	1903470e 	bge	r3,r4,8118b4 <_strtod_r+0xe6c>
  810b98:	00800e44 	movi	r2,57
  810b9c:	11034516 	blt	r2,r4,8118b4 <_strtod_r+0xe6c>
  810ba0:	180f883a 	mov	r7,r3
  810ba4:	1013883a 	mov	r9,r2
  810ba8:	4007883a 	mov	r3,r8
  810bac:	000d883a 	mov	r6,zero
  810bb0:	0029883a 	mov	r20,zero
  810bb4:	0021883a 	mov	r16,zero
  810bb8:	01400204 	movi	r5,8
  810bbc:	028003c4 	movi	r10,15
  810bc0:	29803116 	blt	r5,r6,810c88 <_strtod_r+0x240>
  810bc4:	a08002a4 	muli	r2,r20,10
  810bc8:	1105883a 	add	r2,r2,r4
  810bcc:	153ff404 	addi	r20,r2,-48
  810bd0:	1a000044 	addi	r8,r3,1
  810bd4:	da000415 	stw	r8,16(sp)
  810bd8:	41000007 	ldb	r4,0(r8)
  810bdc:	31800044 	addi	r6,r6,1
  810be0:	4007883a 	mov	r3,r8
  810be4:	3900010e 	bge	r7,r4,810bec <_strtod_r+0x1a4>
  810be8:	493ff50e 	bge	r9,r4,810bc0 <_strtod_r+0x178>
  810bec:	00800b84 	movi	r2,46
  810bf0:	2080c126 	beq	r4,r2,810ef8 <_strtod_r+0x4b0>
  810bf4:	3027883a 	mov	r19,r6
  810bf8:	0025883a 	mov	r18,zero
  810bfc:	0015883a 	mov	r10,zero
  810c00:	000f883a 	mov	r7,zero
  810c04:	00801944 	movi	r2,101
  810c08:	20802426 	beq	r4,r2,810c9c <_strtod_r+0x254>
  810c0c:	00801144 	movi	r2,69
  810c10:	20802226 	beq	r4,r2,810c9c <_strtod_r+0x254>
  810c14:	9816c03a 	cmpne	r11,r19,zero
  810c18:	000b883a 	mov	r5,zero
  810c1c:	5800631e 	bne	r11,zero,810dac <_strtod_r+0x364>
  810c20:	3800c126 	beq	r7,zero,810f28 <_strtod_r+0x4e0>
  810c24:	d8c01517 	ldw	r3,84(sp)
  810c28:	18000226 	beq	r3,zero,810c34 <_strtod_r+0x1ec>
  810c2c:	d8800417 	ldw	r2,16(sp)
  810c30:	18800015 	stw	r2,0(r3)
  810c34:	d9001117 	ldw	r4,68(sp)
  810c38:	2005003a 	cmpeq	r2,r4,zero
  810c3c:	10001f1e 	bne	r2,zero,810cbc <_strtod_r+0x274>
  810c40:	e0800017 	ldw	r2,0(fp)
  810c44:	e0c00117 	ldw	r3,4(fp)
  810c48:	1009883a 	mov	r4,r2
  810c4c:	1960003c 	xorhi	r5,r3,32768
  810c50:	2005883a 	mov	r2,r4
  810c54:	2807883a 	mov	r3,r5
  810c58:	dfc02117 	ldw	ra,132(sp)
  810c5c:	df002017 	ldw	fp,128(sp)
  810c60:	ddc01f17 	ldw	r23,124(sp)
  810c64:	dd801e17 	ldw	r22,120(sp)
  810c68:	dd401d17 	ldw	r21,116(sp)
  810c6c:	dd001c17 	ldw	r20,112(sp)
  810c70:	dcc01b17 	ldw	r19,108(sp)
  810c74:	dc801a17 	ldw	r18,104(sp)
  810c78:	dc401917 	ldw	r17,100(sp)
  810c7c:	dc001817 	ldw	r16,96(sp)
  810c80:	dec02204 	addi	sp,sp,136
  810c84:	f800283a 	ret
  810c88:	51bfd116 	blt	r10,r6,810bd0 <_strtod_r+0x188>
  810c8c:	808002a4 	muli	r2,r16,10
  810c90:	1105883a 	add	r2,r2,r4
  810c94:	143ff404 	addi	r16,r2,-48
  810c98:	003fcd06 	br	810bd0 <_strtod_r+0x188>
  810c9c:	9816c03a 	cmpne	r11,r19,zero
  810ca0:	5800091e 	bne	r11,zero,810cc8 <_strtod_r+0x280>
  810ca4:	3800081e 	bne	r7,zero,810cc8 <_strtod_r+0x280>
  810ca8:	7805003a 	cmpeq	r2,r15,zero
  810cac:	10000626 	beq	r2,zero,810cc8 <_strtod_r+0x280>
  810cb0:	d8001115 	stw	zero,68(sp)
  810cb4:	dc400415 	stw	r17,16(sp)
  810cb8:	003fda06 	br	810c24 <_strtod_r+0x1dc>
  810cbc:	e1000017 	ldw	r4,0(fp)
  810cc0:	e1400117 	ldw	r5,4(fp)
  810cc4:	003fe206 	br	810c50 <_strtod_r+0x208>
  810cc8:	dc400417 	ldw	r17,16(sp)
  810ccc:	00800ac4 	movi	r2,43
  810cd0:	8a000044 	addi	r8,r17,1
  810cd4:	da000415 	stw	r8,16(sp)
  810cd8:	88c00047 	ldb	r3,1(r17)
  810cdc:	4009883a 	mov	r4,r8
  810ce0:	1880bf26 	beq	r3,r2,810fe0 <_strtod_r+0x598>
  810ce4:	00800b44 	movi	r2,45
  810ce8:	18834526 	beq	r3,r2,811a00 <_strtod_r+0xfb8>
  810cec:	1809883a 	mov	r4,r3
  810cf0:	20fff404 	addi	r3,r4,-48
  810cf4:	00800244 	movi	r2,9
  810cf8:	001d883a 	mov	r14,zero
  810cfc:	10c0bf36 	bltu	r2,r3,810ffc <_strtod_r+0x5b4>
  810d00:	00800c04 	movi	r2,48
  810d04:	2080061e 	bne	r4,r2,810d20 <_strtod_r+0x2d8>
  810d08:	da000417 	ldw	r8,16(sp)
  810d0c:	2005883a 	mov	r2,r4
  810d10:	42000044 	addi	r8,r8,1
  810d14:	da000415 	stw	r8,16(sp)
  810d18:	41000007 	ldb	r4,0(r8)
  810d1c:	20bffc26 	beq	r4,r2,810d10 <_strtod_r+0x2c8>
  810d20:	20fff3c4 	addi	r3,r4,-49
  810d24:	00800204 	movi	r2,8
  810d28:	10ffbb36 	bltu	r2,r3,810c18 <_strtod_r+0x1d0>
  810d2c:	da000417 	ldw	r8,16(sp)
  810d30:	227ff404 	addi	r9,r4,-48
  810d34:	03000bc4 	movi	r12,47
  810d38:	4007883a 	mov	r3,r8
  810d3c:	42000044 	addi	r8,r8,1
  810d40:	da000415 	stw	r8,16(sp)
  810d44:	41000007 	ldb	r4,0(r8)
  810d48:	61000d0e 	bge	r12,r4,810d80 <_strtod_r+0x338>
  810d4c:	00800e44 	movi	r2,57
  810d50:	11000b16 	blt	r2,r4,810d80 <_strtod_r+0x338>
  810d54:	601b883a 	mov	r13,r12
  810d58:	1019883a 	mov	r12,r2
  810d5c:	00000106 	br	810d64 <_strtod_r+0x31c>
  810d60:	61000716 	blt	r12,r4,810d80 <_strtod_r+0x338>
  810d64:	488002a4 	muli	r2,r9,10
  810d68:	42000044 	addi	r8,r8,1
  810d6c:	da000415 	stw	r8,16(sp)
  810d70:	2085883a 	add	r2,r4,r2
  810d74:	41000007 	ldb	r4,0(r8)
  810d78:	127ff404 	addi	r9,r2,-48
  810d7c:	693ff816 	blt	r13,r4,810d60 <_strtod_r+0x318>
  810d80:	40c7c83a 	sub	r3,r8,r3
  810d84:	00800204 	movi	r2,8
  810d88:	10c2e416 	blt	r2,r3,81191c <_strtod_r+0xed4>
  810d8c:	009387c4 	movi	r2,19999
  810d90:	480b883a 	mov	r5,r9
  810d94:	1240010e 	bge	r2,r9,810d9c <_strtod_r+0x354>
  810d98:	100b883a 	mov	r5,r2
  810d9c:	7005003a 	cmpeq	r2,r14,zero
  810da0:	103f9e1e 	bne	r2,zero,810c1c <_strtod_r+0x1d4>
  810da4:	014bc83a 	sub	r5,zero,r5
  810da8:	583f9d26 	beq	r11,zero,810c20 <_strtod_r+0x1d8>
  810dac:	2a8bc83a 	sub	r5,r5,r10
  810db0:	d9400f15 	stw	r5,60(sp)
  810db4:	30007a1e 	bne	r6,zero,810fa0 <_strtod_r+0x558>
  810db8:	dcc01215 	stw	r19,72(sp)
  810dbc:	00800404 	movi	r2,16
  810dc0:	9825883a 	mov	r18,r19
  810dc4:	14c0010e 	bge	r2,r19,810dcc <_strtod_r+0x384>
  810dc8:	1025883a 	mov	r18,r2
  810dcc:	a009883a 	mov	r4,r20
  810dd0:	08157a80 	call	8157a8 <__floatunsidf>
  810dd4:	100f883a 	mov	r7,r2
  810dd8:	e0800015 	stw	r2,0(fp)
  810ddc:	00800244 	movi	r2,9
  810de0:	e0c00115 	stw	r3,4(fp)
  810de4:	1480160e 	bge	r2,r18,810e40 <_strtod_r+0x3f8>
  810de8:	900c90fa 	slli	r6,r18,3
  810dec:	01002174 	movhi	r4,133
  810df0:	21320104 	addi	r4,r4,-14332
  810df4:	180b883a 	mov	r5,r3
  810df8:	310d883a 	add	r6,r6,r4
  810dfc:	30ffef17 	ldw	r3,-68(r6)
  810e00:	30bfee17 	ldw	r2,-72(r6)
  810e04:	3809883a 	mov	r4,r7
  810e08:	180f883a 	mov	r7,r3
  810e0c:	100d883a 	mov	r6,r2
  810e10:	0814c180 	call	814c18 <__muldf3>
  810e14:	8009883a 	mov	r4,r16
  810e18:	1823883a 	mov	r17,r3
  810e1c:	1021883a 	mov	r16,r2
  810e20:	08157a80 	call	8157a8 <__floatunsidf>
  810e24:	880b883a 	mov	r5,r17
  810e28:	180f883a 	mov	r7,r3
  810e2c:	8009883a 	mov	r4,r16
  810e30:	100d883a 	mov	r6,r2
  810e34:	0814ba40 	call	814ba4 <__adddf3>
  810e38:	e0c00115 	stw	r3,4(fp)
  810e3c:	e0800015 	stw	r2,0(fp)
  810e40:	010003c4 	movi	r4,15
  810e44:	24c09816 	blt	r4,r19,8110a8 <_strtod_r+0x660>
  810e48:	d9800f17 	ldw	r6,60(sp)
  810e4c:	303f7526 	beq	r6,zero,810c24 <_strtod_r+0x1dc>
  810e50:	0183be0e 	bge	zero,r6,811d4c <_strtod_r+0x1304>
  810e54:	00800584 	movi	r2,22
  810e58:	1182b20e 	bge	r2,r6,811924 <_strtod_r+0xedc>
  810e5c:	d8c00f17 	ldw	r3,60(sp)
  810e60:	24e3c83a 	sub	r17,r4,r19
  810e64:	88800584 	addi	r2,r17,22
  810e68:	10c08f16 	blt	r2,r3,8110a8 <_strtod_r+0x660>
  810e6c:	880890fa 	slli	r4,r17,3
  810e70:	04002174 	movhi	r16,133
  810e74:	84320104 	addi	r16,r16,-14332
  810e78:	e0800017 	ldw	r2,0(fp)
  810e7c:	2409883a 	add	r4,r4,r16
  810e80:	22000017 	ldw	r8,0(r4)
  810e84:	22400117 	ldw	r9,4(r4)
  810e88:	e0c00117 	ldw	r3,4(fp)
  810e8c:	1009883a 	mov	r4,r2
  810e90:	480f883a 	mov	r7,r9
  810e94:	180b883a 	mov	r5,r3
  810e98:	400d883a 	mov	r6,r8
  810e9c:	0814c180 	call	814c18 <__muldf3>
  810ea0:	d9000f17 	ldw	r4,60(sp)
  810ea4:	180b883a 	mov	r5,r3
  810ea8:	2455c83a 	sub	r10,r4,r17
  810eac:	501490fa 	slli	r10,r10,3
  810eb0:	1009883a 	mov	r4,r2
  810eb4:	5415883a 	add	r10,r10,r16
  810eb8:	52000017 	ldw	r8,0(r10)
  810ebc:	52400117 	ldw	r9,4(r10)
  810ec0:	0002a206 	br	81194c <_strtod_r+0xf04>
  810ec4:	40c00047 	ldb	r3,1(r8)
  810ec8:	00801604 	movi	r2,88
  810ecc:	18804e26 	beq	r3,r2,811008 <_strtod_r+0x5c0>
  810ed0:	00801e04 	movi	r2,120
  810ed4:	18804c26 	beq	r3,r2,811008 <_strtod_r+0x5c0>
  810ed8:	42000044 	addi	r8,r8,1
  810edc:	da000415 	stw	r8,16(sp)
  810ee0:	40c00007 	ldb	r3,0(r8)
  810ee4:	00800c04 	movi	r2,48
  810ee8:	18bffb26 	beq	r3,r2,810ed8 <_strtod_r+0x490>
  810eec:	183f4d26 	beq	r3,zero,810c24 <_strtod_r+0x1dc>
  810ef0:	03c00044 	movi	r15,1
  810ef4:	003f2406 	br	810b88 <_strtod_r+0x140>
  810ef8:	42000044 	addi	r8,r8,1
  810efc:	da000415 	stw	r8,16(sp)
  810f00:	19000047 	ldb	r4,1(r3)
  810f04:	3000b726 	beq	r6,zero,8111e4 <_strtod_r+0x79c>
  810f08:	3027883a 	mov	r19,r6
  810f0c:	0015883a 	mov	r10,zero
  810f10:	000f883a 	mov	r7,zero
  810f14:	227ff404 	addi	r9,r4,-48
  810f18:	00800244 	movi	r2,9
  810f1c:	1242592e 	bgeu	r2,r9,811884 <_strtod_r+0xe3c>
  810f20:	04800044 	movi	r18,1
  810f24:	003f3706 	br	810c04 <_strtod_r+0x1bc>
  810f28:	7804c03a 	cmpne	r2,r15,zero
  810f2c:	103f3d1e 	bne	r2,zero,810c24 <_strtod_r+0x1dc>
  810f30:	9004c03a 	cmpne	r2,r18,zero
  810f34:	103f5e1e 	bne	r2,zero,810cb0 <_strtod_r+0x268>
  810f38:	00801384 	movi	r2,78
  810f3c:	2083a226 	beq	r4,r2,811dc8 <_strtod_r+0x1380>
  810f40:	11039d16 	blt	r2,r4,811db8 <_strtod_r+0x1370>
  810f44:	00801244 	movi	r2,73
  810f48:	20bf591e 	bne	r4,r2,810cb0 <_strtod_r+0x268>
  810f4c:	dc000404 	addi	r16,sp,16
  810f50:	8009883a 	mov	r4,r16
  810f54:	01402174 	movhi	r5,133
  810f58:	29724a04 	addi	r5,r5,-14040
  810f5c:	0810a000 	call	810a00 <match>
  810f60:	103f5326 	beq	r2,zero,810cb0 <_strtod_r+0x268>
  810f64:	d8800417 	ldw	r2,16(sp)
  810f68:	8009883a 	mov	r4,r16
  810f6c:	01402174 	movhi	r5,133
  810f70:	29724b04 	addi	r5,r5,-14036
  810f74:	123fffc4 	addi	r8,r2,-1
  810f78:	da000415 	stw	r8,16(sp)
  810f7c:	0810a000 	call	810a00 <match>
  810f80:	1000031e 	bne	r2,zero,810f90 <_strtod_r+0x548>
  810f84:	d8800417 	ldw	r2,16(sp)
  810f88:	12000044 	addi	r8,r2,1
  810f8c:	da000415 	stw	r8,16(sp)
  810f90:	019ffc34 	movhi	r6,32752
  810f94:	e1800115 	stw	r6,4(fp)
  810f98:	e0000015 	stw	zero,0(fp)
  810f9c:	003f2106 	br	810c24 <_strtod_r+0x1dc>
  810fa0:	d9801215 	stw	r6,72(sp)
  810fa4:	003f8506 	br	810dbc <_strtod_r+0x374>
  810fa8:	d8001115 	stw	zero,68(sp)
  810fac:	42000044 	addi	r8,r8,1
  810fb0:	da000415 	stw	r8,16(sp)
  810fb4:	40800007 	ldb	r2,0(r8)
  810fb8:	103eef1e 	bne	r2,zero,810b78 <_strtod_r+0x130>
  810fbc:	d8001115 	stw	zero,68(sp)
  810fc0:	dc400415 	stw	r17,16(sp)
  810fc4:	003f1706 	br	810c24 <_strtod_r+0x1dc>
  810fc8:	42000044 	addi	r8,r8,1
  810fcc:	da000415 	stw	r8,16(sp)
  810fd0:	003eaf06 	br	810a90 <_strtod_r+0x48>
  810fd4:	00800044 	movi	r2,1
  810fd8:	d8801115 	stw	r2,68(sp)
  810fdc:	003ff306 	br	810fac <_strtod_r+0x564>
  810fe0:	001d883a 	mov	r14,zero
  810fe4:	42000044 	addi	r8,r8,1
  810fe8:	da000415 	stw	r8,16(sp)
  810fec:	21000047 	ldb	r4,1(r4)
  810ff0:	00800244 	movi	r2,9
  810ff4:	20fff404 	addi	r3,r4,-48
  810ff8:	10ff412e 	bgeu	r2,r3,810d00 <_strtod_r+0x2b8>
  810ffc:	000b883a 	mov	r5,zero
  811000:	dc400415 	stw	r17,16(sp)
  811004:	003f0506 	br	810c1c <_strtod_r+0x1d4>
  811008:	d8c01117 	ldw	r3,68(sp)
  81100c:	04802174 	movhi	r18,133
  811010:	94bd2d04 	addi	r18,r18,-2892
  811014:	d8800504 	addi	r2,sp,20
  811018:	a809883a 	mov	r4,r21
  81101c:	d9400404 	addi	r5,sp,16
  811020:	900d883a 	mov	r6,r18
  811024:	d9c00604 	addi	r7,sp,24
  811028:	d8800015 	stw	r2,0(sp)
  81102c:	d8c00115 	stw	r3,4(sp)
  811030:	0812e980 	call	812e98 <__gethex>
  811034:	140001cc 	andi	r16,r2,7
  811038:	1027883a 	mov	r19,r2
  81103c:	803ef926 	beq	r16,zero,810c24 <_strtod_r+0x1dc>
  811040:	05000184 	movi	r20,6
  811044:	853f1a26 	beq	r16,r20,810cb0 <_strtod_r+0x268>
  811048:	d9800517 	ldw	r6,20(sp)
  81104c:	30000626 	beq	r6,zero,811068 <_strtod_r+0x620>
  811050:	91400017 	ldw	r5,0(r18)
  811054:	d9000d04 	addi	r4,sp,52
  811058:	080f51c0 	call	80f51c <__copybits>
  81105c:	d9400517 	ldw	r5,20(sp)
  811060:	a809883a 	mov	r4,r21
  811064:	080f07c0 	call	80f07c <_Bfree>
  811068:	d9400617 	ldw	r5,24(sp)
  81106c:	a4024136 	bltu	r20,r16,811974 <_strtod_r+0xf2c>
  811070:	8405883a 	add	r2,r16,r16
  811074:	1085883a 	add	r2,r2,r2
  811078:	00c02074 	movhi	r3,129
  81107c:	18c42304 	addi	r3,r3,4236
  811080:	10c5883a 	add	r2,r2,r3
  811084:	11000017 	ldw	r4,0(r2)
  811088:	2000683a 	jmp	r4
  81108c:	008119b4 	movhi	r2,1126
  811090:	008119c0 	call	8119c <OSCtxSw_SWITCH_PC+0x8115c>
  811094:	00811964 	muli	r2,zero,1125
  811098:	0081198c 	andi	r2,zero,1126
  81109c:	0081199c 	xori	r2,zero,1126
  8110a0:	008119c0 	call	8119c <OSCtxSw_SWITCH_PC+0x8115c>
  8110a4:	008119b4 	movhi	r2,1126
  8110a8:	d8c00f17 	ldw	r3,60(sp)
  8110ac:	9c85c83a 	sub	r2,r19,r18
  8110b0:	18a1883a 	add	r16,r3,r2
  8110b4:	0402d00e 	bge	zero,r16,811bf8 <_strtod_r+0x11b0>
  8110b8:	814003cc 	andi	r5,r16,15
  8110bc:	28000f26 	beq	r5,zero,8110fc <_strtod_r+0x6b4>
  8110c0:	280a90fa 	slli	r5,r5,3
  8110c4:	01002174 	movhi	r4,133
  8110c8:	21320104 	addi	r4,r4,-14332
  8110cc:	e0800017 	ldw	r2,0(fp)
  8110d0:	290b883a 	add	r5,r5,r4
  8110d4:	2a000017 	ldw	r8,0(r5)
  8110d8:	e0c00117 	ldw	r3,4(fp)
  8110dc:	2a400117 	ldw	r9,4(r5)
  8110e0:	1009883a 	mov	r4,r2
  8110e4:	180b883a 	mov	r5,r3
  8110e8:	480f883a 	mov	r7,r9
  8110ec:	400d883a 	mov	r6,r8
  8110f0:	0814c180 	call	814c18 <__muldf3>
  8110f4:	e0c00115 	stw	r3,4(fp)
  8110f8:	e0800015 	stw	r2,0(fp)
  8110fc:	00bffc04 	movi	r2,-16
  811100:	808c703a 	and	r6,r16,r2
  811104:	30005b26 	beq	r6,zero,811274 <_strtod_r+0x82c>
  811108:	00804d04 	movi	r2,308
  81110c:	1181fd16 	blt	r2,r6,811904 <_strtod_r+0xebc>
  811110:	3021d13a 	srai	r16,r6,4
  811114:	00800044 	movi	r2,1
  811118:	1403610e 	bge	r2,r16,811ea0 <_strtod_r+0x1458>
  81111c:	102f883a 	mov	r23,r2
  811120:	0025883a 	mov	r18,zero
  811124:	04402174 	movhi	r17,133
  811128:	8c723304 	addi	r17,r17,-14132
  81112c:	8080004c 	andi	r2,r16,1
  811130:	1005003a 	cmpeq	r2,r2,zero
  811134:	1000091e 	bne	r2,zero,81115c <_strtod_r+0x714>
  811138:	e0800017 	ldw	r2,0(fp)
  81113c:	e0c00117 	ldw	r3,4(fp)
  811140:	89800017 	ldw	r6,0(r17)
  811144:	89c00117 	ldw	r7,4(r17)
  811148:	180b883a 	mov	r5,r3
  81114c:	1009883a 	mov	r4,r2
  811150:	0814c180 	call	814c18 <__muldf3>
  811154:	e0c00115 	stw	r3,4(fp)
  811158:	e0800015 	stw	r2,0(fp)
  81115c:	8021d07a 	srai	r16,r16,1
  811160:	94800044 	addi	r18,r18,1
  811164:	8c400204 	addi	r17,r17,8
  811168:	bc3ff016 	blt	r23,r16,81112c <_strtod_r+0x6e4>
  81116c:	900e90fa 	slli	r7,r18,3
  811170:	01802174 	movhi	r6,133
  811174:	31b23304 	addi	r6,r6,-14132
  811178:	e2000117 	ldw	r8,4(fp)
  81117c:	398f883a 	add	r7,r7,r6
  811180:	38800017 	ldw	r2,0(r7)
  811184:	38c00117 	ldw	r3,4(r7)
  811188:	e1000017 	ldw	r4,0(fp)
  81118c:	01bf2c34 	movhi	r6,64688
  811190:	418d883a 	add	r6,r8,r6
  811194:	300b883a 	mov	r5,r6
  811198:	180f883a 	mov	r7,r3
  81119c:	100d883a 	mov	r6,r2
  8111a0:	0814c180 	call	814c18 <__muldf3>
  8111a4:	1009883a 	mov	r4,r2
  8111a8:	180b883a 	mov	r5,r3
  8111ac:	199ffc2c 	andhi	r6,r3,32752
  8111b0:	009f2834 	movhi	r2,31904
  8111b4:	e1000015 	stw	r4,0(fp)
  8111b8:	e1400115 	stw	r5,4(fp)
  8111bc:	1181d136 	bltu	r2,r6,811904 <_strtod_r+0xebc>
  8111c0:	009f2434 	movhi	r2,31888
  8111c4:	1183202e 	bgeu	r2,r6,811e48 <_strtod_r+0x1400>
  8111c8:	d8001415 	stw	zero,80(sp)
  8111cc:	019ffc34 	movhi	r6,32752
  8111d0:	31bfffc4 	addi	r6,r6,-1
  8111d4:	01ffffc4 	movi	r7,-1
  8111d8:	e1800115 	stw	r6,4(fp)
  8111dc:	e1c00015 	stw	r7,0(fp)
  8111e0:	00002506 	br	811278 <_strtod_r+0x830>
  8111e4:	00800c04 	movi	r2,48
  8111e8:	2083151e 	bne	r4,r2,811e40 <_strtod_r+0x13f8>
  8111ec:	2005883a 	mov	r2,r4
  8111f0:	000f883a 	mov	r7,zero
  8111f4:	42000044 	addi	r8,r8,1
  8111f8:	da000415 	stw	r8,16(sp)
  8111fc:	41000007 	ldb	r4,0(r8)
  811200:	39c00044 	addi	r7,r7,1
  811204:	20bffb26 	beq	r4,r2,8111f4 <_strtod_r+0x7ac>
  811208:	20fff3c4 	addi	r3,r4,-49
  81120c:	00800204 	movi	r2,8
  811210:	10c1b836 	bltu	r2,r3,8118f4 <_strtod_r+0xeac>
  811214:	dd800417 	ldw	r22,16(sp)
  811218:	3815883a 	mov	r10,r7
  81121c:	227ff404 	addi	r9,r4,-48
  811220:	b011883a 	mov	r8,r22
  811224:	0027883a 	mov	r19,zero
  811228:	01c00044 	movi	r7,1
  81122c:	4801fe26 	beq	r9,zero,811a28 <_strtod_r+0xfe0>
  811230:	00800044 	movi	r2,1
  811234:	51d5883a 	add	r10,r10,r7
  811238:	11c31f0e 	bge	r2,r7,811eb8 <_strtod_r+0x1470>
  81123c:	1009883a 	mov	r4,r2
  811240:	9807883a 	mov	r3,r19
  811244:	02c00204 	movi	r11,8
  811248:	03000404 	movi	r12,16
  81124c:	00000306 	br	81125c <_strtod_r+0x814>
  811250:	a50002a4 	muli	r20,r20,10
  811254:	21000044 	addi	r4,r4,1
  811258:	21c1eb26 	beq	r4,r7,811a08 <_strtod_r+0xfc0>
  81125c:	18c00044 	addi	r3,r3,1
  811260:	18bfffc4 	addi	r2,r3,-1
  811264:	58bffa0e 	bge	r11,r2,811250 <_strtod_r+0x808>
  811268:	60fffa16 	blt	r12,r3,811254 <_strtod_r+0x80c>
  81126c:	840002a4 	muli	r16,r16,10
  811270:	003ff806 	br	811254 <_strtod_r+0x80c>
  811274:	d8001415 	stw	zero,80(sp)
  811278:	d9801217 	ldw	r6,72(sp)
  81127c:	a809883a 	mov	r4,r21
  811280:	b00b883a 	mov	r5,r22
  811284:	980f883a 	mov	r7,r19
  811288:	dd000015 	stw	r20,0(sp)
  81128c:	080ff500 	call	80ff50 <__s2b>
  811290:	d9800f17 	ldw	r6,60(sp)
  811294:	11000304 	addi	r4,r2,12
  811298:	d8801015 	stw	r2,64(sp)
  81129c:	300c803a 	cmplt	r6,r6,zero
  8112a0:	d9001715 	stw	r4,92(sp)
  8112a4:	d9801615 	stw	r6,88(sp)
  8112a8:	d8801017 	ldw	r2,64(sp)
  8112ac:	a809883a 	mov	r4,r21
  8112b0:	11400117 	ldw	r5,4(r2)
  8112b4:	080f5fc0 	call	80f5fc <_Balloc>
  8112b8:	d8c01017 	ldw	r3,64(sp)
  8112bc:	d9401717 	ldw	r5,92(sp)
  8112c0:	11000304 	addi	r4,r2,12
  8112c4:	19800417 	ldw	r6,16(r3)
  8112c8:	102f883a 	mov	r23,r2
  8112cc:	318d883a 	add	r6,r6,r6
  8112d0:	318d883a 	add	r6,r6,r6
  8112d4:	31800204 	addi	r6,r6,8
  8112d8:	08073380 	call	807338 <memcpy>
  8112dc:	e2000017 	ldw	r8,0(fp)
  8112e0:	e2400117 	ldw	r9,4(fp)
  8112e4:	d9800304 	addi	r6,sp,12
  8112e8:	400b883a 	mov	r5,r8
  8112ec:	a809883a 	mov	r4,r21
  8112f0:	d9c00204 	addi	r7,sp,8
  8112f4:	d9800015 	stw	r6,0(sp)
  8112f8:	480d883a 	mov	r6,r9
  8112fc:	080f6b80 	call	80f6b8 <__d2b>
  811300:	a809883a 	mov	r4,r21
  811304:	01400044 	movi	r5,1
  811308:	d8800515 	stw	r2,20(sp)
  81130c:	080fcf40 	call	80fcf4 <__i2b>
  811310:	102d883a 	mov	r22,r2
  811314:	d8801617 	ldw	r2,88(sp)
  811318:	1001051e 	bne	r2,zero,811730 <_strtod_r+0xce8>
  81131c:	dd000f17 	ldw	r20,60(sp)
  811320:	000f883a 	mov	r7,zero
  811324:	0013883a 	mov	r9,zero
  811328:	a011883a 	mov	r8,r20
  81132c:	d8800217 	ldw	r2,8(sp)
  811330:	1000fd16 	blt	r2,zero,811728 <_strtod_r+0xce0>
  811334:	388f883a 	add	r7,r7,r2
  811338:	d9801417 	ldw	r6,80(sp)
  81133c:	d9400317 	ldw	r5,12(sp)
  811340:	00ff0084 	movi	r3,-1022
  811344:	1189c83a 	sub	r4,r2,r6
  811348:	2145883a 	add	r2,r4,r5
  81134c:	10bfffc4 	addi	r2,r2,-1
  811350:	10c09f0e 	bge	r2,r3,8115d0 <_strtod_r+0xb88>
  811354:	21810cc4 	addi	r6,r4,1075
  811358:	d8c01417 	ldw	r3,80(sp)
  81135c:	4185883a 	add	r2,r8,r6
  811360:	39a1883a 	add	r16,r7,r6
  811364:	18a5883a 	add	r18,r3,r2
  811368:	3807883a 	mov	r3,r7
  81136c:	81c0010e 	bge	r16,r7,811374 <_strtod_r+0x92c>
  811370:	8007883a 	mov	r3,r16
  811374:	9005883a 	mov	r2,r18
  811378:	1c80010e 	bge	r3,r18,811380 <_strtod_r+0x938>
  81137c:	1805883a 	mov	r2,r3
  811380:	0080e70e 	bge	zero,r2,811720 <_strtod_r+0xcd8>
  811384:	38a7c83a 	sub	r19,r7,r2
  811388:	80a1c83a 	sub	r16,r16,r2
  81138c:	90a5c83a 	sub	r18,r18,r2
  811390:	02400e0e 	bge	zero,r9,8113cc <_strtod_r+0x984>
  811394:	480d883a 	mov	r6,r9
  811398:	b00b883a 	mov	r5,r22
  81139c:	a809883a 	mov	r4,r21
  8113a0:	080fe300 	call	80fe30 <__pow5mult>
  8113a4:	d9800517 	ldw	r6,20(sp)
  8113a8:	a809883a 	mov	r4,r21
  8113ac:	100b883a 	mov	r5,r2
  8113b0:	102d883a 	mov	r22,r2
  8113b4:	080fb0c0 	call	80fb0c <__multiply>
  8113b8:	d9400517 	ldw	r5,20(sp)
  8113bc:	1023883a 	mov	r17,r2
  8113c0:	a809883a 	mov	r4,r21
  8113c4:	080f07c0 	call	80f07c <_Bfree>
  8113c8:	dc400515 	stw	r17,20(sp)
  8113cc:	0400050e 	bge	zero,r16,8113e4 <_strtod_r+0x99c>
  8113d0:	d9400517 	ldw	r5,20(sp)
  8113d4:	800d883a 	mov	r6,r16
  8113d8:	a809883a 	mov	r4,r21
  8113dc:	080f9c00 	call	80f9c0 <__lshift>
  8113e0:	d8800515 	stw	r2,20(sp)
  8113e4:	a000741e 	bne	r20,zero,8115b8 <_strtod_r+0xb70>
  8113e8:	0480050e 	bge	zero,r18,811400 <_strtod_r+0x9b8>
  8113ec:	b80b883a 	mov	r5,r23
  8113f0:	900d883a 	mov	r6,r18
  8113f4:	a809883a 	mov	r4,r21
  8113f8:	080f9c00 	call	80f9c0 <__lshift>
  8113fc:	102f883a 	mov	r23,r2
  811400:	04c0050e 	bge	zero,r19,811418 <_strtod_r+0x9d0>
  811404:	b00b883a 	mov	r5,r22
  811408:	980d883a 	mov	r6,r19
  81140c:	a809883a 	mov	r4,r21
  811410:	080f9c00 	call	80f9c0 <__lshift>
  811414:	102d883a 	mov	r22,r2
  811418:	d9400517 	ldw	r5,20(sp)
  81141c:	a809883a 	mov	r4,r21
  811420:	b80d883a 	mov	r6,r23
  811424:	080f8340 	call	80f834 <__mdiff>
  811428:	11000317 	ldw	r4,12(r2)
  81142c:	b00b883a 	mov	r5,r22
  811430:	10000315 	stw	zero,12(r2)
  811434:	d9001315 	stw	r4,76(sp)
  811438:	1009883a 	mov	r4,r2
  81143c:	1029883a 	mov	r20,r2
  811440:	080f1d80 	call	80f1d8 <__mcmp>
  811444:	10017c16 	blt	r2,zero,811a38 <_strtod_r+0xff0>
  811448:	1001af26 	beq	r2,zero,811b08 <_strtod_r+0x10c0>
  81144c:	a009883a 	mov	r4,r20
  811450:	b00b883a 	mov	r5,r22
  811454:	080f3d80 	call	80f3d8 <__ratio>
  811458:	0011883a 	mov	r8,zero
  81145c:	02500034 	movhi	r9,16384
  811460:	480f883a 	mov	r7,r9
  811464:	1009883a 	mov	r4,r2
  811468:	180b883a 	mov	r5,r3
  81146c:	400d883a 	mov	r6,r8
  811470:	1021883a 	mov	r16,r2
  811474:	1823883a 	mov	r17,r3
  811478:	08154dc0 	call	8154dc <__ledf2>
  81147c:	00805716 	blt	zero,r2,8115dc <_strtod_r+0xb94>
  811480:	d9801317 	ldw	r6,76(sp)
  811484:	3025003a 	cmpeq	r18,r6,zero
  811488:	90008b1e 	bne	r18,zero,8116b8 <_strtod_r+0xc70>
  81148c:	008ffc34 	movhi	r2,16368
  811490:	0021883a 	mov	r16,zero
  811494:	1023883a 	mov	r17,r2
  811498:	d8000715 	stw	zero,28(sp)
  81149c:	d8800815 	stw	r2,32(sp)
  8114a0:	e1c00117 	ldw	r7,4(fp)
  8114a4:	009ff834 	movhi	r2,32736
  8114a8:	3cdffc2c 	andhi	r19,r7,32752
  8114ac:	98805e26 	beq	r19,r2,811628 <_strtod_r+0xbe0>
  8114b0:	d8801417 	ldw	r2,80(sp)
  8114b4:	10001b26 	beq	r2,zero,811524 <_strtod_r+0xadc>
  8114b8:	0081a834 	movhi	r2,1696
  8114bc:	14c01936 	bltu	r2,r19,811524 <_strtod_r+0xadc>
  8114c0:	00bff034 	movhi	r2,65472
  8114c4:	00d07834 	movhi	r3,16864
  8114c8:	18ffffc4 	addi	r3,r3,-1
  8114cc:	180f883a 	mov	r7,r3
  8114d0:	8009883a 	mov	r4,r16
  8114d4:	880b883a 	mov	r5,r17
  8114d8:	100d883a 	mov	r6,r2
  8114dc:	08154dc0 	call	8154dc <__ledf2>
  8114e0:	00800b16 	blt	zero,r2,811510 <_strtod_r+0xac8>
  8114e4:	880b883a 	mov	r5,r17
  8114e8:	8009883a 	mov	r4,r16
  8114ec:	081397c0 	call	81397c <__fixunsdfsi>
  8114f0:	1000df1e 	bne	r2,zero,811870 <_strtod_r+0xe28>
  8114f4:	0021883a 	mov	r16,zero
  8114f8:	044ffc34 	movhi	r17,16368
  8114fc:	9000d91e 	bne	r18,zero,811864 <_strtod_r+0xe1c>
  811500:	8005883a 	mov	r2,r16
  811504:	8807883a 	mov	r3,r17
  811508:	d8c00815 	stw	r3,32(sp)
  81150c:	d8800715 	stw	r2,28(sp)
  811510:	d8800817 	ldw	r2,32(sp)
  811514:	00c1ac34 	movhi	r3,1712
  811518:	14c5c83a 	sub	r2,r2,r19
  81151c:	10c5883a 	add	r2,r2,r3
  811520:	d8800815 	stw	r2,32(sp)
  811524:	e0800017 	ldw	r2,0(fp)
  811528:	e0c00117 	ldw	r3,4(fp)
  81152c:	1009883a 	mov	r4,r2
  811530:	180b883a 	mov	r5,r3
  811534:	080f2380 	call	80f238 <__ulp>
  811538:	d9800717 	ldw	r6,28(sp)
  81153c:	d9c00817 	ldw	r7,32(sp)
  811540:	180b883a 	mov	r5,r3
  811544:	1009883a 	mov	r4,r2
  811548:	0814c180 	call	814c18 <__muldf3>
  81154c:	e2000017 	ldw	r8,0(fp)
  811550:	e2400117 	ldw	r9,4(fp)
  811554:	180b883a 	mov	r5,r3
  811558:	1009883a 	mov	r4,r2
  81155c:	480f883a 	mov	r7,r9
  811560:	400d883a 	mov	r6,r8
  811564:	0814ba40 	call	814ba4 <__adddf3>
  811568:	e0c00115 	stw	r3,4(fp)
  81156c:	e0800015 	stw	r2,0(fp)
  811570:	d8c01417 	ldw	r3,80(sp)
  811574:	e4800117 	ldw	r18,4(fp)
  811578:	1800021e 	bne	r3,zero,811584 <_strtod_r+0xb3c>
  81157c:	909ffc2c 	andhi	r2,r18,32752
  811580:	98807b26 	beq	r19,r2,811770 <_strtod_r+0xd28>
  811584:	d9400517 	ldw	r5,20(sp)
  811588:	a809883a 	mov	r4,r21
  81158c:	080f07c0 	call	80f07c <_Bfree>
  811590:	a809883a 	mov	r4,r21
  811594:	b80b883a 	mov	r5,r23
  811598:	080f07c0 	call	80f07c <_Bfree>
  81159c:	a809883a 	mov	r4,r21
  8115a0:	b00b883a 	mov	r5,r22
  8115a4:	080f07c0 	call	80f07c <_Bfree>
  8115a8:	a809883a 	mov	r4,r21
  8115ac:	a00b883a 	mov	r5,r20
  8115b0:	080f07c0 	call	80f07c <_Bfree>
  8115b4:	003f3c06 	br	8112a8 <_strtod_r+0x860>
  8115b8:	b80b883a 	mov	r5,r23
  8115bc:	a00d883a 	mov	r6,r20
  8115c0:	a809883a 	mov	r4,r21
  8115c4:	080fe300 	call	80fe30 <__pow5mult>
  8115c8:	102f883a 	mov	r23,r2
  8115cc:	003f8606 	br	8113e8 <_strtod_r+0x9a0>
  8115d0:	00800d84 	movi	r2,54
  8115d4:	114dc83a 	sub	r6,r2,r5
  8115d8:	003f5f06 	br	811358 <_strtod_r+0x910>
  8115dc:	0005883a 	mov	r2,zero
  8115e0:	00cff834 	movhi	r3,16352
  8115e4:	880b883a 	mov	r5,r17
  8115e8:	8009883a 	mov	r4,r16
  8115ec:	100d883a 	mov	r6,r2
  8115f0:	180f883a 	mov	r7,r3
  8115f4:	0814c180 	call	814c18 <__muldf3>
  8115f8:	d9801317 	ldw	r6,76(sp)
  8115fc:	1021883a 	mov	r16,r2
  811600:	1823883a 	mov	r17,r3
  811604:	3025003a 	cmpeq	r18,r6,zero
  811608:	90000126 	beq	r18,zero,811610 <_strtod_r+0xbc8>
  81160c:	18e0003c 	xorhi	r3,r3,32768
  811610:	d8800715 	stw	r2,28(sp)
  811614:	d8c00815 	stw	r3,32(sp)
  811618:	e1c00117 	ldw	r7,4(fp)
  81161c:	009ff834 	movhi	r2,32736
  811620:	3cdffc2c 	andhi	r19,r7,32752
  811624:	98bfa21e 	bne	r19,r2,8114b0 <_strtod_r+0xa68>
  811628:	e1000017 	ldw	r4,0(fp)
  81162c:	01bf2c34 	movhi	r6,64688
  811630:	398d883a 	add	r6,r7,r6
  811634:	d9000b15 	stw	r4,44(sp)
  811638:	d9c00c15 	stw	r7,48(sp)
  81163c:	300b883a 	mov	r5,r6
  811640:	e1800115 	stw	r6,4(fp)
  811644:	080f2380 	call	80f238 <__ulp>
  811648:	d9800717 	ldw	r6,28(sp)
  81164c:	d9c00817 	ldw	r7,32(sp)
  811650:	180b883a 	mov	r5,r3
  811654:	1009883a 	mov	r4,r2
  811658:	0814c180 	call	814c18 <__muldf3>
  81165c:	e2000017 	ldw	r8,0(fp)
  811660:	e2400117 	ldw	r9,4(fp)
  811664:	180b883a 	mov	r5,r3
  811668:	1009883a 	mov	r4,r2
  81166c:	480f883a 	mov	r7,r9
  811670:	400d883a 	mov	r6,r8
  811674:	0814ba40 	call	814ba4 <__adddf3>
  811678:	1009883a 	mov	r4,r2
  81167c:	180b883a 	mov	r5,r3
  811680:	009f2834 	movhi	r2,31904
  811684:	10bfffc4 	addi	r2,r2,-1
  811688:	18dffc2c 	andhi	r3,r3,32752
  81168c:	e1000015 	stw	r4,0(fp)
  811690:	e1400115 	stw	r5,4(fp)
  811694:	10c06f2e 	bgeu	r2,r3,811854 <_strtod_r+0xe0c>
  811698:	d8800c17 	ldw	r2,48(sp)
  81169c:	011ffc34 	movhi	r4,32752
  8116a0:	213fffc4 	addi	r4,r4,-1
  8116a4:	11007a26 	beq	r2,r4,811890 <_strtod_r+0xe48>
  8116a8:	01ffffc4 	movi	r7,-1
  8116ac:	e1000115 	stw	r4,4(fp)
  8116b0:	e1c00015 	stw	r7,0(fp)
  8116b4:	003fb306 	br	811584 <_strtod_r+0xb3c>
  8116b8:	e0c00017 	ldw	r3,0(fp)
  8116bc:	1800221e 	bne	r3,zero,811748 <_strtod_r+0xd00>
  8116c0:	e0800117 	ldw	r2,4(fp)
  8116c4:	00c00434 	movhi	r3,16
  8116c8:	18ffffc4 	addi	r3,r3,-1
  8116cc:	10c4703a 	and	r2,r2,r3
  8116d0:	1000211e 	bne	r2,zero,811758 <_strtod_r+0xd10>
  8116d4:	0005883a 	mov	r2,zero
  8116d8:	00cffc34 	movhi	r3,16368
  8116dc:	180f883a 	mov	r7,r3
  8116e0:	8009883a 	mov	r4,r16
  8116e4:	880b883a 	mov	r5,r17
  8116e8:	100d883a 	mov	r6,r2
  8116ec:	08154540 	call	815454 <__ltdf2>
  8116f0:	10013c16 	blt	r2,zero,811be4 <_strtod_r+0x119c>
  8116f4:	0005883a 	mov	r2,zero
  8116f8:	00cff834 	movhi	r3,16352
  8116fc:	880b883a 	mov	r5,r17
  811700:	8009883a 	mov	r4,r16
  811704:	180f883a 	mov	r7,r3
  811708:	100d883a 	mov	r6,r2
  81170c:	0814c180 	call	814c18 <__muldf3>
  811710:	1823883a 	mov	r17,r3
  811714:	1021883a 	mov	r16,r2
  811718:	18e0003c 	xorhi	r3,r3,32768
  81171c:	003fbc06 	br	811610 <_strtod_r+0xbc8>
  811720:	3827883a 	mov	r19,r7
  811724:	003f1a06 	br	811390 <_strtod_r+0x948>
  811728:	4091c83a 	sub	r8,r8,r2
  81172c:	003f0206 	br	811338 <_strtod_r+0x8f0>
  811730:	d8c00f17 	ldw	r3,60(sp)
  811734:	0011883a 	mov	r8,zero
  811738:	0029883a 	mov	r20,zero
  81173c:	00d3c83a 	sub	r9,zero,r3
  811740:	480f883a 	mov	r7,r9
  811744:	003ef906 	br	81132c <_strtod_r+0x8e4>
  811748:	00800044 	movi	r2,1
  81174c:	1880021e 	bne	r3,r2,811758 <_strtod_r+0xd10>
  811750:	e0800117 	ldw	r2,4(fp)
  811754:	1000a526 	beq	r2,zero,8119ec <_strtod_r+0xfa4>
  811758:	00affc34 	movhi	r2,49136
  81175c:	0021883a 	mov	r16,zero
  811760:	044ffc34 	movhi	r17,16368
  811764:	d8800815 	stw	r2,32(sp)
  811768:	d8000715 	stw	zero,28(sp)
  81176c:	003f4c06 	br	8114a0 <_strtod_r+0xa58>
  811770:	880b883a 	mov	r5,r17
  811774:	8009883a 	mov	r4,r16
  811778:	081565c0 	call	81565c <__fixdfsi>
  81177c:	1009883a 	mov	r4,r2
  811780:	08155640 	call	815564 <__floatsidf>
  811784:	880b883a 	mov	r5,r17
  811788:	8009883a 	mov	r4,r16
  81178c:	100d883a 	mov	r6,r2
  811790:	180f883a 	mov	r7,r3
  811794:	0814b240 	call	814b24 <__subdf3>
  811798:	d9001317 	ldw	r4,76(sp)
  81179c:	100b883a 	mov	r5,r2
  8117a0:	180d883a 	mov	r6,r3
  8117a4:	1021883a 	mov	r16,r2
  8117a8:	1823883a 	mov	r17,r3
  8117ac:	2000061e 	bne	r4,zero,8117c8 <_strtod_r+0xd80>
  8117b0:	e0800017 	ldw	r2,0(fp)
  8117b4:	1000041e 	bne	r2,zero,8117c8 <_strtod_r+0xd80>
  8117b8:	00c00434 	movhi	r3,16
  8117bc:	18ffffc4 	addi	r3,r3,-1
  8117c0:	90c4703a 	and	r2,r18,r3
  8117c4:	10004026 	beq	r2,zero,8118c8 <_strtod_r+0xe80>
  8117c8:	00a52834 	movhi	r2,38048
  8117cc:	108d6544 	addi	r2,r2,13717
  8117d0:	00cff834 	movhi	r3,16352
  8117d4:	18ffffc4 	addi	r3,r3,-1
  8117d8:	180f883a 	mov	r7,r3
  8117dc:	8009883a 	mov	r4,r16
  8117e0:	880b883a 	mov	r5,r17
  8117e4:	100d883a 	mov	r6,r2
  8117e8:	08154540 	call	815454 <__ltdf2>
  8117ec:	10000916 	blt	r2,zero,811814 <_strtod_r+0xdcc>
  8117f0:	008d6c34 	movhi	r2,13744
  8117f4:	10b94d44 	addi	r2,r2,-6859
  8117f8:	00cff834 	movhi	r3,16352
  8117fc:	880b883a 	mov	r5,r17
  811800:	180f883a 	mov	r7,r3
  811804:	8009883a 	mov	r4,r16
  811808:	100d883a 	mov	r6,r2
  81180c:	08153440 	call	815344 <__gtdf2>
  811810:	00bf5c0e 	bge	zero,r2,811584 <_strtod_r+0xb3c>
  811814:	d9400517 	ldw	r5,20(sp)
  811818:	a809883a 	mov	r4,r21
  81181c:	080f07c0 	call	80f07c <_Bfree>
  811820:	a809883a 	mov	r4,r21
  811824:	b80b883a 	mov	r5,r23
  811828:	080f07c0 	call	80f07c <_Bfree>
  81182c:	a809883a 	mov	r4,r21
  811830:	b00b883a 	mov	r5,r22
  811834:	080f07c0 	call	80f07c <_Bfree>
  811838:	d9401017 	ldw	r5,64(sp)
  81183c:	a809883a 	mov	r4,r21
  811840:	080f07c0 	call	80f07c <_Bfree>
  811844:	a809883a 	mov	r4,r21
  811848:	a00b883a 	mov	r5,r20
  81184c:	080f07c0 	call	80f07c <_Bfree>
  811850:	003cf406 	br	810c24 <_strtod_r+0x1dc>
  811854:	0080d434 	movhi	r2,848
  811858:	288d883a 	add	r6,r5,r2
  81185c:	e1800115 	stw	r6,4(fp)
  811860:	003f4306 	br	811570 <_strtod_r+0xb28>
  811864:	8005883a 	mov	r2,r16
  811868:	88e0003c 	xorhi	r3,r17,32768
  81186c:	003f2606 	br	811508 <_strtod_r+0xac0>
  811870:	1009883a 	mov	r4,r2
  811874:	08157a80 	call	8157a8 <__floatunsidf>
  811878:	1021883a 	mov	r16,r2
  81187c:	1823883a 	mov	r17,r3
  811880:	003f1e06 	br	8114fc <_strtod_r+0xab4>
  811884:	da000417 	ldw	r8,16(sp)
  811888:	39c00044 	addi	r7,r7,1
  81188c:	003e6706 	br	81122c <_strtod_r+0x7e4>
  811890:	d8c00b17 	ldw	r3,44(sp)
  811894:	00bfffc4 	movi	r2,-1
  811898:	18bf831e 	bne	r3,r2,8116a8 <_strtod_r+0xc60>
  81189c:	00c00884 	movi	r3,34
  8118a0:	a8c00015 	stw	r3,0(r21)
  8118a4:	009ffc34 	movhi	r2,32752
  8118a8:	e0800115 	stw	r2,4(fp)
  8118ac:	e0000015 	stw	zero,0(fp)
  8118b0:	003fd806 	br	811814 <_strtod_r+0xdcc>
  8118b4:	4007883a 	mov	r3,r8
  8118b8:	000d883a 	mov	r6,zero
  8118bc:	0029883a 	mov	r20,zero
  8118c0:	0021883a 	mov	r16,zero
  8118c4:	003cc906 	br	810bec <_strtod_r+0x1a4>
  8118c8:	00a52834 	movhi	r2,38048
  8118cc:	108d6544 	addi	r2,r2,13717
  8118d0:	00cff434 	movhi	r3,16336
  8118d4:	18ffffc4 	addi	r3,r3,-1
  8118d8:	2809883a 	mov	r4,r5
  8118dc:	180f883a 	mov	r7,r3
  8118e0:	300b883a 	mov	r5,r6
  8118e4:	100d883a 	mov	r6,r2
  8118e8:	08154540 	call	815454 <__ltdf2>
  8118ec:	103f250e 	bge	r2,zero,811584 <_strtod_r+0xb3c>
  8118f0:	003fc806 	br	811814 <_strtod_r+0xdcc>
  8118f4:	0027883a 	mov	r19,zero
  8118f8:	04800044 	movi	r18,1
  8118fc:	0015883a 	mov	r10,zero
  811900:	003cc006 	br	810c04 <_strtod_r+0x1bc>
  811904:	00800884 	movi	r2,34
  811908:	a8800015 	stw	r2,0(r21)
  81190c:	019ffc34 	movhi	r6,32752
  811910:	e1800115 	stw	r6,4(fp)
  811914:	e0000015 	stw	zero,0(fp)
  811918:	003cc206 	br	810c24 <_strtod_r+0x1dc>
  81191c:	015387c4 	movi	r5,19999
  811920:	003d1e06 	br	810d9c <_strtod_r+0x354>
  811924:	300a90fa 	slli	r5,r6,3
  811928:	e0800017 	ldw	r2,0(fp)
  81192c:	e0c00117 	ldw	r3,4(fp)
  811930:	01002174 	movhi	r4,133
  811934:	21320104 	addi	r4,r4,-14332
  811938:	290b883a 	add	r5,r5,r4
  81193c:	2a000017 	ldw	r8,0(r5)
  811940:	2a400117 	ldw	r9,4(r5)
  811944:	1009883a 	mov	r4,r2
  811948:	180b883a 	mov	r5,r3
  81194c:	480f883a 	mov	r7,r9
  811950:	400d883a 	mov	r6,r8
  811954:	0814c180 	call	814c18 <__muldf3>
  811958:	e0c00115 	stw	r3,4(fp)
  81195c:	e0800015 	stw	r2,0(fp)
  811960:	003cb006 	br	810c24 <_strtod_r+0x1dc>
  811964:	d8800d17 	ldw	r2,52(sp)
  811968:	e0800015 	stw	r2,0(fp)
  81196c:	d8c00e17 	ldw	r3,56(sp)
  811970:	e0c00115 	stw	r3,4(fp)
  811974:	9880020c 	andi	r2,r19,8
  811978:	103caa26 	beq	r2,zero,810c24 <_strtod_r+0x1dc>
  81197c:	e0800117 	ldw	r2,4(fp)
  811980:	10a00034 	orhi	r2,r2,32768
  811984:	e0800115 	stw	r2,4(fp)
  811988:	003ca606 	br	810c24 <_strtod_r+0x1dc>
  81198c:	009ffc34 	movhi	r2,32752
  811990:	e0800115 	stw	r2,4(fp)
  811994:	e0000015 	stw	zero,0(fp)
  811998:	003ff606 	br	811974 <_strtod_r+0xf2c>
  81199c:	00a00034 	movhi	r2,32768
  8119a0:	10bfffc4 	addi	r2,r2,-1
  8119a4:	00ffffc4 	movi	r3,-1
  8119a8:	e0800115 	stw	r2,4(fp)
  8119ac:	e0c00015 	stw	r3,0(fp)
  8119b0:	003ff006 	br	811974 <_strtod_r+0xf2c>
  8119b4:	e0000115 	stw	zero,4(fp)
  8119b8:	e0000015 	stw	zero,0(fp)
  8119bc:	003fed06 	br	811974 <_strtod_r+0xf2c>
  8119c0:	d8800e17 	ldw	r2,56(sp)
  8119c4:	29010cc4 	addi	r4,r5,1075
  8119c8:	00fffc34 	movhi	r3,65520
  8119cc:	18ffffc4 	addi	r3,r3,-1
  8119d0:	2008953a 	slli	r4,r4,20
  8119d4:	10c4703a 	and	r2,r2,r3
  8119d8:	d8c00d17 	ldw	r3,52(sp)
  8119dc:	1104b03a 	or	r2,r2,r4
  8119e0:	e0800115 	stw	r2,4(fp)
  8119e4:	e0c00015 	stw	r3,0(fp)
  8119e8:	003fe206 	br	811974 <_strtod_r+0xf2c>
  8119ec:	00800884 	movi	r2,34
  8119f0:	a8800015 	stw	r2,0(r21)
  8119f4:	e0000015 	stw	zero,0(fp)
  8119f8:	e0000115 	stw	zero,4(fp)
  8119fc:	003f8506 	br	811814 <_strtod_r+0xdcc>
  811a00:	03800044 	movi	r14,1
  811a04:	003d7706 	br	810fe4 <_strtod_r+0x59c>
  811a08:	99c5883a 	add	r2,r19,r7
  811a0c:	11ffffc4 	addi	r7,r2,-1
  811a10:	00800204 	movi	r2,8
  811a14:	3cc00044 	addi	r19,r7,1
  811a18:	11c0df16 	blt	r2,r7,811d98 <_strtod_r+0x1350>
  811a1c:	a08002a4 	muli	r2,r20,10
  811a20:	000f883a 	mov	r7,zero
  811a24:	1269883a 	add	r20,r2,r9
  811a28:	42000044 	addi	r8,r8,1
  811a2c:	da000415 	stw	r8,16(sp)
  811a30:	41000007 	ldb	r4,0(r8)
  811a34:	003d3706 	br	810f14 <_strtod_r+0x4cc>
  811a38:	d9801317 	ldw	r6,76(sp)
  811a3c:	3000511e 	bne	r6,zero,811b84 <_strtod_r+0x113c>
  811a40:	e0800017 	ldw	r2,0(fp)
  811a44:	1000d81e 	bne	r2,zero,811da8 <_strtod_r+0x1360>
  811a48:	e0c00117 	ldw	r3,4(fp)
  811a4c:	01000434 	movhi	r4,16
  811a50:	213fffc4 	addi	r4,r4,-1
  811a54:	1904703a 	and	r2,r3,r4
  811a58:	1000b01e 	bne	r2,zero,811d1c <_strtod_r+0x12d4>
  811a5c:	18dffc2c 	andhi	r3,r3,32752
  811a60:	0081ac34 	movhi	r2,1712
  811a64:	10c1102e 	bgeu	r2,r3,811ea8 <_strtod_r+0x1460>
  811a68:	a0800517 	ldw	r2,20(r20)
  811a6c:	1000031e 	bne	r2,zero,811a7c <_strtod_r+0x1034>
  811a70:	a0c00417 	ldw	r3,16(r20)
  811a74:	00800044 	movi	r2,1
  811a78:	10c0420e 	bge	r2,r3,811b84 <_strtod_r+0x113c>
  811a7c:	a00b883a 	mov	r5,r20
  811a80:	a809883a 	mov	r4,r21
  811a84:	01800044 	movi	r6,1
  811a88:	080f9c00 	call	80f9c0 <__lshift>
  811a8c:	1009883a 	mov	r4,r2
  811a90:	b00b883a 	mov	r5,r22
  811a94:	1029883a 	mov	r20,r2
  811a98:	080f1d80 	call	80f1d8 <__mcmp>
  811a9c:	0080c20e 	bge	zero,r2,811da8 <_strtod_r+0x1360>
  811aa0:	e1800117 	ldw	r6,4(fp)
  811aa4:	d9001417 	ldw	r4,80(sp)
  811aa8:	2013003a 	cmpeq	r9,r4,zero
  811aac:	4800ef1e 	bne	r9,zero,811e6c <_strtod_r+0x1424>
  811ab0:	30dffc2c 	andhi	r3,r6,32752
  811ab4:	0081ac34 	movhi	r2,1712
  811ab8:	10c0ec36 	bltu	r2,r3,811e6c <_strtod_r+0x1424>
  811abc:	0080dc34 	movhi	r2,880
  811ac0:	10ffca2e 	bgeu	r2,r3,8119ec <_strtod_r+0xfa4>
  811ac4:	e0800017 	ldw	r2,0(fp)
  811ac8:	e0c00117 	ldw	r3,4(fp)
  811acc:	020e5434 	movhi	r8,14672
  811ad0:	000d883a 	mov	r6,zero
  811ad4:	400f883a 	mov	r7,r8
  811ad8:	180b883a 	mov	r5,r3
  811adc:	1009883a 	mov	r4,r2
  811ae0:	da000c15 	stw	r8,48(sp)
  811ae4:	d8000b15 	stw	zero,44(sp)
  811ae8:	0814c180 	call	814c18 <__muldf3>
  811aec:	e0800015 	stw	r2,0(fp)
  811af0:	e0c00115 	stw	r3,4(fp)
  811af4:	183f471e 	bne	r3,zero,811814 <_strtod_r+0xdcc>
  811af8:	103f461e 	bne	r2,zero,811814 <_strtod_r+0xdcc>
  811afc:	00800884 	movi	r2,34
  811b00:	a8800015 	stw	r2,0(r21)
  811b04:	003f4306 	br	811814 <_strtod_r+0xdcc>
  811b08:	d8801317 	ldw	r2,76(sp)
  811b0c:	1025003a 	cmpeq	r18,r2,zero
  811b10:	9000861e 	bne	r18,zero,811d2c <_strtod_r+0x12e4>
  811b14:	e1400117 	ldw	r5,4(fp)
  811b18:	00c00434 	movhi	r3,16
  811b1c:	18ffffc4 	addi	r3,r3,-1
  811b20:	28c4703a 	and	r2,r5,r3
  811b24:	10c01b26 	beq	r2,r3,811b94 <_strtod_r+0x114c>
  811b28:	e1c00017 	ldw	r7,0(fp)
  811b2c:	3880004c 	andi	r2,r7,1
  811b30:	1005003a 	cmpeq	r2,r2,zero
  811b34:	1000791e 	bne	r2,zero,811d1c <_strtod_r+0x12d4>
  811b38:	9000b126 	beq	r18,zero,811e00 <_strtod_r+0x13b8>
  811b3c:	e4400117 	ldw	r17,4(fp)
  811b40:	3809883a 	mov	r4,r7
  811b44:	3821883a 	mov	r16,r7
  811b48:	880b883a 	mov	r5,r17
  811b4c:	080f2380 	call	80f238 <__ulp>
  811b50:	180f883a 	mov	r7,r3
  811b54:	880b883a 	mov	r5,r17
  811b58:	8009883a 	mov	r4,r16
  811b5c:	100d883a 	mov	r6,r2
  811b60:	0814b240 	call	814b24 <__subdf3>
  811b64:	1009883a 	mov	r4,r2
  811b68:	000d883a 	mov	r6,zero
  811b6c:	000f883a 	mov	r7,zero
  811b70:	180b883a 	mov	r5,r3
  811b74:	e0800015 	stw	r2,0(fp)
  811b78:	e0c00115 	stw	r3,4(fp)
  811b7c:	08152bc0 	call	8152bc <__nedf2>
  811b80:	103f9a26 	beq	r2,zero,8119ec <_strtod_r+0xfa4>
  811b84:	d9001417 	ldw	r4,80(sp)
  811b88:	2013003a 	cmpeq	r9,r4,zero
  811b8c:	483f211e 	bne	r9,zero,811814 <_strtod_r+0xdcc>
  811b90:	003fcc06 	br	811ac4 <_strtod_r+0x107c>
  811b94:	d9001417 	ldw	r4,80(sp)
  811b98:	e1c00017 	ldw	r7,0(fp)
  811b9c:	2013003a 	cmpeq	r9,r4,zero
  811ba0:	4800bd1e 	bne	r9,zero,811e98 <_strtod_r+0x1450>
  811ba4:	28dffc2c 	andhi	r3,r5,32752
  811ba8:	0081a834 	movhi	r2,1696
  811bac:	10c0ba36 	bltu	r2,r3,811e98 <_strtod_r+0x1450>
  811bb0:	1804d53a 	srli	r2,r3,20
  811bb4:	00c01ac4 	movi	r3,107
  811bb8:	013fffc4 	movi	r4,-1
  811bbc:	1887c83a 	sub	r3,r3,r2
  811bc0:	20c4983a 	sll	r2,r4,r3
  811bc4:	11ffd91e 	bne	r2,r7,811b2c <_strtod_r+0x10e4>
  811bc8:	28dffc2c 	andhi	r3,r5,32752
  811bcc:	00800434 	movhi	r2,16
  811bd0:	188d883a 	add	r6,r3,r2
  811bd4:	e1800115 	stw	r6,4(fp)
  811bd8:	e0000015 	stw	zero,0(fp)
  811bdc:	483f0d1e 	bne	r9,zero,811814 <_strtod_r+0xdcc>
  811be0:	003fb806 	br	811ac4 <_strtod_r+0x107c>
  811be4:	0021883a 	mov	r16,zero
  811be8:	0005883a 	mov	r2,zero
  811bec:	044ff834 	movhi	r17,16352
  811bf0:	00eff834 	movhi	r3,49120
  811bf4:	003e8606 	br	811610 <_strtod_r+0xbc8>
  811bf8:	803d9e26 	beq	r16,zero,811274 <_strtod_r+0x82c>
  811bfc:	0421c83a 	sub	r16,zero,r16
  811c00:	814003cc 	andi	r5,r16,15
  811c04:	28000f26 	beq	r5,zero,811c44 <_strtod_r+0x11fc>
  811c08:	280a90fa 	slli	r5,r5,3
  811c0c:	01002174 	movhi	r4,133
  811c10:	21320104 	addi	r4,r4,-14332
  811c14:	e0800017 	ldw	r2,0(fp)
  811c18:	290b883a 	add	r5,r5,r4
  811c1c:	2a000017 	ldw	r8,0(r5)
  811c20:	e0c00117 	ldw	r3,4(fp)
  811c24:	2a400117 	ldw	r9,4(r5)
  811c28:	1009883a 	mov	r4,r2
  811c2c:	180b883a 	mov	r5,r3
  811c30:	480f883a 	mov	r7,r9
  811c34:	400d883a 	mov	r6,r8
  811c38:	0814fdc0 	call	814fdc <__divdf3>
  811c3c:	e0c00115 	stw	r3,4(fp)
  811c40:	e0800015 	stw	r2,0(fp)
  811c44:	8021d13a 	srai	r16,r16,4
  811c48:	803d8a26 	beq	r16,zero,811274 <_strtod_r+0x82c>
  811c4c:	008007c4 	movi	r2,31
  811c50:	14002d16 	blt	r2,r16,811d08 <_strtod_r+0x12c0>
  811c54:	8080040c 	andi	r2,r16,16
  811c58:	10009926 	beq	r2,zero,811ec0 <_strtod_r+0x1478>
  811c5c:	00801a84 	movi	r2,106
  811c60:	d8801415 	stw	r2,80(sp)
  811c64:	0400110e 	bge	zero,r16,811cac <_strtod_r+0x1264>
  811c68:	04402174 	movhi	r17,133
  811c6c:	8c724e04 	addi	r17,r17,-14024
  811c70:	8080004c 	andi	r2,r16,1
  811c74:	1005003a 	cmpeq	r2,r2,zero
  811c78:	1000091e 	bne	r2,zero,811ca0 <_strtod_r+0x1258>
  811c7c:	e0800017 	ldw	r2,0(fp)
  811c80:	e0c00117 	ldw	r3,4(fp)
  811c84:	89800017 	ldw	r6,0(r17)
  811c88:	89c00117 	ldw	r7,4(r17)
  811c8c:	180b883a 	mov	r5,r3
  811c90:	1009883a 	mov	r4,r2
  811c94:	0814c180 	call	814c18 <__muldf3>
  811c98:	e0c00115 	stw	r3,4(fp)
  811c9c:	e0800015 	stw	r2,0(fp)
  811ca0:	8021d07a 	srai	r16,r16,1
  811ca4:	8c400204 	addi	r17,r17,8
  811ca8:	043ff116 	blt	zero,r16,811c70 <_strtod_r+0x1228>
  811cac:	d8c01417 	ldw	r3,80(sp)
  811cb0:	18000d26 	beq	r3,zero,811ce8 <_strtod_r+0x12a0>
  811cb4:	e1000117 	ldw	r4,4(fp)
  811cb8:	00c01ac4 	movi	r3,107
  811cbc:	209ffc2c 	andhi	r2,r4,32752
  811cc0:	1004d53a 	srli	r2,r2,20
  811cc4:	1887c83a 	sub	r3,r3,r2
  811cc8:	00c0070e 	bge	zero,r3,811ce8 <_strtod_r+0x12a0>
  811ccc:	008007c4 	movi	r2,31
  811cd0:	10c0900e 	bge	r2,r3,811f14 <_strtod_r+0x14cc>
  811cd4:	00800d04 	movi	r2,52
  811cd8:	e0000015 	stw	zero,0(fp)
  811cdc:	10c0870e 	bge	r2,r3,811efc <_strtod_r+0x14b4>
  811ce0:	0180dc34 	movhi	r6,880
  811ce4:	e1800115 	stw	r6,4(fp)
  811ce8:	e0800017 	ldw	r2,0(fp)
  811cec:	e0c00117 	ldw	r3,4(fp)
  811cf0:	000d883a 	mov	r6,zero
  811cf4:	000f883a 	mov	r7,zero
  811cf8:	180b883a 	mov	r5,r3
  811cfc:	1009883a 	mov	r4,r2
  811d00:	08152bc0 	call	8152bc <__nedf2>
  811d04:	103d5c1e 	bne	r2,zero,811278 <_strtod_r+0x830>
  811d08:	00800884 	movi	r2,34
  811d0c:	a8800015 	stw	r2,0(r21)
  811d10:	e0000015 	stw	zero,0(fp)
  811d14:	e0000115 	stw	zero,4(fp)
  811d18:	003bc206 	br	810c24 <_strtod_r+0x1dc>
  811d1c:	d8801417 	ldw	r2,80(sp)
  811d20:	1013003a 	cmpeq	r9,r2,zero
  811d24:	483ebb1e 	bne	r9,zero,811814 <_strtod_r+0xdcc>
  811d28:	003f6606 	br	811ac4 <_strtod_r+0x107c>
  811d2c:	e1800117 	ldw	r6,4(fp)
  811d30:	00c00434 	movhi	r3,16
  811d34:	18ffffc4 	addi	r3,r3,-1
  811d38:	30c4703a 	and	r2,r6,r3
  811d3c:	103f7a1e 	bne	r2,zero,811b28 <_strtod_r+0x10e0>
  811d40:	e1c00017 	ldw	r7,0(fp)
  811d44:	383f791e 	bne	r7,zero,811b2c <_strtod_r+0x10e4>
  811d48:	003f5606 	br	811aa4 <_strtod_r+0x105c>
  811d4c:	d9800f17 	ldw	r6,60(sp)
  811d50:	00bffa84 	movi	r2,-22
  811d54:	30bcd416 	blt	r6,r2,8110a8 <_strtod_r+0x660>
  811d58:	317ffe24 	muli	r5,r6,-8
  811d5c:	01002174 	movhi	r4,133
  811d60:	21320104 	addi	r4,r4,-14332
  811d64:	e0800017 	ldw	r2,0(fp)
  811d68:	290b883a 	add	r5,r5,r4
  811d6c:	2a000017 	ldw	r8,0(r5)
  811d70:	e0c00117 	ldw	r3,4(fp)
  811d74:	2a400117 	ldw	r9,4(r5)
  811d78:	1009883a 	mov	r4,r2
  811d7c:	180b883a 	mov	r5,r3
  811d80:	480f883a 	mov	r7,r9
  811d84:	400d883a 	mov	r6,r8
  811d88:	0814fdc0 	call	814fdc <__divdf3>
  811d8c:	e0c00115 	stw	r3,4(fp)
  811d90:	e0800015 	stw	r2,0(fp)
  811d94:	003ba306 	br	810c24 <_strtod_r+0x1dc>
  811d98:	00800404 	movi	r2,16
  811d9c:	14c02f0e 	bge	r2,r19,811e5c <_strtod_r+0x1414>
  811da0:	000f883a 	mov	r7,zero
  811da4:	003f2006 	br	811a28 <_strtod_r+0xfe0>
  811da8:	d9801417 	ldw	r6,80(sp)
  811dac:	3013003a 	cmpeq	r9,r6,zero
  811db0:	483e981e 	bne	r9,zero,811814 <_strtod_r+0xdcc>
  811db4:	003f4306 	br	811ac4 <_strtod_r+0x107c>
  811db8:	00801a44 	movi	r2,105
  811dbc:	20bc6326 	beq	r4,r2,810f4c <_strtod_r+0x504>
  811dc0:	00801b84 	movi	r2,110
  811dc4:	20bbba1e 	bne	r4,r2,810cb0 <_strtod_r+0x268>
  811dc8:	dc000404 	addi	r16,sp,16
  811dcc:	8009883a 	mov	r4,r16
  811dd0:	01402174 	movhi	r5,133
  811dd4:	29724d04 	addi	r5,r5,-14028
  811dd8:	0810a000 	call	810a00 <match>
  811ddc:	103bb426 	beq	r2,zero,810cb0 <_strtod_r+0x268>
  811de0:	d8800417 	ldw	r2,16(sp)
  811de4:	00c00a04 	movi	r3,40
  811de8:	11000007 	ldb	r4,0(r2)
  811dec:	20c03626 	beq	r4,r3,811ec8 <_strtod_r+0x1480>
  811df0:	01bffe34 	movhi	r6,65528
  811df4:	e1800115 	stw	r6,4(fp)
  811df8:	e0000015 	stw	zero,0(fp)
  811dfc:	003b8906 	br	810c24 <_strtod_r+0x1dc>
  811e00:	e4400117 	ldw	r17,4(fp)
  811e04:	3809883a 	mov	r4,r7
  811e08:	3821883a 	mov	r16,r7
  811e0c:	880b883a 	mov	r5,r17
  811e10:	080f2380 	call	80f238 <__ulp>
  811e14:	100d883a 	mov	r6,r2
  811e18:	880b883a 	mov	r5,r17
  811e1c:	180f883a 	mov	r7,r3
  811e20:	8009883a 	mov	r4,r16
  811e24:	0814ba40 	call	814ba4 <__adddf3>
  811e28:	d9801417 	ldw	r6,80(sp)
  811e2c:	e0c00115 	stw	r3,4(fp)
  811e30:	e0800015 	stw	r2,0(fp)
  811e34:	3013003a 	cmpeq	r9,r6,zero
  811e38:	483e761e 	bne	r9,zero,811814 <_strtod_r+0xdcc>
  811e3c:	003f2106 	br	811ac4 <_strtod_r+0x107c>
  811e40:	000f883a 	mov	r7,zero
  811e44:	003cf006 	br	811208 <_strtod_r+0x7c0>
  811e48:	0080d434 	movhi	r2,848
  811e4c:	188d883a 	add	r6,r3,r2
  811e50:	d8001415 	stw	zero,80(sp)
  811e54:	e1800115 	stw	r6,4(fp)
  811e58:	003d0706 	br	811278 <_strtod_r+0x830>
  811e5c:	808002a4 	muli	r2,r16,10
  811e60:	000f883a 	mov	r7,zero
  811e64:	1261883a 	add	r16,r2,r9
  811e68:	003eef06 	br	811a28 <_strtod_r+0xfe0>
  811e6c:	309ffc2c 	andhi	r2,r6,32752
  811e70:	00fffc34 	movhi	r3,65520
  811e74:	10c5883a 	add	r2,r2,r3
  811e78:	00c00434 	movhi	r3,16
  811e7c:	18ffffc4 	addi	r3,r3,-1
  811e80:	10ccb03a 	or	r6,r2,r3
  811e84:	01ffffc4 	movi	r7,-1
  811e88:	e1800115 	stw	r6,4(fp)
  811e8c:	e1c00015 	stw	r7,0(fp)
  811e90:	483e601e 	bne	r9,zero,811814 <_strtod_r+0xdcc>
  811e94:	003f0b06 	br	811ac4 <_strtod_r+0x107c>
  811e98:	00bfffc4 	movi	r2,-1
  811e9c:	003f4906 	br	811bc4 <_strtod_r+0x117c>
  811ea0:	0025883a 	mov	r18,zero
  811ea4:	003cb106 	br	81116c <_strtod_r+0x724>
  811ea8:	d8c01417 	ldw	r3,80(sp)
  811eac:	1813003a 	cmpeq	r9,r3,zero
  811eb0:	483e581e 	bne	r9,zero,811814 <_strtod_r+0xdcc>
  811eb4:	003f0306 	br	811ac4 <_strtod_r+0x107c>
  811eb8:	980f883a 	mov	r7,r19
  811ebc:	003ed406 	br	811a10 <_strtod_r+0xfc8>
  811ec0:	d8001415 	stw	zero,80(sp)
  811ec4:	003f6706 	br	811c64 <_strtod_r+0x121c>
  811ec8:	8009883a 	mov	r4,r16
  811ecc:	01402174 	movhi	r5,133
  811ed0:	297d2804 	addi	r5,r5,-2912
  811ed4:	d9800d04 	addi	r6,sp,52
  811ed8:	081369c0 	call	81369c <__hexnan>
  811edc:	00c00144 	movi	r3,5
  811ee0:	10ffc31e 	bne	r2,r3,811df0 <_strtod_r+0x13a8>
  811ee4:	d8800e17 	ldw	r2,56(sp)
  811ee8:	d9c00d17 	ldw	r7,52(sp)
  811eec:	119ffc34 	orhi	r6,r2,32752
  811ef0:	e1800115 	stw	r6,4(fp)
  811ef4:	e1c00015 	stw	r7,0(fp)
  811ef8:	003b4a06 	br	810c24 <_strtod_r+0x1dc>
  811efc:	18fff804 	addi	r3,r3,-32
  811f00:	00bfffc4 	movi	r2,-1
  811f04:	10c4983a 	sll	r2,r2,r3
  811f08:	208c703a 	and	r6,r4,r2
  811f0c:	e1800115 	stw	r6,4(fp)
  811f10:	003f7506 	br	811ce8 <_strtod_r+0x12a0>
  811f14:	00bfffc4 	movi	r2,-1
  811f18:	10c4983a 	sll	r2,r2,r3
  811f1c:	e0c00017 	ldw	r3,0(fp)
  811f20:	188e703a 	and	r7,r3,r2
  811f24:	e1c00015 	stw	r7,0(fp)
  811f28:	003f6f06 	br	811ce8 <_strtod_r+0x12a0>

00811f2c <strtof>:
  811f2c:	defffa04 	addi	sp,sp,-24
  811f30:	dd000415 	stw	r20,16(sp)
  811f34:	05002174 	movhi	r20,133
  811f38:	a5028104 	addi	r20,r20,2564
  811f3c:	2007883a 	mov	r3,r4
  811f40:	a1000017 	ldw	r4,0(r20)
  811f44:	280d883a 	mov	r6,r5
  811f48:	180b883a 	mov	r5,r3
  811f4c:	dfc00515 	stw	ra,20(sp)
  811f50:	dcc00315 	stw	r19,12(sp)
  811f54:	dc800215 	stw	r18,8(sp)
  811f58:	dc400115 	stw	r17,4(sp)
  811f5c:	dc000015 	stw	r16,0(sp)
  811f60:	0810a480 	call	810a48 <_strtod_r>
  811f64:	180b883a 	mov	r5,r3
  811f68:	1009883a 	mov	r4,r2
  811f6c:	1823883a 	mov	r17,r3
  811f70:	1021883a 	mov	r16,r2
  811f74:	08157340 	call	815734 <__truncdfsf2>
  811f78:	1009883a 	mov	r4,r2
  811f7c:	000b883a 	mov	r5,zero
  811f80:	1025883a 	mov	r18,r2
  811f84:	1027883a 	mov	r19,r2
  811f88:	08145ac0 	call	8145ac <__nesf2>
  811f8c:	000d883a 	mov	r6,zero
  811f90:	000f883a 	mov	r7,zero
  811f94:	8009883a 	mov	r4,r16
  811f98:	880b883a 	mov	r5,r17
  811f9c:	10000e1e 	bne	r2,zero,811fd8 <strtof+0xac>
  811fa0:	08152bc0 	call	8152bc <__nedf2>
  811fa4:	10000c26 	beq	r2,zero,811fd8 <strtof+0xac>
  811fa8:	a0c00017 	ldw	r3,0(r20)
  811fac:	00800884 	movi	r2,34
  811fb0:	18800015 	stw	r2,0(r3)
  811fb4:	9805883a 	mov	r2,r19
  811fb8:	dfc00517 	ldw	ra,20(sp)
  811fbc:	dd000417 	ldw	r20,16(sp)
  811fc0:	dcc00317 	ldw	r19,12(sp)
  811fc4:	dc800217 	ldw	r18,8(sp)
  811fc8:	dc400117 	ldw	r17,4(sp)
  811fcc:	dc000017 	ldw	r16,0(sp)
  811fd0:	dec00604 	addi	sp,sp,24
  811fd4:	f800283a 	ret
  811fd8:	9009883a 	mov	r4,r18
  811fdc:	015fe034 	movhi	r5,32640
  811fe0:	297fffc4 	addi	r5,r5,-1
  811fe4:	08146240 	call	814624 <__gtsf2>
  811fe8:	00ffffc4 	movi	r3,-1
  811fec:	011ffc34 	movhi	r4,32752
  811ff0:	213fffc4 	addi	r4,r4,-1
  811ff4:	200f883a 	mov	r7,r4
  811ff8:	180d883a 	mov	r6,r3
  811ffc:	8009883a 	mov	r4,r16
  812000:	880b883a 	mov	r5,r17
  812004:	00800f16 	blt	zero,r2,812044 <strtof+0x118>
  812008:	9009883a 	mov	r4,r18
  81200c:	017fe034 	movhi	r5,65408
  812010:	297fffc4 	addi	r5,r5,-1
  812014:	081469c0 	call	81469c <__ltsf2>
  812018:	023fffc4 	movi	r8,-1
  81201c:	027ffc34 	movhi	r9,65520
  812020:	4a7fffc4 	addi	r9,r9,-1
  812024:	880b883a 	mov	r5,r17
  812028:	480f883a 	mov	r7,r9
  81202c:	8009883a 	mov	r4,r16
  812030:	400d883a 	mov	r6,r8
  812034:	103fdf0e 	bge	r2,zero,811fb4 <strtof+0x88>
  812038:	08154540 	call	815454 <__ltdf2>
  81203c:	103fda0e 	bge	r2,zero,811fa8 <strtof+0x7c>
  812040:	003fdc06 	br	811fb4 <strtof+0x88>
  812044:	08153440 	call	815344 <__gtdf2>
  812048:	00bfd70e 	bge	zero,r2,811fa8 <strtof+0x7c>
  81204c:	003fee06 	br	812008 <strtof+0xdc>

00812050 <strtod>:
  812050:	01802174 	movhi	r6,133
  812054:	31828104 	addi	r6,r6,2564
  812058:	2007883a 	mov	r3,r4
  81205c:	31000017 	ldw	r4,0(r6)
  812060:	280d883a 	mov	r6,r5
  812064:	180b883a 	mov	r5,r3
  812068:	0810a481 	jmpi	810a48 <_strtod_r>

0081206c <_strtoll_r>:
  81206c:	defff004 	addi	sp,sp,-64
  812070:	00802174 	movhi	r2,133
  812074:	10828004 	addi	r2,r2,2560
  812078:	df000e15 	stw	fp,56(sp)
  81207c:	17000017 	ldw	fp,0(r2)
  812080:	ddc00d15 	stw	r23,52(sp)
  812084:	dd000a15 	stw	r20,40(sp)
  812088:	dfc00f15 	stw	ra,60(sp)
  81208c:	dd800c15 	stw	r22,48(sp)
  812090:	dd400b15 	stw	r21,44(sp)
  812094:	dcc00915 	stw	r19,36(sp)
  812098:	dc800815 	stw	r18,32(sp)
  81209c:	dc400715 	stw	r17,28(sp)
  8120a0:	dc000615 	stw	r16,24(sp)
  8120a4:	d9400315 	stw	r5,12(sp)
  8120a8:	d9000215 	stw	r4,8(sp)
  8120ac:	d9800415 	stw	r6,16(sp)
  8120b0:	382f883a 	mov	r23,r7
  8120b4:	2829883a 	mov	r20,r5
  8120b8:	a4c00007 	ldb	r19,0(r20)
  8120bc:	a5000044 	addi	r20,r20,1
  8120c0:	e4c7883a 	add	r3,fp,r19
  8120c4:	18800003 	ldbu	r2,0(r3)
  8120c8:	1080020c 	andi	r2,r2,8
  8120cc:	103ffa1e 	bne	r2,zero,8120b8 <_strtoll_r+0x4c>
  8120d0:	00800b44 	movi	r2,45
  8120d4:	98808826 	beq	r19,r2,8122f8 <_strtoll_r+0x28c>
  8120d8:	00800ac4 	movi	r2,43
  8120dc:	98808326 	beq	r19,r2,8122ec <_strtoll_r+0x280>
  8120e0:	d8000115 	stw	zero,4(sp)
  8120e4:	b807003a 	cmpeq	r3,r23,zero
  8120e8:	18005f1e 	bne	r3,zero,812268 <_strtoll_r+0x1fc>
  8120ec:	00800404 	movi	r2,16
  8120f0:	b8805d26 	beq	r23,r2,812268 <_strtoll_r+0x1fc>
  8120f4:	b82dd7fa 	srai	r22,r23,31
  8120f8:	b82b883a 	mov	r21,r23
  8120fc:	d8c00117 	ldw	r3,4(sp)
  812100:	1806c03a 	cmpne	r3,r3,zero
  812104:	d8c00515 	stw	r3,20(sp)
  812108:	1800631e 	bne	r3,zero,812298 <_strtoll_r+0x22c>
  81210c:	043fffc4 	movi	r16,-1
  812110:	04600034 	movhi	r17,32768
  812114:	8c7fffc4 	addi	r17,r17,-1
  812118:	880b883a 	mov	r5,r17
  81211c:	8009883a 	mov	r4,r16
  812120:	a80d883a 	mov	r6,r21
  812124:	b00f883a 	mov	r7,r22
  812128:	0813ffc0 	call	813ffc <__umoddi3>
  81212c:	880b883a 	mov	r5,r17
  812130:	8009883a 	mov	r4,r16
  812134:	b00f883a 	mov	r7,r22
  812138:	a80d883a 	mov	r6,r21
  81213c:	d8800015 	stw	r2,0(sp)
  812140:	0813a200 	call	813a20 <__udivdi3>
  812144:	1023883a 	mov	r17,r2
  812148:	e4c5883a 	add	r2,fp,r19
  81214c:	11000003 	ldbu	r4,0(r2)
  812150:	1825883a 	mov	r18,r3
  812154:	0015883a 	mov	r10,zero
  812158:	20c0010c 	andi	r3,r4,4
  81215c:	0017883a 	mov	r11,zero
  812160:	000f883a 	mov	r7,zero
  812164:	18001a26 	beq	r3,zero,8121d0 <_strtoll_r+0x164>
  812168:	9c3ff404 	addi	r16,r19,-48
  81216c:	85c0200e 	bge	r16,r23,8121f0 <_strtoll_r+0x184>
  812170:	38003b16 	blt	r7,zero,812260 <_strtoll_r+0x1f4>
  812174:	92c03a36 	bltu	r18,r11,812260 <_strtoll_r+0x1f4>
  812178:	5c803826 	beq	r11,r18,81225c <_strtoll_r+0x1f0>
  81217c:	54404c26 	beq	r10,r17,8122b0 <_strtoll_r+0x244>
  812180:	580b883a 	mov	r5,r11
  812184:	5009883a 	mov	r4,r10
  812188:	a80d883a 	mov	r6,r21
  81218c:	b00f883a 	mov	r7,r22
  812190:	08138e40 	call	8138e4 <__muldi3>
  812194:	8013d7fa 	srai	r9,r16,31
  812198:	100d883a 	mov	r6,r2
  81219c:	1405883a 	add	r2,r2,r16
  8121a0:	118d803a 	cmpltu	r6,r2,r6
  8121a4:	1a47883a 	add	r3,r3,r9
  8121a8:	30cd883a 	add	r6,r6,r3
  8121ac:	1015883a 	mov	r10,r2
  8121b0:	3017883a 	mov	r11,r6
  8121b4:	01c00044 	movi	r7,1
  8121b8:	a4c00007 	ldb	r19,0(r20)
  8121bc:	a5000044 	addi	r20,r20,1
  8121c0:	e4c5883a 	add	r2,fp,r19
  8121c4:	11000003 	ldbu	r4,0(r2)
  8121c8:	20c0010c 	andi	r3,r4,4
  8121cc:	183fe61e 	bne	r3,zero,812168 <_strtoll_r+0xfc>
  8121d0:	208000cc 	andi	r2,r4,3
  8121d4:	10000626 	beq	r2,zero,8121f0 <_strtoll_r+0x184>
  8121d8:	2080004c 	andi	r2,r4,1
  8121dc:	1005003a 	cmpeq	r2,r2,zero
  8121e0:	1000301e 	bne	r2,zero,8122a4 <_strtoll_r+0x238>
  8121e4:	02000dc4 	movi	r8,55
  8121e8:	9a21c83a 	sub	r16,r19,r8
  8121ec:	85ffe016 	blt	r16,r23,812170 <_strtoll_r+0x104>
  8121f0:	38004616 	blt	r7,zero,81230c <_strtoll_r+0x2a0>
  8121f4:	d8800517 	ldw	r2,20(sp)
  8121f8:	1000341e 	bne	r2,zero,8122cc <_strtoll_r+0x260>
  8121fc:	500b883a 	mov	r5,r10
  812200:	580d883a 	mov	r6,r11
  812204:	d8c00417 	ldw	r3,16(sp)
  812208:	18000626 	beq	r3,zero,812224 <_strtoll_r+0x1b8>
  81220c:	38000226 	beq	r7,zero,812218 <_strtoll_r+0x1ac>
  812210:	a53fffc4 	addi	r20,r20,-1
  812214:	dd000315 	stw	r20,12(sp)
  812218:	d8c00317 	ldw	r3,12(sp)
  81221c:	d8800417 	ldw	r2,16(sp)
  812220:	10c00015 	stw	r3,0(r2)
  812224:	2805883a 	mov	r2,r5
  812228:	3007883a 	mov	r3,r6
  81222c:	dfc00f17 	ldw	ra,60(sp)
  812230:	df000e17 	ldw	fp,56(sp)
  812234:	ddc00d17 	ldw	r23,52(sp)
  812238:	dd800c17 	ldw	r22,48(sp)
  81223c:	dd400b17 	ldw	r21,44(sp)
  812240:	dd000a17 	ldw	r20,40(sp)
  812244:	dcc00917 	ldw	r19,36(sp)
  812248:	dc800817 	ldw	r18,32(sp)
  81224c:	dc400717 	ldw	r17,28(sp)
  812250:	dc000617 	ldw	r16,24(sp)
  812254:	dec01004 	addi	sp,sp,64
  812258:	f800283a 	ret
  81225c:	8abfc72e 	bgeu	r17,r10,81217c <_strtoll_r+0x110>
  812260:	01ffffc4 	movi	r7,-1
  812264:	003fd406 	br	8121b8 <_strtoll_r+0x14c>
  812268:	00800c04 	movi	r2,48
  81226c:	98803226 	beq	r19,r2,812338 <_strtoll_r+0x2cc>
  812270:	183fa026 	beq	r3,zero,8120f4 <_strtoll_r+0x88>
  812274:	00800c04 	movi	r2,48
  812278:	98803e26 	beq	r19,r2,812374 <_strtoll_r+0x308>
  81227c:	d8c00117 	ldw	r3,4(sp)
  812280:	05c00284 	movi	r23,10
  812284:	b82b883a 	mov	r21,r23
  812288:	1806c03a 	cmpne	r3,r3,zero
  81228c:	002d883a 	mov	r22,zero
  812290:	d8c00515 	stw	r3,20(sp)
  812294:	183f9d26 	beq	r3,zero,81210c <_strtoll_r+0xa0>
  812298:	0021883a 	mov	r16,zero
  81229c:	04600034 	movhi	r17,32768
  8122a0:	003f9d06 	br	812118 <_strtoll_r+0xac>
  8122a4:	020015c4 	movi	r8,87
  8122a8:	9a21c83a 	sub	r16,r19,r8
  8122ac:	003fcf06 	br	8121ec <_strtoll_r+0x180>
  8122b0:	5cbfb31e 	bne	r11,r18,812180 <_strtoll_r+0x114>
  8122b4:	d8800017 	ldw	r2,0(sp)
  8122b8:	143fb10e 	bge	r2,r16,812180 <_strtoll_r+0x114>
  8122bc:	8815883a 	mov	r10,r17
  8122c0:	9017883a 	mov	r11,r18
  8122c4:	01ffffc4 	movi	r7,-1
  8122c8:	003fbb06 	br	8121b8 <_strtoll_r+0x14c>
  8122cc:	0009883a 	mov	r4,zero
  8122d0:	2285c83a 	sub	r2,r4,r10
  8122d4:	2089803a 	cmpltu	r4,r4,r2
  8122d8:	02c7c83a 	sub	r3,zero,r11
  8122dc:	1909c83a 	sub	r4,r3,r4
  8122e0:	100b883a 	mov	r5,r2
  8122e4:	200d883a 	mov	r6,r4
  8122e8:	003fc606 	br	812204 <_strtoll_r+0x198>
  8122ec:	a4c00007 	ldb	r19,0(r20)
  8122f0:	a5000044 	addi	r20,r20,1
  8122f4:	003f7a06 	br	8120e0 <_strtoll_r+0x74>
  8122f8:	a4c00007 	ldb	r19,0(r20)
  8122fc:	00800044 	movi	r2,1
  812300:	a5000044 	addi	r20,r20,1
  812304:	d8800115 	stw	r2,4(sp)
  812308:	003f7606 	br	8120e4 <_strtoll_r+0x78>
  81230c:	d8c00117 	ldw	r3,4(sp)
  812310:	1805003a 	cmpeq	r2,r3,zero
  812314:	1000131e 	bne	r2,zero,812364 <_strtoll_r+0x2f8>
  812318:	0005883a 	mov	r2,zero
  81231c:	00e00034 	movhi	r3,32768
  812320:	100b883a 	mov	r5,r2
  812324:	180d883a 	mov	r6,r3
  812328:	d8c00217 	ldw	r3,8(sp)
  81232c:	00800884 	movi	r2,34
  812330:	18800015 	stw	r2,0(r3)
  812334:	003fb306 	br	812204 <_strtoll_r+0x198>
  812338:	a1000007 	ldb	r4,0(r20)
  81233c:	00801e04 	movi	r2,120
  812340:	20800226 	beq	r4,r2,81234c <_strtoll_r+0x2e0>
  812344:	00801604 	movi	r2,88
  812348:	20bfc91e 	bne	r4,r2,812270 <_strtoll_r+0x204>
  81234c:	a4c00047 	ldb	r19,1(r20)
  812350:	05c00404 	movi	r23,16
  812354:	b82b883a 	mov	r21,r23
  812358:	a5000084 	addi	r20,r20,2
  81235c:	002d883a 	mov	r22,zero
  812360:	003f6606 	br	8120fc <_strtoll_r+0x90>
  812364:	017fffc4 	movi	r5,-1
  812368:	01a00034 	movhi	r6,32768
  81236c:	31bfffc4 	addi	r6,r6,-1
  812370:	003fed06 	br	812328 <_strtoll_r+0x2bc>
  812374:	05c00204 	movi	r23,8
  812378:	b82b883a 	mov	r21,r23
  81237c:	002d883a 	mov	r22,zero
  812380:	003f5e06 	br	8120fc <_strtoll_r+0x90>

00812384 <_strtoul_r>:
  812384:	defff604 	addi	sp,sp,-40
  812388:	00802174 	movhi	r2,133
  81238c:	10828004 	addi	r2,r2,2560
  812390:	dd000415 	stw	r20,16(sp)
  812394:	15000017 	ldw	r20,0(r2)
  812398:	ddc00715 	stw	r23,28(sp)
  81239c:	dd800615 	stw	r22,24(sp)
  8123a0:	dd400515 	stw	r21,20(sp)
  8123a4:	dc800215 	stw	r18,8(sp)
  8123a8:	dc000015 	stw	r16,0(sp)
  8123ac:	dfc00915 	stw	ra,36(sp)
  8123b0:	df000815 	stw	fp,32(sp)
  8123b4:	dcc00315 	stw	r19,12(sp)
  8123b8:	dc400115 	stw	r17,4(sp)
  8123bc:	282b883a 	mov	r21,r5
  8123c0:	202f883a 	mov	r23,r4
  8123c4:	302d883a 	mov	r22,r6
  8123c8:	3825883a 	mov	r18,r7
  8123cc:	2821883a 	mov	r16,r5
  8123d0:	84400007 	ldb	r17,0(r16)
  8123d4:	84000044 	addi	r16,r16,1
  8123d8:	a447883a 	add	r3,r20,r17
  8123dc:	18800003 	ldbu	r2,0(r3)
  8123e0:	1080020c 	andi	r2,r2,8
  8123e4:	103ffa1e 	bne	r2,zero,8123d0 <_strtoul_r+0x4c>
  8123e8:	00800b44 	movi	r2,45
  8123ec:	88805626 	beq	r17,r2,812548 <_strtoul_r+0x1c4>
  8123f0:	00800ac4 	movi	r2,43
  8123f4:	88805126 	beq	r17,r2,81253c <_strtoul_r+0x1b8>
  8123f8:	0039883a 	mov	fp,zero
  8123fc:	9007003a 	cmpeq	r3,r18,zero
  812400:	18003b1e 	bne	r3,zero,8124f0 <_strtoul_r+0x16c>
  812404:	00800404 	movi	r2,16
  812408:	90803926 	beq	r18,r2,8124f0 <_strtoul_r+0x16c>
  81240c:	013fffc4 	movi	r4,-1
  812410:	900b883a 	mov	r5,r18
  812414:	08053b80 	call	8053b8 <__udivsi3>
  812418:	013fffc4 	movi	r4,-1
  81241c:	900b883a 	mov	r5,r18
  812420:	1027883a 	mov	r19,r2
  812424:	08053c00 	call	8053c0 <__umodsi3>
  812428:	1011883a 	mov	r8,r2
  81242c:	900f883a 	mov	r7,r18
  812430:	a445883a 	add	r2,r20,r17
  812434:	11000003 	ldbu	r4,0(r2)
  812438:	000b883a 	mov	r5,zero
  81243c:	000d883a 	mov	r6,zero
  812440:	20c0010c 	andi	r3,r4,4
  812444:	18000e26 	beq	r3,zero,812480 <_strtoul_r+0xfc>
  812448:	88fff404 	addi	r3,r17,-48
  81244c:	1c80140e 	bge	r3,r18,8124a0 <_strtoul_r+0x11c>
  812450:	30003316 	blt	r6,zero,812520 <_strtoul_r+0x19c>
  812454:	99403236 	bltu	r19,r5,812520 <_strtoul_r+0x19c>
  812458:	2cc03026 	beq	r5,r19,81251c <_strtoul_r+0x198>
  81245c:	29c5383a 	mul	r2,r5,r7
  812460:	01800044 	movi	r6,1
  812464:	10cb883a 	add	r5,r2,r3
  812468:	84400007 	ldb	r17,0(r16)
  81246c:	84000044 	addi	r16,r16,1
  812470:	a445883a 	add	r2,r20,r17
  812474:	11000003 	ldbu	r4,0(r2)
  812478:	20c0010c 	andi	r3,r4,4
  81247c:	183ff21e 	bne	r3,zero,812448 <_strtoul_r+0xc4>
  812480:	208000cc 	andi	r2,r4,3
  812484:	10000626 	beq	r2,zero,8124a0 <_strtoul_r+0x11c>
  812488:	2080004c 	andi	r2,r4,1
  81248c:	1005003a 	cmpeq	r2,r2,zero
  812490:	1000251e 	bne	r2,zero,812528 <_strtoul_r+0x1a4>
  812494:	00800dc4 	movi	r2,55
  812498:	8887c83a 	sub	r3,r17,r2
  81249c:	1cbfec16 	blt	r3,r18,812450 <_strtoul_r+0xcc>
  8124a0:	3000400e 	bge	r6,zero,8125a4 <_strtoul_r+0x220>
  8124a4:	00800884 	movi	r2,34
  8124a8:	017fffc4 	movi	r5,-1
  8124ac:	b8800015 	stw	r2,0(r23)
  8124b0:	b0000226 	beq	r22,zero,8124bc <_strtoul_r+0x138>
  8124b4:	30001f1e 	bne	r6,zero,812534 <_strtoul_r+0x1b0>
  8124b8:	b5400015 	stw	r21,0(r22)
  8124bc:	2805883a 	mov	r2,r5
  8124c0:	dfc00917 	ldw	ra,36(sp)
  8124c4:	df000817 	ldw	fp,32(sp)
  8124c8:	ddc00717 	ldw	r23,28(sp)
  8124cc:	dd800617 	ldw	r22,24(sp)
  8124d0:	dd400517 	ldw	r21,20(sp)
  8124d4:	dd000417 	ldw	r20,16(sp)
  8124d8:	dcc00317 	ldw	r19,12(sp)
  8124dc:	dc800217 	ldw	r18,8(sp)
  8124e0:	dc400117 	ldw	r17,4(sp)
  8124e4:	dc000017 	ldw	r16,0(sp)
  8124e8:	dec00a04 	addi	sp,sp,40
  8124ec:	f800283a 	ret
  8124f0:	00800c04 	movi	r2,48
  8124f4:	88801826 	beq	r17,r2,812558 <_strtoul_r+0x1d4>
  8124f8:	183fc426 	beq	r3,zero,81240c <_strtoul_r+0x88>
  8124fc:	00800c04 	movi	r2,48
  812500:	88802226 	beq	r17,r2,81258c <_strtoul_r+0x208>
  812504:	04800284 	movi	r18,10
  812508:	900f883a 	mov	r7,r18
  81250c:	04c666b4 	movhi	r19,6554
  812510:	9ce66644 	addi	r19,r19,-26215
  812514:	02000144 	movi	r8,5
  812518:	003fc506 	br	812430 <_strtoul_r+0xac>
  81251c:	40ffcf0e 	bge	r8,r3,81245c <_strtoul_r+0xd8>
  812520:	01bfffc4 	movi	r6,-1
  812524:	003fd006 	br	812468 <_strtoul_r+0xe4>
  812528:	008015c4 	movi	r2,87
  81252c:	8887c83a 	sub	r3,r17,r2
  812530:	003fda06 	br	81249c <_strtoul_r+0x118>
  812534:	857fffc4 	addi	r21,r16,-1
  812538:	003fdf06 	br	8124b8 <_strtoul_r+0x134>
  81253c:	84400007 	ldb	r17,0(r16)
  812540:	84000044 	addi	r16,r16,1
  812544:	003fac06 	br	8123f8 <_strtoul_r+0x74>
  812548:	84400007 	ldb	r17,0(r16)
  81254c:	07000044 	movi	fp,1
  812550:	84000044 	addi	r16,r16,1
  812554:	003fa906 	br	8123fc <_strtoul_r+0x78>
  812558:	81000007 	ldb	r4,0(r16)
  81255c:	00801e04 	movi	r2,120
  812560:	20800226 	beq	r4,r2,81256c <_strtoul_r+0x1e8>
  812564:	00801604 	movi	r2,88
  812568:	20bfe31e 	bne	r4,r2,8124f8 <_strtoul_r+0x174>
  81256c:	84400047 	ldb	r17,1(r16)
  812570:	04800404 	movi	r18,16
  812574:	84000084 	addi	r16,r16,2
  812578:	900f883a 	mov	r7,r18
  81257c:	04c40034 	movhi	r19,4096
  812580:	9cffffc4 	addi	r19,r19,-1
  812584:	020003c4 	movi	r8,15
  812588:	003fa906 	br	812430 <_strtoul_r+0xac>
  81258c:	04800204 	movi	r18,8
  812590:	900f883a 	mov	r7,r18
  812594:	04c80034 	movhi	r19,8192
  812598:	9cffffc4 	addi	r19,r19,-1
  81259c:	020001c4 	movi	r8,7
  8125a0:	003fa306 	br	812430 <_strtoul_r+0xac>
  8125a4:	e005003a 	cmpeq	r2,fp,zero
  8125a8:	103fc11e 	bne	r2,zero,8124b0 <_strtoul_r+0x12c>
  8125ac:	014bc83a 	sub	r5,zero,r5
  8125b0:	003fbf06 	br	8124b0 <_strtoul_r+0x12c>

008125b4 <strtoul>:
  8125b4:	00802174 	movhi	r2,133
  8125b8:	10828104 	addi	r2,r2,2564
  8125bc:	2013883a 	mov	r9,r4
  8125c0:	11000017 	ldw	r4,0(r2)
  8125c4:	2805883a 	mov	r2,r5
  8125c8:	300f883a 	mov	r7,r6
  8125cc:	480b883a 	mov	r5,r9
  8125d0:	100d883a 	mov	r6,r2
  8125d4:	08123841 	jmpi	812384 <_strtoul_r>

008125d8 <_strtoull_r>:
  8125d8:	defff104 	addi	sp,sp,-60
  8125dc:	00802174 	movhi	r2,133
  8125e0:	10828004 	addi	r2,r2,2560
  8125e4:	df000d15 	stw	fp,52(sp)
  8125e8:	17000017 	ldw	fp,0(r2)
  8125ec:	ddc00c15 	stw	r23,48(sp)
  8125f0:	dcc00815 	stw	r19,32(sp)
  8125f4:	dfc00e15 	stw	ra,56(sp)
  8125f8:	dd800b15 	stw	r22,44(sp)
  8125fc:	dd400a15 	stw	r21,40(sp)
  812600:	dd000915 	stw	r20,36(sp)
  812604:	dc800715 	stw	r18,28(sp)
  812608:	dc400615 	stw	r17,24(sp)
  81260c:	dc000515 	stw	r16,20(sp)
  812610:	d9400215 	stw	r5,8(sp)
  812614:	d9000115 	stw	r4,4(sp)
  812618:	d9800315 	stw	r6,12(sp)
  81261c:	382f883a 	mov	r23,r7
  812620:	2827883a 	mov	r19,r5
  812624:	9d000007 	ldb	r20,0(r19)
  812628:	9cc00044 	addi	r19,r19,1
  81262c:	e507883a 	add	r3,fp,r20
  812630:	18800003 	ldbu	r2,0(r3)
  812634:	1080020c 	andi	r2,r2,8
  812638:	103ffa1e 	bne	r2,zero,812624 <_strtoull_r+0x4c>
  81263c:	00800b44 	movi	r2,45
  812640:	a0807a26 	beq	r20,r2,81282c <_strtoull_r+0x254>
  812644:	00800ac4 	movi	r2,43
  812648:	a0807526 	beq	r20,r2,812820 <_strtoull_r+0x248>
  81264c:	d8000015 	stw	zero,0(sp)
  812650:	b807003a 	cmpeq	r3,r23,zero
  812654:	18005a1e 	bne	r3,zero,8127c0 <_strtoull_r+0x1e8>
  812658:	00800404 	movi	r2,16
  81265c:	b8805826 	beq	r23,r2,8127c0 <_strtoull_r+0x1e8>
  812660:	b82dd7fa 	srai	r22,r23,31
  812664:	043fffc4 	movi	r16,-1
  812668:	8009883a 	mov	r4,r16
  81266c:	800b883a 	mov	r5,r16
  812670:	b80d883a 	mov	r6,r23
  812674:	b00f883a 	mov	r7,r22
  812678:	0813a200 	call	813a20 <__udivdi3>
  81267c:	8009883a 	mov	r4,r16
  812680:	800b883a 	mov	r5,r16
  812684:	b80d883a 	mov	r6,r23
  812688:	b00f883a 	mov	r7,r22
  81268c:	1023883a 	mov	r17,r2
  812690:	1825883a 	mov	r18,r3
  812694:	0813ffc0 	call	813ffc <__umoddi3>
  812698:	b82b883a 	mov	r21,r23
  81269c:	1019883a 	mov	r12,r2
  8126a0:	e505883a 	add	r2,fp,r20
  8126a4:	11000003 	ldbu	r4,0(r2)
  8126a8:	0015883a 	mov	r10,zero
  8126ac:	0017883a 	mov	r11,zero
  8126b0:	20c0010c 	andi	r3,r4,4
  8126b4:	000d883a 	mov	r6,zero
  8126b8:	18001c26 	beq	r3,zero,81272c <_strtoull_r+0x154>
  8126bc:	a43ff404 	addi	r16,r20,-48
  8126c0:	85c0220e 	bge	r16,r23,81274c <_strtoull_r+0x174>
  8126c4:	30003c16 	blt	r6,zero,8127b8 <_strtoull_r+0x1e0>
  8126c8:	92c03b36 	bltu	r18,r11,8127b8 <_strtoull_r+0x1e0>
  8126cc:	5c803926 	beq	r11,r18,8127b4 <_strtoull_r+0x1dc>
  8126d0:	54404c26 	beq	r10,r17,812804 <_strtoull_r+0x22c>
  8126d4:	580b883a 	mov	r5,r11
  8126d8:	5009883a 	mov	r4,r10
  8126dc:	a80d883a 	mov	r6,r21
  8126e0:	b00f883a 	mov	r7,r22
  8126e4:	db000415 	stw	r12,16(sp)
  8126e8:	08138e40 	call	8138e4 <__muldi3>
  8126ec:	8013d7fa 	srai	r9,r16,31
  8126f0:	100d883a 	mov	r6,r2
  8126f4:	1405883a 	add	r2,r2,r16
  8126f8:	118d803a 	cmpltu	r6,r2,r6
  8126fc:	1a47883a 	add	r3,r3,r9
  812700:	db000417 	ldw	r12,16(sp)
  812704:	30cd883a 	add	r6,r6,r3
  812708:	3017883a 	mov	r11,r6
  81270c:	1015883a 	mov	r10,r2
  812710:	01800044 	movi	r6,1
  812714:	9d000007 	ldb	r20,0(r19)
  812718:	9cc00044 	addi	r19,r19,1
  81271c:	e505883a 	add	r2,fp,r20
  812720:	11000003 	ldbu	r4,0(r2)
  812724:	20c0010c 	andi	r3,r4,4
  812728:	183fe41e 	bne	r3,zero,8126bc <_strtoull_r+0xe4>
  81272c:	208000cc 	andi	r2,r4,3
  812730:	10000626 	beq	r2,zero,81274c <_strtoull_r+0x174>
  812734:	2080004c 	andi	r2,r4,1
  812738:	1005003a 	cmpeq	r2,r2,zero
  81273c:	10002e1e 	bne	r2,zero,8127f8 <_strtoull_r+0x220>
  812740:	02000dc4 	movi	r8,55
  812744:	a221c83a 	sub	r16,r20,r8
  812748:	85ffde16 	blt	r16,r23,8126c4 <_strtoull_r+0xec>
  81274c:	3000530e 	bge	r6,zero,81289c <_strtoull_r+0x2c4>
  812750:	d8c00117 	ldw	r3,4(sp)
  812754:	02bfffc4 	movi	r10,-1
  812758:	00800884 	movi	r2,34
  81275c:	5017883a 	mov	r11,r10
  812760:	18800015 	stw	r2,0(r3)
  812764:	d8800317 	ldw	r2,12(sp)
  812768:	10000426 	beq	r2,zero,81277c <_strtoull_r+0x1a4>
  81276c:	3000291e 	bne	r6,zero,812814 <_strtoull_r+0x23c>
  812770:	d8800217 	ldw	r2,8(sp)
  812774:	d8c00317 	ldw	r3,12(sp)
  812778:	18800015 	stw	r2,0(r3)
  81277c:	5005883a 	mov	r2,r10
  812780:	5807883a 	mov	r3,r11
  812784:	dfc00e17 	ldw	ra,56(sp)
  812788:	df000d17 	ldw	fp,52(sp)
  81278c:	ddc00c17 	ldw	r23,48(sp)
  812790:	dd800b17 	ldw	r22,44(sp)
  812794:	dd400a17 	ldw	r21,40(sp)
  812798:	dd000917 	ldw	r20,36(sp)
  81279c:	dcc00817 	ldw	r19,32(sp)
  8127a0:	dc800717 	ldw	r18,28(sp)
  8127a4:	dc400617 	ldw	r17,24(sp)
  8127a8:	dc000517 	ldw	r16,20(sp)
  8127ac:	dec00f04 	addi	sp,sp,60
  8127b0:	f800283a 	ret
  8127b4:	8abfc62e 	bgeu	r17,r10,8126d0 <_strtoull_r+0xf8>
  8127b8:	01bfffc4 	movi	r6,-1
  8127bc:	003fd506 	br	812714 <_strtoull_r+0x13c>
  8127c0:	00800c04 	movi	r2,48
  8127c4:	a0801e26 	beq	r20,r2,812840 <_strtoull_r+0x268>
  8127c8:	183fa526 	beq	r3,zero,812660 <_strtoull_r+0x88>
  8127cc:	00800c04 	movi	r2,48
  8127d0:	a0802a26 	beq	r20,r2,81287c <_strtoull_r+0x2a4>
  8127d4:	05c00284 	movi	r23,10
  8127d8:	b82b883a 	mov	r21,r23
  8127dc:	046666b4 	movhi	r17,39322
  8127e0:	8c666644 	addi	r17,r17,-26215
  8127e4:	002d883a 	mov	r22,zero
  8127e8:	048666b4 	movhi	r18,6554
  8127ec:	94a66644 	addi	r18,r18,-26215
  8127f0:	03000144 	movi	r12,5
  8127f4:	003faa06 	br	8126a0 <_strtoull_r+0xc8>
  8127f8:	020015c4 	movi	r8,87
  8127fc:	a221c83a 	sub	r16,r20,r8
  812800:	003fd106 	br	812748 <_strtoull_r+0x170>
  812804:	5cbfb31e 	bne	r11,r18,8126d4 <_strtoull_r+0xfc>
  812808:	643fb20e 	bge	r12,r16,8126d4 <_strtoull_r+0xfc>
  81280c:	01bfffc4 	movi	r6,-1
  812810:	003fc006 	br	812714 <_strtoull_r+0x13c>
  812814:	9cffffc4 	addi	r19,r19,-1
  812818:	dcc00215 	stw	r19,8(sp)
  81281c:	003fd406 	br	812770 <_strtoull_r+0x198>
  812820:	9d000007 	ldb	r20,0(r19)
  812824:	9cc00044 	addi	r19,r19,1
  812828:	003f8806 	br	81264c <_strtoull_r+0x74>
  81282c:	9d000007 	ldb	r20,0(r19)
  812830:	00800044 	movi	r2,1
  812834:	9cc00044 	addi	r19,r19,1
  812838:	d8800015 	stw	r2,0(sp)
  81283c:	003f8406 	br	812650 <_strtoull_r+0x78>
  812840:	99000007 	ldb	r4,0(r19)
  812844:	00801e04 	movi	r2,120
  812848:	20800226 	beq	r4,r2,812854 <_strtoull_r+0x27c>
  81284c:	00801604 	movi	r2,88
  812850:	20bfdd1e 	bne	r4,r2,8127c8 <_strtoull_r+0x1f0>
  812854:	9d000047 	ldb	r20,1(r19)
  812858:	05c00404 	movi	r23,16
  81285c:	b82b883a 	mov	r21,r23
  812860:	047fffc4 	movi	r17,-1
  812864:	9cc00084 	addi	r19,r19,2
  812868:	002d883a 	mov	r22,zero
  81286c:	04840034 	movhi	r18,4096
  812870:	94bfffc4 	addi	r18,r18,-1
  812874:	030003c4 	movi	r12,15
  812878:	003f8906 	br	8126a0 <_strtoull_r+0xc8>
  81287c:	05c00204 	movi	r23,8
  812880:	b82b883a 	mov	r21,r23
  812884:	047fffc4 	movi	r17,-1
  812888:	002d883a 	mov	r22,zero
  81288c:	04880034 	movhi	r18,8192
  812890:	94bfffc4 	addi	r18,r18,-1
  812894:	030001c4 	movi	r12,7
  812898:	003f8106 	br	8126a0 <_strtoull_r+0xc8>
  81289c:	d8c00017 	ldw	r3,0(sp)
  8128a0:	1805003a 	cmpeq	r2,r3,zero
  8128a4:	103faf1e 	bne	r2,zero,812764 <_strtoull_r+0x18c>
  8128a8:	0009883a 	mov	r4,zero
  8128ac:	2285c83a 	sub	r2,r4,r10
  8128b0:	02c7c83a 	sub	r3,zero,r11
  8128b4:	2089803a 	cmpltu	r4,r4,r2
  8128b8:	1909c83a 	sub	r4,r3,r4
  8128bc:	1015883a 	mov	r10,r2
  8128c0:	2017883a 	mov	r11,r4
  8128c4:	003fa706 	br	812764 <_strtoull_r+0x18c>

008128c8 <__submore>:
  8128c8:	defffa04 	addi	sp,sp,-24
  8128cc:	28c00c17 	ldw	r3,48(r5)
  8128d0:	dc800215 	stw	r18,8(sp)
  8128d4:	2825883a 	mov	r18,r5
  8128d8:	dc000015 	stw	r16,0(sp)
  8128dc:	90801004 	addi	r2,r18,64
  8128e0:	04010004 	movi	r16,1024
  8128e4:	dfc00515 	stw	ra,20(sp)
  8128e8:	dd000415 	stw	r20,16(sp)
  8128ec:	dcc00315 	stw	r19,12(sp)
  8128f0:	dc400115 	stw	r17,4(sp)
  8128f4:	800b883a 	mov	r5,r16
  8128f8:	18801b26 	beq	r3,r2,812968 <__submore+0xa0>
  8128fc:	94400d17 	ldw	r17,52(r18)
  812900:	180b883a 	mov	r5,r3
  812904:	8c69883a 	add	r20,r17,r17
  812908:	a00d883a 	mov	r6,r20
  81290c:	08102d40 	call	8102d4 <_realloc_r>
  812910:	1467883a 	add	r19,r2,r17
  812914:	1021883a 	mov	r16,r2
  812918:	880d883a 	mov	r6,r17
  81291c:	9809883a 	mov	r4,r19
  812920:	100b883a 	mov	r5,r2
  812924:	10000e26 	beq	r2,zero,812960 <__submore+0x98>
  812928:	08073380 	call	807338 <memcpy>
  81292c:	000d883a 	mov	r6,zero
  812930:	95000d15 	stw	r20,52(r18)
  812934:	94c00015 	stw	r19,0(r18)
  812938:	94000c15 	stw	r16,48(r18)
  81293c:	3005883a 	mov	r2,r6
  812940:	dfc00517 	ldw	ra,20(sp)
  812944:	dd000417 	ldw	r20,16(sp)
  812948:	dcc00317 	ldw	r19,12(sp)
  81294c:	dc800217 	ldw	r18,8(sp)
  812950:	dc400117 	ldw	r17,4(sp)
  812954:	dc000017 	ldw	r16,0(sp)
  812958:	dec00604 	addi	sp,sp,24
  81295c:	f800283a 	ret
  812960:	01bfffc4 	movi	r6,-1
  812964:	003ff506 	br	81293c <__submore+0x74>
  812968:	0806bf80 	call	806bf8 <_malloc_r>
  81296c:	1009883a 	mov	r4,r2
  812970:	1140ff44 	addi	r5,r2,1021
  812974:	000d883a 	mov	r6,zero
  812978:	103ff926 	beq	r2,zero,812960 <__submore+0x98>
  81297c:	90801083 	ldbu	r2,66(r18)
  812980:	94000d15 	stw	r16,52(r18)
  812984:	91000c15 	stw	r4,48(r18)
  812988:	28800085 	stb	r2,2(r5)
  81298c:	90c01043 	ldbu	r3,65(r18)
  812990:	28c00045 	stb	r3,1(r5)
  812994:	90801003 	ldbu	r2,64(r18)
  812998:	2080ff45 	stb	r2,1021(r4)
  81299c:	91400015 	stw	r5,0(r18)
  8129a0:	003fe606 	br	81293c <__submore+0x74>

008129a4 <_ungetc_r>:
  8129a4:	defffc04 	addi	sp,sp,-16
  8129a8:	00bfffc4 	movi	r2,-1
  8129ac:	dc400215 	stw	r17,8(sp)
  8129b0:	dc000115 	stw	r16,4(sp)
  8129b4:	dfc00315 	stw	ra,12(sp)
  8129b8:	2821883a 	mov	r16,r5
  8129bc:	2023883a 	mov	r17,r4
  8129c0:	28801826 	beq	r5,r2,812a24 <_ungetc_r+0x80>
  8129c4:	20000226 	beq	r4,zero,8129d0 <_ungetc_r+0x2c>
  8129c8:	20800e17 	ldw	r2,56(r4)
  8129cc:	10001b26 	beq	r2,zero,812a3c <_ungetc_r+0x98>
  8129d0:	3100030b 	ldhu	r4,12(r6)
  8129d4:	00bff7c4 	movi	r2,-33
  8129d8:	2084703a 	and	r2,r4,r2
  8129dc:	117fffcc 	andi	r5,r2,65535
  8129e0:	28c0010c 	andi	r3,r5,4
  8129e4:	1009883a 	mov	r4,r2
  8129e8:	3080030d 	sth	r2,12(r6)
  8129ec:	18003526 	beq	r3,zero,812ac4 <_ungetc_r+0x120>
  8129f0:	30800c17 	ldw	r2,48(r6)
  8129f4:	84003fcc 	andi	r16,r16,255
  8129f8:	10001426 	beq	r2,zero,812a4c <_ungetc_r+0xa8>
  8129fc:	30c00117 	ldw	r3,4(r6)
  812a00:	30800d17 	ldw	r2,52(r6)
  812a04:	1880380e 	bge	r3,r2,812ae8 <_ungetc_r+0x144>
  812a08:	30c00017 	ldw	r3,0(r6)
  812a0c:	19ffffc4 	addi	r7,r3,-1
  812a10:	31c00015 	stw	r7,0(r6)
  812a14:	1c3fffc5 	stb	r16,-1(r3)
  812a18:	30800117 	ldw	r2,4(r6)
  812a1c:	10800044 	addi	r2,r2,1
  812a20:	30800115 	stw	r2,4(r6)
  812a24:	8005883a 	mov	r2,r16
  812a28:	dfc00317 	ldw	ra,12(sp)
  812a2c:	dc400217 	ldw	r17,8(sp)
  812a30:	dc000117 	ldw	r16,4(sp)
  812a34:	dec00404 	addi	sp,sp,16
  812a38:	f800283a 	ret
  812a3c:	d9800015 	stw	r6,0(sp)
  812a40:	08057e40 	call	8057e4 <__sinit>
  812a44:	d9800017 	ldw	r6,0(sp)
  812a48:	003fe106 	br	8129d0 <_ungetc_r+0x2c>
  812a4c:	30800417 	ldw	r2,16(r6)
  812a50:	10002326 	beq	r2,zero,812ae0 <_ungetc_r+0x13c>
  812a54:	31c00017 	ldw	r7,0(r6)
  812a58:	11c0022e 	bgeu	r2,r7,812a64 <_ungetc_r+0xc0>
  812a5c:	38bfffc3 	ldbu	r2,-1(r7)
  812a60:	80801226 	beq	r16,r2,812aac <_ungetc_r+0x108>
  812a64:	30c00117 	ldw	r3,4(r6)
  812a68:	00800044 	movi	r2,1
  812a6c:	30800115 	stw	r2,4(r6)
  812a70:	008000c4 	movi	r2,3
  812a74:	31001004 	addi	r4,r6,64
  812a78:	31401084 	addi	r5,r6,66
  812a7c:	30800d15 	stw	r2,52(r6)
  812a80:	8005883a 	mov	r2,r16
  812a84:	30c00f15 	stw	r3,60(r6)
  812a88:	31c00e15 	stw	r7,56(r6)
  812a8c:	31000c15 	stw	r4,48(r6)
  812a90:	31400015 	stw	r5,0(r6)
  812a94:	34001085 	stb	r16,66(r6)
  812a98:	dfc00317 	ldw	ra,12(sp)
  812a9c:	dc400217 	ldw	r17,8(sp)
  812aa0:	dc000117 	ldw	r16,4(sp)
  812aa4:	dec00404 	addi	sp,sp,16
  812aa8:	f800283a 	ret
  812aac:	30800117 	ldw	r2,4(r6)
  812ab0:	39ffffc4 	addi	r7,r7,-1
  812ab4:	31c00015 	stw	r7,0(r6)
  812ab8:	10800044 	addi	r2,r2,1
  812abc:	30800115 	stw	r2,4(r6)
  812ac0:	003fd806 	br	812a24 <_ungetc_r+0x80>
  812ac4:	2880040c 	andi	r2,r5,16
  812ac8:	10000d26 	beq	r2,zero,812b00 <_ungetc_r+0x15c>
  812acc:	2880020c 	andi	r2,r5,8
  812ad0:	10000d1e 	bne	r2,zero,812b08 <_ungetc_r+0x164>
  812ad4:	20800114 	ori	r2,r4,4
  812ad8:	3080030d 	sth	r2,12(r6)
  812adc:	003fc406 	br	8129f0 <_ungetc_r+0x4c>
  812ae0:	31c00017 	ldw	r7,0(r6)
  812ae4:	003fdf06 	br	812a64 <_ungetc_r+0xc0>
  812ae8:	300b883a 	mov	r5,r6
  812aec:	8809883a 	mov	r4,r17
  812af0:	d9800015 	stw	r6,0(sp)
  812af4:	08128c80 	call	8128c8 <__submore>
  812af8:	d9800017 	ldw	r6,0(sp)
  812afc:	103fc226 	beq	r2,zero,812a08 <_ungetc_r+0x64>
  812b00:	043fffc4 	movi	r16,-1
  812b04:	003fc706 	br	812a24 <_ungetc_r+0x80>
  812b08:	300b883a 	mov	r5,r6
  812b0c:	8809883a 	mov	r4,r17
  812b10:	d9800015 	stw	r6,0(sp)
  812b14:	08055040 	call	805504 <_fflush_r>
  812b18:	d9800017 	ldw	r6,0(sp)
  812b1c:	103ff81e 	bne	r2,zero,812b00 <_ungetc_r+0x15c>
  812b20:	3100030b 	ldhu	r4,12(r6)
  812b24:	00bffdc4 	movi	r2,-9
  812b28:	30000215 	stw	zero,8(r6)
  812b2c:	2084703a 	and	r2,r4,r2
  812b30:	1009883a 	mov	r4,r2
  812b34:	3080030d 	sth	r2,12(r6)
  812b38:	30000615 	stw	zero,24(r6)
  812b3c:	003fe506 	br	812ad4 <_ungetc_r+0x130>

00812b40 <ungetc>:
  812b40:	01802174 	movhi	r6,133
  812b44:	31828104 	addi	r6,r6,2564
  812b48:	2007883a 	mov	r3,r4
  812b4c:	31000017 	ldw	r4,0(r6)
  812b50:	280d883a 	mov	r6,r5
  812b54:	180b883a 	mov	r5,r3
  812b58:	08129a41 	jmpi	8129a4 <_ungetc_r>

00812b5c <__swbuf_r>:
  812b5c:	defffc04 	addi	sp,sp,-16
  812b60:	dc400215 	stw	r17,8(sp)
  812b64:	dc000115 	stw	r16,4(sp)
  812b68:	dfc00315 	stw	ra,12(sp)
  812b6c:	2023883a 	mov	r17,r4
  812b70:	2821883a 	mov	r16,r5
  812b74:	20000226 	beq	r4,zero,812b80 <__swbuf_r+0x24>
  812b78:	20800e17 	ldw	r2,56(r4)
  812b7c:	10002f26 	beq	r2,zero,812c3c <__swbuf_r+0xe0>
  812b80:	3080030b 	ldhu	r2,12(r6)
  812b84:	30c00617 	ldw	r3,24(r6)
  812b88:	1080020c 	andi	r2,r2,8
  812b8c:	30c00215 	stw	r3,8(r6)
  812b90:	10002226 	beq	r2,zero,812c1c <__swbuf_r+0xc0>
  812b94:	30c00417 	ldw	r3,16(r6)
  812b98:	18002026 	beq	r3,zero,812c1c <__swbuf_r+0xc0>
  812b9c:	31000017 	ldw	r4,0(r6)
  812ba0:	30800517 	ldw	r2,20(r6)
  812ba4:	20c7c83a 	sub	r3,r4,r3
  812ba8:	18802f0e 	bge	r3,r2,812c68 <__swbuf_r+0x10c>
  812bac:	19400044 	addi	r5,r3,1
  812bb0:	30800217 	ldw	r2,8(r6)
  812bb4:	84003fcc 	andi	r16,r16,255
  812bb8:	20c00044 	addi	r3,r4,1
  812bbc:	10bfffc4 	addi	r2,r2,-1
  812bc0:	30800215 	stw	r2,8(r6)
  812bc4:	24000005 	stb	r16,0(r4)
  812bc8:	30800517 	ldw	r2,20(r6)
  812bcc:	30c00015 	stw	r3,0(r6)
  812bd0:	11400c26 	beq	r2,r5,812c04 <__swbuf_r+0xa8>
  812bd4:	3080030b 	ldhu	r2,12(r6)
  812bd8:	1080004c 	andi	r2,r2,1
  812bdc:	1005003a 	cmpeq	r2,r2,zero
  812be0:	10000626 	beq	r2,zero,812bfc <__swbuf_r+0xa0>
  812be4:	8005883a 	mov	r2,r16
  812be8:	dfc00317 	ldw	ra,12(sp)
  812bec:	dc400217 	ldw	r17,8(sp)
  812bf0:	dc000117 	ldw	r16,4(sp)
  812bf4:	dec00404 	addi	sp,sp,16
  812bf8:	f800283a 	ret
  812bfc:	00800284 	movi	r2,10
  812c00:	80bff81e 	bne	r16,r2,812be4 <__swbuf_r+0x88>
  812c04:	8809883a 	mov	r4,r17
  812c08:	300b883a 	mov	r5,r6
  812c0c:	08055040 	call	805504 <_fflush_r>
  812c10:	103ff426 	beq	r2,zero,812be4 <__swbuf_r+0x88>
  812c14:	043fffc4 	movi	r16,-1
  812c18:	003ff206 	br	812be4 <__swbuf_r+0x88>
  812c1c:	300b883a 	mov	r5,r6
  812c20:	8809883a 	mov	r4,r17
  812c24:	d9800015 	stw	r6,0(sp)
  812c28:	080cc4c0 	call	80cc4c <__swsetup_r>
  812c2c:	d9800017 	ldw	r6,0(sp)
  812c30:	1000061e 	bne	r2,zero,812c4c <__swbuf_r+0xf0>
  812c34:	30c00417 	ldw	r3,16(r6)
  812c38:	003fd806 	br	812b9c <__swbuf_r+0x40>
  812c3c:	d9800015 	stw	r6,0(sp)
  812c40:	08057e40 	call	8057e4 <__sinit>
  812c44:	d9800017 	ldw	r6,0(sp)
  812c48:	003fcd06 	br	812b80 <__swbuf_r+0x24>
  812c4c:	3080030b 	ldhu	r2,12(r6)
  812c50:	00c00244 	movi	r3,9
  812c54:	043fffc4 	movi	r16,-1
  812c58:	10801014 	ori	r2,r2,64
  812c5c:	3080030d 	sth	r2,12(r6)
  812c60:	88c00015 	stw	r3,0(r17)
  812c64:	003fdf06 	br	812be4 <__swbuf_r+0x88>
  812c68:	300b883a 	mov	r5,r6
  812c6c:	8809883a 	mov	r4,r17
  812c70:	d9800015 	stw	r6,0(sp)
  812c74:	08055040 	call	805504 <_fflush_r>
  812c78:	d9800017 	ldw	r6,0(sp)
  812c7c:	103fe51e 	bne	r2,zero,812c14 <__swbuf_r+0xb8>
  812c80:	31000017 	ldw	r4,0(r6)
  812c84:	01400044 	movi	r5,1
  812c88:	003fc906 	br	812bb0 <__swbuf_r+0x54>

00812c8c <__swbuf>:
  812c8c:	01802174 	movhi	r6,133
  812c90:	31828104 	addi	r6,r6,2564
  812c94:	2007883a 	mov	r3,r4
  812c98:	31000017 	ldw	r4,0(r6)
  812c9c:	280d883a 	mov	r6,r5
  812ca0:	180b883a 	mov	r5,r3
  812ca4:	0812b5c1 	jmpi	812b5c <__swbuf_r>

00812ca8 <_calloc_r>:
  812ca8:	298b383a 	mul	r5,r5,r6
  812cac:	defffe04 	addi	sp,sp,-8
  812cb0:	dc000015 	stw	r16,0(sp)
  812cb4:	dfc00115 	stw	ra,4(sp)
  812cb8:	0806bf80 	call	806bf8 <_malloc_r>
  812cbc:	1021883a 	mov	r16,r2
  812cc0:	01c00904 	movi	r7,36
  812cc4:	10000d26 	beq	r2,zero,812cfc <_calloc_r+0x54>
  812cc8:	10ffff17 	ldw	r3,-4(r2)
  812ccc:	1009883a 	mov	r4,r2
  812cd0:	00bfff04 	movi	r2,-4
  812cd4:	1886703a 	and	r3,r3,r2
  812cd8:	1887883a 	add	r3,r3,r2
  812cdc:	180d883a 	mov	r6,r3
  812ce0:	000b883a 	mov	r5,zero
  812ce4:	38c01736 	bltu	r7,r3,812d44 <_calloc_r+0x9c>
  812ce8:	008004c4 	movi	r2,19
  812cec:	10c00836 	bltu	r2,r3,812d10 <_calloc_r+0x68>
  812cf0:	20000215 	stw	zero,8(r4)
  812cf4:	20000015 	stw	zero,0(r4)
  812cf8:	20000115 	stw	zero,4(r4)
  812cfc:	8005883a 	mov	r2,r16
  812d00:	dfc00117 	ldw	ra,4(sp)
  812d04:	dc000017 	ldw	r16,0(sp)
  812d08:	dec00204 	addi	sp,sp,8
  812d0c:	f800283a 	ret
  812d10:	008006c4 	movi	r2,27
  812d14:	80000015 	stw	zero,0(r16)
  812d18:	80000115 	stw	zero,4(r16)
  812d1c:	81000204 	addi	r4,r16,8
  812d20:	10fff32e 	bgeu	r2,r3,812cf0 <_calloc_r+0x48>
  812d24:	80000215 	stw	zero,8(r16)
  812d28:	80000315 	stw	zero,12(r16)
  812d2c:	81000404 	addi	r4,r16,16
  812d30:	19ffef1e 	bne	r3,r7,812cf0 <_calloc_r+0x48>
  812d34:	81000604 	addi	r4,r16,24
  812d38:	80000415 	stw	zero,16(r16)
  812d3c:	80000515 	stw	zero,20(r16)
  812d40:	003feb06 	br	812cf0 <_calloc_r+0x48>
  812d44:	08074b80 	call	8074b8 <memset>
  812d48:	8005883a 	mov	r2,r16
  812d4c:	dfc00117 	ldw	ra,4(sp)
  812d50:	dc000017 	ldw	r16,0(sp)
  812d54:	dec00204 	addi	sp,sp,8
  812d58:	f800283a 	ret

00812d5c <htinit>:
  812d5c:	28800003 	ldbu	r2,0(r5)
  812d60:	10000626 	beq	r2,zero,812d7c <htinit+0x20>
  812d64:	1105883a 	add	r2,r2,r4
  812d68:	11800005 	stb	r6,0(r2)
  812d6c:	28800043 	ldbu	r2,1(r5)
  812d70:	31800044 	addi	r6,r6,1
  812d74:	29400044 	addi	r5,r5,1
  812d78:	103ffa1e 	bne	r2,zero,812d64 <htinit+0x8>
  812d7c:	f800283a 	ret

00812d80 <__hexdig_init>:
  812d80:	defffd04 	addi	sp,sp,-12
  812d84:	dc400015 	stw	r17,0(sp)
  812d88:	044038f4 	movhi	r17,227
  812d8c:	8c5a0e04 	addi	r17,r17,26680
  812d90:	dcc00115 	stw	r19,4(sp)
  812d94:	8809883a 	mov	r4,r17
  812d98:	04c00684 	movi	r19,26
  812d9c:	01402174 	movhi	r5,133
  812da0:	29725804 	addi	r5,r5,-13984
  812da4:	01800404 	movi	r6,16
  812da8:	dfc00215 	stw	ra,8(sp)
  812dac:	0812d5c0 	call	812d5c <htinit>
  812db0:	980d883a 	mov	r6,r19
  812db4:	8809883a 	mov	r4,r17
  812db8:	01402174 	movhi	r5,133
  812dbc:	29725b04 	addi	r5,r5,-13972
  812dc0:	0812d5c0 	call	812d5c <htinit>
  812dc4:	8809883a 	mov	r4,r17
  812dc8:	980d883a 	mov	r6,r19
  812dcc:	01402174 	movhi	r5,133
  812dd0:	29725d04 	addi	r5,r5,-13964
  812dd4:	dfc00217 	ldw	ra,8(sp)
  812dd8:	dcc00117 	ldw	r19,4(sp)
  812ddc:	dc400017 	ldw	r17,0(sp)
  812de0:	dec00304 	addi	sp,sp,12
  812de4:	0812d5c1 	jmpi	812d5c <htinit>

00812de8 <rshift>:
  812de8:	2807d17a 	srai	r3,r5,5
  812dec:	20800417 	ldw	r2,16(r4)
  812df0:	22400504 	addi	r9,r4,20
  812df4:	480f883a 	mov	r7,r9
  812df8:	1880190e 	bge	r3,r2,812e60 <rshift+0x78>
  812dfc:	1085883a 	add	r2,r2,r2
  812e00:	18c7883a 	add	r3,r3,r3
  812e04:	1085883a 	add	r2,r2,r2
  812e08:	18c7883a 	add	r3,r3,r3
  812e0c:	294007cc 	andi	r5,r5,31
  812e10:	4891883a 	add	r8,r9,r2
  812e14:	48cd883a 	add	r6,r9,r3
  812e18:	28001726 	beq	r5,zero,812e78 <rshift+0x90>
  812e1c:	30c00017 	ldw	r3,0(r6)
  812e20:	00800804 	movi	r2,32
  812e24:	31800104 	addi	r6,r6,4
  812e28:	1155c83a 	sub	r10,r2,r5
  812e2c:	1946d83a 	srl	r3,r3,r5
  812e30:	3200092e 	bgeu	r6,r8,812e58 <rshift+0x70>
  812e34:	30800017 	ldw	r2,0(r6)
  812e38:	1284983a 	sll	r2,r2,r10
  812e3c:	10c4b03a 	or	r2,r2,r3
  812e40:	38800015 	stw	r2,0(r7)
  812e44:	30c00017 	ldw	r3,0(r6)
  812e48:	31800104 	addi	r6,r6,4
  812e4c:	39c00104 	addi	r7,r7,4
  812e50:	1946d83a 	srl	r3,r3,r5
  812e54:	323ff736 	bltu	r6,r8,812e34 <rshift+0x4c>
  812e58:	38c00015 	stw	r3,0(r7)
  812e5c:	18000c1e 	bne	r3,zero,812e90 <rshift+0xa8>
  812e60:	3a45c83a 	sub	r2,r7,r9
  812e64:	1005d0ba 	srai	r2,r2,2
  812e68:	20800415 	stw	r2,16(r4)
  812e6c:	1000011e 	bne	r2,zero,812e74 <rshift+0x8c>
  812e70:	20000515 	stw	zero,20(r4)
  812e74:	f800283a 	ret
  812e78:	323ff92e 	bgeu	r6,r8,812e60 <rshift+0x78>
  812e7c:	30800017 	ldw	r2,0(r6)
  812e80:	31800104 	addi	r6,r6,4
  812e84:	38800015 	stw	r2,0(r7)
  812e88:	39c00104 	addi	r7,r7,4
  812e8c:	003ffa06 	br	812e78 <rshift+0x90>
  812e90:	39c00104 	addi	r7,r7,4
  812e94:	003ff206 	br	812e60 <rshift+0x78>

00812e98 <__gethex>:
  812e98:	defff304 	addi	sp,sp,-52
  812e9c:	dd400815 	stw	r21,32(sp)
  812ea0:	dd000715 	stw	r20,28(sp)
  812ea4:	dcc00615 	stw	r19,24(sp)
  812ea8:	dc400415 	stw	r17,16(sp)
  812eac:	dfc00c15 	stw	ra,48(sp)
  812eb0:	df000b15 	stw	fp,44(sp)
  812eb4:	ddc00a15 	stw	r23,40(sp)
  812eb8:	dd800915 	stw	r22,36(sp)
  812ebc:	dc800515 	stw	r18,20(sp)
  812ec0:	dc000315 	stw	r16,12(sp)
  812ec4:	044038f4 	movhi	r17,227
  812ec8:	8c5a0e04 	addi	r17,r17,26680
  812ecc:	88800c03 	ldbu	r2,48(r17)
  812ed0:	202b883a 	mov	r21,r4
  812ed4:	2827883a 	mov	r19,r5
  812ed8:	3029883a 	mov	r20,r6
  812edc:	d9c00115 	stw	r7,4(sp)
  812ee0:	10006e26 	beq	r2,zero,81309c <__gethex+0x204>
  812ee4:	99800017 	ldw	r6,0(r19)
  812ee8:	00800c04 	movi	r2,48
  812eec:	31000083 	ldbu	r4,2(r6)
  812ef0:	30c00084 	addi	r3,r6,2
  812ef4:	20806f1e 	bne	r4,r2,8130b4 <__gethex+0x21c>
  812ef8:	200b883a 	mov	r5,r4
  812efc:	3007883a 	mov	r3,r6
  812f00:	188000c3 	ldbu	r2,3(r3)
  812f04:	18c00044 	addi	r3,r3,1
  812f08:	1009883a 	mov	r4,r2
  812f0c:	117ffc26 	beq	r2,r5,812f00 <__gethex+0x68>
  812f10:	1997c83a 	sub	r11,r3,r6
  812f14:	19400084 	addi	r5,r3,2
  812f18:	2445883a 	add	r2,r4,r17
  812f1c:	10c00003 	ldbu	r3,0(r2)
  812f20:	18002d26 	beq	r3,zero,812fd8 <__gethex+0x140>
  812f24:	29000003 	ldbu	r4,0(r5)
  812f28:	2825883a 	mov	r18,r5
  812f2c:	000d883a 	mov	r6,zero
  812f30:	0013883a 	mov	r9,zero
  812f34:	21003fcc 	andi	r4,r4,255
  812f38:	2445883a 	add	r2,r4,r17
  812f3c:	10c00003 	ldbu	r3,0(r2)
  812f40:	18000526 	beq	r3,zero,812f58 <__gethex+0xc0>
  812f44:	29400044 	addi	r5,r5,1
  812f48:	29000003 	ldbu	r4,0(r5)
  812f4c:	2445883a 	add	r2,r4,r17
  812f50:	10c00003 	ldbu	r3,0(r2)
  812f54:	183ffb1e 	bne	r3,zero,812f44 <__gethex+0xac>
  812f58:	00800b84 	movi	r2,46
  812f5c:	20805826 	beq	r4,r2,8130c0 <__gethex+0x228>
  812f60:	30007a26 	beq	r6,zero,81314c <__gethex+0x2b4>
  812f64:	2985c83a 	sub	r2,r5,r6
  812f68:	1085883a 	add	r2,r2,r2
  812f6c:	1085883a 	add	r2,r2,r2
  812f70:	00adc83a 	sub	r22,zero,r2
  812f74:	2821883a 	mov	r16,r5
  812f78:	80c00003 	ldbu	r3,0(r16)
  812f7c:	00801404 	movi	r2,80
  812f80:	18801e26 	beq	r3,r2,812ffc <__gethex+0x164>
  812f84:	00801c04 	movi	r2,112
  812f88:	18801c26 	beq	r3,r2,812ffc <__gethex+0x164>
  812f8c:	800d883a 	mov	r6,r16
  812f90:	4805003a 	cmpeq	r2,r9,zero
  812f94:	99800015 	stw	r6,0(r19)
  812f98:	1000861e 	bne	r2,zero,8131b4 <__gethex+0x31c>
  812f9c:	58003d26 	beq	r11,zero,813094 <__gethex+0x1fc>
  812fa0:	0025883a 	mov	r18,zero
  812fa4:	9005883a 	mov	r2,r18
  812fa8:	dfc00c17 	ldw	ra,48(sp)
  812fac:	df000b17 	ldw	fp,44(sp)
  812fb0:	ddc00a17 	ldw	r23,40(sp)
  812fb4:	dd800917 	ldw	r22,36(sp)
  812fb8:	dd400817 	ldw	r21,32(sp)
  812fbc:	dd000717 	ldw	r20,28(sp)
  812fc0:	dcc00617 	ldw	r19,24(sp)
  812fc4:	dc800517 	ldw	r18,20(sp)
  812fc8:	dc400417 	ldw	r17,16(sp)
  812fcc:	dc000317 	ldw	r16,12(sp)
  812fd0:	dec00d04 	addi	sp,sp,52
  812fd4:	f800283a 	ret
  812fd8:	00800b84 	movi	r2,46
  812fdc:	20804a26 	beq	r4,r2,813108 <__gethex+0x270>
  812fe0:	2821883a 	mov	r16,r5
  812fe4:	80c00003 	ldbu	r3,0(r16)
  812fe8:	00801404 	movi	r2,80
  812fec:	2825883a 	mov	r18,r5
  812ff0:	02400044 	movi	r9,1
  812ff4:	002d883a 	mov	r22,zero
  812ff8:	18bfe21e 	bne	r3,r2,812f84 <__gethex+0xec>
  812ffc:	80c00043 	ldbu	r3,1(r16)
  813000:	00800ac4 	movi	r2,43
  813004:	81000044 	addi	r4,r16,1
  813008:	18804a26 	beq	r3,r2,813134 <__gethex+0x29c>
  81300c:	00800b44 	movi	r2,45
  813010:	18804c26 	beq	r3,r2,813144 <__gethex+0x2ac>
  813014:	0015883a 	mov	r10,zero
  813018:	1c45883a 	add	r2,r3,r17
  81301c:	10800003 	ldbu	r2,0(r2)
  813020:	103fda26 	beq	r2,zero,812f8c <__gethex+0xf4>
  813024:	02000644 	movi	r8,25
  813028:	40bfd816 	blt	r8,r2,812f8c <__gethex+0xf4>
  81302c:	20c00043 	ldbu	r3,1(r4)
  813030:	11fffc04 	addi	r7,r2,-16
  813034:	008038f4 	movhi	r2,227
  813038:	109a0e04 	addi	r2,r2,26680
  81303c:	1887883a 	add	r3,r3,r2
  813040:	18800003 	ldbu	r2,0(r3)
  813044:	21800044 	addi	r6,r4,1
  813048:	10000d26 	beq	r2,zero,813080 <__gethex+0x1e8>
  81304c:	100b883a 	mov	r5,r2
  813050:	4080020e 	bge	r8,r2,81305c <__gethex+0x1c4>
  813054:	00000a06 	br	813080 <__gethex+0x1e8>
  813058:	41000916 	blt	r8,r4,813080 <__gethex+0x1e8>
  81305c:	31800044 	addi	r6,r6,1
  813060:	30800003 	ldbu	r2,0(r6)
  813064:	38c002a4 	muli	r3,r7,10
  813068:	1445883a 	add	r2,r2,r17
  81306c:	11000003 	ldbu	r4,0(r2)
  813070:	1947883a 	add	r3,r3,r5
  813074:	19fffc04 	addi	r7,r3,-16
  813078:	200b883a 	mov	r5,r4
  81307c:	203ff61e 	bne	r4,zero,813058 <__gethex+0x1c0>
  813080:	5005003a 	cmpeq	r2,r10,zero
  813084:	1000011e 	bne	r2,zero,81308c <__gethex+0x1f4>
  813088:	01cfc83a 	sub	r7,zero,r7
  81308c:	b1ed883a 	add	r22,r22,r7
  813090:	003fbf06 	br	812f90 <__gethex+0xf8>
  813094:	04800184 	movi	r18,6
  813098:	003fc206 	br	812fa4 <__gethex+0x10c>
  81309c:	0812d800 	call	812d80 <__hexdig_init>
  8130a0:	99800017 	ldw	r6,0(r19)
  8130a4:	00800c04 	movi	r2,48
  8130a8:	31000083 	ldbu	r4,2(r6)
  8130ac:	30c00084 	addi	r3,r6,2
  8130b0:	20bf9126 	beq	r4,r2,812ef8 <__gethex+0x60>
  8130b4:	180b883a 	mov	r5,r3
  8130b8:	0017883a 	mov	r11,zero
  8130bc:	003f9606 	br	812f18 <__gethex+0x80>
  8130c0:	303fa81e 	bne	r6,zero,812f64 <__gethex+0xcc>
  8130c4:	29400044 	addi	r5,r5,1
  8130c8:	28800003 	ldbu	r2,0(r5)
  8130cc:	1445883a 	add	r2,r2,r17
  8130d0:	10c00003 	ldbu	r3,0(r2)
  8130d4:	1800ad26 	beq	r3,zero,81338c <__gethex+0x4f4>
  8130d8:	2809883a 	mov	r4,r5
  8130dc:	21000044 	addi	r4,r4,1
  8130e0:	20800003 	ldbu	r2,0(r4)
  8130e4:	1445883a 	add	r2,r2,r17
  8130e8:	10c00003 	ldbu	r3,0(r2)
  8130ec:	183ffb1e 	bne	r3,zero,8130dc <__gethex+0x244>
  8130f0:	2145c83a 	sub	r2,r4,r5
  8130f4:	1085883a 	add	r2,r2,r2
  8130f8:	1085883a 	add	r2,r2,r2
  8130fc:	00adc83a 	sub	r22,zero,r2
  813100:	200b883a 	mov	r5,r4
  813104:	003f9b06 	br	812f74 <__gethex+0xdc>
  813108:	29000043 	ldbu	r4,1(r5)
  81310c:	008038f4 	movhi	r2,227
  813110:	109a0e04 	addi	r2,r2,26680
  813114:	2c000044 	addi	r16,r5,1
  813118:	2085883a 	add	r2,r4,r2
  81311c:	10c00003 	ldbu	r3,0(r2)
  813120:	18000d1e 	bne	r3,zero,813158 <__gethex+0x2c0>
  813124:	2825883a 	mov	r18,r5
  813128:	02400044 	movi	r9,1
  81312c:	002d883a 	mov	r22,zero
  813130:	003f9106 	br	812f78 <__gethex+0xe0>
  813134:	0015883a 	mov	r10,zero
  813138:	21000044 	addi	r4,r4,1
  81313c:	20c00003 	ldbu	r3,0(r4)
  813140:	003fb506 	br	813018 <__gethex+0x180>
  813144:	02800044 	movi	r10,1
  813148:	003ffb06 	br	813138 <__gethex+0x2a0>
  81314c:	2821883a 	mov	r16,r5
  813150:	002d883a 	mov	r22,zero
  813154:	003f8806 	br	812f78 <__gethex+0xe0>
  813158:	00800c04 	movi	r2,48
  81315c:	20800e1e 	bne	r4,r2,813198 <__gethex+0x300>
  813160:	2007883a 	mov	r3,r4
  813164:	800b883a 	mov	r5,r16
  813168:	29400044 	addi	r5,r5,1
  81316c:	29000003 	ldbu	r4,0(r5)
  813170:	20803fcc 	andi	r2,r4,255
  813174:	10fffc26 	beq	r2,r3,813168 <__gethex+0x2d0>
  813178:	1445883a 	add	r2,r2,r17
  81317c:	10c00003 	ldbu	r3,0(r2)
  813180:	1800071e 	bne	r3,zero,8131a0 <__gethex+0x308>
  813184:	02c00044 	movi	r11,1
  813188:	800d883a 	mov	r6,r16
  81318c:	2825883a 	mov	r18,r5
  813190:	5813883a 	mov	r9,r11
  813194:	003f6706 	br	812f34 <__gethex+0x9c>
  813198:	81000003 	ldbu	r4,0(r16)
  81319c:	800b883a 	mov	r5,r16
  8131a0:	800d883a 	mov	r6,r16
  8131a4:	2825883a 	mov	r18,r5
  8131a8:	02c00044 	movi	r11,1
  8131ac:	0013883a 	mov	r9,zero
  8131b0:	003f6006 	br	812f34 <__gethex+0x9c>
  8131b4:	8485c83a 	sub	r2,r16,r18
  8131b8:	10bfffc4 	addi	r2,r2,-1
  8131bc:	00c001c4 	movi	r3,7
  8131c0:	1880700e 	bge	r3,r2,813384 <__gethex+0x4ec>
  8131c4:	000b883a 	mov	r5,zero
  8131c8:	1005d07a 	srai	r2,r2,1
  8131cc:	29400044 	addi	r5,r5,1
  8131d0:	18bffd16 	blt	r3,r2,8131c8 <__gethex+0x330>
  8131d4:	a809883a 	mov	r4,r21
  8131d8:	080f5fc0 	call	80f5fc <_Balloc>
  8131dc:	1027883a 	mov	r19,r2
  8131e0:	10800504 	addi	r2,r2,20
  8131e4:	d8800215 	stw	r2,8(sp)
  8131e8:	9400522e 	bgeu	r18,r16,813334 <__gethex+0x49c>
  8131ec:	da000217 	ldw	r8,8(sp)
  8131f0:	800b883a 	mov	r5,r16
  8131f4:	000f883a 	mov	r7,zero
  8131f8:	0009883a 	mov	r4,zero
  8131fc:	02400b84 	movi	r9,46
  813200:	02800804 	movi	r10,32
  813204:	297fffc4 	addi	r5,r5,-1
  813208:	28c00003 	ldbu	r3,0(r5)
  81320c:	1a400826 	beq	r3,r9,813230 <__gethex+0x398>
  813210:	380d883a 	mov	r6,r7
  813214:	3a802726 	beq	r7,r10,8132b4 <__gethex+0x41c>
  813218:	39c00104 	addi	r7,r7,4
  81321c:	1c47883a 	add	r3,r3,r17
  813220:	18800003 	ldbu	r2,0(r3)
  813224:	108003cc 	andi	r2,r2,15
  813228:	1184983a 	sll	r2,r2,r6
  81322c:	2088b03a 	or	r4,r4,r2
  813230:	917ff436 	bltu	r18,r5,813204 <__gethex+0x36c>
  813234:	d8c00217 	ldw	r3,8(sp)
  813238:	40800104 	addi	r2,r8,4
  81323c:	41000015 	stw	r4,0(r8)
  813240:	10c5c83a 	sub	r2,r2,r3
  813244:	1021d0ba 	srai	r16,r2,2
  813248:	9c000415 	stw	r16,16(r19)
  81324c:	080f0a40 	call	80f0a4 <__hi0bits>
  813250:	8006917a 	slli	r3,r16,5
  813254:	a5c00017 	ldw	r23,0(r20)
  813258:	1885c83a 	sub	r2,r3,r2
  81325c:	b8801c16 	blt	r23,r2,8132d0 <__gethex+0x438>
  813260:	15c00a16 	blt	r2,r23,81328c <__gethex+0x3f4>
  813264:	0039883a 	mov	fp,zero
  813268:	a0800217 	ldw	r2,8(r20)
  81326c:	1580340e 	bge	r2,r22,813340 <__gethex+0x4a8>
  813270:	a809883a 	mov	r4,r21
  813274:	980b883a 	mov	r5,r19
  813278:	080f07c0 	call	80f07c <_Bfree>
  81327c:	d8c00d17 	ldw	r3,52(sp)
  813280:	048028c4 	movi	r18,163
  813284:	18000015 	stw	zero,0(r3)
  813288:	003f4606 	br	812fa4 <__gethex+0x10c>
  81328c:	b8a1c83a 	sub	r16,r23,r2
  813290:	980b883a 	mov	r5,r19
  813294:	a809883a 	mov	r4,r21
  813298:	800d883a 	mov	r6,r16
  81329c:	080f9c00 	call	80f9c0 <__lshift>
  8132a0:	1027883a 	mov	r19,r2
  8132a4:	b42dc83a 	sub	r22,r22,r16
  8132a8:	10800504 	addi	r2,r2,20
  8132ac:	d8800215 	stw	r2,8(sp)
  8132b0:	003fec06 	br	813264 <__gethex+0x3cc>
  8132b4:	41000015 	stw	r4,0(r8)
  8132b8:	28c00003 	ldbu	r3,0(r5)
  8132bc:	01c00104 	movi	r7,4
  8132c0:	000d883a 	mov	r6,zero
  8132c4:	41d1883a 	add	r8,r8,r7
  8132c8:	0009883a 	mov	r4,zero
  8132cc:	003fd306 	br	81321c <__gethex+0x384>
  8132d0:	15e1c83a 	sub	r16,r2,r23
  8132d4:	9809883a 	mov	r4,r19
  8132d8:	800b883a 	mov	r5,r16
  8132dc:	080f5740 	call	80f574 <__any_on>
  8132e0:	1000061e 	bne	r2,zero,8132fc <__gethex+0x464>
  8132e4:	0039883a 	mov	fp,zero
  8132e8:	9809883a 	mov	r4,r19
  8132ec:	800b883a 	mov	r5,r16
  8132f0:	0812de80 	call	812de8 <rshift>
  8132f4:	b42d883a 	add	r22,r22,r16
  8132f8:	003fdb06 	br	813268 <__gethex+0x3d0>
  8132fc:	817fffc4 	addi	r5,r16,-1
  813300:	2805d17a 	srai	r2,r5,5
  813304:	d8c00217 	ldw	r3,8(sp)
  813308:	290007cc 	andi	r4,r5,31
  81330c:	1085883a 	add	r2,r2,r2
  813310:	1085883a 	add	r2,r2,r2
  813314:	01800044 	movi	r6,1
  813318:	10c5883a 	add	r2,r2,r3
  81331c:	3108983a 	sll	r4,r6,r4
  813320:	10c00017 	ldw	r3,0(r2)
  813324:	20c8703a 	and	r4,r4,r3
  813328:	20001a1e 	bne	r4,zero,813394 <__gethex+0x4fc>
  81332c:	3039883a 	mov	fp,r6
  813330:	003fed06 	br	8132e8 <__gethex+0x450>
  813334:	1011883a 	mov	r8,r2
  813338:	0009883a 	mov	r4,zero
  81333c:	003fbd06 	br	813234 <__gethex+0x39c>
  813340:	a1000117 	ldw	r4,4(r20)
  813344:	b1001a16 	blt	r22,r4,8133b0 <__gethex+0x518>
  813348:	04800044 	movi	r18,1
  81334c:	e0000826 	beq	fp,zero,813370 <__gethex+0x4d8>
  813350:	a1000317 	ldw	r4,12(r20)
  813354:	00800084 	movi	r2,2
  813358:	20809426 	beq	r4,r2,8135ac <__gethex+0x714>
  81335c:	008000c4 	movi	r2,3
  813360:	20805826 	beq	r4,r2,8134c4 <__gethex+0x62c>
  813364:	00800044 	movi	r2,1
  813368:	20803f26 	beq	r4,r2,813468 <__gethex+0x5d0>
  81336c:	94800414 	ori	r18,r18,16
  813370:	d8800d17 	ldw	r2,52(sp)
  813374:	d8c00117 	ldw	r3,4(sp)
  813378:	14c00015 	stw	r19,0(r2)
  81337c:	1d800015 	stw	r22,0(r3)
  813380:	003f0806 	br	812fa4 <__gethex+0x10c>
  813384:	000b883a 	mov	r5,zero
  813388:	003f9206 	br	8131d4 <__gethex+0x33c>
  81338c:	002d883a 	mov	r22,zero
  813390:	003ef806 	br	812f74 <__gethex+0xdc>
  813394:	3140160e 	bge	r6,r5,8133f0 <__gethex+0x558>
  813398:	9809883a 	mov	r4,r19
  81339c:	817fff84 	addi	r5,r16,-2
  8133a0:	080f5740 	call	80f574 <__any_on>
  8133a4:	10001226 	beq	r2,zero,8133f0 <__gethex+0x558>
  8133a8:	070000c4 	movi	fp,3
  8133ac:	003fce06 	br	8132e8 <__gethex+0x450>
  8133b0:	25a3c83a 	sub	r17,r4,r22
  8133b4:	8dc01016 	blt	r17,r23,8133f8 <__gethex+0x560>
  8133b8:	a0c00317 	ldw	r3,12(r20)
  8133bc:	00800084 	movi	r2,2
  8133c0:	18809326 	beq	r3,r2,813610 <__gethex+0x778>
  8133c4:	008000c4 	movi	r2,3
  8133c8:	18808e26 	beq	r3,r2,813604 <__gethex+0x76c>
  8133cc:	00800044 	movi	r2,1
  8133d0:	18807b26 	beq	r3,r2,8135c0 <__gethex+0x728>
  8133d4:	a809883a 	mov	r4,r21
  8133d8:	980b883a 	mov	r5,r19
  8133dc:	080f07c0 	call	80f07c <_Bfree>
  8133e0:	d8c00d17 	ldw	r3,52(sp)
  8133e4:	04801404 	movi	r18,80
  8133e8:	18000015 	stw	zero,0(r3)
  8133ec:	003eed06 	br	812fa4 <__gethex+0x10c>
  8133f0:	07000084 	movi	fp,2
  8133f4:	003fbc06 	br	8132e8 <__gethex+0x450>
  8133f8:	8c3fffc4 	addi	r16,r17,-1
  8133fc:	e0001426 	beq	fp,zero,813450 <__gethex+0x5b8>
  813400:	07000044 	movi	fp,1
  813404:	8005d17a 	srai	r2,r16,5
  813408:	d8c00217 	ldw	r3,8(sp)
  81340c:	814007cc 	andi	r5,r16,31
  813410:	1085883a 	add	r2,r2,r2
  813414:	1085883a 	add	r2,r2,r2
  813418:	10c5883a 	add	r2,r2,r3
  81341c:	00c00044 	movi	r3,1
  813420:	1946983a 	sll	r3,r3,r5
  813424:	11000017 	ldw	r4,0(r2)
  813428:	1906703a 	and	r3,r3,r4
  81342c:	18000126 	beq	r3,zero,813434 <__gethex+0x59c>
  813430:	e7000094 	ori	fp,fp,2
  813434:	880b883a 	mov	r5,r17
  813438:	9809883a 	mov	r4,r19
  81343c:	0812de80 	call	812de8 <rshift>
  813440:	a5800117 	ldw	r22,4(r20)
  813444:	bc6fc83a 	sub	r23,r23,r17
  813448:	04800084 	movi	r18,2
  81344c:	003fbf06 	br	81334c <__gethex+0x4b4>
  813450:	043fec0e 	bge	zero,r16,813404 <__gethex+0x56c>
  813454:	9809883a 	mov	r4,r19
  813458:	800b883a 	mov	r5,r16
  81345c:	080f5740 	call	80f574 <__any_on>
  813460:	1039883a 	mov	fp,r2
  813464:	003fe706 	br	813404 <__gethex+0x56c>
  813468:	e080008c 	andi	r2,fp,2
  81346c:	103fbf26 	beq	r2,zero,81336c <__gethex+0x4d4>
  813470:	d8c00217 	ldw	r3,8(sp)
  813474:	18800017 	ldw	r2,0(r3)
  813478:	e084b03a 	or	r2,fp,r2
  81347c:	1104703a 	and	r2,r2,r4
  813480:	103fba26 	beq	r2,zero,81336c <__gethex+0x4d4>
  813484:	9c000417 	ldw	r16,16(r19)
  813488:	d8c00217 	ldw	r3,8(sp)
  81348c:	017fffc4 	movi	r5,-1
  813490:	8405883a 	add	r2,r16,r16
  813494:	10b9883a 	add	fp,r2,r2
  813498:	1f09883a 	add	r4,r3,fp
  81349c:	dc000015 	stw	r16,0(sp)
  8134a0:	00000306 	br	8134b0 <__gethex+0x618>
  8134a4:	18000015 	stw	zero,0(r3)
  8134a8:	18c00104 	addi	r3,r3,4
  8134ac:	1900082e 	bgeu	r3,r4,8134d0 <__gethex+0x638>
  8134b0:	18800017 	ldw	r2,0(r3)
  8134b4:	117ffb26 	beq	r2,r5,8134a4 <__gethex+0x60c>
  8134b8:	10800044 	addi	r2,r2,1
  8134bc:	18800015 	stw	r2,0(r3)
  8134c0:	00001f06 	br	813540 <__gethex+0x6a8>
  8134c4:	d8800e17 	ldw	r2,56(sp)
  8134c8:	103fa826 	beq	r2,zero,81336c <__gethex+0x4d4>
  8134cc:	003fed06 	br	813484 <__gethex+0x5ec>
  8134d0:	98800217 	ldw	r2,8(r19)
  8134d4:	80801316 	blt	r16,r2,813524 <__gethex+0x68c>
  8134d8:	99400117 	ldw	r5,4(r19)
  8134dc:	a809883a 	mov	r4,r21
  8134e0:	29400044 	addi	r5,r5,1
  8134e4:	080f5fc0 	call	80f5fc <_Balloc>
  8134e8:	99800417 	ldw	r6,16(r19)
  8134ec:	99400304 	addi	r5,r19,12
  8134f0:	11000304 	addi	r4,r2,12
  8134f4:	318d883a 	add	r6,r6,r6
  8134f8:	318d883a 	add	r6,r6,r6
  8134fc:	31800204 	addi	r6,r6,8
  813500:	1023883a 	mov	r17,r2
  813504:	08073380 	call	807338 <memcpy>
  813508:	980b883a 	mov	r5,r19
  81350c:	a809883a 	mov	r4,r21
  813510:	080f07c0 	call	80f07c <_Bfree>
  813514:	8c000417 	ldw	r16,16(r17)
  813518:	88800504 	addi	r2,r17,20
  81351c:	8827883a 	mov	r19,r17
  813520:	d8800215 	stw	r2,8(sp)
  813524:	8405883a 	add	r2,r16,r16
  813528:	1085883a 	add	r2,r2,r2
  81352c:	14c5883a 	add	r2,r2,r19
  813530:	84000044 	addi	r16,r16,1
  813534:	00c00044 	movi	r3,1
  813538:	10c00515 	stw	r3,20(r2)
  81353c:	9c000415 	stw	r16,16(r19)
  813540:	00800084 	movi	r2,2
  813544:	90801426 	beq	r18,r2,813598 <__gethex+0x700>
  813548:	d8800017 	ldw	r2,0(sp)
  81354c:	14000b16 	blt	r2,r16,81357c <__gethex+0x6e4>
  813550:	bc0007cc 	andi	r16,r23,31
  813554:	8000021e 	bne	r16,zero,813560 <__gethex+0x6c8>
  813558:	94800814 	ori	r18,r18,32
  81355c:	003f8406 	br	813370 <__gethex+0x4d8>
  813560:	d8c00217 	ldw	r3,8(sp)
  813564:	1f05883a 	add	r2,r3,fp
  813568:	113fff17 	ldw	r4,-4(r2)
  81356c:	080f0a40 	call	80f0a4 <__hi0bits>
  813570:	00c00804 	movi	r3,32
  813574:	1c07c83a 	sub	r3,r3,r16
  813578:	10fff70e 	bge	r2,r3,813558 <__gethex+0x6c0>
  81357c:	9809883a 	mov	r4,r19
  813580:	01400044 	movi	r5,1
  813584:	0812de80 	call	812de8 <rshift>
  813588:	a0800217 	ldw	r2,8(r20)
  81358c:	b5800044 	addi	r22,r22,1
  813590:	15bf3716 	blt	r2,r22,813270 <__gethex+0x3d8>
  813594:	003ff006 	br	813558 <__gethex+0x6c0>
  813598:	a0800017 	ldw	r2,0(r20)
  81359c:	10bfffc4 	addi	r2,r2,-1
  8135a0:	b8801e26 	beq	r23,r2,81361c <__gethex+0x784>
  8135a4:	04800884 	movi	r18,34
  8135a8:	003f7106 	br	813370 <__gethex+0x4d8>
  8135ac:	d8c00e17 	ldw	r3,56(sp)
  8135b0:	00800044 	movi	r2,1
  8135b4:	10c5c83a 	sub	r2,r2,r3
  8135b8:	103f6c26 	beq	r2,zero,81336c <__gethex+0x4d4>
  8135bc:	003fb106 	br	813484 <__gethex+0x5ec>
  8135c0:	bc7f841e 	bne	r23,r17,8133d4 <__gethex+0x53c>
  8135c4:	1dc0050e 	bge	r3,r23,8135dc <__gethex+0x744>
  8135c8:	b8cbc83a 	sub	r5,r23,r3
  8135cc:	9809883a 	mov	r4,r19
  8135d0:	080f5740 	call	80f574 <__any_on>
  8135d4:	103f7f26 	beq	r2,zero,8133d4 <__gethex+0x53c>
  8135d8:	a1000117 	ldw	r4,4(r20)
  8135dc:	d8800117 	ldw	r2,4(sp)
  8135e0:	d8c00217 	ldw	r3,8(sp)
  8135e4:	04000044 	movi	r16,1
  8135e8:	11000015 	stw	r4,0(r2)
  8135ec:	d8800d17 	ldw	r2,52(sp)
  8135f0:	04801884 	movi	r18,98
  8135f4:	1c000015 	stw	r16,0(r3)
  8135f8:	14c00015 	stw	r19,0(r2)
  8135fc:	9c000415 	stw	r16,16(r19)
  813600:	003e6806 	br	812fa4 <__gethex+0x10c>
  813604:	d8c00e17 	ldw	r3,56(sp)
  813608:	183f7226 	beq	r3,zero,8133d4 <__gethex+0x53c>
  81360c:	003ff306 	br	8135dc <__gethex+0x744>
  813610:	d8800e17 	ldw	r2,56(sp)
  813614:	103ff126 	beq	r2,zero,8135dc <__gethex+0x744>
  813618:	003f6e06 	br	8133d4 <__gethex+0x53c>
  81361c:	b805d17a 	srai	r2,r23,5
  813620:	d8c00217 	ldw	r3,8(sp)
  813624:	b94007cc 	andi	r5,r23,31
  813628:	1085883a 	add	r2,r2,r2
  81362c:	1085883a 	add	r2,r2,r2
  813630:	10c5883a 	add	r2,r2,r3
  813634:	00c00044 	movi	r3,1
  813638:	1946983a 	sll	r3,r3,r5
  81363c:	11000017 	ldw	r4,0(r2)
  813640:	1906703a 	and	r3,r3,r4
  813644:	183fd726 	beq	r3,zero,8135a4 <__gethex+0x70c>
  813648:	04800844 	movi	r18,33
  81364c:	003f4806 	br	813370 <__gethex+0x4d8>

00813650 <L_shift>:
  813650:	00800204 	movi	r2,8
  813654:	1185c83a 	sub	r2,r2,r6
  813658:	1085883a 	add	r2,r2,r2
  81365c:	21c00017 	ldw	r7,0(r4)
  813660:	1093883a 	add	r9,r2,r2
  813664:	00800804 	movi	r2,32
  813668:	200d883a 	mov	r6,r4
  81366c:	1251c83a 	sub	r8,r2,r9
  813670:	31800104 	addi	r6,r6,4
  813674:	3805883a 	mov	r2,r7
  813678:	31c00017 	ldw	r7,0(r6)
  81367c:	3a08983a 	sll	r4,r7,r8
  813680:	3a46d83a 	srl	r3,r7,r9
  813684:	1104b03a 	or	r2,r2,r4
  813688:	180f883a 	mov	r7,r3
  81368c:	30bfff15 	stw	r2,-4(r6)
  813690:	30c00015 	stw	r3,0(r6)
  813694:	317ff636 	bltu	r6,r5,813670 <L_shift+0x20>
  813698:	f800283a 	ret

0081369c <__hexnan>:
  81369c:	defff404 	addi	sp,sp,-48
  8136a0:	dd800815 	stw	r22,32(sp)
  8136a4:	058038f4 	movhi	r22,227
  8136a8:	b59a0e04 	addi	r22,r22,26680
  8136ac:	b0800c03 	ldbu	r2,48(r22)
  8136b0:	dcc00515 	stw	r19,20(sp)
  8136b4:	dc000215 	stw	r16,8(sp)
  8136b8:	dfc00b15 	stw	ra,44(sp)
  8136bc:	df000a15 	stw	fp,40(sp)
  8136c0:	ddc00915 	stw	r23,36(sp)
  8136c4:	dd400715 	stw	r21,28(sp)
  8136c8:	dd000615 	stw	r20,24(sp)
  8136cc:	dc800415 	stw	r18,16(sp)
  8136d0:	dc400315 	stw	r17,12(sp)
  8136d4:	d9000115 	stw	r4,4(sp)
  8136d8:	2821883a 	mov	r16,r5
  8136dc:	3027883a 	mov	r19,r6
  8136e0:	10007426 	beq	r2,zero,8138b4 <__hexnan+0x218>
  8136e4:	80c00017 	ldw	r3,0(r16)
  8136e8:	1805d17a 	srai	r2,r3,5
  8136ec:	18c007cc 	andi	r3,r3,31
  8136f0:	1839003a 	cmpeq	fp,r3,zero
  8136f4:	1085883a 	add	r2,r2,r2
  8136f8:	1085883a 	add	r2,r2,r2
  8136fc:	d8c00015 	stw	r3,0(sp)
  813700:	14c5883a 	add	r2,r2,r19
  813704:	e000011e 	bne	fp,zero,81370c <__hexnan+0x70>
  813708:	10800104 	addi	r2,r2,4
  81370c:	d8c00117 	ldw	r3,4(sp)
  813710:	153fff04 	addi	r20,r2,-4
  813714:	a021883a 	mov	r16,r20
  813718:	1c400017 	ldw	r17,0(r3)
  81371c:	a02b883a 	mov	r21,r20
  813720:	0025883a 	mov	r18,zero
  813724:	002f883a 	mov	r23,zero
  813728:	000d883a 	mov	r6,zero
  81372c:	103fff15 	stw	zero,-4(r2)
  813730:	8c400044 	addi	r17,r17,1
  813734:	89000003 	ldbu	r4,0(r17)
  813738:	20000e26 	beq	r4,zero,813774 <__hexnan+0xd8>
  81373c:	2585883a 	add	r2,r4,r22
  813740:	10c00003 	ldbu	r3,0(r2)
  813744:	18002e1e 	bne	r3,zero,813800 <__hexnan+0x164>
  813748:	00800804 	movi	r2,32
  81374c:	11005536 	bltu	r2,r4,8138a4 <__hexnan+0x208>
  813750:	bcbff70e 	bge	r23,r18,813730 <__hexnan+0x94>
  813754:	8540022e 	bgeu	r16,r21,813760 <__hexnan+0xc4>
  813758:	008001c4 	movi	r2,7
  81375c:	11803c0e 	bge	r2,r6,813850 <__hexnan+0x1b4>
  813760:	9c003536 	bltu	r19,r16,813838 <__hexnan+0x19c>
  813764:	8c400044 	addi	r17,r17,1
  813768:	89000003 	ldbu	r4,0(r17)
  81376c:	01800204 	movi	r6,8
  813770:	203ff21e 	bne	r4,zero,81373c <__hexnan+0xa0>
  813774:	90004d26 	beq	r18,zero,8138ac <__hexnan+0x210>
  813778:	85404336 	bltu	r16,r21,813888 <__hexnan+0x1ec>
  81377c:	9c00382e 	bgeu	r19,r16,813860 <__hexnan+0x1c4>
  813780:	9807883a 	mov	r3,r19
  813784:	80800017 	ldw	r2,0(r16)
  813788:	84000104 	addi	r16,r16,4
  81378c:	18800015 	stw	r2,0(r3)
  813790:	18c00104 	addi	r3,r3,4
  813794:	a43ffb2e 	bgeu	r20,r16,813784 <__hexnan+0xe8>
  813798:	18000015 	stw	zero,0(r3)
  81379c:	18c00104 	addi	r3,r3,4
  8137a0:	a0fffd2e 	bgeu	r20,r3,813798 <__hexnan+0xfc>
  8137a4:	a0800017 	ldw	r2,0(r20)
  8137a8:	1000071e 	bne	r2,zero,8137c8 <__hexnan+0x12c>
  8137ac:	9d004326 	beq	r19,r20,8138bc <__hexnan+0x220>
  8137b0:	a007883a 	mov	r3,r20
  8137b4:	00000106 	br	8137bc <__hexnan+0x120>
  8137b8:	98c04026 	beq	r19,r3,8138bc <__hexnan+0x220>
  8137bc:	18ffff04 	addi	r3,r3,-4
  8137c0:	18800017 	ldw	r2,0(r3)
  8137c4:	103ffc26 	beq	r2,zero,8137b8 <__hexnan+0x11c>
  8137c8:	00c00144 	movi	r3,5
  8137cc:	1805883a 	mov	r2,r3
  8137d0:	dfc00b17 	ldw	ra,44(sp)
  8137d4:	df000a17 	ldw	fp,40(sp)
  8137d8:	ddc00917 	ldw	r23,36(sp)
  8137dc:	dd800817 	ldw	r22,32(sp)
  8137e0:	dd400717 	ldw	r21,28(sp)
  8137e4:	dd000617 	ldw	r20,24(sp)
  8137e8:	dcc00517 	ldw	r19,20(sp)
  8137ec:	dc800417 	ldw	r18,16(sp)
  8137f0:	dc400317 	ldw	r17,12(sp)
  8137f4:	dc000217 	ldw	r16,8(sp)
  8137f8:	dec00c04 	addi	sp,sp,48
  8137fc:	f800283a 	ret
  813800:	31800044 	addi	r6,r6,1
  813804:	00800204 	movi	r2,8
  813808:	94800044 	addi	r18,r18,1
  81380c:	1180040e 	bge	r2,r6,813820 <__hexnan+0x184>
  813810:	9c3fc72e 	bgeu	r19,r16,813730 <__hexnan+0x94>
  813814:	843fff04 	addi	r16,r16,-4
  813818:	80000015 	stw	zero,0(r16)
  81381c:	01800044 	movi	r6,1
  813820:	80800017 	ldw	r2,0(r16)
  813824:	18c003cc 	andi	r3,r3,15
  813828:	1004913a 	slli	r2,r2,4
  81382c:	10c4b03a 	or	r2,r2,r3
  813830:	80800015 	stw	r2,0(r16)
  813834:	003fbe06 	br	813730 <__hexnan+0x94>
  813838:	843fff04 	addi	r16,r16,-4
  81383c:	802b883a 	mov	r21,r16
  813840:	902f883a 	mov	r23,r18
  813844:	000d883a 	mov	r6,zero
  813848:	80000015 	stw	zero,0(r16)
  81384c:	003fb806 	br	813730 <__hexnan+0x94>
  813850:	8009883a 	mov	r4,r16
  813854:	a80b883a 	mov	r5,r21
  813858:	08136500 	call	813650 <L_shift>
  81385c:	003fc006 	br	813760 <__hexnan+0xc4>
  813860:	e03fd01e 	bne	fp,zero,8137a4 <__hexnan+0x108>
  813864:	d8c00017 	ldw	r3,0(sp)
  813868:	00800804 	movi	r2,32
  81386c:	10c5c83a 	sub	r2,r2,r3
  813870:	00ffffc4 	movi	r3,-1
  813874:	1886d83a 	srl	r3,r3,r2
  813878:	a0800017 	ldw	r2,0(r20)
  81387c:	10c4703a 	and	r2,r2,r3
  813880:	a0800015 	stw	r2,0(r20)
  813884:	003fc806 	br	8137a8 <__hexnan+0x10c>
  813888:	008001c4 	movi	r2,7
  81388c:	11bfbb16 	blt	r2,r6,81377c <__hexnan+0xe0>
  813890:	a80b883a 	mov	r5,r21
  813894:	8009883a 	mov	r4,r16
  813898:	08136500 	call	813650 <L_shift>
  81389c:	9c3ff02e 	bgeu	r19,r16,813860 <__hexnan+0x1c4>
  8138a0:	003fb706 	br	813780 <__hexnan+0xe4>
  8138a4:	00800a44 	movi	r2,41
  8138a8:	20800826 	beq	r4,r2,8138cc <__hexnan+0x230>
  8138ac:	00c00104 	movi	r3,4
  8138b0:	003fc606 	br	8137cc <__hexnan+0x130>
  8138b4:	0812d800 	call	812d80 <__hexdig_init>
  8138b8:	003f8a06 	br	8136e4 <__hexnan+0x48>
  8138bc:	00800044 	movi	r2,1
  8138c0:	00c00144 	movi	r3,5
  8138c4:	98800015 	stw	r2,0(r19)
  8138c8:	003fc006 	br	8137cc <__hexnan+0x130>
  8138cc:	903ff726 	beq	r18,zero,8138ac <__hexnan+0x210>
  8138d0:	d8c00117 	ldw	r3,4(sp)
  8138d4:	88800044 	addi	r2,r17,1
  8138d8:	18800015 	stw	r2,0(r3)
  8138dc:	857fa72e 	bgeu	r16,r21,81377c <__hexnan+0xe0>
  8138e0:	003fe906 	br	813888 <__hexnan+0x1ec>

008138e4 <__muldi3>:
  8138e4:	2011883a 	mov	r8,r4
  8138e8:	427fffcc 	andi	r9,r8,65535
  8138ec:	4018d43a 	srli	r12,r8,16
  8138f0:	32bfffcc 	andi	r10,r6,65535
  8138f4:	3016d43a 	srli	r11,r6,16
  8138f8:	4a85383a 	mul	r2,r9,r10
  8138fc:	6295383a 	mul	r10,r12,r10
  813900:	4ad3383a 	mul	r9,r9,r11
  813904:	113fffcc 	andi	r4,r2,65535
  813908:	1004d43a 	srli	r2,r2,16
  81390c:	4a93883a 	add	r9,r9,r10
  813910:	3807883a 	mov	r3,r7
  813914:	1245883a 	add	r2,r2,r9
  813918:	280f883a 	mov	r7,r5
  81391c:	180b883a 	mov	r5,r3
  813920:	1006943a 	slli	r3,r2,16
  813924:	defffd04 	addi	sp,sp,-12
  813928:	dc800215 	stw	r18,8(sp)
  81392c:	1907883a 	add	r3,r3,r4
  813930:	dc400115 	stw	r17,4(sp)
  813934:	dc000015 	stw	r16,0(sp)
  813938:	4165383a 	mul	r18,r8,r5
  81393c:	31e3383a 	mul	r17,r6,r7
  813940:	1012d43a 	srli	r9,r2,16
  813944:	62d9383a 	mul	r12,r12,r11
  813948:	181f883a 	mov	r15,r3
  81394c:	1280022e 	bgeu	r2,r10,813958 <__muldi3+0x74>
  813950:	00800074 	movhi	r2,1
  813954:	6099883a 	add	r12,r12,r2
  813958:	624d883a 	add	r6,r12,r9
  81395c:	9187883a 	add	r3,r18,r6
  813960:	88c7883a 	add	r3,r17,r3
  813964:	7805883a 	mov	r2,r15
  813968:	dc800217 	ldw	r18,8(sp)
  81396c:	dc400117 	ldw	r17,4(sp)
  813970:	dc000017 	ldw	r16,0(sp)
  813974:	dec00304 	addi	sp,sp,12
  813978:	f800283a 	ret

0081397c <__fixunsdfsi>:
  81397c:	defffb04 	addi	sp,sp,-20
  813980:	dc400115 	stw	r17,4(sp)
  813984:	dc000015 	stw	r16,0(sp)
  813988:	04507834 	movhi	r17,16864
  81398c:	0021883a 	mov	r16,zero
  813990:	800d883a 	mov	r6,r16
  813994:	880f883a 	mov	r7,r17
  813998:	dcc00315 	stw	r19,12(sp)
  81399c:	dc800215 	stw	r18,8(sp)
  8139a0:	2827883a 	mov	r19,r5
  8139a4:	2025883a 	mov	r18,r4
  8139a8:	dfc00415 	stw	ra,16(sp)
  8139ac:	08153cc0 	call	8153cc <__gedf2>
  8139b0:	000d883a 	mov	r6,zero
  8139b4:	880f883a 	mov	r7,r17
  8139b8:	980b883a 	mov	r5,r19
  8139bc:	9009883a 	mov	r4,r18
  8139c0:	10000d16 	blt	r2,zero,8139f8 <__fixunsdfsi+0x7c>
  8139c4:	0814b240 	call	814b24 <__subdf3>
  8139c8:	180b883a 	mov	r5,r3
  8139cc:	1009883a 	mov	r4,r2
  8139d0:	081565c0 	call	81565c <__fixdfsi>
  8139d4:	00e00034 	movhi	r3,32768
  8139d8:	10c5883a 	add	r2,r2,r3
  8139dc:	dfc00417 	ldw	ra,16(sp)
  8139e0:	dcc00317 	ldw	r19,12(sp)
  8139e4:	dc800217 	ldw	r18,8(sp)
  8139e8:	dc400117 	ldw	r17,4(sp)
  8139ec:	dc000017 	ldw	r16,0(sp)
  8139f0:	dec00504 	addi	sp,sp,20
  8139f4:	f800283a 	ret
  8139f8:	980b883a 	mov	r5,r19
  8139fc:	9009883a 	mov	r4,r18
  813a00:	081565c0 	call	81565c <__fixdfsi>
  813a04:	dfc00417 	ldw	ra,16(sp)
  813a08:	dcc00317 	ldw	r19,12(sp)
  813a0c:	dc800217 	ldw	r18,8(sp)
  813a10:	dc400117 	ldw	r17,4(sp)
  813a14:	dc000017 	ldw	r16,0(sp)
  813a18:	dec00504 	addi	sp,sp,20
  813a1c:	f800283a 	ret

00813a20 <__udivdi3>:
  813a20:	defff004 	addi	sp,sp,-64
  813a24:	2005883a 	mov	r2,r4
  813a28:	3011883a 	mov	r8,r6
  813a2c:	df000e15 	stw	fp,56(sp)
  813a30:	dd000a15 	stw	r20,40(sp)
  813a34:	dc000615 	stw	r16,24(sp)
  813a38:	dfc00f15 	stw	ra,60(sp)
  813a3c:	ddc00d15 	stw	r23,52(sp)
  813a40:	dd800c15 	stw	r22,48(sp)
  813a44:	dd400b15 	stw	r21,44(sp)
  813a48:	dcc00915 	stw	r19,36(sp)
  813a4c:	dc800815 	stw	r18,32(sp)
  813a50:	dc400715 	stw	r17,28(sp)
  813a54:	4021883a 	mov	r16,r8
  813a58:	1039883a 	mov	fp,r2
  813a5c:	2829883a 	mov	r20,r5
  813a60:	38003b1e 	bne	r7,zero,813b50 <__udivdi3+0x130>
  813a64:	2a005c36 	bltu	r5,r8,813bd8 <__udivdi3+0x1b8>
  813a68:	4000a626 	beq	r8,zero,813d04 <__udivdi3+0x2e4>
  813a6c:	00bfffd4 	movui	r2,65535
  813a70:	14009e36 	bltu	r2,r16,813cec <__udivdi3+0x2cc>
  813a74:	00803fc4 	movi	r2,255
  813a78:	14013d36 	bltu	r2,r16,813f70 <__udivdi3+0x550>
  813a7c:	000b883a 	mov	r5,zero
  813a80:	0005883a 	mov	r2,zero
  813a84:	8084d83a 	srl	r2,r16,r2
  813a88:	01002174 	movhi	r4,133
  813a8c:	21326404 	addi	r4,r4,-13936
  813a90:	01800804 	movi	r6,32
  813a94:	1105883a 	add	r2,r2,r4
  813a98:	10c00003 	ldbu	r3,0(r2)
  813a9c:	28c7883a 	add	r3,r5,r3
  813aa0:	30edc83a 	sub	r22,r6,r3
  813aa4:	b000ee1e 	bne	r22,zero,813e60 <__udivdi3+0x440>
  813aa8:	802ad43a 	srli	r21,r16,16
  813aac:	00800044 	movi	r2,1
  813ab0:	a423c83a 	sub	r17,r20,r16
  813ab4:	85ffffcc 	andi	r23,r16,65535
  813ab8:	d8800315 	stw	r2,12(sp)
  813abc:	8809883a 	mov	r4,r17
  813ac0:	a80b883a 	mov	r5,r21
  813ac4:	08053b80 	call	8053b8 <__udivsi3>
  813ac8:	8809883a 	mov	r4,r17
  813acc:	a80b883a 	mov	r5,r21
  813ad0:	102d883a 	mov	r22,r2
  813ad4:	08053c00 	call	8053c0 <__umodsi3>
  813ad8:	1004943a 	slli	r2,r2,16
  813adc:	e006d43a 	srli	r3,fp,16
  813ae0:	bda3383a 	mul	r17,r23,r22
  813ae4:	10c4b03a 	or	r2,r2,r3
  813ae8:	1440042e 	bgeu	r2,r17,813afc <__udivdi3+0xdc>
  813aec:	1405883a 	add	r2,r2,r16
  813af0:	b5bfffc4 	addi	r22,r22,-1
  813af4:	14000136 	bltu	r2,r16,813afc <__udivdi3+0xdc>
  813af8:	14413d36 	bltu	r2,r17,813ff0 <__udivdi3+0x5d0>
  813afc:	1463c83a 	sub	r17,r2,r17
  813b00:	8809883a 	mov	r4,r17
  813b04:	a80b883a 	mov	r5,r21
  813b08:	08053b80 	call	8053b8 <__udivsi3>
  813b0c:	8809883a 	mov	r4,r17
  813b10:	a80b883a 	mov	r5,r21
  813b14:	1029883a 	mov	r20,r2
  813b18:	08053c00 	call	8053c0 <__umodsi3>
  813b1c:	1004943a 	slli	r2,r2,16
  813b20:	bd09383a 	mul	r4,r23,r20
  813b24:	e0ffffcc 	andi	r3,fp,65535
  813b28:	10c4b03a 	or	r2,r2,r3
  813b2c:	1100042e 	bgeu	r2,r4,813b40 <__udivdi3+0x120>
  813b30:	8085883a 	add	r2,r16,r2
  813b34:	a53fffc4 	addi	r20,r20,-1
  813b38:	14000136 	bltu	r2,r16,813b40 <__udivdi3+0x120>
  813b3c:	11012036 	bltu	r2,r4,813fc0 <__udivdi3+0x5a0>
  813b40:	b004943a 	slli	r2,r22,16
  813b44:	d9000317 	ldw	r4,12(sp)
  813b48:	a084b03a 	or	r2,r20,r2
  813b4c:	00001506 	br	813ba4 <__udivdi3+0x184>
  813b50:	380d883a 	mov	r6,r7
  813b54:	29c06236 	bltu	r5,r7,813ce0 <__udivdi3+0x2c0>
  813b58:	00bfffd4 	movui	r2,65535
  813b5c:	11c05a36 	bltu	r2,r7,813cc8 <__udivdi3+0x2a8>
  813b60:	00803fc4 	movi	r2,255
  813b64:	11c0fc36 	bltu	r2,r7,813f58 <__udivdi3+0x538>
  813b68:	000b883a 	mov	r5,zero
  813b6c:	0005883a 	mov	r2,zero
  813b70:	3084d83a 	srl	r2,r6,r2
  813b74:	01002174 	movhi	r4,133
  813b78:	21326404 	addi	r4,r4,-13936
  813b7c:	01c00804 	movi	r7,32
  813b80:	1105883a 	add	r2,r2,r4
  813b84:	10c00003 	ldbu	r3,0(r2)
  813b88:	28c7883a 	add	r3,r5,r3
  813b8c:	38efc83a 	sub	r23,r7,r3
  813b90:	b800691e 	bne	r23,zero,813d38 <__udivdi3+0x318>
  813b94:	35000136 	bltu	r6,r20,813b9c <__udivdi3+0x17c>
  813b98:	e4005136 	bltu	fp,r16,813ce0 <__udivdi3+0x2c0>
  813b9c:	00800044 	movi	r2,1
  813ba0:	0009883a 	mov	r4,zero
  813ba4:	2007883a 	mov	r3,r4
  813ba8:	dfc00f17 	ldw	ra,60(sp)
  813bac:	df000e17 	ldw	fp,56(sp)
  813bb0:	ddc00d17 	ldw	r23,52(sp)
  813bb4:	dd800c17 	ldw	r22,48(sp)
  813bb8:	dd400b17 	ldw	r21,44(sp)
  813bbc:	dd000a17 	ldw	r20,40(sp)
  813bc0:	dcc00917 	ldw	r19,36(sp)
  813bc4:	dc800817 	ldw	r18,32(sp)
  813bc8:	dc400717 	ldw	r17,28(sp)
  813bcc:	dc000617 	ldw	r16,24(sp)
  813bd0:	dec01004 	addi	sp,sp,64
  813bd4:	f800283a 	ret
  813bd8:	00bfffd4 	movui	r2,65535
  813bdc:	12005036 	bltu	r2,r8,813d20 <__udivdi3+0x300>
  813be0:	00803fc4 	movi	r2,255
  813be4:	1200e836 	bltu	r2,r8,813f88 <__udivdi3+0x568>
  813be8:	000b883a 	mov	r5,zero
  813bec:	0005883a 	mov	r2,zero
  813bf0:	8084d83a 	srl	r2,r16,r2
  813bf4:	01002174 	movhi	r4,133
  813bf8:	21326404 	addi	r4,r4,-13936
  813bfc:	01800804 	movi	r6,32
  813c00:	1105883a 	add	r2,r2,r4
  813c04:	10c00003 	ldbu	r3,0(r2)
  813c08:	28c7883a 	add	r3,r5,r3
  813c0c:	30cbc83a 	sub	r5,r6,r3
  813c10:	28000626 	beq	r5,zero,813c2c <__udivdi3+0x20c>
  813c14:	3145c83a 	sub	r2,r6,r5
  813c18:	e084d83a 	srl	r2,fp,r2
  813c1c:	a146983a 	sll	r3,r20,r5
  813c20:	e178983a 	sll	fp,fp,r5
  813c24:	8160983a 	sll	r16,r16,r5
  813c28:	18a8b03a 	or	r20,r3,r2
  813c2c:	802ad43a 	srli	r21,r16,16
  813c30:	a009883a 	mov	r4,r20
  813c34:	85ffffcc 	andi	r23,r16,65535
  813c38:	a80b883a 	mov	r5,r21
  813c3c:	08053b80 	call	8053b8 <__udivsi3>
  813c40:	a009883a 	mov	r4,r20
  813c44:	a80b883a 	mov	r5,r21
  813c48:	102d883a 	mov	r22,r2
  813c4c:	08053c00 	call	8053c0 <__umodsi3>
  813c50:	1004943a 	slli	r2,r2,16
  813c54:	e006d43a 	srli	r3,fp,16
  813c58:	bda3383a 	mul	r17,r23,r22
  813c5c:	10c4b03a 	or	r2,r2,r3
  813c60:	1440042e 	bgeu	r2,r17,813c74 <__udivdi3+0x254>
  813c64:	1405883a 	add	r2,r2,r16
  813c68:	b5bfffc4 	addi	r22,r22,-1
  813c6c:	14000136 	bltu	r2,r16,813c74 <__udivdi3+0x254>
  813c70:	1440d536 	bltu	r2,r17,813fc8 <__udivdi3+0x5a8>
  813c74:	1463c83a 	sub	r17,r2,r17
  813c78:	8809883a 	mov	r4,r17
  813c7c:	a80b883a 	mov	r5,r21
  813c80:	08053b80 	call	8053b8 <__udivsi3>
  813c84:	8809883a 	mov	r4,r17
  813c88:	a80b883a 	mov	r5,r21
  813c8c:	1029883a 	mov	r20,r2
  813c90:	08053c00 	call	8053c0 <__umodsi3>
  813c94:	1004943a 	slli	r2,r2,16
  813c98:	bd09383a 	mul	r4,r23,r20
  813c9c:	e0ffffcc 	andi	r3,fp,65535
  813ca0:	10c4b03a 	or	r2,r2,r3
  813ca4:	1100042e 	bgeu	r2,r4,813cb8 <__udivdi3+0x298>
  813ca8:	8085883a 	add	r2,r16,r2
  813cac:	a53fffc4 	addi	r20,r20,-1
  813cb0:	14000136 	bltu	r2,r16,813cb8 <__udivdi3+0x298>
  813cb4:	1100c736 	bltu	r2,r4,813fd4 <__udivdi3+0x5b4>
  813cb8:	b004943a 	slli	r2,r22,16
  813cbc:	0009883a 	mov	r4,zero
  813cc0:	a084b03a 	or	r2,r20,r2
  813cc4:	003fb706 	br	813ba4 <__udivdi3+0x184>
  813cc8:	00804034 	movhi	r2,256
  813ccc:	10bfffc4 	addi	r2,r2,-1
  813cd0:	11c0a436 	bltu	r2,r7,813f64 <__udivdi3+0x544>
  813cd4:	01400404 	movi	r5,16
  813cd8:	2805883a 	mov	r2,r5
  813cdc:	003fa406 	br	813b70 <__udivdi3+0x150>
  813ce0:	0005883a 	mov	r2,zero
  813ce4:	0009883a 	mov	r4,zero
  813ce8:	003fae06 	br	813ba4 <__udivdi3+0x184>
  813cec:	00804034 	movhi	r2,256
  813cf0:	10bfffc4 	addi	r2,r2,-1
  813cf4:	1400a136 	bltu	r2,r16,813f7c <__udivdi3+0x55c>
  813cf8:	01400404 	movi	r5,16
  813cfc:	2805883a 	mov	r2,r5
  813d00:	003f6006 	br	813a84 <__udivdi3+0x64>
  813d04:	01000044 	movi	r4,1
  813d08:	000b883a 	mov	r5,zero
  813d0c:	08053b80 	call	8053b8 <__udivsi3>
  813d10:	1021883a 	mov	r16,r2
  813d14:	00bfffd4 	movui	r2,65535
  813d18:	143ff436 	bltu	r2,r16,813cec <__udivdi3+0x2cc>
  813d1c:	003f5506 	br	813a74 <__udivdi3+0x54>
  813d20:	00804034 	movhi	r2,256
  813d24:	10bfffc4 	addi	r2,r2,-1
  813d28:	12009a36 	bltu	r2,r8,813f94 <__udivdi3+0x574>
  813d2c:	01400404 	movi	r5,16
  813d30:	2805883a 	mov	r2,r5
  813d34:	003fae06 	br	813bf0 <__udivdi3+0x1d0>
  813d38:	3dc5c83a 	sub	r2,r7,r23
  813d3c:	35c8983a 	sll	r4,r6,r23
  813d40:	8086d83a 	srl	r3,r16,r2
  813d44:	a0a2d83a 	srl	r17,r20,r2
  813d48:	e084d83a 	srl	r2,fp,r2
  813d4c:	20eab03a 	or	r21,r4,r3
  813d50:	a82cd43a 	srli	r22,r21,16
  813d54:	a5c6983a 	sll	r3,r20,r23
  813d58:	8809883a 	mov	r4,r17
  813d5c:	b00b883a 	mov	r5,r22
  813d60:	1886b03a 	or	r3,r3,r2
  813d64:	d8c00215 	stw	r3,8(sp)
  813d68:	08053b80 	call	8053b8 <__udivsi3>
  813d6c:	8809883a 	mov	r4,r17
  813d70:	b00b883a 	mov	r5,r22
  813d74:	1029883a 	mov	r20,r2
  813d78:	08053c00 	call	8053c0 <__umodsi3>
  813d7c:	a8ffffcc 	andi	r3,r21,65535
  813d80:	d8c00515 	stw	r3,20(sp)
  813d84:	d9000217 	ldw	r4,8(sp)
  813d88:	d9400517 	ldw	r5,20(sp)
  813d8c:	1004943a 	slli	r2,r2,16
  813d90:	2006d43a 	srli	r3,r4,16
  813d94:	85e0983a 	sll	r16,r16,r23
  813d98:	2d23383a 	mul	r17,r5,r20
  813d9c:	10c4b03a 	or	r2,r2,r3
  813da0:	dc000015 	stw	r16,0(sp)
  813da4:	1440032e 	bgeu	r2,r17,813db4 <__udivdi3+0x394>
  813da8:	1545883a 	add	r2,r2,r21
  813dac:	a53fffc4 	addi	r20,r20,-1
  813db0:	15407f2e 	bgeu	r2,r21,813fb0 <__udivdi3+0x590>
  813db4:	1463c83a 	sub	r17,r2,r17
  813db8:	8809883a 	mov	r4,r17
  813dbc:	b00b883a 	mov	r5,r22
  813dc0:	08053b80 	call	8053b8 <__udivsi3>
  813dc4:	8809883a 	mov	r4,r17
  813dc8:	b00b883a 	mov	r5,r22
  813dcc:	1021883a 	mov	r16,r2
  813dd0:	08053c00 	call	8053c0 <__umodsi3>
  813dd4:	d8c00517 	ldw	r3,20(sp)
  813dd8:	d9000217 	ldw	r4,8(sp)
  813ddc:	1004943a 	slli	r2,r2,16
  813de0:	1c0f383a 	mul	r7,r3,r16
  813de4:	20ffffcc 	andi	r3,r4,65535
  813de8:	10e2b03a 	or	r17,r2,r3
  813dec:	89c0032e 	bgeu	r17,r7,813dfc <__udivdi3+0x3dc>
  813df0:	8d63883a 	add	r17,r17,r21
  813df4:	843fffc4 	addi	r16,r16,-1
  813df8:	8d40692e 	bgeu	r17,r21,813fa0 <__udivdi3+0x580>
  813dfc:	a008943a 	slli	r4,r20,16
  813e00:	d9400017 	ldw	r5,0(sp)
  813e04:	89e3c83a 	sub	r17,r17,r7
  813e08:	8110b03a 	or	r8,r16,r4
  813e0c:	280cd43a 	srli	r6,r5,16
  813e10:	28ffffcc 	andi	r3,r5,65535
  813e14:	40bfffcc 	andi	r2,r8,65535
  813e18:	400ad43a 	srli	r5,r8,16
  813e1c:	10d3383a 	mul	r9,r2,r3
  813e20:	1185383a 	mul	r2,r2,r6
  813e24:	28c7383a 	mul	r3,r5,r3
  813e28:	4808d43a 	srli	r4,r9,16
  813e2c:	298b383a 	mul	r5,r5,r6
  813e30:	10c5883a 	add	r2,r2,r3
  813e34:	2089883a 	add	r4,r4,r2
  813e38:	20c0022e 	bgeu	r4,r3,813e44 <__udivdi3+0x424>
  813e3c:	00800074 	movhi	r2,1
  813e40:	288b883a 	add	r5,r5,r2
  813e44:	2004d43a 	srli	r2,r4,16
  813e48:	288b883a 	add	r5,r5,r2
  813e4c:	89403f36 	bltu	r17,r5,813f4c <__udivdi3+0x52c>
  813e50:	89403926 	beq	r17,r5,813f38 <__udivdi3+0x518>
  813e54:	4005883a 	mov	r2,r8
  813e58:	0009883a 	mov	r4,zero
  813e5c:	003f5106 	br	813ba4 <__udivdi3+0x184>
  813e60:	85a0983a 	sll	r16,r16,r22
  813e64:	3585c83a 	sub	r2,r6,r22
  813e68:	a0a2d83a 	srl	r17,r20,r2
  813e6c:	802ad43a 	srli	r21,r16,16
  813e70:	e084d83a 	srl	r2,fp,r2
  813e74:	a586983a 	sll	r3,r20,r22
  813e78:	8809883a 	mov	r4,r17
  813e7c:	a80b883a 	mov	r5,r21
  813e80:	1886b03a 	or	r3,r3,r2
  813e84:	d8c00115 	stw	r3,4(sp)
  813e88:	08053b80 	call	8053b8 <__udivsi3>
  813e8c:	8809883a 	mov	r4,r17
  813e90:	a80b883a 	mov	r5,r21
  813e94:	d8800415 	stw	r2,16(sp)
  813e98:	08053c00 	call	8053c0 <__umodsi3>
  813e9c:	d9000117 	ldw	r4,4(sp)
  813ea0:	d9400417 	ldw	r5,16(sp)
  813ea4:	1004943a 	slli	r2,r2,16
  813ea8:	85ffffcc 	andi	r23,r16,65535
  813eac:	2006d43a 	srli	r3,r4,16
  813eb0:	b963383a 	mul	r17,r23,r5
  813eb4:	10c4b03a 	or	r2,r2,r3
  813eb8:	1440042e 	bgeu	r2,r17,813ecc <__udivdi3+0x4ac>
  813ebc:	297fffc4 	addi	r5,r5,-1
  813ec0:	1405883a 	add	r2,r2,r16
  813ec4:	d9400415 	stw	r5,16(sp)
  813ec8:	1400442e 	bgeu	r2,r16,813fdc <__udivdi3+0x5bc>
  813ecc:	1463c83a 	sub	r17,r2,r17
  813ed0:	8809883a 	mov	r4,r17
  813ed4:	a80b883a 	mov	r5,r21
  813ed8:	08053b80 	call	8053b8 <__udivsi3>
  813edc:	8809883a 	mov	r4,r17
  813ee0:	a80b883a 	mov	r5,r21
  813ee4:	1029883a 	mov	r20,r2
  813ee8:	08053c00 	call	8053c0 <__umodsi3>
  813eec:	d9400117 	ldw	r5,4(sp)
  813ef0:	1004943a 	slli	r2,r2,16
  813ef4:	bd09383a 	mul	r4,r23,r20
  813ef8:	28ffffcc 	andi	r3,r5,65535
  813efc:	10c6b03a 	or	r3,r2,r3
  813f00:	1900062e 	bgeu	r3,r4,813f1c <__udivdi3+0x4fc>
  813f04:	1c07883a 	add	r3,r3,r16
  813f08:	a53fffc4 	addi	r20,r20,-1
  813f0c:	1c000336 	bltu	r3,r16,813f1c <__udivdi3+0x4fc>
  813f10:	1900022e 	bgeu	r3,r4,813f1c <__udivdi3+0x4fc>
  813f14:	a53fffc4 	addi	r20,r20,-1
  813f18:	1c07883a 	add	r3,r3,r16
  813f1c:	d9400417 	ldw	r5,16(sp)
  813f20:	e5b8983a 	sll	fp,fp,r22
  813f24:	1923c83a 	sub	r17,r3,r4
  813f28:	2804943a 	slli	r2,r5,16
  813f2c:	a0a8b03a 	or	r20,r20,r2
  813f30:	dd000315 	stw	r20,12(sp)
  813f34:	003ee106 	br	813abc <__udivdi3+0x9c>
  813f38:	2004943a 	slli	r2,r4,16
  813f3c:	e5c8983a 	sll	r4,fp,r23
  813f40:	48ffffcc 	andi	r3,r9,65535
  813f44:	10c5883a 	add	r2,r2,r3
  813f48:	20bfc22e 	bgeu	r4,r2,813e54 <__udivdi3+0x434>
  813f4c:	40bfffc4 	addi	r2,r8,-1
  813f50:	0009883a 	mov	r4,zero
  813f54:	003f1306 	br	813ba4 <__udivdi3+0x184>
  813f58:	01400204 	movi	r5,8
  813f5c:	2805883a 	mov	r2,r5
  813f60:	003f0306 	br	813b70 <__udivdi3+0x150>
  813f64:	01400604 	movi	r5,24
  813f68:	2805883a 	mov	r2,r5
  813f6c:	003f0006 	br	813b70 <__udivdi3+0x150>
  813f70:	01400204 	movi	r5,8
  813f74:	2805883a 	mov	r2,r5
  813f78:	003ec206 	br	813a84 <__udivdi3+0x64>
  813f7c:	01400604 	movi	r5,24
  813f80:	2805883a 	mov	r2,r5
  813f84:	003ebf06 	br	813a84 <__udivdi3+0x64>
  813f88:	01400204 	movi	r5,8
  813f8c:	2805883a 	mov	r2,r5
  813f90:	003f1706 	br	813bf0 <__udivdi3+0x1d0>
  813f94:	01400604 	movi	r5,24
  813f98:	2805883a 	mov	r2,r5
  813f9c:	003f1406 	br	813bf0 <__udivdi3+0x1d0>
  813fa0:	89ff962e 	bgeu	r17,r7,813dfc <__udivdi3+0x3dc>
  813fa4:	8d63883a 	add	r17,r17,r21
  813fa8:	843fffc4 	addi	r16,r16,-1
  813fac:	003f9306 	br	813dfc <__udivdi3+0x3dc>
  813fb0:	147f802e 	bgeu	r2,r17,813db4 <__udivdi3+0x394>
  813fb4:	a53fffc4 	addi	r20,r20,-1
  813fb8:	1545883a 	add	r2,r2,r21
  813fbc:	003f7d06 	br	813db4 <__udivdi3+0x394>
  813fc0:	a53fffc4 	addi	r20,r20,-1
  813fc4:	003ede06 	br	813b40 <__udivdi3+0x120>
  813fc8:	b5bfffc4 	addi	r22,r22,-1
  813fcc:	1405883a 	add	r2,r2,r16
  813fd0:	003f2806 	br	813c74 <__udivdi3+0x254>
  813fd4:	a53fffc4 	addi	r20,r20,-1
  813fd8:	003f3706 	br	813cb8 <__udivdi3+0x298>
  813fdc:	147fbb2e 	bgeu	r2,r17,813ecc <__udivdi3+0x4ac>
  813fe0:	297fffc4 	addi	r5,r5,-1
  813fe4:	1405883a 	add	r2,r2,r16
  813fe8:	d9400415 	stw	r5,16(sp)
  813fec:	003fb706 	br	813ecc <__udivdi3+0x4ac>
  813ff0:	b5bfffc4 	addi	r22,r22,-1
  813ff4:	1405883a 	add	r2,r2,r16
  813ff8:	003ec006 	br	813afc <__udivdi3+0xdc>

00813ffc <__umoddi3>:
  813ffc:	defff104 	addi	sp,sp,-60
  814000:	dd800b15 	stw	r22,44(sp)
  814004:	dd000915 	stw	r20,36(sp)
  814008:	dc000515 	stw	r16,20(sp)
  81400c:	dfc00e15 	stw	ra,56(sp)
  814010:	df000d15 	stw	fp,52(sp)
  814014:	ddc00c15 	stw	r23,48(sp)
  814018:	dd400a15 	stw	r21,40(sp)
  81401c:	dcc00815 	stw	r19,32(sp)
  814020:	dc800715 	stw	r18,28(sp)
  814024:	dc400615 	stw	r17,24(sp)
  814028:	3021883a 	mov	r16,r6
  81402c:	202d883a 	mov	r22,r4
  814030:	2829883a 	mov	r20,r5
  814034:	38002b1e 	bne	r7,zero,8140e4 <__umoddi3+0xe8>
  814038:	29805036 	bltu	r5,r6,81417c <__umoddi3+0x180>
  81403c:	30008a26 	beq	r6,zero,814268 <__umoddi3+0x26c>
  814040:	00bfffd4 	movui	r2,65535
  814044:	14008236 	bltu	r2,r16,814250 <__umoddi3+0x254>
  814048:	00803fc4 	movi	r2,255
  81404c:	14013636 	bltu	r2,r16,814528 <__umoddi3+0x52c>
  814050:	000b883a 	mov	r5,zero
  814054:	0005883a 	mov	r2,zero
  814058:	8084d83a 	srl	r2,r16,r2
  81405c:	01002174 	movhi	r4,133
  814060:	21326404 	addi	r4,r4,-13936
  814064:	01800804 	movi	r6,32
  814068:	1105883a 	add	r2,r2,r4
  81406c:	10c00003 	ldbu	r3,0(r2)
  814070:	28c7883a 	add	r3,r5,r3
  814074:	30efc83a 	sub	r23,r6,r3
  814078:	b800941e 	bne	r23,zero,8142cc <__umoddi3+0x2d0>
  81407c:	802ad43a 	srli	r21,r16,16
  814080:	a423c83a 	sub	r17,r20,r16
  814084:	0039883a 	mov	fp,zero
  814088:	853fffcc 	andi	r20,r16,65535
  81408c:	8809883a 	mov	r4,r17
  814090:	a80b883a 	mov	r5,r21
  814094:	08053b80 	call	8053b8 <__udivsi3>
  814098:	8809883a 	mov	r4,r17
  81409c:	a80b883a 	mov	r5,r21
  8140a0:	a0a3383a 	mul	r17,r20,r2
  8140a4:	08053c00 	call	8053c0 <__umodsi3>
  8140a8:	1004943a 	slli	r2,r2,16
  8140ac:	b006d43a 	srli	r3,r22,16
  8140b0:	10c4b03a 	or	r2,r2,r3
  8140b4:	1440032e 	bgeu	r2,r17,8140c4 <__umoddi3+0xc8>
  8140b8:	1405883a 	add	r2,r2,r16
  8140bc:	14000136 	bltu	r2,r16,8140c4 <__umoddi3+0xc8>
  8140c0:	14413536 	bltu	r2,r17,814598 <__umoddi3+0x59c>
  8140c4:	1463c83a 	sub	r17,r2,r17
  8140c8:	8809883a 	mov	r4,r17
  8140cc:	a80b883a 	mov	r5,r21
  8140d0:	08053b80 	call	8053b8 <__udivsi3>
  8140d4:	8809883a 	mov	r4,r17
  8140d8:	a0a3383a 	mul	r17,r20,r2
  8140dc:	a80b883a 	mov	r5,r21
  8140e0:	00004d06 	br	814218 <__umoddi3+0x21c>
  8140e4:	380d883a 	mov	r6,r7
  8140e8:	29c0102e 	bgeu	r5,r7,81412c <__umoddi3+0x130>
  8140ec:	2011883a 	mov	r8,r4
  8140f0:	2813883a 	mov	r9,r5
  8140f4:	4005883a 	mov	r2,r8
  8140f8:	4807883a 	mov	r3,r9
  8140fc:	dfc00e17 	ldw	ra,56(sp)
  814100:	df000d17 	ldw	fp,52(sp)
  814104:	ddc00c17 	ldw	r23,48(sp)
  814108:	dd800b17 	ldw	r22,44(sp)
  81410c:	dd400a17 	ldw	r21,40(sp)
  814110:	dd000917 	ldw	r20,36(sp)
  814114:	dcc00817 	ldw	r19,32(sp)
  814118:	dc800717 	ldw	r18,28(sp)
  81411c:	dc400617 	ldw	r17,24(sp)
  814120:	dc000517 	ldw	r16,20(sp)
  814124:	dec00f04 	addi	sp,sp,60
  814128:	f800283a 	ret
  81412c:	00bfffd4 	movui	r2,65535
  814130:	11c05a36 	bltu	r2,r7,81429c <__umoddi3+0x2a0>
  814134:	00803fc4 	movi	r2,255
  814138:	11c0fe36 	bltu	r2,r7,814534 <__umoddi3+0x538>
  81413c:	000b883a 	mov	r5,zero
  814140:	0005883a 	mov	r2,zero
  814144:	3084d83a 	srl	r2,r6,r2
  814148:	01002174 	movhi	r4,133
  81414c:	21326404 	addi	r4,r4,-13936
  814150:	01c00804 	movi	r7,32
  814154:	1105883a 	add	r2,r2,r4
  814158:	10c00003 	ldbu	r3,0(r2)
  81415c:	28c7883a 	add	r3,r5,r3
  814160:	38ebc83a 	sub	r21,r7,r3
  814164:	a800851e 	bne	r21,zero,81437c <__umoddi3+0x380>
  814168:	35005236 	bltu	r6,r20,8142b4 <__umoddi3+0x2b8>
  81416c:	b400512e 	bgeu	r22,r16,8142b4 <__umoddi3+0x2b8>
  814170:	b011883a 	mov	r8,r22
  814174:	a013883a 	mov	r9,r20
  814178:	003fde06 	br	8140f4 <__umoddi3+0xf8>
  81417c:	00bfffd4 	movui	r2,65535
  814180:	11804036 	bltu	r2,r6,814284 <__umoddi3+0x288>
  814184:	00803fc4 	movi	r2,255
  814188:	1180ed36 	bltu	r2,r6,814540 <__umoddi3+0x544>
  81418c:	000b883a 	mov	r5,zero
  814190:	0005883a 	mov	r2,zero
  814194:	8084d83a 	srl	r2,r16,r2
  814198:	01002174 	movhi	r4,133
  81419c:	21326404 	addi	r4,r4,-13936
  8141a0:	01800804 	movi	r6,32
  8141a4:	1105883a 	add	r2,r2,r4
  8141a8:	10c00003 	ldbu	r3,0(r2)
  8141ac:	28c7883a 	add	r3,r5,r3
  8141b0:	30c7c83a 	sub	r3,r6,r3
  8141b4:	1800bf1e 	bne	r3,zero,8144b4 <__umoddi3+0x4b8>
  8141b8:	0039883a 	mov	fp,zero
  8141bc:	802ad43a 	srli	r21,r16,16
  8141c0:	a009883a 	mov	r4,r20
  8141c4:	85ffffcc 	andi	r23,r16,65535
  8141c8:	a80b883a 	mov	r5,r21
  8141cc:	08053b80 	call	8053b8 <__udivsi3>
  8141d0:	a009883a 	mov	r4,r20
  8141d4:	a80b883a 	mov	r5,r21
  8141d8:	b8a3383a 	mul	r17,r23,r2
  8141dc:	08053c00 	call	8053c0 <__umodsi3>
  8141e0:	1004943a 	slli	r2,r2,16
  8141e4:	b006d43a 	srli	r3,r22,16
  8141e8:	10c4b03a 	or	r2,r2,r3
  8141ec:	1440032e 	bgeu	r2,r17,8141fc <__umoddi3+0x200>
  8141f0:	1405883a 	add	r2,r2,r16
  8141f4:	14000136 	bltu	r2,r16,8141fc <__umoddi3+0x200>
  8141f8:	1440e536 	bltu	r2,r17,814590 <__umoddi3+0x594>
  8141fc:	1463c83a 	sub	r17,r2,r17
  814200:	8809883a 	mov	r4,r17
  814204:	a80b883a 	mov	r5,r21
  814208:	08053b80 	call	8053b8 <__udivsi3>
  81420c:	8809883a 	mov	r4,r17
  814210:	b8a3383a 	mul	r17,r23,r2
  814214:	a80b883a 	mov	r5,r21
  814218:	08053c00 	call	8053c0 <__umodsi3>
  81421c:	1004943a 	slli	r2,r2,16
  814220:	b0ffffcc 	andi	r3,r22,65535
  814224:	10c4b03a 	or	r2,r2,r3
  814228:	1440042e 	bgeu	r2,r17,81423c <__umoddi3+0x240>
  81422c:	1405883a 	add	r2,r2,r16
  814230:	14000236 	bltu	r2,r16,81423c <__umoddi3+0x240>
  814234:	1440012e 	bgeu	r2,r17,81423c <__umoddi3+0x240>
  814238:	1405883a 	add	r2,r2,r16
  81423c:	1445c83a 	sub	r2,r2,r17
  814240:	1724d83a 	srl	r18,r2,fp
  814244:	0013883a 	mov	r9,zero
  814248:	9011883a 	mov	r8,r18
  81424c:	003fa906 	br	8140f4 <__umoddi3+0xf8>
  814250:	00804034 	movhi	r2,256
  814254:	10bfffc4 	addi	r2,r2,-1
  814258:	1400b036 	bltu	r2,r16,81451c <__umoddi3+0x520>
  81425c:	01400404 	movi	r5,16
  814260:	2805883a 	mov	r2,r5
  814264:	003f7c06 	br	814058 <__umoddi3+0x5c>
  814268:	01000044 	movi	r4,1
  81426c:	000b883a 	mov	r5,zero
  814270:	08053b80 	call	8053b8 <__udivsi3>
  814274:	1021883a 	mov	r16,r2
  814278:	00bfffd4 	movui	r2,65535
  81427c:	143ff436 	bltu	r2,r16,814250 <__umoddi3+0x254>
  814280:	003f7106 	br	814048 <__umoddi3+0x4c>
  814284:	00804034 	movhi	r2,256
  814288:	10bfffc4 	addi	r2,r2,-1
  81428c:	1180af36 	bltu	r2,r6,81454c <__umoddi3+0x550>
  814290:	01400404 	movi	r5,16
  814294:	2805883a 	mov	r2,r5
  814298:	003fbe06 	br	814194 <__umoddi3+0x198>
  81429c:	00804034 	movhi	r2,256
  8142a0:	10bfffc4 	addi	r2,r2,-1
  8142a4:	11c0ac36 	bltu	r2,r7,814558 <__umoddi3+0x55c>
  8142a8:	01400404 	movi	r5,16
  8142ac:	2805883a 	mov	r2,r5
  8142b0:	003fa406 	br	814144 <__umoddi3+0x148>
  8142b4:	b409c83a 	sub	r4,r22,r16
  8142b8:	b105803a 	cmpltu	r2,r22,r4
  8142bc:	a187c83a 	sub	r3,r20,r6
  8142c0:	18a9c83a 	sub	r20,r3,r2
  8142c4:	202d883a 	mov	r22,r4
  8142c8:	003fa906 	br	814170 <__umoddi3+0x174>
  8142cc:	85e0983a 	sll	r16,r16,r23
  8142d0:	35c5c83a 	sub	r2,r6,r23
  8142d4:	a0a2d83a 	srl	r17,r20,r2
  8142d8:	802ad43a 	srli	r21,r16,16
  8142dc:	b084d83a 	srl	r2,r22,r2
  8142e0:	a5c6983a 	sll	r3,r20,r23
  8142e4:	8809883a 	mov	r4,r17
  8142e8:	a80b883a 	mov	r5,r21
  8142ec:	1886b03a 	or	r3,r3,r2
  8142f0:	d8c00115 	stw	r3,4(sp)
  8142f4:	853fffcc 	andi	r20,r16,65535
  8142f8:	08053b80 	call	8053b8 <__udivsi3>
  8142fc:	8809883a 	mov	r4,r17
  814300:	a80b883a 	mov	r5,r21
  814304:	a0a3383a 	mul	r17,r20,r2
  814308:	08053c00 	call	8053c0 <__umodsi3>
  81430c:	d9000117 	ldw	r4,4(sp)
  814310:	1004943a 	slli	r2,r2,16
  814314:	b839883a 	mov	fp,r23
  814318:	2006d43a 	srli	r3,r4,16
  81431c:	10c4b03a 	or	r2,r2,r3
  814320:	1440022e 	bgeu	r2,r17,81432c <__umoddi3+0x330>
  814324:	1405883a 	add	r2,r2,r16
  814328:	1400962e 	bgeu	r2,r16,814584 <__umoddi3+0x588>
  81432c:	1463c83a 	sub	r17,r2,r17
  814330:	8809883a 	mov	r4,r17
  814334:	a80b883a 	mov	r5,r21
  814338:	08053b80 	call	8053b8 <__udivsi3>
  81433c:	8809883a 	mov	r4,r17
  814340:	a80b883a 	mov	r5,r21
  814344:	a0a3383a 	mul	r17,r20,r2
  814348:	08053c00 	call	8053c0 <__umodsi3>
  81434c:	d9400117 	ldw	r5,4(sp)
  814350:	1004943a 	slli	r2,r2,16
  814354:	28ffffcc 	andi	r3,r5,65535
  814358:	10c4b03a 	or	r2,r2,r3
  81435c:	1440042e 	bgeu	r2,r17,814370 <__umoddi3+0x374>
  814360:	1405883a 	add	r2,r2,r16
  814364:	14000236 	bltu	r2,r16,814370 <__umoddi3+0x374>
  814368:	1440012e 	bgeu	r2,r17,814370 <__umoddi3+0x374>
  81436c:	1405883a 	add	r2,r2,r16
  814370:	b5ec983a 	sll	r22,r22,r23
  814374:	1463c83a 	sub	r17,r2,r17
  814378:	003f4406 	br	81408c <__umoddi3+0x90>
  81437c:	3d4fc83a 	sub	r7,r7,r21
  814380:	3546983a 	sll	r3,r6,r21
  814384:	81c4d83a 	srl	r2,r16,r7
  814388:	a1e2d83a 	srl	r17,r20,r7
  81438c:	a54c983a 	sll	r6,r20,r21
  814390:	18aeb03a 	or	r23,r3,r2
  814394:	b828d43a 	srli	r20,r23,16
  814398:	b1c4d83a 	srl	r2,r22,r7
  81439c:	8809883a 	mov	r4,r17
  8143a0:	a00b883a 	mov	r5,r20
  8143a4:	308cb03a 	or	r6,r6,r2
  8143a8:	d9c00315 	stw	r7,12(sp)
  8143ac:	d9800215 	stw	r6,8(sp)
  8143b0:	08053b80 	call	8053b8 <__udivsi3>
  8143b4:	8809883a 	mov	r4,r17
  8143b8:	a00b883a 	mov	r5,r20
  8143bc:	1039883a 	mov	fp,r2
  8143c0:	08053c00 	call	8053c0 <__umodsi3>
  8143c4:	b8ffffcc 	andi	r3,r23,65535
  8143c8:	d8c00415 	stw	r3,16(sp)
  8143cc:	d9000217 	ldw	r4,8(sp)
  8143d0:	d9400417 	ldw	r5,16(sp)
  8143d4:	1004943a 	slli	r2,r2,16
  8143d8:	2006d43a 	srli	r3,r4,16
  8143dc:	8560983a 	sll	r16,r16,r21
  8143e0:	2f23383a 	mul	r17,r5,fp
  8143e4:	10c4b03a 	or	r2,r2,r3
  8143e8:	dc000015 	stw	r16,0(sp)
  8143ec:	b56c983a 	sll	r22,r22,r21
  8143f0:	1440032e 	bgeu	r2,r17,814400 <__umoddi3+0x404>
  8143f4:	15c5883a 	add	r2,r2,r23
  8143f8:	e73fffc4 	addi	fp,fp,-1
  8143fc:	15c05d2e 	bgeu	r2,r23,814574 <__umoddi3+0x578>
  814400:	1463c83a 	sub	r17,r2,r17
  814404:	8809883a 	mov	r4,r17
  814408:	a00b883a 	mov	r5,r20
  81440c:	08053b80 	call	8053b8 <__udivsi3>
  814410:	8809883a 	mov	r4,r17
  814414:	a00b883a 	mov	r5,r20
  814418:	1021883a 	mov	r16,r2
  81441c:	08053c00 	call	8053c0 <__umodsi3>
  814420:	d8c00417 	ldw	r3,16(sp)
  814424:	d9000217 	ldw	r4,8(sp)
  814428:	1004943a 	slli	r2,r2,16
  81442c:	1c23383a 	mul	r17,r3,r16
  814430:	20ffffcc 	andi	r3,r4,65535
  814434:	10ceb03a 	or	r7,r2,r3
  814438:	3c40032e 	bgeu	r7,r17,814448 <__umoddi3+0x44c>
  81443c:	3dcf883a 	add	r7,r7,r23
  814440:	843fffc4 	addi	r16,r16,-1
  814444:	3dc0472e 	bgeu	r7,r23,814564 <__umoddi3+0x568>
  814448:	e004943a 	slli	r2,fp,16
  81444c:	d9400017 	ldw	r5,0(sp)
  814450:	3c4fc83a 	sub	r7,r7,r17
  814454:	8084b03a 	or	r2,r16,r2
  814458:	28ffffcc 	andi	r3,r5,65535
  81445c:	280cd43a 	srli	r6,r5,16
  814460:	100ad43a 	srli	r5,r2,16
  814464:	10bfffcc 	andi	r2,r2,65535
  814468:	10d1383a 	mul	r8,r2,r3
  81446c:	28c7383a 	mul	r3,r5,r3
  814470:	1185383a 	mul	r2,r2,r6
  814474:	4008d43a 	srli	r4,r8,16
  814478:	298b383a 	mul	r5,r5,r6
  81447c:	10c5883a 	add	r2,r2,r3
  814480:	2089883a 	add	r4,r4,r2
  814484:	20c0022e 	bgeu	r4,r3,814490 <__umoddi3+0x494>
  814488:	00800074 	movhi	r2,1
  81448c:	288b883a 	add	r5,r5,r2
  814490:	2004d43a 	srli	r2,r4,16
  814494:	2008943a 	slli	r4,r4,16
  814498:	40ffffcc 	andi	r3,r8,65535
  81449c:	288b883a 	add	r5,r5,r2
  8144a0:	20c9883a 	add	r4,r4,r3
  8144a4:	39400b36 	bltu	r7,r5,8144d4 <__umoddi3+0x4d8>
  8144a8:	39403d26 	beq	r7,r5,8145a0 <__umoddi3+0x5a4>
  8144ac:	394bc83a 	sub	r5,r7,r5
  8144b0:	00000f06 	br	8144f0 <__umoddi3+0x4f4>
  8144b4:	30c5c83a 	sub	r2,r6,r3
  8144b8:	1839883a 	mov	fp,r3
  8144bc:	b084d83a 	srl	r2,r22,r2
  8144c0:	a0c6983a 	sll	r3,r20,r3
  8144c4:	8720983a 	sll	r16,r16,fp
  8144c8:	b72c983a 	sll	r22,r22,fp
  8144cc:	18a8b03a 	or	r20,r3,r2
  8144d0:	003f3a06 	br	8141bc <__umoddi3+0x1c0>
  8144d4:	d8c00017 	ldw	r3,0(sp)
  8144d8:	20c5c83a 	sub	r2,r4,r3
  8144dc:	2089803a 	cmpltu	r4,r4,r2
  8144e0:	2dc7c83a 	sub	r3,r5,r23
  8144e4:	1907c83a 	sub	r3,r3,r4
  8144e8:	38cbc83a 	sub	r5,r7,r3
  8144ec:	1009883a 	mov	r4,r2
  8144f0:	b105c83a 	sub	r2,r22,r4
  8144f4:	b087803a 	cmpltu	r3,r22,r2
  8144f8:	28c7c83a 	sub	r3,r5,r3
  8144fc:	d9400317 	ldw	r5,12(sp)
  814500:	1544d83a 	srl	r2,r2,r21
  814504:	1948983a 	sll	r4,r3,r5
  814508:	1d46d83a 	srl	r3,r3,r21
  81450c:	20a4b03a 	or	r18,r4,r2
  814510:	9011883a 	mov	r8,r18
  814514:	1813883a 	mov	r9,r3
  814518:	003ef606 	br	8140f4 <__umoddi3+0xf8>
  81451c:	01400604 	movi	r5,24
  814520:	2805883a 	mov	r2,r5
  814524:	003ecc06 	br	814058 <__umoddi3+0x5c>
  814528:	01400204 	movi	r5,8
  81452c:	2805883a 	mov	r2,r5
  814530:	003ec906 	br	814058 <__umoddi3+0x5c>
  814534:	01400204 	movi	r5,8
  814538:	2805883a 	mov	r2,r5
  81453c:	003f0106 	br	814144 <__umoddi3+0x148>
  814540:	01400204 	movi	r5,8
  814544:	2805883a 	mov	r2,r5
  814548:	003f1206 	br	814194 <__umoddi3+0x198>
  81454c:	01400604 	movi	r5,24
  814550:	2805883a 	mov	r2,r5
  814554:	003f0f06 	br	814194 <__umoddi3+0x198>
  814558:	01400604 	movi	r5,24
  81455c:	2805883a 	mov	r2,r5
  814560:	003ef806 	br	814144 <__umoddi3+0x148>
  814564:	3c7fb82e 	bgeu	r7,r17,814448 <__umoddi3+0x44c>
  814568:	843fffc4 	addi	r16,r16,-1
  81456c:	3dcf883a 	add	r7,r7,r23
  814570:	003fb506 	br	814448 <__umoddi3+0x44c>
  814574:	147fa22e 	bgeu	r2,r17,814400 <__umoddi3+0x404>
  814578:	e73fffc4 	addi	fp,fp,-1
  81457c:	15c5883a 	add	r2,r2,r23
  814580:	003f9f06 	br	814400 <__umoddi3+0x404>
  814584:	147f692e 	bgeu	r2,r17,81432c <__umoddi3+0x330>
  814588:	1405883a 	add	r2,r2,r16
  81458c:	003f6706 	br	81432c <__umoddi3+0x330>
  814590:	1405883a 	add	r2,r2,r16
  814594:	003f1906 	br	8141fc <__umoddi3+0x200>
  814598:	1405883a 	add	r2,r2,r16
  81459c:	003ec906 	br	8140c4 <__umoddi3+0xc8>
  8145a0:	b13fcc36 	bltu	r22,r4,8144d4 <__umoddi3+0x4d8>
  8145a4:	000b883a 	mov	r5,zero
  8145a8:	003fd106 	br	8144f0 <__umoddi3+0x4f4>

008145ac <__nesf2>:
  8145ac:	defff304 	addi	sp,sp,-52
  8145b0:	dc400b15 	stw	r17,44(sp)
  8145b4:	dc400204 	addi	r17,sp,8
  8145b8:	dc000a15 	stw	r16,40(sp)
  8145bc:	d9000015 	stw	r4,0(sp)
  8145c0:	d9400115 	stw	r5,4(sp)
  8145c4:	d809883a 	mov	r4,sp
  8145c8:	880b883a 	mov	r5,r17
  8145cc:	dc000604 	addi	r16,sp,24
  8145d0:	dfc00c15 	stw	ra,48(sp)
  8145d4:	08159bc0 	call	8159bc <__unpack_f>
  8145d8:	d9000104 	addi	r4,sp,4
  8145dc:	800b883a 	mov	r5,r16
  8145e0:	08159bc0 	call	8159bc <__unpack_f>
  8145e4:	d8800217 	ldw	r2,8(sp)
  8145e8:	00c00044 	movi	r3,1
  8145ec:	180d883a 	mov	r6,r3
  8145f0:	1880062e 	bgeu	r3,r2,81460c <__nesf2+0x60>
  8145f4:	d8800617 	ldw	r2,24(sp)
  8145f8:	8809883a 	mov	r4,r17
  8145fc:	800b883a 	mov	r5,r16
  814600:	1880022e 	bgeu	r3,r2,81460c <__nesf2+0x60>
  814604:	0815a840 	call	815a84 <__fpcmp_parts_f>
  814608:	100d883a 	mov	r6,r2
  81460c:	3005883a 	mov	r2,r6
  814610:	dfc00c17 	ldw	ra,48(sp)
  814614:	dc400b17 	ldw	r17,44(sp)
  814618:	dc000a17 	ldw	r16,40(sp)
  81461c:	dec00d04 	addi	sp,sp,52
  814620:	f800283a 	ret

00814624 <__gtsf2>:
  814624:	defff304 	addi	sp,sp,-52
  814628:	dc400b15 	stw	r17,44(sp)
  81462c:	dc400204 	addi	r17,sp,8
  814630:	dc000a15 	stw	r16,40(sp)
  814634:	d9000015 	stw	r4,0(sp)
  814638:	d9400115 	stw	r5,4(sp)
  81463c:	d809883a 	mov	r4,sp
  814640:	880b883a 	mov	r5,r17
  814644:	dc000604 	addi	r16,sp,24
  814648:	dfc00c15 	stw	ra,48(sp)
  81464c:	08159bc0 	call	8159bc <__unpack_f>
  814650:	d9000104 	addi	r4,sp,4
  814654:	800b883a 	mov	r5,r16
  814658:	08159bc0 	call	8159bc <__unpack_f>
  81465c:	d8800217 	ldw	r2,8(sp)
  814660:	00c00044 	movi	r3,1
  814664:	01bfffc4 	movi	r6,-1
  814668:	1880062e 	bgeu	r3,r2,814684 <__gtsf2+0x60>
  81466c:	d8800617 	ldw	r2,24(sp)
  814670:	8809883a 	mov	r4,r17
  814674:	800b883a 	mov	r5,r16
  814678:	1880022e 	bgeu	r3,r2,814684 <__gtsf2+0x60>
  81467c:	0815a840 	call	815a84 <__fpcmp_parts_f>
  814680:	100d883a 	mov	r6,r2
  814684:	3005883a 	mov	r2,r6
  814688:	dfc00c17 	ldw	ra,48(sp)
  81468c:	dc400b17 	ldw	r17,44(sp)
  814690:	dc000a17 	ldw	r16,40(sp)
  814694:	dec00d04 	addi	sp,sp,52
  814698:	f800283a 	ret

0081469c <__ltsf2>:
  81469c:	defff304 	addi	sp,sp,-52
  8146a0:	dc400b15 	stw	r17,44(sp)
  8146a4:	dc400204 	addi	r17,sp,8
  8146a8:	dc000a15 	stw	r16,40(sp)
  8146ac:	d9000015 	stw	r4,0(sp)
  8146b0:	d9400115 	stw	r5,4(sp)
  8146b4:	d809883a 	mov	r4,sp
  8146b8:	880b883a 	mov	r5,r17
  8146bc:	dc000604 	addi	r16,sp,24
  8146c0:	dfc00c15 	stw	ra,48(sp)
  8146c4:	08159bc0 	call	8159bc <__unpack_f>
  8146c8:	d9000104 	addi	r4,sp,4
  8146cc:	800b883a 	mov	r5,r16
  8146d0:	08159bc0 	call	8159bc <__unpack_f>
  8146d4:	d8800217 	ldw	r2,8(sp)
  8146d8:	00c00044 	movi	r3,1
  8146dc:	180d883a 	mov	r6,r3
  8146e0:	1880062e 	bgeu	r3,r2,8146fc <__ltsf2+0x60>
  8146e4:	d8800617 	ldw	r2,24(sp)
  8146e8:	8809883a 	mov	r4,r17
  8146ec:	800b883a 	mov	r5,r16
  8146f0:	1880022e 	bgeu	r3,r2,8146fc <__ltsf2+0x60>
  8146f4:	0815a840 	call	815a84 <__fpcmp_parts_f>
  8146f8:	100d883a 	mov	r6,r2
  8146fc:	3005883a 	mov	r2,r6
  814700:	dfc00c17 	ldw	ra,48(sp)
  814704:	dc400b17 	ldw	r17,44(sp)
  814708:	dc000a17 	ldw	r16,40(sp)
  81470c:	dec00d04 	addi	sp,sp,52
  814710:	f800283a 	ret

00814714 <_fpadd_parts>:
  814714:	defff804 	addi	sp,sp,-32
  814718:	dcc00315 	stw	r19,12(sp)
  81471c:	2027883a 	mov	r19,r4
  814720:	21000017 	ldw	r4,0(r4)
  814724:	00c00044 	movi	r3,1
  814728:	dd400515 	stw	r21,20(sp)
  81472c:	dd000415 	stw	r20,16(sp)
  814730:	ddc00715 	stw	r23,28(sp)
  814734:	dd800615 	stw	r22,24(sp)
  814738:	dc800215 	stw	r18,8(sp)
  81473c:	dc400115 	stw	r17,4(sp)
  814740:	dc000015 	stw	r16,0(sp)
  814744:	282b883a 	mov	r21,r5
  814748:	3029883a 	mov	r20,r6
  81474c:	1900632e 	bgeu	r3,r4,8148dc <_fpadd_parts+0x1c8>
  814750:	28800017 	ldw	r2,0(r5)
  814754:	1880812e 	bgeu	r3,r2,81495c <_fpadd_parts+0x248>
  814758:	00c00104 	movi	r3,4
  81475c:	20c0dc26 	beq	r4,r3,814ad0 <_fpadd_parts+0x3bc>
  814760:	10c07e26 	beq	r2,r3,81495c <_fpadd_parts+0x248>
  814764:	00c00084 	movi	r3,2
  814768:	10c06726 	beq	r2,r3,814908 <_fpadd_parts+0x1f4>
  81476c:	20c07b26 	beq	r4,r3,81495c <_fpadd_parts+0x248>
  814770:	9dc00217 	ldw	r23,8(r19)
  814774:	28c00217 	ldw	r3,8(r5)
  814778:	9c400317 	ldw	r17,12(r19)
  81477c:	2bc00317 	ldw	r15,12(r5)
  814780:	b8cdc83a 	sub	r6,r23,r3
  814784:	9c800417 	ldw	r18,16(r19)
  814788:	2c000417 	ldw	r16,16(r5)
  81478c:	3009883a 	mov	r4,r6
  814790:	30009716 	blt	r6,zero,8149f0 <_fpadd_parts+0x2dc>
  814794:	00800fc4 	movi	r2,63
  814798:	11806b16 	blt	r2,r6,814948 <_fpadd_parts+0x234>
  81479c:	0100a40e 	bge	zero,r4,814a30 <_fpadd_parts+0x31c>
  8147a0:	35bff804 	addi	r22,r6,-32
  8147a4:	b000bc16 	blt	r22,zero,814a98 <_fpadd_parts+0x384>
  8147a8:	8596d83a 	srl	r11,r16,r22
  8147ac:	0019883a 	mov	r12,zero
  8147b0:	0013883a 	mov	r9,zero
  8147b4:	01000044 	movi	r4,1
  8147b8:	0015883a 	mov	r10,zero
  8147bc:	b000be16 	blt	r22,zero,814ab8 <_fpadd_parts+0x3a4>
  8147c0:	2590983a 	sll	r8,r4,r22
  8147c4:	000f883a 	mov	r7,zero
  8147c8:	00bfffc4 	movi	r2,-1
  8147cc:	3889883a 	add	r4,r7,r2
  8147d0:	408b883a 	add	r5,r8,r2
  8147d4:	21cd803a 	cmpltu	r6,r4,r7
  8147d8:	314b883a 	add	r5,r6,r5
  8147dc:	7904703a 	and	r2,r15,r4
  8147e0:	8146703a 	and	r3,r16,r5
  8147e4:	10c4b03a 	or	r2,r2,r3
  8147e8:	10000226 	beq	r2,zero,8147f4 <_fpadd_parts+0xe0>
  8147ec:	02400044 	movi	r9,1
  8147f0:	0015883a 	mov	r10,zero
  8147f4:	5a5eb03a 	or	r15,r11,r9
  8147f8:	62a0b03a 	or	r16,r12,r10
  8147fc:	99400117 	ldw	r5,4(r19)
  814800:	a8800117 	ldw	r2,4(r21)
  814804:	28806e26 	beq	r5,r2,8149c0 <_fpadd_parts+0x2ac>
  814808:	28006626 	beq	r5,zero,8149a4 <_fpadd_parts+0x290>
  81480c:	7c45c83a 	sub	r2,r15,r17
  814810:	7889803a 	cmpltu	r4,r15,r2
  814814:	8487c83a 	sub	r3,r16,r18
  814818:	1909c83a 	sub	r4,r3,r4
  81481c:	100d883a 	mov	r6,r2
  814820:	200f883a 	mov	r7,r4
  814824:	38007716 	blt	r7,zero,814a04 <_fpadd_parts+0x2f0>
  814828:	a5c00215 	stw	r23,8(r20)
  81482c:	a1c00415 	stw	r7,16(r20)
  814830:	a0000115 	stw	zero,4(r20)
  814834:	a1800315 	stw	r6,12(r20)
  814838:	a2000317 	ldw	r8,12(r20)
  81483c:	a2400417 	ldw	r9,16(r20)
  814840:	00bfffc4 	movi	r2,-1
  814844:	408b883a 	add	r5,r8,r2
  814848:	2a09803a 	cmpltu	r4,r5,r8
  81484c:	488d883a 	add	r6,r9,r2
  814850:	01c40034 	movhi	r7,4096
  814854:	39ffffc4 	addi	r7,r7,-1
  814858:	218d883a 	add	r6,r4,r6
  81485c:	39801736 	bltu	r7,r6,8148bc <_fpadd_parts+0x1a8>
  814860:	31c06526 	beq	r6,r7,8149f8 <_fpadd_parts+0x2e4>
  814864:	a3000217 	ldw	r12,8(r20)
  814868:	4209883a 	add	r4,r8,r8
  81486c:	00bfffc4 	movi	r2,-1
  814870:	220f803a 	cmpltu	r7,r4,r8
  814874:	4a4b883a 	add	r5,r9,r9
  814878:	394f883a 	add	r7,r7,r5
  81487c:	2095883a 	add	r10,r4,r2
  814880:	3897883a 	add	r11,r7,r2
  814884:	510d803a 	cmpltu	r6,r10,r4
  814888:	6099883a 	add	r12,r12,r2
  81488c:	32d7883a 	add	r11,r6,r11
  814890:	00840034 	movhi	r2,4096
  814894:	10bfffc4 	addi	r2,r2,-1
  814898:	2011883a 	mov	r8,r4
  81489c:	3813883a 	mov	r9,r7
  8148a0:	a1000315 	stw	r4,12(r20)
  8148a4:	a1c00415 	stw	r7,16(r20)
  8148a8:	a3000215 	stw	r12,8(r20)
  8148ac:	12c00336 	bltu	r2,r11,8148bc <_fpadd_parts+0x1a8>
  8148b0:	58bfed1e 	bne	r11,r2,814868 <_fpadd_parts+0x154>
  8148b4:	00bfff84 	movi	r2,-2
  8148b8:	12bfeb2e 	bgeu	r2,r10,814868 <_fpadd_parts+0x154>
  8148bc:	a2800417 	ldw	r10,16(r20)
  8148c0:	008000c4 	movi	r2,3
  8148c4:	00c80034 	movhi	r3,8192
  8148c8:	18ffffc4 	addi	r3,r3,-1
  8148cc:	a2400317 	ldw	r9,12(r20)
  8148d0:	a0800015 	stw	r2,0(r20)
  8148d4:	1a802336 	bltu	r3,r10,814964 <_fpadd_parts+0x250>
  8148d8:	a027883a 	mov	r19,r20
  8148dc:	9805883a 	mov	r2,r19
  8148e0:	ddc00717 	ldw	r23,28(sp)
  8148e4:	dd800617 	ldw	r22,24(sp)
  8148e8:	dd400517 	ldw	r21,20(sp)
  8148ec:	dd000417 	ldw	r20,16(sp)
  8148f0:	dcc00317 	ldw	r19,12(sp)
  8148f4:	dc800217 	ldw	r18,8(sp)
  8148f8:	dc400117 	ldw	r17,4(sp)
  8148fc:	dc000017 	ldw	r16,0(sp)
  814900:	dec00804 	addi	sp,sp,32
  814904:	f800283a 	ret
  814908:	20fff41e 	bne	r4,r3,8148dc <_fpadd_parts+0x1c8>
  81490c:	31000015 	stw	r4,0(r6)
  814910:	98800117 	ldw	r2,4(r19)
  814914:	30800115 	stw	r2,4(r6)
  814918:	98c00217 	ldw	r3,8(r19)
  81491c:	30c00215 	stw	r3,8(r6)
  814920:	98800317 	ldw	r2,12(r19)
  814924:	30800315 	stw	r2,12(r6)
  814928:	98c00417 	ldw	r3,16(r19)
  81492c:	30c00415 	stw	r3,16(r6)
  814930:	98800117 	ldw	r2,4(r19)
  814934:	28c00117 	ldw	r3,4(r5)
  814938:	3027883a 	mov	r19,r6
  81493c:	10c4703a 	and	r2,r2,r3
  814940:	30800115 	stw	r2,4(r6)
  814944:	003fe506 	br	8148dc <_fpadd_parts+0x1c8>
  814948:	1dc02616 	blt	r3,r23,8149e4 <_fpadd_parts+0x2d0>
  81494c:	0023883a 	mov	r17,zero
  814950:	182f883a 	mov	r23,r3
  814954:	0025883a 	mov	r18,zero
  814958:	003fa806 	br	8147fc <_fpadd_parts+0xe8>
  81495c:	a827883a 	mov	r19,r21
  814960:	003fde06 	br	8148dc <_fpadd_parts+0x1c8>
  814964:	01800044 	movi	r6,1
  814968:	500497fa 	slli	r2,r10,31
  81496c:	4808d07a 	srli	r4,r9,1
  814970:	518ad83a 	srl	r5,r10,r6
  814974:	a2000217 	ldw	r8,8(r20)
  814978:	1108b03a 	or	r4,r2,r4
  81497c:	0007883a 	mov	r3,zero
  814980:	4984703a 	and	r2,r9,r6
  814984:	208cb03a 	or	r6,r4,r2
  814988:	28ceb03a 	or	r7,r5,r3
  81498c:	42000044 	addi	r8,r8,1
  814990:	a027883a 	mov	r19,r20
  814994:	a1c00415 	stw	r7,16(r20)
  814998:	a2000215 	stw	r8,8(r20)
  81499c:	a1800315 	stw	r6,12(r20)
  8149a0:	003fce06 	br	8148dc <_fpadd_parts+0x1c8>
  8149a4:	8bc5c83a 	sub	r2,r17,r15
  8149a8:	8889803a 	cmpltu	r4,r17,r2
  8149ac:	9407c83a 	sub	r3,r18,r16
  8149b0:	1909c83a 	sub	r4,r3,r4
  8149b4:	100d883a 	mov	r6,r2
  8149b8:	200f883a 	mov	r7,r4
  8149bc:	003f9906 	br	814824 <_fpadd_parts+0x110>
  8149c0:	7c45883a 	add	r2,r15,r17
  8149c4:	13c9803a 	cmpltu	r4,r2,r15
  8149c8:	8487883a 	add	r3,r16,r18
  8149cc:	20c9883a 	add	r4,r4,r3
  8149d0:	a1400115 	stw	r5,4(r20)
  8149d4:	a5c00215 	stw	r23,8(r20)
  8149d8:	a0800315 	stw	r2,12(r20)
  8149dc:	a1000415 	stw	r4,16(r20)
  8149e0:	003fb606 	br	8148bc <_fpadd_parts+0x1a8>
  8149e4:	001f883a 	mov	r15,zero
  8149e8:	0021883a 	mov	r16,zero
  8149ec:	003f8306 	br	8147fc <_fpadd_parts+0xe8>
  8149f0:	018dc83a 	sub	r6,zero,r6
  8149f4:	003f6706 	br	814794 <_fpadd_parts+0x80>
  8149f8:	00bfff84 	movi	r2,-2
  8149fc:	117faf36 	bltu	r2,r5,8148bc <_fpadd_parts+0x1a8>
  814a00:	003f9806 	br	814864 <_fpadd_parts+0x150>
  814a04:	0005883a 	mov	r2,zero
  814a08:	1189c83a 	sub	r4,r2,r6
  814a0c:	1105803a 	cmpltu	r2,r2,r4
  814a10:	01cbc83a 	sub	r5,zero,r7
  814a14:	2885c83a 	sub	r2,r5,r2
  814a18:	01800044 	movi	r6,1
  814a1c:	a1800115 	stw	r6,4(r20)
  814a20:	a5c00215 	stw	r23,8(r20)
  814a24:	a1000315 	stw	r4,12(r20)
  814a28:	a0800415 	stw	r2,16(r20)
  814a2c:	003f8206 	br	814838 <_fpadd_parts+0x124>
  814a30:	203f7226 	beq	r4,zero,8147fc <_fpadd_parts+0xe8>
  814a34:	35bff804 	addi	r22,r6,-32
  814a38:	b9af883a 	add	r23,r23,r6
  814a3c:	b0003116 	blt	r22,zero,814b04 <_fpadd_parts+0x3f0>
  814a40:	959ad83a 	srl	r13,r18,r22
  814a44:	001d883a 	mov	r14,zero
  814a48:	000f883a 	mov	r7,zero
  814a4c:	01000044 	movi	r4,1
  814a50:	0011883a 	mov	r8,zero
  814a54:	b0002516 	blt	r22,zero,814aec <_fpadd_parts+0x3d8>
  814a58:	2594983a 	sll	r10,r4,r22
  814a5c:	0013883a 	mov	r9,zero
  814a60:	00bfffc4 	movi	r2,-1
  814a64:	4889883a 	add	r4,r9,r2
  814a68:	508b883a 	add	r5,r10,r2
  814a6c:	224d803a 	cmpltu	r6,r4,r9
  814a70:	314b883a 	add	r5,r6,r5
  814a74:	8904703a 	and	r2,r17,r4
  814a78:	9146703a 	and	r3,r18,r5
  814a7c:	10c4b03a 	or	r2,r2,r3
  814a80:	10000226 	beq	r2,zero,814a8c <_fpadd_parts+0x378>
  814a84:	01c00044 	movi	r7,1
  814a88:	0011883a 	mov	r8,zero
  814a8c:	69e2b03a 	or	r17,r13,r7
  814a90:	7224b03a 	or	r18,r14,r8
  814a94:	003f5906 	br	8147fc <_fpadd_parts+0xe8>
  814a98:	8407883a 	add	r3,r16,r16
  814a9c:	008007c4 	movi	r2,31
  814aa0:	1185c83a 	sub	r2,r2,r6
  814aa4:	1886983a 	sll	r3,r3,r2
  814aa8:	7996d83a 	srl	r11,r15,r6
  814aac:	8198d83a 	srl	r12,r16,r6
  814ab0:	1ad6b03a 	or	r11,r3,r11
  814ab4:	003f3e06 	br	8147b0 <_fpadd_parts+0x9c>
  814ab8:	2006d07a 	srli	r3,r4,1
  814abc:	008007c4 	movi	r2,31
  814ac0:	1185c83a 	sub	r2,r2,r6
  814ac4:	1890d83a 	srl	r8,r3,r2
  814ac8:	218e983a 	sll	r7,r4,r6
  814acc:	003f3e06 	br	8147c8 <_fpadd_parts+0xb4>
  814ad0:	113f821e 	bne	r2,r4,8148dc <_fpadd_parts+0x1c8>
  814ad4:	28c00117 	ldw	r3,4(r5)
  814ad8:	98800117 	ldw	r2,4(r19)
  814adc:	10ff7f26 	beq	r2,r3,8148dc <_fpadd_parts+0x1c8>
  814ae0:	04c02174 	movhi	r19,133
  814ae4:	9cf25f04 	addi	r19,r19,-13956
  814ae8:	003f7c06 	br	8148dc <_fpadd_parts+0x1c8>
  814aec:	2006d07a 	srli	r3,r4,1
  814af0:	008007c4 	movi	r2,31
  814af4:	1185c83a 	sub	r2,r2,r6
  814af8:	1894d83a 	srl	r10,r3,r2
  814afc:	2192983a 	sll	r9,r4,r6
  814b00:	003fd706 	br	814a60 <_fpadd_parts+0x34c>
  814b04:	9487883a 	add	r3,r18,r18
  814b08:	008007c4 	movi	r2,31
  814b0c:	1185c83a 	sub	r2,r2,r6
  814b10:	1886983a 	sll	r3,r3,r2
  814b14:	899ad83a 	srl	r13,r17,r6
  814b18:	919cd83a 	srl	r14,r18,r6
  814b1c:	1b5ab03a 	or	r13,r3,r13
  814b20:	003fc906 	br	814a48 <_fpadd_parts+0x334>

00814b24 <__subdf3>:
  814b24:	deffea04 	addi	sp,sp,-88
  814b28:	dcc01415 	stw	r19,80(sp)
  814b2c:	dcc00404 	addi	r19,sp,16
  814b30:	2011883a 	mov	r8,r4
  814b34:	2813883a 	mov	r9,r5
  814b38:	dc401315 	stw	r17,76(sp)
  814b3c:	d809883a 	mov	r4,sp
  814b40:	980b883a 	mov	r5,r19
  814b44:	dc400904 	addi	r17,sp,36
  814b48:	dfc01515 	stw	ra,84(sp)
  814b4c:	da400115 	stw	r9,4(sp)
  814b50:	d9c00315 	stw	r7,12(sp)
  814b54:	da000015 	stw	r8,0(sp)
  814b58:	d9800215 	stw	r6,8(sp)
  814b5c:	0815e6c0 	call	815e6c <__unpack_d>
  814b60:	d9000204 	addi	r4,sp,8
  814b64:	880b883a 	mov	r5,r17
  814b68:	0815e6c0 	call	815e6c <__unpack_d>
  814b6c:	d8800a17 	ldw	r2,40(sp)
  814b70:	880b883a 	mov	r5,r17
  814b74:	9809883a 	mov	r4,r19
  814b78:	d9800e04 	addi	r6,sp,56
  814b7c:	1080005c 	xori	r2,r2,1
  814b80:	d8800a15 	stw	r2,40(sp)
  814b84:	08147140 	call	814714 <_fpadd_parts>
  814b88:	1009883a 	mov	r4,r2
  814b8c:	0815b580 	call	815b58 <__pack_d>
  814b90:	dfc01517 	ldw	ra,84(sp)
  814b94:	dcc01417 	ldw	r19,80(sp)
  814b98:	dc401317 	ldw	r17,76(sp)
  814b9c:	dec01604 	addi	sp,sp,88
  814ba0:	f800283a 	ret

00814ba4 <__adddf3>:
  814ba4:	deffea04 	addi	sp,sp,-88
  814ba8:	dcc01415 	stw	r19,80(sp)
  814bac:	dcc00404 	addi	r19,sp,16
  814bb0:	2011883a 	mov	r8,r4
  814bb4:	2813883a 	mov	r9,r5
  814bb8:	dc401315 	stw	r17,76(sp)
  814bbc:	d809883a 	mov	r4,sp
  814bc0:	980b883a 	mov	r5,r19
  814bc4:	dc400904 	addi	r17,sp,36
  814bc8:	dfc01515 	stw	ra,84(sp)
  814bcc:	da400115 	stw	r9,4(sp)
  814bd0:	d9c00315 	stw	r7,12(sp)
  814bd4:	da000015 	stw	r8,0(sp)
  814bd8:	d9800215 	stw	r6,8(sp)
  814bdc:	0815e6c0 	call	815e6c <__unpack_d>
  814be0:	d9000204 	addi	r4,sp,8
  814be4:	880b883a 	mov	r5,r17
  814be8:	0815e6c0 	call	815e6c <__unpack_d>
  814bec:	d9800e04 	addi	r6,sp,56
  814bf0:	9809883a 	mov	r4,r19
  814bf4:	880b883a 	mov	r5,r17
  814bf8:	08147140 	call	814714 <_fpadd_parts>
  814bfc:	1009883a 	mov	r4,r2
  814c00:	0815b580 	call	815b58 <__pack_d>
  814c04:	dfc01517 	ldw	ra,84(sp)
  814c08:	dcc01417 	ldw	r19,80(sp)
  814c0c:	dc401317 	ldw	r17,76(sp)
  814c10:	dec01604 	addi	sp,sp,88
  814c14:	f800283a 	ret

00814c18 <__muldf3>:
  814c18:	deffe004 	addi	sp,sp,-128
  814c1c:	dc401815 	stw	r17,96(sp)
  814c20:	dc400404 	addi	r17,sp,16
  814c24:	2011883a 	mov	r8,r4
  814c28:	2813883a 	mov	r9,r5
  814c2c:	dc001715 	stw	r16,92(sp)
  814c30:	d809883a 	mov	r4,sp
  814c34:	880b883a 	mov	r5,r17
  814c38:	dc000904 	addi	r16,sp,36
  814c3c:	dfc01f15 	stw	ra,124(sp)
  814c40:	da400115 	stw	r9,4(sp)
  814c44:	d9c00315 	stw	r7,12(sp)
  814c48:	da000015 	stw	r8,0(sp)
  814c4c:	d9800215 	stw	r6,8(sp)
  814c50:	ddc01e15 	stw	r23,120(sp)
  814c54:	dd801d15 	stw	r22,116(sp)
  814c58:	dd401c15 	stw	r21,112(sp)
  814c5c:	dd001b15 	stw	r20,108(sp)
  814c60:	dcc01a15 	stw	r19,104(sp)
  814c64:	dc801915 	stw	r18,100(sp)
  814c68:	0815e6c0 	call	815e6c <__unpack_d>
  814c6c:	d9000204 	addi	r4,sp,8
  814c70:	800b883a 	mov	r5,r16
  814c74:	0815e6c0 	call	815e6c <__unpack_d>
  814c78:	d9000417 	ldw	r4,16(sp)
  814c7c:	00800044 	movi	r2,1
  814c80:	1100102e 	bgeu	r2,r4,814cc4 <__muldf3+0xac>
  814c84:	d8c00917 	ldw	r3,36(sp)
  814c88:	10c0062e 	bgeu	r2,r3,814ca4 <__muldf3+0x8c>
  814c8c:	00800104 	movi	r2,4
  814c90:	20800a26 	beq	r4,r2,814cbc <__muldf3+0xa4>
  814c94:	1880cc26 	beq	r3,r2,814fc8 <__muldf3+0x3b0>
  814c98:	00800084 	movi	r2,2
  814c9c:	20800926 	beq	r4,r2,814cc4 <__muldf3+0xac>
  814ca0:	1880191e 	bne	r3,r2,814d08 <__muldf3+0xf0>
  814ca4:	d8c00a17 	ldw	r3,40(sp)
  814ca8:	d8800517 	ldw	r2,20(sp)
  814cac:	8009883a 	mov	r4,r16
  814cb0:	10c4c03a 	cmpne	r2,r2,r3
  814cb4:	d8800a15 	stw	r2,40(sp)
  814cb8:	00000706 	br	814cd8 <__muldf3+0xc0>
  814cbc:	00800084 	movi	r2,2
  814cc0:	1880c326 	beq	r3,r2,814fd0 <__muldf3+0x3b8>
  814cc4:	d8800517 	ldw	r2,20(sp)
  814cc8:	d8c00a17 	ldw	r3,40(sp)
  814ccc:	8809883a 	mov	r4,r17
  814cd0:	10c4c03a 	cmpne	r2,r2,r3
  814cd4:	d8800515 	stw	r2,20(sp)
  814cd8:	0815b580 	call	815b58 <__pack_d>
  814cdc:	dfc01f17 	ldw	ra,124(sp)
  814ce0:	ddc01e17 	ldw	r23,120(sp)
  814ce4:	dd801d17 	ldw	r22,116(sp)
  814ce8:	dd401c17 	ldw	r21,112(sp)
  814cec:	dd001b17 	ldw	r20,108(sp)
  814cf0:	dcc01a17 	ldw	r19,104(sp)
  814cf4:	dc801917 	ldw	r18,100(sp)
  814cf8:	dc401817 	ldw	r17,96(sp)
  814cfc:	dc001717 	ldw	r16,92(sp)
  814d00:	dec02004 	addi	sp,sp,128
  814d04:	f800283a 	ret
  814d08:	dd800717 	ldw	r22,28(sp)
  814d0c:	dc800c17 	ldw	r18,48(sp)
  814d10:	002b883a 	mov	r21,zero
  814d14:	0023883a 	mov	r17,zero
  814d18:	a80b883a 	mov	r5,r21
  814d1c:	b00d883a 	mov	r6,r22
  814d20:	880f883a 	mov	r7,r17
  814d24:	ddc00817 	ldw	r23,32(sp)
  814d28:	dcc00d17 	ldw	r19,52(sp)
  814d2c:	9009883a 	mov	r4,r18
  814d30:	08138e40 	call	8138e4 <__muldi3>
  814d34:	001b883a 	mov	r13,zero
  814d38:	680f883a 	mov	r7,r13
  814d3c:	b009883a 	mov	r4,r22
  814d40:	000b883a 	mov	r5,zero
  814d44:	980d883a 	mov	r6,r19
  814d48:	b82d883a 	mov	r22,r23
  814d4c:	002f883a 	mov	r23,zero
  814d50:	db401615 	stw	r13,88(sp)
  814d54:	d8801315 	stw	r2,76(sp)
  814d58:	d8c01415 	stw	r3,80(sp)
  814d5c:	dcc01515 	stw	r19,84(sp)
  814d60:	08138e40 	call	8138e4 <__muldi3>
  814d64:	b00d883a 	mov	r6,r22
  814d68:	000b883a 	mov	r5,zero
  814d6c:	9009883a 	mov	r4,r18
  814d70:	b80f883a 	mov	r7,r23
  814d74:	1021883a 	mov	r16,r2
  814d78:	1823883a 	mov	r17,r3
  814d7c:	08138e40 	call	8138e4 <__muldi3>
  814d80:	8085883a 	add	r2,r16,r2
  814d84:	140d803a 	cmpltu	r6,r2,r16
  814d88:	88c7883a 	add	r3,r17,r3
  814d8c:	30cd883a 	add	r6,r6,r3
  814d90:	1029883a 	mov	r20,r2
  814d94:	302b883a 	mov	r21,r6
  814d98:	da801317 	ldw	r10,76(sp)
  814d9c:	dac01417 	ldw	r11,80(sp)
  814da0:	db001517 	ldw	r12,84(sp)
  814da4:	db401617 	ldw	r13,88(sp)
  814da8:	3440612e 	bgeu	r6,r17,814f30 <__muldf3+0x318>
  814dac:	0009883a 	mov	r4,zero
  814db0:	5105883a 	add	r2,r10,r4
  814db4:	128d803a 	cmpltu	r6,r2,r10
  814db8:	5d07883a 	add	r3,r11,r20
  814dbc:	30cd883a 	add	r6,r6,r3
  814dc0:	0021883a 	mov	r16,zero
  814dc4:	04400044 	movi	r17,1
  814dc8:	1025883a 	mov	r18,r2
  814dcc:	3027883a 	mov	r19,r6
  814dd0:	32c06236 	bltu	r6,r11,814f5c <__muldf3+0x344>
  814dd4:	59807a26 	beq	r11,r6,814fc0 <__muldf3+0x3a8>
  814dd8:	680b883a 	mov	r5,r13
  814ddc:	b80f883a 	mov	r7,r23
  814de0:	6009883a 	mov	r4,r12
  814de4:	b00d883a 	mov	r6,r22
  814de8:	08138e40 	call	8138e4 <__muldi3>
  814dec:	1009883a 	mov	r4,r2
  814df0:	000f883a 	mov	r7,zero
  814df4:	1545883a 	add	r2,r2,r21
  814df8:	1111803a 	cmpltu	r8,r2,r4
  814dfc:	19c7883a 	add	r3,r3,r7
  814e00:	40c7883a 	add	r3,r8,r3
  814e04:	88cb883a 	add	r5,r17,r3
  814e08:	d8c00617 	ldw	r3,24(sp)
  814e0c:	8089883a 	add	r4,r16,r2
  814e10:	d8800b17 	ldw	r2,44(sp)
  814e14:	18c00104 	addi	r3,r3,4
  814e18:	240d803a 	cmpltu	r6,r4,r16
  814e1c:	10c7883a 	add	r3,r2,r3
  814e20:	2013883a 	mov	r9,r4
  814e24:	d8800a17 	ldw	r2,40(sp)
  814e28:	d9000517 	ldw	r4,20(sp)
  814e2c:	314d883a 	add	r6,r6,r5
  814e30:	3015883a 	mov	r10,r6
  814e34:	2088c03a 	cmpne	r4,r4,r2
  814e38:	00880034 	movhi	r2,8192
  814e3c:	10bfffc4 	addi	r2,r2,-1
  814e40:	d9000f15 	stw	r4,60(sp)
  814e44:	d8c01015 	stw	r3,64(sp)
  814e48:	1180162e 	bgeu	r2,r6,814ea4 <__muldf3+0x28c>
  814e4c:	1811883a 	mov	r8,r3
  814e50:	101f883a 	mov	r15,r2
  814e54:	980497fa 	slli	r2,r19,31
  814e58:	9016d07a 	srli	r11,r18,1
  814e5c:	500697fa 	slli	r3,r10,31
  814e60:	480cd07a 	srli	r6,r9,1
  814e64:	500ed07a 	srli	r7,r10,1
  814e68:	12d6b03a 	or	r11,r2,r11
  814e6c:	00800044 	movi	r2,1
  814e70:	198cb03a 	or	r6,r3,r6
  814e74:	4888703a 	and	r4,r9,r2
  814e78:	9818d07a 	srli	r12,r19,1
  814e7c:	001b883a 	mov	r13,zero
  814e80:	03a00034 	movhi	r14,32768
  814e84:	3013883a 	mov	r9,r6
  814e88:	3815883a 	mov	r10,r7
  814e8c:	4091883a 	add	r8,r8,r2
  814e90:	20000226 	beq	r4,zero,814e9c <__muldf3+0x284>
  814e94:	5b64b03a 	or	r18,r11,r13
  814e98:	63a6b03a 	or	r19,r12,r14
  814e9c:	7abfed36 	bltu	r15,r10,814e54 <__muldf3+0x23c>
  814ea0:	da001015 	stw	r8,64(sp)
  814ea4:	00840034 	movhi	r2,4096
  814ea8:	10bfffc4 	addi	r2,r2,-1
  814eac:	12801436 	bltu	r2,r10,814f00 <__muldf3+0x2e8>
  814eb0:	da001017 	ldw	r8,64(sp)
  814eb4:	101f883a 	mov	r15,r2
  814eb8:	4a45883a 	add	r2,r9,r9
  814ebc:	124d803a 	cmpltu	r6,r2,r9
  814ec0:	5287883a 	add	r3,r10,r10
  814ec4:	9497883a 	add	r11,r18,r18
  814ec8:	5c8f803a 	cmpltu	r7,r11,r18
  814ecc:	9cd9883a 	add	r12,r19,r19
  814ed0:	01000044 	movi	r4,1
  814ed4:	30cd883a 	add	r6,r6,r3
  814ed8:	3b0f883a 	add	r7,r7,r12
  814edc:	423fffc4 	addi	r8,r8,-1
  814ee0:	1013883a 	mov	r9,r2
  814ee4:	3015883a 	mov	r10,r6
  814ee8:	111ab03a 	or	r13,r2,r4
  814eec:	98003016 	blt	r19,zero,814fb0 <__muldf3+0x398>
  814ef0:	5825883a 	mov	r18,r11
  814ef4:	3827883a 	mov	r19,r7
  814ef8:	7abfef2e 	bgeu	r15,r10,814eb8 <__muldf3+0x2a0>
  814efc:	da001015 	stw	r8,64(sp)
  814f00:	00803fc4 	movi	r2,255
  814f04:	488e703a 	and	r7,r9,r2
  814f08:	00802004 	movi	r2,128
  814f0c:	0007883a 	mov	r3,zero
  814f10:	0011883a 	mov	r8,zero
  814f14:	38801826 	beq	r7,r2,814f78 <__muldf3+0x360>
  814f18:	008000c4 	movi	r2,3
  814f1c:	d9000e04 	addi	r4,sp,56
  814f20:	da801215 	stw	r10,72(sp)
  814f24:	d8800e15 	stw	r2,56(sp)
  814f28:	da401115 	stw	r9,68(sp)
  814f2c:	003f6a06 	br	814cd8 <__muldf3+0xc0>
  814f30:	89802126 	beq	r17,r6,814fb8 <__muldf3+0x3a0>
  814f34:	0009883a 	mov	r4,zero
  814f38:	5105883a 	add	r2,r10,r4
  814f3c:	128d803a 	cmpltu	r6,r2,r10
  814f40:	5d07883a 	add	r3,r11,r20
  814f44:	30cd883a 	add	r6,r6,r3
  814f48:	0021883a 	mov	r16,zero
  814f4c:	0023883a 	mov	r17,zero
  814f50:	1025883a 	mov	r18,r2
  814f54:	3027883a 	mov	r19,r6
  814f58:	32ff9e2e 	bgeu	r6,r11,814dd4 <__muldf3+0x1bc>
  814f5c:	00800044 	movi	r2,1
  814f60:	8089883a 	add	r4,r16,r2
  814f64:	240d803a 	cmpltu	r6,r4,r16
  814f68:	344d883a 	add	r6,r6,r17
  814f6c:	2021883a 	mov	r16,r4
  814f70:	3023883a 	mov	r17,r6
  814f74:	003f9806 	br	814dd8 <__muldf3+0x1c0>
  814f78:	403fe71e 	bne	r8,zero,814f18 <__muldf3+0x300>
  814f7c:	01004004 	movi	r4,256
  814f80:	4904703a 	and	r2,r9,r4
  814f84:	10c4b03a 	or	r2,r2,r3
  814f88:	103fe31e 	bne	r2,zero,814f18 <__muldf3+0x300>
  814f8c:	94c4b03a 	or	r2,r18,r19
  814f90:	103fe126 	beq	r2,zero,814f18 <__muldf3+0x300>
  814f94:	49c5883a 	add	r2,r9,r7
  814f98:	1251803a 	cmpltu	r8,r2,r9
  814f9c:	4291883a 	add	r8,r8,r10
  814fa0:	013fc004 	movi	r4,-256
  814fa4:	1112703a 	and	r9,r2,r4
  814fa8:	4015883a 	mov	r10,r8
  814fac:	003fda06 	br	814f18 <__muldf3+0x300>
  814fb0:	6813883a 	mov	r9,r13
  814fb4:	003fce06 	br	814ef0 <__muldf3+0x2d8>
  814fb8:	143f7c36 	bltu	r2,r16,814dac <__muldf3+0x194>
  814fbc:	003fdd06 	br	814f34 <__muldf3+0x31c>
  814fc0:	12bf852e 	bgeu	r2,r10,814dd8 <__muldf3+0x1c0>
  814fc4:	003fe506 	br	814f5c <__muldf3+0x344>
  814fc8:	00800084 	movi	r2,2
  814fcc:	20bf351e 	bne	r4,r2,814ca4 <__muldf3+0x8c>
  814fd0:	01002174 	movhi	r4,133
  814fd4:	21325f04 	addi	r4,r4,-13956
  814fd8:	003f3f06 	br	814cd8 <__muldf3+0xc0>

00814fdc <__divdf3>:
  814fdc:	deffed04 	addi	sp,sp,-76
  814fe0:	dcc01115 	stw	r19,68(sp)
  814fe4:	dcc00404 	addi	r19,sp,16
  814fe8:	2011883a 	mov	r8,r4
  814fec:	2813883a 	mov	r9,r5
  814ff0:	dc000e15 	stw	r16,56(sp)
  814ff4:	d809883a 	mov	r4,sp
  814ff8:	980b883a 	mov	r5,r19
  814ffc:	dc000904 	addi	r16,sp,36
  815000:	dfc01215 	stw	ra,72(sp)
  815004:	da400115 	stw	r9,4(sp)
  815008:	d9c00315 	stw	r7,12(sp)
  81500c:	da000015 	stw	r8,0(sp)
  815010:	d9800215 	stw	r6,8(sp)
  815014:	dc801015 	stw	r18,64(sp)
  815018:	dc400f15 	stw	r17,60(sp)
  81501c:	0815e6c0 	call	815e6c <__unpack_d>
  815020:	d9000204 	addi	r4,sp,8
  815024:	800b883a 	mov	r5,r16
  815028:	0815e6c0 	call	815e6c <__unpack_d>
  81502c:	d9000417 	ldw	r4,16(sp)
  815030:	00800044 	movi	r2,1
  815034:	11000b2e 	bgeu	r2,r4,815064 <__divdf3+0x88>
  815038:	d9400917 	ldw	r5,36(sp)
  81503c:	1140762e 	bgeu	r2,r5,815218 <__divdf3+0x23c>
  815040:	d8800517 	ldw	r2,20(sp)
  815044:	d8c00a17 	ldw	r3,40(sp)
  815048:	01800104 	movi	r6,4
  81504c:	10c4f03a 	xor	r2,r2,r3
  815050:	d8800515 	stw	r2,20(sp)
  815054:	21800226 	beq	r4,r6,815060 <__divdf3+0x84>
  815058:	00800084 	movi	r2,2
  81505c:	2080141e 	bne	r4,r2,8150b0 <__divdf3+0xd4>
  815060:	29000926 	beq	r5,r4,815088 <__divdf3+0xac>
  815064:	9809883a 	mov	r4,r19
  815068:	0815b580 	call	815b58 <__pack_d>
  81506c:	dfc01217 	ldw	ra,72(sp)
  815070:	dcc01117 	ldw	r19,68(sp)
  815074:	dc801017 	ldw	r18,64(sp)
  815078:	dc400f17 	ldw	r17,60(sp)
  81507c:	dc000e17 	ldw	r16,56(sp)
  815080:	dec01304 	addi	sp,sp,76
  815084:	f800283a 	ret
  815088:	01002174 	movhi	r4,133
  81508c:	21325f04 	addi	r4,r4,-13956
  815090:	0815b580 	call	815b58 <__pack_d>
  815094:	dfc01217 	ldw	ra,72(sp)
  815098:	dcc01117 	ldw	r19,68(sp)
  81509c:	dc801017 	ldw	r18,64(sp)
  8150a0:	dc400f17 	ldw	r17,60(sp)
  8150a4:	dc000e17 	ldw	r16,56(sp)
  8150a8:	dec01304 	addi	sp,sp,76
  8150ac:	f800283a 	ret
  8150b0:	29805b26 	beq	r5,r6,815220 <__divdf3+0x244>
  8150b4:	28802d26 	beq	r5,r2,81516c <__divdf3+0x190>
  8150b8:	d8c00617 	ldw	r3,24(sp)
  8150bc:	d8800b17 	ldw	r2,44(sp)
  8150c0:	d9c00817 	ldw	r7,32(sp)
  8150c4:	dc400d17 	ldw	r17,52(sp)
  8150c8:	188bc83a 	sub	r5,r3,r2
  8150cc:	d9800717 	ldw	r6,28(sp)
  8150d0:	dc000c17 	ldw	r16,48(sp)
  8150d4:	d9400615 	stw	r5,24(sp)
  8150d8:	3c403836 	bltu	r7,r17,8151bc <__divdf3+0x1e0>
  8150dc:	89c03626 	beq	r17,r7,8151b8 <__divdf3+0x1dc>
  8150e0:	0015883a 	mov	r10,zero
  8150e4:	001d883a 	mov	r14,zero
  8150e8:	02c40034 	movhi	r11,4096
  8150ec:	001f883a 	mov	r15,zero
  8150f0:	003f883a 	mov	ra,zero
  8150f4:	04800f44 	movi	r18,61
  8150f8:	00000f06 	br	815138 <__divdf3+0x15c>
  8150fc:	601d883a 	mov	r14,r12
  815100:	681f883a 	mov	r15,r13
  815104:	400d883a 	mov	r6,r8
  815108:	100f883a 	mov	r7,r2
  81510c:	3191883a 	add	r8,r6,r6
  815110:	5808d07a 	srli	r4,r11,1
  815114:	4185803a 	cmpltu	r2,r8,r6
  815118:	39d3883a 	add	r9,r7,r7
  81511c:	28c6b03a 	or	r3,r5,r3
  815120:	1245883a 	add	r2,r2,r9
  815124:	1815883a 	mov	r10,r3
  815128:	2017883a 	mov	r11,r4
  81512c:	400d883a 	mov	r6,r8
  815130:	100f883a 	mov	r7,r2
  815134:	fc801726 	beq	ra,r18,815194 <__divdf3+0x1b8>
  815138:	580a97fa 	slli	r5,r11,31
  81513c:	5006d07a 	srli	r3,r10,1
  815140:	ffc00044 	addi	ra,ra,1
  815144:	3c7ff136 	bltu	r7,r17,81510c <__divdf3+0x130>
  815148:	3411c83a 	sub	r8,r6,r16
  81514c:	3205803a 	cmpltu	r2,r6,r8
  815150:	3c53c83a 	sub	r9,r7,r17
  815154:	7298b03a 	or	r12,r14,r10
  815158:	7adab03a 	or	r13,r15,r11
  81515c:	4885c83a 	sub	r2,r9,r2
  815160:	89ffe61e 	bne	r17,r7,8150fc <__divdf3+0x120>
  815164:	343fe936 	bltu	r6,r16,81510c <__divdf3+0x130>
  815168:	003fe406 	br	8150fc <__divdf3+0x120>
  81516c:	9809883a 	mov	r4,r19
  815170:	d9800415 	stw	r6,16(sp)
  815174:	0815b580 	call	815b58 <__pack_d>
  815178:	dfc01217 	ldw	ra,72(sp)
  81517c:	dcc01117 	ldw	r19,68(sp)
  815180:	dc801017 	ldw	r18,64(sp)
  815184:	dc400f17 	ldw	r17,60(sp)
  815188:	dc000e17 	ldw	r16,56(sp)
  81518c:	dec01304 	addi	sp,sp,76
  815190:	f800283a 	ret
  815194:	00803fc4 	movi	r2,255
  815198:	7090703a 	and	r8,r14,r2
  81519c:	00802004 	movi	r2,128
  8151a0:	0007883a 	mov	r3,zero
  8151a4:	0013883a 	mov	r9,zero
  8151a8:	40800d26 	beq	r8,r2,8151e0 <__divdf3+0x204>
  8151ac:	dbc00815 	stw	r15,32(sp)
  8151b0:	db800715 	stw	r14,28(sp)
  8151b4:	003fab06 	br	815064 <__divdf3+0x88>
  8151b8:	343fc92e 	bgeu	r6,r16,8150e0 <__divdf3+0x104>
  8151bc:	3185883a 	add	r2,r6,r6
  8151c0:	1189803a 	cmpltu	r4,r2,r6
  8151c4:	39c7883a 	add	r3,r7,r7
  8151c8:	20c9883a 	add	r4,r4,r3
  8151cc:	297fffc4 	addi	r5,r5,-1
  8151d0:	100d883a 	mov	r6,r2
  8151d4:	200f883a 	mov	r7,r4
  8151d8:	d9400615 	stw	r5,24(sp)
  8151dc:	003fc006 	br	8150e0 <__divdf3+0x104>
  8151e0:	483ff21e 	bne	r9,zero,8151ac <__divdf3+0x1d0>
  8151e4:	01004004 	movi	r4,256
  8151e8:	7104703a 	and	r2,r14,r4
  8151ec:	10c4b03a 	or	r2,r2,r3
  8151f0:	103fee1e 	bne	r2,zero,8151ac <__divdf3+0x1d0>
  8151f4:	31c4b03a 	or	r2,r6,r7
  8151f8:	103fec26 	beq	r2,zero,8151ac <__divdf3+0x1d0>
  8151fc:	7205883a 	add	r2,r14,r8
  815200:	1391803a 	cmpltu	r8,r2,r14
  815204:	43d1883a 	add	r8,r8,r15
  815208:	013fc004 	movi	r4,-256
  81520c:	111c703a 	and	r14,r2,r4
  815210:	401f883a 	mov	r15,r8
  815214:	003fe506 	br	8151ac <__divdf3+0x1d0>
  815218:	8009883a 	mov	r4,r16
  81521c:	003f9206 	br	815068 <__divdf3+0x8c>
  815220:	9809883a 	mov	r4,r19
  815224:	d8000715 	stw	zero,28(sp)
  815228:	d8000815 	stw	zero,32(sp)
  81522c:	d8000615 	stw	zero,24(sp)
  815230:	003f8d06 	br	815068 <__divdf3+0x8c>

00815234 <__eqdf2>:
  815234:	deffef04 	addi	sp,sp,-68
  815238:	dc400f15 	stw	r17,60(sp)
  81523c:	dc400404 	addi	r17,sp,16
  815240:	2005883a 	mov	r2,r4
  815244:	2807883a 	mov	r3,r5
  815248:	dc000e15 	stw	r16,56(sp)
  81524c:	d809883a 	mov	r4,sp
  815250:	880b883a 	mov	r5,r17
  815254:	dc000904 	addi	r16,sp,36
  815258:	d8c00115 	stw	r3,4(sp)
  81525c:	d8800015 	stw	r2,0(sp)
  815260:	d9800215 	stw	r6,8(sp)
  815264:	dfc01015 	stw	ra,64(sp)
  815268:	d9c00315 	stw	r7,12(sp)
  81526c:	0815e6c0 	call	815e6c <__unpack_d>
  815270:	d9000204 	addi	r4,sp,8
  815274:	800b883a 	mov	r5,r16
  815278:	0815e6c0 	call	815e6c <__unpack_d>
  81527c:	d8800417 	ldw	r2,16(sp)
  815280:	00c00044 	movi	r3,1
  815284:	180d883a 	mov	r6,r3
  815288:	1880062e 	bgeu	r3,r2,8152a4 <__eqdf2+0x70>
  81528c:	d8800917 	ldw	r2,36(sp)
  815290:	8809883a 	mov	r4,r17
  815294:	800b883a 	mov	r5,r16
  815298:	1880022e 	bgeu	r3,r2,8152a4 <__eqdf2+0x70>
  81529c:	0815fa40 	call	815fa4 <__fpcmp_parts_d>
  8152a0:	100d883a 	mov	r6,r2
  8152a4:	3005883a 	mov	r2,r6
  8152a8:	dfc01017 	ldw	ra,64(sp)
  8152ac:	dc400f17 	ldw	r17,60(sp)
  8152b0:	dc000e17 	ldw	r16,56(sp)
  8152b4:	dec01104 	addi	sp,sp,68
  8152b8:	f800283a 	ret

008152bc <__nedf2>:
  8152bc:	deffef04 	addi	sp,sp,-68
  8152c0:	dc400f15 	stw	r17,60(sp)
  8152c4:	dc400404 	addi	r17,sp,16
  8152c8:	2005883a 	mov	r2,r4
  8152cc:	2807883a 	mov	r3,r5
  8152d0:	dc000e15 	stw	r16,56(sp)
  8152d4:	d809883a 	mov	r4,sp
  8152d8:	880b883a 	mov	r5,r17
  8152dc:	dc000904 	addi	r16,sp,36
  8152e0:	d8c00115 	stw	r3,4(sp)
  8152e4:	d8800015 	stw	r2,0(sp)
  8152e8:	d9800215 	stw	r6,8(sp)
  8152ec:	dfc01015 	stw	ra,64(sp)
  8152f0:	d9c00315 	stw	r7,12(sp)
  8152f4:	0815e6c0 	call	815e6c <__unpack_d>
  8152f8:	d9000204 	addi	r4,sp,8
  8152fc:	800b883a 	mov	r5,r16
  815300:	0815e6c0 	call	815e6c <__unpack_d>
  815304:	d8800417 	ldw	r2,16(sp)
  815308:	00c00044 	movi	r3,1
  81530c:	180d883a 	mov	r6,r3
  815310:	1880062e 	bgeu	r3,r2,81532c <__nedf2+0x70>
  815314:	d8800917 	ldw	r2,36(sp)
  815318:	8809883a 	mov	r4,r17
  81531c:	800b883a 	mov	r5,r16
  815320:	1880022e 	bgeu	r3,r2,81532c <__nedf2+0x70>
  815324:	0815fa40 	call	815fa4 <__fpcmp_parts_d>
  815328:	100d883a 	mov	r6,r2
  81532c:	3005883a 	mov	r2,r6
  815330:	dfc01017 	ldw	ra,64(sp)
  815334:	dc400f17 	ldw	r17,60(sp)
  815338:	dc000e17 	ldw	r16,56(sp)
  81533c:	dec01104 	addi	sp,sp,68
  815340:	f800283a 	ret

00815344 <__gtdf2>:
  815344:	deffef04 	addi	sp,sp,-68
  815348:	dc400f15 	stw	r17,60(sp)
  81534c:	dc400404 	addi	r17,sp,16
  815350:	2005883a 	mov	r2,r4
  815354:	2807883a 	mov	r3,r5
  815358:	dc000e15 	stw	r16,56(sp)
  81535c:	d809883a 	mov	r4,sp
  815360:	880b883a 	mov	r5,r17
  815364:	dc000904 	addi	r16,sp,36
  815368:	d8c00115 	stw	r3,4(sp)
  81536c:	d8800015 	stw	r2,0(sp)
  815370:	d9800215 	stw	r6,8(sp)
  815374:	dfc01015 	stw	ra,64(sp)
  815378:	d9c00315 	stw	r7,12(sp)
  81537c:	0815e6c0 	call	815e6c <__unpack_d>
  815380:	d9000204 	addi	r4,sp,8
  815384:	800b883a 	mov	r5,r16
  815388:	0815e6c0 	call	815e6c <__unpack_d>
  81538c:	d8800417 	ldw	r2,16(sp)
  815390:	00c00044 	movi	r3,1
  815394:	01bfffc4 	movi	r6,-1
  815398:	1880062e 	bgeu	r3,r2,8153b4 <__gtdf2+0x70>
  81539c:	d8800917 	ldw	r2,36(sp)
  8153a0:	8809883a 	mov	r4,r17
  8153a4:	800b883a 	mov	r5,r16
  8153a8:	1880022e 	bgeu	r3,r2,8153b4 <__gtdf2+0x70>
  8153ac:	0815fa40 	call	815fa4 <__fpcmp_parts_d>
  8153b0:	100d883a 	mov	r6,r2
  8153b4:	3005883a 	mov	r2,r6
  8153b8:	dfc01017 	ldw	ra,64(sp)
  8153bc:	dc400f17 	ldw	r17,60(sp)
  8153c0:	dc000e17 	ldw	r16,56(sp)
  8153c4:	dec01104 	addi	sp,sp,68
  8153c8:	f800283a 	ret

008153cc <__gedf2>:
  8153cc:	deffef04 	addi	sp,sp,-68
  8153d0:	dc400f15 	stw	r17,60(sp)
  8153d4:	dc400404 	addi	r17,sp,16
  8153d8:	2005883a 	mov	r2,r4
  8153dc:	2807883a 	mov	r3,r5
  8153e0:	dc000e15 	stw	r16,56(sp)
  8153e4:	d809883a 	mov	r4,sp
  8153e8:	880b883a 	mov	r5,r17
  8153ec:	dc000904 	addi	r16,sp,36
  8153f0:	d8c00115 	stw	r3,4(sp)
  8153f4:	d8800015 	stw	r2,0(sp)
  8153f8:	d9800215 	stw	r6,8(sp)
  8153fc:	dfc01015 	stw	ra,64(sp)
  815400:	d9c00315 	stw	r7,12(sp)
  815404:	0815e6c0 	call	815e6c <__unpack_d>
  815408:	d9000204 	addi	r4,sp,8
  81540c:	800b883a 	mov	r5,r16
  815410:	0815e6c0 	call	815e6c <__unpack_d>
  815414:	d8800417 	ldw	r2,16(sp)
  815418:	00c00044 	movi	r3,1
  81541c:	01bfffc4 	movi	r6,-1
  815420:	1880062e 	bgeu	r3,r2,81543c <__gedf2+0x70>
  815424:	d8800917 	ldw	r2,36(sp)
  815428:	8809883a 	mov	r4,r17
  81542c:	800b883a 	mov	r5,r16
  815430:	1880022e 	bgeu	r3,r2,81543c <__gedf2+0x70>
  815434:	0815fa40 	call	815fa4 <__fpcmp_parts_d>
  815438:	100d883a 	mov	r6,r2
  81543c:	3005883a 	mov	r2,r6
  815440:	dfc01017 	ldw	ra,64(sp)
  815444:	dc400f17 	ldw	r17,60(sp)
  815448:	dc000e17 	ldw	r16,56(sp)
  81544c:	dec01104 	addi	sp,sp,68
  815450:	f800283a 	ret

00815454 <__ltdf2>:
  815454:	deffef04 	addi	sp,sp,-68
  815458:	dc400f15 	stw	r17,60(sp)
  81545c:	dc400404 	addi	r17,sp,16
  815460:	2005883a 	mov	r2,r4
  815464:	2807883a 	mov	r3,r5
  815468:	dc000e15 	stw	r16,56(sp)
  81546c:	d809883a 	mov	r4,sp
  815470:	880b883a 	mov	r5,r17
  815474:	dc000904 	addi	r16,sp,36
  815478:	d8c00115 	stw	r3,4(sp)
  81547c:	d8800015 	stw	r2,0(sp)
  815480:	d9800215 	stw	r6,8(sp)
  815484:	dfc01015 	stw	ra,64(sp)
  815488:	d9c00315 	stw	r7,12(sp)
  81548c:	0815e6c0 	call	815e6c <__unpack_d>
  815490:	d9000204 	addi	r4,sp,8
  815494:	800b883a 	mov	r5,r16
  815498:	0815e6c0 	call	815e6c <__unpack_d>
  81549c:	d8800417 	ldw	r2,16(sp)
  8154a0:	00c00044 	movi	r3,1
  8154a4:	180d883a 	mov	r6,r3
  8154a8:	1880062e 	bgeu	r3,r2,8154c4 <__ltdf2+0x70>
  8154ac:	d8800917 	ldw	r2,36(sp)
  8154b0:	8809883a 	mov	r4,r17
  8154b4:	800b883a 	mov	r5,r16
  8154b8:	1880022e 	bgeu	r3,r2,8154c4 <__ltdf2+0x70>
  8154bc:	0815fa40 	call	815fa4 <__fpcmp_parts_d>
  8154c0:	100d883a 	mov	r6,r2
  8154c4:	3005883a 	mov	r2,r6
  8154c8:	dfc01017 	ldw	ra,64(sp)
  8154cc:	dc400f17 	ldw	r17,60(sp)
  8154d0:	dc000e17 	ldw	r16,56(sp)
  8154d4:	dec01104 	addi	sp,sp,68
  8154d8:	f800283a 	ret

008154dc <__ledf2>:
  8154dc:	deffef04 	addi	sp,sp,-68
  8154e0:	dc400f15 	stw	r17,60(sp)
  8154e4:	dc400404 	addi	r17,sp,16
  8154e8:	2005883a 	mov	r2,r4
  8154ec:	2807883a 	mov	r3,r5
  8154f0:	dc000e15 	stw	r16,56(sp)
  8154f4:	d809883a 	mov	r4,sp
  8154f8:	880b883a 	mov	r5,r17
  8154fc:	dc000904 	addi	r16,sp,36
  815500:	d8c00115 	stw	r3,4(sp)
  815504:	d8800015 	stw	r2,0(sp)
  815508:	d9800215 	stw	r6,8(sp)
  81550c:	dfc01015 	stw	ra,64(sp)
  815510:	d9c00315 	stw	r7,12(sp)
  815514:	0815e6c0 	call	815e6c <__unpack_d>
  815518:	d9000204 	addi	r4,sp,8
  81551c:	800b883a 	mov	r5,r16
  815520:	0815e6c0 	call	815e6c <__unpack_d>
  815524:	d8800417 	ldw	r2,16(sp)
  815528:	00c00044 	movi	r3,1
  81552c:	180d883a 	mov	r6,r3
  815530:	1880062e 	bgeu	r3,r2,81554c <__ledf2+0x70>
  815534:	d8800917 	ldw	r2,36(sp)
  815538:	8809883a 	mov	r4,r17
  81553c:	800b883a 	mov	r5,r16
  815540:	1880022e 	bgeu	r3,r2,81554c <__ledf2+0x70>
  815544:	0815fa40 	call	815fa4 <__fpcmp_parts_d>
  815548:	100d883a 	mov	r6,r2
  81554c:	3005883a 	mov	r2,r6
  815550:	dfc01017 	ldw	ra,64(sp)
  815554:	dc400f17 	ldw	r17,60(sp)
  815558:	dc000e17 	ldw	r16,56(sp)
  81555c:	dec01104 	addi	sp,sp,68
  815560:	f800283a 	ret

00815564 <__floatsidf>:
  815564:	2006d7fa 	srli	r3,r4,31
  815568:	defff604 	addi	sp,sp,-40
  81556c:	008000c4 	movi	r2,3
  815570:	dfc00915 	stw	ra,36(sp)
  815574:	dcc00815 	stw	r19,32(sp)
  815578:	dc800715 	stw	r18,28(sp)
  81557c:	dc400615 	stw	r17,24(sp)
  815580:	dc000515 	stw	r16,20(sp)
  815584:	d8800015 	stw	r2,0(sp)
  815588:	d8c00115 	stw	r3,4(sp)
  81558c:	20000f1e 	bne	r4,zero,8155cc <__floatsidf+0x68>
  815590:	00800084 	movi	r2,2
  815594:	d8800015 	stw	r2,0(sp)
  815598:	d809883a 	mov	r4,sp
  81559c:	0815b580 	call	815b58 <__pack_d>
  8155a0:	1009883a 	mov	r4,r2
  8155a4:	180b883a 	mov	r5,r3
  8155a8:	2005883a 	mov	r2,r4
  8155ac:	2807883a 	mov	r3,r5
  8155b0:	dfc00917 	ldw	ra,36(sp)
  8155b4:	dcc00817 	ldw	r19,32(sp)
  8155b8:	dc800717 	ldw	r18,28(sp)
  8155bc:	dc400617 	ldw	r17,24(sp)
  8155c0:	dc000517 	ldw	r16,20(sp)
  8155c4:	dec00a04 	addi	sp,sp,40
  8155c8:	f800283a 	ret
  8155cc:	00800f04 	movi	r2,60
  8155d0:	1807003a 	cmpeq	r3,r3,zero
  8155d4:	d8800215 	stw	r2,8(sp)
  8155d8:	18001126 	beq	r3,zero,815620 <__floatsidf+0xbc>
  8155dc:	0027883a 	mov	r19,zero
  8155e0:	2025883a 	mov	r18,r4
  8155e4:	d9000315 	stw	r4,12(sp)
  8155e8:	dcc00415 	stw	r19,16(sp)
  8155ec:	081593c0 	call	81593c <__clzsi2>
  8155f0:	11000744 	addi	r4,r2,29
  8155f4:	013fe80e 	bge	zero,r4,815598 <__floatsidf+0x34>
  8155f8:	10bfff44 	addi	r2,r2,-3
  8155fc:	10000c16 	blt	r2,zero,815630 <__floatsidf+0xcc>
  815600:	90a2983a 	sll	r17,r18,r2
  815604:	0021883a 	mov	r16,zero
  815608:	d8800217 	ldw	r2,8(sp)
  81560c:	dc400415 	stw	r17,16(sp)
  815610:	dc000315 	stw	r16,12(sp)
  815614:	1105c83a 	sub	r2,r2,r4
  815618:	d8800215 	stw	r2,8(sp)
  81561c:	003fde06 	br	815598 <__floatsidf+0x34>
  815620:	00a00034 	movhi	r2,32768
  815624:	20800a26 	beq	r4,r2,815650 <__floatsidf+0xec>
  815628:	0109c83a 	sub	r4,zero,r4
  81562c:	003feb06 	br	8155dc <__floatsidf+0x78>
  815630:	9006d07a 	srli	r3,r18,1
  815634:	008007c4 	movi	r2,31
  815638:	1105c83a 	sub	r2,r2,r4
  81563c:	1886d83a 	srl	r3,r3,r2
  815640:	9922983a 	sll	r17,r19,r4
  815644:	9120983a 	sll	r16,r18,r4
  815648:	1c62b03a 	or	r17,r3,r17
  81564c:	003fee06 	br	815608 <__floatsidf+0xa4>
  815650:	0009883a 	mov	r4,zero
  815654:	01707834 	movhi	r5,49632
  815658:	003fd306 	br	8155a8 <__floatsidf+0x44>

0081565c <__fixdfsi>:
  81565c:	defff804 	addi	sp,sp,-32
  815660:	2005883a 	mov	r2,r4
  815664:	2807883a 	mov	r3,r5
  815668:	d809883a 	mov	r4,sp
  81566c:	d9400204 	addi	r5,sp,8
  815670:	d8c00115 	stw	r3,4(sp)
  815674:	d8800015 	stw	r2,0(sp)
  815678:	dfc00715 	stw	ra,28(sp)
  81567c:	0815e6c0 	call	815e6c <__unpack_d>
  815680:	d8c00217 	ldw	r3,8(sp)
  815684:	00800084 	movi	r2,2
  815688:	1880051e 	bne	r3,r2,8156a0 <__fixdfsi+0x44>
  81568c:	0007883a 	mov	r3,zero
  815690:	1805883a 	mov	r2,r3
  815694:	dfc00717 	ldw	ra,28(sp)
  815698:	dec00804 	addi	sp,sp,32
  81569c:	f800283a 	ret
  8156a0:	00800044 	movi	r2,1
  8156a4:	10fff92e 	bgeu	r2,r3,81568c <__fixdfsi+0x30>
  8156a8:	00800104 	movi	r2,4
  8156ac:	18800426 	beq	r3,r2,8156c0 <__fixdfsi+0x64>
  8156b0:	d8c00417 	ldw	r3,16(sp)
  8156b4:	183ff516 	blt	r3,zero,81568c <__fixdfsi+0x30>
  8156b8:	00800784 	movi	r2,30
  8156bc:	10c0080e 	bge	r2,r3,8156e0 <__fixdfsi+0x84>
  8156c0:	d8800317 	ldw	r2,12(sp)
  8156c4:	1000121e 	bne	r2,zero,815710 <__fixdfsi+0xb4>
  8156c8:	00e00034 	movhi	r3,32768
  8156cc:	18ffffc4 	addi	r3,r3,-1
  8156d0:	1805883a 	mov	r2,r3
  8156d4:	dfc00717 	ldw	ra,28(sp)
  8156d8:	dec00804 	addi	sp,sp,32
  8156dc:	f800283a 	ret
  8156e0:	00800f04 	movi	r2,60
  8156e4:	10d1c83a 	sub	r8,r2,r3
  8156e8:	40bff804 	addi	r2,r8,-32
  8156ec:	d9800517 	ldw	r6,20(sp)
  8156f0:	d9c00617 	ldw	r7,24(sp)
  8156f4:	10000816 	blt	r2,zero,815718 <__fixdfsi+0xbc>
  8156f8:	3888d83a 	srl	r4,r7,r2
  8156fc:	d8800317 	ldw	r2,12(sp)
  815700:	2007883a 	mov	r3,r4
  815704:	103fe226 	beq	r2,zero,815690 <__fixdfsi+0x34>
  815708:	0107c83a 	sub	r3,zero,r4
  81570c:	003fe006 	br	815690 <__fixdfsi+0x34>
  815710:	00e00034 	movhi	r3,32768
  815714:	003fde06 	br	815690 <__fixdfsi+0x34>
  815718:	39c7883a 	add	r3,r7,r7
  81571c:	008007c4 	movi	r2,31
  815720:	1205c83a 	sub	r2,r2,r8
  815724:	1886983a 	sll	r3,r3,r2
  815728:	3208d83a 	srl	r4,r6,r8
  81572c:	1908b03a 	or	r4,r3,r4
  815730:	003ff206 	br	8156fc <__fixdfsi+0xa0>

00815734 <__truncdfsf2>:
  815734:	defff804 	addi	sp,sp,-32
  815738:	2005883a 	mov	r2,r4
  81573c:	2807883a 	mov	r3,r5
  815740:	d809883a 	mov	r4,sp
  815744:	d9400204 	addi	r5,sp,8
  815748:	d8c00115 	stw	r3,4(sp)
  81574c:	d8800015 	stw	r2,0(sp)
  815750:	dfc00715 	stw	ra,28(sp)
  815754:	0815e6c0 	call	815e6c <__unpack_d>
  815758:	d9c00517 	ldw	r7,20(sp)
  81575c:	da000617 	ldw	r8,24(sp)
  815760:	02d00034 	movhi	r11,16384
  815764:	5affffc4 	addi	r11,r11,-1
  815768:	3812d7ba 	srli	r9,r7,30
  81576c:	401a90ba 	slli	r13,r8,2
  815770:	3ac4703a 	and	r2,r7,r11
  815774:	0007883a 	mov	r3,zero
  815778:	6a52b03a 	or	r9,r13,r9
  81577c:	10c4b03a 	or	r2,r2,r3
  815780:	d9000217 	ldw	r4,8(sp)
  815784:	d9400317 	ldw	r5,12(sp)
  815788:	d9800417 	ldw	r6,16(sp)
  81578c:	480f883a 	mov	r7,r9
  815790:	10000126 	beq	r2,zero,815798 <__truncdfsf2+0x64>
  815794:	49c00054 	ori	r7,r9,1
  815798:	0815b2c0 	call	815b2c <__make_fp>
  81579c:	dfc00717 	ldw	ra,28(sp)
  8157a0:	dec00804 	addi	sp,sp,32
  8157a4:	f800283a 	ret

008157a8 <__floatunsidf>:
  8157a8:	defff204 	addi	sp,sp,-56
  8157ac:	dfc00d15 	stw	ra,52(sp)
  8157b0:	ddc00c15 	stw	r23,48(sp)
  8157b4:	dd800b15 	stw	r22,44(sp)
  8157b8:	dd400a15 	stw	r21,40(sp)
  8157bc:	dd000915 	stw	r20,36(sp)
  8157c0:	dcc00815 	stw	r19,32(sp)
  8157c4:	dc800715 	stw	r18,28(sp)
  8157c8:	dc400615 	stw	r17,24(sp)
  8157cc:	dc000515 	stw	r16,20(sp)
  8157d0:	d8000115 	stw	zero,4(sp)
  8157d4:	20000f1e 	bne	r4,zero,815814 <__floatunsidf+0x6c>
  8157d8:	00800084 	movi	r2,2
  8157dc:	d8800015 	stw	r2,0(sp)
  8157e0:	d809883a 	mov	r4,sp
  8157e4:	0815b580 	call	815b58 <__pack_d>
  8157e8:	dfc00d17 	ldw	ra,52(sp)
  8157ec:	ddc00c17 	ldw	r23,48(sp)
  8157f0:	dd800b17 	ldw	r22,44(sp)
  8157f4:	dd400a17 	ldw	r21,40(sp)
  8157f8:	dd000917 	ldw	r20,36(sp)
  8157fc:	dcc00817 	ldw	r19,32(sp)
  815800:	dc800717 	ldw	r18,28(sp)
  815804:	dc400617 	ldw	r17,24(sp)
  815808:	dc000517 	ldw	r16,20(sp)
  81580c:	dec00e04 	addi	sp,sp,56
  815810:	f800283a 	ret
  815814:	008000c4 	movi	r2,3
  815818:	00c00f04 	movi	r3,60
  81581c:	002f883a 	mov	r23,zero
  815820:	202d883a 	mov	r22,r4
  815824:	d8800015 	stw	r2,0(sp)
  815828:	d8c00215 	stw	r3,8(sp)
  81582c:	d9000315 	stw	r4,12(sp)
  815830:	ddc00415 	stw	r23,16(sp)
  815834:	081593c0 	call	81593c <__clzsi2>
  815838:	12400744 	addi	r9,r2,29
  81583c:	48000b16 	blt	r9,zero,81586c <__floatunsidf+0xc4>
  815840:	483fe726 	beq	r9,zero,8157e0 <__floatunsidf+0x38>
  815844:	10bfff44 	addi	r2,r2,-3
  815848:	10002e16 	blt	r2,zero,815904 <__floatunsidf+0x15c>
  81584c:	b0a2983a 	sll	r17,r22,r2
  815850:	0021883a 	mov	r16,zero
  815854:	d8800217 	ldw	r2,8(sp)
  815858:	dc400415 	stw	r17,16(sp)
  81585c:	dc000315 	stw	r16,12(sp)
  815860:	1245c83a 	sub	r2,r2,r9
  815864:	d8800215 	stw	r2,8(sp)
  815868:	003fdd06 	br	8157e0 <__floatunsidf+0x38>
  81586c:	0255c83a 	sub	r10,zero,r9
  815870:	51bff804 	addi	r6,r10,-32
  815874:	30001b16 	blt	r6,zero,8158e4 <__floatunsidf+0x13c>
  815878:	b9a8d83a 	srl	r20,r23,r6
  81587c:	002b883a 	mov	r21,zero
  815880:	000f883a 	mov	r7,zero
  815884:	01000044 	movi	r4,1
  815888:	0011883a 	mov	r8,zero
  81588c:	30002516 	blt	r6,zero,815924 <__floatunsidf+0x17c>
  815890:	21a6983a 	sll	r19,r4,r6
  815894:	0025883a 	mov	r18,zero
  815898:	00bfffc4 	movi	r2,-1
  81589c:	9089883a 	add	r4,r18,r2
  8158a0:	988b883a 	add	r5,r19,r2
  8158a4:	248d803a 	cmpltu	r6,r4,r18
  8158a8:	314b883a 	add	r5,r6,r5
  8158ac:	b104703a 	and	r2,r22,r4
  8158b0:	b946703a 	and	r3,r23,r5
  8158b4:	10c4b03a 	or	r2,r2,r3
  8158b8:	10000226 	beq	r2,zero,8158c4 <__floatunsidf+0x11c>
  8158bc:	01c00044 	movi	r7,1
  8158c0:	0011883a 	mov	r8,zero
  8158c4:	d9000217 	ldw	r4,8(sp)
  8158c8:	a1c4b03a 	or	r2,r20,r7
  8158cc:	aa06b03a 	or	r3,r21,r8
  8158d0:	2249c83a 	sub	r4,r4,r9
  8158d4:	d8c00415 	stw	r3,16(sp)
  8158d8:	d9000215 	stw	r4,8(sp)
  8158dc:	d8800315 	stw	r2,12(sp)
  8158e0:	003fbf06 	br	8157e0 <__floatunsidf+0x38>
  8158e4:	bdc7883a 	add	r3,r23,r23
  8158e8:	008007c4 	movi	r2,31
  8158ec:	1285c83a 	sub	r2,r2,r10
  8158f0:	1886983a 	sll	r3,r3,r2
  8158f4:	b2a8d83a 	srl	r20,r22,r10
  8158f8:	baaad83a 	srl	r21,r23,r10
  8158fc:	1d28b03a 	or	r20,r3,r20
  815900:	003fdf06 	br	815880 <__floatunsidf+0xd8>
  815904:	b006d07a 	srli	r3,r22,1
  815908:	008007c4 	movi	r2,31
  81590c:	1245c83a 	sub	r2,r2,r9
  815910:	1886d83a 	srl	r3,r3,r2
  815914:	ba62983a 	sll	r17,r23,r9
  815918:	b260983a 	sll	r16,r22,r9
  81591c:	1c62b03a 	or	r17,r3,r17
  815920:	003fcc06 	br	815854 <__floatunsidf+0xac>
  815924:	2006d07a 	srli	r3,r4,1
  815928:	008007c4 	movi	r2,31
  81592c:	1285c83a 	sub	r2,r2,r10
  815930:	18a6d83a 	srl	r19,r3,r2
  815934:	22a4983a 	sll	r18,r4,r10
  815938:	003fd706 	br	815898 <__floatunsidf+0xf0>

0081593c <__clzsi2>:
  81593c:	00bfffd4 	movui	r2,65535
  815940:	11000e36 	bltu	r2,r4,81597c <__clzsi2+0x40>
  815944:	00803fc4 	movi	r2,255
  815948:	01400204 	movi	r5,8
  81594c:	0007883a 	mov	r3,zero
  815950:	11001036 	bltu	r2,r4,815994 <__clzsi2+0x58>
  815954:	000b883a 	mov	r5,zero
  815958:	20c6d83a 	srl	r3,r4,r3
  81595c:	00802174 	movhi	r2,133
  815960:	10b26404 	addi	r2,r2,-13936
  815964:	1887883a 	add	r3,r3,r2
  815968:	18800003 	ldbu	r2,0(r3)
  81596c:	00c00804 	movi	r3,32
  815970:	2885883a 	add	r2,r5,r2
  815974:	1885c83a 	sub	r2,r3,r2
  815978:	f800283a 	ret
  81597c:	01400404 	movi	r5,16
  815980:	00804034 	movhi	r2,256
  815984:	10bfffc4 	addi	r2,r2,-1
  815988:	2807883a 	mov	r3,r5
  81598c:	113ff22e 	bgeu	r2,r4,815958 <__clzsi2+0x1c>
  815990:	01400604 	movi	r5,24
  815994:	2807883a 	mov	r3,r5
  815998:	20c6d83a 	srl	r3,r4,r3
  81599c:	00802174 	movhi	r2,133
  8159a0:	10b26404 	addi	r2,r2,-13936
  8159a4:	1887883a 	add	r3,r3,r2
  8159a8:	18800003 	ldbu	r2,0(r3)
  8159ac:	00c00804 	movi	r3,32
  8159b0:	2885883a 	add	r2,r5,r2
  8159b4:	1885c83a 	sub	r2,r3,r2
  8159b8:	f800283a 	ret

008159bc <__unpack_f>:
  8159bc:	21800017 	ldw	r6,0(r4)
  8159c0:	00c02034 	movhi	r3,128
  8159c4:	18ffffc4 	addi	r3,r3,-1
  8159c8:	3004d5fa 	srli	r2,r6,23
  8159cc:	3008d7fa 	srli	r4,r6,31
  8159d0:	30ce703a 	and	r7,r6,r3
  8159d4:	10c03fcc 	andi	r3,r2,255
  8159d8:	29000115 	stw	r4,4(r5)
  8159dc:	1800131e 	bne	r3,zero,815a2c <__unpack_f+0x70>
  8159e0:	38000f26 	beq	r7,zero,815a20 <__unpack_f+0x64>
  8159e4:	380691fa 	slli	r3,r7,7
  8159e8:	01bfe084 	movi	r6,-126
  8159ec:	008000c4 	movi	r2,3
  8159f0:	01100034 	movhi	r4,16384
  8159f4:	213fffc4 	addi	r4,r4,-1
  8159f8:	28800015 	stw	r2,0(r5)
  8159fc:	29800215 	stw	r6,8(r5)
  815a00:	20c00536 	bltu	r4,r3,815a18 <__unpack_f+0x5c>
  815a04:	3005883a 	mov	r2,r6
  815a08:	18c7883a 	add	r3,r3,r3
  815a0c:	10bfffc4 	addi	r2,r2,-1
  815a10:	20fffd2e 	bgeu	r4,r3,815a08 <__unpack_f+0x4c>
  815a14:	28800215 	stw	r2,8(r5)
  815a18:	28c00315 	stw	r3,12(r5)
  815a1c:	f800283a 	ret
  815a20:	00800084 	movi	r2,2
  815a24:	28800015 	stw	r2,0(r5)
  815a28:	f800283a 	ret
  815a2c:	00803fc4 	movi	r2,255
  815a30:	18800826 	beq	r3,r2,815a54 <__unpack_f+0x98>
  815a34:	380491fa 	slli	r2,r7,7
  815a38:	18ffe044 	addi	r3,r3,-127
  815a3c:	28c00215 	stw	r3,8(r5)
  815a40:	10900034 	orhi	r2,r2,16384
  815a44:	28800315 	stw	r2,12(r5)
  815a48:	008000c4 	movi	r2,3
  815a4c:	28800015 	stw	r2,0(r5)
  815a50:	f800283a 	ret
  815a54:	3800031e 	bne	r7,zero,815a64 <__unpack_f+0xa8>
  815a58:	00800104 	movi	r2,4
  815a5c:	28800015 	stw	r2,0(r5)
  815a60:	f800283a 	ret
  815a64:	3080042c 	andhi	r2,r6,16
  815a68:	10000426 	beq	r2,zero,815a7c <__unpack_f+0xc0>
  815a6c:	00800044 	movi	r2,1
  815a70:	28800015 	stw	r2,0(r5)
  815a74:	29c00315 	stw	r7,12(r5)
  815a78:	f800283a 	ret
  815a7c:	28000015 	stw	zero,0(r5)
  815a80:	003ffc06 	br	815a74 <__unpack_f+0xb8>

00815a84 <__fpcmp_parts_f>:
  815a84:	21800017 	ldw	r6,0(r4)
  815a88:	00c00044 	movi	r3,1
  815a8c:	19800a2e 	bgeu	r3,r6,815ab8 <__fpcmp_parts_f+0x34>
  815a90:	28800017 	ldw	r2,0(r5)
  815a94:	1880082e 	bgeu	r3,r2,815ab8 <__fpcmp_parts_f+0x34>
  815a98:	00c00104 	movi	r3,4
  815a9c:	30c01e26 	beq	r6,r3,815b18 <__fpcmp_parts_f+0x94>
  815aa0:	10c01a26 	beq	r2,r3,815b0c <__fpcmp_parts_f+0x88>
  815aa4:	00c00084 	movi	r3,2
  815aa8:	30c00526 	beq	r6,r3,815ac0 <__fpcmp_parts_f+0x3c>
  815aac:	10c0071e 	bne	r2,r3,815acc <__fpcmp_parts_f+0x48>
  815ab0:	20800117 	ldw	r2,4(r4)
  815ab4:	1000091e 	bne	r2,zero,815adc <__fpcmp_parts_f+0x58>
  815ab8:	00800044 	movi	r2,1
  815abc:	f800283a 	ret
  815ac0:	10c0121e 	bne	r2,r3,815b0c <__fpcmp_parts_f+0x88>
  815ac4:	0005883a 	mov	r2,zero
  815ac8:	f800283a 	ret
  815acc:	20c00117 	ldw	r3,4(r4)
  815ad0:	28800117 	ldw	r2,4(r5)
  815ad4:	18800326 	beq	r3,r2,815ae4 <__fpcmp_parts_f+0x60>
  815ad8:	183ff726 	beq	r3,zero,815ab8 <__fpcmp_parts_f+0x34>
  815adc:	00bfffc4 	movi	r2,-1
  815ae0:	f800283a 	ret
  815ae4:	21800217 	ldw	r6,8(r4)
  815ae8:	28800217 	ldw	r2,8(r5)
  815aec:	11bffa16 	blt	r2,r6,815ad8 <__fpcmp_parts_f+0x54>
  815af0:	30800416 	blt	r6,r2,815b04 <__fpcmp_parts_f+0x80>
  815af4:	21000317 	ldw	r4,12(r4)
  815af8:	29400317 	ldw	r5,12(r5)
  815afc:	293ff636 	bltu	r5,r4,815ad8 <__fpcmp_parts_f+0x54>
  815b00:	217ff02e 	bgeu	r4,r5,815ac4 <__fpcmp_parts_f+0x40>
  815b04:	183fec1e 	bne	r3,zero,815ab8 <__fpcmp_parts_f+0x34>
  815b08:	003ff406 	br	815adc <__fpcmp_parts_f+0x58>
  815b0c:	28800117 	ldw	r2,4(r5)
  815b10:	103fe91e 	bne	r2,zero,815ab8 <__fpcmp_parts_f+0x34>
  815b14:	003ff106 	br	815adc <__fpcmp_parts_f+0x58>
  815b18:	11bfe51e 	bne	r2,r6,815ab0 <__fpcmp_parts_f+0x2c>
  815b1c:	28c00117 	ldw	r3,4(r5)
  815b20:	20800117 	ldw	r2,4(r4)
  815b24:	1885c83a 	sub	r2,r3,r2
  815b28:	f800283a 	ret

00815b2c <__make_fp>:
  815b2c:	defffb04 	addi	sp,sp,-20
  815b30:	d9000015 	stw	r4,0(sp)
  815b34:	d809883a 	mov	r4,sp
  815b38:	dfc00415 	stw	ra,16(sp)
  815b3c:	d9400115 	stw	r5,4(sp)
  815b40:	d9800215 	stw	r6,8(sp)
  815b44:	d9c00315 	stw	r7,12(sp)
  815b48:	081606c0 	call	81606c <__pack_f>
  815b4c:	dfc00417 	ldw	ra,16(sp)
  815b50:	dec00504 	addi	sp,sp,20
  815b54:	f800283a 	ret

00815b58 <__pack_d>:
  815b58:	20c00017 	ldw	r3,0(r4)
  815b5c:	defffd04 	addi	sp,sp,-12
  815b60:	dc000015 	stw	r16,0(sp)
  815b64:	dc800215 	stw	r18,8(sp)
  815b68:	dc400115 	stw	r17,4(sp)
  815b6c:	00800044 	movi	r2,1
  815b70:	22000317 	ldw	r8,12(r4)
  815b74:	001f883a 	mov	r15,zero
  815b78:	22400417 	ldw	r9,16(r4)
  815b7c:	24000117 	ldw	r16,4(r4)
  815b80:	10c0552e 	bgeu	r2,r3,815cd8 <__pack_d+0x180>
  815b84:	00800104 	movi	r2,4
  815b88:	18804f26 	beq	r3,r2,815cc8 <__pack_d+0x170>
  815b8c:	00800084 	movi	r2,2
  815b90:	18800226 	beq	r3,r2,815b9c <__pack_d+0x44>
  815b94:	4244b03a 	or	r2,r8,r9
  815b98:	10001a1e 	bne	r2,zero,815c04 <__pack_d+0xac>
  815b9c:	000d883a 	mov	r6,zero
  815ba0:	000f883a 	mov	r7,zero
  815ba4:	0011883a 	mov	r8,zero
  815ba8:	00800434 	movhi	r2,16
  815bac:	10bfffc4 	addi	r2,r2,-1
  815bb0:	301d883a 	mov	r14,r6
  815bb4:	3884703a 	and	r2,r7,r2
  815bb8:	400a953a 	slli	r5,r8,20
  815bbc:	79bffc2c 	andhi	r6,r15,65520
  815bc0:	308cb03a 	or	r6,r6,r2
  815bc4:	00e00434 	movhi	r3,32784
  815bc8:	18ffffc4 	addi	r3,r3,-1
  815bcc:	800497fa 	slli	r2,r16,31
  815bd0:	30c6703a 	and	r3,r6,r3
  815bd4:	1946b03a 	or	r3,r3,r5
  815bd8:	01600034 	movhi	r5,32768
  815bdc:	297fffc4 	addi	r5,r5,-1
  815be0:	194a703a 	and	r5,r3,r5
  815be4:	288ab03a 	or	r5,r5,r2
  815be8:	2807883a 	mov	r3,r5
  815bec:	7005883a 	mov	r2,r14
  815bf0:	dc800217 	ldw	r18,8(sp)
  815bf4:	dc400117 	ldw	r17,4(sp)
  815bf8:	dc000017 	ldw	r16,0(sp)
  815bfc:	dec00304 	addi	sp,sp,12
  815c00:	f800283a 	ret
  815c04:	21000217 	ldw	r4,8(r4)
  815c08:	00bf0084 	movi	r2,-1022
  815c0c:	20803f16 	blt	r4,r2,815d0c <__pack_d+0x1b4>
  815c10:	0080ffc4 	movi	r2,1023
  815c14:	11002c16 	blt	r2,r4,815cc8 <__pack_d+0x170>
  815c18:	00803fc4 	movi	r2,255
  815c1c:	408c703a 	and	r6,r8,r2
  815c20:	00802004 	movi	r2,128
  815c24:	0007883a 	mov	r3,zero
  815c28:	000f883a 	mov	r7,zero
  815c2c:	2280ffc4 	addi	r10,r4,1023
  815c30:	30801e26 	beq	r6,r2,815cac <__pack_d+0x154>
  815c34:	00801fc4 	movi	r2,127
  815c38:	4089883a 	add	r4,r8,r2
  815c3c:	220d803a 	cmpltu	r6,r4,r8
  815c40:	324d883a 	add	r6,r6,r9
  815c44:	2011883a 	mov	r8,r4
  815c48:	3013883a 	mov	r9,r6
  815c4c:	00880034 	movhi	r2,8192
  815c50:	10bfffc4 	addi	r2,r2,-1
  815c54:	12400d36 	bltu	r2,r9,815c8c <__pack_d+0x134>
  815c58:	4804963a 	slli	r2,r9,24
  815c5c:	400cd23a 	srli	r6,r8,8
  815c60:	480ed23a 	srli	r7,r9,8
  815c64:	013fffc4 	movi	r4,-1
  815c68:	118cb03a 	or	r6,r2,r6
  815c6c:	01400434 	movhi	r5,16
  815c70:	297fffc4 	addi	r5,r5,-1
  815c74:	3104703a 	and	r2,r6,r4
  815c78:	3946703a 	and	r3,r7,r5
  815c7c:	5201ffcc 	andi	r8,r10,2047
  815c80:	100d883a 	mov	r6,r2
  815c84:	180f883a 	mov	r7,r3
  815c88:	003fc706 	br	815ba8 <__pack_d+0x50>
  815c8c:	480897fa 	slli	r4,r9,31
  815c90:	4004d07a 	srli	r2,r8,1
  815c94:	4806d07a 	srli	r3,r9,1
  815c98:	52800044 	addi	r10,r10,1
  815c9c:	2084b03a 	or	r2,r4,r2
  815ca0:	1011883a 	mov	r8,r2
  815ca4:	1813883a 	mov	r9,r3
  815ca8:	003feb06 	br	815c58 <__pack_d+0x100>
  815cac:	383fe11e 	bne	r7,zero,815c34 <__pack_d+0xdc>
  815cb0:	01004004 	movi	r4,256
  815cb4:	4104703a 	and	r2,r8,r4
  815cb8:	10c4b03a 	or	r2,r2,r3
  815cbc:	103fe326 	beq	r2,zero,815c4c <__pack_d+0xf4>
  815cc0:	3005883a 	mov	r2,r6
  815cc4:	003fdc06 	br	815c38 <__pack_d+0xe0>
  815cc8:	000d883a 	mov	r6,zero
  815ccc:	000f883a 	mov	r7,zero
  815cd0:	0201ffc4 	movi	r8,2047
  815cd4:	003fb406 	br	815ba8 <__pack_d+0x50>
  815cd8:	0005883a 	mov	r2,zero
  815cdc:	00c00234 	movhi	r3,8
  815ce0:	408cb03a 	or	r6,r8,r2
  815ce4:	48ceb03a 	or	r7,r9,r3
  815ce8:	013fffc4 	movi	r4,-1
  815cec:	01400434 	movhi	r5,16
  815cf0:	297fffc4 	addi	r5,r5,-1
  815cf4:	3104703a 	and	r2,r6,r4
  815cf8:	3946703a 	and	r3,r7,r5
  815cfc:	100d883a 	mov	r6,r2
  815d00:	180f883a 	mov	r7,r3
  815d04:	0201ffc4 	movi	r8,2047
  815d08:	003fa706 	br	815ba8 <__pack_d+0x50>
  815d0c:	1109c83a 	sub	r4,r2,r4
  815d10:	00800e04 	movi	r2,56
  815d14:	11004316 	blt	r2,r4,815e24 <__pack_d+0x2cc>
  815d18:	21fff804 	addi	r7,r4,-32
  815d1c:	38004516 	blt	r7,zero,815e34 <__pack_d+0x2dc>
  815d20:	49d8d83a 	srl	r12,r9,r7
  815d24:	001b883a 	mov	r13,zero
  815d28:	0023883a 	mov	r17,zero
  815d2c:	01400044 	movi	r5,1
  815d30:	0025883a 	mov	r18,zero
  815d34:	38004716 	blt	r7,zero,815e54 <__pack_d+0x2fc>
  815d38:	29d6983a 	sll	r11,r5,r7
  815d3c:	0015883a 	mov	r10,zero
  815d40:	00bfffc4 	movi	r2,-1
  815d44:	5089883a 	add	r4,r10,r2
  815d48:	588b883a 	add	r5,r11,r2
  815d4c:	228d803a 	cmpltu	r6,r4,r10
  815d50:	314b883a 	add	r5,r6,r5
  815d54:	4104703a 	and	r2,r8,r4
  815d58:	4946703a 	and	r3,r9,r5
  815d5c:	10c4b03a 	or	r2,r2,r3
  815d60:	10000226 	beq	r2,zero,815d6c <__pack_d+0x214>
  815d64:	04400044 	movi	r17,1
  815d68:	0025883a 	mov	r18,zero
  815d6c:	00803fc4 	movi	r2,255
  815d70:	644eb03a 	or	r7,r12,r17
  815d74:	3892703a 	and	r9,r7,r2
  815d78:	00802004 	movi	r2,128
  815d7c:	6c90b03a 	or	r8,r13,r18
  815d80:	0015883a 	mov	r10,zero
  815d84:	48801626 	beq	r9,r2,815de0 <__pack_d+0x288>
  815d88:	01001fc4 	movi	r4,127
  815d8c:	3905883a 	add	r2,r7,r4
  815d90:	11cd803a 	cmpltu	r6,r2,r7
  815d94:	320d883a 	add	r6,r6,r8
  815d98:	100f883a 	mov	r7,r2
  815d9c:	00840034 	movhi	r2,4096
  815da0:	10bfffc4 	addi	r2,r2,-1
  815da4:	3011883a 	mov	r8,r6
  815da8:	0007883a 	mov	r3,zero
  815dac:	11801b36 	bltu	r2,r6,815e1c <__pack_d+0x2c4>
  815db0:	4004963a 	slli	r2,r8,24
  815db4:	3808d23a 	srli	r4,r7,8
  815db8:	400ad23a 	srli	r5,r8,8
  815dbc:	1813883a 	mov	r9,r3
  815dc0:	1108b03a 	or	r4,r2,r4
  815dc4:	00bfffc4 	movi	r2,-1
  815dc8:	00c00434 	movhi	r3,16
  815dcc:	18ffffc4 	addi	r3,r3,-1
  815dd0:	208c703a 	and	r6,r4,r2
  815dd4:	28ce703a 	and	r7,r5,r3
  815dd8:	4a01ffcc 	andi	r8,r9,2047
  815ddc:	003f7206 	br	815ba8 <__pack_d+0x50>
  815de0:	503fe91e 	bne	r10,zero,815d88 <__pack_d+0x230>
  815de4:	01004004 	movi	r4,256
  815de8:	3904703a 	and	r2,r7,r4
  815dec:	0007883a 	mov	r3,zero
  815df0:	10c4b03a 	or	r2,r2,r3
  815df4:	10000626 	beq	r2,zero,815e10 <__pack_d+0x2b8>
  815df8:	3a45883a 	add	r2,r7,r9
  815dfc:	11cd803a 	cmpltu	r6,r2,r7
  815e00:	320d883a 	add	r6,r6,r8
  815e04:	100f883a 	mov	r7,r2
  815e08:	3011883a 	mov	r8,r6
  815e0c:	0007883a 	mov	r3,zero
  815e10:	00840034 	movhi	r2,4096
  815e14:	10bfffc4 	addi	r2,r2,-1
  815e18:	123fe52e 	bgeu	r2,r8,815db0 <__pack_d+0x258>
  815e1c:	00c00044 	movi	r3,1
  815e20:	003fe306 	br	815db0 <__pack_d+0x258>
  815e24:	0009883a 	mov	r4,zero
  815e28:	0013883a 	mov	r9,zero
  815e2c:	000b883a 	mov	r5,zero
  815e30:	003fe406 	br	815dc4 <__pack_d+0x26c>
  815e34:	4a47883a 	add	r3,r9,r9
  815e38:	008007c4 	movi	r2,31
  815e3c:	1105c83a 	sub	r2,r2,r4
  815e40:	1886983a 	sll	r3,r3,r2
  815e44:	4118d83a 	srl	r12,r8,r4
  815e48:	491ad83a 	srl	r13,r9,r4
  815e4c:	1b18b03a 	or	r12,r3,r12
  815e50:	003fb506 	br	815d28 <__pack_d+0x1d0>
  815e54:	2806d07a 	srli	r3,r5,1
  815e58:	008007c4 	movi	r2,31
  815e5c:	1105c83a 	sub	r2,r2,r4
  815e60:	1896d83a 	srl	r11,r3,r2
  815e64:	2914983a 	sll	r10,r5,r4
  815e68:	003fb506 	br	815d40 <__pack_d+0x1e8>

00815e6c <__unpack_d>:
  815e6c:	20c00117 	ldw	r3,4(r4)
  815e70:	22400017 	ldw	r9,0(r4)
  815e74:	00800434 	movhi	r2,16
  815e78:	10bfffc4 	addi	r2,r2,-1
  815e7c:	1808d53a 	srli	r4,r3,20
  815e80:	180cd7fa 	srli	r6,r3,31
  815e84:	1894703a 	and	r10,r3,r2
  815e88:	2201ffcc 	andi	r8,r4,2047
  815e8c:	281b883a 	mov	r13,r5
  815e90:	4817883a 	mov	r11,r9
  815e94:	29800115 	stw	r6,4(r5)
  815e98:	5019883a 	mov	r12,r10
  815e9c:	40001e1e 	bne	r8,zero,815f18 <__unpack_d+0xac>
  815ea0:	4a84b03a 	or	r2,r9,r10
  815ea4:	10001926 	beq	r2,zero,815f0c <__unpack_d+0xa0>
  815ea8:	4804d63a 	srli	r2,r9,24
  815eac:	500c923a 	slli	r6,r10,8
  815eb0:	013f0084 	movi	r4,-1022
  815eb4:	00c40034 	movhi	r3,4096
  815eb8:	18ffffc4 	addi	r3,r3,-1
  815ebc:	118cb03a 	or	r6,r2,r6
  815ec0:	008000c4 	movi	r2,3
  815ec4:	480a923a 	slli	r5,r9,8
  815ec8:	68800015 	stw	r2,0(r13)
  815ecc:	69000215 	stw	r4,8(r13)
  815ed0:	19800b36 	bltu	r3,r6,815f00 <__unpack_d+0x94>
  815ed4:	200f883a 	mov	r7,r4
  815ed8:	1811883a 	mov	r8,r3
  815edc:	2945883a 	add	r2,r5,r5
  815ee0:	1149803a 	cmpltu	r4,r2,r5
  815ee4:	3187883a 	add	r3,r6,r6
  815ee8:	20c9883a 	add	r4,r4,r3
  815eec:	100b883a 	mov	r5,r2
  815ef0:	200d883a 	mov	r6,r4
  815ef4:	39ffffc4 	addi	r7,r7,-1
  815ef8:	413ff82e 	bgeu	r8,r4,815edc <__unpack_d+0x70>
  815efc:	69c00215 	stw	r7,8(r13)
  815f00:	69800415 	stw	r6,16(r13)
  815f04:	69400315 	stw	r5,12(r13)
  815f08:	f800283a 	ret
  815f0c:	00800084 	movi	r2,2
  815f10:	28800015 	stw	r2,0(r5)
  815f14:	f800283a 	ret
  815f18:	0081ffc4 	movi	r2,2047
  815f1c:	40800f26 	beq	r8,r2,815f5c <__unpack_d+0xf0>
  815f20:	480cd63a 	srli	r6,r9,24
  815f24:	5006923a 	slli	r3,r10,8
  815f28:	4804923a 	slli	r2,r9,8
  815f2c:	0009883a 	mov	r4,zero
  815f30:	30c6b03a 	or	r3,r6,r3
  815f34:	01440034 	movhi	r5,4096
  815f38:	110cb03a 	or	r6,r2,r4
  815f3c:	423f0044 	addi	r8,r8,-1023
  815f40:	194eb03a 	or	r7,r3,r5
  815f44:	008000c4 	movi	r2,3
  815f48:	69c00415 	stw	r7,16(r13)
  815f4c:	6a000215 	stw	r8,8(r13)
  815f50:	68800015 	stw	r2,0(r13)
  815f54:	69800315 	stw	r6,12(r13)
  815f58:	f800283a 	ret
  815f5c:	4a84b03a 	or	r2,r9,r10
  815f60:	1000031e 	bne	r2,zero,815f70 <__unpack_d+0x104>
  815f64:	00800104 	movi	r2,4
  815f68:	28800015 	stw	r2,0(r5)
  815f6c:	f800283a 	ret
  815f70:	0009883a 	mov	r4,zero
  815f74:	01400234 	movhi	r5,8
  815f78:	4904703a 	and	r2,r9,r4
  815f7c:	5146703a 	and	r3,r10,r5
  815f80:	10c4b03a 	or	r2,r2,r3
  815f84:	10000526 	beq	r2,zero,815f9c <__unpack_d+0x130>
  815f88:	00800044 	movi	r2,1
  815f8c:	68800015 	stw	r2,0(r13)
  815f90:	6b000415 	stw	r12,16(r13)
  815f94:	6ac00315 	stw	r11,12(r13)
  815f98:	f800283a 	ret
  815f9c:	68000015 	stw	zero,0(r13)
  815fa0:	003ffb06 	br	815f90 <__unpack_d+0x124>

00815fa4 <__fpcmp_parts_d>:
  815fa4:	21800017 	ldw	r6,0(r4)
  815fa8:	00c00044 	movi	r3,1
  815fac:	19800a2e 	bgeu	r3,r6,815fd8 <__fpcmp_parts_d+0x34>
  815fb0:	28800017 	ldw	r2,0(r5)
  815fb4:	1880082e 	bgeu	r3,r2,815fd8 <__fpcmp_parts_d+0x34>
  815fb8:	00c00104 	movi	r3,4
  815fbc:	30c02626 	beq	r6,r3,816058 <__fpcmp_parts_d+0xb4>
  815fc0:	10c02226 	beq	r2,r3,81604c <__fpcmp_parts_d+0xa8>
  815fc4:	00c00084 	movi	r3,2
  815fc8:	30c00526 	beq	r6,r3,815fe0 <__fpcmp_parts_d+0x3c>
  815fcc:	10c0071e 	bne	r2,r3,815fec <__fpcmp_parts_d+0x48>
  815fd0:	20800117 	ldw	r2,4(r4)
  815fd4:	1000091e 	bne	r2,zero,815ffc <__fpcmp_parts_d+0x58>
  815fd8:	00800044 	movi	r2,1
  815fdc:	f800283a 	ret
  815fe0:	10c01a1e 	bne	r2,r3,81604c <__fpcmp_parts_d+0xa8>
  815fe4:	0005883a 	mov	r2,zero
  815fe8:	f800283a 	ret
  815fec:	22000117 	ldw	r8,4(r4)
  815ff0:	28800117 	ldw	r2,4(r5)
  815ff4:	40800326 	beq	r8,r2,816004 <__fpcmp_parts_d+0x60>
  815ff8:	403ff726 	beq	r8,zero,815fd8 <__fpcmp_parts_d+0x34>
  815ffc:	00bfffc4 	movi	r2,-1
  816000:	f800283a 	ret
  816004:	20c00217 	ldw	r3,8(r4)
  816008:	28800217 	ldw	r2,8(r5)
  81600c:	10fffa16 	blt	r2,r3,815ff8 <__fpcmp_parts_d+0x54>
  816010:	18800916 	blt	r3,r2,816038 <__fpcmp_parts_d+0x94>
  816014:	21c00417 	ldw	r7,16(r4)
  816018:	28c00417 	ldw	r3,16(r5)
  81601c:	21800317 	ldw	r6,12(r4)
  816020:	28800317 	ldw	r2,12(r5)
  816024:	19fff436 	bltu	r3,r7,815ff8 <__fpcmp_parts_d+0x54>
  816028:	38c00526 	beq	r7,r3,816040 <__fpcmp_parts_d+0x9c>
  81602c:	38c00236 	bltu	r7,r3,816038 <__fpcmp_parts_d+0x94>
  816030:	19ffec1e 	bne	r3,r7,815fe4 <__fpcmp_parts_d+0x40>
  816034:	30bfeb2e 	bgeu	r6,r2,815fe4 <__fpcmp_parts_d+0x40>
  816038:	403fe71e 	bne	r8,zero,815fd8 <__fpcmp_parts_d+0x34>
  81603c:	003fef06 	br	815ffc <__fpcmp_parts_d+0x58>
  816040:	11bffa2e 	bgeu	r2,r6,81602c <__fpcmp_parts_d+0x88>
  816044:	403fe426 	beq	r8,zero,815fd8 <__fpcmp_parts_d+0x34>
  816048:	003fec06 	br	815ffc <__fpcmp_parts_d+0x58>
  81604c:	28800117 	ldw	r2,4(r5)
  816050:	103fe11e 	bne	r2,zero,815fd8 <__fpcmp_parts_d+0x34>
  816054:	003fe906 	br	815ffc <__fpcmp_parts_d+0x58>
  816058:	11bfdd1e 	bne	r2,r6,815fd0 <__fpcmp_parts_d+0x2c>
  81605c:	28c00117 	ldw	r3,4(r5)
  816060:	20800117 	ldw	r2,4(r4)
  816064:	1885c83a 	sub	r2,r3,r2
  816068:	f800283a 	ret

0081606c <__pack_f>:
  81606c:	20c00017 	ldw	r3,0(r4)
  816070:	01c00044 	movi	r7,1
  816074:	21800317 	ldw	r6,12(r4)
  816078:	21400117 	ldw	r5,4(r4)
  81607c:	38c02d2e 	bgeu	r7,r3,816134 <__pack_f+0xc8>
  816080:	00800104 	movi	r2,4
  816084:	18802826 	beq	r3,r2,816128 <__pack_f+0xbc>
  816088:	00800084 	movi	r2,2
  81608c:	18800126 	beq	r3,r2,816094 <__pack_f+0x28>
  816090:	3000101e 	bne	r6,zero,8160d4 <__pack_f+0x68>
  816094:	000d883a 	mov	r6,zero
  816098:	0007883a 	mov	r3,zero
  81609c:	19003fcc 	andi	r4,r3,255
  8160a0:	200895fa 	slli	r4,r4,23
  8160a4:	00c02034 	movhi	r3,128
  8160a8:	18ffffc4 	addi	r3,r3,-1
  8160ac:	30c6703a 	and	r3,r6,r3
  8160b0:	10a0002c 	andhi	r2,r2,32768
  8160b4:	10c4b03a 	or	r2,r2,r3
  8160b8:	280a97fa 	slli	r5,r5,31
  8160bc:	1104b03a 	or	r2,r2,r4
  8160c0:	00e00034 	movhi	r3,32768
  8160c4:	18ffffc4 	addi	r3,r3,-1
  8160c8:	10c4703a 	and	r2,r2,r3
  8160cc:	1144b03a 	or	r2,r2,r5
  8160d0:	f800283a 	ret
  8160d4:	21000217 	ldw	r4,8(r4)
  8160d8:	00bfe084 	movi	r2,-126
  8160dc:	20801b16 	blt	r4,r2,81614c <__pack_f+0xe0>
  8160e0:	00801fc4 	movi	r2,127
  8160e4:	11001016 	blt	r2,r4,816128 <__pack_f+0xbc>
  8160e8:	308e703a 	and	r7,r6,r2
  8160ec:	2087883a 	add	r3,r4,r2
  8160f0:	00801004 	movi	r2,64
  8160f4:	38800526 	beq	r7,r2,81610c <__pack_f+0xa0>
  8160f8:	31800fc4 	addi	r6,r6,63
  8160fc:	30000716 	blt	r6,zero,81611c <__pack_f+0xb0>
  816100:	300490ba 	slli	r2,r6,2
  816104:	100cd27a 	srli	r6,r2,9
  816108:	003fe406 	br	81609c <__pack_f+0x30>
  81610c:	3080200c 	andi	r2,r6,128
  816110:	103ffa26 	beq	r2,zero,8160fc <__pack_f+0x90>
  816114:	31cd883a 	add	r6,r6,r7
  816118:	003ff806 	br	8160fc <__pack_f+0x90>
  81611c:	300cd07a 	srli	r6,r6,1
  816120:	18c00044 	addi	r3,r3,1
  816124:	003ff606 	br	816100 <__pack_f+0x94>
  816128:	000d883a 	mov	r6,zero
  81612c:	00ffffc4 	movi	r3,-1
  816130:	003fda06 	br	81609c <__pack_f+0x30>
  816134:	31800434 	orhi	r6,r6,16
  816138:	00802034 	movhi	r2,128
  81613c:	10bfffc4 	addi	r2,r2,-1
  816140:	308c703a 	and	r6,r6,r2
  816144:	00ffffc4 	movi	r3,-1
  816148:	003fd406 	br	81609c <__pack_f+0x30>
  81614c:	1109c83a 	sub	r4,r2,r4
  816150:	00800644 	movi	r2,25
  816154:	11001216 	blt	r2,r4,8161a0 <__pack_f+0x134>
  816158:	3904983a 	sll	r2,r7,r4
  81615c:	3106d83a 	srl	r3,r6,r4
  816160:	10bfffc4 	addi	r2,r2,-1
  816164:	3084703a 	and	r2,r6,r2
  816168:	1004c03a 	cmpne	r2,r2,zero
  81616c:	1886b03a 	or	r3,r3,r2
  816170:	19001fcc 	andi	r4,r3,127
  816174:	00801004 	movi	r2,64
  816178:	20800c26 	beq	r4,r2,8161ac <__pack_f+0x140>
  81617c:	18c00fc4 	addi	r3,r3,63
  816180:	00900034 	movhi	r2,16384
  816184:	10bfffc4 	addi	r2,r2,-1
  816188:	180cd1fa 	srli	r6,r3,7
  81618c:	10c7803a 	cmpltu	r3,r2,r3
  816190:	00802034 	movhi	r2,128
  816194:	10bfffc4 	addi	r2,r2,-1
  816198:	308c703a 	and	r6,r6,r2
  81619c:	003fbf06 	br	81609c <__pack_f+0x30>
  8161a0:	0007883a 	mov	r3,zero
  8161a4:	000d883a 	mov	r6,zero
  8161a8:	003ff906 	br	816190 <__pack_f+0x124>
  8161ac:	1880200c 	andi	r2,r3,128
  8161b0:	10000126 	beq	r2,zero,8161b8 <__pack_f+0x14c>
  8161b4:	1907883a 	add	r3,r3,r4
  8161b8:	180cd1fa 	srli	r6,r3,7
  8161bc:	00900034 	movhi	r2,16384
  8161c0:	10bfffc4 	addi	r2,r2,-1
  8161c4:	10c7803a 	cmpltu	r3,r2,r3
  8161c8:	003ff106 	br	816190 <__pack_f+0x124>

008161cc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  8161cc:	defffb04 	addi	sp,sp,-20
  8161d0:	df000415 	stw	fp,16(sp)
  8161d4:	df000404 	addi	fp,sp,16
  8161d8:	e13ffe15 	stw	r4,-8(fp)
  8161dc:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
  8161e0:	e0fffe17 	ldw	r3,-8(fp)
  8161e4:	e0bfff17 	ldw	r2,-4(fp)
  8161e8:	1885883a 	add	r2,r3,r2
  8161ec:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
  8161f0:	e0bffe17 	ldw	r2,-8(fp)
  8161f4:	e0bffd15 	stw	r2,-12(fp)
  8161f8:	00000506 	br	816210 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
  8161fc:	e0bffd17 	ldw	r2,-12(fp)
  816200:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
  816204:	e0bffd17 	ldw	r2,-12(fp)
  816208:	10800804 	addi	r2,r2,32
  81620c:	e0bffd15 	stw	r2,-12(fp)
  816210:	e0fffd17 	ldw	r3,-12(fp)
  816214:	e0bffc17 	ldw	r2,-16(fp)
  816218:	18bff836 	bltu	r3,r2,8161fc <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
  81621c:	e0bffe17 	ldw	r2,-8(fp)
  816220:	108007cc 	andi	r2,r2,31
  816224:	1005003a 	cmpeq	r2,r2,zero
  816228:	1000021e 	bne	r2,zero,816234 <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
  81622c:	e0bffd17 	ldw	r2,-12(fp)
  816230:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  816234:	e037883a 	mov	sp,fp
  816238:	df000017 	ldw	fp,0(sp)
  81623c:	dec00104 	addi	sp,sp,4
  816240:	f800283a 	ret

00816244 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  816244:	defffb04 	addi	sp,sp,-20
  816248:	dfc00415 	stw	ra,16(sp)
  81624c:	df000315 	stw	fp,12(sp)
  816250:	df000304 	addi	fp,sp,12
  816254:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  816258:	e13ffe17 	ldw	r4,-8(fp)
  81625c:	d1601104 	addi	r5,gp,-32700
  816260:	083a1c00 	call	83a1c0 <alt_find_dev>
  816264:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
  816268:	e0bffd17 	ldw	r2,-12(fp)
  81626c:	1005003a 	cmpeq	r2,r2,zero
  816270:	10000b1e 	bne	r2,zero,8162a0 <alt_flash_open_dev+0x5c>
  816274:	e0bffd17 	ldw	r2,-12(fp)
  816278:	10800317 	ldw	r2,12(r2)
  81627c:	1005003a 	cmpeq	r2,r2,zero
  816280:	1000071e 	bne	r2,zero,8162a0 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
  816284:	e0bffd17 	ldw	r2,-12(fp)
  816288:	10800317 	ldw	r2,12(r2)
  81628c:	e13ffd17 	ldw	r4,-12(fp)
  816290:	e17ffe17 	ldw	r5,-8(fp)
  816294:	103ee83a 	callr	r2
  816298:	e0bfff15 	stw	r2,-4(fp)
  81629c:	00000206 	br	8162a8 <alt_flash_open_dev+0x64>
  }

  return dev;
  8162a0:	e0bffd17 	ldw	r2,-12(fp)
  8162a4:	e0bfff15 	stw	r2,-4(fp)
  8162a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8162ac:	e037883a 	mov	sp,fp
  8162b0:	dfc00117 	ldw	ra,4(sp)
  8162b4:	df000017 	ldw	fp,0(sp)
  8162b8:	dec00204 	addi	sp,sp,8
  8162bc:	f800283a 	ret

008162c0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  8162c0:	defffd04 	addi	sp,sp,-12
  8162c4:	dfc00215 	stw	ra,8(sp)
  8162c8:	df000115 	stw	fp,4(sp)
  8162cc:	df000104 	addi	fp,sp,4
  8162d0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  8162d4:	e0bfff17 	ldw	r2,-4(fp)
  8162d8:	1005003a 	cmpeq	r2,r2,zero
  8162dc:	1000081e 	bne	r2,zero,816300 <alt_flash_close_dev+0x40>
  8162e0:	e0bfff17 	ldw	r2,-4(fp)
  8162e4:	10800417 	ldw	r2,16(r2)
  8162e8:	1005003a 	cmpeq	r2,r2,zero
  8162ec:	1000041e 	bne	r2,zero,816300 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
  8162f0:	e0bfff17 	ldw	r2,-4(fp)
  8162f4:	10800417 	ldw	r2,16(r2)
  8162f8:	e13fff17 	ldw	r4,-4(fp)
  8162fc:	103ee83a 	callr	r2
  }
  return;
}
  816300:	e037883a 	mov	sp,fp
  816304:	dfc00117 	ldw	ra,4(sp)
  816308:	df000017 	ldw	fp,0(sp)
  81630c:	dec00204 	addi	sp,sp,8
  816310:	f800283a 	ret

00816314 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  816314:	defff904 	addi	sp,sp,-28
  816318:	dfc00615 	stw	ra,24(sp)
  81631c:	df000515 	stw	fp,20(sp)
  816320:	df000504 	addi	fp,sp,20
  816324:	e13ffc15 	stw	r4,-16(fp)
  816328:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81632c:	e0bffc17 	ldw	r2,-16(fp)
  816330:	1004803a 	cmplt	r2,r2,zero
  816334:	1000081e 	bne	r2,zero,816358 <fstat+0x44>
  816338:	e0bffc17 	ldw	r2,-16(fp)
  81633c:	10800324 	muli	r2,r2,12
  816340:	1007883a 	mov	r3,r2
  816344:	00802174 	movhi	r2,133
  816348:	1081b204 	addi	r2,r2,1736
  81634c:	1887883a 	add	r3,r3,r2
  816350:	e0ffff15 	stw	r3,-4(fp)
  816354:	00000106 	br	81635c <fstat+0x48>
  816358:	e03fff15 	stw	zero,-4(fp)
  81635c:	e0bfff17 	ldw	r2,-4(fp)
  816360:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  816364:	e0bffb17 	ldw	r2,-20(fp)
  816368:	1005003a 	cmpeq	r2,r2,zero
  81636c:	1000121e 	bne	r2,zero,8163b8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  816370:	e0bffb17 	ldw	r2,-20(fp)
  816374:	10800017 	ldw	r2,0(r2)
  816378:	10800817 	ldw	r2,32(r2)
  81637c:	1005003a 	cmpeq	r2,r2,zero
  816380:	1000081e 	bne	r2,zero,8163a4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  816384:	e0bffb17 	ldw	r2,-20(fp)
  816388:	10800017 	ldw	r2,0(r2)
  81638c:	10800817 	ldw	r2,32(r2)
  816390:	e13ffb17 	ldw	r4,-20(fp)
  816394:	e17ffd17 	ldw	r5,-12(fp)
  816398:	103ee83a 	callr	r2
  81639c:	e0bffe15 	stw	r2,-8(fp)
  8163a0:	00000b06 	br	8163d0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8163a4:	e0fffd17 	ldw	r3,-12(fp)
  8163a8:	00880004 	movi	r2,8192
  8163ac:	18800115 	stw	r2,4(r3)
      return 0;
  8163b0:	e03ffe15 	stw	zero,-8(fp)
  8163b4:	00000606 	br	8163d0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8163b8:	08163e80 	call	8163e8 <alt_get_errno>
  8163bc:	1007883a 	mov	r3,r2
  8163c0:	00801444 	movi	r2,81
  8163c4:	18800015 	stw	r2,0(r3)
    return -1;
  8163c8:	00bfffc4 	movi	r2,-1
  8163cc:	e0bffe15 	stw	r2,-8(fp)
  8163d0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8163d4:	e037883a 	mov	sp,fp
  8163d8:	dfc00117 	ldw	ra,4(sp)
  8163dc:	df000017 	ldw	fp,0(sp)
  8163e0:	dec00204 	addi	sp,sp,8
  8163e4:	f800283a 	ret

008163e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8163e8:	defffd04 	addi	sp,sp,-12
  8163ec:	dfc00215 	stw	ra,8(sp)
  8163f0:	df000115 	stw	fp,4(sp)
  8163f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8163f8:	00802174 	movhi	r2,133
  8163fc:	1082c504 	addi	r2,r2,2836
  816400:	10800017 	ldw	r2,0(r2)
  816404:	1005003a 	cmpeq	r2,r2,zero
  816408:	1000061e 	bne	r2,zero,816424 <alt_get_errno+0x3c>
  81640c:	00802174 	movhi	r2,133
  816410:	1082c504 	addi	r2,r2,2836
  816414:	10800017 	ldw	r2,0(r2)
  816418:	103ee83a 	callr	r2
  81641c:	e0bfff15 	stw	r2,-4(fp)
  816420:	00000306 	br	816430 <alt_get_errno+0x48>
  816424:	00802174 	movhi	r2,133
  816428:	1082da04 	addi	r2,r2,2920
  81642c:	e0bfff15 	stw	r2,-4(fp)
  816430:	e0bfff17 	ldw	r2,-4(fp)
}
  816434:	e037883a 	mov	sp,fp
  816438:	dfc00117 	ldw	ra,4(sp)
  81643c:	df000017 	ldw	fp,0(sp)
  816440:	dec00204 	addi	sp,sp,8
  816444:	f800283a 	ret

00816448 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  816448:	deffef04 	addi	sp,sp,-68
  81644c:	df001015 	stw	fp,64(sp)
  816450:	df001004 	addi	fp,sp,64
  816454:	e13ffc15 	stw	r4,-16(fp)
  816458:	e17ffd15 	stw	r5,-12(fp)
  81645c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  816460:	00bffa84 	movi	r2,-22
  816464:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  816468:	e0bffc17 	ldw	r2,-16(fp)
  81646c:	10800828 	cmpgeui	r2,r2,32
  816470:	1000601e 	bne	r2,zero,8165f4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816474:	0005303a 	rdctl	r2,status
  816478:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81647c:	e0fff917 	ldw	r3,-28(fp)
  816480:	00bfff84 	movi	r2,-2
  816484:	1884703a 	and	r2,r3,r2
  816488:	1001703a 	wrctl	status,r2
  
  return context;
  81648c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  816490:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  816494:	e0bffc17 	ldw	r2,-16(fp)
  816498:	00c03934 	movhi	r3,228
  81649c:	18e94404 	addi	r3,r3,-23280
  8164a0:	100490fa 	slli	r2,r2,3
  8164a4:	10c7883a 	add	r3,r2,r3
  8164a8:	e0bffe17 	ldw	r2,-8(fp)
  8164ac:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  8164b0:	e0bffc17 	ldw	r2,-16(fp)
  8164b4:	00c03934 	movhi	r3,228
  8164b8:	18e94404 	addi	r3,r3,-23280
  8164bc:	100490fa 	slli	r2,r2,3
  8164c0:	10c5883a 	add	r2,r2,r3
  8164c4:	10c00104 	addi	r3,r2,4
  8164c8:	e0bffd17 	ldw	r2,-12(fp)
  8164cc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8164d0:	e0bffe17 	ldw	r2,-8(fp)
  8164d4:	1005003a 	cmpeq	r2,r2,zero
  8164d8:	1000201e 	bne	r2,zero,81655c <alt_irq_register+0x114>
  8164dc:	e0bffc17 	ldw	r2,-16(fp)
  8164e0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8164e4:	0005303a 	rdctl	r2,status
  8164e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8164ec:	e0fff617 	ldw	r3,-40(fp)
  8164f0:	00bfff84 	movi	r2,-2
  8164f4:	1884703a 	and	r2,r3,r2
  8164f8:	1001703a 	wrctl	status,r2
  
  return context;
  8164fc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816500:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  816504:	e0fff717 	ldw	r3,-36(fp)
  816508:	00800044 	movi	r2,1
  81650c:	10c4983a 	sll	r2,r2,r3
  816510:	1007883a 	mov	r3,r2
  816514:	00802174 	movhi	r2,133
  816518:	1082e104 	addi	r2,r2,2948
  81651c:	10800017 	ldw	r2,0(r2)
  816520:	1886b03a 	or	r3,r3,r2
  816524:	00802174 	movhi	r2,133
  816528:	1082e104 	addi	r2,r2,2948
  81652c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  816530:	00802174 	movhi	r2,133
  816534:	1082e104 	addi	r2,r2,2948
  816538:	10800017 	ldw	r2,0(r2)
  81653c:	100170fa 	wrctl	ienable,r2
  816540:	e0bff817 	ldw	r2,-32(fp)
  816544:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816548:	e0bff517 	ldw	r2,-44(fp)
  81654c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816550:	0005883a 	mov	r2,zero
  816554:	e0bfff15 	stw	r2,-4(fp)
  816558:	00002006 	br	8165dc <alt_irq_register+0x194>
  81655c:	e0bffc17 	ldw	r2,-16(fp)
  816560:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816564:	0005303a 	rdctl	r2,status
  816568:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81656c:	e0fff217 	ldw	r3,-56(fp)
  816570:	00bfff84 	movi	r2,-2
  816574:	1884703a 	and	r2,r3,r2
  816578:	1001703a 	wrctl	status,r2
  
  return context;
  81657c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816580:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  816584:	e0fff317 	ldw	r3,-52(fp)
  816588:	00800044 	movi	r2,1
  81658c:	10c4983a 	sll	r2,r2,r3
  816590:	0084303a 	nor	r2,zero,r2
  816594:	1007883a 	mov	r3,r2
  816598:	00802174 	movhi	r2,133
  81659c:	1082e104 	addi	r2,r2,2948
  8165a0:	10800017 	ldw	r2,0(r2)
  8165a4:	1886703a 	and	r3,r3,r2
  8165a8:	00802174 	movhi	r2,133
  8165ac:	1082e104 	addi	r2,r2,2948
  8165b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8165b4:	00802174 	movhi	r2,133
  8165b8:	1082e104 	addi	r2,r2,2948
  8165bc:	10800017 	ldw	r2,0(r2)
  8165c0:	100170fa 	wrctl	ienable,r2
  8165c4:	e0bff417 	ldw	r2,-48(fp)
  8165c8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8165cc:	e0bff117 	ldw	r2,-60(fp)
  8165d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8165d4:	0005883a 	mov	r2,zero
  8165d8:	e0bfff15 	stw	r2,-4(fp)
  8165dc:	e0bfff17 	ldw	r2,-4(fp)
  8165e0:	e0bffb15 	stw	r2,-20(fp)
  8165e4:	e0bffa17 	ldw	r2,-24(fp)
  8165e8:	e0bff015 	stw	r2,-64(fp)
  8165ec:	e0bff017 	ldw	r2,-64(fp)
  8165f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8165f4:	e0bffb17 	ldw	r2,-20(fp)
}
  8165f8:	e037883a 	mov	sp,fp
  8165fc:	df000017 	ldw	fp,0(sp)
  816600:	dec00104 	addi	sp,sp,4
  816604:	f800283a 	ret

00816608 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  816608:	deffeb04 	addi	sp,sp,-84
  81660c:	dfc01415 	stw	ra,80(sp)
  816610:	df001315 	stw	fp,76(sp)
  816614:	df001304 	addi	fp,sp,76
  816618:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81661c:	e0bffd17 	ldw	r2,-12(fp)
  816620:	1004803a 	cmplt	r2,r2,zero
  816624:	1000081e 	bne	r2,zero,816648 <isatty+0x40>
  816628:	e0bffd17 	ldw	r2,-12(fp)
  81662c:	10800324 	muli	r2,r2,12
  816630:	1007883a 	mov	r3,r2
  816634:	00802174 	movhi	r2,133
  816638:	1081b204 	addi	r2,r2,1736
  81663c:	1887883a 	add	r3,r3,r2
  816640:	e0ffff15 	stw	r3,-4(fp)
  816644:	00000106 	br	81664c <isatty+0x44>
  816648:	e03fff15 	stw	zero,-4(fp)
  81664c:	e0bfff17 	ldw	r2,-4(fp)
  816650:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  816654:	e0bfed17 	ldw	r2,-76(fp)
  816658:	1005003a 	cmpeq	r2,r2,zero
  81665c:	10000f1e 	bne	r2,zero,81669c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  816660:	e0bfed17 	ldw	r2,-76(fp)
  816664:	10800017 	ldw	r2,0(r2)
  816668:	10800817 	ldw	r2,32(r2)
  81666c:	1004c03a 	cmpne	r2,r2,zero
  816670:	1000031e 	bne	r2,zero,816680 <isatty+0x78>
    {
      return 1;
  816674:	00800044 	movi	r2,1
  816678:	e0bffe15 	stw	r2,-8(fp)
  81667c:	00000c06 	br	8166b0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  816680:	e17fee04 	addi	r5,fp,-72
  816684:	e13ffd17 	ldw	r4,-12(fp)
  816688:	08163140 	call	816314 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  81668c:	e0bfef17 	ldw	r2,-68(fp)
  816690:	10880020 	cmpeqi	r2,r2,8192
  816694:	e0bffe15 	stw	r2,-8(fp)
  816698:	00000506 	br	8166b0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81669c:	08166c80 	call	8166c8 <alt_get_errno>
  8166a0:	1007883a 	mov	r3,r2
  8166a4:	00801444 	movi	r2,81
  8166a8:	18800015 	stw	r2,0(r3)
    return 0;
  8166ac:	e03ffe15 	stw	zero,-8(fp)
  8166b0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  8166b4:	e037883a 	mov	sp,fp
  8166b8:	dfc00117 	ldw	ra,4(sp)
  8166bc:	df000017 	ldw	fp,0(sp)
  8166c0:	dec00204 	addi	sp,sp,8
  8166c4:	f800283a 	ret

008166c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8166c8:	defffd04 	addi	sp,sp,-12
  8166cc:	dfc00215 	stw	ra,8(sp)
  8166d0:	df000115 	stw	fp,4(sp)
  8166d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8166d8:	00802174 	movhi	r2,133
  8166dc:	1082c504 	addi	r2,r2,2836
  8166e0:	10800017 	ldw	r2,0(r2)
  8166e4:	1005003a 	cmpeq	r2,r2,zero
  8166e8:	1000061e 	bne	r2,zero,816704 <alt_get_errno+0x3c>
  8166ec:	00802174 	movhi	r2,133
  8166f0:	1082c504 	addi	r2,r2,2836
  8166f4:	10800017 	ldw	r2,0(r2)
  8166f8:	103ee83a 	callr	r2
  8166fc:	e0bfff15 	stw	r2,-4(fp)
  816700:	00000306 	br	816710 <alt_get_errno+0x48>
  816704:	00802174 	movhi	r2,133
  816708:	1082da04 	addi	r2,r2,2920
  81670c:	e0bfff15 	stw	r2,-4(fp)
  816710:	e0bfff17 	ldw	r2,-4(fp)
}
  816714:	e037883a 	mov	sp,fp
  816718:	dfc00117 	ldw	ra,4(sp)
  81671c:	df000017 	ldw	fp,0(sp)
  816720:	dec00204 	addi	sp,sp,8
  816724:	f800283a 	ret

00816728 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  816728:	defff804 	addi	sp,sp,-32
  81672c:	dfc00715 	stw	ra,28(sp)
  816730:	df000615 	stw	fp,24(sp)
  816734:	df000604 	addi	fp,sp,24
  816738:	e13ffc15 	stw	r4,-16(fp)
  81673c:	e17ffd15 	stw	r5,-12(fp)
  816740:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  816744:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  816748:	e0bffc17 	ldw	r2,-16(fp)
  81674c:	1004803a 	cmplt	r2,r2,zero
  816750:	1000081e 	bne	r2,zero,816774 <lseek+0x4c>
  816754:	e0bffc17 	ldw	r2,-16(fp)
  816758:	10800324 	muli	r2,r2,12
  81675c:	1007883a 	mov	r3,r2
  816760:	00802174 	movhi	r2,133
  816764:	1081b204 	addi	r2,r2,1736
  816768:	1887883a 	add	r3,r3,r2
  81676c:	e0ffff15 	stw	r3,-4(fp)
  816770:	00000106 	br	816778 <lseek+0x50>
  816774:	e03fff15 	stw	zero,-4(fp)
  816778:	e0bfff17 	ldw	r2,-4(fp)
  81677c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  816780:	e0bffb17 	ldw	r2,-20(fp)
  816784:	1005003a 	cmpeq	r2,r2,zero
  816788:	1000111e 	bne	r2,zero,8167d0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  81678c:	e0bffb17 	ldw	r2,-20(fp)
  816790:	10800017 	ldw	r2,0(r2)
  816794:	10800717 	ldw	r2,28(r2)
  816798:	1005003a 	cmpeq	r2,r2,zero
  81679c:	1000091e 	bne	r2,zero,8167c4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8167a0:	e0bffb17 	ldw	r2,-20(fp)
  8167a4:	10800017 	ldw	r2,0(r2)
  8167a8:	10800717 	ldw	r2,28(r2)
  8167ac:	e13ffb17 	ldw	r4,-20(fp)
  8167b0:	e17ffd17 	ldw	r5,-12(fp)
  8167b4:	e1bffe17 	ldw	r6,-8(fp)
  8167b8:	103ee83a 	callr	r2
  8167bc:	e0bffa15 	stw	r2,-24(fp)
  8167c0:	00000506 	br	8167d8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8167c4:	00bfde84 	movi	r2,-134
  8167c8:	e0bffa15 	stw	r2,-24(fp)
  8167cc:	00000206 	br	8167d8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  8167d0:	00bfebc4 	movi	r2,-81
  8167d4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8167d8:	e0bffa17 	ldw	r2,-24(fp)
  8167dc:	1004403a 	cmpge	r2,r2,zero
  8167e0:	1000071e 	bne	r2,zero,816800 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  8167e4:	08168180 	call	816818 <alt_get_errno>
  8167e8:	1007883a 	mov	r3,r2
  8167ec:	e0bffa17 	ldw	r2,-24(fp)
  8167f0:	0085c83a 	sub	r2,zero,r2
  8167f4:	18800015 	stw	r2,0(r3)
    rc = -1;
  8167f8:	00bfffc4 	movi	r2,-1
  8167fc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  816800:	e0bffa17 	ldw	r2,-24(fp)
}
  816804:	e037883a 	mov	sp,fp
  816808:	dfc00117 	ldw	ra,4(sp)
  81680c:	df000017 	ldw	fp,0(sp)
  816810:	dec00204 	addi	sp,sp,8
  816814:	f800283a 	ret

00816818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816818:	defffd04 	addi	sp,sp,-12
  81681c:	dfc00215 	stw	ra,8(sp)
  816820:	df000115 	stw	fp,4(sp)
  816824:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  816828:	00802174 	movhi	r2,133
  81682c:	1082c504 	addi	r2,r2,2836
  816830:	10800017 	ldw	r2,0(r2)
  816834:	1005003a 	cmpeq	r2,r2,zero
  816838:	1000061e 	bne	r2,zero,816854 <alt_get_errno+0x3c>
  81683c:	00802174 	movhi	r2,133
  816840:	1082c504 	addi	r2,r2,2836
  816844:	10800017 	ldw	r2,0(r2)
  816848:	103ee83a 	callr	r2
  81684c:	e0bfff15 	stw	r2,-4(fp)
  816850:	00000306 	br	816860 <alt_get_errno+0x48>
  816854:	00802174 	movhi	r2,133
  816858:	1082da04 	addi	r2,r2,2920
  81685c:	e0bfff15 	stw	r2,-4(fp)
  816860:	e0bfff17 	ldw	r2,-4(fp)
}
  816864:	e037883a 	mov	sp,fp
  816868:	dfc00117 	ldw	ra,4(sp)
  81686c:	df000017 	ldw	fp,0(sp)
  816870:	dec00204 	addi	sp,sp,8
  816874:	f800283a 	ret

00816878 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  816878:	defffb04 	addi	sp,sp,-20
  81687c:	dfc00415 	stw	ra,16(sp)
  816880:	df000315 	stw	fp,12(sp)
  816884:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  816888:	0009883a 	mov	r4,zero
  81688c:	08202180 	call	820218 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  816890:	0817be80 	call	817be8 <OSInit>
  816894:	01000044 	movi	r4,1
  816898:	081d7380 	call	81d738 <OSSemCreate>
  81689c:	1007883a 	mov	r3,r2
  8168a0:	00802174 	movhi	r2,133
  8168a4:	1082e804 	addi	r2,r2,2976
  8168a8:	10c00015 	stw	r3,0(r2)
  8168ac:	01000044 	movi	r4,1
  8168b0:	081d7380 	call	81d738 <OSSemCreate>
  8168b4:	1007883a 	mov	r3,r2
  8168b8:	00802174 	movhi	r2,133
  8168bc:	1082ea04 	addi	r2,r2,2984
  8168c0:	10c00015 	stw	r3,0(r2)
  8168c4:	00802174 	movhi	r2,133
  8168c8:	10833404 	addi	r2,r2,3280
  8168cc:	e0bffd15 	stw	r2,-12(fp)
  8168d0:	00800044 	movi	r2,1
  8168d4:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  8168d8:	e13ffe0b 	ldhu	r4,-8(fp)
  8168dc:	081d7380 	call	81d738 <OSSemCreate>
  8168e0:	1007883a 	mov	r3,r2
  8168e4:	e0bffd17 	ldw	r2,-12(fp)
  8168e8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8168ec:	082024c0 	call	82024c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8168f0:	01002174 	movhi	r4,133
  8168f4:	2132a404 	addi	r4,r4,-13680
  8168f8:	01402174 	movhi	r5,133
  8168fc:	2972a404 	addi	r5,r5,-13680
  816900:	01802174 	movhi	r6,133
  816904:	31b2a404 	addi	r6,r6,-13680
  816908:	083a8880 	call	83a888 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  81690c:	083a0f80 	call	83a0f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  816910:	01002134 	movhi	r4,132
  816914:	21285704 	addi	r4,r4,-24228
  816918:	084a3540 	call	84a354 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81691c:	d1206c17 	ldw	r4,-32336(gp)
  816920:	d1606d17 	ldw	r5,-32332(gp)
  816924:	d1a06e17 	ldw	r6,-32328(gp)
  816928:	0804f180 	call	804f18 <main>
  81692c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  816930:	01000044 	movi	r4,1
  816934:	08224180 	call	822418 <close>
  exit (result);
  816938:	e13fff17 	ldw	r4,-4(fp)
  81693c:	084a3840 	call	84a384 <exit>

00816940 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  816940:	defffc04 	addi	sp,sp,-16
  816944:	df000315 	stw	fp,12(sp)
  816948:	df000304 	addi	fp,sp,12
  81694c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  816950:	e0bffe17 	ldw	r2,-8(fp)
  816954:	10800217 	ldw	r2,8(r2)
  816958:	10d00034 	orhi	r3,r2,16384
  81695c:	e0bffe17 	ldw	r2,-8(fp)
  816960:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  816964:	e03ffd15 	stw	zero,-12(fp)
  816968:	00002006 	br	8169ec <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81696c:	e0bffd17 	ldw	r2,-12(fp)
  816970:	00c02174 	movhi	r3,133
  816974:	18c1b204 	addi	r3,r3,1736
  816978:	10800324 	muli	r2,r2,12
  81697c:	10c5883a 	add	r2,r2,r3
  816980:	10c00017 	ldw	r3,0(r2)
  816984:	e0bffe17 	ldw	r2,-8(fp)
  816988:	10800017 	ldw	r2,0(r2)
  81698c:	1880141e 	bne	r3,r2,8169e0 <alt_file_locked+0xa0>
  816990:	e0bffd17 	ldw	r2,-12(fp)
  816994:	00c02174 	movhi	r3,133
  816998:	18c1b204 	addi	r3,r3,1736
  81699c:	10800324 	muli	r2,r2,12
  8169a0:	10c5883a 	add	r2,r2,r3
  8169a4:	10800204 	addi	r2,r2,8
  8169a8:	10800017 	ldw	r2,0(r2)
  8169ac:	1004403a 	cmpge	r2,r2,zero
  8169b0:	10000b1e 	bne	r2,zero,8169e0 <alt_file_locked+0xa0>
  8169b4:	e0bffd17 	ldw	r2,-12(fp)
  8169b8:	10800324 	muli	r2,r2,12
  8169bc:	1007883a 	mov	r3,r2
  8169c0:	00802174 	movhi	r2,133
  8169c4:	1081b204 	addi	r2,r2,1736
  8169c8:	1887883a 	add	r3,r3,r2
  8169cc:	e0bffe17 	ldw	r2,-8(fp)
  8169d0:	18800326 	beq	r3,r2,8169e0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8169d4:	00bffcc4 	movi	r2,-13
  8169d8:	e0bfff15 	stw	r2,-4(fp)
  8169dc:	00000a06 	br	816a08 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8169e0:	e0bffd17 	ldw	r2,-12(fp)
  8169e4:	10800044 	addi	r2,r2,1
  8169e8:	e0bffd15 	stw	r2,-12(fp)
  8169ec:	00802174 	movhi	r2,133
  8169f0:	1082c404 	addi	r2,r2,2832
  8169f4:	10800017 	ldw	r2,0(r2)
  8169f8:	1007883a 	mov	r3,r2
  8169fc:	e0bffd17 	ldw	r2,-12(fp)
  816a00:	18bfda2e 	bgeu	r3,r2,81696c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  816a04:	e03fff15 	stw	zero,-4(fp)
  816a08:	e0bfff17 	ldw	r2,-4(fp)
}
  816a0c:	e037883a 	mov	sp,fp
  816a10:	df000017 	ldw	fp,0(sp)
  816a14:	dec00104 	addi	sp,sp,4
  816a18:	f800283a 	ret

00816a1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  816a1c:	defff404 	addi	sp,sp,-48
  816a20:	dfc00b15 	stw	ra,44(sp)
  816a24:	df000a15 	stw	fp,40(sp)
  816a28:	df000a04 	addi	fp,sp,40
  816a2c:	e13ffb15 	stw	r4,-20(fp)
  816a30:	e17ffc15 	stw	r5,-16(fp)
  816a34:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  816a38:	00bfffc4 	movi	r2,-1
  816a3c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  816a40:	00bffb44 	movi	r2,-19
  816a44:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  816a48:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  816a4c:	e13ffb17 	ldw	r4,-20(fp)
  816a50:	01402174 	movhi	r5,133
  816a54:	2942c204 	addi	r5,r5,2824
  816a58:	083a1c00 	call	83a1c0 <alt_find_dev>
  816a5c:	e0bffa15 	stw	r2,-24(fp)
  816a60:	e0bffa17 	ldw	r2,-24(fp)
  816a64:	1004c03a 	cmpne	r2,r2,zero
  816a68:	1000051e 	bne	r2,zero,816a80 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  816a6c:	e13ffb17 	ldw	r4,-20(fp)
  816a70:	083a2540 	call	83a254 <alt_find_file>
  816a74:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  816a78:	00800044 	movi	r2,1
  816a7c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  816a80:	e0bffa17 	ldw	r2,-24(fp)
  816a84:	1005003a 	cmpeq	r2,r2,zero
  816a88:	1000301e 	bne	r2,zero,816b4c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  816a8c:	e13ffa17 	ldw	r4,-24(fp)
  816a90:	083a4040 	call	83a404 <alt_get_fd>
  816a94:	e0bff815 	stw	r2,-32(fp)
  816a98:	e0bff817 	ldw	r2,-32(fp)
  816a9c:	1004403a 	cmpge	r2,r2,zero
  816aa0:	1000031e 	bne	r2,zero,816ab0 <open+0x94>
    {
      status = index;
  816aa4:	e0bff817 	ldw	r2,-32(fp)
  816aa8:	e0bff715 	stw	r2,-36(fp)
  816aac:	00002906 	br	816b54 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  816ab0:	e0bff817 	ldw	r2,-32(fp)
  816ab4:	10800324 	muli	r2,r2,12
  816ab8:	1007883a 	mov	r3,r2
  816abc:	00802174 	movhi	r2,133
  816ac0:	1081b204 	addi	r2,r2,1736
  816ac4:	1885883a 	add	r2,r3,r2
  816ac8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  816acc:	e0fffc17 	ldw	r3,-16(fp)
  816ad0:	00900034 	movhi	r2,16384
  816ad4:	10bfffc4 	addi	r2,r2,-1
  816ad8:	1886703a 	and	r3,r3,r2
  816adc:	e0bff917 	ldw	r2,-28(fp)
  816ae0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  816ae4:	e0bff617 	ldw	r2,-40(fp)
  816ae8:	1004c03a 	cmpne	r2,r2,zero
  816aec:	1000061e 	bne	r2,zero,816b08 <open+0xec>
  816af0:	e13ff917 	ldw	r4,-28(fp)
  816af4:	08169400 	call	816940 <alt_file_locked>
  816af8:	e0bff715 	stw	r2,-36(fp)
  816afc:	e0bff717 	ldw	r2,-36(fp)
  816b00:	1004803a 	cmplt	r2,r2,zero
  816b04:	1000131e 	bne	r2,zero,816b54 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  816b08:	e0bffa17 	ldw	r2,-24(fp)
  816b0c:	10800317 	ldw	r2,12(r2)
  816b10:	1005003a 	cmpeq	r2,r2,zero
  816b14:	1000091e 	bne	r2,zero,816b3c <open+0x120>
  816b18:	e0bffa17 	ldw	r2,-24(fp)
  816b1c:	10800317 	ldw	r2,12(r2)
  816b20:	e13ff917 	ldw	r4,-28(fp)
  816b24:	e17ffb17 	ldw	r5,-20(fp)
  816b28:	e1bffc17 	ldw	r6,-16(fp)
  816b2c:	e1fffd17 	ldw	r7,-12(fp)
  816b30:	103ee83a 	callr	r2
  816b34:	e0bfff15 	stw	r2,-4(fp)
  816b38:	00000106 	br	816b40 <open+0x124>
  816b3c:	e03fff15 	stw	zero,-4(fp)
  816b40:	e0bfff17 	ldw	r2,-4(fp)
  816b44:	e0bff715 	stw	r2,-36(fp)
  816b48:	00000206 	br	816b54 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  816b4c:	00bffb44 	movi	r2,-19
  816b50:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  816b54:	e0bff717 	ldw	r2,-36(fp)
  816b58:	1004403a 	cmpge	r2,r2,zero
  816b5c:	1000091e 	bne	r2,zero,816b84 <open+0x168>
  {
    alt_release_fd (index);  
  816b60:	e13ff817 	ldw	r4,-32(fp)
  816b64:	0816c040 	call	816c04 <alt_release_fd>
    ALT_ERRNO = -status;
  816b68:	0816ba40 	call	816ba4 <alt_get_errno>
  816b6c:	e0fff717 	ldw	r3,-36(fp)
  816b70:	00c7c83a 	sub	r3,zero,r3
  816b74:	10c00015 	stw	r3,0(r2)
    return -1;
  816b78:	00bfffc4 	movi	r2,-1
  816b7c:	e0bffe15 	stw	r2,-8(fp)
  816b80:	00000206 	br	816b8c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  816b84:	e0bff817 	ldw	r2,-32(fp)
  816b88:	e0bffe15 	stw	r2,-8(fp)
  816b8c:	e0bffe17 	ldw	r2,-8(fp)
}
  816b90:	e037883a 	mov	sp,fp
  816b94:	dfc00117 	ldw	ra,4(sp)
  816b98:	df000017 	ldw	fp,0(sp)
  816b9c:	dec00204 	addi	sp,sp,8
  816ba0:	f800283a 	ret

00816ba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816ba4:	defffd04 	addi	sp,sp,-12
  816ba8:	dfc00215 	stw	ra,8(sp)
  816bac:	df000115 	stw	fp,4(sp)
  816bb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  816bb4:	00802174 	movhi	r2,133
  816bb8:	1082c504 	addi	r2,r2,2836
  816bbc:	10800017 	ldw	r2,0(r2)
  816bc0:	1005003a 	cmpeq	r2,r2,zero
  816bc4:	1000061e 	bne	r2,zero,816be0 <alt_get_errno+0x3c>
  816bc8:	00802174 	movhi	r2,133
  816bcc:	1082c504 	addi	r2,r2,2836
  816bd0:	10800017 	ldw	r2,0(r2)
  816bd4:	103ee83a 	callr	r2
  816bd8:	e0bfff15 	stw	r2,-4(fp)
  816bdc:	00000306 	br	816bec <alt_get_errno+0x48>
  816be0:	00802174 	movhi	r2,133
  816be4:	1082da04 	addi	r2,r2,2920
  816be8:	e0bfff15 	stw	r2,-4(fp)
  816bec:	e0bfff17 	ldw	r2,-4(fp)
}
  816bf0:	e037883a 	mov	sp,fp
  816bf4:	dfc00117 	ldw	ra,4(sp)
  816bf8:	df000017 	ldw	fp,0(sp)
  816bfc:	dec00204 	addi	sp,sp,8
  816c00:	f800283a 	ret

00816c04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  816c04:	defffe04 	addi	sp,sp,-8
  816c08:	df000115 	stw	fp,4(sp)
  816c0c:	df000104 	addi	fp,sp,4
  816c10:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  816c14:	e0bfff17 	ldw	r2,-4(fp)
  816c18:	108000d0 	cmplti	r2,r2,3
  816c1c:	10000d1e 	bne	r2,zero,816c54 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  816c20:	e0bfff17 	ldw	r2,-4(fp)
  816c24:	00c02174 	movhi	r3,133
  816c28:	18c1b204 	addi	r3,r3,1736
  816c2c:	10800324 	muli	r2,r2,12
  816c30:	10c5883a 	add	r2,r2,r3
  816c34:	10800204 	addi	r2,r2,8
  816c38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  816c3c:	e0bfff17 	ldw	r2,-4(fp)
  816c40:	00c02174 	movhi	r3,133
  816c44:	18c1b204 	addi	r3,r3,1736
  816c48:	10800324 	muli	r2,r2,12
  816c4c:	10c5883a 	add	r2,r2,r3
  816c50:	10000015 	stw	zero,0(r2)
  }
}
  816c54:	e037883a 	mov	sp,fp
  816c58:	df000017 	ldw	fp,0(sp)
  816c5c:	dec00104 	addi	sp,sp,4
  816c60:	f800283a 	ret

00816c64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  816c64:	defff804 	addi	sp,sp,-32
  816c68:	df000715 	stw	fp,28(sp)
  816c6c:	df000704 	addi	fp,sp,28
  816c70:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816c74:	0005303a 	rdctl	r2,status
  816c78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816c7c:	e0fffb17 	ldw	r3,-20(fp)
  816c80:	00bfff84 	movi	r2,-2
  816c84:	1884703a 	and	r2,r3,r2
  816c88:	1001703a 	wrctl	status,r2
  
  return context;
  816c8c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  816c90:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  816c94:	d0a01417 	ldw	r2,-32688(gp)
  816c98:	10c000c4 	addi	r3,r2,3
  816c9c:	00bfff04 	movi	r2,-4
  816ca0:	1884703a 	and	r2,r3,r2
  816ca4:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  816ca8:	d0e01417 	ldw	r3,-32688(gp)
  816cac:	e0bffe17 	ldw	r2,-8(fp)
  816cb0:	1887883a 	add	r3,r3,r2
  816cb4:	00804034 	movhi	r2,256
  816cb8:	10800004 	addi	r2,r2,0
  816cbc:	10c0072e 	bgeu	r2,r3,816cdc <sbrk+0x78>
  816cc0:	e0bffd17 	ldw	r2,-12(fp)
  816cc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816cc8:	e0bffa17 	ldw	r2,-24(fp)
  816ccc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  816cd0:	00bfffc4 	movi	r2,-1
  816cd4:	e0bfff15 	stw	r2,-4(fp)
  816cd8:	00000c06 	br	816d0c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  816cdc:	d0a01417 	ldw	r2,-32688(gp)
  816ce0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  816ce4:	d0e01417 	ldw	r3,-32688(gp)
  816ce8:	e0bffe17 	ldw	r2,-8(fp)
  816cec:	1885883a 	add	r2,r3,r2
  816cf0:	d0a01415 	stw	r2,-32688(gp)
  816cf4:	e0bffd17 	ldw	r2,-12(fp)
  816cf8:	e0bff915 	stw	r2,-28(fp)
  816cfc:	e0bff917 	ldw	r2,-28(fp)
  816d00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  816d04:	e0bffc17 	ldw	r2,-16(fp)
  816d08:	e0bfff15 	stw	r2,-4(fp)
  816d0c:	e0bfff17 	ldw	r2,-4(fp)
} 
  816d10:	e037883a 	mov	sp,fp
  816d14:	df000017 	ldw	fp,0(sp)
  816d18:	dec00104 	addi	sp,sp,4
  816d1c:	f800283a 	ret

00816d20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  816d20:	defffa04 	addi	sp,sp,-24
  816d24:	df000515 	stw	fp,20(sp)
  816d28:	df000504 	addi	fp,sp,20
  816d2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816d30:	0005303a 	rdctl	r2,status
  816d34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816d38:	e0fffd17 	ldw	r3,-12(fp)
  816d3c:	00bfff84 	movi	r2,-2
  816d40:	1884703a 	and	r2,r3,r2
  816d44:	1001703a 	wrctl	status,r2
  
  return context;
  816d48:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  816d4c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  816d50:	e0bfff17 	ldw	r2,-4(fp)
  816d54:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  816d58:	e0bffc17 	ldw	r2,-16(fp)
  816d5c:	10c00017 	ldw	r3,0(r2)
  816d60:	e0bffc17 	ldw	r2,-16(fp)
  816d64:	10800117 	ldw	r2,4(r2)
  816d68:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  816d6c:	e0bffc17 	ldw	r2,-16(fp)
  816d70:	10c00117 	ldw	r3,4(r2)
  816d74:	e0bffc17 	ldw	r2,-16(fp)
  816d78:	10800017 	ldw	r2,0(r2)
  816d7c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  816d80:	e0fffc17 	ldw	r3,-16(fp)
  816d84:	e0bffc17 	ldw	r2,-16(fp)
  816d88:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  816d8c:	e0fffc17 	ldw	r3,-16(fp)
  816d90:	e0bffc17 	ldw	r2,-16(fp)
  816d94:	18800015 	stw	r2,0(r3)
  816d98:	e0bffe17 	ldw	r2,-8(fp)
  816d9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816da0:	e0bffb17 	ldw	r2,-20(fp)
  816da4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  816da8:	e037883a 	mov	sp,fp
  816dac:	df000017 	ldw	fp,0(sp)
  816db0:	dec00104 	addi	sp,sp,4
  816db4:	f800283a 	ret

00816db8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  816db8:	defffb04 	addi	sp,sp,-20
  816dbc:	dfc00415 	stw	ra,16(sp)
  816dc0:	df000315 	stw	fp,12(sp)
  816dc4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  816dc8:	d0a01517 	ldw	r2,-32684(gp)
  816dcc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  816dd0:	d0a07017 	ldw	r2,-32320(gp)
  816dd4:	10800044 	addi	r2,r2,1
  816dd8:	d0a07015 	stw	r2,-32320(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  816ddc:	00003106 	br	816ea4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  816de0:	e0bffe17 	ldw	r2,-8(fp)
  816de4:	10800017 	ldw	r2,0(r2)
  816de8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  816dec:	e0bffe17 	ldw	r2,-8(fp)
  816df0:	10800403 	ldbu	r2,16(r2)
  816df4:	10803fcc 	andi	r2,r2,255
  816df8:	1005003a 	cmpeq	r2,r2,zero
  816dfc:	1000051e 	bne	r2,zero,816e14 <alt_tick+0x5c>
  816e00:	d0a07017 	ldw	r2,-32320(gp)
  816e04:	1004c03a 	cmpne	r2,r2,zero
  816e08:	1000021e 	bne	r2,zero,816e14 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  816e0c:	e0bffe17 	ldw	r2,-8(fp)
  816e10:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  816e14:	e0bffe17 	ldw	r2,-8(fp)
  816e18:	10c00217 	ldw	r3,8(r2)
  816e1c:	d0a07017 	ldw	r2,-32320(gp)
  816e20:	10c01e36 	bltu	r2,r3,816e9c <alt_tick+0xe4>
  816e24:	e0bffe17 	ldw	r2,-8(fp)
  816e28:	10800403 	ldbu	r2,16(r2)
  816e2c:	10803fcc 	andi	r2,r2,255
  816e30:	1004c03a 	cmpne	r2,r2,zero
  816e34:	1000191e 	bne	r2,zero,816e9c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  816e38:	e0bffe17 	ldw	r2,-8(fp)
  816e3c:	10c00317 	ldw	r3,12(r2)
  816e40:	e0bffe17 	ldw	r2,-8(fp)
  816e44:	11000517 	ldw	r4,20(r2)
  816e48:	183ee83a 	callr	r3
  816e4c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  816e50:	e0bffd17 	ldw	r2,-12(fp)
  816e54:	1004c03a 	cmpne	r2,r2,zero
  816e58:	1000031e 	bne	r2,zero,816e68 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  816e5c:	e13ffe17 	ldw	r4,-8(fp)
  816e60:	0816d200 	call	816d20 <alt_alarm_stop>
  816e64:	00000d06 	br	816e9c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  816e68:	e0bffe17 	ldw	r2,-8(fp)
  816e6c:	10c00217 	ldw	r3,8(r2)
  816e70:	e0bffd17 	ldw	r2,-12(fp)
  816e74:	1887883a 	add	r3,r3,r2
  816e78:	e0bffe17 	ldw	r2,-8(fp)
  816e7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  816e80:	e0bffe17 	ldw	r2,-8(fp)
  816e84:	10c00217 	ldw	r3,8(r2)
  816e88:	d0a07017 	ldw	r2,-32320(gp)
  816e8c:	1880032e 	bgeu	r3,r2,816e9c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  816e90:	e0fffe17 	ldw	r3,-8(fp)
  816e94:	00800044 	movi	r2,1
  816e98:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  816e9c:	e0bfff17 	ldw	r2,-4(fp)
  816ea0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  816ea4:	d0e01504 	addi	r3,gp,-32684
  816ea8:	e0bffe17 	ldw	r2,-8(fp)
  816eac:	10ffcc1e 	bne	r2,r3,816de0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  816eb0:	08180440 	call	818044 <OSTimeTick>
}
  816eb4:	e037883a 	mov	sp,fp
  816eb8:	dfc00117 	ldw	ra,4(sp)
  816ebc:	df000017 	ldw	fp,0(sp)
  816ec0:	dec00204 	addi	sp,sp,8
  816ec4:	f800283a 	ret

00816ec8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  816ec8:	defff904 	addi	sp,sp,-28
  816ecc:	dfc00615 	stw	ra,24(sp)
  816ed0:	df000515 	stw	fp,20(sp)
  816ed4:	dc000415 	stw	r16,16(sp)
  816ed8:	df000404 	addi	fp,sp,16
  816edc:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
  816ee0:	00802174 	movhi	r2,133
  816ee4:	1082eb44 	addi	r2,r2,2989
  816ee8:	10800003 	ldbu	r2,0(r2)
  816eec:	10803fcc 	andi	r2,r2,255
  816ef0:	1004c03a 	cmpne	r2,r2,zero
  816ef4:	1000041e 	bne	r2,zero,816f08 <usleep+0x40>
  {
    return alt_busy_sleep (us);
  816ef8:	e13ffe17 	ldw	r4,-8(fp)
  816efc:	0839d100 	call	839d10 <alt_busy_sleep>
  816f00:	e0bfff15 	stw	r2,-4(fp)
  816f04:	00002f06 	br	816fc4 <usleep+0xfc>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  816f08:	00802174 	movhi	r2,133
  816f0c:	1082e504 	addi	r2,r2,2964
  816f10:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
  816f14:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
  816f18:	e13ffe17 	ldw	r4,-8(fp)
  816f1c:	014003f4 	movhi	r5,15
  816f20:	29509004 	addi	r5,r5,16960
  816f24:	08053b80 	call	8053b8 <__udivsi3>
  816f28:	1007883a 	mov	r3,r2
  816f2c:	e0bffc17 	ldw	r2,-16(fp)
  816f30:	18a1383a 	mul	r16,r3,r2
  816f34:	e13ffe17 	ldw	r4,-8(fp)
  816f38:	014003f4 	movhi	r5,15
  816f3c:	29509004 	addi	r5,r5,16960
  816f40:	08053c00 	call	8053c0 <__umodsi3>
  816f44:	1007883a 	mov	r3,r2
  816f48:	e0bffc17 	ldw	r2,-16(fp)
  816f4c:	1889383a 	mul	r4,r3,r2
  816f50:	014003f4 	movhi	r5,15
  816f54:	29509004 	addi	r5,r5,16960
  816f58:	08053b80 	call	8053b8 <__udivsi3>
  816f5c:	8085883a 	add	r2,r16,r2
  816f60:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  816f64:	00000706 	br	816f84 <usleep+0xbc>
  {
    OSTimeDly(0xffff);
  816f68:	013fffd4 	movui	r4,65535
  816f6c:	081fc800 	call	81fc80 <OSTimeDly>
    ticks -= 0xffff;
  816f70:	e0bffd17 	ldw	r2,-12(fp)
  816f74:	00fffff4 	movhi	r3,65535
  816f78:	18c00044 	addi	r3,r3,1
  816f7c:	10c5883a 	add	r2,r2,r3
  816f80:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
  816f84:	e0fffd17 	ldw	r3,-12(fp)
  816f88:	00bfffd4 	movui	r2,65535
  816f8c:	10fff636 	bltu	r2,r3,816f68 <usleep+0xa0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
  816f90:	e0bffd17 	ldw	r2,-12(fp)
  816f94:	113fffcc 	andi	r4,r2,65535
  816f98:	081fc800 	call	81fc80 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
  816f9c:	010003f4 	movhi	r4,15
  816fa0:	21109004 	addi	r4,r4,16960
  816fa4:	e17ffc17 	ldw	r5,-16(fp)
  816fa8:	08053b80 	call	8053b8 <__udivsi3>
  816fac:	100b883a 	mov	r5,r2
  816fb0:	e13ffe17 	ldw	r4,-8(fp)
  816fb4:	08053c00 	call	8053c0 <__umodsi3>
  816fb8:	1009883a 	mov	r4,r2
  816fbc:	0839d100 	call	839d10 <alt_busy_sleep>

  return 0;  
  816fc0:	e03fff15 	stw	zero,-4(fp)
  816fc4:	e0bfff17 	ldw	r2,-4(fp)
}
  816fc8:	e037883a 	mov	sp,fp
  816fcc:	dfc00217 	ldw	ra,8(sp)
  816fd0:	df000117 	ldw	fp,4(sp)
  816fd4:	dc000017 	ldw	r16,0(sp)
  816fd8:	dec00304 	addi	sp,sp,12
  816fdc:	f800283a 	ret

00816fe0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  816fe0:	deffdf04 	addi	sp,sp,-132
  816fe4:	dfc02015 	stw	ra,128(sp)
  816fe8:	df001f15 	stw	fp,124(sp)
  816fec:	df001f04 	addi	fp,sp,124
  816ff0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  816ff4:	e17fe204 	addi	r5,fp,-120
  816ff8:	01003fc4 	movi	r4,255
  816ffc:	081fac00 	call	81fac0 <OSTaskQuery>
  817000:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  817004:	e0bffe83 	ldbu	r2,-6(fp)
  817008:	10803fcc 	andi	r2,r2,255
  81700c:	1004c03a 	cmpne	r2,r2,zero
  817010:	1000191e 	bne	r2,zero,817078 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  817014:	e0bfee83 	ldbu	r2,-70(fp)
  817018:	10803fcc 	andi	r2,r2,255
  81701c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  817020:	d1207217 	ldw	r4,-32312(gp)
  817024:	e17ffd04 	addi	r5,fp,-12
  817028:	081e00c0 	call	81e00c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  81702c:	e0bffe43 	ldbu	r2,-7(fp)
  817030:	10803fcc 	andi	r2,r2,255
  817034:	1005003a 	cmpeq	r2,r2,zero
  817038:	1000071e 	bne	r2,zero,817058 <__env_lock+0x78>
  81703c:	d0e01717 	ldw	r3,-32676(gp)
  817040:	e0bfe117 	ldw	r2,-124(fp)
  817044:	10c0041e 	bne	r2,r3,817058 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  817048:	d0a07117 	ldw	r2,-32316(gp)
  81704c:	10800044 	addi	r2,r2,1
  817050:	d0a07115 	stw	r2,-32316(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  817054:	00000806 	br	817078 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  817058:	d1207217 	ldw	r4,-32312(gp)
  81705c:	e1bffe84 	addi	r6,fp,-6
  817060:	000b883a 	mov	r5,zero
  817064:	081daec0 	call	81daec <OSSemPend>
    locks  = 1;
  817068:	00800044 	movi	r2,1
  81706c:	d0a07115 	stw	r2,-32316(gp)
    lockid = id;
  817070:	e0bfe117 	ldw	r2,-124(fp)
  817074:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  817078:	e037883a 	mov	sp,fp
  81707c:	dfc00117 	ldw	ra,4(sp)
  817080:	df000017 	ldw	fp,0(sp)
  817084:	dec00204 	addi	sp,sp,8
  817088:	f800283a 	ret

0081708c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  81708c:	defffd04 	addi	sp,sp,-12
  817090:	dfc00215 	stw	ra,8(sp)
  817094:	df000115 	stw	fp,4(sp)
  817098:	df000104 	addi	fp,sp,4
  81709c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  8170a0:	d0a07117 	ldw	r2,-32316(gp)
  8170a4:	1005003a 	cmpeq	r2,r2,zero
  8170a8:	10000a1e 	bne	r2,zero,8170d4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8170ac:	d0a07117 	ldw	r2,-32316(gp)
  8170b0:	10bfffc4 	addi	r2,r2,-1
  8170b4:	d0a07115 	stw	r2,-32316(gp)
  8170b8:	d0a07117 	ldw	r2,-32316(gp)
  8170bc:	1004c03a 	cmpne	r2,r2,zero
  8170c0:	1000041e 	bne	r2,zero,8170d4 <__env_unlock+0x48>
  {
    lockid = -1;
  8170c4:	00bfffc4 	movi	r2,-1
  8170c8:	d0a01715 	stw	r2,-32676(gp)
    OSSemPost( alt_envsem );
  8170cc:	d1207217 	ldw	r4,-32312(gp)
  8170d0:	081dee40 	call	81dee4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8170d4:	e037883a 	mov	sp,fp
  8170d8:	dfc00117 	ldw	ra,4(sp)
  8170dc:	df000017 	ldw	fp,0(sp)
  8170e0:	dec00204 	addi	sp,sp,8
  8170e4:	f800283a 	ret

008170e8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  8170e8:	deffdb04 	addi	sp,sp,-148
  8170ec:	dfc02415 	stw	ra,144(sp)
  8170f0:	df002315 	stw	fp,140(sp)
  8170f4:	df002304 	addi	fp,sp,140
  8170f8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8170fc:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  817100:	00802174 	movhi	r2,133
  817104:	1082eb44 	addi	r2,r2,2989
  817108:	10800003 	ldbu	r2,0(r2)
  81710c:	10803fcc 	andi	r2,r2,255
  817110:	10800058 	cmpnei	r2,r2,1
  817114:	1000311e 	bne	r2,zero,8171dc <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  817118:	e17fe204 	addi	r5,fp,-120
  81711c:	01003fc4 	movi	r4,255
  817120:	081fac00 	call	81fac0 <OSTaskQuery>
  817124:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  817128:	e0bffe83 	ldbu	r2,-6(fp)
  81712c:	10803fcc 	andi	r2,r2,255
  817130:	1004c03a 	cmpne	r2,r2,zero
  817134:	1000291e 	bne	r2,zero,8171dc <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  817138:	e0bfee83 	ldbu	r2,-70(fp)
  81713c:	10803fcc 	andi	r2,r2,255
  817140:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  817144:	d1207417 	ldw	r4,-32304(gp)
  817148:	e17ffd04 	addi	r5,fp,-12
  81714c:	081e00c0 	call	81e00c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817150:	0005303a 	rdctl	r2,status
  817154:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817158:	e0ffdf17 	ldw	r3,-132(fp)
  81715c:	00bfff84 	movi	r2,-2
  817160:	1884703a 	and	r2,r3,r2
  817164:	1001703a 	wrctl	status,r2
  
  return context;
  817168:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  81716c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  817170:	e0bffd0b 	ldhu	r2,-12(fp)
  817174:	10bfffcc 	andi	r2,r2,65535
  817178:	1004c03a 	cmpne	r2,r2,zero
  81717c:	10000b1e 	bne	r2,zero,8171ac <__malloc_lock+0xc4>
  817180:	d0e01817 	ldw	r3,-32672(gp)
  817184:	e0bfe117 	ldw	r2,-124(fp)
  817188:	10c0081e 	bne	r2,r3,8171ac <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  81718c:	d0a07317 	ldw	r2,-32308(gp)
  817190:	10800044 	addi	r2,r2,1
  817194:	d0a07315 	stw	r2,-32308(gp)
  817198:	e0bfe017 	ldw	r2,-128(fp)
  81719c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8171a0:	e0bfde17 	ldw	r2,-136(fp)
  8171a4:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  8171a8:	00000c06 	br	8171dc <__malloc_lock+0xf4>
  8171ac:	e0bfe017 	ldw	r2,-128(fp)
  8171b0:	e0bfdd15 	stw	r2,-140(fp)
  8171b4:	e0bfdd17 	ldw	r2,-140(fp)
  8171b8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  8171bc:	d1207417 	ldw	r4,-32304(gp)
  8171c0:	e1bffe84 	addi	r6,fp,-6
  8171c4:	000b883a 	mov	r5,zero
  8171c8:	081daec0 	call	81daec <OSSemPend>
    locks  = 1;
  8171cc:	00800044 	movi	r2,1
  8171d0:	d0a07315 	stw	r2,-32308(gp)
    lockid = id;
  8171d4:	e0bfe117 	ldw	r2,-124(fp)
  8171d8:	d0a01815 	stw	r2,-32672(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8171dc:	e037883a 	mov	sp,fp
  8171e0:	dfc00117 	ldw	ra,4(sp)
  8171e4:	df000017 	ldw	fp,0(sp)
  8171e8:	dec00204 	addi	sp,sp,8
  8171ec:	f800283a 	ret

008171f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8171f0:	defff804 	addi	sp,sp,-32
  8171f4:	dfc00715 	stw	ra,28(sp)
  8171f8:	df000615 	stw	fp,24(sp)
  8171fc:	df000604 	addi	fp,sp,24
  817200:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  817204:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  817208:	00802174 	movhi	r2,133
  81720c:	1082eb44 	addi	r2,r2,2989
  817210:	10800003 	ldbu	r2,0(r2)
  817214:	10803fcc 	andi	r2,r2,255
  817218:	10800058 	cmpnei	r2,r2,1
  81721c:	1000231e 	bne	r2,zero,8172ac <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817220:	0005303a 	rdctl	r2,status
  817224:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817228:	e0fffd17 	ldw	r3,-12(fp)
  81722c:	00bfff84 	movi	r2,-2
  817230:	1884703a 	and	r2,r3,r2
  817234:	1001703a 	wrctl	status,r2
  
  return context;
  817238:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  81723c:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  817240:	d0a07317 	ldw	r2,-32308(gp)
  817244:	1004c03a 	cmpne	r2,r2,zero
  817248:	1000051e 	bne	r2,zero,817260 <__malloc_unlock+0x70>
  81724c:	e0bffe17 	ldw	r2,-8(fp)
  817250:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817254:	e0bffc17 	ldw	r2,-16(fp)
  817258:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  81725c:	00001306 	br	8172ac <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  817260:	d0a07317 	ldw	r2,-32308(gp)
  817264:	10bfffc4 	addi	r2,r2,-1
  817268:	d0a07315 	stw	r2,-32308(gp)
  81726c:	d0a07317 	ldw	r2,-32308(gp)
  817270:	1004c03a 	cmpne	r2,r2,zero
  817274:	1000091e 	bne	r2,zero,81729c <__malloc_unlock+0xac>
  {
    lockid = -1;
  817278:	00bfffc4 	movi	r2,-1
  81727c:	d0a01815 	stw	r2,-32672(gp)
  817280:	e0bffe17 	ldw	r2,-8(fp)
  817284:	e0bffb15 	stw	r2,-20(fp)
  817288:	e0bffb17 	ldw	r2,-20(fp)
  81728c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  817290:	d1207417 	ldw	r4,-32304(gp)
  817294:	081dee40 	call	81dee4 <OSSemPost>
  817298:	00000406 	br	8172ac <__malloc_unlock+0xbc>
  81729c:	e0bffe17 	ldw	r2,-8(fp)
  8172a0:	e0bffa15 	stw	r2,-24(fp)
  8172a4:	e0bffa17 	ldw	r2,-24(fp)
  8172a8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8172ac:	e037883a 	mov	sp,fp
  8172b0:	dfc00117 	ldw	ra,4(sp)
  8172b4:	df000017 	ldw	fp,0(sp)
  8172b8:	dec00204 	addi	sp,sp,8
  8172bc:	f800283a 	ret

008172c0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8172c0:	defff604 	addi	sp,sp,-40
  8172c4:	dfc00915 	stw	ra,36(sp)
  8172c8:	df000815 	stw	fp,32(sp)
  8172cc:	df000804 	addi	fp,sp,32
  8172d0:	e13ffc15 	stw	r4,-16(fp)
  8172d4:	e17ffd15 	stw	r5,-12(fp)
  8172d8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8172dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8172e0:	e0bffe17 	ldw	r2,-8(fp)
  8172e4:	1004c03a 	cmpne	r2,r2,zero
  8172e8:	1000021e 	bne	r2,zero,8172f4 <OSEventNameGet+0x34>
        return (0);
  8172ec:	e03fff15 	stw	zero,-4(fp)
  8172f0:	00003906 	br	8173d8 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  8172f4:	e0bffc17 	ldw	r2,-16(fp)
  8172f8:	1004c03a 	cmpne	r2,r2,zero
  8172fc:	1000051e 	bne	r2,zero,817314 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  817300:	e0fffe17 	ldw	r3,-8(fp)
  817304:	00800104 	movi	r2,4
  817308:	18800005 	stb	r2,0(r3)
        return (0);
  81730c:	e03fff15 	stw	zero,-4(fp)
  817310:	00003106 	br	8173d8 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  817314:	e0bffd17 	ldw	r2,-12(fp)
  817318:	1004c03a 	cmpne	r2,r2,zero
  81731c:	1000051e 	bne	r2,zero,817334 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  817320:	e0fffe17 	ldw	r3,-8(fp)
  817324:	00800304 	movi	r2,12
  817328:	18800005 	stb	r2,0(r3)
        return (0);
  81732c:	e03fff15 	stw	zero,-4(fp)
  817330:	00002906 	br	8173d8 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  817334:	d0a08303 	ldbu	r2,-32244(gp)
  817338:	10803fcc 	andi	r2,r2,255
  81733c:	1005003a 	cmpeq	r2,r2,zero
  817340:	1000051e 	bne	r2,zero,817358 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  817344:	e0fffe17 	ldw	r3,-8(fp)
  817348:	00800444 	movi	r2,17
  81734c:	18800005 	stb	r2,0(r3)
        return (0);
  817350:	e03fff15 	stw	zero,-4(fp)
  817354:	00002006 	br	8173d8 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  817358:	e0bffc17 	ldw	r2,-16(fp)
  81735c:	10800003 	ldbu	r2,0(r2)
  817360:	10803fcc 	andi	r2,r2,255
  817364:	10bfffc4 	addi	r2,r2,-1
  817368:	10800128 	cmpgeui	r2,r2,4
  81736c:	1000161e 	bne	r2,zero,8173c8 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817370:	0005303a 	rdctl	r2,status
  817374:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817378:	e0fff917 	ldw	r3,-28(fp)
  81737c:	00bfff84 	movi	r2,-2
  817380:	1884703a 	and	r2,r3,r2
  817384:	1001703a 	wrctl	status,r2
  
  return context;
  817388:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  81738c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  817390:	e0bffc17 	ldw	r2,-16(fp)
  817394:	11400384 	addi	r5,r2,14
  817398:	e13ffd17 	ldw	r4,-12(fp)
  81739c:	0818e440 	call	818e44 <OS_StrCopy>
  8173a0:	e0bffb05 	stb	r2,-20(fp)
  8173a4:	e0bffa17 	ldw	r2,-24(fp)
  8173a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8173ac:	e0bff817 	ldw	r2,-32(fp)
  8173b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8173b4:	e0bffe17 	ldw	r2,-8(fp)
  8173b8:	10000005 	stb	zero,0(r2)
    return (len);
  8173bc:	e0bffb03 	ldbu	r2,-20(fp)
  8173c0:	e0bfff15 	stw	r2,-4(fp)
  8173c4:	00000406 	br	8173d8 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8173c8:	e0fffe17 	ldw	r3,-8(fp)
  8173cc:	00800044 	movi	r2,1
  8173d0:	18800005 	stb	r2,0(r3)
             return (0);
  8173d4:	e03fff15 	stw	zero,-4(fp)
  8173d8:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  8173dc:	e037883a 	mov	sp,fp
  8173e0:	dfc00117 	ldw	ra,4(sp)
  8173e4:	df000017 	ldw	fp,0(sp)
  8173e8:	dec00204 	addi	sp,sp,8
  8173ec:	f800283a 	ret

008173f0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8173f0:	defff604 	addi	sp,sp,-40
  8173f4:	dfc00915 	stw	ra,36(sp)
  8173f8:	df000815 	stw	fp,32(sp)
  8173fc:	df000804 	addi	fp,sp,32
  817400:	e13ffd15 	stw	r4,-12(fp)
  817404:	e17ffe15 	stw	r5,-8(fp)
  817408:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81740c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  817410:	e0bfff17 	ldw	r2,-4(fp)
  817414:	1005003a 	cmpeq	r2,r2,zero
  817418:	1000411e 	bne	r2,zero,817520 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  81741c:	e0bffd17 	ldw	r2,-12(fp)
  817420:	1004c03a 	cmpne	r2,r2,zero
  817424:	1000041e 	bne	r2,zero,817438 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  817428:	e0ffff17 	ldw	r3,-4(fp)
  81742c:	00800104 	movi	r2,4
  817430:	18800005 	stb	r2,0(r3)
        return;
  817434:	00003a06 	br	817520 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  817438:	e0bffe17 	ldw	r2,-8(fp)
  81743c:	1004c03a 	cmpne	r2,r2,zero
  817440:	1000041e 	bne	r2,zero,817454 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  817444:	e0ffff17 	ldw	r3,-4(fp)
  817448:	00800304 	movi	r2,12
  81744c:	18800005 	stb	r2,0(r3)
        return;
  817450:	00003306 	br	817520 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  817454:	d0a08303 	ldbu	r2,-32244(gp)
  817458:	10803fcc 	andi	r2,r2,255
  81745c:	1005003a 	cmpeq	r2,r2,zero
  817460:	1000041e 	bne	r2,zero,817474 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  817464:	e0ffff17 	ldw	r3,-4(fp)
  817468:	00800484 	movi	r2,18
  81746c:	18800005 	stb	r2,0(r3)
        return;
  817470:	00002b06 	br	817520 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  817474:	e0bffd17 	ldw	r2,-12(fp)
  817478:	10800003 	ldbu	r2,0(r2)
  81747c:	10803fcc 	andi	r2,r2,255
  817480:	10bfffc4 	addi	r2,r2,-1
  817484:	10800128 	cmpgeui	r2,r2,4
  817488:	10000f1e 	bne	r2,zero,8174c8 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81748c:	0005303a 	rdctl	r2,status
  817490:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817494:	e0fffa17 	ldw	r3,-24(fp)
  817498:	00bfff84 	movi	r2,-2
  81749c:	1884703a 	and	r2,r3,r2
  8174a0:	1001703a 	wrctl	status,r2
  
  return context;
  8174a4:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  8174a8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  8174ac:	e13ffe17 	ldw	r4,-8(fp)
  8174b0:	0818ec40 	call	818ec4 <OS_StrLen>
  8174b4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  8174b8:	e0bffc03 	ldbu	r2,-16(fp)
  8174bc:	10800828 	cmpgeui	r2,r2,32
  8174c0:	1000051e 	bne	r2,zero,8174d8 <OSEventNameSet+0xe8>
  8174c4:	00000c06 	br	8174f8 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8174c8:	e0ffff17 	ldw	r3,-4(fp)
  8174cc:	00800044 	movi	r2,1
  8174d0:	18800005 	stb	r2,0(r3)
             return;
  8174d4:	00001206 	br	817520 <OSEventNameSet+0x130>
  8174d8:	e0bffb17 	ldw	r2,-20(fp)
  8174dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8174e0:	e0bff917 	ldw	r2,-28(fp)
  8174e4:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  8174e8:	e0ffff17 	ldw	r3,-4(fp)
  8174ec:	008002c4 	movi	r2,11
  8174f0:	18800005 	stb	r2,0(r3)
        return;
  8174f4:	00000a06 	br	817520 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  8174f8:	e0bffd17 	ldw	r2,-12(fp)
  8174fc:	11000384 	addi	r4,r2,14
  817500:	e17ffe17 	ldw	r5,-8(fp)
  817504:	0818e440 	call	818e44 <OS_StrCopy>
  817508:	e0bffb17 	ldw	r2,-20(fp)
  81750c:	e0bff815 	stw	r2,-32(fp)
  817510:	e0bff817 	ldw	r2,-32(fp)
  817514:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  817518:	e0bfff17 	ldw	r2,-4(fp)
  81751c:	10000005 	stb	zero,0(r2)
}
  817520:	e037883a 	mov	sp,fp
  817524:	dfc00117 	ldw	ra,4(sp)
  817528:	df000017 	ldw	fp,0(sp)
  81752c:	dec00204 	addi	sp,sp,8
  817530:	f800283a 	ret

00817534 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  817534:	deffe704 	addi	sp,sp,-100
  817538:	dfc01815 	stw	ra,96(sp)
  81753c:	df001715 	stw	fp,92(sp)
  817540:	df001704 	addi	fp,sp,92
  817544:	e13ff615 	stw	r4,-40(fp)
  817548:	e17ff715 	stw	r5,-36(fp)
  81754c:	e1bff815 	stw	r6,-32(fp)
  817550:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  817554:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  817558:	e0800217 	ldw	r2,8(fp)
  81755c:	1004c03a 	cmpne	r2,r2,zero
  817560:	1000021e 	bne	r2,zero,81756c <OSEventPendMulti+0x38>
        return (0);
  817564:	e03fff15 	stw	zero,-4(fp)
  817568:	00019906 	br	817bd0 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  81756c:	e0bff617 	ldw	r2,-40(fp)
  817570:	1004c03a 	cmpne	r2,r2,zero
  817574:	1000051e 	bne	r2,zero,81758c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  817578:	e0c00217 	ldw	r3,8(fp)
  81757c:	00800104 	movi	r2,4
  817580:	18800005 	stb	r2,0(r3)
        return (0);
  817584:	e03fff15 	stw	zero,-4(fp)
  817588:	00019106 	br	817bd0 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  81758c:	e0bff717 	ldw	r2,-36(fp)
  817590:	1004c03a 	cmpne	r2,r2,zero
  817594:	1000051e 	bne	r2,zero,8175ac <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  817598:	e0c00217 	ldw	r3,8(fp)
  81759c:	00800104 	movi	r2,4
  8175a0:	18800005 	stb	r2,0(r3)
        return (0);
  8175a4:	e03fff15 	stw	zero,-4(fp)
  8175a8:	00018906 	br	817bd0 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  8175ac:	e0bff817 	ldw	r2,-32(fp)
  8175b0:	1004c03a 	cmpne	r2,r2,zero
  8175b4:	1000051e 	bne	r2,zero,8175cc <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  8175b8:	e0c00217 	ldw	r3,8(fp)
  8175bc:	00800104 	movi	r2,4
  8175c0:	18800005 	stb	r2,0(r3)
        return (0);
  8175c4:	e03fff15 	stw	zero,-4(fp)
  8175c8:	00018106 	br	817bd0 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  8175cc:	e0bff717 	ldw	r2,-36(fp)
  8175d0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  8175d4:	e0bff617 	ldw	r2,-40(fp)
  8175d8:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  8175dc:	e0bff517 	ldw	r2,-44(fp)
  8175e0:	10800017 	ldw	r2,0(r2)
  8175e4:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  8175e8:	00001806 	br	81764c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  8175ec:	e0bff417 	ldw	r2,-48(fp)
  8175f0:	10800003 	ldbu	r2,0(r2)
  8175f4:	10803fcc 	andi	r2,r2,255
  8175f8:	e0bffe15 	stw	r2,-8(fp)
  8175fc:	e0fffe17 	ldw	r3,-8(fp)
  817600:	188000a0 	cmpeqi	r2,r3,2
  817604:	10000b1e 	bne	r2,zero,817634 <OSEventPendMulti+0x100>
  817608:	e0fffe17 	ldw	r3,-8(fp)
  81760c:	188000e0 	cmpeqi	r2,r3,3
  817610:	1000081e 	bne	r2,zero,817634 <OSEventPendMulti+0x100>
  817614:	e0fffe17 	ldw	r3,-8(fp)
  817618:	18800060 	cmpeqi	r2,r3,1
  81761c:	1000051e 	bne	r2,zero,817634 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  817620:	e0c00217 	ldw	r3,8(fp)
  817624:	00800044 	movi	r2,1
  817628:	18800005 	stb	r2,0(r3)
                 return (0);
  81762c:	e03fff15 	stw	zero,-4(fp)
  817630:	00016706 	br	817bd0 <OSEventPendMulti+0x69c>
        }
        pevents++;
  817634:	e0bff517 	ldw	r2,-44(fp)
  817638:	10800104 	addi	r2,r2,4
  81763c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  817640:	e0bff517 	ldw	r2,-44(fp)
  817644:	10800017 	ldw	r2,0(r2)
  817648:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  81764c:	e0bff417 	ldw	r2,-48(fp)
  817650:	1004c03a 	cmpne	r2,r2,zero
  817654:	103fe51e 	bne	r2,zero,8175ec <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  817658:	d0a08303 	ldbu	r2,-32244(gp)
  81765c:	10803fcc 	andi	r2,r2,255
  817660:	1005003a 	cmpeq	r2,r2,zero
  817664:	1000051e 	bne	r2,zero,81767c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  817668:	e0c00217 	ldw	r3,8(fp)
  81766c:	00800084 	movi	r2,2
  817670:	18800005 	stb	r2,0(r3)
        return (0);
  817674:	e03fff15 	stw	zero,-4(fp)
  817678:	00015506 	br	817bd0 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  81767c:	d0a07503 	ldbu	r2,-32300(gp)
  817680:	10803fcc 	andi	r2,r2,255
  817684:	1005003a 	cmpeq	r2,r2,zero
  817688:	1000051e 	bne	r2,zero,8176a0 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  81768c:	e0c00217 	ldw	r3,8(fp)
  817690:	00800344 	movi	r2,13
  817694:	18800005 	stb	r2,0(r3)
        return (0);
  817698:	e03fff15 	stw	zero,-4(fp)
  81769c:	00014c06 	br	817bd0 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8176a0:	0005303a 	rdctl	r2,status
  8176a4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8176a8:	e0ffef17 	ldw	r3,-68(fp)
  8176ac:	00bfff84 	movi	r2,-2
  8176b0:	1884703a 	and	r2,r3,r2
  8176b4:	1001703a 	wrctl	status,r2
  
  return context;
  8176b8:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  8176bc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  8176c0:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  8176c4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  8176c8:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  8176cc:	e0bff617 	ldw	r2,-40(fp)
  8176d0:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  8176d4:	e0bff517 	ldw	r2,-44(fp)
  8176d8:	10800017 	ldw	r2,0(r2)
  8176dc:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8176e0:	00008f06 	br	817920 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  8176e4:	e0bff417 	ldw	r2,-48(fp)
  8176e8:	10800003 	ldbu	r2,0(r2)
  8176ec:	10803fcc 	andi	r2,r2,255
  8176f0:	e0bffd15 	stw	r2,-12(fp)
  8176f4:	e0fffd17 	ldw	r3,-12(fp)
  8176f8:	188000a0 	cmpeqi	r2,r3,2
  8176fc:	1000441e 	bne	r2,zero,817810 <OSEventPendMulti+0x2dc>
  817700:	e0fffd17 	ldw	r3,-12(fp)
  817704:	188000e0 	cmpeqi	r2,r3,3
  817708:	1000041e 	bne	r2,zero,81771c <OSEventPendMulti+0x1e8>
  81770c:	e0fffd17 	ldw	r3,-12(fp)
  817710:	18800060 	cmpeqi	r2,r3,1
  817714:	1000211e 	bne	r2,zero,81779c <OSEventPendMulti+0x268>
  817718:	00006f06 	br	8178d8 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  81771c:	e0bff417 	ldw	r2,-48(fp)
  817720:	1080020b 	ldhu	r2,8(r2)
  817724:	10bfffcc 	andi	r2,r2,65535
  817728:	1005003a 	cmpeq	r2,r2,zero
  81772c:	1000171e 	bne	r2,zero,81778c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  817730:	e0bff417 	ldw	r2,-48(fp)
  817734:	1080020b 	ldhu	r2,8(r2)
  817738:	10bfffc4 	addi	r2,r2,-1
  81773c:	1007883a 	mov	r3,r2
  817740:	e0bff417 	ldw	r2,-48(fp)
  817744:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  817748:	e0fff717 	ldw	r3,-36(fp)
  81774c:	e0bff417 	ldw	r2,-48(fp)
  817750:	18800015 	stw	r2,0(r3)
  817754:	e0bff717 	ldw	r2,-36(fp)
  817758:	10800104 	addi	r2,r2,4
  81775c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  817760:	00800044 	movi	r2,1
  817764:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  817768:	e0bff817 	ldw	r2,-32(fp)
  81776c:	10000015 	stw	zero,0(r2)
  817770:	e0bff817 	ldw	r2,-32(fp)
  817774:	10800104 	addi	r2,r2,4
  817778:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  81777c:	e0bff18b 	ldhu	r2,-58(fp)
  817780:	10800044 	addi	r2,r2,1
  817784:	e0bff18d 	sth	r2,-58(fp)
  817788:	00005f06 	br	817908 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  81778c:	e0bff103 	ldbu	r2,-60(fp)
  817790:	10800054 	ori	r2,r2,1
  817794:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  817798:	00005b06 	br	817908 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  81779c:	e0bff417 	ldw	r2,-48(fp)
  8177a0:	10800117 	ldw	r2,4(r2)
  8177a4:	1005003a 	cmpeq	r2,r2,zero
  8177a8:	1000151e 	bne	r2,zero,817800 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  8177ac:	e0bff417 	ldw	r2,-48(fp)
  8177b0:	10c00117 	ldw	r3,4(r2)
  8177b4:	e0bff817 	ldw	r2,-32(fp)
  8177b8:	10c00015 	stw	r3,0(r2)
  8177bc:	e0bff817 	ldw	r2,-32(fp)
  8177c0:	10800104 	addi	r2,r2,4
  8177c4:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  8177c8:	e0bff417 	ldw	r2,-48(fp)
  8177cc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  8177d0:	e0fff717 	ldw	r3,-36(fp)
  8177d4:	e0bff417 	ldw	r2,-48(fp)
  8177d8:	18800015 	stw	r2,0(r3)
  8177dc:	e0bff717 	ldw	r2,-36(fp)
  8177e0:	10800104 	addi	r2,r2,4
  8177e4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  8177e8:	00800044 	movi	r2,1
  8177ec:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  8177f0:	e0bff18b 	ldhu	r2,-58(fp)
  8177f4:	10800044 	addi	r2,r2,1
  8177f8:	e0bff18d 	sth	r2,-58(fp)
  8177fc:	00004206 	br	817908 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  817800:	e0bff103 	ldbu	r2,-60(fp)
  817804:	10800094 	ori	r2,r2,2
  817808:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  81780c:	00003e06 	br	817908 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  817810:	e0bff417 	ldw	r2,-48(fp)
  817814:	10800117 	ldw	r2,4(r2)
  817818:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  81781c:	e0bff317 	ldw	r2,-52(fp)
  817820:	1080058b 	ldhu	r2,22(r2)
  817824:	10bfffcc 	andi	r2,r2,65535
  817828:	1005003a 	cmpeq	r2,r2,zero
  81782c:	1000261e 	bne	r2,zero,8178c8 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  817830:	e0bff317 	ldw	r2,-52(fp)
  817834:	11000417 	ldw	r4,16(r2)
  817838:	20c00017 	ldw	r3,0(r4)
  81783c:	e0bff817 	ldw	r2,-32(fp)
  817840:	10c00015 	stw	r3,0(r2)
  817844:	e0bff817 	ldw	r2,-32(fp)
  817848:	10800104 	addi	r2,r2,4
  81784c:	e0bff815 	stw	r2,-32(fp)
  817850:	20c00104 	addi	r3,r4,4
  817854:	e0bff317 	ldw	r2,-52(fp)
  817858:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  81785c:	e0bff317 	ldw	r2,-52(fp)
  817860:	10c00417 	ldw	r3,16(r2)
  817864:	e0bff317 	ldw	r2,-52(fp)
  817868:	10800217 	ldw	r2,8(r2)
  81786c:	1880041e 	bne	r3,r2,817880 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  817870:	e0bff317 	ldw	r2,-52(fp)
  817874:	10c00117 	ldw	r3,4(r2)
  817878:	e0bff317 	ldw	r2,-52(fp)
  81787c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  817880:	e0bff317 	ldw	r2,-52(fp)
  817884:	1080058b 	ldhu	r2,22(r2)
  817888:	10bfffc4 	addi	r2,r2,-1
  81788c:	1007883a 	mov	r3,r2
  817890:	e0bff317 	ldw	r2,-52(fp)
  817894:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  817898:	e0fff717 	ldw	r3,-36(fp)
  81789c:	e0bff417 	ldw	r2,-48(fp)
  8178a0:	18800015 	stw	r2,0(r3)
  8178a4:	e0bff717 	ldw	r2,-36(fp)
  8178a8:	10800104 	addi	r2,r2,4
  8178ac:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  8178b0:	00800044 	movi	r2,1
  8178b4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  8178b8:	e0bff18b 	ldhu	r2,-58(fp)
  8178bc:	10800044 	addi	r2,r2,1
  8178c0:	e0bff18d 	sth	r2,-58(fp)
  8178c4:	00001006 	br	817908 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  8178c8:	e0bff103 	ldbu	r2,-60(fp)
  8178cc:	10800114 	ori	r2,r2,4
  8178d0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8178d4:	00000c06 	br	817908 <OSEventPendMulti+0x3d4>
  8178d8:	e0bff017 	ldw	r2,-64(fp)
  8178dc:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8178e0:	e0bfee17 	ldw	r2,-72(fp)
  8178e4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  8178e8:	e0bff717 	ldw	r2,-36(fp)
  8178ec:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  8178f0:	e0c00217 	ldw	r3,8(fp)
  8178f4:	00800044 	movi	r2,1
  8178f8:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  8178fc:	e0bff18b 	ldhu	r2,-58(fp)
  817900:	e0bfff15 	stw	r2,-4(fp)
  817904:	0000b206 	br	817bd0 <OSEventPendMulti+0x69c>
        }
        pevents++;
  817908:	e0bff517 	ldw	r2,-44(fp)
  81790c:	10800104 	addi	r2,r2,4
  817910:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  817914:	e0bff517 	ldw	r2,-44(fp)
  817918:	10800017 	ldw	r2,0(r2)
  81791c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  817920:	e0bff417 	ldw	r2,-48(fp)
  817924:	1004c03a 	cmpne	r2,r2,zero
  817928:	103f6e1e 	bne	r2,zero,8176e4 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  81792c:	e0bff203 	ldbu	r2,-56(fp)
  817930:	10800058 	cmpnei	r2,r2,1
  817934:	10000b1e 	bne	r2,zero,817964 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  817938:	e0bff717 	ldw	r2,-36(fp)
  81793c:	10000015 	stw	zero,0(r2)
  817940:	e0bff017 	ldw	r2,-64(fp)
  817944:	e0bfed15 	stw	r2,-76(fp)
  817948:	e0bfed17 	ldw	r2,-76(fp)
  81794c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  817950:	e0800217 	ldw	r2,8(fp)
  817954:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  817958:	e0fff18b 	ldhu	r3,-58(fp)
  81795c:	e0ffff15 	stw	r3,-4(fp)
  817960:	00009b06 	br	817bd0 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  817964:	d1208417 	ldw	r4,-32240(gp)
  817968:	d0a08417 	ldw	r2,-32240(gp)
  81796c:	10c00c03 	ldbu	r3,48(r2)
  817970:	e0bff103 	ldbu	r2,-60(fp)
  817974:	1884b03a 	or	r2,r3,r2
  817978:	1007883a 	mov	r3,r2
  81797c:	00bfe004 	movi	r2,-128
  817980:	1884b03a 	or	r2,r3,r2
  817984:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  817988:	d0a08417 	ldw	r2,-32240(gp)
  81798c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  817990:	d0e08417 	ldw	r3,-32240(gp)
  817994:	e0bff90b 	ldhu	r2,-28(fp)
  817998:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  81799c:	e13ff617 	ldw	r4,-40(fp)
  8179a0:	08185640 	call	818564 <OS_EventTaskWaitMulti>
  8179a4:	e0bff017 	ldw	r2,-64(fp)
  8179a8:	e0bfec15 	stw	r2,-80(fp)
  8179ac:	e0bfec17 	ldw	r2,-80(fp)
  8179b0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  8179b4:	0818d000 	call	818d00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8179b8:	0005303a 	rdctl	r2,status
  8179bc:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8179c0:	e0ffeb17 	ldw	r3,-84(fp)
  8179c4:	00bfff84 	movi	r2,-2
  8179c8:	1884703a 	and	r2,r3,r2
  8179cc:	1001703a 	wrctl	status,r2
  
  return context;
  8179d0:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  8179d4:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8179d8:	d0a08417 	ldw	r2,-32240(gp)
  8179dc:	10800c43 	ldbu	r2,49(r2)
  8179e0:	10803fcc 	andi	r2,r2,255
  8179e4:	e0bffc15 	stw	r2,-16(fp)
  8179e8:	e0fffc17 	ldw	r3,-16(fp)
  8179ec:	1805003a 	cmpeq	r2,r3,zero
  8179f0:	1000041e 	bne	r2,zero,817a04 <OSEventPendMulti+0x4d0>
  8179f4:	e0fffc17 	ldw	r3,-16(fp)
  8179f8:	188000a0 	cmpeqi	r2,r3,2
  8179fc:	1000011e 	bne	r2,zero,817a04 <OSEventPendMulti+0x4d0>
  817a00:	00001906 	br	817a68 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  817a04:	d0a08417 	ldw	r2,-32240(gp)
  817a08:	10800717 	ldw	r2,28(r2)
  817a0c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  817a10:	e0bff417 	ldw	r2,-48(fp)
  817a14:	1005003a 	cmpeq	r2,r2,zero
  817a18:	10000c1e 	bne	r2,zero,817a4c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  817a1c:	e0fff717 	ldw	r3,-36(fp)
  817a20:	e0bff417 	ldw	r2,-48(fp)
  817a24:	18800015 	stw	r2,0(r3)
  817a28:	e0bff717 	ldw	r2,-36(fp)
  817a2c:	10800104 	addi	r2,r2,4
  817a30:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  817a34:	e0bff717 	ldw	r2,-36(fp)
  817a38:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  817a3c:	e0bff18b 	ldhu	r2,-58(fp)
  817a40:	10800044 	addi	r2,r2,1
  817a44:	e0bff18d 	sth	r2,-58(fp)
  817a48:	00000a06 	br	817a74 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  817a4c:	d0a08417 	ldw	r2,-32240(gp)
  817a50:	00c00044 	movi	r3,1
  817a54:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  817a58:	d1208417 	ldw	r4,-32240(gp)
  817a5c:	e17ff617 	ldw	r5,-40(fp)
  817a60:	08187700 	call	818770 <OS_EventTaskRemoveMulti>
             }
			 break;
  817a64:	00000306 	br	817a74 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  817a68:	d1208417 	ldw	r4,-32240(gp)
  817a6c:	e17ff617 	ldw	r5,-40(fp)
  817a70:	08187700 	call	818770 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  817a74:	d0a08417 	ldw	r2,-32240(gp)
  817a78:	10800c43 	ldbu	r2,49(r2)
  817a7c:	10803fcc 	andi	r2,r2,255
  817a80:	e0bffb15 	stw	r2,-20(fp)
  817a84:	e0fffb17 	ldw	r3,-20(fp)
  817a88:	1805003a 	cmpeq	r2,r3,zero
  817a8c:	1000041e 	bne	r2,zero,817aa0 <OSEventPendMulti+0x56c>
  817a90:	e0fffb17 	ldw	r3,-20(fp)
  817a94:	188000a0 	cmpeqi	r2,r3,2
  817a98:	10002c1e 	bne	r2,zero,817b4c <OSEventPendMulti+0x618>
  817a9c:	00003406 	br	817b70 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  817aa0:	e0bff417 	ldw	r2,-48(fp)
  817aa4:	10800003 	ldbu	r2,0(r2)
  817aa8:	10803fcc 	andi	r2,r2,255
  817aac:	e0bffa15 	stw	r2,-24(fp)
  817ab0:	e0fffa17 	ldw	r3,-24(fp)
  817ab4:	18800050 	cmplti	r2,r3,1
  817ab8:	1000151e 	bne	r2,zero,817b10 <OSEventPendMulti+0x5dc>
  817abc:	e0fffa17 	ldw	r3,-24(fp)
  817ac0:	188000d0 	cmplti	r2,r3,3
  817ac4:	10000a1e 	bne	r2,zero,817af0 <OSEventPendMulti+0x5bc>
  817ac8:	e0fffa17 	ldw	r3,-24(fp)
  817acc:	188000e0 	cmpeqi	r2,r3,3
  817ad0:	1000011e 	bne	r2,zero,817ad8 <OSEventPendMulti+0x5a4>
  817ad4:	00000e06 	br	817b10 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  817ad8:	e0bff817 	ldw	r2,-32(fp)
  817adc:	10000015 	stw	zero,0(r2)
  817ae0:	e0bff817 	ldw	r2,-32(fp)
  817ae4:	10800104 	addi	r2,r2,4
  817ae8:	e0bff815 	stw	r2,-32(fp)
                      break;
  817aec:	00001406 	br	817b40 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  817af0:	d0a08417 	ldw	r2,-32240(gp)
  817af4:	10c00917 	ldw	r3,36(r2)
  817af8:	e0bff817 	ldw	r2,-32(fp)
  817afc:	10c00015 	stw	r3,0(r2)
  817b00:	e0bff817 	ldw	r2,-32(fp)
  817b04:	10800104 	addi	r2,r2,4
  817b08:	e0bff815 	stw	r2,-32(fp)
                      break;
  817b0c:	00000c06 	br	817b40 <OSEventPendMulti+0x60c>
  817b10:	e0bff017 	ldw	r2,-64(fp)
  817b14:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817b18:	e0bfea17 	ldw	r2,-88(fp)
  817b1c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  817b20:	e0bff717 	ldw	r2,-36(fp)
  817b24:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  817b28:	e0c00217 	ldw	r3,8(fp)
  817b2c:	00800044 	movi	r2,1
  817b30:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  817b34:	e0bff18b 	ldhu	r2,-58(fp)
  817b38:	e0bfff15 	stw	r2,-4(fp)
  817b3c:	00002406 	br	817bd0 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  817b40:	e0800217 	ldw	r2,8(fp)
  817b44:	10000005 	stb	zero,0(r2)
             break;
  817b48:	00001106 	br	817b90 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  817b4c:	e0bff817 	ldw	r2,-32(fp)
  817b50:	10000015 	stw	zero,0(r2)
  817b54:	e0bff817 	ldw	r2,-32(fp)
  817b58:	10800104 	addi	r2,r2,4
  817b5c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  817b60:	e0c00217 	ldw	r3,8(fp)
  817b64:	00800384 	movi	r2,14
  817b68:	18800005 	stb	r2,0(r3)
             break;
  817b6c:	00000806 	br	817b90 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  817b70:	e0bff817 	ldw	r2,-32(fp)
  817b74:	10000015 	stw	zero,0(r2)
  817b78:	e0bff817 	ldw	r2,-32(fp)
  817b7c:	10800104 	addi	r2,r2,4
  817b80:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  817b84:	e0c00217 	ldw	r3,8(fp)
  817b88:	00800284 	movi	r2,10
  817b8c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  817b90:	d0a08417 	ldw	r2,-32240(gp)
  817b94:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  817b98:	d0a08417 	ldw	r2,-32240(gp)
  817b9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  817ba0:	d0a08417 	ldw	r2,-32240(gp)
  817ba4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  817ba8:	d0a08417 	ldw	r2,-32240(gp)
  817bac:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  817bb0:	d0a08417 	ldw	r2,-32240(gp)
  817bb4:	10000915 	stw	zero,36(r2)
  817bb8:	e0bff017 	ldw	r2,-64(fp)
  817bbc:	e0bfe915 	stw	r2,-92(fp)
  817bc0:	e0bfe917 	ldw	r2,-92(fp)
  817bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  817bc8:	e0fff18b 	ldhu	r3,-58(fp)
  817bcc:	e0ffff15 	stw	r3,-4(fp)
  817bd0:	e0bfff17 	ldw	r2,-4(fp)
}
  817bd4:	e037883a 	mov	sp,fp
  817bd8:	dfc00117 	ldw	ra,4(sp)
  817bdc:	df000017 	ldw	fp,0(sp)
  817be0:	dec00204 	addi	sp,sp,8
  817be4:	f800283a 	ret

00817be8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  817be8:	defffe04 	addi	sp,sp,-8
  817bec:	dfc00115 	stw	ra,4(sp)
  817bf0:	df000015 	stw	fp,0(sp)
  817bf4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  817bf8:	083b1180 	call	83b118 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  817bfc:	08189b80 	call	8189b8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  817c00:	08189fc0 	call	8189fc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  817c04:	0818b600 	call	818b60 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  817c08:	08188dc0 	call	8188dc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  817c0c:	081ac100 	call	81ac10 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  817c10:	081c2740 	call	81c274 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  817c14:	081d5cc0 	call	81d5cc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  817c18:	0818a680 	call	818a68 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  817c1c:	0818ae40 	call	818ae4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  817c20:	083b1340 	call	83b134 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  817c24:	08193e80 	call	8193e8 <OSDebugInit>
#endif
}
  817c28:	e037883a 	mov	sp,fp
  817c2c:	dfc00117 	ldw	ra,4(sp)
  817c30:	df000017 	ldw	fp,0(sp)
  817c34:	dec00204 	addi	sp,sp,8
  817c38:	f800283a 	ret

00817c3c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  817c3c:	defffc04 	addi	sp,sp,-16
  817c40:	df000315 	stw	fp,12(sp)
  817c44:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  817c48:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  817c4c:	d0a07543 	ldbu	r2,-32299(gp)
  817c50:	10803fcc 	andi	r2,r2,255
  817c54:	10800058 	cmpnei	r2,r2,1
  817c58:	1000131e 	bne	r2,zero,817ca8 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817c5c:	0005303a 	rdctl	r2,status
  817c60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817c64:	e0fffe17 	ldw	r3,-8(fp)
  817c68:	00bfff84 	movi	r2,-2
  817c6c:	1884703a 	and	r2,r3,r2
  817c70:	1001703a 	wrctl	status,r2
  
  return context;
  817c74:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  817c78:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  817c7c:	d0a08303 	ldbu	r2,-32244(gp)
  817c80:	10803fcc 	andi	r2,r2,255
  817c84:	10803fe0 	cmpeqi	r2,r2,255
  817c88:	1000031e 	bne	r2,zero,817c98 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  817c8c:	d0a08303 	ldbu	r2,-32244(gp)
  817c90:	10800044 	addi	r2,r2,1
  817c94:	d0a08305 	stb	r2,-32244(gp)
  817c98:	e0bfff17 	ldw	r2,-4(fp)
  817c9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817ca0:	e0bffd17 	ldw	r2,-12(fp)
  817ca4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  817ca8:	e037883a 	mov	sp,fp
  817cac:	df000017 	ldw	fp,0(sp)
  817cb0:	dec00104 	addi	sp,sp,4
  817cb4:	f800283a 	ret

00817cb8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  817cb8:	defffb04 	addi	sp,sp,-20
  817cbc:	dfc00415 	stw	ra,16(sp)
  817cc0:	df000315 	stw	fp,12(sp)
  817cc4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  817cc8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  817ccc:	d0a07543 	ldbu	r2,-32299(gp)
  817cd0:	10803fcc 	andi	r2,r2,255
  817cd4:	10800058 	cmpnei	r2,r2,1
  817cd8:	1000321e 	bne	r2,zero,817da4 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817cdc:	0005303a 	rdctl	r2,status
  817ce0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817ce4:	e0fffe17 	ldw	r3,-8(fp)
  817ce8:	00bfff84 	movi	r2,-2
  817cec:	1884703a 	and	r2,r3,r2
  817cf0:	1001703a 	wrctl	status,r2
  
  return context;
  817cf4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  817cf8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  817cfc:	d0a08303 	ldbu	r2,-32244(gp)
  817d00:	10803fcc 	andi	r2,r2,255
  817d04:	1005003a 	cmpeq	r2,r2,zero
  817d08:	1000031e 	bne	r2,zero,817d18 <OSIntExit+0x60>
            OSIntNesting--;
  817d0c:	d0a08303 	ldbu	r2,-32244(gp)
  817d10:	10bfffc4 	addi	r2,r2,-1
  817d14:	d0a08305 	stb	r2,-32244(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  817d18:	d0a08303 	ldbu	r2,-32244(gp)
  817d1c:	10803fcc 	andi	r2,r2,255
  817d20:	1004c03a 	cmpne	r2,r2,zero
  817d24:	10001b1e 	bne	r2,zero,817d94 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  817d28:	d0a07503 	ldbu	r2,-32300(gp)
  817d2c:	10803fcc 	andi	r2,r2,255
  817d30:	1004c03a 	cmpne	r2,r2,zero
  817d34:	1000171e 	bne	r2,zero,817d94 <OSIntExit+0xdc>
                OS_SchedNew();
  817d38:	0818dd40 	call	818dd4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  817d3c:	d0a07703 	ldbu	r2,-32292(gp)
  817d40:	d0e07743 	ldbu	r3,-32291(gp)
  817d44:	11003fcc 	andi	r4,r2,255
  817d48:	18803fcc 	andi	r2,r3,255
  817d4c:	20801126 	beq	r4,r2,817d94 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  817d50:	d0a07703 	ldbu	r2,-32292(gp)
  817d54:	10803fcc 	andi	r2,r2,255
  817d58:	00c03934 	movhi	r3,228
  817d5c:	18e6c204 	addi	r3,r3,-25848
  817d60:	1085883a 	add	r2,r2,r2
  817d64:	1085883a 	add	r2,r2,r2
  817d68:	10c5883a 	add	r2,r2,r3
  817d6c:	10800017 	ldw	r2,0(r2)
  817d70:	d0a07f15 	stw	r2,-32260(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  817d74:	d0e07f17 	ldw	r3,-32260(gp)
  817d78:	18800e17 	ldw	r2,56(r3)
  817d7c:	10800044 	addi	r2,r2,1
  817d80:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  817d84:	d0a07a17 	ldw	r2,-32280(gp)
  817d88:	10800044 	addi	r2,r2,1
  817d8c:	d0a07a15 	stw	r2,-32280(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  817d90:	083ac980 	call	83ac98 <OSCtxSw>
  817d94:	e0bfff17 	ldw	r2,-4(fp)
  817d98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817d9c:	e0bffd17 	ldw	r2,-12(fp)
  817da0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  817da4:	e037883a 	mov	sp,fp
  817da8:	dfc00117 	ldw	ra,4(sp)
  817dac:	df000017 	ldw	fp,0(sp)
  817db0:	dec00204 	addi	sp,sp,8
  817db4:	f800283a 	ret

00817db8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  817db8:	defffc04 	addi	sp,sp,-16
  817dbc:	df000315 	stw	fp,12(sp)
  817dc0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  817dc4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  817dc8:	d0a07543 	ldbu	r2,-32299(gp)
  817dcc:	10803fcc 	andi	r2,r2,255
  817dd0:	10800058 	cmpnei	r2,r2,1
  817dd4:	1000171e 	bne	r2,zero,817e34 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817dd8:	0005303a 	rdctl	r2,status
  817ddc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817de0:	e0fffe17 	ldw	r3,-8(fp)
  817de4:	00bfff84 	movi	r2,-2
  817de8:	1884703a 	and	r2,r3,r2
  817dec:	1001703a 	wrctl	status,r2
  
  return context;
  817df0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  817df4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  817df8:	d0a08303 	ldbu	r2,-32244(gp)
  817dfc:	10803fcc 	andi	r2,r2,255
  817e00:	1004c03a 	cmpne	r2,r2,zero
  817e04:	1000071e 	bne	r2,zero,817e24 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  817e08:	d0a07503 	ldbu	r2,-32300(gp)
  817e0c:	10803fcc 	andi	r2,r2,255
  817e10:	10803fe0 	cmpeqi	r2,r2,255
  817e14:	1000031e 	bne	r2,zero,817e24 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  817e18:	d0a07503 	ldbu	r2,-32300(gp)
  817e1c:	10800044 	addi	r2,r2,1
  817e20:	d0a07505 	stb	r2,-32300(gp)
  817e24:	e0bfff17 	ldw	r2,-4(fp)
  817e28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817e2c:	e0bffd17 	ldw	r2,-12(fp)
  817e30:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  817e34:	e037883a 	mov	sp,fp
  817e38:	df000017 	ldw	fp,0(sp)
  817e3c:	dec00104 	addi	sp,sp,4
  817e40:	f800283a 	ret

00817e44 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  817e44:	defff804 	addi	sp,sp,-32
  817e48:	dfc00715 	stw	ra,28(sp)
  817e4c:	df000615 	stw	fp,24(sp)
  817e50:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  817e54:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  817e58:	d0a07543 	ldbu	r2,-32299(gp)
  817e5c:	10803fcc 	andi	r2,r2,255
  817e60:	10800058 	cmpnei	r2,r2,1
  817e64:	10002b1e 	bne	r2,zero,817f14 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817e68:	0005303a 	rdctl	r2,status
  817e6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817e70:	e0fffe17 	ldw	r3,-8(fp)
  817e74:	00bfff84 	movi	r2,-2
  817e78:	1884703a 	and	r2,r3,r2
  817e7c:	1001703a 	wrctl	status,r2
  
  return context;
  817e80:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  817e84:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  817e88:	d0a07503 	ldbu	r2,-32300(gp)
  817e8c:	10803fcc 	andi	r2,r2,255
  817e90:	1005003a 	cmpeq	r2,r2,zero
  817e94:	10001b1e 	bne	r2,zero,817f04 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  817e98:	d0a07503 	ldbu	r2,-32300(gp)
  817e9c:	10bfffc4 	addi	r2,r2,-1
  817ea0:	d0a07505 	stb	r2,-32300(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  817ea4:	d0a07503 	ldbu	r2,-32300(gp)
  817ea8:	10803fcc 	andi	r2,r2,255
  817eac:	1004c03a 	cmpne	r2,r2,zero
  817eb0:	10000f1e 	bne	r2,zero,817ef0 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  817eb4:	d0a08303 	ldbu	r2,-32244(gp)
  817eb8:	10803fcc 	andi	r2,r2,255
  817ebc:	1004c03a 	cmpne	r2,r2,zero
  817ec0:	1000061e 	bne	r2,zero,817edc <OSSchedUnlock+0x98>
  817ec4:	e0bfff17 	ldw	r2,-4(fp)
  817ec8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817ecc:	e0bffd17 	ldw	r2,-12(fp)
  817ed0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  817ed4:	0818d000 	call	818d00 <OS_Sched>
  817ed8:	00000e06 	br	817f14 <OSSchedUnlock+0xd0>
  817edc:	e0bfff17 	ldw	r2,-4(fp)
  817ee0:	e0bffc15 	stw	r2,-16(fp)
  817ee4:	e0bffc17 	ldw	r2,-16(fp)
  817ee8:	1001703a 	wrctl	status,r2
  817eec:	00000906 	br	817f14 <OSSchedUnlock+0xd0>
  817ef0:	e0bfff17 	ldw	r2,-4(fp)
  817ef4:	e0bffb15 	stw	r2,-20(fp)
  817ef8:	e0bffb17 	ldw	r2,-20(fp)
  817efc:	1001703a 	wrctl	status,r2
  817f00:	00000406 	br	817f14 <OSSchedUnlock+0xd0>
  817f04:	e0bfff17 	ldw	r2,-4(fp)
  817f08:	e0bffa15 	stw	r2,-24(fp)
  817f0c:	e0bffa17 	ldw	r2,-24(fp)
  817f10:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  817f14:	e037883a 	mov	sp,fp
  817f18:	dfc00117 	ldw	ra,4(sp)
  817f1c:	df000017 	ldw	fp,0(sp)
  817f20:	dec00204 	addi	sp,sp,8
  817f24:	f800283a 	ret

00817f28 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  817f28:	defffe04 	addi	sp,sp,-8
  817f2c:	dfc00115 	stw	ra,4(sp)
  817f30:	df000015 	stw	fp,0(sp)
  817f34:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  817f38:	d0a07543 	ldbu	r2,-32299(gp)
  817f3c:	10803fcc 	andi	r2,r2,255
  817f40:	1004c03a 	cmpne	r2,r2,zero
  817f44:	10000f1e 	bne	r2,zero,817f84 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  817f48:	0818dd40 	call	818dd4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  817f4c:	d0a07703 	ldbu	r2,-32292(gp)
  817f50:	d0a07745 	stb	r2,-32291(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  817f54:	d0a07703 	ldbu	r2,-32292(gp)
  817f58:	10803fcc 	andi	r2,r2,255
  817f5c:	00c03934 	movhi	r3,228
  817f60:	18e6c204 	addi	r3,r3,-25848
  817f64:	1085883a 	add	r2,r2,r2
  817f68:	1085883a 	add	r2,r2,r2
  817f6c:	10c5883a 	add	r2,r2,r3
  817f70:	10800017 	ldw	r2,0(r2)
  817f74:	d0a07f15 	stw	r2,-32260(gp)
        OSTCBCur      = OSTCBHighRdy;
  817f78:	d0a07f17 	ldw	r2,-32260(gp)
  817f7c:	d0a08415 	stw	r2,-32240(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  817f80:	083ad240 	call	83ad24 <OSStartHighRdy>
    }
}
  817f84:	e037883a 	mov	sp,fp
  817f88:	dfc00117 	ldw	ra,4(sp)
  817f8c:	df000017 	ldw	fp,0(sp)
  817f90:	dec00204 	addi	sp,sp,8
  817f94:	f800283a 	ret

00817f98 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  817f98:	defff904 	addi	sp,sp,-28
  817f9c:	dfc00615 	stw	ra,24(sp)
  817fa0:	df000515 	stw	fp,20(sp)
  817fa4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  817fa8:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  817fac:	01000084 	movi	r4,2
  817fb0:	081fc800 	call	81fc80 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817fb4:	0005303a 	rdctl	r2,status
  817fb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817fbc:	e0fffe17 	ldw	r3,-8(fp)
  817fc0:	00bfff84 	movi	r2,-2
  817fc4:	1884703a 	and	r2,r3,r2
  817fc8:	1001703a 	wrctl	status,r2
  
  return context;
  817fcc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  817fd0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  817fd4:	d0207615 	stw	zero,-32296(gp)
  817fd8:	e0bfff17 	ldw	r2,-4(fp)
  817fdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817fe0:	e0bffd17 	ldw	r2,-12(fp)
  817fe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  817fe8:	01001904 	movi	r4,100
  817fec:	081fc800 	call	81fc80 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817ff0:	0005303a 	rdctl	r2,status
  817ff4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817ff8:	e0fffc17 	ldw	r3,-16(fp)
  817ffc:	00bfff84 	movi	r2,-2
  818000:	1884703a 	and	r2,r3,r2
  818004:	1001703a 	wrctl	status,r2
  
  return context;
  818008:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  81800c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  818010:	d0a07617 	ldw	r2,-32296(gp)
  818014:	d0a07b15 	stw	r2,-32276(gp)
    OSStatRdy    = OS_TRUE;
  818018:	00800044 	movi	r2,1
  81801c:	d0a08705 	stb	r2,-32228(gp)
  818020:	e0bfff17 	ldw	r2,-4(fp)
  818024:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818028:	e0bffb17 	ldw	r2,-20(fp)
  81802c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  818030:	e037883a 	mov	sp,fp
  818034:	dfc00117 	ldw	ra,4(sp)
  818038:	df000017 	ldw	fp,0(sp)
  81803c:	dec00204 	addi	sp,sp,8
  818040:	f800283a 	ret

00818044 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  818044:	defff604 	addi	sp,sp,-40
  818048:	dfc00915 	stw	ra,36(sp)
  81804c:	df000815 	stw	fp,32(sp)
  818050:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  818054:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  818058:	083b0f00 	call	83b0f0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81805c:	0005303a 	rdctl	r2,status
  818060:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818064:	e0fffb17 	ldw	r3,-20(fp)
  818068:	00bfff84 	movi	r2,-2
  81806c:	1884703a 	and	r2,r3,r2
  818070:	1001703a 	wrctl	status,r2
  
  return context;
  818074:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  818078:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  81807c:	d0a08517 	ldw	r2,-32236(gp)
  818080:	10800044 	addi	r2,r2,1
  818084:	d0a08515 	stw	r2,-32236(gp)
  818088:	e0bffc17 	ldw	r2,-16(fp)
  81808c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818090:	e0bffa17 	ldw	r2,-24(fp)
  818094:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  818098:	d0a07543 	ldbu	r2,-32299(gp)
  81809c:	10803fcc 	andi	r2,r2,255
  8180a0:	10800058 	cmpnei	r2,r2,1
  8180a4:	1000721e 	bne	r2,zero,818270 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  8180a8:	d0a07903 	ldbu	r2,-32284(gp)
  8180ac:	10803fcc 	andi	r2,r2,255
  8180b0:	e0bfff15 	stw	r2,-4(fp)
  8180b4:	e0ffff17 	ldw	r3,-4(fp)
  8180b8:	18800060 	cmpeqi	r2,r3,1
  8180bc:	10000a1e 	bne	r2,zero,8180e8 <OSTimeTick+0xa4>
  8180c0:	e0ffff17 	ldw	r3,-4(fp)
  8180c4:	188000a0 	cmpeqi	r2,r3,2
  8180c8:	1000091e 	bne	r2,zero,8180f0 <OSTimeTick+0xac>
  8180cc:	e0ffff17 	ldw	r3,-4(fp)
  8180d0:	1805003a 	cmpeq	r2,r3,zero
  8180d4:	1000011e 	bne	r2,zero,8180dc <OSTimeTick+0x98>
  8180d8:	00000a06 	br	818104 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  8180dc:	00800044 	movi	r2,1
  8180e0:	e0bffd05 	stb	r2,-12(fp)
                 break;
  8180e4:	00000a06 	br	818110 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  8180e8:	e03ffd05 	stb	zero,-12(fp)
                 break;
  8180ec:	00000806 	br	818110 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  8180f0:	00800044 	movi	r2,1
  8180f4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  8180f8:	00800044 	movi	r2,1
  8180fc:	d0a07905 	stb	r2,-32284(gp)
                 break;
  818100:	00000306 	br	818110 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  818104:	00800044 	movi	r2,1
  818108:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  81810c:	d0207905 	stb	zero,-32284(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  818110:	e0bffd03 	ldbu	r2,-12(fp)
  818114:	1005003a 	cmpeq	r2,r2,zero
  818118:	1000551e 	bne	r2,zero,818270 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  81811c:	d0a07817 	ldw	r2,-32288(gp)
  818120:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  818124:	00004d06 	br	81825c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818128:	0005303a 	rdctl	r2,status
  81812c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818130:	e0fff917 	ldw	r3,-28(fp)
  818134:	00bfff84 	movi	r2,-2
  818138:	1884703a 	and	r2,r3,r2
  81813c:	1001703a 	wrctl	status,r2
  
  return context;
  818140:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  818144:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  818148:	e0bffe17 	ldw	r2,-8(fp)
  81814c:	10800b8b 	ldhu	r2,46(r2)
  818150:	10bfffcc 	andi	r2,r2,65535
  818154:	1005003a 	cmpeq	r2,r2,zero
  818158:	1000391e 	bne	r2,zero,818240 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  81815c:	e0bffe17 	ldw	r2,-8(fp)
  818160:	10800b8b 	ldhu	r2,46(r2)
  818164:	10bfffc4 	addi	r2,r2,-1
  818168:	1007883a 	mov	r3,r2
  81816c:	e0bffe17 	ldw	r2,-8(fp)
  818170:	10c00b8d 	sth	r3,46(r2)
  818174:	e0bffe17 	ldw	r2,-8(fp)
  818178:	10800b8b 	ldhu	r2,46(r2)
  81817c:	10bfffcc 	andi	r2,r2,65535
  818180:	1004c03a 	cmpne	r2,r2,zero
  818184:	10002e1e 	bne	r2,zero,818240 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  818188:	e0bffe17 	ldw	r2,-8(fp)
  81818c:	10800c03 	ldbu	r2,48(r2)
  818190:	10803fcc 	andi	r2,r2,255
  818194:	10800dcc 	andi	r2,r2,55
  818198:	1005003a 	cmpeq	r2,r2,zero
  81819c:	10000b1e 	bne	r2,zero,8181cc <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8181a0:	e0bffe17 	ldw	r2,-8(fp)
  8181a4:	10c00c03 	ldbu	r3,48(r2)
  8181a8:	00bff204 	movi	r2,-56
  8181ac:	1884703a 	and	r2,r3,r2
  8181b0:	1007883a 	mov	r3,r2
  8181b4:	e0bffe17 	ldw	r2,-8(fp)
  8181b8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8181bc:	e0fffe17 	ldw	r3,-8(fp)
  8181c0:	00800044 	movi	r2,1
  8181c4:	18800c45 	stb	r2,49(r3)
  8181c8:	00000206 	br	8181d4 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8181cc:	e0bffe17 	ldw	r2,-8(fp)
  8181d0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  8181d4:	e0bffe17 	ldw	r2,-8(fp)
  8181d8:	10800c03 	ldbu	r2,48(r2)
  8181dc:	10803fcc 	andi	r2,r2,255
  8181e0:	1080020c 	andi	r2,r2,8
  8181e4:	1004c03a 	cmpne	r2,r2,zero
  8181e8:	1000151e 	bne	r2,zero,818240 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  8181ec:	e0bffe17 	ldw	r2,-8(fp)
  8181f0:	10c00d83 	ldbu	r3,54(r2)
  8181f4:	d0a08103 	ldbu	r2,-32252(gp)
  8181f8:	1884b03a 	or	r2,r3,r2
  8181fc:	d0a08105 	stb	r2,-32252(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  818200:	e0bffe17 	ldw	r2,-8(fp)
  818204:	10800d03 	ldbu	r2,52(r2)
  818208:	11003fcc 	andi	r4,r2,255
  81820c:	e0bffe17 	ldw	r2,-8(fp)
  818210:	10800d03 	ldbu	r2,52(r2)
  818214:	10c03fcc 	andi	r3,r2,255
  818218:	d0a08144 	addi	r2,gp,-32251
  81821c:	1885883a 	add	r2,r3,r2
  818220:	10c00003 	ldbu	r3,0(r2)
  818224:	e0bffe17 	ldw	r2,-8(fp)
  818228:	10800d43 	ldbu	r2,53(r2)
  81822c:	1884b03a 	or	r2,r3,r2
  818230:	1007883a 	mov	r3,r2
  818234:	d0a08144 	addi	r2,gp,-32251
  818238:	2085883a 	add	r2,r4,r2
  81823c:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  818240:	e0bffe17 	ldw	r2,-8(fp)
  818244:	10800517 	ldw	r2,20(r2)
  818248:	e0bffe15 	stw	r2,-8(fp)
  81824c:	e0bffc17 	ldw	r2,-16(fp)
  818250:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818254:	e0bff817 	ldw	r2,-32(fp)
  818258:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  81825c:	e0bffe17 	ldw	r2,-8(fp)
  818260:	10800c83 	ldbu	r2,50(r2)
  818264:	10803fcc 	andi	r2,r2,255
  818268:	10800518 	cmpnei	r2,r2,20
  81826c:	103fae1e 	bne	r2,zero,818128 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  818270:	e037883a 	mov	sp,fp
  818274:	dfc00117 	ldw	ra,4(sp)
  818278:	df000017 	ldw	fp,0(sp)
  81827c:	dec00204 	addi	sp,sp,8
  818280:	f800283a 	ret

00818284 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  818284:	deffff04 	addi	sp,sp,-4
  818288:	df000015 	stw	fp,0(sp)
  81828c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  818290:	00804784 	movi	r2,286
}
  818294:	e037883a 	mov	sp,fp
  818298:	df000017 	ldw	fp,0(sp)
  81829c:	dec00104 	addi	sp,sp,4
  8182a0:	f800283a 	ret

008182a4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  8182a4:	deffff04 	addi	sp,sp,-4
  8182a8:	df000015 	stw	fp,0(sp)
  8182ac:	d839883a 	mov	fp,sp
}
  8182b0:	e037883a 	mov	sp,fp
  8182b4:	df000017 	ldw	fp,0(sp)
  8182b8:	dec00104 	addi	sp,sp,4
  8182bc:	f800283a 	ret

008182c0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  8182c0:	defff804 	addi	sp,sp,-32
  8182c4:	dfc00715 	stw	ra,28(sp)
  8182c8:	df000615 	stw	fp,24(sp)
  8182cc:	df000604 	addi	fp,sp,24
  8182d0:	e13ffc15 	stw	r4,-16(fp)
  8182d4:	e17ffd15 	stw	r5,-12(fp)
  8182d8:	e1bffe05 	stb	r6,-8(fp)
  8182dc:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  8182e0:	e0bffc17 	ldw	r2,-16(fp)
  8182e4:	10800283 	ldbu	r2,10(r2)
  8182e8:	10c03fcc 	andi	r3,r2,255
  8182ec:	00802174 	movhi	r2,133
  8182f0:	10b2a904 	addi	r2,r2,-13660
  8182f4:	10c5883a 	add	r2,r2,r3
  8182f8:	10800003 	ldbu	r2,0(r2)
  8182fc:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  818300:	e0fffa83 	ldbu	r3,-22(fp)
  818304:	e0bffc17 	ldw	r2,-16(fp)
  818308:	1885883a 	add	r2,r3,r2
  81830c:	10800204 	addi	r2,r2,8
  818310:	108000c3 	ldbu	r2,3(r2)
  818314:	10c03fcc 	andi	r3,r2,255
  818318:	00802174 	movhi	r2,133
  81831c:	10b2a904 	addi	r2,r2,-13660
  818320:	10c5883a 	add	r2,r2,r3
  818324:	10800003 	ldbu	r2,0(r2)
  818328:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  81832c:	e0bffa83 	ldbu	r2,-22(fp)
  818330:	100490fa 	slli	r2,r2,3
  818334:	1007883a 	mov	r3,r2
  818338:	e0bffa43 	ldbu	r2,-23(fp)
  81833c:	1885883a 	add	r2,r3,r2
  818340:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  818344:	e0bffa03 	ldbu	r2,-24(fp)
  818348:	00c03934 	movhi	r3,228
  81834c:	18e6c204 	addi	r3,r3,-25848
  818350:	1085883a 	add	r2,r2,r2
  818354:	1085883a 	add	r2,r2,r2
  818358:	10c5883a 	add	r2,r2,r3
  81835c:	10800017 	ldw	r2,0(r2)
  818360:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  818364:	e0bffb17 	ldw	r2,-20(fp)
  818368:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  81836c:	e0fffb17 	ldw	r3,-20(fp)
  818370:	e0bffd17 	ldw	r2,-12(fp)
  818374:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  818378:	e0bffb17 	ldw	r2,-20(fp)
  81837c:	10800c03 	ldbu	r2,48(r2)
  818380:	1007883a 	mov	r3,r2
  818384:	e0bffe03 	ldbu	r2,-8(fp)
  818388:	0084303a 	nor	r2,zero,r2
  81838c:	1884703a 	and	r2,r3,r2
  818390:	1007883a 	mov	r3,r2
  818394:	e0bffb17 	ldw	r2,-20(fp)
  818398:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  81839c:	e0fffb17 	ldw	r3,-20(fp)
  8183a0:	e0bfff03 	ldbu	r2,-4(fp)
  8183a4:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  8183a8:	e0bffb17 	ldw	r2,-20(fp)
  8183ac:	10800c03 	ldbu	r2,48(r2)
  8183b0:	10803fcc 	andi	r2,r2,255
  8183b4:	1080020c 	andi	r2,r2,8
  8183b8:	1004c03a 	cmpne	r2,r2,zero
  8183bc:	1000111e 	bne	r2,zero,818404 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  8183c0:	e0bffb17 	ldw	r2,-20(fp)
  8183c4:	10c00d83 	ldbu	r3,54(r2)
  8183c8:	d0a08103 	ldbu	r2,-32252(gp)
  8183cc:	1884b03a 	or	r2,r3,r2
  8183d0:	d0a08105 	stb	r2,-32252(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  8183d4:	e13ffa83 	ldbu	r4,-22(fp)
  8183d8:	e0fffa83 	ldbu	r3,-22(fp)
  8183dc:	d0a08144 	addi	r2,gp,-32251
  8183e0:	1885883a 	add	r2,r3,r2
  8183e4:	10c00003 	ldbu	r3,0(r2)
  8183e8:	e0bffb17 	ldw	r2,-20(fp)
  8183ec:	10800d43 	ldbu	r2,53(r2)
  8183f0:	1884b03a 	or	r2,r3,r2
  8183f4:	1007883a 	mov	r3,r2
  8183f8:	d0a08144 	addi	r2,gp,-32251
  8183fc:	2085883a 	add	r2,r4,r2
  818400:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  818404:	e13ffb17 	ldw	r4,-20(fp)
  818408:	e17ffc17 	ldw	r5,-16(fp)
  81840c:	08186b80 	call	8186b8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  818410:	e0bffb17 	ldw	r2,-20(fp)
  818414:	10800817 	ldw	r2,32(r2)
  818418:	1005003a 	cmpeq	r2,r2,zero
  81841c:	1000071e 	bne	r2,zero,81843c <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  818420:	e0bffb17 	ldw	r2,-20(fp)
  818424:	11400817 	ldw	r5,32(r2)
  818428:	e13ffb17 	ldw	r4,-20(fp)
  81842c:	08187700 	call	818770 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  818430:	e0fffb17 	ldw	r3,-20(fp)
  818434:	e0bffc17 	ldw	r2,-16(fp)
  818438:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  81843c:	e0bffa03 	ldbu	r2,-24(fp)
}
  818440:	e037883a 	mov	sp,fp
  818444:	dfc00117 	ldw	ra,4(sp)
  818448:	df000017 	ldw	fp,0(sp)
  81844c:	dec00204 	addi	sp,sp,8
  818450:	f800283a 	ret

00818454 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  818454:	defffd04 	addi	sp,sp,-12
  818458:	df000215 	stw	fp,8(sp)
  81845c:	df000204 	addi	fp,sp,8
  818460:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  818464:	d0e08417 	ldw	r3,-32240(gp)
  818468:	e0bfff17 	ldw	r2,-4(fp)
  81846c:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  818470:	d0a08417 	ldw	r2,-32240(gp)
  818474:	10800d03 	ldbu	r2,52(r2)
  818478:	11003fcc 	andi	r4,r2,255
  81847c:	d0a08417 	ldw	r2,-32240(gp)
  818480:	10800d03 	ldbu	r2,52(r2)
  818484:	10c03fcc 	andi	r3,r2,255
  818488:	e0bfff17 	ldw	r2,-4(fp)
  81848c:	1885883a 	add	r2,r3,r2
  818490:	10800204 	addi	r2,r2,8
  818494:	10c000c3 	ldbu	r3,3(r2)
  818498:	d0a08417 	ldw	r2,-32240(gp)
  81849c:	10800d43 	ldbu	r2,53(r2)
  8184a0:	1884b03a 	or	r2,r3,r2
  8184a4:	1007883a 	mov	r3,r2
  8184a8:	e0bfff17 	ldw	r2,-4(fp)
  8184ac:	2085883a 	add	r2,r4,r2
  8184b0:	10800204 	addi	r2,r2,8
  8184b4:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8184b8:	e0bfff17 	ldw	r2,-4(fp)
  8184bc:	10c00283 	ldbu	r3,10(r2)
  8184c0:	d0a08417 	ldw	r2,-32240(gp)
  8184c4:	10800d83 	ldbu	r2,54(r2)
  8184c8:	1884b03a 	or	r2,r3,r2
  8184cc:	1007883a 	mov	r3,r2
  8184d0:	e0bfff17 	ldw	r2,-4(fp)
  8184d4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  8184d8:	d0a08417 	ldw	r2,-32240(gp)
  8184dc:	10800d03 	ldbu	r2,52(r2)
  8184e0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  8184e4:	e13ffe03 	ldbu	r4,-8(fp)
  8184e8:	e0fffe03 	ldbu	r3,-8(fp)
  8184ec:	d0a08144 	addi	r2,gp,-32251
  8184f0:	1885883a 	add	r2,r3,r2
  8184f4:	10800003 	ldbu	r2,0(r2)
  8184f8:	1007883a 	mov	r3,r2
  8184fc:	d0a08417 	ldw	r2,-32240(gp)
  818500:	10800d43 	ldbu	r2,53(r2)
  818504:	0084303a 	nor	r2,zero,r2
  818508:	1884703a 	and	r2,r3,r2
  81850c:	1007883a 	mov	r3,r2
  818510:	d0a08144 	addi	r2,gp,-32251
  818514:	2085883a 	add	r2,r4,r2
  818518:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81851c:	e0fffe03 	ldbu	r3,-8(fp)
  818520:	d0a08144 	addi	r2,gp,-32251
  818524:	1885883a 	add	r2,r3,r2
  818528:	10800003 	ldbu	r2,0(r2)
  81852c:	10803fcc 	andi	r2,r2,255
  818530:	1004c03a 	cmpne	r2,r2,zero
  818534:	1000071e 	bne	r2,zero,818554 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  818538:	d0a08417 	ldw	r2,-32240(gp)
  81853c:	10800d83 	ldbu	r2,54(r2)
  818540:	0084303a 	nor	r2,zero,r2
  818544:	1007883a 	mov	r3,r2
  818548:	d0a08103 	ldbu	r2,-32252(gp)
  81854c:	1884703a 	and	r2,r3,r2
  818550:	d0a08105 	stb	r2,-32252(gp)
    }
}
  818554:	e037883a 	mov	sp,fp
  818558:	df000017 	ldw	fp,0(sp)
  81855c:	dec00104 	addi	sp,sp,4
  818560:	f800283a 	ret

00818564 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  818564:	defffb04 	addi	sp,sp,-20
  818568:	df000415 	stw	fp,16(sp)
  81856c:	df000404 	addi	fp,sp,16
  818570:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  818574:	d0a08417 	ldw	r2,-32240(gp)
  818578:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  81857c:	d0e08417 	ldw	r3,-32240(gp)
  818580:	e0bfff17 	ldw	r2,-4(fp)
  818584:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  818588:	e0bfff17 	ldw	r2,-4(fp)
  81858c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  818590:	e0bffe17 	ldw	r2,-8(fp)
  818594:	10800017 	ldw	r2,0(r2)
  818598:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  81859c:	00002006 	br	818620 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  8185a0:	d0a08417 	ldw	r2,-32240(gp)
  8185a4:	10800d03 	ldbu	r2,52(r2)
  8185a8:	11003fcc 	andi	r4,r2,255
  8185ac:	d0a08417 	ldw	r2,-32240(gp)
  8185b0:	10800d03 	ldbu	r2,52(r2)
  8185b4:	10c03fcc 	andi	r3,r2,255
  8185b8:	e0bffd17 	ldw	r2,-12(fp)
  8185bc:	1885883a 	add	r2,r3,r2
  8185c0:	10800204 	addi	r2,r2,8
  8185c4:	10c000c3 	ldbu	r3,3(r2)
  8185c8:	d0a08417 	ldw	r2,-32240(gp)
  8185cc:	10800d43 	ldbu	r2,53(r2)
  8185d0:	1884b03a 	or	r2,r3,r2
  8185d4:	1007883a 	mov	r3,r2
  8185d8:	e0bffd17 	ldw	r2,-12(fp)
  8185dc:	2085883a 	add	r2,r4,r2
  8185e0:	10800204 	addi	r2,r2,8
  8185e4:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8185e8:	e0bffd17 	ldw	r2,-12(fp)
  8185ec:	10c00283 	ldbu	r3,10(r2)
  8185f0:	d0a08417 	ldw	r2,-32240(gp)
  8185f4:	10800d83 	ldbu	r2,54(r2)
  8185f8:	1884b03a 	or	r2,r3,r2
  8185fc:	1007883a 	mov	r3,r2
  818600:	e0bffd17 	ldw	r2,-12(fp)
  818604:	10c00285 	stb	r3,10(r2)
        pevents++;
  818608:	e0bffe17 	ldw	r2,-8(fp)
  81860c:	10800104 	addi	r2,r2,4
  818610:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  818614:	e0bffe17 	ldw	r2,-8(fp)
  818618:	10800017 	ldw	r2,0(r2)
  81861c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  818620:	e0bffd17 	ldw	r2,-12(fp)
  818624:	1004c03a 	cmpne	r2,r2,zero
  818628:	103fdd1e 	bne	r2,zero,8185a0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  81862c:	d0a08417 	ldw	r2,-32240(gp)
  818630:	10800d03 	ldbu	r2,52(r2)
  818634:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  818638:	e13ffc03 	ldbu	r4,-16(fp)
  81863c:	e0fffc03 	ldbu	r3,-16(fp)
  818640:	d0a08144 	addi	r2,gp,-32251
  818644:	1885883a 	add	r2,r3,r2
  818648:	10800003 	ldbu	r2,0(r2)
  81864c:	1007883a 	mov	r3,r2
  818650:	d0a08417 	ldw	r2,-32240(gp)
  818654:	10800d43 	ldbu	r2,53(r2)
  818658:	0084303a 	nor	r2,zero,r2
  81865c:	1884703a 	and	r2,r3,r2
  818660:	1007883a 	mov	r3,r2
  818664:	d0a08144 	addi	r2,gp,-32251
  818668:	2085883a 	add	r2,r4,r2
  81866c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  818670:	e0fffc03 	ldbu	r3,-16(fp)
  818674:	d0a08144 	addi	r2,gp,-32251
  818678:	1885883a 	add	r2,r3,r2
  81867c:	10800003 	ldbu	r2,0(r2)
  818680:	10803fcc 	andi	r2,r2,255
  818684:	1004c03a 	cmpne	r2,r2,zero
  818688:	1000071e 	bne	r2,zero,8186a8 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  81868c:	d0a08417 	ldw	r2,-32240(gp)
  818690:	10800d83 	ldbu	r2,54(r2)
  818694:	0084303a 	nor	r2,zero,r2
  818698:	1007883a 	mov	r3,r2
  81869c:	d0a08103 	ldbu	r2,-32252(gp)
  8186a0:	1884703a 	and	r2,r3,r2
  8186a4:	d0a08105 	stb	r2,-32252(gp)
    }
}
  8186a8:	e037883a 	mov	sp,fp
  8186ac:	df000017 	ldw	fp,0(sp)
  8186b0:	dec00104 	addi	sp,sp,4
  8186b4:	f800283a 	ret

008186b8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  8186b8:	defffc04 	addi	sp,sp,-16
  8186bc:	df000315 	stw	fp,12(sp)
  8186c0:	df000304 	addi	fp,sp,12
  8186c4:	e13ffe15 	stw	r4,-8(fp)
  8186c8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  8186cc:	e0bffe17 	ldw	r2,-8(fp)
  8186d0:	10800d03 	ldbu	r2,52(r2)
  8186d4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  8186d8:	e13ffd03 	ldbu	r4,-12(fp)
  8186dc:	e0fffd03 	ldbu	r3,-12(fp)
  8186e0:	e0bfff17 	ldw	r2,-4(fp)
  8186e4:	1885883a 	add	r2,r3,r2
  8186e8:	10800204 	addi	r2,r2,8
  8186ec:	108000c3 	ldbu	r2,3(r2)
  8186f0:	1007883a 	mov	r3,r2
  8186f4:	e0bffe17 	ldw	r2,-8(fp)
  8186f8:	10800d43 	ldbu	r2,53(r2)
  8186fc:	0084303a 	nor	r2,zero,r2
  818700:	1884703a 	and	r2,r3,r2
  818704:	1007883a 	mov	r3,r2
  818708:	e0bfff17 	ldw	r2,-4(fp)
  81870c:	2085883a 	add	r2,r4,r2
  818710:	10800204 	addi	r2,r2,8
  818714:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  818718:	e0fffd03 	ldbu	r3,-12(fp)
  81871c:	e0bfff17 	ldw	r2,-4(fp)
  818720:	1885883a 	add	r2,r3,r2
  818724:	10800204 	addi	r2,r2,8
  818728:	108000c3 	ldbu	r2,3(r2)
  81872c:	10803fcc 	andi	r2,r2,255
  818730:	1004c03a 	cmpne	r2,r2,zero
  818734:	10000a1e 	bne	r2,zero,818760 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  818738:	e0bfff17 	ldw	r2,-4(fp)
  81873c:	10800283 	ldbu	r2,10(r2)
  818740:	1007883a 	mov	r3,r2
  818744:	e0bffe17 	ldw	r2,-8(fp)
  818748:	10800d83 	ldbu	r2,54(r2)
  81874c:	0084303a 	nor	r2,zero,r2
  818750:	1884703a 	and	r2,r3,r2
  818754:	1007883a 	mov	r3,r2
  818758:	e0bfff17 	ldw	r2,-4(fp)
  81875c:	10c00285 	stb	r3,10(r2)
    }
}
  818760:	e037883a 	mov	sp,fp
  818764:	df000017 	ldw	fp,0(sp)
  818768:	dec00104 	addi	sp,sp,4
  81876c:	f800283a 	ret

00818770 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  818770:	defffa04 	addi	sp,sp,-24
  818774:	df000515 	stw	fp,20(sp)
  818778:	df000504 	addi	fp,sp,20
  81877c:	e13ffe15 	stw	r4,-8(fp)
  818780:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  818784:	e0bffe17 	ldw	r2,-8(fp)
  818788:	10800d03 	ldbu	r2,52(r2)
  81878c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  818790:	e0bffe17 	ldw	r2,-8(fp)
  818794:	10800d83 	ldbu	r2,54(r2)
  818798:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  81879c:	e0bffe17 	ldw	r2,-8(fp)
  8187a0:	10800d43 	ldbu	r2,53(r2)
  8187a4:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  8187a8:	e0bfff17 	ldw	r2,-4(fp)
  8187ac:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  8187b0:	e0bffd17 	ldw	r2,-12(fp)
  8187b4:	10800017 	ldw	r2,0(r2)
  8187b8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8187bc:	00002606 	br	818858 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  8187c0:	e13ffb83 	ldbu	r4,-18(fp)
  8187c4:	e0fffb83 	ldbu	r3,-18(fp)
  8187c8:	e0bffc17 	ldw	r2,-16(fp)
  8187cc:	1885883a 	add	r2,r3,r2
  8187d0:	10800204 	addi	r2,r2,8
  8187d4:	108000c3 	ldbu	r2,3(r2)
  8187d8:	1007883a 	mov	r3,r2
  8187dc:	e0bffb03 	ldbu	r2,-20(fp)
  8187e0:	0084303a 	nor	r2,zero,r2
  8187e4:	1884703a 	and	r2,r3,r2
  8187e8:	1007883a 	mov	r3,r2
  8187ec:	e0bffc17 	ldw	r2,-16(fp)
  8187f0:	2085883a 	add	r2,r4,r2
  8187f4:	10800204 	addi	r2,r2,8
  8187f8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  8187fc:	e0fffb83 	ldbu	r3,-18(fp)
  818800:	e0bffc17 	ldw	r2,-16(fp)
  818804:	1885883a 	add	r2,r3,r2
  818808:	10800204 	addi	r2,r2,8
  81880c:	108000c3 	ldbu	r2,3(r2)
  818810:	10803fcc 	andi	r2,r2,255
  818814:	1004c03a 	cmpne	r2,r2,zero
  818818:	1000091e 	bne	r2,zero,818840 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  81881c:	e0bffc17 	ldw	r2,-16(fp)
  818820:	10800283 	ldbu	r2,10(r2)
  818824:	1007883a 	mov	r3,r2
  818828:	e0bffb43 	ldbu	r2,-19(fp)
  81882c:	0084303a 	nor	r2,zero,r2
  818830:	1884703a 	and	r2,r3,r2
  818834:	1007883a 	mov	r3,r2
  818838:	e0bffc17 	ldw	r2,-16(fp)
  81883c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  818840:	e0bffd17 	ldw	r2,-12(fp)
  818844:	10800104 	addi	r2,r2,4
  818848:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  81884c:	e0bffd17 	ldw	r2,-12(fp)
  818850:	10800017 	ldw	r2,0(r2)
  818854:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  818858:	e0bffc17 	ldw	r2,-16(fp)
  81885c:	1004c03a 	cmpne	r2,r2,zero
  818860:	103fd71e 	bne	r2,zero,8187c0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  818864:	e037883a 	mov	sp,fp
  818868:	df000017 	ldw	fp,0(sp)
  81886c:	dec00104 	addi	sp,sp,4
  818870:	f800283a 	ret

00818874 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  818874:	defffc04 	addi	sp,sp,-16
  818878:	df000315 	stw	fp,12(sp)
  81887c:	df000304 	addi	fp,sp,12
  818880:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  818884:	e0bfff17 	ldw	r2,-4(fp)
  818888:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  81888c:	e0bfff17 	ldw	r2,-4(fp)
  818890:	108002c4 	addi	r2,r2,11
  818894:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  818898:	e03ffd05 	stb	zero,-12(fp)
  81889c:	00000806 	br	8188c0 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  8188a0:	e0bffe17 	ldw	r2,-8(fp)
  8188a4:	10000005 	stb	zero,0(r2)
  8188a8:	e0bffe17 	ldw	r2,-8(fp)
  8188ac:	10800044 	addi	r2,r2,1
  8188b0:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8188b4:	e0bffd03 	ldbu	r2,-12(fp)
  8188b8:	10800044 	addi	r2,r2,1
  8188bc:	e0bffd05 	stb	r2,-12(fp)
  8188c0:	e0bffd03 	ldbu	r2,-12(fp)
  8188c4:	108000f0 	cmpltui	r2,r2,3
  8188c8:	103ff51e 	bne	r2,zero,8188a0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  8188cc:	e037883a 	mov	sp,fp
  8188d0:	df000017 	ldw	fp,0(sp)
  8188d4:	dec00104 	addi	sp,sp,4
  8188d8:	f800283a 	ret

008188dc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8188dc:	defffb04 	addi	sp,sp,-20
  8188e0:	dfc00415 	stw	ra,16(sp)
  8188e4:	df000315 	stw	fp,12(sp)
  8188e8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  8188ec:	01003934 	movhi	r4,228
  8188f0:	2122ae04 	addi	r4,r4,-30024
  8188f4:	0142d004 	movi	r5,2880
  8188f8:	0818c400 	call	818c40 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  8188fc:	00803934 	movhi	r2,228
  818900:	10a2ae04 	addi	r2,r2,-30024
  818904:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  818908:	00803934 	movhi	r2,228
  81890c:	10a2ba04 	addi	r2,r2,-29976
  818910:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  818914:	e03fff0d 	sth	zero,-4(fp)
  818918:	00001306 	br	818968 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81891c:	e0bffe17 	ldw	r2,-8(fp)
  818920:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  818924:	e0fffe17 	ldw	r3,-8(fp)
  818928:	e0bffd17 	ldw	r2,-12(fp)
  81892c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  818930:	e0fffe17 	ldw	r3,-8(fp)
  818934:	00800fc4 	movi	r2,63
  818938:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  81893c:	e0bffe17 	ldw	r2,-8(fp)
  818940:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  818944:	e0bffe17 	ldw	r2,-8(fp)
  818948:	10800c04 	addi	r2,r2,48
  81894c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  818950:	e0bffd17 	ldw	r2,-12(fp)
  818954:	10800c04 	addi	r2,r2,48
  818958:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  81895c:	e0bfff0b 	ldhu	r2,-4(fp)
  818960:	10800044 	addi	r2,r2,1
  818964:	e0bfff0d 	sth	r2,-4(fp)
  818968:	e0bfff0b 	ldhu	r2,-4(fp)
  81896c:	10800ef0 	cmpltui	r2,r2,59
  818970:	103fea1e 	bne	r2,zero,81891c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  818974:	e0bffe17 	ldw	r2,-8(fp)
  818978:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  81897c:	e0bffe17 	ldw	r2,-8(fp)
  818980:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  818984:	e0fffe17 	ldw	r3,-8(fp)
  818988:	00800fc4 	movi	r2,63
  81898c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  818990:	e0bffe17 	ldw	r2,-8(fp)
  818994:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  818998:	00803934 	movhi	r2,228
  81899c:	10a2ae04 	addi	r2,r2,-30024
  8189a0:	d0a08215 	stw	r2,-32248(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  8189a4:	e037883a 	mov	sp,fp
  8189a8:	dfc00117 	ldw	ra,4(sp)
  8189ac:	df000017 	ldw	fp,0(sp)
  8189b0:	dec00204 	addi	sp,sp,8
  8189b4:	f800283a 	ret

008189b8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  8189b8:	deffff04 	addi	sp,sp,-4
  8189bc:	df000015 	stw	fp,0(sp)
  8189c0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  8189c4:	d0208515 	stw	zero,-32236(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  8189c8:	d0208305 	stb	zero,-32244(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  8189cc:	d0207505 	stb	zero,-32300(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  8189d0:	d0207d45 	stb	zero,-32267(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  8189d4:	d0207545 	stb	zero,-32299(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8189d8:	d0207a15 	stw	zero,-32280(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8189dc:	d0207615 	stw	zero,-32296(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8189e0:	d0208815 	stw	zero,-32224(gp)
    OSIdleCtrMax  = 0L;
  8189e4:	d0207b15 	stw	zero,-32276(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8189e8:	d0208705 	stb	zero,-32228(gp)
#endif
}
  8189ec:	e037883a 	mov	sp,fp
  8189f0:	df000017 	ldw	fp,0(sp)
  8189f4:	dec00104 	addi	sp,sp,4
  8189f8:	f800283a 	ret

008189fc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  8189fc:	defffd04 	addi	sp,sp,-12
  818a00:	df000215 	stw	fp,8(sp)
  818a04:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  818a08:	d0208105 	stb	zero,-32252(gp)
    prdytbl       = &OSRdyTbl[0];
  818a0c:	d0a08144 	addi	r2,gp,-32251
  818a10:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  818a14:	e03fff05 	stb	zero,-4(fp)
  818a18:	00000806 	br	818a3c <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  818a1c:	e0bffe17 	ldw	r2,-8(fp)
  818a20:	10000005 	stb	zero,0(r2)
  818a24:	e0bffe17 	ldw	r2,-8(fp)
  818a28:	10800044 	addi	r2,r2,1
  818a2c:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  818a30:	e0bfff03 	ldbu	r2,-4(fp)
  818a34:	10800044 	addi	r2,r2,1
  818a38:	e0bfff05 	stb	r2,-4(fp)
  818a3c:	e0bfff03 	ldbu	r2,-4(fp)
  818a40:	108000f0 	cmpltui	r2,r2,3
  818a44:	103ff51e 	bne	r2,zero,818a1c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  818a48:	d0207745 	stb	zero,-32291(gp)
    OSPrioHighRdy = 0;
  818a4c:	d0207705 	stb	zero,-32292(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  818a50:	d0207f15 	stw	zero,-32260(gp)
    OSTCBCur      = (OS_TCB *)0;
  818a54:	d0208415 	stw	zero,-32240(gp)
}
  818a58:	e037883a 	mov	sp,fp
  818a5c:	df000017 	ldw	fp,0(sp)
  818a60:	dec00104 	addi	sp,sp,4
  818a64:	f800283a 	ret

00818a68 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  818a68:	defff804 	addi	sp,sp,-32
  818a6c:	dfc00715 	stw	ra,28(sp)
  818a70:	df000615 	stw	fp,24(sp)
  818a74:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  818a78:	01803934 	movhi	r6,228
  818a7c:	31a2ad04 	addi	r6,r6,-30028
  818a80:	00bfffd4 	movui	r2,65535
  818a84:	d8800015 	stw	r2,0(sp)
  818a88:	00803934 	movhi	r2,228
  818a8c:	10a0ae04 	addi	r2,r2,-32072
  818a90:	d8800115 	stw	r2,4(sp)
  818a94:	00808004 	movi	r2,512
  818a98:	d8800215 	stw	r2,8(sp)
  818a9c:	d8000315 	stw	zero,12(sp)
  818aa0:	008000c4 	movi	r2,3
  818aa4:	d8800415 	stw	r2,16(sp)
  818aa8:	010020b4 	movhi	r4,130
  818aac:	2123c704 	addi	r4,r4,-28900
  818ab0:	000b883a 	mov	r5,zero
  818ab4:	01c00504 	movi	r7,20
  818ab8:	081e9880 	call	81e988 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  818abc:	01402174 	movhi	r5,133
  818ac0:	2972e904 	addi	r5,r5,-13404
  818ac4:	01000504 	movi	r4,20
  818ac8:	e1bfff04 	addi	r6,fp,-4
  818acc:	081f2bc0 	call	81f2bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  818ad0:	e037883a 	mov	sp,fp
  818ad4:	dfc00117 	ldw	ra,4(sp)
  818ad8:	df000017 	ldw	fp,0(sp)
  818adc:	dec00204 	addi	sp,sp,8
  818ae0:	f800283a 	ret

00818ae4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  818ae4:	defff804 	addi	sp,sp,-32
  818ae8:	dfc00715 	stw	ra,28(sp)
  818aec:	df000615 	stw	fp,24(sp)
  818af0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  818af4:	01803934 	movhi	r6,228
  818af8:	31a03504 	addi	r6,r6,-32556
  818afc:	00bfff94 	movui	r2,65534
  818b00:	d8800015 	stw	r2,0(sp)
  818b04:	008038f4 	movhi	r2,227
  818b08:	109e3604 	addi	r2,r2,30936
  818b0c:	d8800115 	stw	r2,4(sp)
  818b10:	00808004 	movi	r2,512
  818b14:	d8800215 	stw	r2,8(sp)
  818b18:	d8000315 	stw	zero,12(sp)
  818b1c:	008000c4 	movi	r2,3
  818b20:	d8800415 	stw	r2,16(sp)
  818b24:	010020b4 	movhi	r4,130
  818b28:	2123de04 	addi	r4,r4,-28808
  818b2c:	000b883a 	mov	r5,zero
  818b30:	01c004c4 	movi	r7,19
  818b34:	081e9880 	call	81e988 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  818b38:	01402174 	movhi	r5,133
  818b3c:	2972ed04 	addi	r5,r5,-13388
  818b40:	010004c4 	movi	r4,19
  818b44:	e1bfff04 	addi	r6,fp,-4
  818b48:	081f2bc0 	call	81f2bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  818b4c:	e037883a 	mov	sp,fp
  818b50:	dfc00117 	ldw	ra,4(sp)
  818b54:	df000017 	ldw	fp,0(sp)
  818b58:	dec00204 	addi	sp,sp,8
  818b5c:	f800283a 	ret

00818b60 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  818b60:	defffb04 	addi	sp,sp,-20
  818b64:	dfc00415 	stw	ra,16(sp)
  818b68:	df000315 	stw	fp,12(sp)
  818b6c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  818b70:	01003934 	movhi	r4,228
  818b74:	21257e04 	addi	r4,r4,-27144
  818b78:	01414404 	movi	r5,1296
  818b7c:	0818c400 	call	818c40 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  818b80:	01003934 	movhi	r4,228
  818b84:	2126c204 	addi	r4,r4,-25848
  818b88:	01401504 	movi	r5,84
  818b8c:	0818c400 	call	818c40 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  818b90:	00803934 	movhi	r2,228
  818b94:	10a57e04 	addi	r2,r2,-27144
  818b98:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  818b9c:	00803934 	movhi	r2,228
  818ba0:	10a59904 	addi	r2,r2,-27036
  818ba4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  818ba8:	e03fff05 	stb	zero,-4(fp)
  818bac:	00001106 	br	818bf4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  818bb0:	e0fffe17 	ldw	r3,-8(fp)
  818bb4:	e0bffd17 	ldw	r2,-12(fp)
  818bb8:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  818bbc:	e0fffe17 	ldw	r3,-8(fp)
  818bc0:	00800fc4 	movi	r2,63
  818bc4:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  818bc8:	e0bffe17 	ldw	r2,-8(fp)
  818bcc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  818bd0:	e0bffe17 	ldw	r2,-8(fp)
  818bd4:	10801b04 	addi	r2,r2,108
  818bd8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  818bdc:	e0bffd17 	ldw	r2,-12(fp)
  818be0:	10801b04 	addi	r2,r2,108
  818be4:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  818be8:	e0bfff03 	ldbu	r2,-4(fp)
  818bec:	10800044 	addi	r2,r2,1
  818bf0:	e0bfff05 	stb	r2,-4(fp)
  818bf4:	e0bfff03 	ldbu	r2,-4(fp)
  818bf8:	108002f0 	cmpltui	r2,r2,11
  818bfc:	103fec1e 	bne	r2,zero,818bb0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  818c00:	e0bffe17 	ldw	r2,-8(fp)
  818c04:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  818c08:	e0fffe17 	ldw	r3,-8(fp)
  818c0c:	00800fc4 	movi	r2,63
  818c10:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  818c14:	e0bffe17 	ldw	r2,-8(fp)
  818c18:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  818c1c:	d0207815 	stw	zero,-32288(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  818c20:	00803934 	movhi	r2,228
  818c24:	10a57e04 	addi	r2,r2,-27144
  818c28:	d0a07c15 	stw	r2,-32272(gp)
}
  818c2c:	e037883a 	mov	sp,fp
  818c30:	dfc00117 	ldw	ra,4(sp)
  818c34:	df000017 	ldw	fp,0(sp)
  818c38:	dec00204 	addi	sp,sp,8
  818c3c:	f800283a 	ret

00818c40 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  818c40:	defffd04 	addi	sp,sp,-12
  818c44:	df000215 	stw	fp,8(sp)
  818c48:	df000204 	addi	fp,sp,8
  818c4c:	e13ffe15 	stw	r4,-8(fp)
  818c50:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  818c54:	00000806 	br	818c78 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  818c58:	e0bffe17 	ldw	r2,-8(fp)
  818c5c:	10000005 	stb	zero,0(r2)
  818c60:	e0bffe17 	ldw	r2,-8(fp)
  818c64:	10800044 	addi	r2,r2,1
  818c68:	e0bffe15 	stw	r2,-8(fp)
        size--;
  818c6c:	e0bfff0b 	ldhu	r2,-4(fp)
  818c70:	10bfffc4 	addi	r2,r2,-1
  818c74:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  818c78:	e0bfff0b 	ldhu	r2,-4(fp)
  818c7c:	1004c03a 	cmpne	r2,r2,zero
  818c80:	103ff51e 	bne	r2,zero,818c58 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  818c84:	e037883a 	mov	sp,fp
  818c88:	df000017 	ldw	fp,0(sp)
  818c8c:	dec00104 	addi	sp,sp,4
  818c90:	f800283a 	ret

00818c94 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  818c94:	defffc04 	addi	sp,sp,-16
  818c98:	df000315 	stw	fp,12(sp)
  818c9c:	df000304 	addi	fp,sp,12
  818ca0:	e13ffd15 	stw	r4,-12(fp)
  818ca4:	e17ffe15 	stw	r5,-8(fp)
  818ca8:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  818cac:	00000d06 	br	818ce4 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  818cb0:	e0bffe17 	ldw	r2,-8(fp)
  818cb4:	10c00003 	ldbu	r3,0(r2)
  818cb8:	e0bffd17 	ldw	r2,-12(fp)
  818cbc:	10c00005 	stb	r3,0(r2)
  818cc0:	e0bffd17 	ldw	r2,-12(fp)
  818cc4:	10800044 	addi	r2,r2,1
  818cc8:	e0bffd15 	stw	r2,-12(fp)
  818ccc:	e0bffe17 	ldw	r2,-8(fp)
  818cd0:	10800044 	addi	r2,r2,1
  818cd4:	e0bffe15 	stw	r2,-8(fp)
        size--;
  818cd8:	e0bfff0b 	ldhu	r2,-4(fp)
  818cdc:	10bfffc4 	addi	r2,r2,-1
  818ce0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  818ce4:	e0bfff0b 	ldhu	r2,-4(fp)
  818ce8:	1004c03a 	cmpne	r2,r2,zero
  818cec:	103ff01e 	bne	r2,zero,818cb0 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  818cf0:	e037883a 	mov	sp,fp
  818cf4:	df000017 	ldw	fp,0(sp)
  818cf8:	dec00104 	addi	sp,sp,4
  818cfc:	f800283a 	ret

00818d00 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  818d00:	defffb04 	addi	sp,sp,-20
  818d04:	dfc00415 	stw	ra,16(sp)
  818d08:	df000315 	stw	fp,12(sp)
  818d0c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  818d10:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818d14:	0005303a 	rdctl	r2,status
  818d18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818d1c:	e0fffe17 	ldw	r3,-8(fp)
  818d20:	00bfff84 	movi	r2,-2
  818d24:	1884703a 	and	r2,r3,r2
  818d28:	1001703a 	wrctl	status,r2
  
  return context;
  818d2c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  818d30:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  818d34:	d0a08303 	ldbu	r2,-32244(gp)
  818d38:	10803fcc 	andi	r2,r2,255
  818d3c:	1004c03a 	cmpne	r2,r2,zero
  818d40:	10001b1e 	bne	r2,zero,818db0 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  818d44:	d0a07503 	ldbu	r2,-32300(gp)
  818d48:	10803fcc 	andi	r2,r2,255
  818d4c:	1004c03a 	cmpne	r2,r2,zero
  818d50:	1000171e 	bne	r2,zero,818db0 <OS_Sched+0xb0>
            OS_SchedNew();
  818d54:	0818dd40 	call	818dd4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  818d58:	d0a07703 	ldbu	r2,-32292(gp)
  818d5c:	d0e07743 	ldbu	r3,-32291(gp)
  818d60:	11003fcc 	andi	r4,r2,255
  818d64:	18803fcc 	andi	r2,r3,255
  818d68:	20801126 	beq	r4,r2,818db0 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  818d6c:	d0a07703 	ldbu	r2,-32292(gp)
  818d70:	10803fcc 	andi	r2,r2,255
  818d74:	00c03934 	movhi	r3,228
  818d78:	18e6c204 	addi	r3,r3,-25848
  818d7c:	1085883a 	add	r2,r2,r2
  818d80:	1085883a 	add	r2,r2,r2
  818d84:	10c5883a 	add	r2,r2,r3
  818d88:	10800017 	ldw	r2,0(r2)
  818d8c:	d0a07f15 	stw	r2,-32260(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  818d90:	d0e07f17 	ldw	r3,-32260(gp)
  818d94:	18800e17 	ldw	r2,56(r3)
  818d98:	10800044 	addi	r2,r2,1
  818d9c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  818da0:	d0a07a17 	ldw	r2,-32280(gp)
  818da4:	10800044 	addi	r2,r2,1
  818da8:	d0a07a15 	stw	r2,-32280(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  818dac:	083ac980 	call	83ac98 <OSCtxSw>
  818db0:	e0bfff17 	ldw	r2,-4(fp)
  818db4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818db8:	e0bffd17 	ldw	r2,-12(fp)
  818dbc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  818dc0:	e037883a 	mov	sp,fp
  818dc4:	dfc00117 	ldw	ra,4(sp)
  818dc8:	df000017 	ldw	fp,0(sp)
  818dcc:	dec00204 	addi	sp,sp,8
  818dd0:	f800283a 	ret

00818dd4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  818dd4:	defffe04 	addi	sp,sp,-8
  818dd8:	df000115 	stw	fp,4(sp)
  818ddc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  818de0:	d0a08103 	ldbu	r2,-32252(gp)
  818de4:	10c03fcc 	andi	r3,r2,255
  818de8:	00802174 	movhi	r2,133
  818dec:	10b2a904 	addi	r2,r2,-13660
  818df0:	10c5883a 	add	r2,r2,r3
  818df4:	10800003 	ldbu	r2,0(r2)
  818df8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  818dfc:	e0bfff03 	ldbu	r2,-4(fp)
  818e00:	100490fa 	slli	r2,r2,3
  818e04:	1009883a 	mov	r4,r2
  818e08:	e0ffff03 	ldbu	r3,-4(fp)
  818e0c:	d0a08144 	addi	r2,gp,-32251
  818e10:	1885883a 	add	r2,r3,r2
  818e14:	10800003 	ldbu	r2,0(r2)
  818e18:	10c03fcc 	andi	r3,r2,255
  818e1c:	00802174 	movhi	r2,133
  818e20:	10b2a904 	addi	r2,r2,-13660
  818e24:	10c5883a 	add	r2,r2,r3
  818e28:	10800003 	ldbu	r2,0(r2)
  818e2c:	2085883a 	add	r2,r4,r2
  818e30:	d0a07705 	stb	r2,-32292(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  818e34:	e037883a 	mov	sp,fp
  818e38:	df000017 	ldw	fp,0(sp)
  818e3c:	dec00104 	addi	sp,sp,4
  818e40:	f800283a 	ret

00818e44 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  818e44:	defffc04 	addi	sp,sp,-16
  818e48:	df000315 	stw	fp,12(sp)
  818e4c:	df000304 	addi	fp,sp,12
  818e50:	e13ffe15 	stw	r4,-8(fp)
  818e54:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  818e58:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  818e5c:	00000d06 	br	818e94 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  818e60:	e0bfff17 	ldw	r2,-4(fp)
  818e64:	10c00003 	ldbu	r3,0(r2)
  818e68:	e0bffe17 	ldw	r2,-8(fp)
  818e6c:	10c00005 	stb	r3,0(r2)
  818e70:	e0bffe17 	ldw	r2,-8(fp)
  818e74:	10800044 	addi	r2,r2,1
  818e78:	e0bffe15 	stw	r2,-8(fp)
  818e7c:	e0bfff17 	ldw	r2,-4(fp)
  818e80:	10800044 	addi	r2,r2,1
  818e84:	e0bfff15 	stw	r2,-4(fp)
        len++;
  818e88:	e0bffd03 	ldbu	r2,-12(fp)
  818e8c:	10800044 	addi	r2,r2,1
  818e90:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  818e94:	e0bfff17 	ldw	r2,-4(fp)
  818e98:	10800003 	ldbu	r2,0(r2)
  818e9c:	10803fcc 	andi	r2,r2,255
  818ea0:	1004c03a 	cmpne	r2,r2,zero
  818ea4:	103fee1e 	bne	r2,zero,818e60 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  818ea8:	e0bffe17 	ldw	r2,-8(fp)
  818eac:	10000005 	stb	zero,0(r2)
    return (len);
  818eb0:	e0bffd03 	ldbu	r2,-12(fp)
}
  818eb4:	e037883a 	mov	sp,fp
  818eb8:	df000017 	ldw	fp,0(sp)
  818ebc:	dec00104 	addi	sp,sp,4
  818ec0:	f800283a 	ret

00818ec4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  818ec4:	defffd04 	addi	sp,sp,-12
  818ec8:	df000215 	stw	fp,8(sp)
  818ecc:	df000204 	addi	fp,sp,8
  818ed0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  818ed4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  818ed8:	00000606 	br	818ef4 <OS_StrLen+0x30>
        psrc++;
  818edc:	e0bfff17 	ldw	r2,-4(fp)
  818ee0:	10800044 	addi	r2,r2,1
  818ee4:	e0bfff15 	stw	r2,-4(fp)
        len++;
  818ee8:	e0bffe03 	ldbu	r2,-8(fp)
  818eec:	10800044 	addi	r2,r2,1
  818ef0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  818ef4:	e0bfff17 	ldw	r2,-4(fp)
  818ef8:	10800003 	ldbu	r2,0(r2)
  818efc:	10803fcc 	andi	r2,r2,255
  818f00:	1004c03a 	cmpne	r2,r2,zero
  818f04:	103ff51e 	bne	r2,zero,818edc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  818f08:	e0bffe03 	ldbu	r2,-8(fp)
}
  818f0c:	e037883a 	mov	sp,fp
  818f10:	df000017 	ldw	fp,0(sp)
  818f14:	dec00104 	addi	sp,sp,4
  818f18:	f800283a 	ret

00818f1c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  818f1c:	defffa04 	addi	sp,sp,-24
  818f20:	dfc00515 	stw	ra,20(sp)
  818f24:	df000415 	stw	fp,16(sp)
  818f28:	df000404 	addi	fp,sp,16
  818f2c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818f30:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818f34:	0005303a 	rdctl	r2,status
  818f38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818f3c:	e0fffd17 	ldw	r3,-12(fp)
  818f40:	00bfff84 	movi	r2,-2
  818f44:	1884703a 	and	r2,r3,r2
  818f48:	1001703a 	wrctl	status,r2
  
  return context;
  818f4c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  818f50:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  818f54:	d0a07617 	ldw	r2,-32296(gp)
  818f58:	10800044 	addi	r2,r2,1
  818f5c:	d0a07615 	stw	r2,-32296(gp)
  818f60:	e0bffe17 	ldw	r2,-8(fp)
  818f64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818f68:	e0bffc17 	ldw	r2,-16(fp)
  818f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  818f70:	083b1500 	call	83b150 <OSTaskIdleHook>
    }
  818f74:	003fef06 	br	818f34 <OS_TaskIdle+0x18>

00818f78 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  818f78:	defffa04 	addi	sp,sp,-24
  818f7c:	dfc00515 	stw	ra,20(sp)
  818f80:	df000415 	stw	fp,16(sp)
  818f84:	df000404 	addi	fp,sp,16
  818f88:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818f8c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  818f90:	00000206 	br	818f9c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  818f94:	01003204 	movi	r4,200
  818f98:	081fc800 	call	81fc80 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  818f9c:	d0a08703 	ldbu	r2,-32228(gp)
  818fa0:	10803fcc 	andi	r2,r2,255
  818fa4:	1005003a 	cmpeq	r2,r2,zero
  818fa8:	103ffa1e 	bne	r2,zero,818f94 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  818fac:	d1207b17 	ldw	r4,-32276(gp)
  818fb0:	01401904 	movi	r5,100
  818fb4:	08053b80 	call	8053b8 <__udivsi3>
  818fb8:	d0a07b15 	stw	r2,-32276(gp)
    if (OSIdleCtrMax == 0L) {
  818fbc:	d0a07b17 	ldw	r2,-32276(gp)
  818fc0:	1004c03a 	cmpne	r2,r2,zero
  818fc4:	1000031e 	bne	r2,zero,818fd4 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  818fc8:	d0207d05 	stb	zero,-32268(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  818fcc:	01003fc4 	movi	r4,255
  818fd0:	081f8940 	call	81f894 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818fd4:	0005303a 	rdctl	r2,status
  818fd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818fdc:	e0fffd17 	ldw	r3,-12(fp)
  818fe0:	00bfff84 	movi	r2,-2
  818fe4:	1884703a 	and	r2,r3,r2
  818fe8:	1001703a 	wrctl	status,r2
  
  return context;
  818fec:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  818ff0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  818ff4:	d0a07617 	ldw	r2,-32296(gp)
  818ff8:	d0a08815 	stw	r2,-32224(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  818ffc:	d0207615 	stw	zero,-32296(gp)
  819000:	e0bffe17 	ldw	r2,-8(fp)
  819004:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819008:	e0bffc17 	ldw	r2,-16(fp)
  81900c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  819010:	d1208817 	ldw	r4,-32224(gp)
  819014:	d1607b17 	ldw	r5,-32276(gp)
  819018:	08053b80 	call	8053b8 <__udivsi3>
  81901c:	1007883a 	mov	r3,r2
  819020:	00801904 	movi	r2,100
  819024:	10c5c83a 	sub	r2,r2,r3
  819028:	d0a07d05 	stb	r2,-32268(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  81902c:	083b0d40 	call	83b0d4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  819030:	08190400 	call	819040 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  819034:	01001904 	movi	r4,100
  819038:	081fc800 	call	81fc80 <OSTimeDly>
    }
  81903c:	003fe506 	br	818fd4 <OS_TaskStat+0x5c>

00819040 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  819040:	defffa04 	addi	sp,sp,-24
  819044:	dfc00515 	stw	ra,20(sp)
  819048:	df000415 	stw	fp,16(sp)
  81904c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  819050:	e03ffc05 	stb	zero,-16(fp)
  819054:	00002406 	br	8190e8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  819058:	e13ffc03 	ldbu	r4,-16(fp)
  81905c:	e17ffe04 	addi	r5,fp,-8
  819060:	081f6980 	call	81f698 <OSTaskStkChk>
  819064:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  819068:	e0bffc43 	ldbu	r2,-15(fp)
  81906c:	1004c03a 	cmpne	r2,r2,zero
  819070:	10001a1e 	bne	r2,zero,8190dc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  819074:	e0bffc03 	ldbu	r2,-16(fp)
  819078:	00c03934 	movhi	r3,228
  81907c:	18e6c204 	addi	r3,r3,-25848
  819080:	1085883a 	add	r2,r2,r2
  819084:	1085883a 	add	r2,r2,r2
  819088:	10c5883a 	add	r2,r2,r3
  81908c:	10800017 	ldw	r2,0(r2)
  819090:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  819094:	e0bffd17 	ldw	r2,-12(fp)
  819098:	1005003a 	cmpeq	r2,r2,zero
  81909c:	10000f1e 	bne	r2,zero,8190dc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  8190a0:	e0bffd17 	ldw	r2,-12(fp)
  8190a4:	10800060 	cmpeqi	r2,r2,1
  8190a8:	10000c1e 	bne	r2,zero,8190dc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  8190ac:	e0bffd17 	ldw	r2,-12(fp)
  8190b0:	10c00217 	ldw	r3,8(r2)
  8190b4:	e0bffd17 	ldw	r2,-12(fp)
  8190b8:	10800317 	ldw	r2,12(r2)
  8190bc:	1085883a 	add	r2,r2,r2
  8190c0:	1085883a 	add	r2,r2,r2
  8190c4:	1887883a 	add	r3,r3,r2
  8190c8:	e0bffd17 	ldw	r2,-12(fp)
  8190cc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  8190d0:	e0ffff17 	ldw	r3,-4(fp)
  8190d4:	e0bffd17 	ldw	r2,-12(fp)
  8190d8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8190dc:	e0bffc03 	ldbu	r2,-16(fp)
  8190e0:	10800044 	addi	r2,r2,1
  8190e4:	e0bffc05 	stb	r2,-16(fp)
  8190e8:	e0bffc03 	ldbu	r2,-16(fp)
  8190ec:	10800570 	cmpltui	r2,r2,21
  8190f0:	103fd91e 	bne	r2,zero,819058 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  8190f4:	e037883a 	mov	sp,fp
  8190f8:	dfc00117 	ldw	ra,4(sp)
  8190fc:	df000017 	ldw	fp,0(sp)
  819100:	dec00204 	addi	sp,sp,8
  819104:	f800283a 	ret

00819108 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  819108:	defff104 	addi	sp,sp,-60
  81910c:	dfc00e15 	stw	ra,56(sp)
  819110:	df000d15 	stw	fp,52(sp)
  819114:	df000d04 	addi	fp,sp,52
  819118:	e17ffb15 	stw	r5,-20(fp)
  81911c:	e1bffc15 	stw	r6,-16(fp)
  819120:	e0800417 	ldw	r2,16(fp)
  819124:	e13ffa05 	stb	r4,-24(fp)
  819128:	e1fffd0d 	sth	r7,-12(fp)
  81912c:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  819130:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819134:	0005303a 	rdctl	r2,status
  819138:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81913c:	e0fff717 	ldw	r3,-36(fp)
  819140:	00bfff84 	movi	r2,-2
  819144:	1884703a 	and	r2,r3,r2
  819148:	1001703a 	wrctl	status,r2
  
  return context;
  81914c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  819150:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  819154:	d0a07c17 	ldw	r2,-32272(gp)
  819158:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  81915c:	e0bff917 	ldw	r2,-28(fp)
  819160:	1005003a 	cmpeq	r2,r2,zero
  819164:	1000941e 	bne	r2,zero,8193b8 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  819168:	e0bff917 	ldw	r2,-28(fp)
  81916c:	10800517 	ldw	r2,20(r2)
  819170:	d0a07c15 	stw	r2,-32272(gp)
  819174:	e0bff817 	ldw	r2,-32(fp)
  819178:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81917c:	e0bff617 	ldw	r2,-40(fp)
  819180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  819184:	e0fff917 	ldw	r3,-28(fp)
  819188:	e0bffb17 	ldw	r2,-20(fp)
  81918c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  819190:	e0fff917 	ldw	r3,-28(fp)
  819194:	e0bffa03 	ldbu	r2,-24(fp)
  819198:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  81919c:	e0bff917 	ldw	r2,-28(fp)
  8191a0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  8191a4:	e0bff917 	ldw	r2,-28(fp)
  8191a8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  8191ac:	e0bff917 	ldw	r2,-28(fp)
  8191b0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  8191b4:	e0fff917 	ldw	r3,-28(fp)
  8191b8:	e0800317 	ldw	r2,12(fp)
  8191bc:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  8191c0:	e0fff917 	ldw	r3,-28(fp)
  8191c4:	e0800217 	ldw	r2,8(fp)
  8191c8:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  8191cc:	e0fff917 	ldw	r3,-28(fp)
  8191d0:	e0bffc17 	ldw	r2,-16(fp)
  8191d4:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  8191d8:	e0fff917 	ldw	r3,-28(fp)
  8191dc:	e0bffe0b 	ldhu	r2,-8(fp)
  8191e0:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  8191e4:	e0fff917 	ldw	r3,-28(fp)
  8191e8:	e0bffd0b 	ldhu	r2,-12(fp)
  8191ec:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  8191f0:	e0bff917 	ldw	r2,-28(fp)
  8191f4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  8191f8:	e0bffa03 	ldbu	r2,-24(fp)
  8191fc:	1004d0fa 	srli	r2,r2,3
  819200:	1007883a 	mov	r3,r2
  819204:	e0bff917 	ldw	r2,-28(fp)
  819208:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  81920c:	e0bffa03 	ldbu	r2,-24(fp)
  819210:	108001cc 	andi	r2,r2,7
  819214:	1007883a 	mov	r3,r2
  819218:	e0bff917 	ldw	r2,-28(fp)
  81921c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  819220:	e0bff917 	ldw	r2,-28(fp)
  819224:	10800d03 	ldbu	r2,52(r2)
  819228:	10c03fcc 	andi	r3,r2,255
  81922c:	00800044 	movi	r2,1
  819230:	10c4983a 	sll	r2,r2,r3
  819234:	1007883a 	mov	r3,r2
  819238:	e0bff917 	ldw	r2,-28(fp)
  81923c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  819240:	e0bff917 	ldw	r2,-28(fp)
  819244:	10800cc3 	ldbu	r2,51(r2)
  819248:	10c03fcc 	andi	r3,r2,255
  81924c:	00800044 	movi	r2,1
  819250:	10c4983a 	sll	r2,r2,r3
  819254:	1007883a 	mov	r3,r2
  819258:	e0bff917 	ldw	r2,-28(fp)
  81925c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  819260:	e0bff917 	ldw	r2,-28(fp)
  819264:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  819268:	e0bff917 	ldw	r2,-28(fp)
  81926c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  819270:	e0bff917 	ldw	r2,-28(fp)
  819274:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  819278:	e0bff917 	ldw	r2,-28(fp)
  81927c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  819280:	e0bff917 	ldw	r2,-28(fp)
  819284:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  819288:	e0bff917 	ldw	r2,-28(fp)
  81928c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  819290:	e0bff917 	ldw	r2,-28(fp)
  819294:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  819298:	e0bff917 	ldw	r2,-28(fp)
  81929c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  8192a0:	e0bff917 	ldw	r2,-28(fp)
  8192a4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  8192a8:	e0fff917 	ldw	r3,-28(fp)
  8192ac:	00800fc4 	movi	r2,63
  8192b0:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8192b4:	e0bff917 	ldw	r2,-28(fp)
  8192b8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  8192bc:	e13ff917 	ldw	r4,-28(fp)
  8192c0:	083b16c0 	call	83b16c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  8192c4:	e13ff917 	ldw	r4,-28(fp)
  8192c8:	083b0780 	call	83b078 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8192cc:	0005303a 	rdctl	r2,status
  8192d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8192d4:	e0fff517 	ldw	r3,-44(fp)
  8192d8:	00bfff84 	movi	r2,-2
  8192dc:	1884703a 	and	r2,r3,r2
  8192e0:	1001703a 	wrctl	status,r2
  
  return context;
  8192e4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  8192e8:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  8192ec:	e0bffa03 	ldbu	r2,-24(fp)
  8192f0:	00c03934 	movhi	r3,228
  8192f4:	18e6c204 	addi	r3,r3,-25848
  8192f8:	1085883a 	add	r2,r2,r2
  8192fc:	1085883a 	add	r2,r2,r2
  819300:	10c7883a 	add	r3,r2,r3
  819304:	e0bff917 	ldw	r2,-28(fp)
  819308:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  81930c:	d0e07817 	ldw	r3,-32288(gp)
  819310:	e0bff917 	ldw	r2,-28(fp)
  819314:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  819318:	e0bff917 	ldw	r2,-28(fp)
  81931c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  819320:	d0a07817 	ldw	r2,-32288(gp)
  819324:	1005003a 	cmpeq	r2,r2,zero
  819328:	1000031e 	bne	r2,zero,819338 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  81932c:	d0e07817 	ldw	r3,-32288(gp)
  819330:	e0bff917 	ldw	r2,-28(fp)
  819334:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  819338:	e0bff917 	ldw	r2,-28(fp)
  81933c:	d0a07815 	stw	r2,-32288(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  819340:	e0bff917 	ldw	r2,-28(fp)
  819344:	10c00d83 	ldbu	r3,54(r2)
  819348:	d0a08103 	ldbu	r2,-32252(gp)
  81934c:	1884b03a 	or	r2,r3,r2
  819350:	d0a08105 	stb	r2,-32252(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  819354:	e0bff917 	ldw	r2,-28(fp)
  819358:	10800d03 	ldbu	r2,52(r2)
  81935c:	11003fcc 	andi	r4,r2,255
  819360:	e0bff917 	ldw	r2,-28(fp)
  819364:	10800d03 	ldbu	r2,52(r2)
  819368:	10c03fcc 	andi	r3,r2,255
  81936c:	d0a08144 	addi	r2,gp,-32251
  819370:	1885883a 	add	r2,r3,r2
  819374:	10c00003 	ldbu	r3,0(r2)
  819378:	e0bff917 	ldw	r2,-28(fp)
  81937c:	10800d43 	ldbu	r2,53(r2)
  819380:	1884b03a 	or	r2,r3,r2
  819384:	1007883a 	mov	r3,r2
  819388:	d0a08144 	addi	r2,gp,-32251
  81938c:	2085883a 	add	r2,r4,r2
  819390:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  819394:	d0a07d43 	ldbu	r2,-32267(gp)
  819398:	10800044 	addi	r2,r2,1
  81939c:	d0a07d45 	stb	r2,-32267(gp)
  8193a0:	e0bff817 	ldw	r2,-32(fp)
  8193a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8193a8:	e0bff417 	ldw	r2,-48(fp)
  8193ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8193b0:	e03fff15 	stw	zero,-4(fp)
  8193b4:	00000606 	br	8193d0 <OS_TCBInit+0x2c8>
  8193b8:	e0bff817 	ldw	r2,-32(fp)
  8193bc:	e0bff315 	stw	r2,-52(fp)
  8193c0:	e0bff317 	ldw	r2,-52(fp)
  8193c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  8193c8:	00801084 	movi	r2,66
  8193cc:	e0bfff15 	stw	r2,-4(fp)
  8193d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8193d4:	e037883a 	mov	sp,fp
  8193d8:	dfc00117 	ldw	ra,4(sp)
  8193dc:	df000017 	ldw	fp,0(sp)
  8193e0:	dec00204 	addi	sp,sp,8
  8193e4:	f800283a 	ret

008193e8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  8193e8:	defffe04 	addi	sp,sp,-8
  8193ec:	df000115 	stw	fp,4(sp)
  8193f0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  8193f4:	d0a01904 	addi	r2,gp,-32668
  8193f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  8193fc:	d0a01a04 	addi	r2,gp,-32664
  819400:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  819404:	d0a01b84 	addi	r2,gp,-32658
  819408:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  81940c:	d0a01c04 	addi	r2,gp,-32656
  819410:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  819414:	d0a01b04 	addi	r2,gp,-32660
  819418:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  81941c:	d0a01c84 	addi	r2,gp,-32654
  819420:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  819424:	d0a01d04 	addi	r2,gp,-32652
  819428:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  81942c:	d0a01d84 	addi	r2,gp,-32650
  819430:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  819434:	d0a01e04 	addi	r2,gp,-32648
  819438:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  81943c:	d0a01e84 	addi	r2,gp,-32646
  819440:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  819444:	d0a01f04 	addi	r2,gp,-32644
  819448:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  81944c:	d0a01f84 	addi	r2,gp,-32642
  819450:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  819454:	d0a02004 	addi	r2,gp,-32640
  819458:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  81945c:	d0a02084 	addi	r2,gp,-32638
  819460:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  819464:	d0a02104 	addi	r2,gp,-32636
  819468:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  81946c:	d0a02184 	addi	r2,gp,-32634
  819470:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  819474:	d0a02204 	addi	r2,gp,-32632
  819478:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  81947c:	d0a02284 	addi	r2,gp,-32630
  819480:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  819484:	d0a02304 	addi	r2,gp,-32628
  819488:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  81948c:	d0a02384 	addi	r2,gp,-32626
  819490:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  819494:	d0a02404 	addi	r2,gp,-32624
  819498:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  81949c:	d0a02484 	addi	r2,gp,-32622
  8194a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  8194a4:	d0a02504 	addi	r2,gp,-32620
  8194a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  8194ac:	d0a02584 	addi	r2,gp,-32618
  8194b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  8194b4:	d0a02604 	addi	r2,gp,-32616
  8194b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  8194bc:	d0a02684 	addi	r2,gp,-32614
  8194c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  8194c4:	d0a02704 	addi	r2,gp,-32612
  8194c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  8194cc:	d0a02784 	addi	r2,gp,-32610
  8194d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  8194d4:	d0a02804 	addi	r2,gp,-32608
  8194d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  8194dc:	d0a02884 	addi	r2,gp,-32606
  8194e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  8194e4:	d0a02904 	addi	r2,gp,-32604
  8194e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  8194ec:	d0a02984 	addi	r2,gp,-32602
  8194f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  8194f4:	d0a02a04 	addi	r2,gp,-32600
  8194f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  8194fc:	d0a02a84 	addi	r2,gp,-32598
  819500:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  819504:	d0a02b04 	addi	r2,gp,-32596
  819508:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  81950c:	d0a02b84 	addi	r2,gp,-32594
  819510:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  819514:	d0a02c04 	addi	r2,gp,-32592
  819518:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  81951c:	d0a02c84 	addi	r2,gp,-32590
  819520:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  819524:	d0a02d04 	addi	r2,gp,-32588
  819528:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  81952c:	d0a02d84 	addi	r2,gp,-32586
  819530:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  819534:	d0a02e04 	addi	r2,gp,-32584
  819538:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  81953c:	d0a02e84 	addi	r2,gp,-32582
  819540:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  819544:	d0a02f04 	addi	r2,gp,-32580
  819548:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  81954c:	d0a02f84 	addi	r2,gp,-32578
  819550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  819554:	d0a03004 	addi	r2,gp,-32576
  819558:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  81955c:	d0a03504 	addi	r2,gp,-32556
  819560:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  819564:	e037883a 	mov	sp,fp
  819568:	df000017 	ldw	fp,0(sp)
  81956c:	dec00104 	addi	sp,sp,4
  819570:	f800283a 	ret

00819574 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  819574:	defff104 	addi	sp,sp,-60
  819578:	df000e15 	stw	fp,56(sp)
  81957c:	df000e04 	addi	fp,sp,56
  819580:	e13ffa15 	stw	r4,-24(fp)
  819584:	e1fffd15 	stw	r7,-12(fp)
  819588:	e17ffb0d 	sth	r5,-20(fp)
  81958c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  819590:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  819594:	e0bffd17 	ldw	r2,-12(fp)
  819598:	1004c03a 	cmpne	r2,r2,zero
  81959c:	1000021e 	bne	r2,zero,8195a8 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  8195a0:	e03fff15 	stw	zero,-4(fp)
  8195a4:	0000bb06 	br	819894 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8195a8:	e0bffa17 	ldw	r2,-24(fp)
  8195ac:	1004c03a 	cmpne	r2,r2,zero
  8195b0:	1000051e 	bne	r2,zero,8195c8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8195b4:	e0fffd17 	ldw	r3,-12(fp)
  8195b8:	00801b84 	movi	r2,110
  8195bc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8195c0:	e03fff15 	stw	zero,-4(fp)
  8195c4:	0000b306 	br	819894 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8195c8:	e0bffa17 	ldw	r2,-24(fp)
  8195cc:	10800003 	ldbu	r2,0(r2)
  8195d0:	10803fcc 	andi	r2,r2,255
  8195d4:	10800160 	cmpeqi	r2,r2,5
  8195d8:	1000051e 	bne	r2,zero,8195f0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8195dc:	e0fffd17 	ldw	r3,-12(fp)
  8195e0:	00800044 	movi	r2,1
  8195e4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8195e8:	e03fff15 	stw	zero,-4(fp)
  8195ec:	0000a906 	br	819894 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8195f0:	e0fffc03 	ldbu	r3,-16(fp)
  8195f4:	00bfe004 	movi	r2,-128
  8195f8:	1884703a 	and	r2,r3,r2
  8195fc:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  819600:	e0bff943 	ldbu	r2,-27(fp)
  819604:	1005003a 	cmpeq	r2,r2,zero
  819608:	1000061e 	bne	r2,zero,819624 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  81960c:	e0bffc03 	ldbu	r2,-16(fp)
  819610:	10801fcc 	andi	r2,r2,127
  819614:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  819618:	00800044 	movi	r2,1
  81961c:	e0bff905 	stb	r2,-28(fp)
  819620:	00000106 	br	819628 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  819624:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  819628:	e0bffd17 	ldw	r2,-12(fp)
  81962c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819630:	0005303a 	rdctl	r2,status
  819634:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819638:	e0fff717 	ldw	r3,-36(fp)
  81963c:	00bfff84 	movi	r2,-2
  819640:	1884703a 	and	r2,r3,r2
  819644:	1001703a 	wrctl	status,r2
  
  return context;
  819648:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81964c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  819650:	e0bffc03 	ldbu	r2,-16(fp)
  819654:	e0bffe15 	stw	r2,-8(fp)
  819658:	e0fffe17 	ldw	r3,-8(fp)
  81965c:	18800060 	cmpeqi	r2,r3,1
  819660:	1000651e 	bne	r2,zero,8197f8 <OSFlagAccept+0x284>
  819664:	e0fffe17 	ldw	r3,-8(fp)
  819668:	18800088 	cmpgei	r2,r3,2
  81966c:	1000041e 	bne	r2,zero,819680 <OSFlagAccept+0x10c>
  819670:	e0fffe17 	ldw	r3,-8(fp)
  819674:	1805003a 	cmpeq	r2,r3,zero
  819678:	1000421e 	bne	r2,zero,819784 <OSFlagAccept+0x210>
  81967c:	00007b06 	br	81986c <OSFlagAccept+0x2f8>
  819680:	e0fffe17 	ldw	r3,-8(fp)
  819684:	188000a0 	cmpeqi	r2,r3,2
  819688:	1000041e 	bne	r2,zero,81969c <OSFlagAccept+0x128>
  81968c:	e0fffe17 	ldw	r3,-8(fp)
  819690:	188000e0 	cmpeqi	r2,r3,3
  819694:	10001e1e 	bne	r2,zero,819710 <OSFlagAccept+0x19c>
  819698:	00007406 	br	81986c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  81969c:	e0bffa17 	ldw	r2,-24(fp)
  8196a0:	10c0020b 	ldhu	r3,8(r2)
  8196a4:	e0bffb0b 	ldhu	r2,-20(fp)
  8196a8:	1884703a 	and	r2,r3,r2
  8196ac:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8196b0:	e0fff98b 	ldhu	r3,-26(fp)
  8196b4:	e0bffb0b 	ldhu	r2,-20(fp)
  8196b8:	18800d1e 	bne	r3,r2,8196f0 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8196bc:	e0bff903 	ldbu	r2,-28(fp)
  8196c0:	10800058 	cmpnei	r2,r2,1
  8196c4:	10000d1e 	bne	r2,zero,8196fc <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8196c8:	e0bffa17 	ldw	r2,-24(fp)
  8196cc:	1080020b 	ldhu	r2,8(r2)
  8196d0:	1007883a 	mov	r3,r2
  8196d4:	e0bff98b 	ldhu	r2,-26(fp)
  8196d8:	0084303a 	nor	r2,zero,r2
  8196dc:	1884703a 	and	r2,r3,r2
  8196e0:	1007883a 	mov	r3,r2
  8196e4:	e0bffa17 	ldw	r2,-24(fp)
  8196e8:	10c0020d 	sth	r3,8(r2)
  8196ec:	00000306 	br	8196fc <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8196f0:	e0fffd17 	ldw	r3,-12(fp)
  8196f4:	00801c04 	movi	r2,112
  8196f8:	18800005 	stb	r2,0(r3)
  8196fc:	e0bff817 	ldw	r2,-32(fp)
  819700:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819704:	e0bff617 	ldw	r2,-40(fp)
  819708:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  81970c:	00005f06 	br	81988c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  819710:	e0bffa17 	ldw	r2,-24(fp)
  819714:	10c0020b 	ldhu	r3,8(r2)
  819718:	e0bffb0b 	ldhu	r2,-20(fp)
  81971c:	1884703a 	and	r2,r3,r2
  819720:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  819724:	e0bff98b 	ldhu	r2,-26(fp)
  819728:	1005003a 	cmpeq	r2,r2,zero
  81972c:	10000d1e 	bne	r2,zero,819764 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  819730:	e0bff903 	ldbu	r2,-28(fp)
  819734:	10800058 	cmpnei	r2,r2,1
  819738:	10000d1e 	bne	r2,zero,819770 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  81973c:	e0bffa17 	ldw	r2,-24(fp)
  819740:	1080020b 	ldhu	r2,8(r2)
  819744:	1007883a 	mov	r3,r2
  819748:	e0bff98b 	ldhu	r2,-26(fp)
  81974c:	0084303a 	nor	r2,zero,r2
  819750:	1884703a 	and	r2,r3,r2
  819754:	1007883a 	mov	r3,r2
  819758:	e0bffa17 	ldw	r2,-24(fp)
  81975c:	10c0020d 	sth	r3,8(r2)
  819760:	00000306 	br	819770 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  819764:	e0fffd17 	ldw	r3,-12(fp)
  819768:	00801c04 	movi	r2,112
  81976c:	18800005 	stb	r2,0(r3)
  819770:	e0bff817 	ldw	r2,-32(fp)
  819774:	e0bff515 	stw	r2,-44(fp)
  819778:	e0bff517 	ldw	r2,-44(fp)
  81977c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  819780:	00004206 	br	81988c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  819784:	e0bffa17 	ldw	r2,-24(fp)
  819788:	1080020b 	ldhu	r2,8(r2)
  81978c:	0084303a 	nor	r2,zero,r2
  819790:	1007883a 	mov	r3,r2
  819794:	e0bffb0b 	ldhu	r2,-20(fp)
  819798:	1884703a 	and	r2,r3,r2
  81979c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8197a0:	e0fff98b 	ldhu	r3,-26(fp)
  8197a4:	e0bffb0b 	ldhu	r2,-20(fp)
  8197a8:	18800b1e 	bne	r3,r2,8197d8 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8197ac:	e0bff903 	ldbu	r2,-28(fp)
  8197b0:	10800058 	cmpnei	r2,r2,1
  8197b4:	10000b1e 	bne	r2,zero,8197e4 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  8197b8:	e0bffa17 	ldw	r2,-24(fp)
  8197bc:	10c0020b 	ldhu	r3,8(r2)
  8197c0:	e0bff98b 	ldhu	r2,-26(fp)
  8197c4:	1884b03a 	or	r2,r3,r2
  8197c8:	1007883a 	mov	r3,r2
  8197cc:	e0bffa17 	ldw	r2,-24(fp)
  8197d0:	10c0020d 	sth	r3,8(r2)
  8197d4:	00000306 	br	8197e4 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8197d8:	e0fffd17 	ldw	r3,-12(fp)
  8197dc:	00801c04 	movi	r2,112
  8197e0:	18800005 	stb	r2,0(r3)
  8197e4:	e0bff817 	ldw	r2,-32(fp)
  8197e8:	e0bff415 	stw	r2,-48(fp)
  8197ec:	e0bff417 	ldw	r2,-48(fp)
  8197f0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8197f4:	00002506 	br	81988c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8197f8:	e0bffa17 	ldw	r2,-24(fp)
  8197fc:	1080020b 	ldhu	r2,8(r2)
  819800:	0084303a 	nor	r2,zero,r2
  819804:	1007883a 	mov	r3,r2
  819808:	e0bffb0b 	ldhu	r2,-20(fp)
  81980c:	1884703a 	and	r2,r3,r2
  819810:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  819814:	e0bff98b 	ldhu	r2,-26(fp)
  819818:	1005003a 	cmpeq	r2,r2,zero
  81981c:	10000b1e 	bne	r2,zero,81984c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  819820:	e0bff903 	ldbu	r2,-28(fp)
  819824:	10800058 	cmpnei	r2,r2,1
  819828:	10000b1e 	bne	r2,zero,819858 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  81982c:	e0bffa17 	ldw	r2,-24(fp)
  819830:	10c0020b 	ldhu	r3,8(r2)
  819834:	e0bff98b 	ldhu	r2,-26(fp)
  819838:	1884b03a 	or	r2,r3,r2
  81983c:	1007883a 	mov	r3,r2
  819840:	e0bffa17 	ldw	r2,-24(fp)
  819844:	10c0020d 	sth	r3,8(r2)
  819848:	00000306 	br	819858 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81984c:	e0fffd17 	ldw	r3,-12(fp)
  819850:	00801c04 	movi	r2,112
  819854:	18800005 	stb	r2,0(r3)
  819858:	e0bff817 	ldw	r2,-32(fp)
  81985c:	e0bff315 	stw	r2,-52(fp)
  819860:	e0bff317 	ldw	r2,-52(fp)
  819864:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  819868:	00000806 	br	81988c <OSFlagAccept+0x318>
  81986c:	e0bff817 	ldw	r2,-32(fp)
  819870:	e0bff215 	stw	r2,-56(fp)
  819874:	e0bff217 	ldw	r2,-56(fp)
  819878:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81987c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  819880:	e0fffd17 	ldw	r3,-12(fp)
  819884:	00801bc4 	movi	r2,111
  819888:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  81988c:	e0bff98b 	ldhu	r2,-26(fp)
  819890:	e0bfff15 	stw	r2,-4(fp)
  819894:	e0bfff17 	ldw	r2,-4(fp)
}
  819898:	e037883a 	mov	sp,fp
  81989c:	df000017 	ldw	fp,0(sp)
  8198a0:	dec00104 	addi	sp,sp,4
  8198a4:	f800283a 	ret

008198a8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  8198a8:	defff704 	addi	sp,sp,-36
  8198ac:	df000815 	stw	fp,32(sp)
  8198b0:	df000804 	addi	fp,sp,32
  8198b4:	e17ffe15 	stw	r5,-8(fp)
  8198b8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  8198bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  8198c0:	e0bffe17 	ldw	r2,-8(fp)
  8198c4:	1004c03a 	cmpne	r2,r2,zero
  8198c8:	1000021e 	bne	r2,zero,8198d4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  8198cc:	e03fff15 	stw	zero,-4(fp)
  8198d0:	00003f06 	br	8199d0 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  8198d4:	00802174 	movhi	r2,133
  8198d8:	1082f904 	addi	r2,r2,3044
  8198dc:	10800003 	ldbu	r2,0(r2)
  8198e0:	10803fcc 	andi	r2,r2,255
  8198e4:	1005003a 	cmpeq	r2,r2,zero
  8198e8:	1000051e 	bne	r2,zero,819900 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  8198ec:	e0fffe17 	ldw	r3,-8(fp)
  8198f0:	00800404 	movi	r2,16
  8198f4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  8198f8:	e03fff15 	stw	zero,-4(fp)
  8198fc:	00003406 	br	8199d0 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819900:	0005303a 	rdctl	r2,status
  819904:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819908:	e0fffa17 	ldw	r3,-24(fp)
  81990c:	00bfff84 	movi	r2,-2
  819910:	1884703a 	and	r2,r3,r2
  819914:	1001703a 	wrctl	status,r2
  
  return context;
  819918:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81991c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  819920:	00802174 	movhi	r2,133
  819924:	1082fc04 	addi	r2,r2,3056
  819928:	10800017 	ldw	r2,0(r2)
  81992c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  819930:	e0bffc17 	ldw	r2,-16(fp)
  819934:	1005003a 	cmpeq	r2,r2,zero
  819938:	10001c1e 	bne	r2,zero,8199ac <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  81993c:	00802174 	movhi	r2,133
  819940:	1082fc04 	addi	r2,r2,3056
  819944:	10800017 	ldw	r2,0(r2)
  819948:	10800117 	ldw	r2,4(r2)
  81994c:	1007883a 	mov	r3,r2
  819950:	00802174 	movhi	r2,133
  819954:	1082fc04 	addi	r2,r2,3056
  819958:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  81995c:	e0fffc17 	ldw	r3,-16(fp)
  819960:	00800144 	movi	r2,5
  819964:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  819968:	e0fffc17 	ldw	r3,-16(fp)
  81996c:	e0bffd0b 	ldhu	r2,-12(fp)
  819970:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  819974:	e0bffc17 	ldw	r2,-16(fp)
  819978:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  81997c:	e0fffc17 	ldw	r3,-16(fp)
  819980:	00800fc4 	movi	r2,63
  819984:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  819988:	e0bffc17 	ldw	r2,-16(fp)
  81998c:	100002c5 	stb	zero,11(r2)
  819990:	e0bffb17 	ldw	r2,-20(fp)
  819994:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819998:	e0bff917 	ldw	r2,-28(fp)
  81999c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  8199a0:	e0bffe17 	ldw	r2,-8(fp)
  8199a4:	10000005 	stb	zero,0(r2)
  8199a8:	00000706 	br	8199c8 <OSFlagCreate+0x120>
  8199ac:	e0bffb17 	ldw	r2,-20(fp)
  8199b0:	e0bff815 	stw	r2,-32(fp)
  8199b4:	e0bff817 	ldw	r2,-32(fp)
  8199b8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  8199bc:	e0fffe17 	ldw	r3,-8(fp)
  8199c0:	00801c84 	movi	r2,114
  8199c4:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  8199c8:	e0bffc17 	ldw	r2,-16(fp)
  8199cc:	e0bfff15 	stw	r2,-4(fp)
  8199d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8199d4:	e037883a 	mov	sp,fp
  8199d8:	df000017 	ldw	fp,0(sp)
  8199dc:	dec00104 	addi	sp,sp,4
  8199e0:	f800283a 	ret

008199e4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8199e4:	defff004 	addi	sp,sp,-64
  8199e8:	dfc00f15 	stw	ra,60(sp)
  8199ec:	df000e15 	stw	fp,56(sp)
  8199f0:	df000e04 	addi	fp,sp,56
  8199f4:	e13ffb15 	stw	r4,-20(fp)
  8199f8:	e1bffd15 	stw	r6,-12(fp)
  8199fc:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  819a00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  819a04:	e0bffd17 	ldw	r2,-12(fp)
  819a08:	1004c03a 	cmpne	r2,r2,zero
  819a0c:	1000031e 	bne	r2,zero,819a1c <OSFlagDel+0x38>
        return (pgrp);
  819a10:	e0bffb17 	ldw	r2,-20(fp)
  819a14:	e0bfff15 	stw	r2,-4(fp)
  819a18:	00009606 	br	819c74 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  819a1c:	e0bffb17 	ldw	r2,-20(fp)
  819a20:	1004c03a 	cmpne	r2,r2,zero
  819a24:	1000061e 	bne	r2,zero,819a40 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819a28:	e0fffd17 	ldw	r3,-12(fp)
  819a2c:	00801b84 	movi	r2,110
  819a30:	18800005 	stb	r2,0(r3)
        return (pgrp);
  819a34:	e0fffb17 	ldw	r3,-20(fp)
  819a38:	e0ffff15 	stw	r3,-4(fp)
  819a3c:	00008d06 	br	819c74 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  819a40:	00802174 	movhi	r2,133
  819a44:	1082f904 	addi	r2,r2,3044
  819a48:	10800003 	ldbu	r2,0(r2)
  819a4c:	10803fcc 	andi	r2,r2,255
  819a50:	1005003a 	cmpeq	r2,r2,zero
  819a54:	1000061e 	bne	r2,zero,819a70 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  819a58:	e0fffd17 	ldw	r3,-12(fp)
  819a5c:	008003c4 	movi	r2,15
  819a60:	18800005 	stb	r2,0(r3)
        return (pgrp);
  819a64:	e0bffb17 	ldw	r2,-20(fp)
  819a68:	e0bfff15 	stw	r2,-4(fp)
  819a6c:	00008106 	br	819c74 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  819a70:	e0bffb17 	ldw	r2,-20(fp)
  819a74:	10800003 	ldbu	r2,0(r2)
  819a78:	10803fcc 	andi	r2,r2,255
  819a7c:	10800160 	cmpeqi	r2,r2,5
  819a80:	1000061e 	bne	r2,zero,819a9c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  819a84:	e0fffd17 	ldw	r3,-12(fp)
  819a88:	00800044 	movi	r2,1
  819a8c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  819a90:	e0fffb17 	ldw	r3,-20(fp)
  819a94:	e0ffff15 	stw	r3,-4(fp)
  819a98:	00007606 	br	819c74 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819a9c:	0005303a 	rdctl	r2,status
  819aa0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819aa4:	e0fff617 	ldw	r3,-40(fp)
  819aa8:	00bfff84 	movi	r2,-2
  819aac:	1884703a 	and	r2,r3,r2
  819ab0:	1001703a 	wrctl	status,r2
  
  return context;
  819ab4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  819ab8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  819abc:	e0bffb17 	ldw	r2,-20(fp)
  819ac0:	10800117 	ldw	r2,4(r2)
  819ac4:	1005003a 	cmpeq	r2,r2,zero
  819ac8:	1000031e 	bne	r2,zero,819ad8 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  819acc:	00800044 	movi	r2,1
  819ad0:	e0bffa05 	stb	r2,-24(fp)
  819ad4:	00000106 	br	819adc <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  819ad8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  819adc:	e0bffc03 	ldbu	r2,-16(fp)
  819ae0:	e0bffe15 	stw	r2,-8(fp)
  819ae4:	e0fffe17 	ldw	r3,-8(fp)
  819ae8:	1805003a 	cmpeq	r2,r3,zero
  819aec:	1000041e 	bne	r2,zero,819b00 <OSFlagDel+0x11c>
  819af0:	e0fffe17 	ldw	r3,-8(fp)
  819af4:	18800060 	cmpeqi	r2,r3,1
  819af8:	1000281e 	bne	r2,zero,819b9c <OSFlagDel+0x1b8>
  819afc:	00005206 	br	819c48 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  819b00:	e0bffa03 	ldbu	r2,-24(fp)
  819b04:	1004c03a 	cmpne	r2,r2,zero
  819b08:	10001a1e 	bne	r2,zero,819b74 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  819b0c:	e0fffb17 	ldw	r3,-20(fp)
  819b10:	00800fc4 	movi	r2,63
  819b14:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  819b18:	e0bffb17 	ldw	r2,-20(fp)
  819b1c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  819b20:	e0bffb17 	ldw	r2,-20(fp)
  819b24:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  819b28:	00802174 	movhi	r2,133
  819b2c:	1082fc04 	addi	r2,r2,3056
  819b30:	10c00017 	ldw	r3,0(r2)
  819b34:	e0bffb17 	ldw	r2,-20(fp)
  819b38:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  819b3c:	e0bffb17 	ldw	r2,-20(fp)
  819b40:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  819b44:	00c02174 	movhi	r3,133
  819b48:	18c2fc04 	addi	r3,r3,3056
  819b4c:	e0bffb17 	ldw	r2,-20(fp)
  819b50:	18800015 	stw	r2,0(r3)
  819b54:	e0bff717 	ldw	r2,-36(fp)
  819b58:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819b5c:	e0bff517 	ldw	r2,-44(fp)
  819b60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  819b64:	e0bffd17 	ldw	r2,-12(fp)
  819b68:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  819b6c:	e03ff815 	stw	zero,-32(fp)
  819b70:	00003e06 	br	819c6c <OSFlagDel+0x288>
  819b74:	e0bff717 	ldw	r2,-36(fp)
  819b78:	e0bff415 	stw	r2,-48(fp)
  819b7c:	e0bff417 	ldw	r2,-48(fp)
  819b80:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  819b84:	e0fffd17 	ldw	r3,-12(fp)
  819b88:	00801244 	movi	r2,73
  819b8c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  819b90:	e0bffb17 	ldw	r2,-20(fp)
  819b94:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  819b98:	00003406 	br	819c6c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  819b9c:	e0bffb17 	ldw	r2,-20(fp)
  819ba0:	10800117 	ldw	r2,4(r2)
  819ba4:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  819ba8:	00000606 	br	819bc4 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  819bac:	e13ff917 	ldw	r4,-28(fp)
  819bb0:	000b883a 	mov	r5,zero
  819bb4:	081acf40 	call	81acf4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  819bb8:	e0bff917 	ldw	r2,-28(fp)
  819bbc:	10800017 	ldw	r2,0(r2)
  819bc0:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  819bc4:	e0bff917 	ldw	r2,-28(fp)
  819bc8:	1004c03a 	cmpne	r2,r2,zero
  819bcc:	103ff71e 	bne	r2,zero,819bac <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  819bd0:	e0fffb17 	ldw	r3,-20(fp)
  819bd4:	00800fc4 	movi	r2,63
  819bd8:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  819bdc:	e0bffb17 	ldw	r2,-20(fp)
  819be0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  819be4:	e0bffb17 	ldw	r2,-20(fp)
  819be8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  819bec:	00802174 	movhi	r2,133
  819bf0:	1082fc04 	addi	r2,r2,3056
  819bf4:	10c00017 	ldw	r3,0(r2)
  819bf8:	e0bffb17 	ldw	r2,-20(fp)
  819bfc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  819c00:	e0bffb17 	ldw	r2,-20(fp)
  819c04:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  819c08:	00c02174 	movhi	r3,133
  819c0c:	18c2fc04 	addi	r3,r3,3056
  819c10:	e0bffb17 	ldw	r2,-20(fp)
  819c14:	18800015 	stw	r2,0(r3)
  819c18:	e0bff717 	ldw	r2,-36(fp)
  819c1c:	e0bff315 	stw	r2,-52(fp)
  819c20:	e0bff317 	ldw	r2,-52(fp)
  819c24:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  819c28:	e0bffa03 	ldbu	r2,-24(fp)
  819c2c:	10800058 	cmpnei	r2,r2,1
  819c30:	1000011e 	bne	r2,zero,819c38 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  819c34:	0818d000 	call	818d00 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  819c38:	e0bffd17 	ldw	r2,-12(fp)
  819c3c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  819c40:	e03ff815 	stw	zero,-32(fp)
             break;
  819c44:	00000906 	br	819c6c <OSFlagDel+0x288>
  819c48:	e0bff717 	ldw	r2,-36(fp)
  819c4c:	e0bff215 	stw	r2,-56(fp)
  819c50:	e0bff217 	ldw	r2,-56(fp)
  819c54:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  819c58:	e0fffd17 	ldw	r3,-12(fp)
  819c5c:	008001c4 	movi	r2,7
  819c60:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  819c64:	e0bffb17 	ldw	r2,-20(fp)
  819c68:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  819c6c:	e0bff817 	ldw	r2,-32(fp)
  819c70:	e0bfff15 	stw	r2,-4(fp)
  819c74:	e0bfff17 	ldw	r2,-4(fp)
}
  819c78:	e037883a 	mov	sp,fp
  819c7c:	dfc00117 	ldw	ra,4(sp)
  819c80:	df000017 	ldw	fp,0(sp)
  819c84:	dec00204 	addi	sp,sp,8
  819c88:	f800283a 	ret

00819c8c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  819c8c:	defff504 	addi	sp,sp,-44
  819c90:	dfc00a15 	stw	ra,40(sp)
  819c94:	df000915 	stw	fp,36(sp)
  819c98:	df000904 	addi	fp,sp,36
  819c9c:	e13ffc15 	stw	r4,-16(fp)
  819ca0:	e17ffd15 	stw	r5,-12(fp)
  819ca4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  819ca8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  819cac:	e0bffe17 	ldw	r2,-8(fp)
  819cb0:	1004c03a 	cmpne	r2,r2,zero
  819cb4:	1000021e 	bne	r2,zero,819cc0 <OSFlagNameGet+0x34>
        return (0);
  819cb8:	e03fff15 	stw	zero,-4(fp)
  819cbc:	00003e06 	br	819db8 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  819cc0:	e0bffc17 	ldw	r2,-16(fp)
  819cc4:	1004c03a 	cmpne	r2,r2,zero
  819cc8:	1000051e 	bne	r2,zero,819ce0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819ccc:	e0fffe17 	ldw	r3,-8(fp)
  819cd0:	00801b84 	movi	r2,110
  819cd4:	18800005 	stb	r2,0(r3)
        return (0);
  819cd8:	e03fff15 	stw	zero,-4(fp)
  819cdc:	00003606 	br	819db8 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  819ce0:	e0bffd17 	ldw	r2,-12(fp)
  819ce4:	1004c03a 	cmpne	r2,r2,zero
  819ce8:	1000051e 	bne	r2,zero,819d00 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  819cec:	e0fffe17 	ldw	r3,-8(fp)
  819cf0:	00800304 	movi	r2,12
  819cf4:	18800005 	stb	r2,0(r3)
        return (0);
  819cf8:	e03fff15 	stw	zero,-4(fp)
  819cfc:	00002e06 	br	819db8 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  819d00:	00802174 	movhi	r2,133
  819d04:	1082f904 	addi	r2,r2,3044
  819d08:	10800003 	ldbu	r2,0(r2)
  819d0c:	10803fcc 	andi	r2,r2,255
  819d10:	1005003a 	cmpeq	r2,r2,zero
  819d14:	1000051e 	bne	r2,zero,819d2c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  819d18:	e0fffe17 	ldw	r3,-8(fp)
  819d1c:	00800444 	movi	r2,17
  819d20:	18800005 	stb	r2,0(r3)
        return (0);
  819d24:	e03fff15 	stw	zero,-4(fp)
  819d28:	00002306 	br	819db8 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819d2c:	0005303a 	rdctl	r2,status
  819d30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819d34:	e0fff917 	ldw	r3,-28(fp)
  819d38:	00bfff84 	movi	r2,-2
  819d3c:	1884703a 	and	r2,r3,r2
  819d40:	1001703a 	wrctl	status,r2
  
  return context;
  819d44:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  819d48:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  819d4c:	e0bffc17 	ldw	r2,-16(fp)
  819d50:	10800003 	ldbu	r2,0(r2)
  819d54:	10803fcc 	andi	r2,r2,255
  819d58:	10800160 	cmpeqi	r2,r2,5
  819d5c:	1000091e 	bne	r2,zero,819d84 <OSFlagNameGet+0xf8>
  819d60:	e0bffa17 	ldw	r2,-24(fp)
  819d64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819d68:	e0bff817 	ldw	r2,-32(fp)
  819d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  819d70:	e0fffe17 	ldw	r3,-8(fp)
  819d74:	00800044 	movi	r2,1
  819d78:	18800005 	stb	r2,0(r3)
        return (0);
  819d7c:	e03fff15 	stw	zero,-4(fp)
  819d80:	00000d06 	br	819db8 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  819d84:	e0bffc17 	ldw	r2,-16(fp)
  819d88:	11400284 	addi	r5,r2,10
  819d8c:	e13ffd17 	ldw	r4,-12(fp)
  819d90:	0818e440 	call	818e44 <OS_StrCopy>
  819d94:	e0bffb05 	stb	r2,-20(fp)
  819d98:	e0bffa17 	ldw	r2,-24(fp)
  819d9c:	e0bff715 	stw	r2,-36(fp)
  819da0:	e0bff717 	ldw	r2,-36(fp)
  819da4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  819da8:	e0bffe17 	ldw	r2,-8(fp)
  819dac:	10000005 	stb	zero,0(r2)
    return (len);
  819db0:	e0bffb03 	ldbu	r2,-20(fp)
  819db4:	e0bfff15 	stw	r2,-4(fp)
  819db8:	e0bfff17 	ldw	r2,-4(fp)
}
  819dbc:	e037883a 	mov	sp,fp
  819dc0:	dfc00117 	ldw	ra,4(sp)
  819dc4:	df000017 	ldw	fp,0(sp)
  819dc8:	dec00204 	addi	sp,sp,8
  819dcc:	f800283a 	ret

00819dd0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  819dd0:	defff504 	addi	sp,sp,-44
  819dd4:	dfc00a15 	stw	ra,40(sp)
  819dd8:	df000915 	stw	fp,36(sp)
  819ddc:	df000904 	addi	fp,sp,36
  819de0:	e13ffd15 	stw	r4,-12(fp)
  819de4:	e17ffe15 	stw	r5,-8(fp)
  819de8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  819dec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  819df0:	e0bfff17 	ldw	r2,-4(fp)
  819df4:	1005003a 	cmpeq	r2,r2,zero
  819df8:	1000451e 	bne	r2,zero,819f10 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  819dfc:	e0bffd17 	ldw	r2,-12(fp)
  819e00:	1004c03a 	cmpne	r2,r2,zero
  819e04:	1000041e 	bne	r2,zero,819e18 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819e08:	e0ffff17 	ldw	r3,-4(fp)
  819e0c:	00801b84 	movi	r2,110
  819e10:	18800005 	stb	r2,0(r3)
        return;
  819e14:	00003e06 	br	819f10 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  819e18:	e0bffe17 	ldw	r2,-8(fp)
  819e1c:	1004c03a 	cmpne	r2,r2,zero
  819e20:	1000041e 	bne	r2,zero,819e34 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  819e24:	e0ffff17 	ldw	r3,-4(fp)
  819e28:	00800304 	movi	r2,12
  819e2c:	18800005 	stb	r2,0(r3)
        return;
  819e30:	00003706 	br	819f10 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  819e34:	00802174 	movhi	r2,133
  819e38:	1082f904 	addi	r2,r2,3044
  819e3c:	10800003 	ldbu	r2,0(r2)
  819e40:	10803fcc 	andi	r2,r2,255
  819e44:	1005003a 	cmpeq	r2,r2,zero
  819e48:	1000041e 	bne	r2,zero,819e5c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  819e4c:	e0ffff17 	ldw	r3,-4(fp)
  819e50:	00800484 	movi	r2,18
  819e54:	18800005 	stb	r2,0(r3)
        return;
  819e58:	00002d06 	br	819f10 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819e5c:	0005303a 	rdctl	r2,status
  819e60:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819e64:	e0fffa17 	ldw	r3,-24(fp)
  819e68:	00bfff84 	movi	r2,-2
  819e6c:	1884703a 	and	r2,r3,r2
  819e70:	1001703a 	wrctl	status,r2
  
  return context;
  819e74:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  819e78:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  819e7c:	e0bffd17 	ldw	r2,-12(fp)
  819e80:	10800003 	ldbu	r2,0(r2)
  819e84:	10803fcc 	andi	r2,r2,255
  819e88:	10800160 	cmpeqi	r2,r2,5
  819e8c:	1000081e 	bne	r2,zero,819eb0 <OSFlagNameSet+0xe0>
  819e90:	e0bffb17 	ldw	r2,-20(fp)
  819e94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819e98:	e0bff917 	ldw	r2,-28(fp)
  819e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  819ea0:	e0ffff17 	ldw	r3,-4(fp)
  819ea4:	00800044 	movi	r2,1
  819ea8:	18800005 	stb	r2,0(r3)
        return;
  819eac:	00001806 	br	819f10 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  819eb0:	e13ffe17 	ldw	r4,-8(fp)
  819eb4:	0818ec40 	call	818ec4 <OS_StrLen>
  819eb8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  819ebc:	e0bffc03 	ldbu	r2,-16(fp)
  819ec0:	10800830 	cmpltui	r2,r2,32
  819ec4:	1000081e 	bne	r2,zero,819ee8 <OSFlagNameSet+0x118>
  819ec8:	e0bffb17 	ldw	r2,-20(fp)
  819ecc:	e0bff815 	stw	r2,-32(fp)
  819ed0:	e0bff817 	ldw	r2,-32(fp)
  819ed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  819ed8:	e0ffff17 	ldw	r3,-4(fp)
  819edc:	00801cc4 	movi	r2,115
  819ee0:	18800005 	stb	r2,0(r3)
        return;
  819ee4:	00000a06 	br	819f10 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  819ee8:	e0bffd17 	ldw	r2,-12(fp)
  819eec:	11000284 	addi	r4,r2,10
  819ef0:	e17ffe17 	ldw	r5,-8(fp)
  819ef4:	0818e440 	call	818e44 <OS_StrCopy>
  819ef8:	e0bffb17 	ldw	r2,-20(fp)
  819efc:	e0bff715 	stw	r2,-36(fp)
  819f00:	e0bff717 	ldw	r2,-36(fp)
  819f04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  819f08:	e0bfff17 	ldw	r2,-4(fp)
  819f0c:	10000005 	stb	zero,0(r2)
    return;
}
  819f10:	e037883a 	mov	sp,fp
  819f14:	dfc00117 	ldw	ra,4(sp)
  819f18:	df000017 	ldw	fp,0(sp)
  819f1c:	dec00204 	addi	sp,sp,8
  819f20:	f800283a 	ret

00819f24 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  819f24:	deffe004 	addi	sp,sp,-128
  819f28:	dfc01f15 	stw	ra,124(sp)
  819f2c:	df001e15 	stw	fp,120(sp)
  819f30:	df001e04 	addi	fp,sp,120
  819f34:	e13ff915 	stw	r4,-28(fp)
  819f38:	e17ffa0d 	sth	r5,-24(fp)
  819f3c:	e1bffb05 	stb	r6,-20(fp)
  819f40:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  819f44:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  819f48:	e0800217 	ldw	r2,8(fp)
  819f4c:	1004c03a 	cmpne	r2,r2,zero
  819f50:	1000021e 	bne	r2,zero,819f5c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  819f54:	e03fff15 	stw	zero,-4(fp)
  819f58:	00017d06 	br	81a550 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  819f5c:	e0bff917 	ldw	r2,-28(fp)
  819f60:	1004c03a 	cmpne	r2,r2,zero
  819f64:	1000051e 	bne	r2,zero,819f7c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819f68:	e0c00217 	ldw	r3,8(fp)
  819f6c:	00801b84 	movi	r2,110
  819f70:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819f74:	e03fff15 	stw	zero,-4(fp)
  819f78:	00017506 	br	81a550 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  819f7c:	00802174 	movhi	r2,133
  819f80:	1082f904 	addi	r2,r2,3044
  819f84:	10800003 	ldbu	r2,0(r2)
  819f88:	10803fcc 	andi	r2,r2,255
  819f8c:	1005003a 	cmpeq	r2,r2,zero
  819f90:	1000051e 	bne	r2,zero,819fa8 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  819f94:	e0c00217 	ldw	r3,8(fp)
  819f98:	00800084 	movi	r2,2
  819f9c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819fa0:	e03fff15 	stw	zero,-4(fp)
  819fa4:	00016a06 	br	81a550 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  819fa8:	00802174 	movhi	r2,133
  819fac:	1082eb04 	addi	r2,r2,2988
  819fb0:	10800003 	ldbu	r2,0(r2)
  819fb4:	10803fcc 	andi	r2,r2,255
  819fb8:	1005003a 	cmpeq	r2,r2,zero
  819fbc:	1000051e 	bne	r2,zero,819fd4 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  819fc0:	e0c00217 	ldw	r3,8(fp)
  819fc4:	00800344 	movi	r2,13
  819fc8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819fcc:	e03fff15 	stw	zero,-4(fp)
  819fd0:	00015f06 	br	81a550 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  819fd4:	e0bff917 	ldw	r2,-28(fp)
  819fd8:	10800003 	ldbu	r2,0(r2)
  819fdc:	10803fcc 	andi	r2,r2,255
  819fe0:	10800160 	cmpeqi	r2,r2,5
  819fe4:	1000051e 	bne	r2,zero,819ffc <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  819fe8:	e0c00217 	ldw	r3,8(fp)
  819fec:	00800044 	movi	r2,1
  819ff0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819ff4:	e03fff15 	stw	zero,-4(fp)
  819ff8:	00015506 	br	81a550 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  819ffc:	e0fffb03 	ldbu	r3,-20(fp)
  81a000:	00bfe004 	movi	r2,-128
  81a004:	1884703a 	and	r2,r3,r2
  81a008:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  81a00c:	e0bff283 	ldbu	r2,-54(fp)
  81a010:	1005003a 	cmpeq	r2,r2,zero
  81a014:	1000071e 	bne	r2,zero,81a034 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  81a018:	00c01fc4 	movi	r3,127
  81a01c:	e0bffb03 	ldbu	r2,-20(fp)
  81a020:	10c4703a 	and	r2,r2,r3
  81a024:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  81a028:	00800044 	movi	r2,1
  81a02c:	e0bff205 	stb	r2,-56(fp)
  81a030:	00000106 	br	81a038 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  81a034:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a038:	0005303a 	rdctl	r2,status
  81a03c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a040:	e0fff017 	ldw	r3,-64(fp)
  81a044:	00bfff84 	movi	r2,-2
  81a048:	1884703a 	and	r2,r3,r2
  81a04c:	1001703a 	wrctl	status,r2
  
  return context;
  81a050:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  81a054:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  81a058:	e0bffb03 	ldbu	r2,-20(fp)
  81a05c:	e0bffe15 	stw	r2,-8(fp)
  81a060:	e0fffe17 	ldw	r3,-8(fp)
  81a064:	18800060 	cmpeqi	r2,r3,1
  81a068:	1000981e 	bne	r2,zero,81a2cc <OSFlagPend+0x3a8>
  81a06c:	e0fffe17 	ldw	r3,-8(fp)
  81a070:	18800088 	cmpgei	r2,r3,2
  81a074:	1000041e 	bne	r2,zero,81a088 <OSFlagPend+0x164>
  81a078:	e0fffe17 	ldw	r3,-8(fp)
  81a07c:	1805003a 	cmpeq	r2,r3,zero
  81a080:	1000641e 	bne	r2,zero,81a214 <OSFlagPend+0x2f0>
  81a084:	0000bf06 	br	81a384 <OSFlagPend+0x460>
  81a088:	e0fffe17 	ldw	r3,-8(fp)
  81a08c:	188000a0 	cmpeqi	r2,r3,2
  81a090:	1000041e 	bne	r2,zero,81a0a4 <OSFlagPend+0x180>
  81a094:	e0fffe17 	ldw	r3,-8(fp)
  81a098:	188000e0 	cmpeqi	r2,r3,3
  81a09c:	10002f1e 	bne	r2,zero,81a15c <OSFlagPend+0x238>
  81a0a0:	0000b806 	br	81a384 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  81a0a4:	e0bff917 	ldw	r2,-28(fp)
  81a0a8:	10c0020b 	ldhu	r3,8(r2)
  81a0ac:	e0bffa0b 	ldhu	r2,-24(fp)
  81a0b0:	1884703a 	and	r2,r3,r2
  81a0b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81a0b8:	e0fff30b 	ldhu	r3,-52(fp)
  81a0bc:	e0bffa0b 	ldhu	r2,-24(fp)
  81a0c0:	18801a1e 	bne	r3,r2,81a12c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81a0c4:	e0bff203 	ldbu	r2,-56(fp)
  81a0c8:	10800058 	cmpnei	r2,r2,1
  81a0cc:	1000091e 	bne	r2,zero,81a0f4 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  81a0d0:	e0bff917 	ldw	r2,-28(fp)
  81a0d4:	1080020b 	ldhu	r2,8(r2)
  81a0d8:	1007883a 	mov	r3,r2
  81a0dc:	e0bff30b 	ldhu	r2,-52(fp)
  81a0e0:	0084303a 	nor	r2,zero,r2
  81a0e4:	1884703a 	and	r2,r3,r2
  81a0e8:	1007883a 	mov	r3,r2
  81a0ec:	e0bff917 	ldw	r2,-28(fp)
  81a0f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81a0f4:	00802174 	movhi	r2,133
  81a0f8:	1082fa04 	addi	r2,r2,3048
  81a0fc:	10c00017 	ldw	r3,0(r2)
  81a100:	e0bff30b 	ldhu	r2,-52(fp)
  81a104:	18800b0d 	sth	r2,44(r3)
  81a108:	e0bff117 	ldw	r2,-60(fp)
  81a10c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a110:	e0bfef17 	ldw	r2,-68(fp)
  81a114:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81a118:	e0800217 	ldw	r2,8(fp)
  81a11c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81a120:	e0bff30b 	ldhu	r2,-52(fp)
  81a124:	e0bfff15 	stw	r2,-4(fp)
  81a128:	00010906 	br	81a550 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81a12c:	e1bffa0b 	ldhu	r6,-24(fp)
  81a130:	e1fffb03 	ldbu	r7,-20(fp)
  81a134:	e0bffc0b 	ldhu	r2,-16(fp)
  81a138:	e17ff404 	addi	r5,fp,-48
  81a13c:	d8800015 	stw	r2,0(sp)
  81a140:	e13ff917 	ldw	r4,-28(fp)
  81a144:	081aa4c0 	call	81aa4c <OS_FlagBlock>
  81a148:	e0bff117 	ldw	r2,-60(fp)
  81a14c:	e0bfee15 	stw	r2,-72(fp)
  81a150:	e0bfee17 	ldw	r2,-72(fp)
  81a154:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81a158:	00009506 	br	81a3b0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  81a15c:	e0bff917 	ldw	r2,-28(fp)
  81a160:	10c0020b 	ldhu	r3,8(r2)
  81a164:	e0bffa0b 	ldhu	r2,-24(fp)
  81a168:	1884703a 	and	r2,r3,r2
  81a16c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  81a170:	e0bff30b 	ldhu	r2,-52(fp)
  81a174:	1005003a 	cmpeq	r2,r2,zero
  81a178:	10001a1e 	bne	r2,zero,81a1e4 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81a17c:	e0bff203 	ldbu	r2,-56(fp)
  81a180:	10800058 	cmpnei	r2,r2,1
  81a184:	1000091e 	bne	r2,zero,81a1ac <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  81a188:	e0bff917 	ldw	r2,-28(fp)
  81a18c:	1080020b 	ldhu	r2,8(r2)
  81a190:	1007883a 	mov	r3,r2
  81a194:	e0bff30b 	ldhu	r2,-52(fp)
  81a198:	0084303a 	nor	r2,zero,r2
  81a19c:	1884703a 	and	r2,r3,r2
  81a1a0:	1007883a 	mov	r3,r2
  81a1a4:	e0bff917 	ldw	r2,-28(fp)
  81a1a8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81a1ac:	00802174 	movhi	r2,133
  81a1b0:	1082fa04 	addi	r2,r2,3048
  81a1b4:	10c00017 	ldw	r3,0(r2)
  81a1b8:	e0bff30b 	ldhu	r2,-52(fp)
  81a1bc:	18800b0d 	sth	r2,44(r3)
  81a1c0:	e0bff117 	ldw	r2,-60(fp)
  81a1c4:	e0bfed15 	stw	r2,-76(fp)
  81a1c8:	e0bfed17 	ldw	r2,-76(fp)
  81a1cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81a1d0:	e0800217 	ldw	r2,8(fp)
  81a1d4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81a1d8:	e0fff30b 	ldhu	r3,-52(fp)
  81a1dc:	e0ffff15 	stw	r3,-4(fp)
  81a1e0:	0000db06 	br	81a550 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81a1e4:	e1bffa0b 	ldhu	r6,-24(fp)
  81a1e8:	e1fffb03 	ldbu	r7,-20(fp)
  81a1ec:	e0bffc0b 	ldhu	r2,-16(fp)
  81a1f0:	e17ff404 	addi	r5,fp,-48
  81a1f4:	d8800015 	stw	r2,0(sp)
  81a1f8:	e13ff917 	ldw	r4,-28(fp)
  81a1fc:	081aa4c0 	call	81aa4c <OS_FlagBlock>
  81a200:	e0bff117 	ldw	r2,-60(fp)
  81a204:	e0bfec15 	stw	r2,-80(fp)
  81a208:	e0bfec17 	ldw	r2,-80(fp)
  81a20c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81a210:	00006706 	br	81a3b0 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  81a214:	e0bff917 	ldw	r2,-28(fp)
  81a218:	1080020b 	ldhu	r2,8(r2)
  81a21c:	0084303a 	nor	r2,zero,r2
  81a220:	1007883a 	mov	r3,r2
  81a224:	e0bffa0b 	ldhu	r2,-24(fp)
  81a228:	1884703a 	and	r2,r3,r2
  81a22c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81a230:	e0fff30b 	ldhu	r3,-52(fp)
  81a234:	e0bffa0b 	ldhu	r2,-24(fp)
  81a238:	1880181e 	bne	r3,r2,81a29c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81a23c:	e0bff203 	ldbu	r2,-56(fp)
  81a240:	10800058 	cmpnei	r2,r2,1
  81a244:	1000071e 	bne	r2,zero,81a264 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81a248:	e0bff917 	ldw	r2,-28(fp)
  81a24c:	10c0020b 	ldhu	r3,8(r2)
  81a250:	e0bff30b 	ldhu	r2,-52(fp)
  81a254:	1884b03a 	or	r2,r3,r2
  81a258:	1007883a 	mov	r3,r2
  81a25c:	e0bff917 	ldw	r2,-28(fp)
  81a260:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81a264:	00802174 	movhi	r2,133
  81a268:	1082fa04 	addi	r2,r2,3048
  81a26c:	10c00017 	ldw	r3,0(r2)
  81a270:	e0bff30b 	ldhu	r2,-52(fp)
  81a274:	18800b0d 	sth	r2,44(r3)
  81a278:	e0bff117 	ldw	r2,-60(fp)
  81a27c:	e0bfeb15 	stw	r2,-84(fp)
  81a280:	e0bfeb17 	ldw	r2,-84(fp)
  81a284:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81a288:	e0800217 	ldw	r2,8(fp)
  81a28c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81a290:	e0bff30b 	ldhu	r2,-52(fp)
  81a294:	e0bfff15 	stw	r2,-4(fp)
  81a298:	0000ad06 	br	81a550 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81a29c:	e1bffa0b 	ldhu	r6,-24(fp)
  81a2a0:	e1fffb03 	ldbu	r7,-20(fp)
  81a2a4:	e0bffc0b 	ldhu	r2,-16(fp)
  81a2a8:	e17ff404 	addi	r5,fp,-48
  81a2ac:	d8800015 	stw	r2,0(sp)
  81a2b0:	e13ff917 	ldw	r4,-28(fp)
  81a2b4:	081aa4c0 	call	81aa4c <OS_FlagBlock>
  81a2b8:	e0bff117 	ldw	r2,-60(fp)
  81a2bc:	e0bfea15 	stw	r2,-88(fp)
  81a2c0:	e0bfea17 	ldw	r2,-88(fp)
  81a2c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81a2c8:	00003906 	br	81a3b0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  81a2cc:	e0bff917 	ldw	r2,-28(fp)
  81a2d0:	1080020b 	ldhu	r2,8(r2)
  81a2d4:	0084303a 	nor	r2,zero,r2
  81a2d8:	1007883a 	mov	r3,r2
  81a2dc:	e0bffa0b 	ldhu	r2,-24(fp)
  81a2e0:	1884703a 	and	r2,r3,r2
  81a2e4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  81a2e8:	e0bff30b 	ldhu	r2,-52(fp)
  81a2ec:	1005003a 	cmpeq	r2,r2,zero
  81a2f0:	1000181e 	bne	r2,zero,81a354 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81a2f4:	e0bff203 	ldbu	r2,-56(fp)
  81a2f8:	10800058 	cmpnei	r2,r2,1
  81a2fc:	1000071e 	bne	r2,zero,81a31c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  81a300:	e0bff917 	ldw	r2,-28(fp)
  81a304:	10c0020b 	ldhu	r3,8(r2)
  81a308:	e0bff30b 	ldhu	r2,-52(fp)
  81a30c:	1884b03a 	or	r2,r3,r2
  81a310:	1007883a 	mov	r3,r2
  81a314:	e0bff917 	ldw	r2,-28(fp)
  81a318:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81a31c:	00802174 	movhi	r2,133
  81a320:	1082fa04 	addi	r2,r2,3048
  81a324:	10c00017 	ldw	r3,0(r2)
  81a328:	e0bff30b 	ldhu	r2,-52(fp)
  81a32c:	18800b0d 	sth	r2,44(r3)
  81a330:	e0bff117 	ldw	r2,-60(fp)
  81a334:	e0bfe915 	stw	r2,-92(fp)
  81a338:	e0bfe917 	ldw	r2,-92(fp)
  81a33c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81a340:	e0800217 	ldw	r2,8(fp)
  81a344:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81a348:	e0fff30b 	ldhu	r3,-52(fp)
  81a34c:	e0ffff15 	stw	r3,-4(fp)
  81a350:	00007f06 	br	81a550 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81a354:	e1bffa0b 	ldhu	r6,-24(fp)
  81a358:	e1fffb03 	ldbu	r7,-20(fp)
  81a35c:	e0bffc0b 	ldhu	r2,-16(fp)
  81a360:	e17ff404 	addi	r5,fp,-48
  81a364:	d8800015 	stw	r2,0(sp)
  81a368:	e13ff917 	ldw	r4,-28(fp)
  81a36c:	081aa4c0 	call	81aa4c <OS_FlagBlock>
  81a370:	e0bff117 	ldw	r2,-60(fp)
  81a374:	e0bfe815 	stw	r2,-96(fp)
  81a378:	e0bfe817 	ldw	r2,-96(fp)
  81a37c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81a380:	00000b06 	br	81a3b0 <OSFlagPend+0x48c>
  81a384:	e0bff117 	ldw	r2,-60(fp)
  81a388:	e0bfe715 	stw	r2,-100(fp)
  81a38c:	e0bfe717 	ldw	r2,-100(fp)
  81a390:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  81a394:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  81a398:	e0c00217 	ldw	r3,8(fp)
  81a39c:	00801bc4 	movi	r2,111
  81a3a0:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  81a3a4:	e0bff30b 	ldhu	r2,-52(fp)
  81a3a8:	e0bfff15 	stw	r2,-4(fp)
  81a3ac:	00006806 	br	81a550 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  81a3b0:	0818d000 	call	818d00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a3b4:	0005303a 	rdctl	r2,status
  81a3b8:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a3bc:	e0ffe617 	ldw	r3,-104(fp)
  81a3c0:	00bfff84 	movi	r2,-2
  81a3c4:	1884703a 	and	r2,r3,r2
  81a3c8:	1001703a 	wrctl	status,r2
  
  return context;
  81a3cc:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  81a3d0:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  81a3d4:	00802174 	movhi	r2,133
  81a3d8:	1082fa04 	addi	r2,r2,3048
  81a3dc:	10800017 	ldw	r2,0(r2)
  81a3e0:	10800c43 	ldbu	r2,49(r2)
  81a3e4:	10803fcc 	andi	r2,r2,255
  81a3e8:	1005003a 	cmpeq	r2,r2,zero
  81a3ec:	1000221e 	bne	r2,zero,81a478 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  81a3f0:	00802174 	movhi	r2,133
  81a3f4:	1082fa04 	addi	r2,r2,3048
  81a3f8:	10800017 	ldw	r2,0(r2)
  81a3fc:	10800c43 	ldbu	r2,49(r2)
  81a400:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81a404:	00802174 	movhi	r2,133
  81a408:	1082fa04 	addi	r2,r2,3048
  81a40c:	10800017 	ldw	r2,0(r2)
  81a410:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  81a414:	e13ff404 	addi	r4,fp,-48
  81a418:	081ae040 	call	81ae04 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  81a41c:	00802174 	movhi	r2,133
  81a420:	1082fa04 	addi	r2,r2,3048
  81a424:	10800017 	ldw	r2,0(r2)
  81a428:	10000c05 	stb	zero,48(r2)
  81a42c:	e0bff117 	ldw	r2,-60(fp)
  81a430:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a434:	e0bfe517 	ldw	r2,-108(fp)
  81a438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  81a43c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  81a440:	e0bff243 	ldbu	r2,-55(fp)
  81a444:	108000a0 	cmpeqi	r2,r2,2
  81a448:	1000011e 	bne	r2,zero,81a450 <OSFlagPend+0x52c>
  81a44c:	00000406 	br	81a460 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  81a450:	e0c00217 	ldw	r3,8(fp)
  81a454:	00800384 	movi	r2,14
  81a458:	18800005 	stb	r2,0(r3)
                 break;
  81a45c:	00000306 	br	81a46c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  81a460:	e0c00217 	ldw	r3,8(fp)
  81a464:	00800284 	movi	r2,10
  81a468:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  81a46c:	e0fff30b 	ldhu	r3,-52(fp)
  81a470:	e0ffff15 	stw	r3,-4(fp)
  81a474:	00003606 	br	81a550 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  81a478:	00802174 	movhi	r2,133
  81a47c:	1082fa04 	addi	r2,r2,3048
  81a480:	10800017 	ldw	r2,0(r2)
  81a484:	10800b0b 	ldhu	r2,44(r2)
  81a488:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  81a48c:	e0bff203 	ldbu	r2,-56(fp)
  81a490:	10800058 	cmpnei	r2,r2,1
  81a494:	1000261e 	bne	r2,zero,81a530 <OSFlagPend+0x60c>
        switch (wait_type) {
  81a498:	e0bffb03 	ldbu	r2,-20(fp)
  81a49c:	e0bffd15 	stw	r2,-12(fp)
  81a4a0:	e0fffd17 	ldw	r3,-12(fp)
  81a4a4:	1804803a 	cmplt	r2,r3,zero
  81a4a8:	1000181e 	bne	r2,zero,81a50c <OSFlagPend+0x5e8>
  81a4ac:	e0fffd17 	ldw	r3,-12(fp)
  81a4b0:	18800090 	cmplti	r2,r3,2
  81a4b4:	10000d1e 	bne	r2,zero,81a4ec <OSFlagPend+0x5c8>
  81a4b8:	e0fffd17 	ldw	r3,-12(fp)
  81a4bc:	18800108 	cmpgei	r2,r3,4
  81a4c0:	1000121e 	bne	r2,zero,81a50c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  81a4c4:	e0bff917 	ldw	r2,-28(fp)
  81a4c8:	1080020b 	ldhu	r2,8(r2)
  81a4cc:	1007883a 	mov	r3,r2
  81a4d0:	e0bff30b 	ldhu	r2,-52(fp)
  81a4d4:	0084303a 	nor	r2,zero,r2
  81a4d8:	1884703a 	and	r2,r3,r2
  81a4dc:	1007883a 	mov	r3,r2
  81a4e0:	e0bff917 	ldw	r2,-28(fp)
  81a4e4:	10c0020d 	sth	r3,8(r2)
                 break;
  81a4e8:	00001106 	br	81a530 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  81a4ec:	e0bff917 	ldw	r2,-28(fp)
  81a4f0:	10c0020b 	ldhu	r3,8(r2)
  81a4f4:	e0bff30b 	ldhu	r2,-52(fp)
  81a4f8:	1884b03a 	or	r2,r3,r2
  81a4fc:	1007883a 	mov	r3,r2
  81a500:	e0bff917 	ldw	r2,-28(fp)
  81a504:	10c0020d 	sth	r3,8(r2)
                 break;
  81a508:	00000906 	br	81a530 <OSFlagPend+0x60c>
  81a50c:	e0bff117 	ldw	r2,-60(fp)
  81a510:	e0bfe415 	stw	r2,-112(fp)
  81a514:	e0bfe417 	ldw	r2,-112(fp)
  81a518:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  81a51c:	e0c00217 	ldw	r3,8(fp)
  81a520:	00801bc4 	movi	r2,111
  81a524:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81a528:	e03fff15 	stw	zero,-4(fp)
  81a52c:	00000806 	br	81a550 <OSFlagPend+0x62c>
  81a530:	e0bff117 	ldw	r2,-60(fp)
  81a534:	e0bfe315 	stw	r2,-116(fp)
  81a538:	e0bfe317 	ldw	r2,-116(fp)
  81a53c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  81a540:	e0800217 	ldw	r2,8(fp)
  81a544:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  81a548:	e0bff30b 	ldhu	r2,-52(fp)
  81a54c:	e0bfff15 	stw	r2,-4(fp)
  81a550:	e0bfff17 	ldw	r2,-4(fp)
}
  81a554:	e037883a 	mov	sp,fp
  81a558:	dfc00117 	ldw	ra,4(sp)
  81a55c:	df000017 	ldw	fp,0(sp)
  81a560:	dec00204 	addi	sp,sp,8
  81a564:	f800283a 	ret

0081a568 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  81a568:	defffb04 	addi	sp,sp,-20
  81a56c:	df000415 	stw	fp,16(sp)
  81a570:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  81a574:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a578:	0005303a 	rdctl	r2,status
  81a57c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a580:	e0fffd17 	ldw	r3,-12(fp)
  81a584:	00bfff84 	movi	r2,-2
  81a588:	1884703a 	and	r2,r3,r2
  81a58c:	1001703a 	wrctl	status,r2
  
  return context;
  81a590:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81a594:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  81a598:	00802174 	movhi	r2,133
  81a59c:	1082fa04 	addi	r2,r2,3048
  81a5a0:	10800017 	ldw	r2,0(r2)
  81a5a4:	10800b0b 	ldhu	r2,44(r2)
  81a5a8:	e0bfff0d 	sth	r2,-4(fp)
  81a5ac:	e0bffe17 	ldw	r2,-8(fp)
  81a5b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a5b4:	e0bffc17 	ldw	r2,-16(fp)
  81a5b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  81a5bc:	e0bfff0b 	ldhu	r2,-4(fp)
}
  81a5c0:	e037883a 	mov	sp,fp
  81a5c4:	df000017 	ldw	fp,0(sp)
  81a5c8:	dec00104 	addi	sp,sp,4
  81a5cc:	f800283a 	ret

0081a5d0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  81a5d0:	deffed04 	addi	sp,sp,-76
  81a5d4:	dfc01215 	stw	ra,72(sp)
  81a5d8:	df001115 	stw	fp,68(sp)
  81a5dc:	df001104 	addi	fp,sp,68
  81a5e0:	e13ff915 	stw	r4,-28(fp)
  81a5e4:	e1fffc15 	stw	r7,-16(fp)
  81a5e8:	e17ffa0d 	sth	r5,-24(fp)
  81a5ec:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  81a5f0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81a5f4:	e0bffc17 	ldw	r2,-16(fp)
  81a5f8:	1004c03a 	cmpne	r2,r2,zero
  81a5fc:	1000021e 	bne	r2,zero,81a608 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  81a600:	e03fff15 	stw	zero,-4(fp)
  81a604:	0000d606 	br	81a960 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  81a608:	e0bff917 	ldw	r2,-28(fp)
  81a60c:	1004c03a 	cmpne	r2,r2,zero
  81a610:	1000051e 	bne	r2,zero,81a628 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81a614:	e0fffc17 	ldw	r3,-16(fp)
  81a618:	00801b84 	movi	r2,110
  81a61c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81a620:	e03fff15 	stw	zero,-4(fp)
  81a624:	0000ce06 	br	81a960 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  81a628:	e0bff917 	ldw	r2,-28(fp)
  81a62c:	10800003 	ldbu	r2,0(r2)
  81a630:	10803fcc 	andi	r2,r2,255
  81a634:	10800160 	cmpeqi	r2,r2,5
  81a638:	1000051e 	bne	r2,zero,81a650 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  81a63c:	e0fffc17 	ldw	r3,-16(fp)
  81a640:	00800044 	movi	r2,1
  81a644:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81a648:	e03fff15 	stw	zero,-4(fp)
  81a64c:	0000c406 	br	81a960 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a650:	0005303a 	rdctl	r2,status
  81a654:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a658:	e0fff417 	ldw	r3,-48(fp)
  81a65c:	00bfff84 	movi	r2,-2
  81a660:	1884703a 	and	r2,r3,r2
  81a664:	1001703a 	wrctl	status,r2
  
  return context;
  81a668:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  81a66c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  81a670:	e0bffb03 	ldbu	r2,-20(fp)
  81a674:	e0bffe15 	stw	r2,-8(fp)
  81a678:	e0fffe17 	ldw	r3,-8(fp)
  81a67c:	1805003a 	cmpeq	r2,r3,zero
  81a680:	1000041e 	bne	r2,zero,81a694 <OSFlagPost+0xc4>
  81a684:	e0fffe17 	ldw	r3,-8(fp)
  81a688:	18800060 	cmpeqi	r2,r3,1
  81a68c:	10000b1e 	bne	r2,zero,81a6bc <OSFlagPost+0xec>
  81a690:	00001206 	br	81a6dc <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  81a694:	e0bff917 	ldw	r2,-28(fp)
  81a698:	1080020b 	ldhu	r2,8(r2)
  81a69c:	1007883a 	mov	r3,r2
  81a6a0:	e0bffa0b 	ldhu	r2,-24(fp)
  81a6a4:	0084303a 	nor	r2,zero,r2
  81a6a8:	1884703a 	and	r2,r3,r2
  81a6ac:	1007883a 	mov	r3,r2
  81a6b0:	e0bff917 	ldw	r2,-28(fp)
  81a6b4:	10c0020d 	sth	r3,8(r2)
             break;
  81a6b8:	00001106 	br	81a700 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  81a6bc:	e0bff917 	ldw	r2,-28(fp)
  81a6c0:	10c0020b 	ldhu	r3,8(r2)
  81a6c4:	e0bffa0b 	ldhu	r2,-24(fp)
  81a6c8:	1884b03a 	or	r2,r3,r2
  81a6cc:	1007883a 	mov	r3,r2
  81a6d0:	e0bff917 	ldw	r2,-28(fp)
  81a6d4:	10c0020d 	sth	r3,8(r2)
             break;
  81a6d8:	00000906 	br	81a700 <OSFlagPost+0x130>
  81a6dc:	e0bff517 	ldw	r2,-44(fp)
  81a6e0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a6e4:	e0bff317 	ldw	r2,-52(fp)
  81a6e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  81a6ec:	e0fffc17 	ldw	r3,-16(fp)
  81a6f0:	00801c44 	movi	r2,113
  81a6f4:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  81a6f8:	e03fff15 	stw	zero,-4(fp)
  81a6fc:	00009806 	br	81a960 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  81a700:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  81a704:	e0bff917 	ldw	r2,-28(fp)
  81a708:	10800117 	ldw	r2,4(r2)
  81a70c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  81a710:	00007506 	br	81a8e8 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  81a714:	e0bff817 	ldw	r2,-32(fp)
  81a718:	10800483 	ldbu	r2,18(r2)
  81a71c:	10803fcc 	andi	r2,r2,255
  81a720:	e0bffd15 	stw	r2,-12(fp)
  81a724:	e0fffd17 	ldw	r3,-12(fp)
  81a728:	18800060 	cmpeqi	r2,r3,1
  81a72c:	10004d1e 	bne	r2,zero,81a864 <OSFlagPost+0x294>
  81a730:	e0fffd17 	ldw	r3,-12(fp)
  81a734:	18800088 	cmpgei	r2,r3,2
  81a738:	1000041e 	bne	r2,zero,81a74c <OSFlagPost+0x17c>
  81a73c:	e0fffd17 	ldw	r3,-12(fp)
  81a740:	1805003a 	cmpeq	r2,r3,zero
  81a744:	1000301e 	bne	r2,zero,81a808 <OSFlagPost+0x238>
  81a748:	00005b06 	br	81a8b8 <OSFlagPost+0x2e8>
  81a74c:	e0fffd17 	ldw	r3,-12(fp)
  81a750:	188000a0 	cmpeqi	r2,r3,2
  81a754:	1000041e 	bne	r2,zero,81a768 <OSFlagPost+0x198>
  81a758:	e0fffd17 	ldw	r3,-12(fp)
  81a75c:	188000e0 	cmpeqi	r2,r3,3
  81a760:	1000161e 	bne	r2,zero,81a7bc <OSFlagPost+0x1ec>
  81a764:	00005406 	br	81a8b8 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81a768:	e0bff917 	ldw	r2,-28(fp)
  81a76c:	10c0020b 	ldhu	r3,8(r2)
  81a770:	e0bff817 	ldw	r2,-32(fp)
  81a774:	1080040b 	ldhu	r2,16(r2)
  81a778:	1884703a 	and	r2,r3,r2
  81a77c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  81a780:	e0bff817 	ldw	r2,-32(fp)
  81a784:	1080040b 	ldhu	r2,16(r2)
  81a788:	10ffffcc 	andi	r3,r2,65535
  81a78c:	e0bff68b 	ldhu	r2,-38(fp)
  81a790:	1880521e 	bne	r3,r2,81a8dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81a794:	e17ff68b 	ldhu	r5,-38(fp)
  81a798:	e13ff817 	ldw	r4,-32(fp)
  81a79c:	081acf40 	call	81acf4 <OS_FlagTaskRdy>
  81a7a0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81a7a4:	e0bff603 	ldbu	r2,-40(fp)
  81a7a8:	10800058 	cmpnei	r2,r2,1
  81a7ac:	10004b1e 	bne	r2,zero,81a8dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81a7b0:	00800044 	movi	r2,1
  81a7b4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81a7b8:	00004806 	br	81a8dc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81a7bc:	e0bff917 	ldw	r2,-28(fp)
  81a7c0:	10c0020b 	ldhu	r3,8(r2)
  81a7c4:	e0bff817 	ldw	r2,-32(fp)
  81a7c8:	1080040b 	ldhu	r2,16(r2)
  81a7cc:	1884703a 	and	r2,r3,r2
  81a7d0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81a7d4:	e0bff68b 	ldhu	r2,-38(fp)
  81a7d8:	1005003a 	cmpeq	r2,r2,zero
  81a7dc:	10003f1e 	bne	r2,zero,81a8dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81a7e0:	e17ff68b 	ldhu	r5,-38(fp)
  81a7e4:	e13ff817 	ldw	r4,-32(fp)
  81a7e8:	081acf40 	call	81acf4 <OS_FlagTaskRdy>
  81a7ec:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81a7f0:	e0bff603 	ldbu	r2,-40(fp)
  81a7f4:	10800058 	cmpnei	r2,r2,1
  81a7f8:	1000381e 	bne	r2,zero,81a8dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81a7fc:	00800044 	movi	r2,1
  81a800:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81a804:	00003506 	br	81a8dc <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81a808:	e0bff917 	ldw	r2,-28(fp)
  81a80c:	1080020b 	ldhu	r2,8(r2)
  81a810:	0084303a 	nor	r2,zero,r2
  81a814:	1007883a 	mov	r3,r2
  81a818:	e0bff817 	ldw	r2,-32(fp)
  81a81c:	1080040b 	ldhu	r2,16(r2)
  81a820:	1884703a 	and	r2,r3,r2
  81a824:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  81a828:	e0bff817 	ldw	r2,-32(fp)
  81a82c:	1080040b 	ldhu	r2,16(r2)
  81a830:	10ffffcc 	andi	r3,r2,65535
  81a834:	e0bff68b 	ldhu	r2,-38(fp)
  81a838:	1880281e 	bne	r3,r2,81a8dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81a83c:	e17ff68b 	ldhu	r5,-38(fp)
  81a840:	e13ff817 	ldw	r4,-32(fp)
  81a844:	081acf40 	call	81acf4 <OS_FlagTaskRdy>
  81a848:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81a84c:	e0bff603 	ldbu	r2,-40(fp)
  81a850:	10800058 	cmpnei	r2,r2,1
  81a854:	1000211e 	bne	r2,zero,81a8dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81a858:	00800044 	movi	r2,1
  81a85c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81a860:	00001e06 	br	81a8dc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81a864:	e0bff917 	ldw	r2,-28(fp)
  81a868:	1080020b 	ldhu	r2,8(r2)
  81a86c:	0084303a 	nor	r2,zero,r2
  81a870:	1007883a 	mov	r3,r2
  81a874:	e0bff817 	ldw	r2,-32(fp)
  81a878:	1080040b 	ldhu	r2,16(r2)
  81a87c:	1884703a 	and	r2,r3,r2
  81a880:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81a884:	e0bff68b 	ldhu	r2,-38(fp)
  81a888:	1005003a 	cmpeq	r2,r2,zero
  81a88c:	1000131e 	bne	r2,zero,81a8dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81a890:	e17ff68b 	ldhu	r5,-38(fp)
  81a894:	e13ff817 	ldw	r4,-32(fp)
  81a898:	081acf40 	call	81acf4 <OS_FlagTaskRdy>
  81a89c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81a8a0:	e0bff603 	ldbu	r2,-40(fp)
  81a8a4:	10800058 	cmpnei	r2,r2,1
  81a8a8:	10000c1e 	bne	r2,zero,81a8dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81a8ac:	00800044 	movi	r2,1
  81a8b0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81a8b4:	00000906 	br	81a8dc <OSFlagPost+0x30c>
  81a8b8:	e0bff517 	ldw	r2,-44(fp)
  81a8bc:	e0bff215 	stw	r2,-56(fp)
  81a8c0:	e0bff217 	ldw	r2,-56(fp)
  81a8c4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  81a8c8:	e0fffc17 	ldw	r3,-16(fp)
  81a8cc:	00801bc4 	movi	r2,111
  81a8d0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81a8d4:	e03fff15 	stw	zero,-4(fp)
  81a8d8:	00002106 	br	81a960 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  81a8dc:	e0bff817 	ldw	r2,-32(fp)
  81a8e0:	10800017 	ldw	r2,0(r2)
  81a8e4:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  81a8e8:	e0bff817 	ldw	r2,-32(fp)
  81a8ec:	1004c03a 	cmpne	r2,r2,zero
  81a8f0:	103f881e 	bne	r2,zero,81a714 <OSFlagPost+0x144>
  81a8f4:	e0bff517 	ldw	r2,-44(fp)
  81a8f8:	e0bff115 	stw	r2,-60(fp)
  81a8fc:	e0bff117 	ldw	r2,-60(fp)
  81a900:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  81a904:	e0bff783 	ldbu	r2,-34(fp)
  81a908:	10800058 	cmpnei	r2,r2,1
  81a90c:	1000011e 	bne	r2,zero,81a914 <OSFlagPost+0x344>
        OS_Sched();
  81a910:	0818d000 	call	818d00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a914:	0005303a 	rdctl	r2,status
  81a918:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a91c:	e0fff017 	ldw	r3,-64(fp)
  81a920:	00bfff84 	movi	r2,-2
  81a924:	1884703a 	and	r2,r3,r2
  81a928:	1001703a 	wrctl	status,r2
  
  return context;
  81a92c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  81a930:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  81a934:	e0bff917 	ldw	r2,-28(fp)
  81a938:	1080020b 	ldhu	r2,8(r2)
  81a93c:	e0bff70d 	sth	r2,-36(fp)
  81a940:	e0bff517 	ldw	r2,-44(fp)
  81a944:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a948:	e0bfef17 	ldw	r2,-68(fp)
  81a94c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  81a950:	e0bffc17 	ldw	r2,-16(fp)
  81a954:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  81a958:	e0bff70b 	ldhu	r2,-36(fp)
  81a95c:	e0bfff15 	stw	r2,-4(fp)
  81a960:	e0bfff17 	ldw	r2,-4(fp)
}
  81a964:	e037883a 	mov	sp,fp
  81a968:	dfc00117 	ldw	ra,4(sp)
  81a96c:	df000017 	ldw	fp,0(sp)
  81a970:	dec00204 	addi	sp,sp,8
  81a974:	f800283a 	ret

0081a978 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  81a978:	defff804 	addi	sp,sp,-32
  81a97c:	df000715 	stw	fp,28(sp)
  81a980:	df000704 	addi	fp,sp,28
  81a984:	e13ffd15 	stw	r4,-12(fp)
  81a988:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  81a98c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  81a990:	e0bffe17 	ldw	r2,-8(fp)
  81a994:	1004c03a 	cmpne	r2,r2,zero
  81a998:	1000021e 	bne	r2,zero,81a9a4 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  81a99c:	e03fff15 	stw	zero,-4(fp)
  81a9a0:	00002506 	br	81aa38 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  81a9a4:	e0bffd17 	ldw	r2,-12(fp)
  81a9a8:	1004c03a 	cmpne	r2,r2,zero
  81a9ac:	1000051e 	bne	r2,zero,81a9c4 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81a9b0:	e0fffe17 	ldw	r3,-8(fp)
  81a9b4:	00801b84 	movi	r2,110
  81a9b8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81a9bc:	e03fff15 	stw	zero,-4(fp)
  81a9c0:	00001d06 	br	81aa38 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  81a9c4:	e0bffd17 	ldw	r2,-12(fp)
  81a9c8:	10800003 	ldbu	r2,0(r2)
  81a9cc:	10803fcc 	andi	r2,r2,255
  81a9d0:	10800160 	cmpeqi	r2,r2,5
  81a9d4:	1000051e 	bne	r2,zero,81a9ec <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  81a9d8:	e0fffe17 	ldw	r3,-8(fp)
  81a9dc:	00800044 	movi	r2,1
  81a9e0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81a9e4:	e03fff15 	stw	zero,-4(fp)
  81a9e8:	00001306 	br	81aa38 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a9ec:	0005303a 	rdctl	r2,status
  81a9f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a9f4:	e0fffa17 	ldw	r3,-24(fp)
  81a9f8:	00bfff84 	movi	r2,-2
  81a9fc:	1884703a 	and	r2,r3,r2
  81aa00:	1001703a 	wrctl	status,r2
  
  return context;
  81aa04:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81aa08:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  81aa0c:	e0bffd17 	ldw	r2,-12(fp)
  81aa10:	1080020b 	ldhu	r2,8(r2)
  81aa14:	e0bffc0d 	sth	r2,-16(fp)
  81aa18:	e0bffb17 	ldw	r2,-20(fp)
  81aa1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aa20:	e0bff917 	ldw	r2,-28(fp)
  81aa24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81aa28:	e0bffe17 	ldw	r2,-8(fp)
  81aa2c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  81aa30:	e0bffc0b 	ldhu	r2,-16(fp)
  81aa34:	e0bfff15 	stw	r2,-4(fp)
  81aa38:	e0bfff17 	ldw	r2,-4(fp)
}
  81aa3c:	e037883a 	mov	sp,fp
  81aa40:	df000017 	ldw	fp,0(sp)
  81aa44:	dec00104 	addi	sp,sp,4
  81aa48:	f800283a 	ret

0081aa4c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  81aa4c:	defff804 	addi	sp,sp,-32
  81aa50:	df000715 	stw	fp,28(sp)
  81aa54:	df000704 	addi	fp,sp,28
  81aa58:	e13ffb15 	stw	r4,-20(fp)
  81aa5c:	e17ffc15 	stw	r5,-16(fp)
  81aa60:	e0800117 	ldw	r2,4(fp)
  81aa64:	e1bffd0d 	sth	r6,-12(fp)
  81aa68:	e1fffe05 	stb	r7,-8(fp)
  81aa6c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  81aa70:	00802174 	movhi	r2,133
  81aa74:	1082fa04 	addi	r2,r2,3048
  81aa78:	10c00017 	ldw	r3,0(r2)
  81aa7c:	00802174 	movhi	r2,133
  81aa80:	1082fa04 	addi	r2,r2,3048
  81aa84:	10800017 	ldw	r2,0(r2)
  81aa88:	10800c03 	ldbu	r2,48(r2)
  81aa8c:	10800814 	ori	r2,r2,32
  81aa90:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  81aa94:	00802174 	movhi	r2,133
  81aa98:	1082fa04 	addi	r2,r2,3048
  81aa9c:	10800017 	ldw	r2,0(r2)
  81aaa0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  81aaa4:	00802174 	movhi	r2,133
  81aaa8:	1082fa04 	addi	r2,r2,3048
  81aaac:	10c00017 	ldw	r3,0(r2)
  81aab0:	e0bfff0b 	ldhu	r2,-4(fp)
  81aab4:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  81aab8:	00802174 	movhi	r2,133
  81aabc:	1082fa04 	addi	r2,r2,3048
  81aac0:	10c00017 	ldw	r3,0(r2)
  81aac4:	e0bffc17 	ldw	r2,-16(fp)
  81aac8:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  81aacc:	e0fffc17 	ldw	r3,-16(fp)
  81aad0:	e0bffd0b 	ldhu	r2,-12(fp)
  81aad4:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  81aad8:	e0fffc17 	ldw	r3,-16(fp)
  81aadc:	e0bffe03 	ldbu	r2,-8(fp)
  81aae0:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  81aae4:	00802174 	movhi	r2,133
  81aae8:	1082fa04 	addi	r2,r2,3048
  81aaec:	10c00017 	ldw	r3,0(r2)
  81aaf0:	e0bffc17 	ldw	r2,-16(fp)
  81aaf4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  81aaf8:	e0bffb17 	ldw	r2,-20(fp)
  81aafc:	10c00117 	ldw	r3,4(r2)
  81ab00:	e0bffc17 	ldw	r2,-16(fp)
  81ab04:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  81ab08:	e0bffc17 	ldw	r2,-16(fp)
  81ab0c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  81ab10:	e0fffc17 	ldw	r3,-16(fp)
  81ab14:	e0bffb17 	ldw	r2,-20(fp)
  81ab18:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  81ab1c:	e0bffb17 	ldw	r2,-20(fp)
  81ab20:	10800117 	ldw	r2,4(r2)
  81ab24:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  81ab28:	e0bffa17 	ldw	r2,-24(fp)
  81ab2c:	1005003a 	cmpeq	r2,r2,zero
  81ab30:	1000031e 	bne	r2,zero,81ab40 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  81ab34:	e0fffa17 	ldw	r3,-24(fp)
  81ab38:	e0bffc17 	ldw	r2,-16(fp)
  81ab3c:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  81ab40:	e0fffb17 	ldw	r3,-20(fp)
  81ab44:	e0bffc17 	ldw	r2,-16(fp)
  81ab48:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  81ab4c:	00802174 	movhi	r2,133
  81ab50:	1082fa04 	addi	r2,r2,3048
  81ab54:	10800017 	ldw	r2,0(r2)
  81ab58:	10800d03 	ldbu	r2,52(r2)
  81ab5c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81ab60:	e13ff903 	ldbu	r4,-28(fp)
  81ab64:	e0fff903 	ldbu	r3,-28(fp)
  81ab68:	00802174 	movhi	r2,133
  81ab6c:	1082f744 	addi	r2,r2,3037
  81ab70:	10c5883a 	add	r2,r2,r3
  81ab74:	10800003 	ldbu	r2,0(r2)
  81ab78:	1007883a 	mov	r3,r2
  81ab7c:	00802174 	movhi	r2,133
  81ab80:	1082fa04 	addi	r2,r2,3048
  81ab84:	10800017 	ldw	r2,0(r2)
  81ab88:	10800d43 	ldbu	r2,53(r2)
  81ab8c:	0084303a 	nor	r2,zero,r2
  81ab90:	1884703a 	and	r2,r3,r2
  81ab94:	1007883a 	mov	r3,r2
  81ab98:	00802174 	movhi	r2,133
  81ab9c:	1082f744 	addi	r2,r2,3037
  81aba0:	1105883a 	add	r2,r2,r4
  81aba4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  81aba8:	e0fff903 	ldbu	r3,-28(fp)
  81abac:	00802174 	movhi	r2,133
  81abb0:	1082f744 	addi	r2,r2,3037
  81abb4:	10c5883a 	add	r2,r2,r3
  81abb8:	10800003 	ldbu	r2,0(r2)
  81abbc:	10803fcc 	andi	r2,r2,255
  81abc0:	1004c03a 	cmpne	r2,r2,zero
  81abc4:	10000e1e 	bne	r2,zero,81ac00 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81abc8:	00802174 	movhi	r2,133
  81abcc:	1082fa04 	addi	r2,r2,3048
  81abd0:	10800017 	ldw	r2,0(r2)
  81abd4:	10800d83 	ldbu	r2,54(r2)
  81abd8:	0084303a 	nor	r2,zero,r2
  81abdc:	1007883a 	mov	r3,r2
  81abe0:	00802174 	movhi	r2,133
  81abe4:	1082f704 	addi	r2,r2,3036
  81abe8:	10800003 	ldbu	r2,0(r2)
  81abec:	1884703a 	and	r2,r3,r2
  81abf0:	1007883a 	mov	r3,r2
  81abf4:	00802174 	movhi	r2,133
  81abf8:	1082f704 	addi	r2,r2,3036
  81abfc:	10c00005 	stb	r3,0(r2)
    }
}
  81ac00:	e037883a 	mov	sp,fp
  81ac04:	df000017 	ldw	fp,0(sp)
  81ac08:	dec00104 	addi	sp,sp,4
  81ac0c:	f800283a 	ret

0081ac10 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  81ac10:	defffb04 	addi	sp,sp,-20
  81ac14:	dfc00415 	stw	ra,16(sp)
  81ac18:	df000315 	stw	fp,12(sp)
  81ac1c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  81ac20:	010038f4 	movhi	r4,227
  81ac24:	211a4e04 	addi	r4,r4,26936
  81ac28:	0140dc04 	movi	r5,880
  81ac2c:	0818c400 	call	818c40 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  81ac30:	008038f4 	movhi	r2,227
  81ac34:	109a4e04 	addi	r2,r2,26936
  81ac38:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  81ac3c:	008038f4 	movhi	r2,227
  81ac40:	109a5904 	addi	r2,r2,26980
  81ac44:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81ac48:	e03fff0d 	sth	zero,-4(fp)
  81ac4c:	00001306 	br	81ac9c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81ac50:	e0bffe17 	ldw	r2,-8(fp)
  81ac54:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  81ac58:	e0fffe17 	ldw	r3,-8(fp)
  81ac5c:	e0bffd17 	ldw	r2,-12(fp)
  81ac60:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  81ac64:	e0fffe17 	ldw	r3,-8(fp)
  81ac68:	00800fc4 	movi	r2,63
  81ac6c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81ac70:	e0bffe17 	ldw	r2,-8(fp)
  81ac74:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  81ac78:	e0bffe17 	ldw	r2,-8(fp)
  81ac7c:	10800b04 	addi	r2,r2,44
  81ac80:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  81ac84:	e0bffd17 	ldw	r2,-12(fp)
  81ac88:	10800b04 	addi	r2,r2,44
  81ac8c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  81ac90:	e0bfff0b 	ldhu	r2,-4(fp)
  81ac94:	10800044 	addi	r2,r2,1
  81ac98:	e0bfff0d 	sth	r2,-4(fp)
  81ac9c:	e0bfff0b 	ldhu	r2,-4(fp)
  81aca0:	108004f0 	cmpltui	r2,r2,19
  81aca4:	103fea1e 	bne	r2,zero,81ac50 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81aca8:	e0bffe17 	ldw	r2,-8(fp)
  81acac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  81acb0:	e0bffe17 	ldw	r2,-8(fp)
  81acb4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  81acb8:	e0fffe17 	ldw	r3,-8(fp)
  81acbc:	00800fc4 	movi	r2,63
  81acc0:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81acc4:	e0bffe17 	ldw	r2,-8(fp)
  81acc8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  81accc:	00c02174 	movhi	r3,133
  81acd0:	18c2fc04 	addi	r3,r3,3056
  81acd4:	008038f4 	movhi	r2,227
  81acd8:	109a4e04 	addi	r2,r2,26936
  81acdc:	18800015 	stw	r2,0(r3)
#endif
}
  81ace0:	e037883a 	mov	sp,fp
  81ace4:	dfc00117 	ldw	ra,4(sp)
  81ace8:	df000017 	ldw	fp,0(sp)
  81acec:	dec00204 	addi	sp,sp,8
  81acf0:	f800283a 	ret

0081acf4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  81acf4:	defffa04 	addi	sp,sp,-24
  81acf8:	dfc00515 	stw	ra,20(sp)
  81acfc:	df000415 	stw	fp,16(sp)
  81ad00:	df000404 	addi	fp,sp,16
  81ad04:	e13ffe15 	stw	r4,-8(fp)
  81ad08:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  81ad0c:	e0bffe17 	ldw	r2,-8(fp)
  81ad10:	10800217 	ldw	r2,8(r2)
  81ad14:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  81ad18:	e0bffd17 	ldw	r2,-12(fp)
  81ad1c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  81ad20:	e0fffd17 	ldw	r3,-12(fp)
  81ad24:	e0bfff0b 	ldhu	r2,-4(fp)
  81ad28:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  81ad2c:	e0bffd17 	ldw	r2,-12(fp)
  81ad30:	10c00c03 	ldbu	r3,48(r2)
  81ad34:	00bff7c4 	movi	r2,-33
  81ad38:	1884703a 	and	r2,r3,r2
  81ad3c:	1007883a 	mov	r3,r2
  81ad40:	e0bffd17 	ldw	r2,-12(fp)
  81ad44:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  81ad48:	e0bffd17 	ldw	r2,-12(fp)
  81ad4c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  81ad50:	e0bffd17 	ldw	r2,-12(fp)
  81ad54:	10800c03 	ldbu	r2,48(r2)
  81ad58:	10803fcc 	andi	r2,r2,255
  81ad5c:	1004c03a 	cmpne	r2,r2,zero
  81ad60:	10001f1e 	bne	r2,zero,81ade0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  81ad64:	e0bffd17 	ldw	r2,-12(fp)
  81ad68:	10c00d83 	ldbu	r3,54(r2)
  81ad6c:	00802174 	movhi	r2,133
  81ad70:	1082f704 	addi	r2,r2,3036
  81ad74:	10800003 	ldbu	r2,0(r2)
  81ad78:	1884b03a 	or	r2,r3,r2
  81ad7c:	1007883a 	mov	r3,r2
  81ad80:	00802174 	movhi	r2,133
  81ad84:	1082f704 	addi	r2,r2,3036
  81ad88:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81ad8c:	e0bffd17 	ldw	r2,-12(fp)
  81ad90:	10800d03 	ldbu	r2,52(r2)
  81ad94:	11003fcc 	andi	r4,r2,255
  81ad98:	e0bffd17 	ldw	r2,-12(fp)
  81ad9c:	10800d03 	ldbu	r2,52(r2)
  81ada0:	10c03fcc 	andi	r3,r2,255
  81ada4:	00802174 	movhi	r2,133
  81ada8:	1082f744 	addi	r2,r2,3037
  81adac:	10c5883a 	add	r2,r2,r3
  81adb0:	10c00003 	ldbu	r3,0(r2)
  81adb4:	e0bffd17 	ldw	r2,-12(fp)
  81adb8:	10800d43 	ldbu	r2,53(r2)
  81adbc:	1884b03a 	or	r2,r3,r2
  81adc0:	1007883a 	mov	r3,r2
  81adc4:	00802174 	movhi	r2,133
  81adc8:	1082f744 	addi	r2,r2,3037
  81adcc:	1105883a 	add	r2,r2,r4
  81add0:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  81add4:	00800044 	movi	r2,1
  81add8:	e0bffc05 	stb	r2,-16(fp)
  81addc:	00000106 	br	81ade4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  81ade0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  81ade4:	e13ffe17 	ldw	r4,-8(fp)
  81ade8:	081ae040 	call	81ae04 <OS_FlagUnlink>
    return (sched);
  81adec:	e0bffc03 	ldbu	r2,-16(fp)
}
  81adf0:	e037883a 	mov	sp,fp
  81adf4:	dfc00117 	ldw	ra,4(sp)
  81adf8:	df000017 	ldw	fp,0(sp)
  81adfc:	dec00204 	addi	sp,sp,8
  81ae00:	f800283a 	ret

0081ae04 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  81ae04:	defffa04 	addi	sp,sp,-24
  81ae08:	df000515 	stw	fp,20(sp)
  81ae0c:	df000504 	addi	fp,sp,20
  81ae10:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  81ae14:	e0bfff17 	ldw	r2,-4(fp)
  81ae18:	10800117 	ldw	r2,4(r2)
  81ae1c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  81ae20:	e0bfff17 	ldw	r2,-4(fp)
  81ae24:	10800017 	ldw	r2,0(r2)
  81ae28:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  81ae2c:	e0bffc17 	ldw	r2,-16(fp)
  81ae30:	1004c03a 	cmpne	r2,r2,zero
  81ae34:	10000c1e 	bne	r2,zero,81ae68 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  81ae38:	e0bfff17 	ldw	r2,-4(fp)
  81ae3c:	10800317 	ldw	r2,12(r2)
  81ae40:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  81ae44:	e0fffd17 	ldw	r3,-12(fp)
  81ae48:	e0bffb17 	ldw	r2,-20(fp)
  81ae4c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  81ae50:	e0bffb17 	ldw	r2,-20(fp)
  81ae54:	1005003a 	cmpeq	r2,r2,zero
  81ae58:	10000c1e 	bne	r2,zero,81ae8c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  81ae5c:	e0bffb17 	ldw	r2,-20(fp)
  81ae60:	10000115 	stw	zero,4(r2)
  81ae64:	00000906 	br	81ae8c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  81ae68:	e0fffc17 	ldw	r3,-16(fp)
  81ae6c:	e0bffb17 	ldw	r2,-20(fp)
  81ae70:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  81ae74:	e0bffb17 	ldw	r2,-20(fp)
  81ae78:	1005003a 	cmpeq	r2,r2,zero
  81ae7c:	1000031e 	bne	r2,zero,81ae8c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  81ae80:	e0fffb17 	ldw	r3,-20(fp)
  81ae84:	e0bffc17 	ldw	r2,-16(fp)
  81ae88:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  81ae8c:	e0bfff17 	ldw	r2,-4(fp)
  81ae90:	10800217 	ldw	r2,8(r2)
  81ae94:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  81ae98:	e0bffe17 	ldw	r2,-8(fp)
  81ae9c:	10000a15 	stw	zero,40(r2)
#endif
}
  81aea0:	e037883a 	mov	sp,fp
  81aea4:	df000017 	ldw	fp,0(sp)
  81aea8:	dec00104 	addi	sp,sp,4
  81aeac:	f800283a 	ret

0081aeb0 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
  81aeb0:	defff904 	addi	sp,sp,-28
  81aeb4:	df000615 	stw	fp,24(sp)
  81aeb8:	df000604 	addi	fp,sp,24
  81aebc:	e13ffe15 	stw	r4,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
  81aec0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
  81aec4:	e0bffe17 	ldw	r2,-8(fp)
  81aec8:	1004c03a 	cmpne	r2,r2,zero
  81aecc:	1000021e 	bne	r2,zero,81aed8 <OSMboxAccept+0x28>
        return ((void *)0);
  81aed0:	e03fff15 	stw	zero,-4(fp)
  81aed4:	00001a06 	br	81af40 <OSMboxAccept+0x90>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
  81aed8:	e0bffe17 	ldw	r2,-8(fp)
  81aedc:	10800003 	ldbu	r2,0(r2)
  81aee0:	10803fcc 	andi	r2,r2,255
  81aee4:	10800060 	cmpeqi	r2,r2,1
  81aee8:	1000021e 	bne	r2,zero,81aef4 <OSMboxAccept+0x44>
        return ((void *)0);
  81aeec:	e03fff15 	stw	zero,-4(fp)
  81aef0:	00001306 	br	81af40 <OSMboxAccept+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81aef4:	0005303a 	rdctl	r2,status
  81aef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81aefc:	e0fffb17 	ldw	r3,-20(fp)
  81af00:	00bfff84 	movi	r2,-2
  81af04:	1884703a 	and	r2,r3,r2
  81af08:	1001703a 	wrctl	status,r2
  
  return context;
  81af0c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81af10:	e0bffc15 	stw	r2,-16(fp)
    pmsg               = pevent->OSEventPtr;
  81af14:	e0bffe17 	ldw	r2,-8(fp)
  81af18:	10800117 	ldw	r2,4(r2)
  81af1c:	e0bffd15 	stw	r2,-12(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
  81af20:	e0bffe17 	ldw	r2,-8(fp)
  81af24:	10000115 	stw	zero,4(r2)
  81af28:	e0bffc17 	ldw	r2,-16(fp)
  81af2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81af30:	e0bffa17 	ldw	r2,-24(fp)
  81af34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
  81af38:	e0bffd17 	ldw	r2,-12(fp)
  81af3c:	e0bfff15 	stw	r2,-4(fp)
  81af40:	e0bfff17 	ldw	r2,-4(fp)
}
  81af44:	e037883a 	mov	sp,fp
  81af48:	df000017 	ldw	fp,0(sp)
  81af4c:	dec00104 	addi	sp,sp,4
  81af50:	f800283a 	ret

0081af54 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
  81af54:	defff804 	addi	sp,sp,-32
  81af58:	dfc00715 	stw	ra,28(sp)
  81af5c:	df000615 	stw	fp,24(sp)
  81af60:	df000604 	addi	fp,sp,24
  81af64:	e13ffe15 	stw	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81af68:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81af6c:	00802174 	movhi	r2,133
  81af70:	1082f904 	addi	r2,r2,3044
  81af74:	10800003 	ldbu	r2,0(r2)
  81af78:	10803fcc 	andi	r2,r2,255
  81af7c:	1005003a 	cmpeq	r2,r2,zero
  81af80:	1000021e 	bne	r2,zero,81af8c <OSMboxCreate+0x38>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81af84:	e03fff15 	stw	zero,-4(fp)
  81af88:	00003106 	br	81b050 <OSMboxCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81af8c:	0005303a 	rdctl	r2,status
  81af90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81af94:	e0fffb17 	ldw	r3,-20(fp)
  81af98:	00bfff84 	movi	r2,-2
  81af9c:	1884703a 	and	r2,r3,r2
  81afa0:	1001703a 	wrctl	status,r2
  
  return context;
  81afa4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81afa8:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  81afac:	00802174 	movhi	r2,133
  81afb0:	1082f804 	addi	r2,r2,3040
  81afb4:	10800017 	ldw	r2,0(r2)
  81afb8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  81afbc:	00802174 	movhi	r2,133
  81afc0:	1082f804 	addi	r2,r2,3040
  81afc4:	10800017 	ldw	r2,0(r2)
  81afc8:	1005003a 	cmpeq	r2,r2,zero
  81afcc:	1000081e 	bne	r2,zero,81aff0 <OSMboxCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81afd0:	00802174 	movhi	r2,133
  81afd4:	1082f804 	addi	r2,r2,3040
  81afd8:	10800017 	ldw	r2,0(r2)
  81afdc:	10800117 	ldw	r2,4(r2)
  81afe0:	1007883a 	mov	r3,r2
  81afe4:	00802174 	movhi	r2,133
  81afe8:	1082f804 	addi	r2,r2,3040
  81afec:	10c00015 	stw	r3,0(r2)
  81aff0:	e0bffc17 	ldw	r2,-16(fp)
  81aff4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aff8:	e0bffa17 	ldw	r2,-24(fp)
  81affc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
  81b000:	e0bffd17 	ldw	r2,-12(fp)
  81b004:	1005003a 	cmpeq	r2,r2,zero
  81b008:	10000f1e 	bne	r2,zero,81b048 <OSMboxCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
  81b00c:	e0fffd17 	ldw	r3,-12(fp)
  81b010:	00800044 	movi	r2,1
  81b014:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = 0;
  81b018:	e0bffd17 	ldw	r2,-12(fp)
  81b01c:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
  81b020:	e0fffd17 	ldw	r3,-12(fp)
  81b024:	e0bffe17 	ldw	r2,-8(fp)
  81b028:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
  81b02c:	e0fffd17 	ldw	r3,-12(fp)
  81b030:	00800fc4 	movi	r2,63
  81b034:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  81b038:	e0bffd17 	ldw	r2,-12(fp)
  81b03c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
  81b040:	e13ffd17 	ldw	r4,-12(fp)
  81b044:	08188740 	call	818874 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
  81b048:	e0bffd17 	ldw	r2,-12(fp)
  81b04c:	e0bfff15 	stw	r2,-4(fp)
  81b050:	e0bfff17 	ldw	r2,-4(fp)
}
  81b054:	e037883a 	mov	sp,fp
  81b058:	dfc00117 	ldw	ra,4(sp)
  81b05c:	df000017 	ldw	fp,0(sp)
  81b060:	dec00204 	addi	sp,sp,8
  81b064:	f800283a 	ret

0081b068 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81b068:	defff104 	addi	sp,sp,-60
  81b06c:	dfc00e15 	stw	ra,56(sp)
  81b070:	df000d15 	stw	fp,52(sp)
  81b074:	df000d04 	addi	fp,sp,52
  81b078:	e13ffb15 	stw	r4,-20(fp)
  81b07c:	e1bffd15 	stw	r6,-12(fp)
  81b080:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81b084:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81b088:	e0bffd17 	ldw	r2,-12(fp)
  81b08c:	1004c03a 	cmpne	r2,r2,zero
  81b090:	1000031e 	bne	r2,zero,81b0a0 <OSMboxDel+0x38>
        return (pevent);
  81b094:	e0bffb17 	ldw	r2,-20(fp)
  81b098:	e0bfff15 	stw	r2,-4(fp)
  81b09c:	00009406 	br	81b2f0 <OSMboxDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81b0a0:	e0bffb17 	ldw	r2,-20(fp)
  81b0a4:	1004c03a 	cmpne	r2,r2,zero
  81b0a8:	1000061e 	bne	r2,zero,81b0c4 <OSMboxDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81b0ac:	e0fffd17 	ldw	r3,-12(fp)
  81b0b0:	00800104 	movi	r2,4
  81b0b4:	18800005 	stb	r2,0(r3)
        return (pevent);
  81b0b8:	e0fffb17 	ldw	r3,-20(fp)
  81b0bc:	e0ffff15 	stw	r3,-4(fp)
  81b0c0:	00008b06 	br	81b2f0 <OSMboxDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
  81b0c4:	e0bffb17 	ldw	r2,-20(fp)
  81b0c8:	10800003 	ldbu	r2,0(r2)
  81b0cc:	10803fcc 	andi	r2,r2,255
  81b0d0:	10800060 	cmpeqi	r2,r2,1
  81b0d4:	1000061e 	bne	r2,zero,81b0f0 <OSMboxDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81b0d8:	e0fffd17 	ldw	r3,-12(fp)
  81b0dc:	00800044 	movi	r2,1
  81b0e0:	18800005 	stb	r2,0(r3)
        return (pevent);
  81b0e4:	e0bffb17 	ldw	r2,-20(fp)
  81b0e8:	e0bfff15 	stw	r2,-4(fp)
  81b0ec:	00008006 	br	81b2f0 <OSMboxDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81b0f0:	00802174 	movhi	r2,133
  81b0f4:	1082f904 	addi	r2,r2,3044
  81b0f8:	10800003 	ldbu	r2,0(r2)
  81b0fc:	10803fcc 	andi	r2,r2,255
  81b100:	1005003a 	cmpeq	r2,r2,zero
  81b104:	1000061e 	bne	r2,zero,81b120 <OSMboxDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81b108:	e0fffd17 	ldw	r3,-12(fp)
  81b10c:	008003c4 	movi	r2,15
  81b110:	18800005 	stb	r2,0(r3)
        return (pevent);
  81b114:	e0fffb17 	ldw	r3,-20(fp)
  81b118:	e0ffff15 	stw	r3,-4(fp)
  81b11c:	00007406 	br	81b2f0 <OSMboxDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b120:	0005303a 	rdctl	r2,status
  81b124:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b128:	e0fff717 	ldw	r3,-36(fp)
  81b12c:	00bfff84 	movi	r2,-2
  81b130:	1884703a 	and	r2,r3,r2
  81b134:	1001703a 	wrctl	status,r2
  
  return context;
  81b138:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81b13c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
  81b140:	e0bffb17 	ldw	r2,-20(fp)
  81b144:	10800283 	ldbu	r2,10(r2)
  81b148:	10803fcc 	andi	r2,r2,255
  81b14c:	1005003a 	cmpeq	r2,r2,zero
  81b150:	1000031e 	bne	r2,zero,81b160 <OSMboxDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81b154:	00800044 	movi	r2,1
  81b158:	e0bffa05 	stb	r2,-24(fp)
  81b15c:	00000106 	br	81b164 <OSMboxDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81b160:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81b164:	e0bffc03 	ldbu	r2,-16(fp)
  81b168:	e0bffe15 	stw	r2,-8(fp)
  81b16c:	e0fffe17 	ldw	r3,-8(fp)
  81b170:	1805003a 	cmpeq	r2,r3,zero
  81b174:	1000041e 	bne	r2,zero,81b188 <OSMboxDel+0x120>
  81b178:	e0fffe17 	ldw	r3,-8(fp)
  81b17c:	18800060 	cmpeqi	r2,r3,1
  81b180:	10002d1e 	bne	r2,zero,81b238 <OSMboxDel+0x1d0>
  81b184:	00004f06 	br	81b2c4 <OSMboxDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
  81b188:	e0bffa03 	ldbu	r2,-24(fp)
  81b18c:	1004c03a 	cmpne	r2,r2,zero
  81b190:	10001a1e 	bne	r2,zero,81b1fc <OSMboxDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81b194:	e0fffb17 	ldw	r3,-20(fp)
  81b198:	00800fc4 	movi	r2,63
  81b19c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81b1a0:	e0bffb17 	ldw	r2,-20(fp)
  81b1a4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
  81b1a8:	e0bffb17 	ldw	r2,-20(fp)
  81b1ac:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
  81b1b0:	00802174 	movhi	r2,133
  81b1b4:	1082f804 	addi	r2,r2,3040
  81b1b8:	10c00017 	ldw	r3,0(r2)
  81b1bc:	e0bffb17 	ldw	r2,-20(fp)
  81b1c0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
  81b1c4:	e0bffb17 	ldw	r2,-20(fp)
  81b1c8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
  81b1cc:	00c02174 	movhi	r3,133
  81b1d0:	18c2f804 	addi	r3,r3,3040
  81b1d4:	e0bffb17 	ldw	r2,-20(fp)
  81b1d8:	18800015 	stw	r2,0(r3)
  81b1dc:	e0bff817 	ldw	r2,-32(fp)
  81b1e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b1e4:	e0bff617 	ldw	r2,-40(fp)
  81b1e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
  81b1ec:	e0bffd17 	ldw	r2,-12(fp)
  81b1f0:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
  81b1f4:	e03ff915 	stw	zero,-28(fp)
  81b1f8:	00003b06 	br	81b2e8 <OSMboxDel+0x280>
  81b1fc:	e0bff817 	ldw	r2,-32(fp)
  81b200:	e0bff515 	stw	r2,-44(fp)
  81b204:	e0bff517 	ldw	r2,-44(fp)
  81b208:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
  81b20c:	e0fffd17 	ldw	r3,-12(fp)
  81b210:	00801244 	movi	r2,73
  81b214:	18800005 	stb	r2,0(r3)
                 pevent_return       = pevent;
  81b218:	e0bffb17 	ldw	r2,-20(fp)
  81b21c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  81b220:	00003106 	br	81b2e8 <OSMboxDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
  81b224:	e13ffb17 	ldw	r4,-20(fp)
  81b228:	000b883a 	mov	r5,zero
  81b22c:	01800084 	movi	r6,2
  81b230:	000f883a 	mov	r7,zero
  81b234:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
  81b238:	e0bffb17 	ldw	r2,-20(fp)
  81b23c:	10800283 	ldbu	r2,10(r2)
  81b240:	10803fcc 	andi	r2,r2,255
  81b244:	1004c03a 	cmpne	r2,r2,zero
  81b248:	103ff61e 	bne	r2,zero,81b224 <OSMboxDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81b24c:	e0fffb17 	ldw	r3,-20(fp)
  81b250:	00800fc4 	movi	r2,63
  81b254:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81b258:	e0bffb17 	ldw	r2,-20(fp)
  81b25c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81b260:	e0bffb17 	ldw	r2,-20(fp)
  81b264:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  81b268:	00802174 	movhi	r2,133
  81b26c:	1082f804 	addi	r2,r2,3040
  81b270:	10c00017 	ldw	r3,0(r2)
  81b274:	e0bffb17 	ldw	r2,-20(fp)
  81b278:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81b27c:	e0bffb17 	ldw	r2,-20(fp)
  81b280:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81b284:	00c02174 	movhi	r3,133
  81b288:	18c2f804 	addi	r3,r3,3040
  81b28c:	e0bffb17 	ldw	r2,-20(fp)
  81b290:	18800015 	stw	r2,0(r3)
  81b294:	e0bff817 	ldw	r2,-32(fp)
  81b298:	e0bff415 	stw	r2,-48(fp)
  81b29c:	e0bff417 	ldw	r2,-48(fp)
  81b2a0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81b2a4:	e0bffa03 	ldbu	r2,-24(fp)
  81b2a8:	10800058 	cmpnei	r2,r2,1
  81b2ac:	1000011e 	bne	r2,zero,81b2b4 <OSMboxDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81b2b0:	0818d000 	call	818d00 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
  81b2b4:	e0bffd17 	ldw	r2,-12(fp)
  81b2b8:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
  81b2bc:	e03ff915 	stw	zero,-28(fp)
             break;
  81b2c0:	00000906 	br	81b2e8 <OSMboxDel+0x280>
  81b2c4:	e0bff817 	ldw	r2,-32(fp)
  81b2c8:	e0bff315 	stw	r2,-52(fp)
  81b2cc:	e0bff317 	ldw	r2,-52(fp)
  81b2d0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
  81b2d4:	e0fffd17 	ldw	r3,-12(fp)
  81b2d8:	008001c4 	movi	r2,7
  81b2dc:	18800005 	stb	r2,0(r3)
             pevent_return = pevent;
  81b2e0:	e0bffb17 	ldw	r2,-20(fp)
  81b2e4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81b2e8:	e0bff917 	ldw	r2,-28(fp)
  81b2ec:	e0bfff15 	stw	r2,-4(fp)
  81b2f0:	e0bfff17 	ldw	r2,-4(fp)
}
  81b2f4:	e037883a 	mov	sp,fp
  81b2f8:	dfc00117 	ldw	ra,4(sp)
  81b2fc:	df000017 	ldw	fp,0(sp)
  81b300:	dec00204 	addi	sp,sp,8
  81b304:	f800283a 	ret

0081b308 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81b308:	defff204 	addi	sp,sp,-56
  81b30c:	dfc00d15 	stw	ra,52(sp)
  81b310:	df000c15 	stw	fp,48(sp)
  81b314:	df000c04 	addi	fp,sp,48
  81b318:	e13ffb15 	stw	r4,-20(fp)
  81b31c:	e1bffd15 	stw	r6,-12(fp)
  81b320:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81b324:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81b328:	e0bffd17 	ldw	r2,-12(fp)
  81b32c:	1004c03a 	cmpne	r2,r2,zero
  81b330:	1000021e 	bne	r2,zero,81b33c <OSMboxPend+0x34>
        return ((void *)0);
  81b334:	e03fff15 	stw	zero,-4(fp)
  81b338:	00009f06 	br	81b5b8 <OSMboxPend+0x2b0>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81b33c:	e0bffb17 	ldw	r2,-20(fp)
  81b340:	1004c03a 	cmpne	r2,r2,zero
  81b344:	1000051e 	bne	r2,zero,81b35c <OSMboxPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81b348:	e0fffd17 	ldw	r3,-12(fp)
  81b34c:	00800104 	movi	r2,4
  81b350:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b354:	e03fff15 	stw	zero,-4(fp)
  81b358:	00009706 	br	81b5b8 <OSMboxPend+0x2b0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  81b35c:	e0bffb17 	ldw	r2,-20(fp)
  81b360:	10800003 	ldbu	r2,0(r2)
  81b364:	10803fcc 	andi	r2,r2,255
  81b368:	10800060 	cmpeqi	r2,r2,1
  81b36c:	1000051e 	bne	r2,zero,81b384 <OSMboxPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81b370:	e0fffd17 	ldw	r3,-12(fp)
  81b374:	00800044 	movi	r2,1
  81b378:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b37c:	e03fff15 	stw	zero,-4(fp)
  81b380:	00008d06 	br	81b5b8 <OSMboxPend+0x2b0>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  81b384:	00802174 	movhi	r2,133
  81b388:	1082f904 	addi	r2,r2,3044
  81b38c:	10800003 	ldbu	r2,0(r2)
  81b390:	10803fcc 	andi	r2,r2,255
  81b394:	1005003a 	cmpeq	r2,r2,zero
  81b398:	1000051e 	bne	r2,zero,81b3b0 <OSMboxPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  81b39c:	e0fffd17 	ldw	r3,-12(fp)
  81b3a0:	00800084 	movi	r2,2
  81b3a4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b3a8:	e03fff15 	stw	zero,-4(fp)
  81b3ac:	00008206 	br	81b5b8 <OSMboxPend+0x2b0>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  81b3b0:	00802174 	movhi	r2,133
  81b3b4:	1082eb04 	addi	r2,r2,2988
  81b3b8:	10800003 	ldbu	r2,0(r2)
  81b3bc:	10803fcc 	andi	r2,r2,255
  81b3c0:	1005003a 	cmpeq	r2,r2,zero
  81b3c4:	1000051e 	bne	r2,zero,81b3dc <OSMboxPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  81b3c8:	e0fffd17 	ldw	r3,-12(fp)
  81b3cc:	00800344 	movi	r2,13
  81b3d0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81b3d4:	e03fff15 	stw	zero,-4(fp)
  81b3d8:	00007706 	br	81b5b8 <OSMboxPend+0x2b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b3dc:	0005303a 	rdctl	r2,status
  81b3e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b3e4:	e0fff817 	ldw	r3,-32(fp)
  81b3e8:	00bfff84 	movi	r2,-2
  81b3ec:	1884703a 	and	r2,r3,r2
  81b3f0:	1001703a 	wrctl	status,r2
  
  return context;
  81b3f4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81b3f8:	e0bff915 	stw	r2,-28(fp)
    pmsg = pevent->OSEventPtr;
  81b3fc:	e0bffb17 	ldw	r2,-20(fp)
  81b400:	10800117 	ldw	r2,4(r2)
  81b404:	e0bffa15 	stw	r2,-24(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
  81b408:	e0bffa17 	ldw	r2,-24(fp)
  81b40c:	1005003a 	cmpeq	r2,r2,zero
  81b410:	10000b1e 	bne	r2,zero,81b440 <OSMboxPend+0x138>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
  81b414:	e0bffb17 	ldw	r2,-20(fp)
  81b418:	10000115 	stw	zero,4(r2)
  81b41c:	e0bff917 	ldw	r2,-28(fp)
  81b420:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b424:	e0bff717 	ldw	r2,-36(fp)
  81b428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81b42c:	e0bffd17 	ldw	r2,-12(fp)
  81b430:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
  81b434:	e0bffa17 	ldw	r2,-24(fp)
  81b438:	e0bfff15 	stw	r2,-4(fp)
  81b43c:	00005e06 	br	81b5b8 <OSMboxPend+0x2b0>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
  81b440:	00802174 	movhi	r2,133
  81b444:	1082fa04 	addi	r2,r2,3048
  81b448:	10c00017 	ldw	r3,0(r2)
  81b44c:	00802174 	movhi	r2,133
  81b450:	1082fa04 	addi	r2,r2,3048
  81b454:	10800017 	ldw	r2,0(r2)
  81b458:	10800c03 	ldbu	r2,48(r2)
  81b45c:	10800094 	ori	r2,r2,2
  81b460:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81b464:	00802174 	movhi	r2,133
  81b468:	1082fa04 	addi	r2,r2,3048
  81b46c:	10800017 	ldw	r2,0(r2)
  81b470:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
  81b474:	00802174 	movhi	r2,133
  81b478:	1082fa04 	addi	r2,r2,3048
  81b47c:	10c00017 	ldw	r3,0(r2)
  81b480:	e0bffc0b 	ldhu	r2,-16(fp)
  81b484:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  81b488:	e13ffb17 	ldw	r4,-20(fp)
  81b48c:	08184540 	call	818454 <OS_EventTaskWait>
  81b490:	e0bff917 	ldw	r2,-28(fp)
  81b494:	e0bff615 	stw	r2,-40(fp)
  81b498:	e0bff617 	ldw	r2,-40(fp)
  81b49c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
  81b4a0:	0818d000 	call	818d00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b4a4:	0005303a 	rdctl	r2,status
  81b4a8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b4ac:	e0fff517 	ldw	r3,-44(fp)
  81b4b0:	00bfff84 	movi	r2,-2
  81b4b4:	1884703a 	and	r2,r3,r2
  81b4b8:	1001703a 	wrctl	status,r2
  
  return context;
  81b4bc:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
  81b4c0:	e0bff915 	stw	r2,-28(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81b4c4:	00802174 	movhi	r2,133
  81b4c8:	1082fa04 	addi	r2,r2,3048
  81b4cc:	10800017 	ldw	r2,0(r2)
  81b4d0:	10800c43 	ldbu	r2,49(r2)
  81b4d4:	10803fcc 	andi	r2,r2,255
  81b4d8:	e0bffe15 	stw	r2,-8(fp)
  81b4dc:	e0fffe17 	ldw	r3,-8(fp)
  81b4e0:	1805003a 	cmpeq	r2,r3,zero
  81b4e4:	1000041e 	bne	r2,zero,81b4f8 <OSMboxPend+0x1f0>
  81b4e8:	e0fffe17 	ldw	r3,-8(fp)
  81b4ec:	188000a0 	cmpeqi	r2,r3,2
  81b4f0:	1000091e 	bne	r2,zero,81b518 <OSMboxPend+0x210>
  81b4f4:	00000d06 	br	81b52c <OSMboxPend+0x224>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
  81b4f8:	00802174 	movhi	r2,133
  81b4fc:	1082fa04 	addi	r2,r2,3048
  81b500:	10800017 	ldw	r2,0(r2)
  81b504:	10800917 	ldw	r2,36(r2)
  81b508:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  81b50c:	e0bffd17 	ldw	r2,-12(fp)
  81b510:	10000005 	stb	zero,0(r2)
             break;
  81b514:	00000e06 	br	81b550 <OSMboxPend+0x248>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  81b518:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81b51c:	e0fffd17 	ldw	r3,-12(fp)
  81b520:	00800384 	movi	r2,14
  81b524:	18800005 	stb	r2,0(r3)
             break;
  81b528:	00000906 	br	81b550 <OSMboxPend+0x248>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  81b52c:	00802174 	movhi	r2,133
  81b530:	1082fa04 	addi	r2,r2,3048
  81b534:	11000017 	ldw	r4,0(r2)
  81b538:	e17ffb17 	ldw	r5,-20(fp)
  81b53c:	08186b80 	call	8186b8 <OS_EventTaskRemove>
             pmsg = (void *)0;
  81b540:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81b544:	e0fffd17 	ldw	r3,-12(fp)
  81b548:	00800284 	movi	r2,10
  81b54c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81b550:	00802174 	movhi	r2,133
  81b554:	1082fa04 	addi	r2,r2,3048
  81b558:	10800017 	ldw	r2,0(r2)
  81b55c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81b560:	00802174 	movhi	r2,133
  81b564:	1082fa04 	addi	r2,r2,3048
  81b568:	10800017 	ldw	r2,0(r2)
  81b56c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81b570:	00802174 	movhi	r2,133
  81b574:	1082fa04 	addi	r2,r2,3048
  81b578:	10800017 	ldw	r2,0(r2)
  81b57c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81b580:	00802174 	movhi	r2,133
  81b584:	1082fa04 	addi	r2,r2,3048
  81b588:	10800017 	ldw	r2,0(r2)
  81b58c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  81b590:	00802174 	movhi	r2,133
  81b594:	1082fa04 	addi	r2,r2,3048
  81b598:	10800017 	ldw	r2,0(r2)
  81b59c:	10000915 	stw	zero,36(r2)
  81b5a0:	e0bff917 	ldw	r2,-28(fp)
  81b5a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b5a8:	e0bff417 	ldw	r2,-48(fp)
  81b5ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  81b5b0:	e0bffa17 	ldw	r2,-24(fp)
  81b5b4:	e0bfff15 	stw	r2,-4(fp)
  81b5b8:	e0bfff17 	ldw	r2,-4(fp)
}
  81b5bc:	e037883a 	mov	sp,fp
  81b5c0:	dfc00117 	ldw	ra,4(sp)
  81b5c4:	df000017 	ldw	fp,0(sp)
  81b5c8:	dec00204 	addi	sp,sp,8
  81b5cc:	f800283a 	ret

0081b5d0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81b5d0:	defff504 	addi	sp,sp,-44
  81b5d4:	dfc00a15 	stw	ra,40(sp)
  81b5d8:	df000915 	stw	fp,36(sp)
  81b5dc:	df000904 	addi	fp,sp,36
  81b5e0:	e13ffc15 	stw	r4,-16(fp)
  81b5e4:	e1bffe15 	stw	r6,-8(fp)
  81b5e8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81b5ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81b5f0:	e0bffe17 	ldw	r2,-8(fp)
  81b5f4:	1004c03a 	cmpne	r2,r2,zero
  81b5f8:	1000021e 	bne	r2,zero,81b604 <OSMboxPendAbort+0x34>
        return (0);
  81b5fc:	e03fff15 	stw	zero,-4(fp)
  81b600:	00004c06 	br	81b734 <OSMboxPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81b604:	e0bffc17 	ldw	r2,-16(fp)
  81b608:	1004c03a 	cmpne	r2,r2,zero
  81b60c:	1000051e 	bne	r2,zero,81b624 <OSMboxPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81b610:	e0fffe17 	ldw	r3,-8(fp)
  81b614:	00800104 	movi	r2,4
  81b618:	18800005 	stb	r2,0(r3)
        return (0);
  81b61c:	e03fff15 	stw	zero,-4(fp)
  81b620:	00004406 	br	81b734 <OSMboxPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
  81b624:	e0bffc17 	ldw	r2,-16(fp)
  81b628:	10800003 	ldbu	r2,0(r2)
  81b62c:	10803fcc 	andi	r2,r2,255
  81b630:	10800060 	cmpeqi	r2,r2,1
  81b634:	1000051e 	bne	r2,zero,81b64c <OSMboxPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81b638:	e0fffe17 	ldw	r3,-8(fp)
  81b63c:	00800044 	movi	r2,1
  81b640:	18800005 	stb	r2,0(r3)
        return (0);
  81b644:	e03fff15 	stw	zero,-4(fp)
  81b648:	00003a06 	br	81b734 <OSMboxPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b64c:	0005303a 	rdctl	r2,status
  81b650:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b654:	e0fff917 	ldw	r3,-28(fp)
  81b658:	00bfff84 	movi	r2,-2
  81b65c:	1884703a 	and	r2,r3,r2
  81b660:	1001703a 	wrctl	status,r2
  
  return context;
  81b664:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81b668:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
  81b66c:	e0bffc17 	ldw	r2,-16(fp)
  81b670:	10800283 	ldbu	r2,10(r2)
  81b674:	10803fcc 	andi	r2,r2,255
  81b678:	1005003a 	cmpeq	r2,r2,zero
  81b67c:	1000261e 	bne	r2,zero,81b718 <OSMboxPendAbort+0x148>
        nbr_tasks = 0;
  81b680:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81b684:	e0bffd03 	ldbu	r2,-12(fp)
  81b688:	10800060 	cmpeqi	r2,r2,1
  81b68c:	1000091e 	bne	r2,zero,81b6b4 <OSMboxPendAbort+0xe4>
  81b690:	00000e06 	br	81b6cc <OSMboxPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
  81b694:	e13ffc17 	ldw	r4,-16(fp)
  81b698:	000b883a 	mov	r5,zero
  81b69c:	01800084 	movi	r6,2
  81b6a0:	01c00084 	movi	r7,2
  81b6a4:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                     nbr_tasks++;
  81b6a8:	e0bffb03 	ldbu	r2,-20(fp)
  81b6ac:	10800044 	addi	r2,r2,1
  81b6b0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
  81b6b4:	e0bffc17 	ldw	r2,-16(fp)
  81b6b8:	10800283 	ldbu	r2,10(r2)
  81b6bc:	10803fcc 	andi	r2,r2,255
  81b6c0:	1004c03a 	cmpne	r2,r2,zero
  81b6c4:	103ff31e 	bne	r2,zero,81b694 <OSMboxPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81b6c8:	00000806 	br	81b6ec <OSMboxPendAbort+0x11c>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
  81b6cc:	e13ffc17 	ldw	r4,-16(fp)
  81b6d0:	000b883a 	mov	r5,zero
  81b6d4:	01800084 	movi	r6,2
  81b6d8:	01c00084 	movi	r7,2
  81b6dc:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                 nbr_tasks++;
  81b6e0:	e0bffb03 	ldbu	r2,-20(fp)
  81b6e4:	10800044 	addi	r2,r2,1
  81b6e8:	e0bffb05 	stb	r2,-20(fp)
  81b6ec:	e0bffa17 	ldw	r2,-24(fp)
  81b6f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b6f4:	e0bff817 	ldw	r2,-32(fp)
  81b6f8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  81b6fc:	0818d000 	call	818d00 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81b700:	e0fffe17 	ldw	r3,-8(fp)
  81b704:	00800384 	movi	r2,14
  81b708:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81b70c:	e0bffb03 	ldbu	r2,-20(fp)
  81b710:	e0bfff15 	stw	r2,-4(fp)
  81b714:	00000706 	br	81b734 <OSMboxPendAbort+0x164>
  81b718:	e0bffa17 	ldw	r2,-24(fp)
  81b71c:	e0bff715 	stw	r2,-36(fp)
  81b720:	e0bff717 	ldw	r2,-36(fp)
  81b724:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81b728:	e0bffe17 	ldw	r2,-8(fp)
  81b72c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
  81b730:	e03fff15 	stw	zero,-4(fp)
  81b734:	e0bfff17 	ldw	r2,-4(fp)
}
  81b738:	e037883a 	mov	sp,fp
  81b73c:	dfc00117 	ldw	ra,4(sp)
  81b740:	df000017 	ldw	fp,0(sp)
  81b744:	dec00204 	addi	sp,sp,8
  81b748:	f800283a 	ret

0081b74c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
  81b74c:	defff604 	addi	sp,sp,-40
  81b750:	dfc00915 	stw	ra,36(sp)
  81b754:	df000815 	stw	fp,32(sp)
  81b758:	df000804 	addi	fp,sp,32
  81b75c:	e13ffd15 	stw	r4,-12(fp)
  81b760:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81b764:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81b768:	e0bffd17 	ldw	r2,-12(fp)
  81b76c:	1004c03a 	cmpne	r2,r2,zero
  81b770:	1000031e 	bne	r2,zero,81b780 <OSMboxPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  81b774:	00800104 	movi	r2,4
  81b778:	e0bfff15 	stw	r2,-4(fp)
  81b77c:	00003a06 	br	81b868 <OSMboxPost+0x11c>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
  81b780:	e0bffe17 	ldw	r2,-8(fp)
  81b784:	1004c03a 	cmpne	r2,r2,zero
  81b788:	1000031e 	bne	r2,zero,81b798 <OSMboxPost+0x4c>
        return (OS_ERR_POST_NULL_PTR);
  81b78c:	008000c4 	movi	r2,3
  81b790:	e0bfff15 	stw	r2,-4(fp)
  81b794:	00003406 	br	81b868 <OSMboxPost+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  81b798:	e0bffd17 	ldw	r2,-12(fp)
  81b79c:	10800003 	ldbu	r2,0(r2)
  81b7a0:	10803fcc 	andi	r2,r2,255
  81b7a4:	10800060 	cmpeqi	r2,r2,1
  81b7a8:	1000031e 	bne	r2,zero,81b7b8 <OSMboxPost+0x6c>
        return (OS_ERR_EVENT_TYPE);
  81b7ac:	00800044 	movi	r2,1
  81b7b0:	e0bfff15 	stw	r2,-4(fp)
  81b7b4:	00002c06 	br	81b868 <OSMboxPost+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b7b8:	0005303a 	rdctl	r2,status
  81b7bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b7c0:	e0fffb17 	ldw	r3,-20(fp)
  81b7c4:	00bfff84 	movi	r2,-2
  81b7c8:	1884703a 	and	r2,r3,r2
  81b7cc:	1001703a 	wrctl	status,r2
  
  return context;
  81b7d0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81b7d4:	e0bffc15 	stw	r2,-16(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
  81b7d8:	e0bffd17 	ldw	r2,-12(fp)
  81b7dc:	10800283 	ldbu	r2,10(r2)
  81b7e0:	10803fcc 	andi	r2,r2,255
  81b7e4:	1005003a 	cmpeq	r2,r2,zero
  81b7e8:	10000c1e 	bne	r2,zero,81b81c <OSMboxPost+0xd0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
  81b7ec:	e13ffd17 	ldw	r4,-12(fp)
  81b7f0:	e17ffe17 	ldw	r5,-8(fp)
  81b7f4:	01800084 	movi	r6,2
  81b7f8:	000f883a 	mov	r7,zero
  81b7fc:	08182c00 	call	8182c0 <OS_EventTaskRdy>
  81b800:	e0bffc17 	ldw	r2,-16(fp)
  81b804:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b808:	e0bffa17 	ldw	r2,-24(fp)
  81b80c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  81b810:	0818d000 	call	818d00 <OS_Sched>
        return (OS_ERR_NONE);
  81b814:	e03fff15 	stw	zero,-4(fp)
  81b818:	00001306 	br	81b868 <OSMboxPost+0x11c>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
  81b81c:	e0bffd17 	ldw	r2,-12(fp)
  81b820:	10800117 	ldw	r2,4(r2)
  81b824:	1005003a 	cmpeq	r2,r2,zero
  81b828:	1000071e 	bne	r2,zero,81b848 <OSMboxPost+0xfc>
  81b82c:	e0bffc17 	ldw	r2,-16(fp)
  81b830:	e0bff915 	stw	r2,-28(fp)
  81b834:	e0bff917 	ldw	r2,-28(fp)
  81b838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
  81b83c:	00800504 	movi	r2,20
  81b840:	e0bfff15 	stw	r2,-4(fp)
  81b844:	00000806 	br	81b868 <OSMboxPost+0x11c>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
  81b848:	e0fffd17 	ldw	r3,-12(fp)
  81b84c:	e0bffe17 	ldw	r2,-8(fp)
  81b850:	18800115 	stw	r2,4(r3)
  81b854:	e0bffc17 	ldw	r2,-16(fp)
  81b858:	e0bff815 	stw	r2,-32(fp)
  81b85c:	e0bff817 	ldw	r2,-32(fp)
  81b860:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81b864:	e03fff15 	stw	zero,-4(fp)
  81b868:	e0bfff17 	ldw	r2,-4(fp)
}
  81b86c:	e037883a 	mov	sp,fp
  81b870:	dfc00117 	ldw	ra,4(sp)
  81b874:	df000017 	ldw	fp,0(sp)
  81b878:	dec00204 	addi	sp,sp,8
  81b87c:	f800283a 	ret

0081b880 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  81b880:	defff504 	addi	sp,sp,-44
  81b884:	dfc00a15 	stw	ra,40(sp)
  81b888:	df000915 	stw	fp,36(sp)
  81b88c:	df000904 	addi	fp,sp,36
  81b890:	e13ffc15 	stw	r4,-16(fp)
  81b894:	e17ffd15 	stw	r5,-12(fp)
  81b898:	e1bffe05 	stb	r6,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81b89c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81b8a0:	e0bffc17 	ldw	r2,-16(fp)
  81b8a4:	1004c03a 	cmpne	r2,r2,zero
  81b8a8:	1000031e 	bne	r2,zero,81b8b8 <OSMboxPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  81b8ac:	00800104 	movi	r2,4
  81b8b0:	e0bfff15 	stw	r2,-4(fp)
  81b8b4:	00004f06 	br	81b9f4 <OSMboxPostOpt+0x174>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
  81b8b8:	e0bffd17 	ldw	r2,-12(fp)
  81b8bc:	1004c03a 	cmpne	r2,r2,zero
  81b8c0:	1000031e 	bne	r2,zero,81b8d0 <OSMboxPostOpt+0x50>
        return (OS_ERR_POST_NULL_PTR);
  81b8c4:	008000c4 	movi	r2,3
  81b8c8:	e0bfff15 	stw	r2,-4(fp)
  81b8cc:	00004906 	br	81b9f4 <OSMboxPostOpt+0x174>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  81b8d0:	e0bffc17 	ldw	r2,-16(fp)
  81b8d4:	10800003 	ldbu	r2,0(r2)
  81b8d8:	10803fcc 	andi	r2,r2,255
  81b8dc:	10800060 	cmpeqi	r2,r2,1
  81b8e0:	1000031e 	bne	r2,zero,81b8f0 <OSMboxPostOpt+0x70>
        return (OS_ERR_EVENT_TYPE);
  81b8e4:	00800044 	movi	r2,1
  81b8e8:	e0bfff15 	stw	r2,-4(fp)
  81b8ec:	00004106 	br	81b9f4 <OSMboxPostOpt+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b8f0:	0005303a 	rdctl	r2,status
  81b8f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b8f8:	e0fffa17 	ldw	r3,-24(fp)
  81b8fc:	00bfff84 	movi	r2,-2
  81b900:	1884703a 	and	r2,r3,r2
  81b904:	1001703a 	wrctl	status,r2
  
  return context;
  81b908:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81b90c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
  81b910:	e0bffc17 	ldw	r2,-16(fp)
  81b914:	10800283 	ldbu	r2,10(r2)
  81b918:	10803fcc 	andi	r2,r2,255
  81b91c:	1005003a 	cmpeq	r2,r2,zero
  81b920:	1000211e 	bne	r2,zero,81b9a8 <OSMboxPostOpt+0x128>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  81b924:	e0bffe03 	ldbu	r2,-8(fp)
  81b928:	1080004c 	andi	r2,r2,1
  81b92c:	10803fcc 	andi	r2,r2,255
  81b930:	1005003a 	cmpeq	r2,r2,zero
  81b934:	10000c1e 	bne	r2,zero,81b968 <OSMboxPostOpt+0xe8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
  81b938:	00000506 	br	81b950 <OSMboxPostOpt+0xd0>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
  81b93c:	e13ffc17 	ldw	r4,-16(fp)
  81b940:	e17ffd17 	ldw	r5,-12(fp)
  81b944:	01800084 	movi	r6,2
  81b948:	000f883a 	mov	r7,zero
  81b94c:	08182c00 	call	8182c0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
  81b950:	e0bffc17 	ldw	r2,-16(fp)
  81b954:	10800283 	ldbu	r2,10(r2)
  81b958:	10803fcc 	andi	r2,r2,255
  81b95c:	1004c03a 	cmpne	r2,r2,zero
  81b960:	103ff61e 	bne	r2,zero,81b93c <OSMboxPostOpt+0xbc>
  81b964:	00000506 	br	81b97c <OSMboxPostOpt+0xfc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
  81b968:	e13ffc17 	ldw	r4,-16(fp)
  81b96c:	e17ffd17 	ldw	r5,-12(fp)
  81b970:	01800084 	movi	r6,2
  81b974:	000f883a 	mov	r7,zero
  81b978:	08182c00 	call	8182c0 <OS_EventTaskRdy>
  81b97c:	e0bffb17 	ldw	r2,-20(fp)
  81b980:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b984:	e0bff917 	ldw	r2,-28(fp)
  81b988:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  81b98c:	e0bffe03 	ldbu	r2,-8(fp)
  81b990:	1080010c 	andi	r2,r2,4
  81b994:	1004c03a 	cmpne	r2,r2,zero
  81b998:	1000011e 	bne	r2,zero,81b9a0 <OSMboxPostOpt+0x120>
            OS_Sched();                               /* Find HPT ready to run                         */
  81b99c:	0818d000 	call	818d00 <OS_Sched>
        }
        return (OS_ERR_NONE);
  81b9a0:	e03fff15 	stw	zero,-4(fp)
  81b9a4:	00001306 	br	81b9f4 <OSMboxPostOpt+0x174>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
  81b9a8:	e0bffc17 	ldw	r2,-16(fp)
  81b9ac:	10800117 	ldw	r2,4(r2)
  81b9b0:	1005003a 	cmpeq	r2,r2,zero
  81b9b4:	1000071e 	bne	r2,zero,81b9d4 <OSMboxPostOpt+0x154>
  81b9b8:	e0bffb17 	ldw	r2,-20(fp)
  81b9bc:	e0bff815 	stw	r2,-32(fp)
  81b9c0:	e0bff817 	ldw	r2,-32(fp)
  81b9c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
  81b9c8:	00800504 	movi	r2,20
  81b9cc:	e0bfff15 	stw	r2,-4(fp)
  81b9d0:	00000806 	br	81b9f4 <OSMboxPostOpt+0x174>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
  81b9d4:	e0fffc17 	ldw	r3,-16(fp)
  81b9d8:	e0bffd17 	ldw	r2,-12(fp)
  81b9dc:	18800115 	stw	r2,4(r3)
  81b9e0:	e0bffb17 	ldw	r2,-20(fp)
  81b9e4:	e0bff715 	stw	r2,-36(fp)
  81b9e8:	e0bff717 	ldw	r2,-36(fp)
  81b9ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81b9f0:	e03fff15 	stw	zero,-4(fp)
  81b9f4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b9f8:	e037883a 	mov	sp,fp
  81b9fc:	dfc00117 	ldw	ra,4(sp)
  81ba00:	df000017 	ldw	fp,0(sp)
  81ba04:	dec00204 	addi	sp,sp,8
  81ba08:	f800283a 	ret

0081ba0c <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
  81ba0c:	defff604 	addi	sp,sp,-40
  81ba10:	df000915 	stw	fp,36(sp)
  81ba14:	df000904 	addi	fp,sp,36
  81ba18:	e13ffd15 	stw	r4,-12(fp)
  81ba1c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81ba20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81ba24:	e0bffd17 	ldw	r2,-12(fp)
  81ba28:	1004c03a 	cmpne	r2,r2,zero
  81ba2c:	1000031e 	bne	r2,zero,81ba3c <OSMboxQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81ba30:	00800104 	movi	r2,4
  81ba34:	e0bfff15 	stw	r2,-4(fp)
  81ba38:	00003b06 	br	81bb28 <OSMboxQuery+0x11c>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
  81ba3c:	e0bffe17 	ldw	r2,-8(fp)
  81ba40:	1004c03a 	cmpne	r2,r2,zero
  81ba44:	1000031e 	bne	r2,zero,81ba54 <OSMboxQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81ba48:	00800244 	movi	r2,9
  81ba4c:	e0bfff15 	stw	r2,-4(fp)
  81ba50:	00003506 	br	81bb28 <OSMboxQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
  81ba54:	e0bffd17 	ldw	r2,-12(fp)
  81ba58:	10800003 	ldbu	r2,0(r2)
  81ba5c:	10803fcc 	andi	r2,r2,255
  81ba60:	10800060 	cmpeqi	r2,r2,1
  81ba64:	1000031e 	bne	r2,zero,81ba74 <OSMboxQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81ba68:	00800044 	movi	r2,1
  81ba6c:	e0bfff15 	stw	r2,-4(fp)
  81ba70:	00002d06 	br	81bb28 <OSMboxQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ba74:	0005303a 	rdctl	r2,status
  81ba78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ba7c:	e0fff817 	ldw	r3,-32(fp)
  81ba80:	00bfff84 	movi	r2,-2
  81ba84:	1884703a 	and	r2,r3,r2
  81ba88:	1001703a 	wrctl	status,r2
  
  return context;
  81ba8c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81ba90:	e0bff915 	stw	r2,-28(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
  81ba94:	e0bffd17 	ldw	r2,-12(fp)
  81ba98:	10c00283 	ldbu	r3,10(r2)
  81ba9c:	e0bffe17 	ldw	r2,-8(fp)
  81baa0:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
  81baa4:	e0bffd17 	ldw	r2,-12(fp)
  81baa8:	108002c4 	addi	r2,r2,11
  81baac:	e0bffb15 	stw	r2,-20(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
  81bab0:	e0bffe17 	ldw	r2,-8(fp)
  81bab4:	10800104 	addi	r2,r2,4
  81bab8:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81babc:	e03ffc05 	stb	zero,-16(fp)
  81bac0:	00000d06 	br	81baf8 <OSMboxQuery+0xec>
        *pdest++ = *psrc++;
  81bac4:	e0bffb17 	ldw	r2,-20(fp)
  81bac8:	10c00003 	ldbu	r3,0(r2)
  81bacc:	e0bffa17 	ldw	r2,-24(fp)
  81bad0:	10c00005 	stb	r3,0(r2)
  81bad4:	e0bffa17 	ldw	r2,-24(fp)
  81bad8:	10800044 	addi	r2,r2,1
  81badc:	e0bffa15 	stw	r2,-24(fp)
  81bae0:	e0bffb17 	ldw	r2,-20(fp)
  81bae4:	10800044 	addi	r2,r2,1
  81bae8:	e0bffb15 	stw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81baec:	e0bffc03 	ldbu	r2,-16(fp)
  81baf0:	10800044 	addi	r2,r2,1
  81baf4:	e0bffc05 	stb	r2,-16(fp)
  81baf8:	e0bffc03 	ldbu	r2,-16(fp)
  81bafc:	108000f0 	cmpltui	r2,r2,3
  81bb00:	103ff01e 	bne	r2,zero,81bac4 <OSMboxQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
  81bb04:	e0bffd17 	ldw	r2,-12(fp)
  81bb08:	10c00117 	ldw	r3,4(r2)
  81bb0c:	e0bffe17 	ldw	r2,-8(fp)
  81bb10:	10c00015 	stw	r3,0(r2)
  81bb14:	e0bff917 	ldw	r2,-28(fp)
  81bb18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bb1c:	e0bff717 	ldw	r2,-36(fp)
  81bb20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81bb24:	e03fff15 	stw	zero,-4(fp)
  81bb28:	e0bfff17 	ldw	r2,-4(fp)
}
  81bb2c:	e037883a 	mov	sp,fp
  81bb30:	df000017 	ldw	fp,0(sp)
  81bb34:	dec00104 	addi	sp,sp,4
  81bb38:	f800283a 	ret

0081bb3c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  81bb3c:	defff304 	addi	sp,sp,-52
  81bb40:	df000c15 	stw	fp,48(sp)
  81bb44:	df000c04 	addi	fp,sp,48
  81bb48:	e13ffb15 	stw	r4,-20(fp)
  81bb4c:	e17ffc15 	stw	r5,-16(fp)
  81bb50:	e1bffd15 	stw	r6,-12(fp)
  81bb54:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81bb58:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81bb5c:	e0bffe17 	ldw	r2,-8(fp)
  81bb60:	1004c03a 	cmpne	r2,r2,zero
  81bb64:	1000021e 	bne	r2,zero,81bb70 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  81bb68:	e03fff15 	stw	zero,-4(fp)
  81bb6c:	00007506 	br	81bd44 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  81bb70:	e0bffb17 	ldw	r2,-20(fp)
  81bb74:	1004c03a 	cmpne	r2,r2,zero
  81bb78:	1000051e 	bne	r2,zero,81bb90 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81bb7c:	e0fffe17 	ldw	r3,-8(fp)
  81bb80:	00801884 	movi	r2,98
  81bb84:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81bb88:	e03fff15 	stw	zero,-4(fp)
  81bb8c:	00006d06 	br	81bd44 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  81bb90:	e0bffb17 	ldw	r2,-20(fp)
  81bb94:	108000cc 	andi	r2,r2,3
  81bb98:	1005003a 	cmpeq	r2,r2,zero
  81bb9c:	1000051e 	bne	r2,zero,81bbb4 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81bba0:	e0fffe17 	ldw	r3,-8(fp)
  81bba4:	00801884 	movi	r2,98
  81bba8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81bbac:	e03fff15 	stw	zero,-4(fp)
  81bbb0:	00006406 	br	81bd44 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  81bbb4:	e0bffc17 	ldw	r2,-16(fp)
  81bbb8:	108000a8 	cmpgeui	r2,r2,2
  81bbbc:	1000051e 	bne	r2,zero,81bbd4 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  81bbc0:	e0fffe17 	ldw	r3,-8(fp)
  81bbc4:	008016c4 	movi	r2,91
  81bbc8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81bbcc:	e03fff15 	stw	zero,-4(fp)
  81bbd0:	00005c06 	br	81bd44 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  81bbd4:	e0bffd17 	ldw	r2,-12(fp)
  81bbd8:	10800128 	cmpgeui	r2,r2,4
  81bbdc:	1000051e 	bne	r2,zero,81bbf4 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  81bbe0:	e0fffe17 	ldw	r3,-8(fp)
  81bbe4:	00801704 	movi	r2,92
  81bbe8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81bbec:	e03fff15 	stw	zero,-4(fp)
  81bbf0:	00005406 	br	81bd44 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bbf4:	0005303a 	rdctl	r2,status
  81bbf8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bbfc:	e0fff517 	ldw	r3,-44(fp)
  81bc00:	00bfff84 	movi	r2,-2
  81bc04:	1884703a 	and	r2,r3,r2
  81bc08:	1001703a 	wrctl	status,r2
  
  return context;
  81bc0c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81bc10:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  81bc14:	00802174 	movhi	r2,133
  81bc18:	1082f404 	addi	r2,r2,3024
  81bc1c:	10800017 	ldw	r2,0(r2)
  81bc20:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  81bc24:	00802174 	movhi	r2,133
  81bc28:	1082f404 	addi	r2,r2,3024
  81bc2c:	10800017 	ldw	r2,0(r2)
  81bc30:	1005003a 	cmpeq	r2,r2,zero
  81bc34:	1000081e 	bne	r2,zero,81bc58 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  81bc38:	00802174 	movhi	r2,133
  81bc3c:	1082f404 	addi	r2,r2,3024
  81bc40:	10800017 	ldw	r2,0(r2)
  81bc44:	10800117 	ldw	r2,4(r2)
  81bc48:	1007883a 	mov	r3,r2
  81bc4c:	00802174 	movhi	r2,133
  81bc50:	1082f404 	addi	r2,r2,3024
  81bc54:	10c00015 	stw	r3,0(r2)
  81bc58:	e0bff617 	ldw	r2,-40(fp)
  81bc5c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bc60:	e0bff417 	ldw	r2,-48(fp)
  81bc64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  81bc68:	e0bffa17 	ldw	r2,-24(fp)
  81bc6c:	1004c03a 	cmpne	r2,r2,zero
  81bc70:	1000051e 	bne	r2,zero,81bc88 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  81bc74:	e0fffe17 	ldw	r3,-8(fp)
  81bc78:	00801684 	movi	r2,90
  81bc7c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81bc80:	e03fff15 	stw	zero,-4(fp)
  81bc84:	00002f06 	br	81bd44 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  81bc88:	e0bffb17 	ldw	r2,-20(fp)
  81bc8c:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  81bc90:	e0bffb17 	ldw	r2,-20(fp)
  81bc94:	1007883a 	mov	r3,r2
  81bc98:	e0bffd17 	ldw	r2,-12(fp)
  81bc9c:	1885883a 	add	r2,r3,r2
  81bca0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  81bca4:	e03ff715 	stw	zero,-36(fp)
  81bca8:	00000d06 	br	81bce0 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  81bcac:	e0fff817 	ldw	r3,-32(fp)
  81bcb0:	e0bff917 	ldw	r2,-28(fp)
  81bcb4:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  81bcb8:	e0bff917 	ldw	r2,-28(fp)
  81bcbc:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  81bcc0:	e0bff917 	ldw	r2,-28(fp)
  81bcc4:	1007883a 	mov	r3,r2
  81bcc8:	e0bffd17 	ldw	r2,-12(fp)
  81bccc:	1885883a 	add	r2,r3,r2
  81bcd0:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  81bcd4:	e0bff717 	ldw	r2,-36(fp)
  81bcd8:	10800044 	addi	r2,r2,1
  81bcdc:	e0bff715 	stw	r2,-36(fp)
  81bce0:	e0bffc17 	ldw	r2,-16(fp)
  81bce4:	10ffffc4 	addi	r3,r2,-1
  81bce8:	e0bff717 	ldw	r2,-36(fp)
  81bcec:	10ffef36 	bltu	r2,r3,81bcac <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  81bcf0:	e0bff817 	ldw	r2,-32(fp)
  81bcf4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  81bcf8:	e0fffa17 	ldw	r3,-24(fp)
  81bcfc:	e0bffb17 	ldw	r2,-20(fp)
  81bd00:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  81bd04:	e0fffa17 	ldw	r3,-24(fp)
  81bd08:	e0bffb17 	ldw	r2,-20(fp)
  81bd0c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  81bd10:	e0fffa17 	ldw	r3,-24(fp)
  81bd14:	e0bffc17 	ldw	r2,-16(fp)
  81bd18:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  81bd1c:	e0fffa17 	ldw	r3,-24(fp)
  81bd20:	e0bffc17 	ldw	r2,-16(fp)
  81bd24:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  81bd28:	e0fffa17 	ldw	r3,-24(fp)
  81bd2c:	e0bffd17 	ldw	r2,-12(fp)
  81bd30:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  81bd34:	e0bffe17 	ldw	r2,-8(fp)
  81bd38:	10000005 	stb	zero,0(r2)
    return (pmem);
  81bd3c:	e0bffa17 	ldw	r2,-24(fp)
  81bd40:	e0bfff15 	stw	r2,-4(fp)
  81bd44:	e0bfff17 	ldw	r2,-4(fp)
}
  81bd48:	e037883a 	mov	sp,fp
  81bd4c:	df000017 	ldw	fp,0(sp)
  81bd50:	dec00104 	addi	sp,sp,4
  81bd54:	f800283a 	ret

0081bd58 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  81bd58:	defff704 	addi	sp,sp,-36
  81bd5c:	df000815 	stw	fp,32(sp)
  81bd60:	df000804 	addi	fp,sp,32
  81bd64:	e13ffd15 	stw	r4,-12(fp)
  81bd68:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81bd6c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81bd70:	e0bffe17 	ldw	r2,-8(fp)
  81bd74:	1004c03a 	cmpne	r2,r2,zero
  81bd78:	1000021e 	bne	r2,zero,81bd84 <OSMemGet+0x2c>
        return ((void *)0);
  81bd7c:	e03fff15 	stw	zero,-4(fp)
  81bd80:	00003106 	br	81be48 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  81bd84:	e0bffd17 	ldw	r2,-12(fp)
  81bd88:	1004c03a 	cmpne	r2,r2,zero
  81bd8c:	1000051e 	bne	r2,zero,81bda4 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81bd90:	e0fffe17 	ldw	r3,-8(fp)
  81bd94:	00801804 	movi	r2,96
  81bd98:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81bd9c:	e03fff15 	stw	zero,-4(fp)
  81bda0:	00002906 	br	81be48 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bda4:	0005303a 	rdctl	r2,status
  81bda8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bdac:	e0fffa17 	ldw	r3,-24(fp)
  81bdb0:	00bfff84 	movi	r2,-2
  81bdb4:	1884703a 	and	r2,r3,r2
  81bdb8:	1001703a 	wrctl	status,r2
  
  return context;
  81bdbc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81bdc0:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  81bdc4:	e0bffd17 	ldw	r2,-12(fp)
  81bdc8:	10800417 	ldw	r2,16(r2)
  81bdcc:	1005003a 	cmpeq	r2,r2,zero
  81bdd0:	1000151e 	bne	r2,zero,81be28 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  81bdd4:	e0bffd17 	ldw	r2,-12(fp)
  81bdd8:	10800117 	ldw	r2,4(r2)
  81bddc:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  81bde0:	e0bffc17 	ldw	r2,-16(fp)
  81bde4:	10c00017 	ldw	r3,0(r2)
  81bde8:	e0bffd17 	ldw	r2,-12(fp)
  81bdec:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  81bdf0:	e0bffd17 	ldw	r2,-12(fp)
  81bdf4:	10800417 	ldw	r2,16(r2)
  81bdf8:	10ffffc4 	addi	r3,r2,-1
  81bdfc:	e0bffd17 	ldw	r2,-12(fp)
  81be00:	10c00415 	stw	r3,16(r2)
  81be04:	e0bffb17 	ldw	r2,-20(fp)
  81be08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81be0c:	e0bff917 	ldw	r2,-28(fp)
  81be10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  81be14:	e0bffe17 	ldw	r2,-8(fp)
  81be18:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  81be1c:	e0bffc17 	ldw	r2,-16(fp)
  81be20:	e0bfff15 	stw	r2,-4(fp)
  81be24:	00000806 	br	81be48 <OSMemGet+0xf0>
  81be28:	e0bffb17 	ldw	r2,-20(fp)
  81be2c:	e0bff815 	stw	r2,-32(fp)
  81be30:	e0bff817 	ldw	r2,-32(fp)
  81be34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  81be38:	e0fffe17 	ldw	r3,-8(fp)
  81be3c:	00801744 	movi	r2,93
  81be40:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  81be44:	e03fff15 	stw	zero,-4(fp)
  81be48:	e0bfff17 	ldw	r2,-4(fp)
}
  81be4c:	e037883a 	mov	sp,fp
  81be50:	df000017 	ldw	fp,0(sp)
  81be54:	dec00104 	addi	sp,sp,4
  81be58:	f800283a 	ret

0081be5c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81be5c:	defff604 	addi	sp,sp,-40
  81be60:	dfc00915 	stw	ra,36(sp)
  81be64:	df000815 	stw	fp,32(sp)
  81be68:	df000804 	addi	fp,sp,32
  81be6c:	e13ffc15 	stw	r4,-16(fp)
  81be70:	e17ffd15 	stw	r5,-12(fp)
  81be74:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81be78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81be7c:	e0bffe17 	ldw	r2,-8(fp)
  81be80:	1004c03a 	cmpne	r2,r2,zero
  81be84:	1000021e 	bne	r2,zero,81be90 <OSMemNameGet+0x34>
        return (0);
  81be88:	e03fff15 	stw	zero,-4(fp)
  81be8c:	00003006 	br	81bf50 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81be90:	e0bffc17 	ldw	r2,-16(fp)
  81be94:	1004c03a 	cmpne	r2,r2,zero
  81be98:	1000051e 	bne	r2,zero,81beb0 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81be9c:	e0fffe17 	ldw	r3,-8(fp)
  81bea0:	00801804 	movi	r2,96
  81bea4:	18800005 	stb	r2,0(r3)
        return (0);
  81bea8:	e03fff15 	stw	zero,-4(fp)
  81beac:	00002806 	br	81bf50 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81beb0:	e0bffd17 	ldw	r2,-12(fp)
  81beb4:	1004c03a 	cmpne	r2,r2,zero
  81beb8:	1000051e 	bne	r2,zero,81bed0 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  81bebc:	e0fffe17 	ldw	r3,-8(fp)
  81bec0:	00800304 	movi	r2,12
  81bec4:	18800005 	stb	r2,0(r3)
        return (0);
  81bec8:	e03fff15 	stw	zero,-4(fp)
  81becc:	00002006 	br	81bf50 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81bed0:	00802174 	movhi	r2,133
  81bed4:	1082f904 	addi	r2,r2,3044
  81bed8:	10800003 	ldbu	r2,0(r2)
  81bedc:	10803fcc 	andi	r2,r2,255
  81bee0:	1005003a 	cmpeq	r2,r2,zero
  81bee4:	1000051e 	bne	r2,zero,81befc <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  81bee8:	e0fffe17 	ldw	r3,-8(fp)
  81beec:	00800444 	movi	r2,17
  81bef0:	18800005 	stb	r2,0(r3)
        return (0);
  81bef4:	e03fff15 	stw	zero,-4(fp)
  81bef8:	00001506 	br	81bf50 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81befc:	0005303a 	rdctl	r2,status
  81bf00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bf04:	e0fff917 	ldw	r3,-28(fp)
  81bf08:	00bfff84 	movi	r2,-2
  81bf0c:	1884703a 	and	r2,r3,r2
  81bf10:	1001703a 	wrctl	status,r2
  
  return context;
  81bf14:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81bf18:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  81bf1c:	e0bffc17 	ldw	r2,-16(fp)
  81bf20:	11400504 	addi	r5,r2,20
  81bf24:	e13ffd17 	ldw	r4,-12(fp)
  81bf28:	0818e440 	call	818e44 <OS_StrCopy>
  81bf2c:	e0bffb05 	stb	r2,-20(fp)
  81bf30:	e0bffa17 	ldw	r2,-24(fp)
  81bf34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bf38:	e0bff817 	ldw	r2,-32(fp)
  81bf3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81bf40:	e0bffe17 	ldw	r2,-8(fp)
  81bf44:	10000005 	stb	zero,0(r2)
    return (len);
  81bf48:	e0bffb03 	ldbu	r2,-20(fp)
  81bf4c:	e0bfff15 	stw	r2,-4(fp)
  81bf50:	e0bfff17 	ldw	r2,-4(fp)
}
  81bf54:	e037883a 	mov	sp,fp
  81bf58:	dfc00117 	ldw	ra,4(sp)
  81bf5c:	df000017 	ldw	fp,0(sp)
  81bf60:	dec00204 	addi	sp,sp,8
  81bf64:	f800283a 	ret

0081bf68 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81bf68:	defff604 	addi	sp,sp,-40
  81bf6c:	dfc00915 	stw	ra,36(sp)
  81bf70:	df000815 	stw	fp,32(sp)
  81bf74:	df000804 	addi	fp,sp,32
  81bf78:	e13ffd15 	stw	r4,-12(fp)
  81bf7c:	e17ffe15 	stw	r5,-8(fp)
  81bf80:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81bf84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81bf88:	e0bfff17 	ldw	r2,-4(fp)
  81bf8c:	1005003a 	cmpeq	r2,r2,zero
  81bf90:	1000381e 	bne	r2,zero,81c074 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81bf94:	e0bffd17 	ldw	r2,-12(fp)
  81bf98:	1004c03a 	cmpne	r2,r2,zero
  81bf9c:	1000041e 	bne	r2,zero,81bfb0 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81bfa0:	e0ffff17 	ldw	r3,-4(fp)
  81bfa4:	00801804 	movi	r2,96
  81bfa8:	18800005 	stb	r2,0(r3)
        return;
  81bfac:	00003106 	br	81c074 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81bfb0:	e0bffe17 	ldw	r2,-8(fp)
  81bfb4:	1004c03a 	cmpne	r2,r2,zero
  81bfb8:	1000041e 	bne	r2,zero,81bfcc <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81bfbc:	e0ffff17 	ldw	r3,-4(fp)
  81bfc0:	00800304 	movi	r2,12
  81bfc4:	18800005 	stb	r2,0(r3)
        return;
  81bfc8:	00002a06 	br	81c074 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81bfcc:	00802174 	movhi	r2,133
  81bfd0:	1082f904 	addi	r2,r2,3044
  81bfd4:	10800003 	ldbu	r2,0(r2)
  81bfd8:	10803fcc 	andi	r2,r2,255
  81bfdc:	1005003a 	cmpeq	r2,r2,zero
  81bfe0:	1000041e 	bne	r2,zero,81bff4 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81bfe4:	e0ffff17 	ldw	r3,-4(fp)
  81bfe8:	00800484 	movi	r2,18
  81bfec:	18800005 	stb	r2,0(r3)
        return;
  81bff0:	00002006 	br	81c074 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bff4:	0005303a 	rdctl	r2,status
  81bff8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bffc:	e0fffa17 	ldw	r3,-24(fp)
  81c000:	00bfff84 	movi	r2,-2
  81c004:	1884703a 	and	r2,r3,r2
  81c008:	1001703a 	wrctl	status,r2
  
  return context;
  81c00c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81c010:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81c014:	e13ffe17 	ldw	r4,-8(fp)
  81c018:	0818ec40 	call	818ec4 <OS_StrLen>
  81c01c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  81c020:	e0bffc03 	ldbu	r2,-16(fp)
  81c024:	10800830 	cmpltui	r2,r2,32
  81c028:	1000081e 	bne	r2,zero,81c04c <OSMemNameSet+0xe4>
  81c02c:	e0bffb17 	ldw	r2,-20(fp)
  81c030:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c034:	e0bff917 	ldw	r2,-28(fp)
  81c038:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  81c03c:	e0ffff17 	ldw	r3,-4(fp)
  81c040:	008018c4 	movi	r2,99
  81c044:	18800005 	stb	r2,0(r3)
        return;
  81c048:	00000a06 	br	81c074 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  81c04c:	e0bffd17 	ldw	r2,-12(fp)
  81c050:	11000504 	addi	r4,r2,20
  81c054:	e17ffe17 	ldw	r5,-8(fp)
  81c058:	0818e440 	call	818e44 <OS_StrCopy>
  81c05c:	e0bffb17 	ldw	r2,-20(fp)
  81c060:	e0bff815 	stw	r2,-32(fp)
  81c064:	e0bff817 	ldw	r2,-32(fp)
  81c068:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81c06c:	e0bfff17 	ldw	r2,-4(fp)
  81c070:	10000005 	stb	zero,0(r2)
}
  81c074:	e037883a 	mov	sp,fp
  81c078:	dfc00117 	ldw	ra,4(sp)
  81c07c:	df000017 	ldw	fp,0(sp)
  81c080:	dec00204 	addi	sp,sp,8
  81c084:	f800283a 	ret

0081c088 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  81c088:	defff804 	addi	sp,sp,-32
  81c08c:	df000715 	stw	fp,28(sp)
  81c090:	df000704 	addi	fp,sp,28
  81c094:	e13ffd15 	stw	r4,-12(fp)
  81c098:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81c09c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81c0a0:	e0bffd17 	ldw	r2,-12(fp)
  81c0a4:	1004c03a 	cmpne	r2,r2,zero
  81c0a8:	1000031e 	bne	r2,zero,81c0b8 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81c0ac:	00801804 	movi	r2,96
  81c0b0:	e0bfff15 	stw	r2,-4(fp)
  81c0b4:	00002b06 	br	81c164 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  81c0b8:	e0bffe17 	ldw	r2,-8(fp)
  81c0bc:	1004c03a 	cmpne	r2,r2,zero
  81c0c0:	1000031e 	bne	r2,zero,81c0d0 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  81c0c4:	008017c4 	movi	r2,95
  81c0c8:	e0bfff15 	stw	r2,-4(fp)
  81c0cc:	00002506 	br	81c164 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c0d0:	0005303a 	rdctl	r2,status
  81c0d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c0d8:	e0fffb17 	ldw	r3,-20(fp)
  81c0dc:	00bfff84 	movi	r2,-2
  81c0e0:	1884703a 	and	r2,r3,r2
  81c0e4:	1001703a 	wrctl	status,r2
  
  return context;
  81c0e8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81c0ec:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  81c0f0:	e0bffd17 	ldw	r2,-12(fp)
  81c0f4:	10c00417 	ldw	r3,16(r2)
  81c0f8:	e0bffd17 	ldw	r2,-12(fp)
  81c0fc:	10800317 	ldw	r2,12(r2)
  81c100:	18800736 	bltu	r3,r2,81c120 <OSMemPut+0x98>
  81c104:	e0bffc17 	ldw	r2,-16(fp)
  81c108:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c10c:	e0bffa17 	ldw	r2,-24(fp)
  81c110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  81c114:	00801784 	movi	r2,94
  81c118:	e0bfff15 	stw	r2,-4(fp)
  81c11c:	00001106 	br	81c164 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  81c120:	e0fffe17 	ldw	r3,-8(fp)
  81c124:	e0bffd17 	ldw	r2,-12(fp)
  81c128:	10800117 	ldw	r2,4(r2)
  81c12c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  81c130:	e0fffd17 	ldw	r3,-12(fp)
  81c134:	e0bffe17 	ldw	r2,-8(fp)
  81c138:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  81c13c:	e0bffd17 	ldw	r2,-12(fp)
  81c140:	10800417 	ldw	r2,16(r2)
  81c144:	10c00044 	addi	r3,r2,1
  81c148:	e0bffd17 	ldw	r2,-12(fp)
  81c14c:	10c00415 	stw	r3,16(r2)
  81c150:	e0bffc17 	ldw	r2,-16(fp)
  81c154:	e0bff915 	stw	r2,-28(fp)
  81c158:	e0bff917 	ldw	r2,-28(fp)
  81c15c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  81c160:	e03fff15 	stw	zero,-4(fp)
  81c164:	e0bfff17 	ldw	r2,-4(fp)
}
  81c168:	e037883a 	mov	sp,fp
  81c16c:	df000017 	ldw	fp,0(sp)
  81c170:	dec00104 	addi	sp,sp,4
  81c174:	f800283a 	ret

0081c178 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  81c178:	defff904 	addi	sp,sp,-28
  81c17c:	df000615 	stw	fp,24(sp)
  81c180:	df000604 	addi	fp,sp,24
  81c184:	e13ffd15 	stw	r4,-12(fp)
  81c188:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81c18c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81c190:	e0bffd17 	ldw	r2,-12(fp)
  81c194:	1004c03a 	cmpne	r2,r2,zero
  81c198:	1000031e 	bne	r2,zero,81c1a8 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81c19c:	00801804 	movi	r2,96
  81c1a0:	e0bfff15 	stw	r2,-4(fp)
  81c1a4:	00002e06 	br	81c260 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  81c1a8:	e0bffe17 	ldw	r2,-8(fp)
  81c1ac:	1004c03a 	cmpne	r2,r2,zero
  81c1b0:	1000031e 	bne	r2,zero,81c1c0 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  81c1b4:	00801844 	movi	r2,97
  81c1b8:	e0bfff15 	stw	r2,-4(fp)
  81c1bc:	00002806 	br	81c260 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c1c0:	0005303a 	rdctl	r2,status
  81c1c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c1c8:	e0fffb17 	ldw	r3,-20(fp)
  81c1cc:	00bfff84 	movi	r2,-2
  81c1d0:	1884703a 	and	r2,r3,r2
  81c1d4:	1001703a 	wrctl	status,r2
  
  return context;
  81c1d8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81c1dc:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  81c1e0:	e0bffd17 	ldw	r2,-12(fp)
  81c1e4:	10c00017 	ldw	r3,0(r2)
  81c1e8:	e0bffe17 	ldw	r2,-8(fp)
  81c1ec:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  81c1f0:	e0bffd17 	ldw	r2,-12(fp)
  81c1f4:	10c00117 	ldw	r3,4(r2)
  81c1f8:	e0bffe17 	ldw	r2,-8(fp)
  81c1fc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  81c200:	e0bffd17 	ldw	r2,-12(fp)
  81c204:	10c00217 	ldw	r3,8(r2)
  81c208:	e0bffe17 	ldw	r2,-8(fp)
  81c20c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  81c210:	e0bffd17 	ldw	r2,-12(fp)
  81c214:	10c00317 	ldw	r3,12(r2)
  81c218:	e0bffe17 	ldw	r2,-8(fp)
  81c21c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  81c220:	e0bffd17 	ldw	r2,-12(fp)
  81c224:	10c00417 	ldw	r3,16(r2)
  81c228:	e0bffe17 	ldw	r2,-8(fp)
  81c22c:	10c00415 	stw	r3,16(r2)
  81c230:	e0bffc17 	ldw	r2,-16(fp)
  81c234:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c238:	e0bffa17 	ldw	r2,-24(fp)
  81c23c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  81c240:	e0bffe17 	ldw	r2,-8(fp)
  81c244:	10c00317 	ldw	r3,12(r2)
  81c248:	e0bffe17 	ldw	r2,-8(fp)
  81c24c:	10800417 	ldw	r2,16(r2)
  81c250:	1887c83a 	sub	r3,r3,r2
  81c254:	e0bffe17 	ldw	r2,-8(fp)
  81c258:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  81c25c:	e03fff15 	stw	zero,-4(fp)
  81c260:	e0bfff17 	ldw	r2,-4(fp)
}
  81c264:	e037883a 	mov	sp,fp
  81c268:	df000017 	ldw	fp,0(sp)
  81c26c:	dec00104 	addi	sp,sp,4
  81c270:	f800283a 	ret

0081c274 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  81c274:	defffc04 	addi	sp,sp,-16
  81c278:	dfc00315 	stw	ra,12(sp)
  81c27c:	df000215 	stw	fp,8(sp)
  81c280:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  81c284:	010038f4 	movhi	r4,227
  81c288:	211b2a04 	addi	r4,r4,27816
  81c28c:	01430c04 	movi	r5,3120
  81c290:	0818c400 	call	818c40 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  81c294:	008038f4 	movhi	r2,227
  81c298:	109b2a04 	addi	r2,r2,27816
  81c29c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81c2a0:	e03ffe0d 	sth	zero,-8(fp)
  81c2a4:	00001306 	br	81c2f4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  81c2a8:	e0bffe0b 	ldhu	r2,-8(fp)
  81c2ac:	10800d24 	muli	r2,r2,52
  81c2b0:	1007883a 	mov	r3,r2
  81c2b4:	008038f4 	movhi	r2,227
  81c2b8:	109b3704 	addi	r2,r2,27868
  81c2bc:	1887883a 	add	r3,r3,r2
  81c2c0:	e0bfff17 	ldw	r2,-4(fp)
  81c2c4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  81c2c8:	e0ffff17 	ldw	r3,-4(fp)
  81c2cc:	00800fc4 	movi	r2,63
  81c2d0:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  81c2d4:	e0bfff17 	ldw	r2,-4(fp)
  81c2d8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  81c2dc:	e0bfff17 	ldw	r2,-4(fp)
  81c2e0:	10800d04 	addi	r2,r2,52
  81c2e4:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81c2e8:	e0bffe0b 	ldhu	r2,-8(fp)
  81c2ec:	10800044 	addi	r2,r2,1
  81c2f0:	e0bffe0d 	sth	r2,-8(fp)
  81c2f4:	e0bffe0b 	ldhu	r2,-8(fp)
  81c2f8:	10800ef0 	cmpltui	r2,r2,59
  81c2fc:	103fea1e 	bne	r2,zero,81c2a8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  81c300:	e0bfff17 	ldw	r2,-4(fp)
  81c304:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  81c308:	e0ffff17 	ldw	r3,-4(fp)
  81c30c:	00800fc4 	movi	r2,63
  81c310:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  81c314:	e0bfff17 	ldw	r2,-4(fp)
  81c318:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  81c31c:	00c02174 	movhi	r3,133
  81c320:	18c2f404 	addi	r3,r3,3024
  81c324:	008038f4 	movhi	r2,227
  81c328:	109b2a04 	addi	r2,r2,27816
  81c32c:	18800015 	stw	r2,0(r3)
#endif
}
  81c330:	e037883a 	mov	sp,fp
  81c334:	dfc00117 	ldw	ra,4(sp)
  81c338:	df000017 	ldw	fp,0(sp)
  81c33c:	dec00204 	addi	sp,sp,8
  81c340:	f800283a 	ret

0081c344 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  81c344:	defff704 	addi	sp,sp,-36
  81c348:	df000815 	stw	fp,32(sp)
  81c34c:	df000804 	addi	fp,sp,32
  81c350:	e13ffd15 	stw	r4,-12(fp)
  81c354:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81c358:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81c35c:	e0bffe17 	ldw	r2,-8(fp)
  81c360:	1004c03a 	cmpne	r2,r2,zero
  81c364:	1000021e 	bne	r2,zero,81c370 <OSQAccept+0x2c>
        return ((void *)0);
  81c368:	e03fff15 	stw	zero,-4(fp)
  81c36c:	00004506 	br	81c484 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81c370:	e0bffd17 	ldw	r2,-12(fp)
  81c374:	1004c03a 	cmpne	r2,r2,zero
  81c378:	1000051e 	bne	r2,zero,81c390 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  81c37c:	e0fffe17 	ldw	r3,-8(fp)
  81c380:	00800104 	movi	r2,4
  81c384:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81c388:	e03fff15 	stw	zero,-4(fp)
  81c38c:	00003d06 	br	81c484 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81c390:	e0bffd17 	ldw	r2,-12(fp)
  81c394:	10800003 	ldbu	r2,0(r2)
  81c398:	10803fcc 	andi	r2,r2,255
  81c39c:	108000a0 	cmpeqi	r2,r2,2
  81c3a0:	1000051e 	bne	r2,zero,81c3b8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  81c3a4:	e0fffe17 	ldw	r3,-8(fp)
  81c3a8:	00800044 	movi	r2,1
  81c3ac:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81c3b0:	e03fff15 	stw	zero,-4(fp)
  81c3b4:	00003306 	br	81c484 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c3b8:	0005303a 	rdctl	r2,status
  81c3bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c3c0:	e0fff917 	ldw	r3,-28(fp)
  81c3c4:	00bfff84 	movi	r2,-2
  81c3c8:	1884703a 	and	r2,r3,r2
  81c3cc:	1001703a 	wrctl	status,r2
  
  return context;
  81c3d0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81c3d4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81c3d8:	e0bffd17 	ldw	r2,-12(fp)
  81c3dc:	10800117 	ldw	r2,4(r2)
  81c3e0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81c3e4:	e0bffb17 	ldw	r2,-20(fp)
  81c3e8:	1080058b 	ldhu	r2,22(r2)
  81c3ec:	10bfffcc 	andi	r2,r2,65535
  81c3f0:	1005003a 	cmpeq	r2,r2,zero
  81c3f4:	1000191e 	bne	r2,zero,81c45c <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81c3f8:	e0bffb17 	ldw	r2,-20(fp)
  81c3fc:	10c00417 	ldw	r3,16(r2)
  81c400:	18800017 	ldw	r2,0(r3)
  81c404:	e0bffc15 	stw	r2,-16(fp)
  81c408:	18c00104 	addi	r3,r3,4
  81c40c:	e0bffb17 	ldw	r2,-20(fp)
  81c410:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  81c414:	e0bffb17 	ldw	r2,-20(fp)
  81c418:	1080058b 	ldhu	r2,22(r2)
  81c41c:	10bfffc4 	addi	r2,r2,-1
  81c420:	1007883a 	mov	r3,r2
  81c424:	e0bffb17 	ldw	r2,-20(fp)
  81c428:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81c42c:	e0bffb17 	ldw	r2,-20(fp)
  81c430:	10c00417 	ldw	r3,16(r2)
  81c434:	e0bffb17 	ldw	r2,-20(fp)
  81c438:	10800217 	ldw	r2,8(r2)
  81c43c:	1880041e 	bne	r3,r2,81c450 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  81c440:	e0bffb17 	ldw	r2,-20(fp)
  81c444:	10c00117 	ldw	r3,4(r2)
  81c448:	e0bffb17 	ldw	r2,-20(fp)
  81c44c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  81c450:	e0bffe17 	ldw	r2,-8(fp)
  81c454:	10000005 	stb	zero,0(r2)
  81c458:	00000406 	br	81c46c <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  81c45c:	e0fffe17 	ldw	r3,-8(fp)
  81c460:	008007c4 	movi	r2,31
  81c464:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  81c468:	e03ffc15 	stw	zero,-16(fp)
  81c46c:	e0bffa17 	ldw	r2,-24(fp)
  81c470:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c474:	e0bff817 	ldw	r2,-32(fp)
  81c478:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  81c47c:	e0bffc17 	ldw	r2,-16(fp)
  81c480:	e0bfff15 	stw	r2,-4(fp)
  81c484:	e0bfff17 	ldw	r2,-4(fp)
}
  81c488:	e037883a 	mov	sp,fp
  81c48c:	df000017 	ldw	fp,0(sp)
  81c490:	dec00104 	addi	sp,sp,4
  81c494:	f800283a 	ret

0081c498 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  81c498:	defff304 	addi	sp,sp,-52
  81c49c:	dfc00c15 	stw	ra,48(sp)
  81c4a0:	df000b15 	stw	fp,44(sp)
  81c4a4:	df000b04 	addi	fp,sp,44
  81c4a8:	e13ffd15 	stw	r4,-12(fp)
  81c4ac:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81c4b0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81c4b4:	00802174 	movhi	r2,133
  81c4b8:	1082f904 	addi	r2,r2,3044
  81c4bc:	10800003 	ldbu	r2,0(r2)
  81c4c0:	10803fcc 	andi	r2,r2,255
  81c4c4:	1005003a 	cmpeq	r2,r2,zero
  81c4c8:	1000021e 	bne	r2,zero,81c4d4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81c4cc:	e03fff15 	stw	zero,-4(fp)
  81c4d0:	00007006 	br	81c694 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c4d4:	0005303a 	rdctl	r2,status
  81c4d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c4dc:	e0fff917 	ldw	r3,-28(fp)
  81c4e0:	00bfff84 	movi	r2,-2
  81c4e4:	1884703a 	and	r2,r3,r2
  81c4e8:	1001703a 	wrctl	status,r2
  
  return context;
  81c4ec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81c4f0:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  81c4f4:	00802174 	movhi	r2,133
  81c4f8:	1082f804 	addi	r2,r2,3040
  81c4fc:	10800017 	ldw	r2,0(r2)
  81c500:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  81c504:	00802174 	movhi	r2,133
  81c508:	1082f804 	addi	r2,r2,3040
  81c50c:	10800017 	ldw	r2,0(r2)
  81c510:	1005003a 	cmpeq	r2,r2,zero
  81c514:	1000081e 	bne	r2,zero,81c538 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81c518:	00802174 	movhi	r2,133
  81c51c:	1082f804 	addi	r2,r2,3040
  81c520:	10800017 	ldw	r2,0(r2)
  81c524:	10800117 	ldw	r2,4(r2)
  81c528:	1007883a 	mov	r3,r2
  81c52c:	00802174 	movhi	r2,133
  81c530:	1082f804 	addi	r2,r2,3040
  81c534:	10c00015 	stw	r3,0(r2)
  81c538:	e0bffa17 	ldw	r2,-24(fp)
  81c53c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c540:	e0bff817 	ldw	r2,-32(fp)
  81c544:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  81c548:	e0bffc17 	ldw	r2,-16(fp)
  81c54c:	1005003a 	cmpeq	r2,r2,zero
  81c550:	10004e1e 	bne	r2,zero,81c68c <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c554:	0005303a 	rdctl	r2,status
  81c558:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c55c:	e0fff717 	ldw	r3,-36(fp)
  81c560:	00bfff84 	movi	r2,-2
  81c564:	1884703a 	and	r2,r3,r2
  81c568:	1001703a 	wrctl	status,r2
  
  return context;
  81c56c:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  81c570:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  81c574:	00802174 	movhi	r2,133
  81c578:	1082f604 	addi	r2,r2,3032
  81c57c:	10800017 	ldw	r2,0(r2)
  81c580:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  81c584:	e0bffb17 	ldw	r2,-20(fp)
  81c588:	1005003a 	cmpeq	r2,r2,zero
  81c58c:	1000311e 	bne	r2,zero,81c654 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  81c590:	00802174 	movhi	r2,133
  81c594:	1082f604 	addi	r2,r2,3032
  81c598:	10800017 	ldw	r2,0(r2)
  81c59c:	10c00017 	ldw	r3,0(r2)
  81c5a0:	00802174 	movhi	r2,133
  81c5a4:	1082f604 	addi	r2,r2,3032
  81c5a8:	10c00015 	stw	r3,0(r2)
  81c5ac:	e0bffa17 	ldw	r2,-24(fp)
  81c5b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c5b4:	e0bff617 	ldw	r2,-40(fp)
  81c5b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  81c5bc:	e0fffb17 	ldw	r3,-20(fp)
  81c5c0:	e0bffd17 	ldw	r2,-12(fp)
  81c5c4:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  81c5c8:	e0bffe0b 	ldhu	r2,-8(fp)
  81c5cc:	1085883a 	add	r2,r2,r2
  81c5d0:	1085883a 	add	r2,r2,r2
  81c5d4:	1007883a 	mov	r3,r2
  81c5d8:	e0bffd17 	ldw	r2,-12(fp)
  81c5dc:	1887883a 	add	r3,r3,r2
  81c5e0:	e0bffb17 	ldw	r2,-20(fp)
  81c5e4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  81c5e8:	e0fffb17 	ldw	r3,-20(fp)
  81c5ec:	e0bffd17 	ldw	r2,-12(fp)
  81c5f0:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  81c5f4:	e0fffb17 	ldw	r3,-20(fp)
  81c5f8:	e0bffd17 	ldw	r2,-12(fp)
  81c5fc:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  81c600:	e0fffb17 	ldw	r3,-20(fp)
  81c604:	e0bffe0b 	ldhu	r2,-8(fp)
  81c608:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  81c60c:	e0bffb17 	ldw	r2,-20(fp)
  81c610:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  81c614:	e0fffc17 	ldw	r3,-16(fp)
  81c618:	00800084 	movi	r2,2
  81c61c:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  81c620:	e0bffc17 	ldw	r2,-16(fp)
  81c624:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  81c628:	e0fffc17 	ldw	r3,-16(fp)
  81c62c:	e0bffb17 	ldw	r2,-20(fp)
  81c630:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  81c634:	e0fffc17 	ldw	r3,-16(fp)
  81c638:	00800fc4 	movi	r2,63
  81c63c:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  81c640:	e0bffc17 	ldw	r2,-16(fp)
  81c644:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  81c648:	e13ffc17 	ldw	r4,-16(fp)
  81c64c:	08188740 	call	818874 <OS_EventWaitListInit>
  81c650:	00000e06 	br	81c68c <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  81c654:	00802174 	movhi	r2,133
  81c658:	1082f804 	addi	r2,r2,3040
  81c65c:	10c00017 	ldw	r3,0(r2)
  81c660:	e0bffc17 	ldw	r2,-16(fp)
  81c664:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  81c668:	00c02174 	movhi	r3,133
  81c66c:	18c2f804 	addi	r3,r3,3040
  81c670:	e0bffc17 	ldw	r2,-16(fp)
  81c674:	18800015 	stw	r2,0(r3)
  81c678:	e0bffa17 	ldw	r2,-24(fp)
  81c67c:	e0bff515 	stw	r2,-44(fp)
  81c680:	e0bff517 	ldw	r2,-44(fp)
  81c684:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  81c688:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  81c68c:	e0bffc17 	ldw	r2,-16(fp)
  81c690:	e0bfff15 	stw	r2,-4(fp)
  81c694:	e0bfff17 	ldw	r2,-4(fp)
}
  81c698:	e037883a 	mov	sp,fp
  81c69c:	dfc00117 	ldw	ra,4(sp)
  81c6a0:	df000017 	ldw	fp,0(sp)
  81c6a4:	dec00204 	addi	sp,sp,8
  81c6a8:	f800283a 	ret

0081c6ac <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81c6ac:	defff004 	addi	sp,sp,-64
  81c6b0:	dfc00f15 	stw	ra,60(sp)
  81c6b4:	df000e15 	stw	fp,56(sp)
  81c6b8:	df000e04 	addi	fp,sp,56
  81c6bc:	e13ffb15 	stw	r4,-20(fp)
  81c6c0:	e1bffd15 	stw	r6,-12(fp)
  81c6c4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c6c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81c6cc:	e0bffd17 	ldw	r2,-12(fp)
  81c6d0:	1004c03a 	cmpne	r2,r2,zero
  81c6d4:	1000031e 	bne	r2,zero,81c6e4 <OSQDel+0x38>
        return (pevent);
  81c6d8:	e0bffb17 	ldw	r2,-20(fp)
  81c6dc:	e0bfff15 	stw	r2,-4(fp)
  81c6e0:	0000ac06 	br	81c994 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81c6e4:	e0bffb17 	ldw	r2,-20(fp)
  81c6e8:	1004c03a 	cmpne	r2,r2,zero
  81c6ec:	1000061e 	bne	r2,zero,81c708 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81c6f0:	e0fffd17 	ldw	r3,-12(fp)
  81c6f4:	00800104 	movi	r2,4
  81c6f8:	18800005 	stb	r2,0(r3)
        return (pevent);
  81c6fc:	e0fffb17 	ldw	r3,-20(fp)
  81c700:	e0ffff15 	stw	r3,-4(fp)
  81c704:	0000a306 	br	81c994 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81c708:	e0bffb17 	ldw	r2,-20(fp)
  81c70c:	10800003 	ldbu	r2,0(r2)
  81c710:	10803fcc 	andi	r2,r2,255
  81c714:	108000a0 	cmpeqi	r2,r2,2
  81c718:	1000061e 	bne	r2,zero,81c734 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81c71c:	e0fffd17 	ldw	r3,-12(fp)
  81c720:	00800044 	movi	r2,1
  81c724:	18800005 	stb	r2,0(r3)
        return (pevent);
  81c728:	e0bffb17 	ldw	r2,-20(fp)
  81c72c:	e0bfff15 	stw	r2,-4(fp)
  81c730:	00009806 	br	81c994 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81c734:	00802174 	movhi	r2,133
  81c738:	1082f904 	addi	r2,r2,3044
  81c73c:	10800003 	ldbu	r2,0(r2)
  81c740:	10803fcc 	andi	r2,r2,255
  81c744:	1005003a 	cmpeq	r2,r2,zero
  81c748:	1000061e 	bne	r2,zero,81c764 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81c74c:	e0fffd17 	ldw	r3,-12(fp)
  81c750:	008003c4 	movi	r2,15
  81c754:	18800005 	stb	r2,0(r3)
        return (pevent);
  81c758:	e0fffb17 	ldw	r3,-20(fp)
  81c75c:	e0ffff15 	stw	r3,-4(fp)
  81c760:	00008c06 	br	81c994 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c764:	0005303a 	rdctl	r2,status
  81c768:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c76c:	e0fff617 	ldw	r3,-40(fp)
  81c770:	00bfff84 	movi	r2,-2
  81c774:	1884703a 	and	r2,r3,r2
  81c778:	1001703a 	wrctl	status,r2
  
  return context;
  81c77c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  81c780:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  81c784:	e0bffb17 	ldw	r2,-20(fp)
  81c788:	10800283 	ldbu	r2,10(r2)
  81c78c:	10803fcc 	andi	r2,r2,255
  81c790:	1005003a 	cmpeq	r2,r2,zero
  81c794:	1000031e 	bne	r2,zero,81c7a4 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81c798:	00800044 	movi	r2,1
  81c79c:	e0bffa05 	stb	r2,-24(fp)
  81c7a0:	00000106 	br	81c7a8 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81c7a4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81c7a8:	e0bffc03 	ldbu	r2,-16(fp)
  81c7ac:	e0bffe15 	stw	r2,-8(fp)
  81c7b0:	e0fffe17 	ldw	r3,-8(fp)
  81c7b4:	1805003a 	cmpeq	r2,r3,zero
  81c7b8:	1000041e 	bne	r2,zero,81c7cc <OSQDel+0x120>
  81c7bc:	e0fffe17 	ldw	r3,-8(fp)
  81c7c0:	18800060 	cmpeqi	r2,r3,1
  81c7c4:	1000391e 	bne	r2,zero,81c8ac <OSQDel+0x200>
  81c7c8:	00006706 	br	81c968 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  81c7cc:	e0bffa03 	ldbu	r2,-24(fp)
  81c7d0:	1004c03a 	cmpne	r2,r2,zero
  81c7d4:	1000261e 	bne	r2,zero,81c870 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81c7d8:	e0fffb17 	ldw	r3,-20(fp)
  81c7dc:	00800fc4 	movi	r2,63
  81c7e0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81c7e4:	e0bffb17 	ldw	r2,-20(fp)
  81c7e8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  81c7ec:	e0bffb17 	ldw	r2,-20(fp)
  81c7f0:	10800117 	ldw	r2,4(r2)
  81c7f4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  81c7f8:	00802174 	movhi	r2,133
  81c7fc:	1082f604 	addi	r2,r2,3032
  81c800:	10c00017 	ldw	r3,0(r2)
  81c804:	e0bff817 	ldw	r2,-32(fp)
  81c808:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  81c80c:	00c02174 	movhi	r3,133
  81c810:	18c2f604 	addi	r3,r3,3032
  81c814:	e0bff817 	ldw	r2,-32(fp)
  81c818:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81c81c:	e0bffb17 	ldw	r2,-20(fp)
  81c820:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81c824:	00802174 	movhi	r2,133
  81c828:	1082f804 	addi	r2,r2,3040
  81c82c:	10c00017 	ldw	r3,0(r2)
  81c830:	e0bffb17 	ldw	r2,-20(fp)
  81c834:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81c838:	e0bffb17 	ldw	r2,-20(fp)
  81c83c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81c840:	00c02174 	movhi	r3,133
  81c844:	18c2f804 	addi	r3,r3,3040
  81c848:	e0bffb17 	ldw	r2,-20(fp)
  81c84c:	18800015 	stw	r2,0(r3)
  81c850:	e0bff717 	ldw	r2,-36(fp)
  81c854:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c858:	e0bff517 	ldw	r2,-44(fp)
  81c85c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81c860:	e0bffd17 	ldw	r2,-12(fp)
  81c864:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  81c868:	e03ff915 	stw	zero,-28(fp)
  81c86c:	00004706 	br	81c98c <OSQDel+0x2e0>
  81c870:	e0bff717 	ldw	r2,-36(fp)
  81c874:	e0bff415 	stw	r2,-48(fp)
  81c878:	e0bff417 	ldw	r2,-48(fp)
  81c87c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81c880:	e0fffd17 	ldw	r3,-12(fp)
  81c884:	00801244 	movi	r2,73
  81c888:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81c88c:	e0bffb17 	ldw	r2,-20(fp)
  81c890:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  81c894:	00003d06 	br	81c98c <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  81c898:	e13ffb17 	ldw	r4,-20(fp)
  81c89c:	000b883a 	mov	r5,zero
  81c8a0:	01800104 	movi	r6,4
  81c8a4:	000f883a 	mov	r7,zero
  81c8a8:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  81c8ac:	e0bffb17 	ldw	r2,-20(fp)
  81c8b0:	10800283 	ldbu	r2,10(r2)
  81c8b4:	10803fcc 	andi	r2,r2,255
  81c8b8:	1004c03a 	cmpne	r2,r2,zero
  81c8bc:	103ff61e 	bne	r2,zero,81c898 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81c8c0:	e0fffb17 	ldw	r3,-20(fp)
  81c8c4:	00800fc4 	movi	r2,63
  81c8c8:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81c8cc:	e0bffb17 	ldw	r2,-20(fp)
  81c8d0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  81c8d4:	e0bffb17 	ldw	r2,-20(fp)
  81c8d8:	10800117 	ldw	r2,4(r2)
  81c8dc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  81c8e0:	00802174 	movhi	r2,133
  81c8e4:	1082f604 	addi	r2,r2,3032
  81c8e8:	10c00017 	ldw	r3,0(r2)
  81c8ec:	e0bff817 	ldw	r2,-32(fp)
  81c8f0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  81c8f4:	00c02174 	movhi	r3,133
  81c8f8:	18c2f604 	addi	r3,r3,3032
  81c8fc:	e0bff817 	ldw	r2,-32(fp)
  81c900:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81c904:	e0bffb17 	ldw	r2,-20(fp)
  81c908:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  81c90c:	00802174 	movhi	r2,133
  81c910:	1082f804 	addi	r2,r2,3040
  81c914:	10c00017 	ldw	r3,0(r2)
  81c918:	e0bffb17 	ldw	r2,-20(fp)
  81c91c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81c920:	e0bffb17 	ldw	r2,-20(fp)
  81c924:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81c928:	00c02174 	movhi	r3,133
  81c92c:	18c2f804 	addi	r3,r3,3040
  81c930:	e0bffb17 	ldw	r2,-20(fp)
  81c934:	18800015 	stw	r2,0(r3)
  81c938:	e0bff717 	ldw	r2,-36(fp)
  81c93c:	e0bff315 	stw	r2,-52(fp)
  81c940:	e0bff317 	ldw	r2,-52(fp)
  81c944:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81c948:	e0bffa03 	ldbu	r2,-24(fp)
  81c94c:	10800058 	cmpnei	r2,r2,1
  81c950:	1000011e 	bne	r2,zero,81c958 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81c954:	0818d000 	call	818d00 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81c958:	e0bffd17 	ldw	r2,-12(fp)
  81c95c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  81c960:	e03ff915 	stw	zero,-28(fp)
             break;
  81c964:	00000906 	br	81c98c <OSQDel+0x2e0>
  81c968:	e0bff717 	ldw	r2,-36(fp)
  81c96c:	e0bff215 	stw	r2,-56(fp)
  81c970:	e0bff217 	ldw	r2,-56(fp)
  81c974:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81c978:	e0fffd17 	ldw	r3,-12(fp)
  81c97c:	008001c4 	movi	r2,7
  81c980:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  81c984:	e0bffb17 	ldw	r2,-20(fp)
  81c988:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81c98c:	e0bff917 	ldw	r2,-28(fp)
  81c990:	e0bfff15 	stw	r2,-4(fp)
  81c994:	e0bfff17 	ldw	r2,-4(fp)
}
  81c998:	e037883a 	mov	sp,fp
  81c99c:	dfc00117 	ldw	ra,4(sp)
  81c9a0:	df000017 	ldw	fp,0(sp)
  81c9a4:	dec00204 	addi	sp,sp,8
  81c9a8:	f800283a 	ret

0081c9ac <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  81c9ac:	defff904 	addi	sp,sp,-28
  81c9b0:	df000615 	stw	fp,24(sp)
  81c9b4:	df000604 	addi	fp,sp,24
  81c9b8:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81c9bc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81c9c0:	e0bffe17 	ldw	r2,-8(fp)
  81c9c4:	1004c03a 	cmpne	r2,r2,zero
  81c9c8:	1000031e 	bne	r2,zero,81c9d8 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  81c9cc:	00800104 	movi	r2,4
  81c9d0:	e0bfff15 	stw	r2,-4(fp)
  81c9d4:	00002206 	br	81ca60 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81c9d8:	e0bffe17 	ldw	r2,-8(fp)
  81c9dc:	10800003 	ldbu	r2,0(r2)
  81c9e0:	10803fcc 	andi	r2,r2,255
  81c9e4:	108000a0 	cmpeqi	r2,r2,2
  81c9e8:	1000031e 	bne	r2,zero,81c9f8 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  81c9ec:	00800044 	movi	r2,1
  81c9f0:	e0bfff15 	stw	r2,-4(fp)
  81c9f4:	00001a06 	br	81ca60 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c9f8:	0005303a 	rdctl	r2,status
  81c9fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ca00:	e0fffb17 	ldw	r3,-20(fp)
  81ca04:	00bfff84 	movi	r2,-2
  81ca08:	1884703a 	and	r2,r3,r2
  81ca0c:	1001703a 	wrctl	status,r2
  
  return context;
  81ca10:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81ca14:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  81ca18:	e0bffe17 	ldw	r2,-8(fp)
  81ca1c:	10800117 	ldw	r2,4(r2)
  81ca20:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  81ca24:	e0bffd17 	ldw	r2,-12(fp)
  81ca28:	10c00117 	ldw	r3,4(r2)
  81ca2c:	e0bffd17 	ldw	r2,-12(fp)
  81ca30:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  81ca34:	e0bffd17 	ldw	r2,-12(fp)
  81ca38:	10c00117 	ldw	r3,4(r2)
  81ca3c:	e0bffd17 	ldw	r2,-12(fp)
  81ca40:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  81ca44:	e0bffd17 	ldw	r2,-12(fp)
  81ca48:	1000058d 	sth	zero,22(r2)
  81ca4c:	e0bffc17 	ldw	r2,-16(fp)
  81ca50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ca54:	e0bffa17 	ldw	r2,-24(fp)
  81ca58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81ca5c:	e03fff15 	stw	zero,-4(fp)
  81ca60:	e0bfff17 	ldw	r2,-4(fp)
}
  81ca64:	e037883a 	mov	sp,fp
  81ca68:	df000017 	ldw	fp,0(sp)
  81ca6c:	dec00104 	addi	sp,sp,4
  81ca70:	f800283a 	ret

0081ca74 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81ca74:	defff104 	addi	sp,sp,-60
  81ca78:	dfc00e15 	stw	ra,56(sp)
  81ca7c:	df000d15 	stw	fp,52(sp)
  81ca80:	df000d04 	addi	fp,sp,52
  81ca84:	e13ffb15 	stw	r4,-20(fp)
  81ca88:	e1bffd15 	stw	r6,-12(fp)
  81ca8c:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81ca90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81ca94:	e0bffd17 	ldw	r2,-12(fp)
  81ca98:	1004c03a 	cmpne	r2,r2,zero
  81ca9c:	1000021e 	bne	r2,zero,81caa8 <OSQPend+0x34>
        return ((void *)0);
  81caa0:	e03fff15 	stw	zero,-4(fp)
  81caa4:	0000b506 	br	81cd7c <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81caa8:	e0bffb17 	ldw	r2,-20(fp)
  81caac:	1004c03a 	cmpne	r2,r2,zero
  81cab0:	1000051e 	bne	r2,zero,81cac8 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81cab4:	e0fffd17 	ldw	r3,-12(fp)
  81cab8:	00800104 	movi	r2,4
  81cabc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81cac0:	e03fff15 	stw	zero,-4(fp)
  81cac4:	0000ad06 	br	81cd7c <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81cac8:	e0bffb17 	ldw	r2,-20(fp)
  81cacc:	10800003 	ldbu	r2,0(r2)
  81cad0:	10803fcc 	andi	r2,r2,255
  81cad4:	108000a0 	cmpeqi	r2,r2,2
  81cad8:	1000051e 	bne	r2,zero,81caf0 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81cadc:	e0fffd17 	ldw	r3,-12(fp)
  81cae0:	00800044 	movi	r2,1
  81cae4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81cae8:	e03fff15 	stw	zero,-4(fp)
  81caec:	0000a306 	br	81cd7c <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81caf0:	00802174 	movhi	r2,133
  81caf4:	1082f904 	addi	r2,r2,3044
  81caf8:	10800003 	ldbu	r2,0(r2)
  81cafc:	10803fcc 	andi	r2,r2,255
  81cb00:	1005003a 	cmpeq	r2,r2,zero
  81cb04:	1000051e 	bne	r2,zero,81cb1c <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  81cb08:	e0fffd17 	ldw	r3,-12(fp)
  81cb0c:	00800084 	movi	r2,2
  81cb10:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81cb14:	e03fff15 	stw	zero,-4(fp)
  81cb18:	00009806 	br	81cd7c <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  81cb1c:	00802174 	movhi	r2,133
  81cb20:	1082eb04 	addi	r2,r2,2988
  81cb24:	10800003 	ldbu	r2,0(r2)
  81cb28:	10803fcc 	andi	r2,r2,255
  81cb2c:	1005003a 	cmpeq	r2,r2,zero
  81cb30:	1000051e 	bne	r2,zero,81cb48 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  81cb34:	e0fffd17 	ldw	r3,-12(fp)
  81cb38:	00800344 	movi	r2,13
  81cb3c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81cb40:	e03fff15 	stw	zero,-4(fp)
  81cb44:	00008d06 	br	81cd7c <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cb48:	0005303a 	rdctl	r2,status
  81cb4c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cb50:	e0fff717 	ldw	r3,-36(fp)
  81cb54:	00bfff84 	movi	r2,-2
  81cb58:	1884703a 	and	r2,r3,r2
  81cb5c:	1001703a 	wrctl	status,r2
  
  return context;
  81cb60:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81cb64:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81cb68:	e0bffb17 	ldw	r2,-20(fp)
  81cb6c:	10800117 	ldw	r2,4(r2)
  81cb70:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81cb74:	e0bff917 	ldw	r2,-28(fp)
  81cb78:	1080058b 	ldhu	r2,22(r2)
  81cb7c:	10bfffcc 	andi	r2,r2,65535
  81cb80:	1005003a 	cmpeq	r2,r2,zero
  81cb84:	10001f1e 	bne	r2,zero,81cc04 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81cb88:	e0bff917 	ldw	r2,-28(fp)
  81cb8c:	10c00417 	ldw	r3,16(r2)
  81cb90:	18800017 	ldw	r2,0(r3)
  81cb94:	e0bffa15 	stw	r2,-24(fp)
  81cb98:	18c00104 	addi	r3,r3,4
  81cb9c:	e0bff917 	ldw	r2,-28(fp)
  81cba0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  81cba4:	e0bff917 	ldw	r2,-28(fp)
  81cba8:	1080058b 	ldhu	r2,22(r2)
  81cbac:	10bfffc4 	addi	r2,r2,-1
  81cbb0:	1007883a 	mov	r3,r2
  81cbb4:	e0bff917 	ldw	r2,-28(fp)
  81cbb8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81cbbc:	e0bff917 	ldw	r2,-28(fp)
  81cbc0:	10c00417 	ldw	r3,16(r2)
  81cbc4:	e0bff917 	ldw	r2,-28(fp)
  81cbc8:	10800217 	ldw	r2,8(r2)
  81cbcc:	1880041e 	bne	r3,r2,81cbe0 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  81cbd0:	e0bff917 	ldw	r2,-28(fp)
  81cbd4:	10c00117 	ldw	r3,4(r2)
  81cbd8:	e0bff917 	ldw	r2,-28(fp)
  81cbdc:	10c00415 	stw	r3,16(r2)
  81cbe0:	e0bff817 	ldw	r2,-32(fp)
  81cbe4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81cbe8:	e0bff617 	ldw	r2,-40(fp)
  81cbec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81cbf0:	e0bffd17 	ldw	r2,-12(fp)
  81cbf4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  81cbf8:	e0bffa17 	ldw	r2,-24(fp)
  81cbfc:	e0bfff15 	stw	r2,-4(fp)
  81cc00:	00005e06 	br	81cd7c <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  81cc04:	00802174 	movhi	r2,133
  81cc08:	1082fa04 	addi	r2,r2,3048
  81cc0c:	10c00017 	ldw	r3,0(r2)
  81cc10:	00802174 	movhi	r2,133
  81cc14:	1082fa04 	addi	r2,r2,3048
  81cc18:	10800017 	ldw	r2,0(r2)
  81cc1c:	10800c03 	ldbu	r2,48(r2)
  81cc20:	10800114 	ori	r2,r2,4
  81cc24:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81cc28:	00802174 	movhi	r2,133
  81cc2c:	1082fa04 	addi	r2,r2,3048
  81cc30:	10800017 	ldw	r2,0(r2)
  81cc34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  81cc38:	00802174 	movhi	r2,133
  81cc3c:	1082fa04 	addi	r2,r2,3048
  81cc40:	10c00017 	ldw	r3,0(r2)
  81cc44:	e0bffc0b 	ldhu	r2,-16(fp)
  81cc48:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  81cc4c:	e13ffb17 	ldw	r4,-20(fp)
  81cc50:	08184540 	call	818454 <OS_EventTaskWait>
  81cc54:	e0bff817 	ldw	r2,-32(fp)
  81cc58:	e0bff515 	stw	r2,-44(fp)
  81cc5c:	e0bff517 	ldw	r2,-44(fp)
  81cc60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  81cc64:	0818d000 	call	818d00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cc68:	0005303a 	rdctl	r2,status
  81cc6c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cc70:	e0fff417 	ldw	r3,-48(fp)
  81cc74:	00bfff84 	movi	r2,-2
  81cc78:	1884703a 	and	r2,r3,r2
  81cc7c:	1001703a 	wrctl	status,r2
  
  return context;
  81cc80:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  81cc84:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81cc88:	00802174 	movhi	r2,133
  81cc8c:	1082fa04 	addi	r2,r2,3048
  81cc90:	10800017 	ldw	r2,0(r2)
  81cc94:	10800c43 	ldbu	r2,49(r2)
  81cc98:	10803fcc 	andi	r2,r2,255
  81cc9c:	e0bffe15 	stw	r2,-8(fp)
  81cca0:	e0fffe17 	ldw	r3,-8(fp)
  81cca4:	1805003a 	cmpeq	r2,r3,zero
  81cca8:	1000041e 	bne	r2,zero,81ccbc <OSQPend+0x248>
  81ccac:	e0fffe17 	ldw	r3,-8(fp)
  81ccb0:	188000a0 	cmpeqi	r2,r3,2
  81ccb4:	1000091e 	bne	r2,zero,81ccdc <OSQPend+0x268>
  81ccb8:	00000d06 	br	81ccf0 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  81ccbc:	00802174 	movhi	r2,133
  81ccc0:	1082fa04 	addi	r2,r2,3048
  81ccc4:	10800017 	ldw	r2,0(r2)
  81ccc8:	10800917 	ldw	r2,36(r2)
  81cccc:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  81ccd0:	e0bffd17 	ldw	r2,-12(fp)
  81ccd4:	10000005 	stb	zero,0(r2)
             break;
  81ccd8:	00000e06 	br	81cd14 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  81ccdc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81cce0:	e0fffd17 	ldw	r3,-12(fp)
  81cce4:	00800384 	movi	r2,14
  81cce8:	18800005 	stb	r2,0(r3)
             break;
  81ccec:	00000906 	br	81cd14 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  81ccf0:	00802174 	movhi	r2,133
  81ccf4:	1082fa04 	addi	r2,r2,3048
  81ccf8:	11000017 	ldw	r4,0(r2)
  81ccfc:	e17ffb17 	ldw	r5,-20(fp)
  81cd00:	08186b80 	call	8186b8 <OS_EventTaskRemove>
             pmsg = (void *)0;
  81cd04:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81cd08:	e0fffd17 	ldw	r3,-12(fp)
  81cd0c:	00800284 	movi	r2,10
  81cd10:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81cd14:	00802174 	movhi	r2,133
  81cd18:	1082fa04 	addi	r2,r2,3048
  81cd1c:	10800017 	ldw	r2,0(r2)
  81cd20:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81cd24:	00802174 	movhi	r2,133
  81cd28:	1082fa04 	addi	r2,r2,3048
  81cd2c:	10800017 	ldw	r2,0(r2)
  81cd30:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81cd34:	00802174 	movhi	r2,133
  81cd38:	1082fa04 	addi	r2,r2,3048
  81cd3c:	10800017 	ldw	r2,0(r2)
  81cd40:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81cd44:	00802174 	movhi	r2,133
  81cd48:	1082fa04 	addi	r2,r2,3048
  81cd4c:	10800017 	ldw	r2,0(r2)
  81cd50:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  81cd54:	00802174 	movhi	r2,133
  81cd58:	1082fa04 	addi	r2,r2,3048
  81cd5c:	10800017 	ldw	r2,0(r2)
  81cd60:	10000915 	stw	zero,36(r2)
  81cd64:	e0bff817 	ldw	r2,-32(fp)
  81cd68:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81cd6c:	e0bff317 	ldw	r2,-52(fp)
  81cd70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  81cd74:	e0bffa17 	ldw	r2,-24(fp)
  81cd78:	e0bfff15 	stw	r2,-4(fp)
  81cd7c:	e0bfff17 	ldw	r2,-4(fp)
}
  81cd80:	e037883a 	mov	sp,fp
  81cd84:	dfc00117 	ldw	ra,4(sp)
  81cd88:	df000017 	ldw	fp,0(sp)
  81cd8c:	dec00204 	addi	sp,sp,8
  81cd90:	f800283a 	ret

0081cd94 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81cd94:	defff504 	addi	sp,sp,-44
  81cd98:	dfc00a15 	stw	ra,40(sp)
  81cd9c:	df000915 	stw	fp,36(sp)
  81cda0:	df000904 	addi	fp,sp,36
  81cda4:	e13ffc15 	stw	r4,-16(fp)
  81cda8:	e1bffe15 	stw	r6,-8(fp)
  81cdac:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81cdb0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81cdb4:	e0bffe17 	ldw	r2,-8(fp)
  81cdb8:	1004c03a 	cmpne	r2,r2,zero
  81cdbc:	1000021e 	bne	r2,zero,81cdc8 <OSQPendAbort+0x34>
        return (0);
  81cdc0:	e03fff15 	stw	zero,-4(fp)
  81cdc4:	00004c06 	br	81cef8 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81cdc8:	e0bffc17 	ldw	r2,-16(fp)
  81cdcc:	1004c03a 	cmpne	r2,r2,zero
  81cdd0:	1000051e 	bne	r2,zero,81cde8 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81cdd4:	e0fffe17 	ldw	r3,-8(fp)
  81cdd8:	00800104 	movi	r2,4
  81cddc:	18800005 	stb	r2,0(r3)
        return (0);
  81cde0:	e03fff15 	stw	zero,-4(fp)
  81cde4:	00004406 	br	81cef8 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81cde8:	e0bffc17 	ldw	r2,-16(fp)
  81cdec:	10800003 	ldbu	r2,0(r2)
  81cdf0:	10803fcc 	andi	r2,r2,255
  81cdf4:	108000a0 	cmpeqi	r2,r2,2
  81cdf8:	1000051e 	bne	r2,zero,81ce10 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81cdfc:	e0fffe17 	ldw	r3,-8(fp)
  81ce00:	00800044 	movi	r2,1
  81ce04:	18800005 	stb	r2,0(r3)
        return (0);
  81ce08:	e03fff15 	stw	zero,-4(fp)
  81ce0c:	00003a06 	br	81cef8 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ce10:	0005303a 	rdctl	r2,status
  81ce14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ce18:	e0fff917 	ldw	r3,-28(fp)
  81ce1c:	00bfff84 	movi	r2,-2
  81ce20:	1884703a 	and	r2,r3,r2
  81ce24:	1001703a 	wrctl	status,r2
  
  return context;
  81ce28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81ce2c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  81ce30:	e0bffc17 	ldw	r2,-16(fp)
  81ce34:	10800283 	ldbu	r2,10(r2)
  81ce38:	10803fcc 	andi	r2,r2,255
  81ce3c:	1005003a 	cmpeq	r2,r2,zero
  81ce40:	1000261e 	bne	r2,zero,81cedc <OSQPendAbort+0x148>
        nbr_tasks = 0;
  81ce44:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81ce48:	e0bffd03 	ldbu	r2,-12(fp)
  81ce4c:	10800060 	cmpeqi	r2,r2,1
  81ce50:	1000091e 	bne	r2,zero,81ce78 <OSQPendAbort+0xe4>
  81ce54:	00000e06 	br	81ce90 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81ce58:	e13ffc17 	ldw	r4,-16(fp)
  81ce5c:	000b883a 	mov	r5,zero
  81ce60:	01800104 	movi	r6,4
  81ce64:	01c00084 	movi	r7,2
  81ce68:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                     nbr_tasks++;
  81ce6c:	e0bffb03 	ldbu	r2,-20(fp)
  81ce70:	10800044 	addi	r2,r2,1
  81ce74:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  81ce78:	e0bffc17 	ldw	r2,-16(fp)
  81ce7c:	10800283 	ldbu	r2,10(r2)
  81ce80:	10803fcc 	andi	r2,r2,255
  81ce84:	1004c03a 	cmpne	r2,r2,zero
  81ce88:	103ff31e 	bne	r2,zero,81ce58 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81ce8c:	00000806 	br	81ceb0 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81ce90:	e13ffc17 	ldw	r4,-16(fp)
  81ce94:	000b883a 	mov	r5,zero
  81ce98:	01800104 	movi	r6,4
  81ce9c:	01c00084 	movi	r7,2
  81cea0:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                 nbr_tasks++;
  81cea4:	e0bffb03 	ldbu	r2,-20(fp)
  81cea8:	10800044 	addi	r2,r2,1
  81ceac:	e0bffb05 	stb	r2,-20(fp)
  81ceb0:	e0bffa17 	ldw	r2,-24(fp)
  81ceb4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ceb8:	e0bff817 	ldw	r2,-32(fp)
  81cebc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  81cec0:	0818d000 	call	818d00 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81cec4:	e0fffe17 	ldw	r3,-8(fp)
  81cec8:	00800384 	movi	r2,14
  81cecc:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81ced0:	e0bffb03 	ldbu	r2,-20(fp)
  81ced4:	e0bfff15 	stw	r2,-4(fp)
  81ced8:	00000706 	br	81cef8 <OSQPendAbort+0x164>
  81cedc:	e0bffa17 	ldw	r2,-24(fp)
  81cee0:	e0bff715 	stw	r2,-36(fp)
  81cee4:	e0bff717 	ldw	r2,-36(fp)
  81cee8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81ceec:	e0bffe17 	ldw	r2,-8(fp)
  81cef0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  81cef4:	e03fff15 	stw	zero,-4(fp)
  81cef8:	e0bfff17 	ldw	r2,-4(fp)
}
  81cefc:	e037883a 	mov	sp,fp
  81cf00:	dfc00117 	ldw	ra,4(sp)
  81cf04:	df000017 	ldw	fp,0(sp)
  81cf08:	dec00204 	addi	sp,sp,8
  81cf0c:	f800283a 	ret

0081cf10 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  81cf10:	defff504 	addi	sp,sp,-44
  81cf14:	dfc00a15 	stw	ra,40(sp)
  81cf18:	df000915 	stw	fp,36(sp)
  81cf1c:	df000904 	addi	fp,sp,36
  81cf20:	e13ffd15 	stw	r4,-12(fp)
  81cf24:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81cf28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  81cf2c:	e0bffd17 	ldw	r2,-12(fp)
  81cf30:	1004c03a 	cmpne	r2,r2,zero
  81cf34:	1000031e 	bne	r2,zero,81cf44 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  81cf38:	00800104 	movi	r2,4
  81cf3c:	e0bfff15 	stw	r2,-4(fp)
  81cf40:	00004d06 	br	81d078 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  81cf44:	e0bffd17 	ldw	r2,-12(fp)
  81cf48:	10800003 	ldbu	r2,0(r2)
  81cf4c:	10803fcc 	andi	r2,r2,255
  81cf50:	108000a0 	cmpeqi	r2,r2,2
  81cf54:	1000031e 	bne	r2,zero,81cf64 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  81cf58:	00800044 	movi	r2,1
  81cf5c:	e0bfff15 	stw	r2,-4(fp)
  81cf60:	00004506 	br	81d078 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cf64:	0005303a 	rdctl	r2,status
  81cf68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cf6c:	e0fffa17 	ldw	r3,-24(fp)
  81cf70:	00bfff84 	movi	r2,-2
  81cf74:	1884703a 	and	r2,r3,r2
  81cf78:	1001703a 	wrctl	status,r2
  
  return context;
  81cf7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81cf80:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  81cf84:	e0bffd17 	ldw	r2,-12(fp)
  81cf88:	10800283 	ldbu	r2,10(r2)
  81cf8c:	10803fcc 	andi	r2,r2,255
  81cf90:	1005003a 	cmpeq	r2,r2,zero
  81cf94:	10000c1e 	bne	r2,zero,81cfc8 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81cf98:	e13ffd17 	ldw	r4,-12(fp)
  81cf9c:	e17ffe17 	ldw	r5,-8(fp)
  81cfa0:	01800104 	movi	r6,4
  81cfa4:	000f883a 	mov	r7,zero
  81cfa8:	08182c00 	call	8182c0 <OS_EventTaskRdy>
  81cfac:	e0bffb17 	ldw	r2,-20(fp)
  81cfb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81cfb4:	e0bff917 	ldw	r2,-28(fp)
  81cfb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  81cfbc:	0818d000 	call	818d00 <OS_Sched>
        return (OS_ERR_NONE);
  81cfc0:	e03fff15 	stw	zero,-4(fp)
  81cfc4:	00002c06 	br	81d078 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  81cfc8:	e0bffd17 	ldw	r2,-12(fp)
  81cfcc:	10800117 	ldw	r2,4(r2)
  81cfd0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  81cfd4:	e0bffc17 	ldw	r2,-16(fp)
  81cfd8:	10c0058b 	ldhu	r3,22(r2)
  81cfdc:	e0bffc17 	ldw	r2,-16(fp)
  81cfe0:	1080050b 	ldhu	r2,20(r2)
  81cfe4:	18ffffcc 	andi	r3,r3,65535
  81cfe8:	10bfffcc 	andi	r2,r2,65535
  81cfec:	18800736 	bltu	r3,r2,81d00c <OSQPost+0xfc>
  81cff0:	e0bffb17 	ldw	r2,-20(fp)
  81cff4:	e0bff815 	stw	r2,-32(fp)
  81cff8:	e0bff817 	ldw	r2,-32(fp)
  81cffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81d000:	00800784 	movi	r2,30
  81d004:	e0bfff15 	stw	r2,-4(fp)
  81d008:	00001b06 	br	81d078 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  81d00c:	e0bffc17 	ldw	r2,-16(fp)
  81d010:	10c00317 	ldw	r3,12(r2)
  81d014:	e0bffe17 	ldw	r2,-8(fp)
  81d018:	18800015 	stw	r2,0(r3)
  81d01c:	18c00104 	addi	r3,r3,4
  81d020:	e0bffc17 	ldw	r2,-16(fp)
  81d024:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  81d028:	e0bffc17 	ldw	r2,-16(fp)
  81d02c:	1080058b 	ldhu	r2,22(r2)
  81d030:	10800044 	addi	r2,r2,1
  81d034:	1007883a 	mov	r3,r2
  81d038:	e0bffc17 	ldw	r2,-16(fp)
  81d03c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  81d040:	e0bffc17 	ldw	r2,-16(fp)
  81d044:	10c00317 	ldw	r3,12(r2)
  81d048:	e0bffc17 	ldw	r2,-16(fp)
  81d04c:	10800217 	ldw	r2,8(r2)
  81d050:	1880041e 	bne	r3,r2,81d064 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  81d054:	e0bffc17 	ldw	r2,-16(fp)
  81d058:	10c00117 	ldw	r3,4(r2)
  81d05c:	e0bffc17 	ldw	r2,-16(fp)
  81d060:	10c00315 	stw	r3,12(r2)
  81d064:	e0bffb17 	ldw	r2,-20(fp)
  81d068:	e0bff715 	stw	r2,-36(fp)
  81d06c:	e0bff717 	ldw	r2,-36(fp)
  81d070:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81d074:	e03fff15 	stw	zero,-4(fp)
  81d078:	e0bfff17 	ldw	r2,-4(fp)
}
  81d07c:	e037883a 	mov	sp,fp
  81d080:	dfc00117 	ldw	ra,4(sp)
  81d084:	df000017 	ldw	fp,0(sp)
  81d088:	dec00204 	addi	sp,sp,8
  81d08c:	f800283a 	ret

0081d090 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  81d090:	defff504 	addi	sp,sp,-44
  81d094:	dfc00a15 	stw	ra,40(sp)
  81d098:	df000915 	stw	fp,36(sp)
  81d09c:	df000904 	addi	fp,sp,36
  81d0a0:	e13ffd15 	stw	r4,-12(fp)
  81d0a4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81d0a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81d0ac:	e0bffd17 	ldw	r2,-12(fp)
  81d0b0:	1004c03a 	cmpne	r2,r2,zero
  81d0b4:	1000031e 	bne	r2,zero,81d0c4 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  81d0b8:	00800104 	movi	r2,4
  81d0bc:	e0bfff15 	stw	r2,-4(fp)
  81d0c0:	00004f06 	br	81d200 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81d0c4:	e0bffd17 	ldw	r2,-12(fp)
  81d0c8:	10800003 	ldbu	r2,0(r2)
  81d0cc:	10803fcc 	andi	r2,r2,255
  81d0d0:	108000a0 	cmpeqi	r2,r2,2
  81d0d4:	1000031e 	bne	r2,zero,81d0e4 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  81d0d8:	00800044 	movi	r2,1
  81d0dc:	e0bfff15 	stw	r2,-4(fp)
  81d0e0:	00004706 	br	81d200 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d0e4:	0005303a 	rdctl	r2,status
  81d0e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d0ec:	e0fffa17 	ldw	r3,-24(fp)
  81d0f0:	00bfff84 	movi	r2,-2
  81d0f4:	1884703a 	and	r2,r3,r2
  81d0f8:	1001703a 	wrctl	status,r2
  
  return context;
  81d0fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81d100:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  81d104:	e0bffd17 	ldw	r2,-12(fp)
  81d108:	10800283 	ldbu	r2,10(r2)
  81d10c:	10803fcc 	andi	r2,r2,255
  81d110:	1005003a 	cmpeq	r2,r2,zero
  81d114:	10000c1e 	bne	r2,zero,81d148 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81d118:	e13ffd17 	ldw	r4,-12(fp)
  81d11c:	e17ffe17 	ldw	r5,-8(fp)
  81d120:	01800104 	movi	r6,4
  81d124:	000f883a 	mov	r7,zero
  81d128:	08182c00 	call	8182c0 <OS_EventTaskRdy>
  81d12c:	e0bffb17 	ldw	r2,-20(fp)
  81d130:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d134:	e0bff917 	ldw	r2,-28(fp)
  81d138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  81d13c:	0818d000 	call	818d00 <OS_Sched>
        return (OS_ERR_NONE);
  81d140:	e03fff15 	stw	zero,-4(fp)
  81d144:	00002e06 	br	81d200 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81d148:	e0bffd17 	ldw	r2,-12(fp)
  81d14c:	10800117 	ldw	r2,4(r2)
  81d150:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  81d154:	e0bffc17 	ldw	r2,-16(fp)
  81d158:	10c0058b 	ldhu	r3,22(r2)
  81d15c:	e0bffc17 	ldw	r2,-16(fp)
  81d160:	1080050b 	ldhu	r2,20(r2)
  81d164:	18ffffcc 	andi	r3,r3,65535
  81d168:	10bfffcc 	andi	r2,r2,65535
  81d16c:	18800736 	bltu	r3,r2,81d18c <OSQPostFront+0xfc>
  81d170:	e0bffb17 	ldw	r2,-20(fp)
  81d174:	e0bff815 	stw	r2,-32(fp)
  81d178:	e0bff817 	ldw	r2,-32(fp)
  81d17c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81d180:	00800784 	movi	r2,30
  81d184:	e0bfff15 	stw	r2,-4(fp)
  81d188:	00001d06 	br	81d200 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  81d18c:	e0bffc17 	ldw	r2,-16(fp)
  81d190:	10c00417 	ldw	r3,16(r2)
  81d194:	e0bffc17 	ldw	r2,-16(fp)
  81d198:	10800117 	ldw	r2,4(r2)
  81d19c:	1880041e 	bne	r3,r2,81d1b0 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  81d1a0:	e0bffc17 	ldw	r2,-16(fp)
  81d1a4:	10c00217 	ldw	r3,8(r2)
  81d1a8:	e0bffc17 	ldw	r2,-16(fp)
  81d1ac:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  81d1b0:	e0bffc17 	ldw	r2,-16(fp)
  81d1b4:	10800417 	ldw	r2,16(r2)
  81d1b8:	10ffff04 	addi	r3,r2,-4
  81d1bc:	e0bffc17 	ldw	r2,-16(fp)
  81d1c0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  81d1c4:	e0bffc17 	ldw	r2,-16(fp)
  81d1c8:	10c00417 	ldw	r3,16(r2)
  81d1cc:	e0bffe17 	ldw	r2,-8(fp)
  81d1d0:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  81d1d4:	e0bffc17 	ldw	r2,-16(fp)
  81d1d8:	1080058b 	ldhu	r2,22(r2)
  81d1dc:	10800044 	addi	r2,r2,1
  81d1e0:	1007883a 	mov	r3,r2
  81d1e4:	e0bffc17 	ldw	r2,-16(fp)
  81d1e8:	10c0058d 	sth	r3,22(r2)
  81d1ec:	e0bffb17 	ldw	r2,-20(fp)
  81d1f0:	e0bff715 	stw	r2,-36(fp)
  81d1f4:	e0bff717 	ldw	r2,-36(fp)
  81d1f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81d1fc:	e03fff15 	stw	zero,-4(fp)
  81d200:	e0bfff17 	ldw	r2,-4(fp)
}
  81d204:	e037883a 	mov	sp,fp
  81d208:	dfc00117 	ldw	ra,4(sp)
  81d20c:	df000017 	ldw	fp,0(sp)
  81d210:	dec00204 	addi	sp,sp,8
  81d214:	f800283a 	ret

0081d218 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  81d218:	defff404 	addi	sp,sp,-48
  81d21c:	dfc00b15 	stw	ra,44(sp)
  81d220:	df000a15 	stw	fp,40(sp)
  81d224:	df000a04 	addi	fp,sp,40
  81d228:	e13ffc15 	stw	r4,-16(fp)
  81d22c:	e17ffd15 	stw	r5,-12(fp)
  81d230:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81d234:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81d238:	e0bffc17 	ldw	r2,-16(fp)
  81d23c:	1004c03a 	cmpne	r2,r2,zero
  81d240:	1000031e 	bne	r2,zero,81d250 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  81d244:	00800104 	movi	r2,4
  81d248:	e0bfff15 	stw	r2,-4(fp)
  81d24c:	00007906 	br	81d434 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81d250:	e0bffc17 	ldw	r2,-16(fp)
  81d254:	10800003 	ldbu	r2,0(r2)
  81d258:	10803fcc 	andi	r2,r2,255
  81d25c:	108000a0 	cmpeqi	r2,r2,2
  81d260:	1000031e 	bne	r2,zero,81d270 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  81d264:	00800044 	movi	r2,1
  81d268:	e0bfff15 	stw	r2,-4(fp)
  81d26c:	00007106 	br	81d434 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d270:	0005303a 	rdctl	r2,status
  81d274:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d278:	e0fff917 	ldw	r3,-28(fp)
  81d27c:	00bfff84 	movi	r2,-2
  81d280:	1884703a 	and	r2,r3,r2
  81d284:	1001703a 	wrctl	status,r2
  
  return context;
  81d288:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81d28c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  81d290:	e0bffc17 	ldw	r2,-16(fp)
  81d294:	10800283 	ldbu	r2,10(r2)
  81d298:	10803fcc 	andi	r2,r2,255
  81d29c:	1005003a 	cmpeq	r2,r2,zero
  81d2a0:	1000211e 	bne	r2,zero,81d328 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  81d2a4:	e0bffe03 	ldbu	r2,-8(fp)
  81d2a8:	1080004c 	andi	r2,r2,1
  81d2ac:	10803fcc 	andi	r2,r2,255
  81d2b0:	1005003a 	cmpeq	r2,r2,zero
  81d2b4:	10000c1e 	bne	r2,zero,81d2e8 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81d2b8:	00000506 	br	81d2d0 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81d2bc:	e13ffc17 	ldw	r4,-16(fp)
  81d2c0:	e17ffd17 	ldw	r5,-12(fp)
  81d2c4:	01800104 	movi	r6,4
  81d2c8:	000f883a 	mov	r7,zero
  81d2cc:	08182c00 	call	8182c0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81d2d0:	e0bffc17 	ldw	r2,-16(fp)
  81d2d4:	10800283 	ldbu	r2,10(r2)
  81d2d8:	10803fcc 	andi	r2,r2,255
  81d2dc:	1004c03a 	cmpne	r2,r2,zero
  81d2e0:	103ff61e 	bne	r2,zero,81d2bc <OSQPostOpt+0xa4>
  81d2e4:	00000506 	br	81d2fc <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81d2e8:	e13ffc17 	ldw	r4,-16(fp)
  81d2ec:	e17ffd17 	ldw	r5,-12(fp)
  81d2f0:	01800104 	movi	r6,4
  81d2f4:	000f883a 	mov	r7,zero
  81d2f8:	08182c00 	call	8182c0 <OS_EventTaskRdy>
  81d2fc:	e0bffa17 	ldw	r2,-24(fp)
  81d300:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d304:	e0bff817 	ldw	r2,-32(fp)
  81d308:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  81d30c:	e0bffe03 	ldbu	r2,-8(fp)
  81d310:	1080010c 	andi	r2,r2,4
  81d314:	1004c03a 	cmpne	r2,r2,zero
  81d318:	1000011e 	bne	r2,zero,81d320 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  81d31c:	0818d000 	call	818d00 <OS_Sched>
        }
        return (OS_ERR_NONE);
  81d320:	e03fff15 	stw	zero,-4(fp)
  81d324:	00004306 	br	81d434 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81d328:	e0bffc17 	ldw	r2,-16(fp)
  81d32c:	10800117 	ldw	r2,4(r2)
  81d330:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  81d334:	e0bffb17 	ldw	r2,-20(fp)
  81d338:	10c0058b 	ldhu	r3,22(r2)
  81d33c:	e0bffb17 	ldw	r2,-20(fp)
  81d340:	1080050b 	ldhu	r2,20(r2)
  81d344:	18ffffcc 	andi	r3,r3,65535
  81d348:	10bfffcc 	andi	r2,r2,65535
  81d34c:	18800736 	bltu	r3,r2,81d36c <OSQPostOpt+0x154>
  81d350:	e0bffa17 	ldw	r2,-24(fp)
  81d354:	e0bff715 	stw	r2,-36(fp)
  81d358:	e0bff717 	ldw	r2,-36(fp)
  81d35c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81d360:	00800784 	movi	r2,30
  81d364:	e0bfff15 	stw	r2,-4(fp)
  81d368:	00003206 	br	81d434 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  81d36c:	e0bffe03 	ldbu	r2,-8(fp)
  81d370:	1080008c 	andi	r2,r2,2
  81d374:	1005003a 	cmpeq	r2,r2,zero
  81d378:	1000131e 	bne	r2,zero,81d3c8 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  81d37c:	e0bffb17 	ldw	r2,-20(fp)
  81d380:	10c00417 	ldw	r3,16(r2)
  81d384:	e0bffb17 	ldw	r2,-20(fp)
  81d388:	10800117 	ldw	r2,4(r2)
  81d38c:	1880041e 	bne	r3,r2,81d3a0 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  81d390:	e0bffb17 	ldw	r2,-20(fp)
  81d394:	10c00217 	ldw	r3,8(r2)
  81d398:	e0bffb17 	ldw	r2,-20(fp)
  81d39c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  81d3a0:	e0bffb17 	ldw	r2,-20(fp)
  81d3a4:	10800417 	ldw	r2,16(r2)
  81d3a8:	10ffff04 	addi	r3,r2,-4
  81d3ac:	e0bffb17 	ldw	r2,-20(fp)
  81d3b0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  81d3b4:	e0bffb17 	ldw	r2,-20(fp)
  81d3b8:	10c00417 	ldw	r3,16(r2)
  81d3bc:	e0bffd17 	ldw	r2,-12(fp)
  81d3c0:	18800015 	stw	r2,0(r3)
  81d3c4:	00001006 	br	81d408 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  81d3c8:	e0bffb17 	ldw	r2,-20(fp)
  81d3cc:	10c00317 	ldw	r3,12(r2)
  81d3d0:	e0bffd17 	ldw	r2,-12(fp)
  81d3d4:	18800015 	stw	r2,0(r3)
  81d3d8:	18c00104 	addi	r3,r3,4
  81d3dc:	e0bffb17 	ldw	r2,-20(fp)
  81d3e0:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  81d3e4:	e0bffb17 	ldw	r2,-20(fp)
  81d3e8:	10c00317 	ldw	r3,12(r2)
  81d3ec:	e0bffb17 	ldw	r2,-20(fp)
  81d3f0:	10800217 	ldw	r2,8(r2)
  81d3f4:	1880041e 	bne	r3,r2,81d408 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  81d3f8:	e0bffb17 	ldw	r2,-20(fp)
  81d3fc:	10c00117 	ldw	r3,4(r2)
  81d400:	e0bffb17 	ldw	r2,-20(fp)
  81d404:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  81d408:	e0bffb17 	ldw	r2,-20(fp)
  81d40c:	1080058b 	ldhu	r2,22(r2)
  81d410:	10800044 	addi	r2,r2,1
  81d414:	1007883a 	mov	r3,r2
  81d418:	e0bffb17 	ldw	r2,-20(fp)
  81d41c:	10c0058d 	sth	r3,22(r2)
  81d420:	e0bffa17 	ldw	r2,-24(fp)
  81d424:	e0bff615 	stw	r2,-40(fp)
  81d428:	e0bff617 	ldw	r2,-40(fp)
  81d42c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81d430:	e03fff15 	stw	zero,-4(fp)
  81d434:	e0bfff17 	ldw	r2,-4(fp)
}
  81d438:	e037883a 	mov	sp,fp
  81d43c:	dfc00117 	ldw	ra,4(sp)
  81d440:	df000017 	ldw	fp,0(sp)
  81d444:	dec00204 	addi	sp,sp,8
  81d448:	f800283a 	ret

0081d44c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  81d44c:	defff504 	addi	sp,sp,-44
  81d450:	df000a15 	stw	fp,40(sp)
  81d454:	df000a04 	addi	fp,sp,40
  81d458:	e13ffd15 	stw	r4,-12(fp)
  81d45c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81d460:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  81d464:	e0bffd17 	ldw	r2,-12(fp)
  81d468:	1004c03a 	cmpne	r2,r2,zero
  81d46c:	1000031e 	bne	r2,zero,81d47c <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81d470:	00800104 	movi	r2,4
  81d474:	e0bfff15 	stw	r2,-4(fp)
  81d478:	00004f06 	br	81d5b8 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  81d47c:	e0bffe17 	ldw	r2,-8(fp)
  81d480:	1004c03a 	cmpne	r2,r2,zero
  81d484:	1000031e 	bne	r2,zero,81d494 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81d488:	00800244 	movi	r2,9
  81d48c:	e0bfff15 	stw	r2,-4(fp)
  81d490:	00004906 	br	81d5b8 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  81d494:	e0bffd17 	ldw	r2,-12(fp)
  81d498:	10800003 	ldbu	r2,0(r2)
  81d49c:	10803fcc 	andi	r2,r2,255
  81d4a0:	108000a0 	cmpeqi	r2,r2,2
  81d4a4:	1000031e 	bne	r2,zero,81d4b4 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81d4a8:	00800044 	movi	r2,1
  81d4ac:	e0bfff15 	stw	r2,-4(fp)
  81d4b0:	00004106 	br	81d5b8 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d4b4:	0005303a 	rdctl	r2,status
  81d4b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d4bc:	e0fff717 	ldw	r3,-36(fp)
  81d4c0:	00bfff84 	movi	r2,-2
  81d4c4:	1884703a 	and	r2,r3,r2
  81d4c8:	1001703a 	wrctl	status,r2
  
  return context;
  81d4cc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81d4d0:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  81d4d4:	e0bffd17 	ldw	r2,-12(fp)
  81d4d8:	10c00283 	ldbu	r3,10(r2)
  81d4dc:	e0bffe17 	ldw	r2,-8(fp)
  81d4e0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  81d4e4:	e0bffd17 	ldw	r2,-12(fp)
  81d4e8:	108002c4 	addi	r2,r2,11
  81d4ec:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  81d4f0:	e0bffe17 	ldw	r2,-8(fp)
  81d4f4:	10800204 	addi	r2,r2,8
  81d4f8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81d4fc:	e03ffb05 	stb	zero,-20(fp)
  81d500:	00000d06 	br	81d538 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  81d504:	e0bffa17 	ldw	r2,-24(fp)
  81d508:	10c00003 	ldbu	r3,0(r2)
  81d50c:	e0bff917 	ldw	r2,-28(fp)
  81d510:	10c00005 	stb	r3,0(r2)
  81d514:	e0bff917 	ldw	r2,-28(fp)
  81d518:	10800044 	addi	r2,r2,1
  81d51c:	e0bff915 	stw	r2,-28(fp)
  81d520:	e0bffa17 	ldw	r2,-24(fp)
  81d524:	10800044 	addi	r2,r2,1
  81d528:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81d52c:	e0bffb03 	ldbu	r2,-20(fp)
  81d530:	10800044 	addi	r2,r2,1
  81d534:	e0bffb05 	stb	r2,-20(fp)
  81d538:	e0bffb03 	ldbu	r2,-20(fp)
  81d53c:	108000f0 	cmpltui	r2,r2,3
  81d540:	103ff01e 	bne	r2,zero,81d504 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  81d544:	e0bffd17 	ldw	r2,-12(fp)
  81d548:	10800117 	ldw	r2,4(r2)
  81d54c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  81d550:	e0bffc17 	ldw	r2,-16(fp)
  81d554:	1080058b 	ldhu	r2,22(r2)
  81d558:	10bfffcc 	andi	r2,r2,65535
  81d55c:	1005003a 	cmpeq	r2,r2,zero
  81d560:	1000061e 	bne	r2,zero,81d57c <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  81d564:	e0bffc17 	ldw	r2,-16(fp)
  81d568:	10800417 	ldw	r2,16(r2)
  81d56c:	10c00017 	ldw	r3,0(r2)
  81d570:	e0bffe17 	ldw	r2,-8(fp)
  81d574:	10c00015 	stw	r3,0(r2)
  81d578:	00000206 	br	81d584 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  81d57c:	e0bffe17 	ldw	r2,-8(fp)
  81d580:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  81d584:	e0bffc17 	ldw	r2,-16(fp)
  81d588:	10c0058b 	ldhu	r3,22(r2)
  81d58c:	e0bffe17 	ldw	r2,-8(fp)
  81d590:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  81d594:	e0bffc17 	ldw	r2,-16(fp)
  81d598:	10c0050b 	ldhu	r3,20(r2)
  81d59c:	e0bffe17 	ldw	r2,-8(fp)
  81d5a0:	10c0018d 	sth	r3,6(r2)
  81d5a4:	e0bff817 	ldw	r2,-32(fp)
  81d5a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d5ac:	e0bff617 	ldw	r2,-40(fp)
  81d5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81d5b4:	e03fff15 	stw	zero,-4(fp)
  81d5b8:	e0bfff17 	ldw	r2,-4(fp)
}
  81d5bc:	e037883a 	mov	sp,fp
  81d5c0:	df000017 	ldw	fp,0(sp)
  81d5c4:	dec00104 	addi	sp,sp,4
  81d5c8:	f800283a 	ret

0081d5cc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  81d5cc:	defffb04 	addi	sp,sp,-20
  81d5d0:	dfc00415 	stw	ra,16(sp)
  81d5d4:	df000315 	stw	fp,12(sp)
  81d5d8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  81d5dc:	01003934 	movhi	r4,228
  81d5e0:	21203604 	addi	r4,r4,-32552
  81d5e4:	01407804 	movi	r5,480
  81d5e8:	0818c400 	call	818c40 <OS_MemClr>
    pq1 = &OSQTbl[0];
  81d5ec:	00803934 	movhi	r2,228
  81d5f0:	10a03604 	addi	r2,r2,-32552
  81d5f4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  81d5f8:	00803934 	movhi	r2,228
  81d5fc:	10a03c04 	addi	r2,r2,-32528
  81d600:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81d604:	e03fff0d 	sth	zero,-4(fp)
  81d608:	00000c06 	br	81d63c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  81d60c:	e0fffe17 	ldw	r3,-8(fp)
  81d610:	e0bffd17 	ldw	r2,-12(fp)
  81d614:	18800015 	stw	r2,0(r3)
        pq1++;
  81d618:	e0bffe17 	ldw	r2,-8(fp)
  81d61c:	10800604 	addi	r2,r2,24
  81d620:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  81d624:	e0bffd17 	ldw	r2,-12(fp)
  81d628:	10800604 	addi	r2,r2,24
  81d62c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81d630:	e0bfff0b 	ldhu	r2,-4(fp)
  81d634:	10800044 	addi	r2,r2,1
  81d638:	e0bfff0d 	sth	r2,-4(fp)
  81d63c:	e0bfff0b 	ldhu	r2,-4(fp)
  81d640:	108004f0 	cmpltui	r2,r2,19
  81d644:	103ff11e 	bne	r2,zero,81d60c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  81d648:	e0bffe17 	ldw	r2,-8(fp)
  81d64c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  81d650:	00c02174 	movhi	r3,133
  81d654:	18c2f604 	addi	r3,r3,3032
  81d658:	00803934 	movhi	r2,228
  81d65c:	10a03604 	addi	r2,r2,-32552
  81d660:	18800015 	stw	r2,0(r3)
#endif
}
  81d664:	e037883a 	mov	sp,fp
  81d668:	dfc00117 	ldw	ra,4(sp)
  81d66c:	df000017 	ldw	fp,0(sp)
  81d670:	dec00204 	addi	sp,sp,8
  81d674:	f800283a 	ret

0081d678 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  81d678:	defff904 	addi	sp,sp,-28
  81d67c:	df000615 	stw	fp,24(sp)
  81d680:	df000604 	addi	fp,sp,24
  81d684:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81d688:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81d68c:	e0bffe17 	ldw	r2,-8(fp)
  81d690:	1004c03a 	cmpne	r2,r2,zero
  81d694:	1000021e 	bne	r2,zero,81d6a0 <OSSemAccept+0x28>
        return (0);
  81d698:	e03fff15 	stw	zero,-4(fp)
  81d69c:	00002106 	br	81d724 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81d6a0:	e0bffe17 	ldw	r2,-8(fp)
  81d6a4:	10800003 	ldbu	r2,0(r2)
  81d6a8:	10803fcc 	andi	r2,r2,255
  81d6ac:	108000e0 	cmpeqi	r2,r2,3
  81d6b0:	1000021e 	bne	r2,zero,81d6bc <OSSemAccept+0x44>
        return (0);
  81d6b4:	e03fff15 	stw	zero,-4(fp)
  81d6b8:	00001a06 	br	81d724 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d6bc:	0005303a 	rdctl	r2,status
  81d6c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d6c4:	e0fffb17 	ldw	r3,-20(fp)
  81d6c8:	00bfff84 	movi	r2,-2
  81d6cc:	1884703a 	and	r2,r3,r2
  81d6d0:	1001703a 	wrctl	status,r2
  
  return context;
  81d6d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81d6d8:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  81d6dc:	e0bffe17 	ldw	r2,-8(fp)
  81d6e0:	1080020b 	ldhu	r2,8(r2)
  81d6e4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  81d6e8:	e0bffd0b 	ldhu	r2,-12(fp)
  81d6ec:	1005003a 	cmpeq	r2,r2,zero
  81d6f0:	1000061e 	bne	r2,zero,81d70c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  81d6f4:	e0bffe17 	ldw	r2,-8(fp)
  81d6f8:	1080020b 	ldhu	r2,8(r2)
  81d6fc:	10bfffc4 	addi	r2,r2,-1
  81d700:	1007883a 	mov	r3,r2
  81d704:	e0bffe17 	ldw	r2,-8(fp)
  81d708:	10c0020d 	sth	r3,8(r2)
  81d70c:	e0bffc17 	ldw	r2,-16(fp)
  81d710:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d714:	e0bffa17 	ldw	r2,-24(fp)
  81d718:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  81d71c:	e0bffd0b 	ldhu	r2,-12(fp)
  81d720:	e0bfff15 	stw	r2,-4(fp)
  81d724:	e0bfff17 	ldw	r2,-4(fp)
}
  81d728:	e037883a 	mov	sp,fp
  81d72c:	df000017 	ldw	fp,0(sp)
  81d730:	dec00104 	addi	sp,sp,4
  81d734:	f800283a 	ret

0081d738 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  81d738:	defff804 	addi	sp,sp,-32
  81d73c:	dfc00715 	stw	ra,28(sp)
  81d740:	df000615 	stw	fp,24(sp)
  81d744:	df000604 	addi	fp,sp,24
  81d748:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81d74c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81d750:	00802174 	movhi	r2,133
  81d754:	1082f904 	addi	r2,r2,3044
  81d758:	10800003 	ldbu	r2,0(r2)
  81d75c:	10803fcc 	andi	r2,r2,255
  81d760:	1005003a 	cmpeq	r2,r2,zero
  81d764:	1000021e 	bne	r2,zero,81d770 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  81d768:	e03fff15 	stw	zero,-4(fp)
  81d76c:	00003106 	br	81d834 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d770:	0005303a 	rdctl	r2,status
  81d774:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d778:	e0fffb17 	ldw	r3,-20(fp)
  81d77c:	00bfff84 	movi	r2,-2
  81d780:	1884703a 	and	r2,r3,r2
  81d784:	1001703a 	wrctl	status,r2
  
  return context;
  81d788:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81d78c:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  81d790:	00802174 	movhi	r2,133
  81d794:	1082f804 	addi	r2,r2,3040
  81d798:	10800017 	ldw	r2,0(r2)
  81d79c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  81d7a0:	00802174 	movhi	r2,133
  81d7a4:	1082f804 	addi	r2,r2,3040
  81d7a8:	10800017 	ldw	r2,0(r2)
  81d7ac:	1005003a 	cmpeq	r2,r2,zero
  81d7b0:	1000081e 	bne	r2,zero,81d7d4 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81d7b4:	00802174 	movhi	r2,133
  81d7b8:	1082f804 	addi	r2,r2,3040
  81d7bc:	10800017 	ldw	r2,0(r2)
  81d7c0:	10800117 	ldw	r2,4(r2)
  81d7c4:	1007883a 	mov	r3,r2
  81d7c8:	00802174 	movhi	r2,133
  81d7cc:	1082f804 	addi	r2,r2,3040
  81d7d0:	10c00015 	stw	r3,0(r2)
  81d7d4:	e0bffc17 	ldw	r2,-16(fp)
  81d7d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d7dc:	e0bffa17 	ldw	r2,-24(fp)
  81d7e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  81d7e4:	e0bffd17 	ldw	r2,-12(fp)
  81d7e8:	1005003a 	cmpeq	r2,r2,zero
  81d7ec:	10000f1e 	bne	r2,zero,81d82c <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  81d7f0:	e0fffd17 	ldw	r3,-12(fp)
  81d7f4:	008000c4 	movi	r2,3
  81d7f8:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  81d7fc:	e0fffd17 	ldw	r3,-12(fp)
  81d800:	e0bffe0b 	ldhu	r2,-8(fp)
  81d804:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  81d808:	e0bffd17 	ldw	r2,-12(fp)
  81d80c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  81d810:	e0fffd17 	ldw	r3,-12(fp)
  81d814:	00800fc4 	movi	r2,63
  81d818:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  81d81c:	e0bffd17 	ldw	r2,-12(fp)
  81d820:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  81d824:	e13ffd17 	ldw	r4,-12(fp)
  81d828:	08188740 	call	818874 <OS_EventWaitListInit>
    }
    return (pevent);
  81d82c:	e0bffd17 	ldw	r2,-12(fp)
  81d830:	e0bfff15 	stw	r2,-4(fp)
  81d834:	e0bfff17 	ldw	r2,-4(fp)
}
  81d838:	e037883a 	mov	sp,fp
  81d83c:	dfc00117 	ldw	ra,4(sp)
  81d840:	df000017 	ldw	fp,0(sp)
  81d844:	dec00204 	addi	sp,sp,8
  81d848:	f800283a 	ret

0081d84c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81d84c:	defff104 	addi	sp,sp,-60
  81d850:	dfc00e15 	stw	ra,56(sp)
  81d854:	df000d15 	stw	fp,52(sp)
  81d858:	df000d04 	addi	fp,sp,52
  81d85c:	e13ffb15 	stw	r4,-20(fp)
  81d860:	e1bffd15 	stw	r6,-12(fp)
  81d864:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81d868:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81d86c:	e0bffd17 	ldw	r2,-12(fp)
  81d870:	1004c03a 	cmpne	r2,r2,zero
  81d874:	1000031e 	bne	r2,zero,81d884 <OSSemDel+0x38>
        return (pevent);
  81d878:	e0bffb17 	ldw	r2,-20(fp)
  81d87c:	e0bfff15 	stw	r2,-4(fp)
  81d880:	00009406 	br	81dad4 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81d884:	e0bffb17 	ldw	r2,-20(fp)
  81d888:	1004c03a 	cmpne	r2,r2,zero
  81d88c:	1000061e 	bne	r2,zero,81d8a8 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81d890:	e0fffd17 	ldw	r3,-12(fp)
  81d894:	00800104 	movi	r2,4
  81d898:	18800005 	stb	r2,0(r3)
        return (pevent);
  81d89c:	e0fffb17 	ldw	r3,-20(fp)
  81d8a0:	e0ffff15 	stw	r3,-4(fp)
  81d8a4:	00008b06 	br	81dad4 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81d8a8:	e0bffb17 	ldw	r2,-20(fp)
  81d8ac:	10800003 	ldbu	r2,0(r2)
  81d8b0:	10803fcc 	andi	r2,r2,255
  81d8b4:	108000e0 	cmpeqi	r2,r2,3
  81d8b8:	1000061e 	bne	r2,zero,81d8d4 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81d8bc:	e0fffd17 	ldw	r3,-12(fp)
  81d8c0:	00800044 	movi	r2,1
  81d8c4:	18800005 	stb	r2,0(r3)
        return (pevent);
  81d8c8:	e0bffb17 	ldw	r2,-20(fp)
  81d8cc:	e0bfff15 	stw	r2,-4(fp)
  81d8d0:	00008006 	br	81dad4 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81d8d4:	00802174 	movhi	r2,133
  81d8d8:	1082f904 	addi	r2,r2,3044
  81d8dc:	10800003 	ldbu	r2,0(r2)
  81d8e0:	10803fcc 	andi	r2,r2,255
  81d8e4:	1005003a 	cmpeq	r2,r2,zero
  81d8e8:	1000061e 	bne	r2,zero,81d904 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  81d8ec:	e0fffd17 	ldw	r3,-12(fp)
  81d8f0:	008003c4 	movi	r2,15
  81d8f4:	18800005 	stb	r2,0(r3)
        return (pevent);
  81d8f8:	e0fffb17 	ldw	r3,-20(fp)
  81d8fc:	e0ffff15 	stw	r3,-4(fp)
  81d900:	00007406 	br	81dad4 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d904:	0005303a 	rdctl	r2,status
  81d908:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d90c:	e0fff717 	ldw	r3,-36(fp)
  81d910:	00bfff84 	movi	r2,-2
  81d914:	1884703a 	and	r2,r3,r2
  81d918:	1001703a 	wrctl	status,r2
  
  return context;
  81d91c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81d920:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  81d924:	e0bffb17 	ldw	r2,-20(fp)
  81d928:	10800283 	ldbu	r2,10(r2)
  81d92c:	10803fcc 	andi	r2,r2,255
  81d930:	1005003a 	cmpeq	r2,r2,zero
  81d934:	1000031e 	bne	r2,zero,81d944 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81d938:	00800044 	movi	r2,1
  81d93c:	e0bffa05 	stb	r2,-24(fp)
  81d940:	00000106 	br	81d948 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81d944:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81d948:	e0bffc03 	ldbu	r2,-16(fp)
  81d94c:	e0bffe15 	stw	r2,-8(fp)
  81d950:	e0fffe17 	ldw	r3,-8(fp)
  81d954:	1805003a 	cmpeq	r2,r3,zero
  81d958:	1000041e 	bne	r2,zero,81d96c <OSSemDel+0x120>
  81d95c:	e0fffe17 	ldw	r3,-8(fp)
  81d960:	18800060 	cmpeqi	r2,r3,1
  81d964:	10002d1e 	bne	r2,zero,81da1c <OSSemDel+0x1d0>
  81d968:	00004f06 	br	81daa8 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  81d96c:	e0bffa03 	ldbu	r2,-24(fp)
  81d970:	1004c03a 	cmpne	r2,r2,zero
  81d974:	10001a1e 	bne	r2,zero,81d9e0 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81d978:	e0fffb17 	ldw	r3,-20(fp)
  81d97c:	00800fc4 	movi	r2,63
  81d980:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81d984:	e0bffb17 	ldw	r2,-20(fp)
  81d988:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81d98c:	e0bffb17 	ldw	r2,-20(fp)
  81d990:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81d994:	00802174 	movhi	r2,133
  81d998:	1082f804 	addi	r2,r2,3040
  81d99c:	10c00017 	ldw	r3,0(r2)
  81d9a0:	e0bffb17 	ldw	r2,-20(fp)
  81d9a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81d9a8:	e0bffb17 	ldw	r2,-20(fp)
  81d9ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81d9b0:	00c02174 	movhi	r3,133
  81d9b4:	18c2f804 	addi	r3,r3,3040
  81d9b8:	e0bffb17 	ldw	r2,-20(fp)
  81d9bc:	18800015 	stw	r2,0(r3)
  81d9c0:	e0bff817 	ldw	r2,-32(fp)
  81d9c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d9c8:	e0bff617 	ldw	r2,-40(fp)
  81d9cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81d9d0:	e0bffd17 	ldw	r2,-12(fp)
  81d9d4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  81d9d8:	e03ff915 	stw	zero,-28(fp)
  81d9dc:	00003b06 	br	81dacc <OSSemDel+0x280>
  81d9e0:	e0bff817 	ldw	r2,-32(fp)
  81d9e4:	e0bff515 	stw	r2,-44(fp)
  81d9e8:	e0bff517 	ldw	r2,-44(fp)
  81d9ec:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81d9f0:	e0fffd17 	ldw	r3,-12(fp)
  81d9f4:	00801244 	movi	r2,73
  81d9f8:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81d9fc:	e0bffb17 	ldw	r2,-20(fp)
  81da00:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  81da04:	00003106 	br	81dacc <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81da08:	e13ffb17 	ldw	r4,-20(fp)
  81da0c:	000b883a 	mov	r5,zero
  81da10:	01800044 	movi	r6,1
  81da14:	000f883a 	mov	r7,zero
  81da18:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  81da1c:	e0bffb17 	ldw	r2,-20(fp)
  81da20:	10800283 	ldbu	r2,10(r2)
  81da24:	10803fcc 	andi	r2,r2,255
  81da28:	1004c03a 	cmpne	r2,r2,zero
  81da2c:	103ff61e 	bne	r2,zero,81da08 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81da30:	e0fffb17 	ldw	r3,-20(fp)
  81da34:	00800fc4 	movi	r2,63
  81da38:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81da3c:	e0bffb17 	ldw	r2,-20(fp)
  81da40:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81da44:	e0bffb17 	ldw	r2,-20(fp)
  81da48:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  81da4c:	00802174 	movhi	r2,133
  81da50:	1082f804 	addi	r2,r2,3040
  81da54:	10c00017 	ldw	r3,0(r2)
  81da58:	e0bffb17 	ldw	r2,-20(fp)
  81da5c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81da60:	e0bffb17 	ldw	r2,-20(fp)
  81da64:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81da68:	00c02174 	movhi	r3,133
  81da6c:	18c2f804 	addi	r3,r3,3040
  81da70:	e0bffb17 	ldw	r2,-20(fp)
  81da74:	18800015 	stw	r2,0(r3)
  81da78:	e0bff817 	ldw	r2,-32(fp)
  81da7c:	e0bff415 	stw	r2,-48(fp)
  81da80:	e0bff417 	ldw	r2,-48(fp)
  81da84:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81da88:	e0bffa03 	ldbu	r2,-24(fp)
  81da8c:	10800058 	cmpnei	r2,r2,1
  81da90:	1000011e 	bne	r2,zero,81da98 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81da94:	0818d000 	call	818d00 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81da98:	e0bffd17 	ldw	r2,-12(fp)
  81da9c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  81daa0:	e03ff915 	stw	zero,-28(fp)
             break;
  81daa4:	00000906 	br	81dacc <OSSemDel+0x280>
  81daa8:	e0bff817 	ldw	r2,-32(fp)
  81daac:	e0bff315 	stw	r2,-52(fp)
  81dab0:	e0bff317 	ldw	r2,-52(fp)
  81dab4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81dab8:	e0fffd17 	ldw	r3,-12(fp)
  81dabc:	008001c4 	movi	r2,7
  81dac0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  81dac4:	e0bffb17 	ldw	r2,-20(fp)
  81dac8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81dacc:	e0bff917 	ldw	r2,-28(fp)
  81dad0:	e0bfff15 	stw	r2,-4(fp)
  81dad4:	e0bfff17 	ldw	r2,-4(fp)
}
  81dad8:	e037883a 	mov	sp,fp
  81dadc:	dfc00117 	ldw	ra,4(sp)
  81dae0:	df000017 	ldw	fp,0(sp)
  81dae4:	dec00204 	addi	sp,sp,8
  81dae8:	f800283a 	ret

0081daec <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81daec:	defff404 	addi	sp,sp,-48
  81daf0:	dfc00b15 	stw	ra,44(sp)
  81daf4:	df000a15 	stw	fp,40(sp)
  81daf8:	df000a04 	addi	fp,sp,40
  81dafc:	e13ffc15 	stw	r4,-16(fp)
  81db00:	e1bffe15 	stw	r6,-8(fp)
  81db04:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81db08:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81db0c:	e0bffe17 	ldw	r2,-8(fp)
  81db10:	1005003a 	cmpeq	r2,r2,zero
  81db14:	10008f1e 	bne	r2,zero,81dd54 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81db18:	e0bffc17 	ldw	r2,-16(fp)
  81db1c:	1004c03a 	cmpne	r2,r2,zero
  81db20:	1000041e 	bne	r2,zero,81db34 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  81db24:	e0fffe17 	ldw	r3,-8(fp)
  81db28:	00800104 	movi	r2,4
  81db2c:	18800005 	stb	r2,0(r3)
        return;
  81db30:	00008806 	br	81dd54 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81db34:	e0bffc17 	ldw	r2,-16(fp)
  81db38:	10800003 	ldbu	r2,0(r2)
  81db3c:	10803fcc 	andi	r2,r2,255
  81db40:	108000e0 	cmpeqi	r2,r2,3
  81db44:	1000041e 	bne	r2,zero,81db58 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  81db48:	e0fffe17 	ldw	r3,-8(fp)
  81db4c:	00800044 	movi	r2,1
  81db50:	18800005 	stb	r2,0(r3)
        return;
  81db54:	00007f06 	br	81dd54 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  81db58:	00802174 	movhi	r2,133
  81db5c:	1082f904 	addi	r2,r2,3044
  81db60:	10800003 	ldbu	r2,0(r2)
  81db64:	10803fcc 	andi	r2,r2,255
  81db68:	1005003a 	cmpeq	r2,r2,zero
  81db6c:	1000041e 	bne	r2,zero,81db80 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  81db70:	e0fffe17 	ldw	r3,-8(fp)
  81db74:	00800084 	movi	r2,2
  81db78:	18800005 	stb	r2,0(r3)
        return;
  81db7c:	00007506 	br	81dd54 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  81db80:	00802174 	movhi	r2,133
  81db84:	1082eb04 	addi	r2,r2,2988
  81db88:	10800003 	ldbu	r2,0(r2)
  81db8c:	10803fcc 	andi	r2,r2,255
  81db90:	1005003a 	cmpeq	r2,r2,zero
  81db94:	1000041e 	bne	r2,zero,81dba8 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  81db98:	e0fffe17 	ldw	r3,-8(fp)
  81db9c:	00800344 	movi	r2,13
  81dba0:	18800005 	stb	r2,0(r3)
        return;
  81dba4:	00006b06 	br	81dd54 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dba8:	0005303a 	rdctl	r2,status
  81dbac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dbb0:	e0fffa17 	ldw	r3,-24(fp)
  81dbb4:	00bfff84 	movi	r2,-2
  81dbb8:	1884703a 	and	r2,r3,r2
  81dbbc:	1001703a 	wrctl	status,r2
  
  return context;
  81dbc0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81dbc4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  81dbc8:	e0bffc17 	ldw	r2,-16(fp)
  81dbcc:	1080020b 	ldhu	r2,8(r2)
  81dbd0:	10bfffcc 	andi	r2,r2,65535
  81dbd4:	1005003a 	cmpeq	r2,r2,zero
  81dbd8:	10000d1e 	bne	r2,zero,81dc10 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  81dbdc:	e0bffc17 	ldw	r2,-16(fp)
  81dbe0:	1080020b 	ldhu	r2,8(r2)
  81dbe4:	10bfffc4 	addi	r2,r2,-1
  81dbe8:	1007883a 	mov	r3,r2
  81dbec:	e0bffc17 	ldw	r2,-16(fp)
  81dbf0:	10c0020d 	sth	r3,8(r2)
  81dbf4:	e0bffb17 	ldw	r2,-20(fp)
  81dbf8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81dbfc:	e0bff917 	ldw	r2,-28(fp)
  81dc00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81dc04:	e0bffe17 	ldw	r2,-8(fp)
  81dc08:	10000005 	stb	zero,0(r2)
        return;
  81dc0c:	00005106 	br	81dd54 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  81dc10:	00802174 	movhi	r2,133
  81dc14:	1082fa04 	addi	r2,r2,3048
  81dc18:	10c00017 	ldw	r3,0(r2)
  81dc1c:	00802174 	movhi	r2,133
  81dc20:	1082fa04 	addi	r2,r2,3048
  81dc24:	10800017 	ldw	r2,0(r2)
  81dc28:	10800c03 	ldbu	r2,48(r2)
  81dc2c:	10800054 	ori	r2,r2,1
  81dc30:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81dc34:	00802174 	movhi	r2,133
  81dc38:	1082fa04 	addi	r2,r2,3048
  81dc3c:	10800017 	ldw	r2,0(r2)
  81dc40:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  81dc44:	00802174 	movhi	r2,133
  81dc48:	1082fa04 	addi	r2,r2,3048
  81dc4c:	10c00017 	ldw	r3,0(r2)
  81dc50:	e0bffd0b 	ldhu	r2,-12(fp)
  81dc54:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  81dc58:	e13ffc17 	ldw	r4,-16(fp)
  81dc5c:	08184540 	call	818454 <OS_EventTaskWait>
  81dc60:	e0bffb17 	ldw	r2,-20(fp)
  81dc64:	e0bff815 	stw	r2,-32(fp)
  81dc68:	e0bff817 	ldw	r2,-32(fp)
  81dc6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  81dc70:	0818d000 	call	818d00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dc74:	0005303a 	rdctl	r2,status
  81dc78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dc7c:	e0fff717 	ldw	r3,-36(fp)
  81dc80:	00bfff84 	movi	r2,-2
  81dc84:	1884703a 	and	r2,r3,r2
  81dc88:	1001703a 	wrctl	status,r2
  
  return context;
  81dc8c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81dc90:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81dc94:	00802174 	movhi	r2,133
  81dc98:	1082fa04 	addi	r2,r2,3048
  81dc9c:	10800017 	ldw	r2,0(r2)
  81dca0:	10800c43 	ldbu	r2,49(r2)
  81dca4:	10803fcc 	andi	r2,r2,255
  81dca8:	e0bfff15 	stw	r2,-4(fp)
  81dcac:	e0ffff17 	ldw	r3,-4(fp)
  81dcb0:	1805003a 	cmpeq	r2,r3,zero
  81dcb4:	1000041e 	bne	r2,zero,81dcc8 <OSSemPend+0x1dc>
  81dcb8:	e0ffff17 	ldw	r3,-4(fp)
  81dcbc:	188000a0 	cmpeqi	r2,r3,2
  81dcc0:	1000041e 	bne	r2,zero,81dcd4 <OSSemPend+0x1e8>
  81dcc4:	00000706 	br	81dce4 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  81dcc8:	e0bffe17 	ldw	r2,-8(fp)
  81dccc:	10000005 	stb	zero,0(r2)
             break;
  81dcd0:	00000c06 	br	81dd04 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81dcd4:	e0fffe17 	ldw	r3,-8(fp)
  81dcd8:	00800384 	movi	r2,14
  81dcdc:	18800005 	stb	r2,0(r3)
             break;
  81dce0:	00000806 	br	81dd04 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  81dce4:	00802174 	movhi	r2,133
  81dce8:	1082fa04 	addi	r2,r2,3048
  81dcec:	11000017 	ldw	r4,0(r2)
  81dcf0:	e17ffc17 	ldw	r5,-16(fp)
  81dcf4:	08186b80 	call	8186b8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81dcf8:	e0fffe17 	ldw	r3,-8(fp)
  81dcfc:	00800284 	movi	r2,10
  81dd00:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81dd04:	00802174 	movhi	r2,133
  81dd08:	1082fa04 	addi	r2,r2,3048
  81dd0c:	10800017 	ldw	r2,0(r2)
  81dd10:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81dd14:	00802174 	movhi	r2,133
  81dd18:	1082fa04 	addi	r2,r2,3048
  81dd1c:	10800017 	ldw	r2,0(r2)
  81dd20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81dd24:	00802174 	movhi	r2,133
  81dd28:	1082fa04 	addi	r2,r2,3048
  81dd2c:	10800017 	ldw	r2,0(r2)
  81dd30:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81dd34:	00802174 	movhi	r2,133
  81dd38:	1082fa04 	addi	r2,r2,3048
  81dd3c:	10800017 	ldw	r2,0(r2)
  81dd40:	10000815 	stw	zero,32(r2)
  81dd44:	e0bffb17 	ldw	r2,-20(fp)
  81dd48:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81dd4c:	e0bff617 	ldw	r2,-40(fp)
  81dd50:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  81dd54:	e037883a 	mov	sp,fp
  81dd58:	dfc00117 	ldw	ra,4(sp)
  81dd5c:	df000017 	ldw	fp,0(sp)
  81dd60:	dec00204 	addi	sp,sp,8
  81dd64:	f800283a 	ret

0081dd68 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81dd68:	defff504 	addi	sp,sp,-44
  81dd6c:	dfc00a15 	stw	ra,40(sp)
  81dd70:	df000915 	stw	fp,36(sp)
  81dd74:	df000904 	addi	fp,sp,36
  81dd78:	e13ffc15 	stw	r4,-16(fp)
  81dd7c:	e1bffe15 	stw	r6,-8(fp)
  81dd80:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81dd84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81dd88:	e0bffe17 	ldw	r2,-8(fp)
  81dd8c:	1004c03a 	cmpne	r2,r2,zero
  81dd90:	1000021e 	bne	r2,zero,81dd9c <OSSemPendAbort+0x34>
        return (0);
  81dd94:	e03fff15 	stw	zero,-4(fp)
  81dd98:	00004c06 	br	81decc <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81dd9c:	e0bffc17 	ldw	r2,-16(fp)
  81dda0:	1004c03a 	cmpne	r2,r2,zero
  81dda4:	1000051e 	bne	r2,zero,81ddbc <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81dda8:	e0fffe17 	ldw	r3,-8(fp)
  81ddac:	00800104 	movi	r2,4
  81ddb0:	18800005 	stb	r2,0(r3)
        return (0);
  81ddb4:	e03fff15 	stw	zero,-4(fp)
  81ddb8:	00004406 	br	81decc <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81ddbc:	e0bffc17 	ldw	r2,-16(fp)
  81ddc0:	10800003 	ldbu	r2,0(r2)
  81ddc4:	10803fcc 	andi	r2,r2,255
  81ddc8:	108000e0 	cmpeqi	r2,r2,3
  81ddcc:	1000051e 	bne	r2,zero,81dde4 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81ddd0:	e0fffe17 	ldw	r3,-8(fp)
  81ddd4:	00800044 	movi	r2,1
  81ddd8:	18800005 	stb	r2,0(r3)
        return (0);
  81dddc:	e03fff15 	stw	zero,-4(fp)
  81dde0:	00003a06 	br	81decc <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dde4:	0005303a 	rdctl	r2,status
  81dde8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ddec:	e0fff917 	ldw	r3,-28(fp)
  81ddf0:	00bfff84 	movi	r2,-2
  81ddf4:	1884703a 	and	r2,r3,r2
  81ddf8:	1001703a 	wrctl	status,r2
  
  return context;
  81ddfc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81de00:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  81de04:	e0bffc17 	ldw	r2,-16(fp)
  81de08:	10800283 	ldbu	r2,10(r2)
  81de0c:	10803fcc 	andi	r2,r2,255
  81de10:	1005003a 	cmpeq	r2,r2,zero
  81de14:	1000261e 	bne	r2,zero,81deb0 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  81de18:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81de1c:	e0bffd03 	ldbu	r2,-12(fp)
  81de20:	10800060 	cmpeqi	r2,r2,1
  81de24:	1000091e 	bne	r2,zero,81de4c <OSSemPendAbort+0xe4>
  81de28:	00000e06 	br	81de64 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  81de2c:	e13ffc17 	ldw	r4,-16(fp)
  81de30:	000b883a 	mov	r5,zero
  81de34:	01800044 	movi	r6,1
  81de38:	01c00084 	movi	r7,2
  81de3c:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                     nbr_tasks++;
  81de40:	e0bffb03 	ldbu	r2,-20(fp)
  81de44:	10800044 	addi	r2,r2,1
  81de48:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  81de4c:	e0bffc17 	ldw	r2,-16(fp)
  81de50:	10800283 	ldbu	r2,10(r2)
  81de54:	10803fcc 	andi	r2,r2,255
  81de58:	1004c03a 	cmpne	r2,r2,zero
  81de5c:	103ff31e 	bne	r2,zero,81de2c <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81de60:	00000806 	br	81de84 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  81de64:	e13ffc17 	ldw	r4,-16(fp)
  81de68:	000b883a 	mov	r5,zero
  81de6c:	01800044 	movi	r6,1
  81de70:	01c00084 	movi	r7,2
  81de74:	08182c00 	call	8182c0 <OS_EventTaskRdy>
                 nbr_tasks++;
  81de78:	e0bffb03 	ldbu	r2,-20(fp)
  81de7c:	10800044 	addi	r2,r2,1
  81de80:	e0bffb05 	stb	r2,-20(fp)
  81de84:	e0bffa17 	ldw	r2,-24(fp)
  81de88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81de8c:	e0bff817 	ldw	r2,-32(fp)
  81de90:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  81de94:	0818d000 	call	818d00 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81de98:	e0fffe17 	ldw	r3,-8(fp)
  81de9c:	00800384 	movi	r2,14
  81dea0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81dea4:	e0bffb03 	ldbu	r2,-20(fp)
  81dea8:	e0bfff15 	stw	r2,-4(fp)
  81deac:	00000706 	br	81decc <OSSemPendAbort+0x164>
  81deb0:	e0bffa17 	ldw	r2,-24(fp)
  81deb4:	e0bff715 	stw	r2,-36(fp)
  81deb8:	e0bff717 	ldw	r2,-36(fp)
  81debc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81dec0:	e0bffe17 	ldw	r2,-8(fp)
  81dec4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  81dec8:	e03fff15 	stw	zero,-4(fp)
  81decc:	e0bfff17 	ldw	r2,-4(fp)
}
  81ded0:	e037883a 	mov	sp,fp
  81ded4:	dfc00117 	ldw	ra,4(sp)
  81ded8:	df000017 	ldw	fp,0(sp)
  81dedc:	dec00204 	addi	sp,sp,8
  81dee0:	f800283a 	ret

0081dee4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  81dee4:	defff704 	addi	sp,sp,-36
  81dee8:	dfc00815 	stw	ra,32(sp)
  81deec:	df000715 	stw	fp,28(sp)
  81def0:	df000704 	addi	fp,sp,28
  81def4:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81def8:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81defc:	e0bffe17 	ldw	r2,-8(fp)
  81df00:	1004c03a 	cmpne	r2,r2,zero
  81df04:	1000031e 	bne	r2,zero,81df14 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  81df08:	00800104 	movi	r2,4
  81df0c:	e0bfff15 	stw	r2,-4(fp)
  81df10:	00003806 	br	81dff4 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81df14:	e0bffe17 	ldw	r2,-8(fp)
  81df18:	10800003 	ldbu	r2,0(r2)
  81df1c:	10803fcc 	andi	r2,r2,255
  81df20:	108000e0 	cmpeqi	r2,r2,3
  81df24:	1000031e 	bne	r2,zero,81df34 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  81df28:	00800044 	movi	r2,1
  81df2c:	e0bfff15 	stw	r2,-4(fp)
  81df30:	00003006 	br	81dff4 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81df34:	0005303a 	rdctl	r2,status
  81df38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81df3c:	e0fffc17 	ldw	r3,-16(fp)
  81df40:	00bfff84 	movi	r2,-2
  81df44:	1884703a 	and	r2,r3,r2
  81df48:	1001703a 	wrctl	status,r2
  
  return context;
  81df4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81df50:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  81df54:	e0bffe17 	ldw	r2,-8(fp)
  81df58:	10800283 	ldbu	r2,10(r2)
  81df5c:	10803fcc 	andi	r2,r2,255
  81df60:	1005003a 	cmpeq	r2,r2,zero
  81df64:	10000c1e 	bne	r2,zero,81df98 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81df68:	e13ffe17 	ldw	r4,-8(fp)
  81df6c:	000b883a 	mov	r5,zero
  81df70:	01800044 	movi	r6,1
  81df74:	000f883a 	mov	r7,zero
  81df78:	08182c00 	call	8182c0 <OS_EventTaskRdy>
  81df7c:	e0bffd17 	ldw	r2,-12(fp)
  81df80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81df84:	e0bffb17 	ldw	r2,-20(fp)
  81df88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  81df8c:	0818d000 	call	818d00 <OS_Sched>
        return (OS_ERR_NONE);
  81df90:	e03fff15 	stw	zero,-4(fp)
  81df94:	00001706 	br	81dff4 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  81df98:	e0bffe17 	ldw	r2,-8(fp)
  81df9c:	1080020b 	ldhu	r2,8(r2)
  81dfa0:	10ffffcc 	andi	r3,r2,65535
  81dfa4:	00bfffd4 	movui	r2,65535
  81dfa8:	18800c26 	beq	r3,r2,81dfdc <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  81dfac:	e0bffe17 	ldw	r2,-8(fp)
  81dfb0:	1080020b 	ldhu	r2,8(r2)
  81dfb4:	10800044 	addi	r2,r2,1
  81dfb8:	1007883a 	mov	r3,r2
  81dfbc:	e0bffe17 	ldw	r2,-8(fp)
  81dfc0:	10c0020d 	sth	r3,8(r2)
  81dfc4:	e0bffd17 	ldw	r2,-12(fp)
  81dfc8:	e0bffa15 	stw	r2,-24(fp)
  81dfcc:	e0bffa17 	ldw	r2,-24(fp)
  81dfd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  81dfd4:	e03fff15 	stw	zero,-4(fp)
  81dfd8:	00000606 	br	81dff4 <OSSemPost+0x110>
  81dfdc:	e0bffd17 	ldw	r2,-12(fp)
  81dfe0:	e0bff915 	stw	r2,-28(fp)
  81dfe4:	e0bff917 	ldw	r2,-28(fp)
  81dfe8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  81dfec:	00800c84 	movi	r2,50
  81dff0:	e0bfff15 	stw	r2,-4(fp)
  81dff4:	e0bfff17 	ldw	r2,-4(fp)
}
  81dff8:	e037883a 	mov	sp,fp
  81dffc:	dfc00117 	ldw	ra,4(sp)
  81e000:	df000017 	ldw	fp,0(sp)
  81e004:	dec00204 	addi	sp,sp,8
  81e008:	f800283a 	ret

0081e00c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  81e00c:	defff604 	addi	sp,sp,-40
  81e010:	df000915 	stw	fp,36(sp)
  81e014:	df000904 	addi	fp,sp,36
  81e018:	e13ffd15 	stw	r4,-12(fp)
  81e01c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81e020:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81e024:	e0bffd17 	ldw	r2,-12(fp)
  81e028:	1004c03a 	cmpne	r2,r2,zero
  81e02c:	1000031e 	bne	r2,zero,81e03c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81e030:	00800104 	movi	r2,4
  81e034:	e0bfff15 	stw	r2,-4(fp)
  81e038:	00003b06 	br	81e128 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  81e03c:	e0bffe17 	ldw	r2,-8(fp)
  81e040:	1004c03a 	cmpne	r2,r2,zero
  81e044:	1000031e 	bne	r2,zero,81e054 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81e048:	00800244 	movi	r2,9
  81e04c:	e0bfff15 	stw	r2,-4(fp)
  81e050:	00003506 	br	81e128 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81e054:	e0bffd17 	ldw	r2,-12(fp)
  81e058:	10800003 	ldbu	r2,0(r2)
  81e05c:	10803fcc 	andi	r2,r2,255
  81e060:	108000e0 	cmpeqi	r2,r2,3
  81e064:	1000031e 	bne	r2,zero,81e074 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81e068:	00800044 	movi	r2,1
  81e06c:	e0bfff15 	stw	r2,-4(fp)
  81e070:	00002d06 	br	81e128 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e074:	0005303a 	rdctl	r2,status
  81e078:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e07c:	e0fff817 	ldw	r3,-32(fp)
  81e080:	00bfff84 	movi	r2,-2
  81e084:	1884703a 	and	r2,r3,r2
  81e088:	1001703a 	wrctl	status,r2
  
  return context;
  81e08c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81e090:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  81e094:	e0bffd17 	ldw	r2,-12(fp)
  81e098:	10c00283 	ldbu	r3,10(r2)
  81e09c:	e0bffe17 	ldw	r2,-8(fp)
  81e0a0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  81e0a4:	e0bffd17 	ldw	r2,-12(fp)
  81e0a8:	108002c4 	addi	r2,r2,11
  81e0ac:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  81e0b0:	e0bffe17 	ldw	r2,-8(fp)
  81e0b4:	10800084 	addi	r2,r2,2
  81e0b8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81e0bc:	e03ffa05 	stb	zero,-24(fp)
  81e0c0:	00000d06 	br	81e0f8 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  81e0c4:	e0bffc17 	ldw	r2,-16(fp)
  81e0c8:	10c00003 	ldbu	r3,0(r2)
  81e0cc:	e0bffb17 	ldw	r2,-20(fp)
  81e0d0:	10c00005 	stb	r3,0(r2)
  81e0d4:	e0bffb17 	ldw	r2,-20(fp)
  81e0d8:	10800044 	addi	r2,r2,1
  81e0dc:	e0bffb15 	stw	r2,-20(fp)
  81e0e0:	e0bffc17 	ldw	r2,-16(fp)
  81e0e4:	10800044 	addi	r2,r2,1
  81e0e8:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81e0ec:	e0bffa03 	ldbu	r2,-24(fp)
  81e0f0:	10800044 	addi	r2,r2,1
  81e0f4:	e0bffa05 	stb	r2,-24(fp)
  81e0f8:	e0bffa03 	ldbu	r2,-24(fp)
  81e0fc:	108000f0 	cmpltui	r2,r2,3
  81e100:	103ff01e 	bne	r2,zero,81e0c4 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  81e104:	e0bffd17 	ldw	r2,-12(fp)
  81e108:	10c0020b 	ldhu	r3,8(r2)
  81e10c:	e0bffe17 	ldw	r2,-8(fp)
  81e110:	10c0000d 	sth	r3,0(r2)
  81e114:	e0bff917 	ldw	r2,-28(fp)
  81e118:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e11c:	e0bff717 	ldw	r2,-36(fp)
  81e120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81e124:	e03fff15 	stw	zero,-4(fp)
  81e128:	e0bfff17 	ldw	r2,-4(fp)
}
  81e12c:	e037883a 	mov	sp,fp
  81e130:	df000017 	ldw	fp,0(sp)
  81e134:	dec00104 	addi	sp,sp,4
  81e138:	f800283a 	ret

0081e13c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  81e13c:	defff904 	addi	sp,sp,-28
  81e140:	df000615 	stw	fp,24(sp)
  81e144:	df000604 	addi	fp,sp,24
  81e148:	e13ffd15 	stw	r4,-12(fp)
  81e14c:	e1bfff15 	stw	r6,-4(fp)
  81e150:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81e154:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81e158:	e0bfff17 	ldw	r2,-4(fp)
  81e15c:	1005003a 	cmpeq	r2,r2,zero
  81e160:	1000331e 	bne	r2,zero,81e230 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81e164:	e0bffd17 	ldw	r2,-12(fp)
  81e168:	1004c03a 	cmpne	r2,r2,zero
  81e16c:	1000041e 	bne	r2,zero,81e180 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  81e170:	e0ffff17 	ldw	r3,-4(fp)
  81e174:	00800104 	movi	r2,4
  81e178:	18800005 	stb	r2,0(r3)
        return;
  81e17c:	00002c06 	br	81e230 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81e180:	e0bffd17 	ldw	r2,-12(fp)
  81e184:	10800003 	ldbu	r2,0(r2)
  81e188:	10803fcc 	andi	r2,r2,255
  81e18c:	108000e0 	cmpeqi	r2,r2,3
  81e190:	1000041e 	bne	r2,zero,81e1a4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  81e194:	e0ffff17 	ldw	r3,-4(fp)
  81e198:	00800044 	movi	r2,1
  81e19c:	18800005 	stb	r2,0(r3)
        return;
  81e1a0:	00002306 	br	81e230 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e1a4:	0005303a 	rdctl	r2,status
  81e1a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e1ac:	e0fffb17 	ldw	r3,-20(fp)
  81e1b0:	00bfff84 	movi	r2,-2
  81e1b4:	1884703a 	and	r2,r3,r2
  81e1b8:	1001703a 	wrctl	status,r2
  
  return context;
  81e1bc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81e1c0:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  81e1c4:	e0bfff17 	ldw	r2,-4(fp)
  81e1c8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  81e1cc:	e0bffd17 	ldw	r2,-12(fp)
  81e1d0:	1080020b 	ldhu	r2,8(r2)
  81e1d4:	10bfffcc 	andi	r2,r2,65535
  81e1d8:	1005003a 	cmpeq	r2,r2,zero
  81e1dc:	1000041e 	bne	r2,zero,81e1f0 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  81e1e0:	e0fffd17 	ldw	r3,-12(fp)
  81e1e4:	e0bffe0b 	ldhu	r2,-8(fp)
  81e1e8:	1880020d 	sth	r2,8(r3)
  81e1ec:	00000c06 	br	81e220 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  81e1f0:	e0bffd17 	ldw	r2,-12(fp)
  81e1f4:	10800283 	ldbu	r2,10(r2)
  81e1f8:	10803fcc 	andi	r2,r2,255
  81e1fc:	1004c03a 	cmpne	r2,r2,zero
  81e200:	1000041e 	bne	r2,zero,81e214 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  81e204:	e0fffd17 	ldw	r3,-12(fp)
  81e208:	e0bffe0b 	ldhu	r2,-8(fp)
  81e20c:	1880020d 	sth	r2,8(r3)
  81e210:	00000306 	br	81e220 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  81e214:	e0ffff17 	ldw	r3,-4(fp)
  81e218:	00801244 	movi	r2,73
  81e21c:	18800005 	stb	r2,0(r3)
  81e220:	e0bffc17 	ldw	r2,-16(fp)
  81e224:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e228:	e0bffa17 	ldw	r2,-24(fp)
  81e22c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  81e230:	e037883a 	mov	sp,fp
  81e234:	df000017 	ldw	fp,0(sp)
  81e238:	dec00104 	addi	sp,sp,4
  81e23c:	f800283a 	ret

0081e240 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  81e240:	defff004 	addi	sp,sp,-64
  81e244:	dfc00f15 	stw	ra,60(sp)
  81e248:	df000e15 	stw	fp,56(sp)
  81e24c:	df000e04 	addi	fp,sp,56
  81e250:	e13ffd05 	stb	r4,-12(fp)
  81e254:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  81e258:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  81e25c:	e0bffd03 	ldbu	r2,-12(fp)
  81e260:	10800530 	cmpltui	r2,r2,20
  81e264:	1000061e 	bne	r2,zero,81e280 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  81e268:	e0bffd03 	ldbu	r2,-12(fp)
  81e26c:	10803fe0 	cmpeqi	r2,r2,255
  81e270:	1000031e 	bne	r2,zero,81e280 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  81e274:	00800a84 	movi	r2,42
  81e278:	e0bfff15 	stw	r2,-4(fp)
  81e27c:	00014706 	br	81e79c <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  81e280:	e0bffe03 	ldbu	r2,-8(fp)
  81e284:	10800530 	cmpltui	r2,r2,20
  81e288:	1000031e 	bne	r2,zero,81e298 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  81e28c:	00800a84 	movi	r2,42
  81e290:	e0bfff15 	stw	r2,-4(fp)
  81e294:	00014106 	br	81e79c <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e298:	0005303a 	rdctl	r2,status
  81e29c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e2a0:	e0fff617 	ldw	r3,-40(fp)
  81e2a4:	00bfff84 	movi	r2,-2
  81e2a8:	1884703a 	and	r2,r3,r2
  81e2ac:	1001703a 	wrctl	status,r2
  
  return context;
  81e2b0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81e2b4:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  81e2b8:	e0bffe03 	ldbu	r2,-8(fp)
  81e2bc:	00c03934 	movhi	r3,228
  81e2c0:	18e6c204 	addi	r3,r3,-25848
  81e2c4:	1085883a 	add	r2,r2,r2
  81e2c8:	1085883a 	add	r2,r2,r2
  81e2cc:	10c5883a 	add	r2,r2,r3
  81e2d0:	10800017 	ldw	r2,0(r2)
  81e2d4:	1005003a 	cmpeq	r2,r2,zero
  81e2d8:	1000071e 	bne	r2,zero,81e2f8 <OSTaskChangePrio+0xb8>
  81e2dc:	e0bff717 	ldw	r2,-36(fp)
  81e2e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e2e4:	e0bff517 	ldw	r2,-44(fp)
  81e2e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  81e2ec:	00800a04 	movi	r2,40
  81e2f0:	e0bfff15 	stw	r2,-4(fp)
  81e2f4:	00012906 	br	81e79c <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  81e2f8:	e0bffd03 	ldbu	r2,-12(fp)
  81e2fc:	10803fd8 	cmpnei	r2,r2,255
  81e300:	1000051e 	bne	r2,zero,81e318 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  81e304:	00802174 	movhi	r2,133
  81e308:	1082fa04 	addi	r2,r2,3048
  81e30c:	10800017 	ldw	r2,0(r2)
  81e310:	10800c83 	ldbu	r2,50(r2)
  81e314:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  81e318:	e0bffd03 	ldbu	r2,-12(fp)
  81e31c:	00c03934 	movhi	r3,228
  81e320:	18e6c204 	addi	r3,r3,-25848
  81e324:	1085883a 	add	r2,r2,r2
  81e328:	1085883a 	add	r2,r2,r2
  81e32c:	10c5883a 	add	r2,r2,r3
  81e330:	10800017 	ldw	r2,0(r2)
  81e334:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  81e338:	e0bffa17 	ldw	r2,-24(fp)
  81e33c:	1004c03a 	cmpne	r2,r2,zero
  81e340:	1000071e 	bne	r2,zero,81e360 <OSTaskChangePrio+0x120>
  81e344:	e0bff717 	ldw	r2,-36(fp)
  81e348:	e0bff415 	stw	r2,-48(fp)
  81e34c:	e0bff417 	ldw	r2,-48(fp)
  81e350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  81e354:	00800a44 	movi	r2,41
  81e358:	e0bfff15 	stw	r2,-4(fp)
  81e35c:	00010f06 	br	81e79c <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  81e360:	e0bffa17 	ldw	r2,-24(fp)
  81e364:	10800058 	cmpnei	r2,r2,1
  81e368:	1000071e 	bne	r2,zero,81e388 <OSTaskChangePrio+0x148>
  81e36c:	e0bff717 	ldw	r2,-36(fp)
  81e370:	e0bff315 	stw	r2,-52(fp)
  81e374:	e0bff317 	ldw	r2,-52(fp)
  81e378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  81e37c:	008010c4 	movi	r2,67
  81e380:	e0bfff15 	stw	r2,-4(fp)
  81e384:	00010506 	br	81e79c <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  81e388:	e0bffe03 	ldbu	r2,-8(fp)
  81e38c:	1004d0fa 	srli	r2,r2,3
  81e390:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  81e394:	e0bffe03 	ldbu	r2,-8(fp)
  81e398:	108001cc 	andi	r2,r2,7
  81e39c:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  81e3a0:	e0fff983 	ldbu	r3,-26(fp)
  81e3a4:	00800044 	movi	r2,1
  81e3a8:	10c4983a 	sll	r2,r2,r3
  81e3ac:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  81e3b0:	e0fff943 	ldbu	r3,-27(fp)
  81e3b4:	00800044 	movi	r2,1
  81e3b8:	10c4983a 	sll	r2,r2,r3
  81e3bc:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  81e3c0:	e0bffd03 	ldbu	r2,-12(fp)
  81e3c4:	00c03934 	movhi	r3,228
  81e3c8:	18e6c204 	addi	r3,r3,-25848
  81e3cc:	1085883a 	add	r2,r2,r2
  81e3d0:	1085883a 	add	r2,r2,r2
  81e3d4:	10c5883a 	add	r2,r2,r3
  81e3d8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  81e3dc:	e0bffe03 	ldbu	r2,-8(fp)
  81e3e0:	00c03934 	movhi	r3,228
  81e3e4:	18e6c204 	addi	r3,r3,-25848
  81e3e8:	1085883a 	add	r2,r2,r2
  81e3ec:	1085883a 	add	r2,r2,r2
  81e3f0:	10c7883a 	add	r3,r2,r3
  81e3f4:	e0bffa17 	ldw	r2,-24(fp)
  81e3f8:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  81e3fc:	e0bffa17 	ldw	r2,-24(fp)
  81e400:	10800d03 	ldbu	r2,52(r2)
  81e404:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  81e408:	e0bffa17 	ldw	r2,-24(fp)
  81e40c:	10800d83 	ldbu	r2,54(r2)
  81e410:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  81e414:	e0bffa17 	ldw	r2,-24(fp)
  81e418:	10800d43 	ldbu	r2,53(r2)
  81e41c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  81e420:	e0fff903 	ldbu	r3,-28(fp)
  81e424:	00802174 	movhi	r2,133
  81e428:	1082f744 	addi	r2,r2,3037
  81e42c:	10c5883a 	add	r2,r2,r3
  81e430:	10c00003 	ldbu	r3,0(r2)
  81e434:	e0bff803 	ldbu	r2,-32(fp)
  81e438:	1884703a 	and	r2,r3,r2
  81e43c:	10803fcc 	andi	r2,r2,255
  81e440:	1005003a 	cmpeq	r2,r2,zero
  81e444:	1000381e 	bne	r2,zero,81e528 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  81e448:	e13ff903 	ldbu	r4,-28(fp)
  81e44c:	e0fff903 	ldbu	r3,-28(fp)
  81e450:	00802174 	movhi	r2,133
  81e454:	1082f744 	addi	r2,r2,3037
  81e458:	10c5883a 	add	r2,r2,r3
  81e45c:	10800003 	ldbu	r2,0(r2)
  81e460:	1007883a 	mov	r3,r2
  81e464:	e0bff803 	ldbu	r2,-32(fp)
  81e468:	0084303a 	nor	r2,zero,r2
  81e46c:	1884703a 	and	r2,r3,r2
  81e470:	1007883a 	mov	r3,r2
  81e474:	00802174 	movhi	r2,133
  81e478:	1082f744 	addi	r2,r2,3037
  81e47c:	1105883a 	add	r2,r2,r4
  81e480:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  81e484:	e0fff903 	ldbu	r3,-28(fp)
  81e488:	00802174 	movhi	r2,133
  81e48c:	1082f744 	addi	r2,r2,3037
  81e490:	10c5883a 	add	r2,r2,r3
  81e494:	10800003 	ldbu	r2,0(r2)
  81e498:	10803fcc 	andi	r2,r2,255
  81e49c:	1004c03a 	cmpne	r2,r2,zero
  81e4a0:	10000b1e 	bne	r2,zero,81e4d0 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  81e4a4:	e0bff843 	ldbu	r2,-31(fp)
  81e4a8:	0084303a 	nor	r2,zero,r2
  81e4ac:	1007883a 	mov	r3,r2
  81e4b0:	00802174 	movhi	r2,133
  81e4b4:	1082f704 	addi	r2,r2,3036
  81e4b8:	10800003 	ldbu	r2,0(r2)
  81e4bc:	1884703a 	and	r2,r3,r2
  81e4c0:	1007883a 	mov	r3,r2
  81e4c4:	00802174 	movhi	r2,133
  81e4c8:	1082f704 	addi	r2,r2,3036
  81e4cc:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  81e4d0:	00802174 	movhi	r2,133
  81e4d4:	1082f704 	addi	r2,r2,3036
  81e4d8:	10c00003 	ldbu	r3,0(r2)
  81e4dc:	e0bff8c3 	ldbu	r2,-29(fp)
  81e4e0:	1884b03a 	or	r2,r3,r2
  81e4e4:	1007883a 	mov	r3,r2
  81e4e8:	00802174 	movhi	r2,133
  81e4ec:	1082f704 	addi	r2,r2,3036
  81e4f0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  81e4f4:	e13ff983 	ldbu	r4,-26(fp)
  81e4f8:	e0fff983 	ldbu	r3,-26(fp)
  81e4fc:	00802174 	movhi	r2,133
  81e500:	1082f744 	addi	r2,r2,3037
  81e504:	10c5883a 	add	r2,r2,r3
  81e508:	10c00003 	ldbu	r3,0(r2)
  81e50c:	e0bff883 	ldbu	r2,-30(fp)
  81e510:	1884b03a 	or	r2,r3,r2
  81e514:	1007883a 	mov	r3,r2
  81e518:	00802174 	movhi	r2,133
  81e51c:	1082f744 	addi	r2,r2,3037
  81e520:	1105883a 	add	r2,r2,r4
  81e524:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  81e528:	e0bffa17 	ldw	r2,-24(fp)
  81e52c:	10800717 	ldw	r2,28(r2)
  81e530:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  81e534:	e0bffc17 	ldw	r2,-16(fp)
  81e538:	1005003a 	cmpeq	r2,r2,zero
  81e53c:	1000341e 	bne	r2,zero,81e610 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  81e540:	e13ff903 	ldbu	r4,-28(fp)
  81e544:	e0fff903 	ldbu	r3,-28(fp)
  81e548:	e0bffc17 	ldw	r2,-16(fp)
  81e54c:	1885883a 	add	r2,r3,r2
  81e550:	10800204 	addi	r2,r2,8
  81e554:	108000c3 	ldbu	r2,3(r2)
  81e558:	1007883a 	mov	r3,r2
  81e55c:	e0bff803 	ldbu	r2,-32(fp)
  81e560:	0084303a 	nor	r2,zero,r2
  81e564:	1884703a 	and	r2,r3,r2
  81e568:	1007883a 	mov	r3,r2
  81e56c:	e0bffc17 	ldw	r2,-16(fp)
  81e570:	2085883a 	add	r2,r4,r2
  81e574:	10800204 	addi	r2,r2,8
  81e578:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  81e57c:	e0fff903 	ldbu	r3,-28(fp)
  81e580:	e0bffc17 	ldw	r2,-16(fp)
  81e584:	1885883a 	add	r2,r3,r2
  81e588:	10800204 	addi	r2,r2,8
  81e58c:	108000c3 	ldbu	r2,3(r2)
  81e590:	10803fcc 	andi	r2,r2,255
  81e594:	1004c03a 	cmpne	r2,r2,zero
  81e598:	1000091e 	bne	r2,zero,81e5c0 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  81e59c:	e0bffc17 	ldw	r2,-16(fp)
  81e5a0:	10800283 	ldbu	r2,10(r2)
  81e5a4:	1007883a 	mov	r3,r2
  81e5a8:	e0bff843 	ldbu	r2,-31(fp)
  81e5ac:	0084303a 	nor	r2,zero,r2
  81e5b0:	1884703a 	and	r2,r3,r2
  81e5b4:	1007883a 	mov	r3,r2
  81e5b8:	e0bffc17 	ldw	r2,-16(fp)
  81e5bc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  81e5c0:	e0bffc17 	ldw	r2,-16(fp)
  81e5c4:	10c00283 	ldbu	r3,10(r2)
  81e5c8:	e0bff8c3 	ldbu	r2,-29(fp)
  81e5cc:	1884b03a 	or	r2,r3,r2
  81e5d0:	1007883a 	mov	r3,r2
  81e5d4:	e0bffc17 	ldw	r2,-16(fp)
  81e5d8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  81e5dc:	e13ff983 	ldbu	r4,-26(fp)
  81e5e0:	e0fff983 	ldbu	r3,-26(fp)
  81e5e4:	e0bffc17 	ldw	r2,-16(fp)
  81e5e8:	1885883a 	add	r2,r3,r2
  81e5ec:	10800204 	addi	r2,r2,8
  81e5f0:	10c000c3 	ldbu	r3,3(r2)
  81e5f4:	e0bff883 	ldbu	r2,-30(fp)
  81e5f8:	1884b03a 	or	r2,r3,r2
  81e5fc:	1007883a 	mov	r3,r2
  81e600:	e0bffc17 	ldw	r2,-16(fp)
  81e604:	2085883a 	add	r2,r4,r2
  81e608:	10800204 	addi	r2,r2,8
  81e60c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  81e610:	e0bffa17 	ldw	r2,-24(fp)
  81e614:	10800817 	ldw	r2,32(r2)
  81e618:	1005003a 	cmpeq	r2,r2,zero
  81e61c:	1000441e 	bne	r2,zero,81e730 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  81e620:	e0bffa17 	ldw	r2,-24(fp)
  81e624:	10800817 	ldw	r2,32(r2)
  81e628:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  81e62c:	e0bffb17 	ldw	r2,-20(fp)
  81e630:	10800017 	ldw	r2,0(r2)
  81e634:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  81e638:	00003a06 	br	81e724 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  81e63c:	e13ff903 	ldbu	r4,-28(fp)
  81e640:	e0fff903 	ldbu	r3,-28(fp)
  81e644:	e0bffc17 	ldw	r2,-16(fp)
  81e648:	1885883a 	add	r2,r3,r2
  81e64c:	10800204 	addi	r2,r2,8
  81e650:	108000c3 	ldbu	r2,3(r2)
  81e654:	1007883a 	mov	r3,r2
  81e658:	e0bff803 	ldbu	r2,-32(fp)
  81e65c:	0084303a 	nor	r2,zero,r2
  81e660:	1884703a 	and	r2,r3,r2
  81e664:	1007883a 	mov	r3,r2
  81e668:	e0bffc17 	ldw	r2,-16(fp)
  81e66c:	2085883a 	add	r2,r4,r2
  81e670:	10800204 	addi	r2,r2,8
  81e674:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  81e678:	e0fff903 	ldbu	r3,-28(fp)
  81e67c:	e0bffc17 	ldw	r2,-16(fp)
  81e680:	1885883a 	add	r2,r3,r2
  81e684:	10800204 	addi	r2,r2,8
  81e688:	108000c3 	ldbu	r2,3(r2)
  81e68c:	10803fcc 	andi	r2,r2,255
  81e690:	1004c03a 	cmpne	r2,r2,zero
  81e694:	1000091e 	bne	r2,zero,81e6bc <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  81e698:	e0bffc17 	ldw	r2,-16(fp)
  81e69c:	10800283 	ldbu	r2,10(r2)
  81e6a0:	1007883a 	mov	r3,r2
  81e6a4:	e0bff843 	ldbu	r2,-31(fp)
  81e6a8:	0084303a 	nor	r2,zero,r2
  81e6ac:	1884703a 	and	r2,r3,r2
  81e6b0:	1007883a 	mov	r3,r2
  81e6b4:	e0bffc17 	ldw	r2,-16(fp)
  81e6b8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  81e6bc:	e0bffc17 	ldw	r2,-16(fp)
  81e6c0:	10c00283 	ldbu	r3,10(r2)
  81e6c4:	e0bff8c3 	ldbu	r2,-29(fp)
  81e6c8:	1884b03a 	or	r2,r3,r2
  81e6cc:	1007883a 	mov	r3,r2
  81e6d0:	e0bffc17 	ldw	r2,-16(fp)
  81e6d4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  81e6d8:	e13ff983 	ldbu	r4,-26(fp)
  81e6dc:	e0fff983 	ldbu	r3,-26(fp)
  81e6e0:	e0bffc17 	ldw	r2,-16(fp)
  81e6e4:	1885883a 	add	r2,r3,r2
  81e6e8:	10800204 	addi	r2,r2,8
  81e6ec:	10c000c3 	ldbu	r3,3(r2)
  81e6f0:	e0bff883 	ldbu	r2,-30(fp)
  81e6f4:	1884b03a 	or	r2,r3,r2
  81e6f8:	1007883a 	mov	r3,r2
  81e6fc:	e0bffc17 	ldw	r2,-16(fp)
  81e700:	2085883a 	add	r2,r4,r2
  81e704:	10800204 	addi	r2,r2,8
  81e708:	10c000c5 	stb	r3,3(r2)
            pevents++;
  81e70c:	e0bffb17 	ldw	r2,-20(fp)
  81e710:	10800104 	addi	r2,r2,4
  81e714:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  81e718:	e0bffb17 	ldw	r2,-20(fp)
  81e71c:	10800017 	ldw	r2,0(r2)
  81e720:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  81e724:	e0bffc17 	ldw	r2,-16(fp)
  81e728:	1004c03a 	cmpne	r2,r2,zero
  81e72c:	103fc31e 	bne	r2,zero,81e63c <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81e730:	e0fffa17 	ldw	r3,-24(fp)
  81e734:	e0bffe03 	ldbu	r2,-8(fp)
  81e738:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  81e73c:	e0fffa17 	ldw	r3,-24(fp)
  81e740:	e0bff983 	ldbu	r2,-26(fp)
  81e744:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  81e748:	e0fffa17 	ldw	r3,-24(fp)
  81e74c:	e0bff943 	ldbu	r2,-27(fp)
  81e750:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  81e754:	e0fffa17 	ldw	r3,-24(fp)
  81e758:	e0bff8c3 	ldbu	r2,-29(fp)
  81e75c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  81e760:	e0fffa17 	ldw	r3,-24(fp)
  81e764:	e0bff883 	ldbu	r2,-30(fp)
  81e768:	18800d45 	stb	r2,53(r3)
  81e76c:	e0bff717 	ldw	r2,-36(fp)
  81e770:	e0bff215 	stw	r2,-56(fp)
  81e774:	e0bff217 	ldw	r2,-56(fp)
  81e778:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81e77c:	00802174 	movhi	r2,133
  81e780:	1082eb44 	addi	r2,r2,2989
  81e784:	10800003 	ldbu	r2,0(r2)
  81e788:	10803fcc 	andi	r2,r2,255
  81e78c:	10800058 	cmpnei	r2,r2,1
  81e790:	1000011e 	bne	r2,zero,81e798 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  81e794:	0818d000 	call	818d00 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81e798:	e03fff15 	stw	zero,-4(fp)
  81e79c:	e0bfff17 	ldw	r2,-4(fp)
}
  81e7a0:	e037883a 	mov	sp,fp
  81e7a4:	dfc00117 	ldw	ra,4(sp)
  81e7a8:	df000017 	ldw	fp,0(sp)
  81e7ac:	dec00204 	addi	sp,sp,8
  81e7b0:	f800283a 	ret

0081e7b4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  81e7b4:	deffed04 	addi	sp,sp,-76
  81e7b8:	dfc01215 	stw	ra,72(sp)
  81e7bc:	df001115 	stw	fp,68(sp)
  81e7c0:	df001104 	addi	fp,sp,68
  81e7c4:	e13ffb15 	stw	r4,-20(fp)
  81e7c8:	e17ffc15 	stw	r5,-16(fp)
  81e7cc:	e1bffd15 	stw	r6,-12(fp)
  81e7d0:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81e7d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81e7d8:	e0bffe03 	ldbu	r2,-8(fp)
  81e7dc:	10800570 	cmpltui	r2,r2,21
  81e7e0:	1000031e 	bne	r2,zero,81e7f0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  81e7e4:	00800a84 	movi	r2,42
  81e7e8:	e0bfff15 	stw	r2,-4(fp)
  81e7ec:	00006006 	br	81e970 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e7f0:	0005303a 	rdctl	r2,status
  81e7f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e7f8:	e0fff717 	ldw	r3,-36(fp)
  81e7fc:	00bfff84 	movi	r2,-2
  81e800:	1884703a 	and	r2,r3,r2
  81e804:	1001703a 	wrctl	status,r2
  
  return context;
  81e808:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81e80c:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81e810:	00802174 	movhi	r2,133
  81e814:	1082f904 	addi	r2,r2,3044
  81e818:	10800003 	ldbu	r2,0(r2)
  81e81c:	10803fcc 	andi	r2,r2,255
  81e820:	1005003a 	cmpeq	r2,r2,zero
  81e824:	1000071e 	bne	r2,zero,81e844 <OSTaskCreate+0x90>
  81e828:	e0bff817 	ldw	r2,-32(fp)
  81e82c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e830:	e0bff617 	ldw	r2,-40(fp)
  81e834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81e838:	00800f04 	movi	r2,60
  81e83c:	e0bfff15 	stw	r2,-4(fp)
  81e840:	00004b06 	br	81e970 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  81e844:	e0bffe03 	ldbu	r2,-8(fp)
  81e848:	00c03934 	movhi	r3,228
  81e84c:	18e6c204 	addi	r3,r3,-25848
  81e850:	1085883a 	add	r2,r2,r2
  81e854:	1085883a 	add	r2,r2,r2
  81e858:	10c5883a 	add	r2,r2,r3
  81e85c:	10800017 	ldw	r2,0(r2)
  81e860:	1004c03a 	cmpne	r2,r2,zero
  81e864:	10003c1e 	bne	r2,zero,81e958 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  81e868:	e0bffe03 	ldbu	r2,-8(fp)
  81e86c:	00c03934 	movhi	r3,228
  81e870:	18e6c204 	addi	r3,r3,-25848
  81e874:	1085883a 	add	r2,r2,r2
  81e878:	1085883a 	add	r2,r2,r2
  81e87c:	10c7883a 	add	r3,r2,r3
  81e880:	00800044 	movi	r2,1
  81e884:	18800015 	stw	r2,0(r3)
  81e888:	e0bff817 	ldw	r2,-32(fp)
  81e88c:	e0bff515 	stw	r2,-44(fp)
  81e890:	e0bff517 	ldw	r2,-44(fp)
  81e894:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  81e898:	e13ffb17 	ldw	r4,-20(fp)
  81e89c:	e17ffc17 	ldw	r5,-16(fp)
  81e8a0:	e1bffd17 	ldw	r6,-12(fp)
  81e8a4:	000f883a 	mov	r7,zero
  81e8a8:	083ad680 	call	83ad68 <OSTaskStkInit>
  81e8ac:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  81e8b0:	e13ffe03 	ldbu	r4,-8(fp)
  81e8b4:	d8000015 	stw	zero,0(sp)
  81e8b8:	d8000115 	stw	zero,4(sp)
  81e8bc:	d8000215 	stw	zero,8(sp)
  81e8c0:	e17ffa17 	ldw	r5,-24(fp)
  81e8c4:	000d883a 	mov	r6,zero
  81e8c8:	000f883a 	mov	r7,zero
  81e8cc:	08191080 	call	819108 <OS_TCBInit>
  81e8d0:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  81e8d4:	e0bff903 	ldbu	r2,-28(fp)
  81e8d8:	1004c03a 	cmpne	r2,r2,zero
  81e8dc:	1000081e 	bne	r2,zero,81e900 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81e8e0:	00802174 	movhi	r2,133
  81e8e4:	1082eb44 	addi	r2,r2,2989
  81e8e8:	10800003 	ldbu	r2,0(r2)
  81e8ec:	10803fcc 	andi	r2,r2,255
  81e8f0:	10800058 	cmpnei	r2,r2,1
  81e8f4:	1000151e 	bne	r2,zero,81e94c <OSTaskCreate+0x198>
                OS_Sched();
  81e8f8:	0818d000 	call	818d00 <OS_Sched>
  81e8fc:	00001306 	br	81e94c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e900:	0005303a 	rdctl	r2,status
  81e904:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e908:	e0fff417 	ldw	r3,-48(fp)
  81e90c:	00bfff84 	movi	r2,-2
  81e910:	1884703a 	and	r2,r3,r2
  81e914:	1001703a 	wrctl	status,r2
  
  return context;
  81e918:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81e91c:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  81e920:	e0bffe03 	ldbu	r2,-8(fp)
  81e924:	00c03934 	movhi	r3,228
  81e928:	18e6c204 	addi	r3,r3,-25848
  81e92c:	1085883a 	add	r2,r2,r2
  81e930:	1085883a 	add	r2,r2,r2
  81e934:	10c5883a 	add	r2,r2,r3
  81e938:	10000015 	stw	zero,0(r2)
  81e93c:	e0bff817 	ldw	r2,-32(fp)
  81e940:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e944:	e0bff317 	ldw	r2,-52(fp)
  81e948:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  81e94c:	e0bff903 	ldbu	r2,-28(fp)
  81e950:	e0bfff15 	stw	r2,-4(fp)
  81e954:	00000606 	br	81e970 <OSTaskCreate+0x1bc>
  81e958:	e0bff817 	ldw	r2,-32(fp)
  81e95c:	e0bff215 	stw	r2,-56(fp)
  81e960:	e0bff217 	ldw	r2,-56(fp)
  81e964:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81e968:	00800a04 	movi	r2,40
  81e96c:	e0bfff15 	stw	r2,-4(fp)
  81e970:	e0bfff17 	ldw	r2,-4(fp)
}
  81e974:	e037883a 	mov	sp,fp
  81e978:	dfc00117 	ldw	ra,4(sp)
  81e97c:	df000017 	ldw	fp,0(sp)
  81e980:	dec00204 	addi	sp,sp,8
  81e984:	f800283a 	ret

0081e988 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  81e988:	deffeb04 	addi	sp,sp,-84
  81e98c:	dfc01415 	stw	ra,80(sp)
  81e990:	df001315 	stw	fp,76(sp)
  81e994:	df001304 	addi	fp,sp,76
  81e998:	e13ff915 	stw	r4,-28(fp)
  81e99c:	e17ffa15 	stw	r5,-24(fp)
  81e9a0:	e1bffb15 	stw	r6,-20(fp)
  81e9a4:	e0800217 	ldw	r2,8(fp)
  81e9a8:	e0c00617 	ldw	r3,24(fp)
  81e9ac:	e1fffc05 	stb	r7,-16(fp)
  81e9b0:	e0bffd0d 	sth	r2,-12(fp)
  81e9b4:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81e9b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81e9bc:	e0bffc03 	ldbu	r2,-16(fp)
  81e9c0:	10800570 	cmpltui	r2,r2,21
  81e9c4:	1000031e 	bne	r2,zero,81e9d4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  81e9c8:	00800a84 	movi	r2,42
  81e9cc:	e0bfff15 	stw	r2,-4(fp)
  81e9d0:	00006706 	br	81eb70 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e9d4:	0005303a 	rdctl	r2,status
  81e9d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e9dc:	e0fff517 	ldw	r3,-44(fp)
  81e9e0:	00bfff84 	movi	r2,-2
  81e9e4:	1884703a 	and	r2,r3,r2
  81e9e8:	1001703a 	wrctl	status,r2
  
  return context;
  81e9ec:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81e9f0:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81e9f4:	00802174 	movhi	r2,133
  81e9f8:	1082f904 	addi	r2,r2,3044
  81e9fc:	10800003 	ldbu	r2,0(r2)
  81ea00:	10803fcc 	andi	r2,r2,255
  81ea04:	1005003a 	cmpeq	r2,r2,zero
  81ea08:	1000071e 	bne	r2,zero,81ea28 <OSTaskCreateExt+0xa0>
  81ea0c:	e0bff617 	ldw	r2,-40(fp)
  81ea10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ea14:	e0bff417 	ldw	r2,-48(fp)
  81ea18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81ea1c:	00800f04 	movi	r2,60
  81ea20:	e0bfff15 	stw	r2,-4(fp)
  81ea24:	00005206 	br	81eb70 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  81ea28:	e0bffc03 	ldbu	r2,-16(fp)
  81ea2c:	00c03934 	movhi	r3,228
  81ea30:	18e6c204 	addi	r3,r3,-25848
  81ea34:	1085883a 	add	r2,r2,r2
  81ea38:	1085883a 	add	r2,r2,r2
  81ea3c:	10c5883a 	add	r2,r2,r3
  81ea40:	10800017 	ldw	r2,0(r2)
  81ea44:	1004c03a 	cmpne	r2,r2,zero
  81ea48:	1000431e 	bne	r2,zero,81eb58 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  81ea4c:	e0bffc03 	ldbu	r2,-16(fp)
  81ea50:	00c03934 	movhi	r3,228
  81ea54:	18e6c204 	addi	r3,r3,-25848
  81ea58:	1085883a 	add	r2,r2,r2
  81ea5c:	1085883a 	add	r2,r2,r2
  81ea60:	10c7883a 	add	r3,r2,r3
  81ea64:	00800044 	movi	r2,1
  81ea68:	18800015 	stw	r2,0(r3)
  81ea6c:	e0bff617 	ldw	r2,-40(fp)
  81ea70:	e0bff315 	stw	r2,-52(fp)
  81ea74:	e0bff317 	ldw	r2,-52(fp)
  81ea78:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  81ea7c:	e1bffe0b 	ldhu	r6,-8(fp)
  81ea80:	e1000317 	ldw	r4,12(fp)
  81ea84:	e1400417 	ldw	r5,16(fp)
  81ea88:	081fc040 	call	81fc04 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  81ea8c:	e1fffe0b 	ldhu	r7,-8(fp)
  81ea90:	e13ff917 	ldw	r4,-28(fp)
  81ea94:	e17ffa17 	ldw	r5,-24(fp)
  81ea98:	e1bffb17 	ldw	r6,-20(fp)
  81ea9c:	083ad680 	call	83ad68 <OSTaskStkInit>
  81eaa0:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  81eaa4:	e13ffc03 	ldbu	r4,-16(fp)
  81eaa8:	e1fffd0b 	ldhu	r7,-12(fp)
  81eaac:	e0fffe0b 	ldhu	r3,-8(fp)
  81eab0:	e0800417 	ldw	r2,16(fp)
  81eab4:	d8800015 	stw	r2,0(sp)
  81eab8:	e0800517 	ldw	r2,20(fp)
  81eabc:	d8800115 	stw	r2,4(sp)
  81eac0:	d8c00215 	stw	r3,8(sp)
  81eac4:	e17ff817 	ldw	r5,-32(fp)
  81eac8:	e1800317 	ldw	r6,12(fp)
  81eacc:	08191080 	call	819108 <OS_TCBInit>
  81ead0:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  81ead4:	e0bff703 	ldbu	r2,-36(fp)
  81ead8:	1004c03a 	cmpne	r2,r2,zero
  81eadc:	1000081e 	bne	r2,zero,81eb00 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  81eae0:	00802174 	movhi	r2,133
  81eae4:	1082eb44 	addi	r2,r2,2989
  81eae8:	10800003 	ldbu	r2,0(r2)
  81eaec:	10803fcc 	andi	r2,r2,255
  81eaf0:	10800058 	cmpnei	r2,r2,1
  81eaf4:	1000151e 	bne	r2,zero,81eb4c <OSTaskCreateExt+0x1c4>
                OS_Sched();
  81eaf8:	0818d000 	call	818d00 <OS_Sched>
  81eafc:	00001306 	br	81eb4c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81eb00:	0005303a 	rdctl	r2,status
  81eb04:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81eb08:	e0fff217 	ldw	r3,-56(fp)
  81eb0c:	00bfff84 	movi	r2,-2
  81eb10:	1884703a 	and	r2,r3,r2
  81eb14:	1001703a 	wrctl	status,r2
  
  return context;
  81eb18:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81eb1c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  81eb20:	e0bffc03 	ldbu	r2,-16(fp)
  81eb24:	00c03934 	movhi	r3,228
  81eb28:	18e6c204 	addi	r3,r3,-25848
  81eb2c:	1085883a 	add	r2,r2,r2
  81eb30:	1085883a 	add	r2,r2,r2
  81eb34:	10c5883a 	add	r2,r2,r3
  81eb38:	10000015 	stw	zero,0(r2)
  81eb3c:	e0bff617 	ldw	r2,-40(fp)
  81eb40:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81eb44:	e0bff117 	ldw	r2,-60(fp)
  81eb48:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  81eb4c:	e0bff703 	ldbu	r2,-36(fp)
  81eb50:	e0bfff15 	stw	r2,-4(fp)
  81eb54:	00000606 	br	81eb70 <OSTaskCreateExt+0x1e8>
  81eb58:	e0bff617 	ldw	r2,-40(fp)
  81eb5c:	e0bff015 	stw	r2,-64(fp)
  81eb60:	e0bff017 	ldw	r2,-64(fp)
  81eb64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81eb68:	00800a04 	movi	r2,40
  81eb6c:	e0bfff15 	stw	r2,-4(fp)
  81eb70:	e0bfff17 	ldw	r2,-4(fp)
}
  81eb74:	e037883a 	mov	sp,fp
  81eb78:	dfc00117 	ldw	ra,4(sp)
  81eb7c:	df000017 	ldw	fp,0(sp)
  81eb80:	dec00204 	addi	sp,sp,8
  81eb84:	f800283a 	ret

0081eb88 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  81eb88:	defff304 	addi	sp,sp,-52
  81eb8c:	dfc00c15 	stw	ra,48(sp)
  81eb90:	df000b15 	stw	fp,44(sp)
  81eb94:	df000b04 	addi	fp,sp,44
  81eb98:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  81eb9c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  81eba0:	00802174 	movhi	r2,133
  81eba4:	1082f904 	addi	r2,r2,3044
  81eba8:	10800003 	ldbu	r2,0(r2)
  81ebac:	10803fcc 	andi	r2,r2,255
  81ebb0:	1005003a 	cmpeq	r2,r2,zero
  81ebb4:	1000031e 	bne	r2,zero,81ebc4 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  81ebb8:	00801004 	movi	r2,64
  81ebbc:	e0bfff15 	stw	r2,-4(fp)
  81ebc0:	0000ee06 	br	81ef7c <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  81ebc4:	e0bffe03 	ldbu	r2,-8(fp)
  81ebc8:	10800518 	cmpnei	r2,r2,20
  81ebcc:	1000031e 	bne	r2,zero,81ebdc <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  81ebd0:	00800f84 	movi	r2,62
  81ebd4:	e0bfff15 	stw	r2,-4(fp)
  81ebd8:	0000e806 	br	81ef7c <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  81ebdc:	e0bffe03 	ldbu	r2,-8(fp)
  81ebe0:	10800530 	cmpltui	r2,r2,20
  81ebe4:	1000061e 	bne	r2,zero,81ec00 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  81ebe8:	e0bffe03 	ldbu	r2,-8(fp)
  81ebec:	10803fe0 	cmpeqi	r2,r2,255
  81ebf0:	1000031e 	bne	r2,zero,81ec00 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  81ebf4:	00800a84 	movi	r2,42
  81ebf8:	e0bfff15 	stw	r2,-4(fp)
  81ebfc:	0000df06 	br	81ef7c <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ec00:	0005303a 	rdctl	r2,status
  81ec04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ec08:	e0fffa17 	ldw	r3,-24(fp)
  81ec0c:	00bfff84 	movi	r2,-2
  81ec10:	1884703a 	and	r2,r3,r2
  81ec14:	1001703a 	wrctl	status,r2
  
  return context;
  81ec18:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  81ec1c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  81ec20:	e0bffe03 	ldbu	r2,-8(fp)
  81ec24:	10803fd8 	cmpnei	r2,r2,255
  81ec28:	1000051e 	bne	r2,zero,81ec40 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  81ec2c:	00802174 	movhi	r2,133
  81ec30:	1082fa04 	addi	r2,r2,3048
  81ec34:	10800017 	ldw	r2,0(r2)
  81ec38:	10800c83 	ldbu	r2,50(r2)
  81ec3c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81ec40:	e0bffe03 	ldbu	r2,-8(fp)
  81ec44:	00c03934 	movhi	r3,228
  81ec48:	18e6c204 	addi	r3,r3,-25848
  81ec4c:	1085883a 	add	r2,r2,r2
  81ec50:	1085883a 	add	r2,r2,r2
  81ec54:	10c5883a 	add	r2,r2,r3
  81ec58:	10800017 	ldw	r2,0(r2)
  81ec5c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  81ec60:	e0bffc17 	ldw	r2,-16(fp)
  81ec64:	1004c03a 	cmpne	r2,r2,zero
  81ec68:	1000071e 	bne	r2,zero,81ec88 <OSTaskDel+0x100>
  81ec6c:	e0bffb17 	ldw	r2,-20(fp)
  81ec70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ec74:	e0bff917 	ldw	r2,-28(fp)
  81ec78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81ec7c:	008010c4 	movi	r2,67
  81ec80:	e0bfff15 	stw	r2,-4(fp)
  81ec84:	0000bd06 	br	81ef7c <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  81ec88:	e0bffc17 	ldw	r2,-16(fp)
  81ec8c:	10800058 	cmpnei	r2,r2,1
  81ec90:	1000071e 	bne	r2,zero,81ecb0 <OSTaskDel+0x128>
  81ec94:	e0bffb17 	ldw	r2,-20(fp)
  81ec98:	e0bff815 	stw	r2,-32(fp)
  81ec9c:	e0bff817 	ldw	r2,-32(fp)
  81eca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81eca4:	00800f44 	movi	r2,61
  81eca8:	e0bfff15 	stw	r2,-4(fp)
  81ecac:	0000b306 	br	81ef7c <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  81ecb0:	e0bffc17 	ldw	r2,-16(fp)
  81ecb4:	10800d03 	ldbu	r2,52(r2)
  81ecb8:	11003fcc 	andi	r4,r2,255
  81ecbc:	e0bffc17 	ldw	r2,-16(fp)
  81ecc0:	10800d03 	ldbu	r2,52(r2)
  81ecc4:	10c03fcc 	andi	r3,r2,255
  81ecc8:	00802174 	movhi	r2,133
  81eccc:	1082f744 	addi	r2,r2,3037
  81ecd0:	10c5883a 	add	r2,r2,r3
  81ecd4:	10800003 	ldbu	r2,0(r2)
  81ecd8:	1007883a 	mov	r3,r2
  81ecdc:	e0bffc17 	ldw	r2,-16(fp)
  81ece0:	10800d43 	ldbu	r2,53(r2)
  81ece4:	0084303a 	nor	r2,zero,r2
  81ece8:	1884703a 	and	r2,r3,r2
  81ecec:	1007883a 	mov	r3,r2
  81ecf0:	00802174 	movhi	r2,133
  81ecf4:	1082f744 	addi	r2,r2,3037
  81ecf8:	1105883a 	add	r2,r2,r4
  81ecfc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  81ed00:	e0bffc17 	ldw	r2,-16(fp)
  81ed04:	10800d03 	ldbu	r2,52(r2)
  81ed08:	10c03fcc 	andi	r3,r2,255
  81ed0c:	00802174 	movhi	r2,133
  81ed10:	1082f744 	addi	r2,r2,3037
  81ed14:	10c5883a 	add	r2,r2,r3
  81ed18:	10800003 	ldbu	r2,0(r2)
  81ed1c:	10803fcc 	andi	r2,r2,255
  81ed20:	1004c03a 	cmpne	r2,r2,zero
  81ed24:	10000c1e 	bne	r2,zero,81ed58 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  81ed28:	e0bffc17 	ldw	r2,-16(fp)
  81ed2c:	10800d83 	ldbu	r2,54(r2)
  81ed30:	0084303a 	nor	r2,zero,r2
  81ed34:	1007883a 	mov	r3,r2
  81ed38:	00802174 	movhi	r2,133
  81ed3c:	1082f704 	addi	r2,r2,3036
  81ed40:	10800003 	ldbu	r2,0(r2)
  81ed44:	1884703a 	and	r2,r3,r2
  81ed48:	1007883a 	mov	r3,r2
  81ed4c:	00802174 	movhi	r2,133
  81ed50:	1082f704 	addi	r2,r2,3036
  81ed54:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  81ed58:	e0bffc17 	ldw	r2,-16(fp)
  81ed5c:	10800717 	ldw	r2,28(r2)
  81ed60:	1005003a 	cmpeq	r2,r2,zero
  81ed64:	1000041e 	bne	r2,zero,81ed78 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  81ed68:	e0bffc17 	ldw	r2,-16(fp)
  81ed6c:	11400717 	ldw	r5,28(r2)
  81ed70:	e13ffc17 	ldw	r4,-16(fp)
  81ed74:	08186b80 	call	8186b8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  81ed78:	e0bffc17 	ldw	r2,-16(fp)
  81ed7c:	10800817 	ldw	r2,32(r2)
  81ed80:	1005003a 	cmpeq	r2,r2,zero
  81ed84:	1000041e 	bne	r2,zero,81ed98 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  81ed88:	e0bffc17 	ldw	r2,-16(fp)
  81ed8c:	11400817 	ldw	r5,32(r2)
  81ed90:	e13ffc17 	ldw	r4,-16(fp)
  81ed94:	08187700 	call	818770 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  81ed98:	e0bffc17 	ldw	r2,-16(fp)
  81ed9c:	10800a17 	ldw	r2,40(r2)
  81eda0:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  81eda4:	e0bffd17 	ldw	r2,-12(fp)
  81eda8:	1005003a 	cmpeq	r2,r2,zero
  81edac:	1000021e 	bne	r2,zero,81edb8 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  81edb0:	e13ffd17 	ldw	r4,-12(fp)
  81edb4:	081ae040 	call	81ae04 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  81edb8:	e0bffc17 	ldw	r2,-16(fp)
  81edbc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  81edc0:	e0bffc17 	ldw	r2,-16(fp)
  81edc4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  81edc8:	e0bffc17 	ldw	r2,-16(fp)
  81edcc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  81edd0:	00802174 	movhi	r2,133
  81edd4:	1082eb04 	addi	r2,r2,2988
  81edd8:	10800003 	ldbu	r2,0(r2)
  81eddc:	10803fcc 	andi	r2,r2,255
  81ede0:	10803fe0 	cmpeqi	r2,r2,255
  81ede4:	1000081e 	bne	r2,zero,81ee08 <OSTaskDel+0x280>
        OSLockNesting++;
  81ede8:	00802174 	movhi	r2,133
  81edec:	1082eb04 	addi	r2,r2,2988
  81edf0:	10800003 	ldbu	r2,0(r2)
  81edf4:	10800044 	addi	r2,r2,1
  81edf8:	1007883a 	mov	r3,r2
  81edfc:	00802174 	movhi	r2,133
  81ee00:	1082eb04 	addi	r2,r2,2988
  81ee04:	10c00005 	stb	r3,0(r2)
  81ee08:	e0bffb17 	ldw	r2,-20(fp)
  81ee0c:	e0bff715 	stw	r2,-36(fp)
  81ee10:	e0bff717 	ldw	r2,-36(fp)
  81ee14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  81ee18:	08182a40 	call	8182a4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ee1c:	0005303a 	rdctl	r2,status
  81ee20:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ee24:	e0fff617 	ldw	r3,-40(fp)
  81ee28:	00bfff84 	movi	r2,-2
  81ee2c:	1884703a 	and	r2,r3,r2
  81ee30:	1001703a 	wrctl	status,r2
  
  return context;
  81ee34:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  81ee38:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  81ee3c:	00802174 	movhi	r2,133
  81ee40:	1082eb04 	addi	r2,r2,2988
  81ee44:	10800003 	ldbu	r2,0(r2)
  81ee48:	10803fcc 	andi	r2,r2,255
  81ee4c:	1005003a 	cmpeq	r2,r2,zero
  81ee50:	1000081e 	bne	r2,zero,81ee74 <OSTaskDel+0x2ec>
        OSLockNesting--;
  81ee54:	00802174 	movhi	r2,133
  81ee58:	1082eb04 	addi	r2,r2,2988
  81ee5c:	10800003 	ldbu	r2,0(r2)
  81ee60:	10bfffc4 	addi	r2,r2,-1
  81ee64:	1007883a 	mov	r3,r2
  81ee68:	00802174 	movhi	r2,133
  81ee6c:	1082eb04 	addi	r2,r2,2988
  81ee70:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  81ee74:	e13ffc17 	ldw	r4,-16(fp)
  81ee78:	083b0980 	call	83b098 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  81ee7c:	00802174 	movhi	r2,133
  81ee80:	1082f344 	addi	r2,r2,3021
  81ee84:	10800003 	ldbu	r2,0(r2)
  81ee88:	10bfffc4 	addi	r2,r2,-1
  81ee8c:	1007883a 	mov	r3,r2
  81ee90:	00802174 	movhi	r2,133
  81ee94:	1082f344 	addi	r2,r2,3021
  81ee98:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  81ee9c:	e0bffe03 	ldbu	r2,-8(fp)
  81eea0:	00c03934 	movhi	r3,228
  81eea4:	18e6c204 	addi	r3,r3,-25848
  81eea8:	1085883a 	add	r2,r2,r2
  81eeac:	1085883a 	add	r2,r2,r2
  81eeb0:	10c5883a 	add	r2,r2,r3
  81eeb4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  81eeb8:	e0bffc17 	ldw	r2,-16(fp)
  81eebc:	10800617 	ldw	r2,24(r2)
  81eec0:	1004c03a 	cmpne	r2,r2,zero
  81eec4:	1000091e 	bne	r2,zero,81eeec <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  81eec8:	e0bffc17 	ldw	r2,-16(fp)
  81eecc:	10800517 	ldw	r2,20(r2)
  81eed0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  81eed4:	e0bffc17 	ldw	r2,-16(fp)
  81eed8:	10c00517 	ldw	r3,20(r2)
  81eedc:	00802174 	movhi	r2,133
  81eee0:	1082ee04 	addi	r2,r2,3000
  81eee4:	10c00015 	stw	r3,0(r2)
  81eee8:	00000a06 	br	81ef14 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  81eeec:	e0bffc17 	ldw	r2,-16(fp)
  81eef0:	10c00617 	ldw	r3,24(r2)
  81eef4:	e0bffc17 	ldw	r2,-16(fp)
  81eef8:	10800517 	ldw	r2,20(r2)
  81eefc:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  81ef00:	e0bffc17 	ldw	r2,-16(fp)
  81ef04:	10c00517 	ldw	r3,20(r2)
  81ef08:	e0bffc17 	ldw	r2,-16(fp)
  81ef0c:	10800617 	ldw	r2,24(r2)
  81ef10:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  81ef14:	00802174 	movhi	r2,133
  81ef18:	1082f204 	addi	r2,r2,3016
  81ef1c:	10c00017 	ldw	r3,0(r2)
  81ef20:	e0bffc17 	ldw	r2,-16(fp)
  81ef24:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  81ef28:	00c02174 	movhi	r3,133
  81ef2c:	18c2f204 	addi	r3,r3,3016
  81ef30:	e0bffc17 	ldw	r2,-16(fp)
  81ef34:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  81ef38:	e0fffc17 	ldw	r3,-16(fp)
  81ef3c:	00800fc4 	movi	r2,63
  81ef40:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  81ef44:	e0bffc17 	ldw	r2,-16(fp)
  81ef48:	10001345 	stb	zero,77(r2)
  81ef4c:	e0bffb17 	ldw	r2,-20(fp)
  81ef50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ef54:	e0bff517 	ldw	r2,-44(fp)
  81ef58:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81ef5c:	00802174 	movhi	r2,133
  81ef60:	1082eb44 	addi	r2,r2,2989
  81ef64:	10800003 	ldbu	r2,0(r2)
  81ef68:	10803fcc 	andi	r2,r2,255
  81ef6c:	10800058 	cmpnei	r2,r2,1
  81ef70:	1000011e 	bne	r2,zero,81ef78 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  81ef74:	0818d000 	call	818d00 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81ef78:	e03fff15 	stw	zero,-4(fp)
  81ef7c:	e0bfff17 	ldw	r2,-4(fp)
}
  81ef80:	e037883a 	mov	sp,fp
  81ef84:	dfc00117 	ldw	ra,4(sp)
  81ef88:	df000017 	ldw	fp,0(sp)
  81ef8c:	dec00204 	addi	sp,sp,8
  81ef90:	f800283a 	ret

0081ef94 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  81ef94:	defff404 	addi	sp,sp,-48
  81ef98:	df000b15 	stw	fp,44(sp)
  81ef9c:	df000b04 	addi	fp,sp,44
  81efa0:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81efa4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  81efa8:	e0bffe03 	ldbu	r2,-8(fp)
  81efac:	10800518 	cmpnei	r2,r2,20
  81efb0:	1000031e 	bne	r2,zero,81efc0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  81efb4:	00800f84 	movi	r2,62
  81efb8:	e0bfff15 	stw	r2,-4(fp)
  81efbc:	00004c06 	br	81f0f0 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81efc0:	e0bffe03 	ldbu	r2,-8(fp)
  81efc4:	10800530 	cmpltui	r2,r2,20
  81efc8:	1000061e 	bne	r2,zero,81efe4 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  81efcc:	e0bffe03 	ldbu	r2,-8(fp)
  81efd0:	10803fe0 	cmpeqi	r2,r2,255
  81efd4:	1000031e 	bne	r2,zero,81efe4 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  81efd8:	00800a84 	movi	r2,42
  81efdc:	e0bfff15 	stw	r2,-4(fp)
  81efe0:	00004306 	br	81f0f0 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  81efe4:	e0bffe03 	ldbu	r2,-8(fp)
  81efe8:	10803fd8 	cmpnei	r2,r2,255
  81efec:	1000141e 	bne	r2,zero,81f040 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81eff0:	0005303a 	rdctl	r2,status
  81eff4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81eff8:	e0fffa17 	ldw	r3,-24(fp)
  81effc:	00bfff84 	movi	r2,-2
  81f000:	1884703a 	and	r2,r3,r2
  81f004:	1001703a 	wrctl	status,r2
  
  return context;
  81f008:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  81f00c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  81f010:	00802174 	movhi	r2,133
  81f014:	1082fa04 	addi	r2,r2,3048
  81f018:	10800017 	ldw	r2,0(r2)
  81f01c:	10800dc3 	ldbu	r2,55(r2)
  81f020:	e0bffd05 	stb	r2,-12(fp)
  81f024:	e0bffb17 	ldw	r2,-20(fp)
  81f028:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f02c:	e0bff917 	ldw	r2,-28(fp)
  81f030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  81f034:	e0bffd03 	ldbu	r2,-12(fp)
  81f038:	e0bfff15 	stw	r2,-4(fp)
  81f03c:	00002c06 	br	81f0f0 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f040:	0005303a 	rdctl	r2,status
  81f044:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f048:	e0fff817 	ldw	r3,-32(fp)
  81f04c:	00bfff84 	movi	r2,-2
  81f050:	1884703a 	and	r2,r3,r2
  81f054:	1001703a 	wrctl	status,r2
  
  return context;
  81f058:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81f05c:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  81f060:	e0bffe03 	ldbu	r2,-8(fp)
  81f064:	00c03934 	movhi	r3,228
  81f068:	18e6c204 	addi	r3,r3,-25848
  81f06c:	1085883a 	add	r2,r2,r2
  81f070:	1085883a 	add	r2,r2,r2
  81f074:	10c5883a 	add	r2,r2,r3
  81f078:	10800017 	ldw	r2,0(r2)
  81f07c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  81f080:	e0bffc17 	ldw	r2,-16(fp)
  81f084:	1004c03a 	cmpne	r2,r2,zero
  81f088:	1000071e 	bne	r2,zero,81f0a8 <OSTaskDelReq+0x114>
  81f08c:	e0bffb17 	ldw	r2,-20(fp)
  81f090:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f094:	e0bff717 	ldw	r2,-36(fp)
  81f098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  81f09c:	008010c4 	movi	r2,67
  81f0a0:	e0bfff15 	stw	r2,-4(fp)
  81f0a4:	00001206 	br	81f0f0 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  81f0a8:	e0bffc17 	ldw	r2,-16(fp)
  81f0ac:	10800058 	cmpnei	r2,r2,1
  81f0b0:	1000071e 	bne	r2,zero,81f0d0 <OSTaskDelReq+0x13c>
  81f0b4:	e0bffb17 	ldw	r2,-20(fp)
  81f0b8:	e0bff615 	stw	r2,-40(fp)
  81f0bc:	e0bff617 	ldw	r2,-40(fp)
  81f0c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81f0c4:	00800f44 	movi	r2,61
  81f0c8:	e0bfff15 	stw	r2,-4(fp)
  81f0cc:	00000806 	br	81f0f0 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  81f0d0:	e0fffc17 	ldw	r3,-16(fp)
  81f0d4:	00800fc4 	movi	r2,63
  81f0d8:	18800dc5 	stb	r2,55(r3)
  81f0dc:	e0bffb17 	ldw	r2,-20(fp)
  81f0e0:	e0bff515 	stw	r2,-44(fp)
  81f0e4:	e0bff517 	ldw	r2,-44(fp)
  81f0e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81f0ec:	e03fff15 	stw	zero,-4(fp)
  81f0f0:	e0bfff17 	ldw	r2,-4(fp)
}
  81f0f4:	e037883a 	mov	sp,fp
  81f0f8:	df000017 	ldw	fp,0(sp)
  81f0fc:	dec00104 	addi	sp,sp,4
  81f100:	f800283a 	ret

0081f104 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81f104:	defff304 	addi	sp,sp,-52
  81f108:	dfc00c15 	stw	ra,48(sp)
  81f10c:	df000b15 	stw	fp,44(sp)
  81f110:	df000b04 	addi	fp,sp,44
  81f114:	e17ffd15 	stw	r5,-12(fp)
  81f118:	e1bffe15 	stw	r6,-8(fp)
  81f11c:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  81f120:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  81f124:	e0bffe17 	ldw	r2,-8(fp)
  81f128:	1004c03a 	cmpne	r2,r2,zero
  81f12c:	1000021e 	bne	r2,zero,81f138 <OSTaskNameGet+0x34>
        return (0);
  81f130:	e03fff15 	stw	zero,-4(fp)
  81f134:	00005b06 	br	81f2a4 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  81f138:	e0bffc03 	ldbu	r2,-16(fp)
  81f13c:	10800570 	cmpltui	r2,r2,21
  81f140:	1000081e 	bne	r2,zero,81f164 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  81f144:	e0bffc03 	ldbu	r2,-16(fp)
  81f148:	10803fe0 	cmpeqi	r2,r2,255
  81f14c:	1000051e 	bne	r2,zero,81f164 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  81f150:	e0fffe17 	ldw	r3,-8(fp)
  81f154:	00800a84 	movi	r2,42
  81f158:	18800005 	stb	r2,0(r3)
            return (0);
  81f15c:	e03fff15 	stw	zero,-4(fp)
  81f160:	00005006 	br	81f2a4 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  81f164:	e0bffd17 	ldw	r2,-12(fp)
  81f168:	1004c03a 	cmpne	r2,r2,zero
  81f16c:	1000051e 	bne	r2,zero,81f184 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  81f170:	e0fffe17 	ldw	r3,-8(fp)
  81f174:	00800304 	movi	r2,12
  81f178:	18800005 	stb	r2,0(r3)
        return (0);
  81f17c:	e03fff15 	stw	zero,-4(fp)
  81f180:	00004806 	br	81f2a4 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  81f184:	00802174 	movhi	r2,133
  81f188:	1082f904 	addi	r2,r2,3044
  81f18c:	10800003 	ldbu	r2,0(r2)
  81f190:	10803fcc 	andi	r2,r2,255
  81f194:	1005003a 	cmpeq	r2,r2,zero
  81f198:	1000051e 	bne	r2,zero,81f1b0 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  81f19c:	e0fffe17 	ldw	r3,-8(fp)
  81f1a0:	00800444 	movi	r2,17
  81f1a4:	18800005 	stb	r2,0(r3)
        return (0);
  81f1a8:	e03fff15 	stw	zero,-4(fp)
  81f1ac:	00003d06 	br	81f2a4 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f1b0:	0005303a 	rdctl	r2,status
  81f1b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f1b8:	e0fff817 	ldw	r3,-32(fp)
  81f1bc:	00bfff84 	movi	r2,-2
  81f1c0:	1884703a 	and	r2,r3,r2
  81f1c4:	1001703a 	wrctl	status,r2
  
  return context;
  81f1c8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81f1cc:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  81f1d0:	e0bffc03 	ldbu	r2,-16(fp)
  81f1d4:	10803fd8 	cmpnei	r2,r2,255
  81f1d8:	1000051e 	bne	r2,zero,81f1f0 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  81f1dc:	00802174 	movhi	r2,133
  81f1e0:	1082fa04 	addi	r2,r2,3048
  81f1e4:	10800017 	ldw	r2,0(r2)
  81f1e8:	10800c83 	ldbu	r2,50(r2)
  81f1ec:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81f1f0:	e0bffc03 	ldbu	r2,-16(fp)
  81f1f4:	00c03934 	movhi	r3,228
  81f1f8:	18e6c204 	addi	r3,r3,-25848
  81f1fc:	1085883a 	add	r2,r2,r2
  81f200:	1085883a 	add	r2,r2,r2
  81f204:	10c5883a 	add	r2,r2,r3
  81f208:	10800017 	ldw	r2,0(r2)
  81f20c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  81f210:	e0bffb17 	ldw	r2,-20(fp)
  81f214:	1004c03a 	cmpne	r2,r2,zero
  81f218:	1000091e 	bne	r2,zero,81f240 <OSTaskNameGet+0x13c>
  81f21c:	e0bff917 	ldw	r2,-28(fp)
  81f220:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f224:	e0bff717 	ldw	r2,-36(fp)
  81f228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81f22c:	e0fffe17 	ldw	r3,-8(fp)
  81f230:	008010c4 	movi	r2,67
  81f234:	18800005 	stb	r2,0(r3)
        return (0);
  81f238:	e03fff15 	stw	zero,-4(fp)
  81f23c:	00001906 	br	81f2a4 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  81f240:	e0bffb17 	ldw	r2,-20(fp)
  81f244:	10800058 	cmpnei	r2,r2,1
  81f248:	1000091e 	bne	r2,zero,81f270 <OSTaskNameGet+0x16c>
  81f24c:	e0bff917 	ldw	r2,-28(fp)
  81f250:	e0bff615 	stw	r2,-40(fp)
  81f254:	e0bff617 	ldw	r2,-40(fp)
  81f258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81f25c:	e0fffe17 	ldw	r3,-8(fp)
  81f260:	008010c4 	movi	r2,67
  81f264:	18800005 	stb	r2,0(r3)
        return (0);
  81f268:	e03fff15 	stw	zero,-4(fp)
  81f26c:	00000d06 	br	81f2a4 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  81f270:	e0bffb17 	ldw	r2,-20(fp)
  81f274:	11401304 	addi	r5,r2,76
  81f278:	e13ffd17 	ldw	r4,-12(fp)
  81f27c:	0818e440 	call	818e44 <OS_StrCopy>
  81f280:	e0bffa05 	stb	r2,-24(fp)
  81f284:	e0bff917 	ldw	r2,-28(fp)
  81f288:	e0bff515 	stw	r2,-44(fp)
  81f28c:	e0bff517 	ldw	r2,-44(fp)
  81f290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81f294:	e0bffe17 	ldw	r2,-8(fp)
  81f298:	10000005 	stb	zero,0(r2)
    return (len);
  81f29c:	e0bffa03 	ldbu	r2,-24(fp)
  81f2a0:	e0bfff15 	stw	r2,-4(fp)
  81f2a4:	e0bfff17 	ldw	r2,-4(fp)
}
  81f2a8:	e037883a 	mov	sp,fp
  81f2ac:	dfc00117 	ldw	ra,4(sp)
  81f2b0:	df000017 	ldw	fp,0(sp)
  81f2b4:	dec00204 	addi	sp,sp,8
  81f2b8:	f800283a 	ret

0081f2bc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81f2bc:	defff304 	addi	sp,sp,-52
  81f2c0:	dfc00c15 	stw	ra,48(sp)
  81f2c4:	df000b15 	stw	fp,44(sp)
  81f2c8:	df000b04 	addi	fp,sp,44
  81f2cc:	e17ffe15 	stw	r5,-8(fp)
  81f2d0:	e1bfff15 	stw	r6,-4(fp)
  81f2d4:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81f2d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81f2dc:	e0bfff17 	ldw	r2,-4(fp)
  81f2e0:	1005003a 	cmpeq	r2,r2,zero
  81f2e4:	1000611e 	bne	r2,zero,81f46c <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  81f2e8:	e0bffd03 	ldbu	r2,-12(fp)
  81f2ec:	10800570 	cmpltui	r2,r2,21
  81f2f0:	1000071e 	bne	r2,zero,81f310 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  81f2f4:	e0bffd03 	ldbu	r2,-12(fp)
  81f2f8:	10803fe0 	cmpeqi	r2,r2,255
  81f2fc:	1000041e 	bne	r2,zero,81f310 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  81f300:	e0ffff17 	ldw	r3,-4(fp)
  81f304:	00800a84 	movi	r2,42
  81f308:	18800005 	stb	r2,0(r3)
            return;
  81f30c:	00005706 	br	81f46c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  81f310:	e0bffe17 	ldw	r2,-8(fp)
  81f314:	1004c03a 	cmpne	r2,r2,zero
  81f318:	1000041e 	bne	r2,zero,81f32c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  81f31c:	e0ffff17 	ldw	r3,-4(fp)
  81f320:	00800304 	movi	r2,12
  81f324:	18800005 	stb	r2,0(r3)
        return;
  81f328:	00005006 	br	81f46c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  81f32c:	00802174 	movhi	r2,133
  81f330:	1082f904 	addi	r2,r2,3044
  81f334:	10800003 	ldbu	r2,0(r2)
  81f338:	10803fcc 	andi	r2,r2,255
  81f33c:	1005003a 	cmpeq	r2,r2,zero
  81f340:	1000041e 	bne	r2,zero,81f354 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  81f344:	e0ffff17 	ldw	r3,-4(fp)
  81f348:	00800484 	movi	r2,18
  81f34c:	18800005 	stb	r2,0(r3)
        return;
  81f350:	00004606 	br	81f46c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f354:	0005303a 	rdctl	r2,status
  81f358:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f35c:	e0fff917 	ldw	r3,-28(fp)
  81f360:	00bfff84 	movi	r2,-2
  81f364:	1884703a 	and	r2,r3,r2
  81f368:	1001703a 	wrctl	status,r2
  
  return context;
  81f36c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81f370:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  81f374:	e0bffd03 	ldbu	r2,-12(fp)
  81f378:	10803fd8 	cmpnei	r2,r2,255
  81f37c:	1000051e 	bne	r2,zero,81f394 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  81f380:	00802174 	movhi	r2,133
  81f384:	1082fa04 	addi	r2,r2,3048
  81f388:	10800017 	ldw	r2,0(r2)
  81f38c:	10800c83 	ldbu	r2,50(r2)
  81f390:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81f394:	e0bffd03 	ldbu	r2,-12(fp)
  81f398:	00c03934 	movhi	r3,228
  81f39c:	18e6c204 	addi	r3,r3,-25848
  81f3a0:	1085883a 	add	r2,r2,r2
  81f3a4:	1085883a 	add	r2,r2,r2
  81f3a8:	10c5883a 	add	r2,r2,r3
  81f3ac:	10800017 	ldw	r2,0(r2)
  81f3b0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  81f3b4:	e0bffb17 	ldw	r2,-20(fp)
  81f3b8:	1004c03a 	cmpne	r2,r2,zero
  81f3bc:	1000081e 	bne	r2,zero,81f3e0 <OSTaskNameSet+0x124>
  81f3c0:	e0bffa17 	ldw	r2,-24(fp)
  81f3c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f3c8:	e0bff817 	ldw	r2,-32(fp)
  81f3cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81f3d0:	e0ffff17 	ldw	r3,-4(fp)
  81f3d4:	008010c4 	movi	r2,67
  81f3d8:	18800005 	stb	r2,0(r3)
        return;
  81f3dc:	00002306 	br	81f46c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81f3e0:	e0bffb17 	ldw	r2,-20(fp)
  81f3e4:	10800058 	cmpnei	r2,r2,1
  81f3e8:	1000081e 	bne	r2,zero,81f40c <OSTaskNameSet+0x150>
  81f3ec:	e0bffa17 	ldw	r2,-24(fp)
  81f3f0:	e0bff715 	stw	r2,-36(fp)
  81f3f4:	e0bff717 	ldw	r2,-36(fp)
  81f3f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81f3fc:	e0ffff17 	ldw	r3,-4(fp)
  81f400:	008010c4 	movi	r2,67
  81f404:	18800005 	stb	r2,0(r3)
        return;
  81f408:	00001806 	br	81f46c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  81f40c:	e13ffe17 	ldw	r4,-8(fp)
  81f410:	0818ec40 	call	818ec4 <OS_StrLen>
  81f414:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  81f418:	e0bffc03 	ldbu	r2,-16(fp)
  81f41c:	10800830 	cmpltui	r2,r2,32
  81f420:	1000081e 	bne	r2,zero,81f444 <OSTaskNameSet+0x188>
  81f424:	e0bffa17 	ldw	r2,-24(fp)
  81f428:	e0bff615 	stw	r2,-40(fp)
  81f42c:	e0bff617 	ldw	r2,-40(fp)
  81f430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  81f434:	e0ffff17 	ldw	r3,-4(fp)
  81f438:	00801044 	movi	r2,65
  81f43c:	18800005 	stb	r2,0(r3)
        return;
  81f440:	00000a06 	br	81f46c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  81f444:	e0bffb17 	ldw	r2,-20(fp)
  81f448:	11001304 	addi	r4,r2,76
  81f44c:	e17ffe17 	ldw	r5,-8(fp)
  81f450:	0818e440 	call	818e44 <OS_StrCopy>
  81f454:	e0bffa17 	ldw	r2,-24(fp)
  81f458:	e0bff515 	stw	r2,-44(fp)
  81f45c:	e0bff517 	ldw	r2,-44(fp)
  81f460:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81f464:	e0bfff17 	ldw	r2,-4(fp)
  81f468:	10000005 	stb	zero,0(r2)
}
  81f46c:	e037883a 	mov	sp,fp
  81f470:	dfc00117 	ldw	ra,4(sp)
  81f474:	df000017 	ldw	fp,0(sp)
  81f478:	dec00204 	addi	sp,sp,8
  81f47c:	f800283a 	ret

0081f480 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  81f480:	defff304 	addi	sp,sp,-52
  81f484:	dfc00c15 	stw	ra,48(sp)
  81f488:	df000b15 	stw	fp,44(sp)
  81f48c:	df000b04 	addi	fp,sp,44
  81f490:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81f494:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  81f498:	e0bffe03 	ldbu	r2,-8(fp)
  81f49c:	10800530 	cmpltui	r2,r2,20
  81f4a0:	1000031e 	bne	r2,zero,81f4b0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81f4a4:	00800a84 	movi	r2,42
  81f4a8:	e0bfff15 	stw	r2,-4(fp)
  81f4ac:	00007406 	br	81f680 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f4b0:	0005303a 	rdctl	r2,status
  81f4b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f4b8:	e0fffb17 	ldw	r3,-20(fp)
  81f4bc:	00bfff84 	movi	r2,-2
  81f4c0:	1884703a 	and	r2,r3,r2
  81f4c4:	1001703a 	wrctl	status,r2
  
  return context;
  81f4c8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81f4cc:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  81f4d0:	e0bffe03 	ldbu	r2,-8(fp)
  81f4d4:	00c03934 	movhi	r3,228
  81f4d8:	18e6c204 	addi	r3,r3,-25848
  81f4dc:	1085883a 	add	r2,r2,r2
  81f4e0:	1085883a 	add	r2,r2,r2
  81f4e4:	10c5883a 	add	r2,r2,r3
  81f4e8:	10800017 	ldw	r2,0(r2)
  81f4ec:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  81f4f0:	e0bffd17 	ldw	r2,-12(fp)
  81f4f4:	1004c03a 	cmpne	r2,r2,zero
  81f4f8:	1000071e 	bne	r2,zero,81f518 <OSTaskResume+0x98>
  81f4fc:	e0bffc17 	ldw	r2,-16(fp)
  81f500:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f504:	e0bffa17 	ldw	r2,-24(fp)
  81f508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  81f50c:	00801184 	movi	r2,70
  81f510:	e0bfff15 	stw	r2,-4(fp)
  81f514:	00005a06 	br	81f680 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  81f518:	e0bffd17 	ldw	r2,-12(fp)
  81f51c:	10800058 	cmpnei	r2,r2,1
  81f520:	1000071e 	bne	r2,zero,81f540 <OSTaskResume+0xc0>
  81f524:	e0bffc17 	ldw	r2,-16(fp)
  81f528:	e0bff915 	stw	r2,-28(fp)
  81f52c:	e0bff917 	ldw	r2,-28(fp)
  81f530:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81f534:	008010c4 	movi	r2,67
  81f538:	e0bfff15 	stw	r2,-4(fp)
  81f53c:	00005006 	br	81f680 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  81f540:	e0bffd17 	ldw	r2,-12(fp)
  81f544:	10800c03 	ldbu	r2,48(r2)
  81f548:	10803fcc 	andi	r2,r2,255
  81f54c:	1080020c 	andi	r2,r2,8
  81f550:	1005003a 	cmpeq	r2,r2,zero
  81f554:	1000441e 	bne	r2,zero,81f668 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  81f558:	e0bffd17 	ldw	r2,-12(fp)
  81f55c:	10c00c03 	ldbu	r3,48(r2)
  81f560:	00bffdc4 	movi	r2,-9
  81f564:	1884703a 	and	r2,r3,r2
  81f568:	1007883a 	mov	r3,r2
  81f56c:	e0bffd17 	ldw	r2,-12(fp)
  81f570:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  81f574:	e0bffd17 	ldw	r2,-12(fp)
  81f578:	10800c03 	ldbu	r2,48(r2)
  81f57c:	10803fcc 	andi	r2,r2,255
  81f580:	1004c03a 	cmpne	r2,r2,zero
  81f584:	1000321e 	bne	r2,zero,81f650 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  81f588:	e0bffd17 	ldw	r2,-12(fp)
  81f58c:	10800b8b 	ldhu	r2,46(r2)
  81f590:	10bfffcc 	andi	r2,r2,65535
  81f594:	1004c03a 	cmpne	r2,r2,zero
  81f598:	1000281e 	bne	r2,zero,81f63c <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  81f59c:	e0bffd17 	ldw	r2,-12(fp)
  81f5a0:	10c00d83 	ldbu	r3,54(r2)
  81f5a4:	00802174 	movhi	r2,133
  81f5a8:	1082f704 	addi	r2,r2,3036
  81f5ac:	10800003 	ldbu	r2,0(r2)
  81f5b0:	1884b03a 	or	r2,r3,r2
  81f5b4:	1007883a 	mov	r3,r2
  81f5b8:	00802174 	movhi	r2,133
  81f5bc:	1082f704 	addi	r2,r2,3036
  81f5c0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81f5c4:	e0bffd17 	ldw	r2,-12(fp)
  81f5c8:	10800d03 	ldbu	r2,52(r2)
  81f5cc:	11003fcc 	andi	r4,r2,255
  81f5d0:	e0bffd17 	ldw	r2,-12(fp)
  81f5d4:	10800d03 	ldbu	r2,52(r2)
  81f5d8:	10c03fcc 	andi	r3,r2,255
  81f5dc:	00802174 	movhi	r2,133
  81f5e0:	1082f744 	addi	r2,r2,3037
  81f5e4:	10c5883a 	add	r2,r2,r3
  81f5e8:	10c00003 	ldbu	r3,0(r2)
  81f5ec:	e0bffd17 	ldw	r2,-12(fp)
  81f5f0:	10800d43 	ldbu	r2,53(r2)
  81f5f4:	1884b03a 	or	r2,r3,r2
  81f5f8:	1007883a 	mov	r3,r2
  81f5fc:	00802174 	movhi	r2,133
  81f600:	1082f744 	addi	r2,r2,3037
  81f604:	1105883a 	add	r2,r2,r4
  81f608:	10c00005 	stb	r3,0(r2)
  81f60c:	e0bffc17 	ldw	r2,-16(fp)
  81f610:	e0bff815 	stw	r2,-32(fp)
  81f614:	e0bff817 	ldw	r2,-32(fp)
  81f618:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  81f61c:	00802174 	movhi	r2,133
  81f620:	1082eb44 	addi	r2,r2,2989
  81f624:	10800003 	ldbu	r2,0(r2)
  81f628:	10803fcc 	andi	r2,r2,255
  81f62c:	10800058 	cmpnei	r2,r2,1
  81f630:	10000b1e 	bne	r2,zero,81f660 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  81f634:	0818d000 	call	818d00 <OS_Sched>
  81f638:	00000906 	br	81f660 <OSTaskResume+0x1e0>
  81f63c:	e0bffc17 	ldw	r2,-16(fp)
  81f640:	e0bff715 	stw	r2,-36(fp)
  81f644:	e0bff717 	ldw	r2,-36(fp)
  81f648:	1001703a 	wrctl	status,r2
  81f64c:	00000406 	br	81f660 <OSTaskResume+0x1e0>
  81f650:	e0bffc17 	ldw	r2,-16(fp)
  81f654:	e0bff615 	stw	r2,-40(fp)
  81f658:	e0bff617 	ldw	r2,-40(fp)
  81f65c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  81f660:	e03fff15 	stw	zero,-4(fp)
  81f664:	00000606 	br	81f680 <OSTaskResume+0x200>
  81f668:	e0bffc17 	ldw	r2,-16(fp)
  81f66c:	e0bff515 	stw	r2,-44(fp)
  81f670:	e0bff517 	ldw	r2,-44(fp)
  81f674:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  81f678:	00801104 	movi	r2,68
  81f67c:	e0bfff15 	stw	r2,-4(fp)
  81f680:	e0bfff17 	ldw	r2,-4(fp)
}
  81f684:	e037883a 	mov	sp,fp
  81f688:	dfc00117 	ldw	ra,4(sp)
  81f68c:	df000017 	ldw	fp,0(sp)
  81f690:	dec00204 	addi	sp,sp,8
  81f694:	f800283a 	ret

0081f698 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  81f698:	defff204 	addi	sp,sp,-56
  81f69c:	df000d15 	stw	fp,52(sp)
  81f6a0:	df000d04 	addi	fp,sp,52
  81f6a4:	e17ffe15 	stw	r5,-8(fp)
  81f6a8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81f6ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  81f6b0:	e0bffd03 	ldbu	r2,-12(fp)
  81f6b4:	10800570 	cmpltui	r2,r2,21
  81f6b8:	1000061e 	bne	r2,zero,81f6d4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  81f6bc:	e0bffd03 	ldbu	r2,-12(fp)
  81f6c0:	10803fe0 	cmpeqi	r2,r2,255
  81f6c4:	1000031e 	bne	r2,zero,81f6d4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  81f6c8:	00800a84 	movi	r2,42
  81f6cc:	e0bfff15 	stw	r2,-4(fp)
  81f6d0:	00006b06 	br	81f880 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  81f6d4:	e0bffe17 	ldw	r2,-8(fp)
  81f6d8:	1004c03a 	cmpne	r2,r2,zero
  81f6dc:	1000031e 	bne	r2,zero,81f6ec <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  81f6e0:	00800244 	movi	r2,9
  81f6e4:	e0bfff15 	stw	r2,-4(fp)
  81f6e8:	00006506 	br	81f880 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  81f6ec:	e0bffe17 	ldw	r2,-8(fp)
  81f6f0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  81f6f4:	e0bffe17 	ldw	r2,-8(fp)
  81f6f8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f6fc:	0005303a 	rdctl	r2,status
  81f700:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f704:	e0fff717 	ldw	r3,-36(fp)
  81f708:	00bfff84 	movi	r2,-2
  81f70c:	1884703a 	and	r2,r3,r2
  81f710:	1001703a 	wrctl	status,r2
  
  return context;
  81f714:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81f718:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  81f71c:	e0bffd03 	ldbu	r2,-12(fp)
  81f720:	10803fd8 	cmpnei	r2,r2,255
  81f724:	1000051e 	bne	r2,zero,81f73c <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  81f728:	00802174 	movhi	r2,133
  81f72c:	1082fa04 	addi	r2,r2,3048
  81f730:	10800017 	ldw	r2,0(r2)
  81f734:	10800c83 	ldbu	r2,50(r2)
  81f738:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81f73c:	e0bffd03 	ldbu	r2,-12(fp)
  81f740:	00c03934 	movhi	r3,228
  81f744:	18e6c204 	addi	r3,r3,-25848
  81f748:	1085883a 	add	r2,r2,r2
  81f74c:	1085883a 	add	r2,r2,r2
  81f750:	10c5883a 	add	r2,r2,r3
  81f754:	10800017 	ldw	r2,0(r2)
  81f758:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  81f75c:	e0bffc17 	ldw	r2,-16(fp)
  81f760:	1004c03a 	cmpne	r2,r2,zero
  81f764:	1000071e 	bne	r2,zero,81f784 <OSTaskStkChk+0xec>
  81f768:	e0bff817 	ldw	r2,-32(fp)
  81f76c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f770:	e0bff617 	ldw	r2,-40(fp)
  81f774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81f778:	008010c4 	movi	r2,67
  81f77c:	e0bfff15 	stw	r2,-4(fp)
  81f780:	00003f06 	br	81f880 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81f784:	e0bffc17 	ldw	r2,-16(fp)
  81f788:	10800058 	cmpnei	r2,r2,1
  81f78c:	1000071e 	bne	r2,zero,81f7ac <OSTaskStkChk+0x114>
  81f790:	e0bff817 	ldw	r2,-32(fp)
  81f794:	e0bff515 	stw	r2,-44(fp)
  81f798:	e0bff517 	ldw	r2,-44(fp)
  81f79c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81f7a0:	008010c4 	movi	r2,67
  81f7a4:	e0bfff15 	stw	r2,-4(fp)
  81f7a8:	00003506 	br	81f880 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  81f7ac:	e0bffc17 	ldw	r2,-16(fp)
  81f7b0:	1080040b 	ldhu	r2,16(r2)
  81f7b4:	10bfffcc 	andi	r2,r2,65535
  81f7b8:	1080004c 	andi	r2,r2,1
  81f7bc:	1004c03a 	cmpne	r2,r2,zero
  81f7c0:	1000071e 	bne	r2,zero,81f7e0 <OSTaskStkChk+0x148>
  81f7c4:	e0bff817 	ldw	r2,-32(fp)
  81f7c8:	e0bff415 	stw	r2,-48(fp)
  81f7cc:	e0bff417 	ldw	r2,-48(fp)
  81f7d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  81f7d4:	00801144 	movi	r2,69
  81f7d8:	e0bfff15 	stw	r2,-4(fp)
  81f7dc:	00002806 	br	81f880 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  81f7e0:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  81f7e4:	e0bffc17 	ldw	r2,-16(fp)
  81f7e8:	10800317 	ldw	r2,12(r2)
  81f7ec:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81f7f0:	e0bffc17 	ldw	r2,-16(fp)
  81f7f4:	10800217 	ldw	r2,8(r2)
  81f7f8:	e0bffb15 	stw	r2,-20(fp)
  81f7fc:	e0bff817 	ldw	r2,-32(fp)
  81f800:	e0bff315 	stw	r2,-52(fp)
  81f804:	e0bff317 	ldw	r2,-52(fp)
  81f808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81f80c:	00000306 	br	81f81c <OSTaskStkChk+0x184>
        nfree++;
  81f810:	e0bffa17 	ldw	r2,-24(fp)
  81f814:	10800044 	addi	r2,r2,1
  81f818:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81f81c:	e0bffb17 	ldw	r2,-20(fp)
  81f820:	10800017 	ldw	r2,0(r2)
  81f824:	1005003a 	cmpeq	r2,r2,zero
  81f828:	1007883a 	mov	r3,r2
  81f82c:	e0bffb17 	ldw	r2,-20(fp)
  81f830:	10800104 	addi	r2,r2,4
  81f834:	e0bffb15 	stw	r2,-20(fp)
  81f838:	18803fcc 	andi	r2,r3,255
  81f83c:	1004c03a 	cmpne	r2,r2,zero
  81f840:	103ff31e 	bne	r2,zero,81f810 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  81f844:	e0bffa17 	ldw	r2,-24(fp)
  81f848:	1085883a 	add	r2,r2,r2
  81f84c:	1085883a 	add	r2,r2,r2
  81f850:	1007883a 	mov	r3,r2
  81f854:	e0bffe17 	ldw	r2,-8(fp)
  81f858:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  81f85c:	e0fff917 	ldw	r3,-28(fp)
  81f860:	e0bffa17 	ldw	r2,-24(fp)
  81f864:	1885c83a 	sub	r2,r3,r2
  81f868:	1085883a 	add	r2,r2,r2
  81f86c:	1085883a 	add	r2,r2,r2
  81f870:	1007883a 	mov	r3,r2
  81f874:	e0bffe17 	ldw	r2,-8(fp)
  81f878:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  81f87c:	e03fff15 	stw	zero,-4(fp)
  81f880:	e0bfff17 	ldw	r2,-4(fp)
}
  81f884:	e037883a 	mov	sp,fp
  81f888:	df000017 	ldw	fp,0(sp)
  81f88c:	dec00104 	addi	sp,sp,4
  81f890:	f800283a 	ret

0081f894 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  81f894:	defff404 	addi	sp,sp,-48
  81f898:	dfc00b15 	stw	ra,44(sp)
  81f89c:	df000a15 	stw	fp,40(sp)
  81f8a0:	df000a04 	addi	fp,sp,40
  81f8a4:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81f8a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  81f8ac:	e0bffe03 	ldbu	r2,-8(fp)
  81f8b0:	10800518 	cmpnei	r2,r2,20
  81f8b4:	1000031e 	bne	r2,zero,81f8c4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  81f8b8:	008011c4 	movi	r2,71
  81f8bc:	e0bfff15 	stw	r2,-4(fp)
  81f8c0:	00007906 	br	81faa8 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81f8c4:	e0bffe03 	ldbu	r2,-8(fp)
  81f8c8:	10800530 	cmpltui	r2,r2,20
  81f8cc:	1000061e 	bne	r2,zero,81f8e8 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  81f8d0:	e0bffe03 	ldbu	r2,-8(fp)
  81f8d4:	10803fe0 	cmpeqi	r2,r2,255
  81f8d8:	1000031e 	bne	r2,zero,81f8e8 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  81f8dc:	00800a84 	movi	r2,42
  81f8e0:	e0bfff15 	stw	r2,-4(fp)
  81f8e4:	00007006 	br	81faa8 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f8e8:	0005303a 	rdctl	r2,status
  81f8ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f8f0:	e0fff917 	ldw	r3,-28(fp)
  81f8f4:	00bfff84 	movi	r2,-2
  81f8f8:	1884703a 	and	r2,r3,r2
  81f8fc:	1001703a 	wrctl	status,r2
  
  return context;
  81f900:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  81f904:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  81f908:	e0bffe03 	ldbu	r2,-8(fp)
  81f90c:	10803fd8 	cmpnei	r2,r2,255
  81f910:	1000081e 	bne	r2,zero,81f934 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  81f914:	00802174 	movhi	r2,133
  81f918:	1082fa04 	addi	r2,r2,3048
  81f91c:	10800017 	ldw	r2,0(r2)
  81f920:	10800c83 	ldbu	r2,50(r2)
  81f924:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  81f928:	00800044 	movi	r2,1
  81f92c:	e0bffd05 	stb	r2,-12(fp)
  81f930:	00000b06 	br	81f960 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  81f934:	00802174 	movhi	r2,133
  81f938:	1082fa04 	addi	r2,r2,3048
  81f93c:	10800017 	ldw	r2,0(r2)
  81f940:	10800c83 	ldbu	r2,50(r2)
  81f944:	10c03fcc 	andi	r3,r2,255
  81f948:	e0bffe03 	ldbu	r2,-8(fp)
  81f94c:	1880031e 	bne	r3,r2,81f95c <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  81f950:	00800044 	movi	r2,1
  81f954:	e0bffd05 	stb	r2,-12(fp)
  81f958:	00000106 	br	81f960 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  81f95c:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81f960:	e0bffe03 	ldbu	r2,-8(fp)
  81f964:	00c03934 	movhi	r3,228
  81f968:	18e6c204 	addi	r3,r3,-25848
  81f96c:	1085883a 	add	r2,r2,r2
  81f970:	1085883a 	add	r2,r2,r2
  81f974:	10c5883a 	add	r2,r2,r3
  81f978:	10800017 	ldw	r2,0(r2)
  81f97c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  81f980:	e0bffc17 	ldw	r2,-16(fp)
  81f984:	1004c03a 	cmpne	r2,r2,zero
  81f988:	1000071e 	bne	r2,zero,81f9a8 <OSTaskSuspend+0x114>
  81f98c:	e0bffa17 	ldw	r2,-24(fp)
  81f990:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f994:	e0bff817 	ldw	r2,-32(fp)
  81f998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  81f99c:	00801204 	movi	r2,72
  81f9a0:	e0bfff15 	stw	r2,-4(fp)
  81f9a4:	00004006 	br	81faa8 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  81f9a8:	e0bffc17 	ldw	r2,-16(fp)
  81f9ac:	10800058 	cmpnei	r2,r2,1
  81f9b0:	1000071e 	bne	r2,zero,81f9d0 <OSTaskSuspend+0x13c>
  81f9b4:	e0bffa17 	ldw	r2,-24(fp)
  81f9b8:	e0bff715 	stw	r2,-36(fp)
  81f9bc:	e0bff717 	ldw	r2,-36(fp)
  81f9c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81f9c4:	008010c4 	movi	r2,67
  81f9c8:	e0bfff15 	stw	r2,-4(fp)
  81f9cc:	00003606 	br	81faa8 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  81f9d0:	e0bffc17 	ldw	r2,-16(fp)
  81f9d4:	10800d03 	ldbu	r2,52(r2)
  81f9d8:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  81f9dc:	e13ffb03 	ldbu	r4,-20(fp)
  81f9e0:	e0fffb03 	ldbu	r3,-20(fp)
  81f9e4:	00802174 	movhi	r2,133
  81f9e8:	1082f744 	addi	r2,r2,3037
  81f9ec:	10c5883a 	add	r2,r2,r3
  81f9f0:	10800003 	ldbu	r2,0(r2)
  81f9f4:	1007883a 	mov	r3,r2
  81f9f8:	e0bffc17 	ldw	r2,-16(fp)
  81f9fc:	10800d43 	ldbu	r2,53(r2)
  81fa00:	0084303a 	nor	r2,zero,r2
  81fa04:	1884703a 	and	r2,r3,r2
  81fa08:	1007883a 	mov	r3,r2
  81fa0c:	00802174 	movhi	r2,133
  81fa10:	1082f744 	addi	r2,r2,3037
  81fa14:	1105883a 	add	r2,r2,r4
  81fa18:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81fa1c:	e0fffb03 	ldbu	r3,-20(fp)
  81fa20:	00802174 	movhi	r2,133
  81fa24:	1082f744 	addi	r2,r2,3037
  81fa28:	10c5883a 	add	r2,r2,r3
  81fa2c:	10800003 	ldbu	r2,0(r2)
  81fa30:	10803fcc 	andi	r2,r2,255
  81fa34:	1004c03a 	cmpne	r2,r2,zero
  81fa38:	10000c1e 	bne	r2,zero,81fa6c <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  81fa3c:	e0bffc17 	ldw	r2,-16(fp)
  81fa40:	10800d83 	ldbu	r2,54(r2)
  81fa44:	0084303a 	nor	r2,zero,r2
  81fa48:	1007883a 	mov	r3,r2
  81fa4c:	00802174 	movhi	r2,133
  81fa50:	1082f704 	addi	r2,r2,3036
  81fa54:	10800003 	ldbu	r2,0(r2)
  81fa58:	1884703a 	and	r2,r3,r2
  81fa5c:	1007883a 	mov	r3,r2
  81fa60:	00802174 	movhi	r2,133
  81fa64:	1082f704 	addi	r2,r2,3036
  81fa68:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  81fa6c:	e0bffc17 	ldw	r2,-16(fp)
  81fa70:	10800c03 	ldbu	r2,48(r2)
  81fa74:	10800214 	ori	r2,r2,8
  81fa78:	1007883a 	mov	r3,r2
  81fa7c:	e0bffc17 	ldw	r2,-16(fp)
  81fa80:	10c00c05 	stb	r3,48(r2)
  81fa84:	e0bffa17 	ldw	r2,-24(fp)
  81fa88:	e0bff615 	stw	r2,-40(fp)
  81fa8c:	e0bff617 	ldw	r2,-40(fp)
  81fa90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  81fa94:	e0bffd03 	ldbu	r2,-12(fp)
  81fa98:	10800058 	cmpnei	r2,r2,1
  81fa9c:	1000011e 	bne	r2,zero,81faa4 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  81faa0:	0818d000 	call	818d00 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81faa4:	e03fff15 	stw	zero,-4(fp)
  81faa8:	e0bfff17 	ldw	r2,-4(fp)
}
  81faac:	e037883a 	mov	sp,fp
  81fab0:	dfc00117 	ldw	ra,4(sp)
  81fab4:	df000017 	ldw	fp,0(sp)
  81fab8:	dec00204 	addi	sp,sp,8
  81fabc:	f800283a 	ret

0081fac0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  81fac0:	defff504 	addi	sp,sp,-44
  81fac4:	dfc00a15 	stw	ra,40(sp)
  81fac8:	df000915 	stw	fp,36(sp)
  81facc:	df000904 	addi	fp,sp,36
  81fad0:	e17ffe15 	stw	r5,-8(fp)
  81fad4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81fad8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  81fadc:	e0bffd03 	ldbu	r2,-12(fp)
  81fae0:	10800570 	cmpltui	r2,r2,21
  81fae4:	1000061e 	bne	r2,zero,81fb00 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  81fae8:	e0bffd03 	ldbu	r2,-12(fp)
  81faec:	10803fe0 	cmpeqi	r2,r2,255
  81faf0:	1000031e 	bne	r2,zero,81fb00 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  81faf4:	00800a84 	movi	r2,42
  81faf8:	e0bfff15 	stw	r2,-4(fp)
  81fafc:	00003b06 	br	81fbec <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  81fb00:	e0bffe17 	ldw	r2,-8(fp)
  81fb04:	1004c03a 	cmpne	r2,r2,zero
  81fb08:	1000031e 	bne	r2,zero,81fb18 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  81fb0c:	00800244 	movi	r2,9
  81fb10:	e0bfff15 	stw	r2,-4(fp)
  81fb14:	00003506 	br	81fbec <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81fb18:	0005303a 	rdctl	r2,status
  81fb1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81fb20:	e0fffa17 	ldw	r3,-24(fp)
  81fb24:	00bfff84 	movi	r2,-2
  81fb28:	1884703a 	and	r2,r3,r2
  81fb2c:	1001703a 	wrctl	status,r2
  
  return context;
  81fb30:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81fb34:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  81fb38:	e0bffd03 	ldbu	r2,-12(fp)
  81fb3c:	10803fd8 	cmpnei	r2,r2,255
  81fb40:	1000051e 	bne	r2,zero,81fb58 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  81fb44:	00802174 	movhi	r2,133
  81fb48:	1082fa04 	addi	r2,r2,3048
  81fb4c:	10800017 	ldw	r2,0(r2)
  81fb50:	10800c83 	ldbu	r2,50(r2)
  81fb54:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81fb58:	e0bffd03 	ldbu	r2,-12(fp)
  81fb5c:	00c03934 	movhi	r3,228
  81fb60:	18e6c204 	addi	r3,r3,-25848
  81fb64:	1085883a 	add	r2,r2,r2
  81fb68:	1085883a 	add	r2,r2,r2
  81fb6c:	10c5883a 	add	r2,r2,r3
  81fb70:	10800017 	ldw	r2,0(r2)
  81fb74:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  81fb78:	e0bffc17 	ldw	r2,-16(fp)
  81fb7c:	1004c03a 	cmpne	r2,r2,zero
  81fb80:	1000071e 	bne	r2,zero,81fba0 <OSTaskQuery+0xe0>
  81fb84:	e0bffb17 	ldw	r2,-20(fp)
  81fb88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fb8c:	e0bff917 	ldw	r2,-28(fp)
  81fb90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  81fb94:	00800a44 	movi	r2,41
  81fb98:	e0bfff15 	stw	r2,-4(fp)
  81fb9c:	00001306 	br	81fbec <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  81fba0:	e0bffc17 	ldw	r2,-16(fp)
  81fba4:	10800058 	cmpnei	r2,r2,1
  81fba8:	1000071e 	bne	r2,zero,81fbc8 <OSTaskQuery+0x108>
  81fbac:	e0bffb17 	ldw	r2,-20(fp)
  81fbb0:	e0bff815 	stw	r2,-32(fp)
  81fbb4:	e0bff817 	ldw	r2,-32(fp)
  81fbb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81fbbc:	008010c4 	movi	r2,67
  81fbc0:	e0bfff15 	stw	r2,-4(fp)
  81fbc4:	00000906 	br	81fbec <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  81fbc8:	e13ffe17 	ldw	r4,-8(fp)
  81fbcc:	e17ffc17 	ldw	r5,-16(fp)
  81fbd0:	01801b04 	movi	r6,108
  81fbd4:	0818c940 	call	818c94 <OS_MemCopy>
  81fbd8:	e0bffb17 	ldw	r2,-20(fp)
  81fbdc:	e0bff715 	stw	r2,-36(fp)
  81fbe0:	e0bff717 	ldw	r2,-36(fp)
  81fbe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81fbe8:	e03fff15 	stw	zero,-4(fp)
  81fbec:	e0bfff17 	ldw	r2,-4(fp)
}
  81fbf0:	e037883a 	mov	sp,fp
  81fbf4:	dfc00117 	ldw	ra,4(sp)
  81fbf8:	df000017 	ldw	fp,0(sp)
  81fbfc:	dec00204 	addi	sp,sp,8
  81fc00:	f800283a 	ret

0081fc04 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  81fc04:	defffc04 	addi	sp,sp,-16
  81fc08:	df000315 	stw	fp,12(sp)
  81fc0c:	df000304 	addi	fp,sp,12
  81fc10:	e13ffd15 	stw	r4,-12(fp)
  81fc14:	e17ffe15 	stw	r5,-8(fp)
  81fc18:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  81fc1c:	e0bfff0b 	ldhu	r2,-4(fp)
  81fc20:	1080004c 	andi	r2,r2,1
  81fc24:	10803fcc 	andi	r2,r2,255
  81fc28:	1005003a 	cmpeq	r2,r2,zero
  81fc2c:	1000101e 	bne	r2,zero,81fc70 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  81fc30:	e0bfff0b 	ldhu	r2,-4(fp)
  81fc34:	1080008c 	andi	r2,r2,2
  81fc38:	1005003a 	cmpeq	r2,r2,zero
  81fc3c:	10000c1e 	bne	r2,zero,81fc70 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81fc40:	00000806 	br	81fc64 <OS_TaskStkClr+0x60>
                size--;
  81fc44:	e0bffe17 	ldw	r2,-8(fp)
  81fc48:	10bfffc4 	addi	r2,r2,-1
  81fc4c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  81fc50:	e0bffd17 	ldw	r2,-12(fp)
  81fc54:	10000015 	stw	zero,0(r2)
  81fc58:	e0bffd17 	ldw	r2,-12(fp)
  81fc5c:	10800104 	addi	r2,r2,4
  81fc60:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81fc64:	e0bffe17 	ldw	r2,-8(fp)
  81fc68:	1004c03a 	cmpne	r2,r2,zero
  81fc6c:	103ff51e 	bne	r2,zero,81fc44 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  81fc70:	e037883a 	mov	sp,fp
  81fc74:	df000017 	ldw	fp,0(sp)
  81fc78:	dec00104 	addi	sp,sp,4
  81fc7c:	f800283a 	ret

0081fc80 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  81fc80:	defff904 	addi	sp,sp,-28
  81fc84:	dfc00615 	stw	ra,24(sp)
  81fc88:	df000515 	stw	fp,20(sp)
  81fc8c:	df000504 	addi	fp,sp,20
  81fc90:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81fc94:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81fc98:	00802174 	movhi	r2,133
  81fc9c:	1082f904 	addi	r2,r2,3044
  81fca0:	10800003 	ldbu	r2,0(r2)
  81fca4:	10803fcc 	andi	r2,r2,255
  81fca8:	1004c03a 	cmpne	r2,r2,zero
  81fcac:	1000421e 	bne	r2,zero,81fdb8 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  81fcb0:	e0bfff0b 	ldhu	r2,-4(fp)
  81fcb4:	1005003a 	cmpeq	r2,r2,zero
  81fcb8:	10003f1e 	bne	r2,zero,81fdb8 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81fcbc:	0005303a 	rdctl	r2,status
  81fcc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81fcc4:	e0fffc17 	ldw	r3,-16(fp)
  81fcc8:	00bfff84 	movi	r2,-2
  81fccc:	1884703a 	and	r2,r3,r2
  81fcd0:	1001703a 	wrctl	status,r2
  
  return context;
  81fcd4:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  81fcd8:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  81fcdc:	00802174 	movhi	r2,133
  81fce0:	1082fa04 	addi	r2,r2,3048
  81fce4:	10800017 	ldw	r2,0(r2)
  81fce8:	10800d03 	ldbu	r2,52(r2)
  81fcec:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81fcf0:	e13ffe03 	ldbu	r4,-8(fp)
  81fcf4:	e0fffe03 	ldbu	r3,-8(fp)
  81fcf8:	00802174 	movhi	r2,133
  81fcfc:	1082f744 	addi	r2,r2,3037
  81fd00:	10c5883a 	add	r2,r2,r3
  81fd04:	10800003 	ldbu	r2,0(r2)
  81fd08:	1007883a 	mov	r3,r2
  81fd0c:	00802174 	movhi	r2,133
  81fd10:	1082fa04 	addi	r2,r2,3048
  81fd14:	10800017 	ldw	r2,0(r2)
  81fd18:	10800d43 	ldbu	r2,53(r2)
  81fd1c:	0084303a 	nor	r2,zero,r2
  81fd20:	1884703a 	and	r2,r3,r2
  81fd24:	1007883a 	mov	r3,r2
  81fd28:	00802174 	movhi	r2,133
  81fd2c:	1082f744 	addi	r2,r2,3037
  81fd30:	1105883a 	add	r2,r2,r4
  81fd34:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  81fd38:	e0fffe03 	ldbu	r3,-8(fp)
  81fd3c:	00802174 	movhi	r2,133
  81fd40:	1082f744 	addi	r2,r2,3037
  81fd44:	10c5883a 	add	r2,r2,r3
  81fd48:	10800003 	ldbu	r2,0(r2)
  81fd4c:	10803fcc 	andi	r2,r2,255
  81fd50:	1004c03a 	cmpne	r2,r2,zero
  81fd54:	10000e1e 	bne	r2,zero,81fd90 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81fd58:	00802174 	movhi	r2,133
  81fd5c:	1082fa04 	addi	r2,r2,3048
  81fd60:	10800017 	ldw	r2,0(r2)
  81fd64:	10800d83 	ldbu	r2,54(r2)
  81fd68:	0084303a 	nor	r2,zero,r2
  81fd6c:	1007883a 	mov	r3,r2
  81fd70:	00802174 	movhi	r2,133
  81fd74:	1082f704 	addi	r2,r2,3036
  81fd78:	10800003 	ldbu	r2,0(r2)
  81fd7c:	1884703a 	and	r2,r3,r2
  81fd80:	1007883a 	mov	r3,r2
  81fd84:	00802174 	movhi	r2,133
  81fd88:	1082f704 	addi	r2,r2,3036
  81fd8c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  81fd90:	00802174 	movhi	r2,133
  81fd94:	1082fa04 	addi	r2,r2,3048
  81fd98:	10c00017 	ldw	r3,0(r2)
  81fd9c:	e0bfff0b 	ldhu	r2,-4(fp)
  81fda0:	18800b8d 	sth	r2,46(r3)
  81fda4:	e0bffd17 	ldw	r2,-12(fp)
  81fda8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fdac:	e0bffb17 	ldw	r2,-20(fp)
  81fdb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  81fdb4:	0818d000 	call	818d00 <OS_Sched>
    }
}
  81fdb8:	e037883a 	mov	sp,fp
  81fdbc:	dfc00117 	ldw	ra,4(sp)
  81fdc0:	df000017 	ldw	fp,0(sp)
  81fdc4:	dec00204 	addi	sp,sp,8
  81fdc8:	f800283a 	ret

0081fdcc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  81fdcc:	defff604 	addi	sp,sp,-40
  81fdd0:	dfc00915 	stw	ra,36(sp)
  81fdd4:	df000815 	stw	fp,32(sp)
  81fdd8:	dc000715 	stw	r16,28(sp)
  81fddc:	df000704 	addi	fp,sp,28
  81fde0:	e13ffb05 	stb	r4,-20(fp)
  81fde4:	e17ffc05 	stb	r5,-16(fp)
  81fde8:	e1bffd05 	stb	r6,-12(fp)
  81fdec:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81fdf0:	00802174 	movhi	r2,133
  81fdf4:	1082f904 	addi	r2,r2,3044
  81fdf8:	10800003 	ldbu	r2,0(r2)
  81fdfc:	10803fcc 	andi	r2,r2,255
  81fe00:	1005003a 	cmpeq	r2,r2,zero
  81fe04:	1000031e 	bne	r2,zero,81fe14 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  81fe08:	00801544 	movi	r2,85
  81fe0c:	e0bfff15 	stw	r2,-4(fp)
  81fe10:	00004406 	br	81ff24 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  81fe14:	e0bffb03 	ldbu	r2,-20(fp)
  81fe18:	1004c03a 	cmpne	r2,r2,zero
  81fe1c:	10000c1e 	bne	r2,zero,81fe50 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  81fe20:	e0bffc03 	ldbu	r2,-16(fp)
  81fe24:	1004c03a 	cmpne	r2,r2,zero
  81fe28:	1000091e 	bne	r2,zero,81fe50 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  81fe2c:	e0bffd03 	ldbu	r2,-12(fp)
  81fe30:	1004c03a 	cmpne	r2,r2,zero
  81fe34:	1000061e 	bne	r2,zero,81fe50 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  81fe38:	e0bffe0b 	ldhu	r2,-8(fp)
  81fe3c:	1004c03a 	cmpne	r2,r2,zero
  81fe40:	1000031e 	bne	r2,zero,81fe50 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  81fe44:	00801504 	movi	r2,84
  81fe48:	e0bfff15 	stw	r2,-4(fp)
  81fe4c:	00003506 	br	81ff24 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  81fe50:	e0bffc03 	ldbu	r2,-16(fp)
  81fe54:	10800f30 	cmpltui	r2,r2,60
  81fe58:	1000031e 	bne	r2,zero,81fe68 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  81fe5c:	00801444 	movi	r2,81
  81fe60:	e0bfff15 	stw	r2,-4(fp)
  81fe64:	00002f06 	br	81ff24 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  81fe68:	e0bffd03 	ldbu	r2,-12(fp)
  81fe6c:	10800f30 	cmpltui	r2,r2,60
  81fe70:	1000031e 	bne	r2,zero,81fe80 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  81fe74:	00801484 	movi	r2,82
  81fe78:	e0bfff15 	stw	r2,-4(fp)
  81fe7c:	00002906 	br	81ff24 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  81fe80:	e0bffe0b 	ldhu	r2,-8(fp)
  81fe84:	1080fa30 	cmpltui	r2,r2,1000
  81fe88:	1000031e 	bne	r2,zero,81fe98 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  81fe8c:	008014c4 	movi	r2,83
  81fe90:	e0bfff15 	stw	r2,-4(fp)
  81fe94:	00002306 	br	81ff24 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  81fe98:	e0bffb03 	ldbu	r2,-20(fp)
  81fe9c:	10c38424 	muli	r3,r2,3600
  81fea0:	e0bffc03 	ldbu	r2,-16(fp)
  81fea4:	10800f24 	muli	r2,r2,60
  81fea8:	1887883a 	add	r3,r3,r2
  81feac:	e0bffd03 	ldbu	r2,-12(fp)
  81feb0:	1885883a 	add	r2,r3,r2
  81feb4:	1400fa24 	muli	r16,r2,1000
  81feb8:	e0bffe0b 	ldhu	r2,-8(fp)
  81febc:	1100fa24 	muli	r4,r2,1000
  81fec0:	0140fa04 	movi	r5,1000
  81fec4:	08053b80 	call	8053b8 <__udivsi3>
  81fec8:	8085883a 	add	r2,r16,r2
  81fecc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  81fed0:	e0bffa17 	ldw	r2,-24(fp)
  81fed4:	1004d43a 	srli	r2,r2,16
  81fed8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  81fedc:	e0bffa17 	ldw	r2,-24(fp)
  81fee0:	10bfffcc 	andi	r2,r2,65535
  81fee4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  81fee8:	e0bffa17 	ldw	r2,-24(fp)
  81feec:	113fffcc 	andi	r4,r2,65535
  81fef0:	081fc800 	call	81fc80 <OSTimeDly>
    while (loops > 0) {
  81fef4:	00000706 	br	81ff14 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  81fef8:	01200014 	movui	r4,32768
  81fefc:	081fc800 	call	81fc80 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  81ff00:	01200014 	movui	r4,32768
  81ff04:	081fc800 	call	81fc80 <OSTimeDly>
        loops--;
  81ff08:	e0bff90b 	ldhu	r2,-28(fp)
  81ff0c:	10bfffc4 	addi	r2,r2,-1
  81ff10:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  81ff14:	e0bff90b 	ldhu	r2,-28(fp)
  81ff18:	1004c03a 	cmpne	r2,r2,zero
  81ff1c:	103ff61e 	bne	r2,zero,81fef8 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  81ff20:	e03fff15 	stw	zero,-4(fp)
  81ff24:	e0bfff17 	ldw	r2,-4(fp)
}
  81ff28:	e037883a 	mov	sp,fp
  81ff2c:	dfc00217 	ldw	ra,8(sp)
  81ff30:	df000117 	ldw	fp,4(sp)
  81ff34:	dc000017 	ldw	r16,0(sp)
  81ff38:	dec00304 	addi	sp,sp,12
  81ff3c:	f800283a 	ret

0081ff40 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  81ff40:	defff404 	addi	sp,sp,-48
  81ff44:	dfc00b15 	stw	ra,44(sp)
  81ff48:	df000a15 	stw	fp,40(sp)
  81ff4c:	df000a04 	addi	fp,sp,40
  81ff50:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81ff54:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  81ff58:	e0bffe03 	ldbu	r2,-8(fp)
  81ff5c:	10800530 	cmpltui	r2,r2,20
  81ff60:	1000031e 	bne	r2,zero,81ff70 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81ff64:	00800a84 	movi	r2,42
  81ff68:	e0bfff15 	stw	r2,-4(fp)
  81ff6c:	00007206 	br	820138 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ff70:	0005303a 	rdctl	r2,status
  81ff74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ff78:	e0fffb17 	ldw	r3,-20(fp)
  81ff7c:	00bfff84 	movi	r2,-2
  81ff80:	1884703a 	and	r2,r3,r2
  81ff84:	1001703a 	wrctl	status,r2
  
  return context;
  81ff88:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81ff8c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  81ff90:	e0bffe03 	ldbu	r2,-8(fp)
  81ff94:	00c03934 	movhi	r3,228
  81ff98:	18e6c204 	addi	r3,r3,-25848
  81ff9c:	1085883a 	add	r2,r2,r2
  81ffa0:	1085883a 	add	r2,r2,r2
  81ffa4:	10c5883a 	add	r2,r2,r3
  81ffa8:	10800017 	ldw	r2,0(r2)
  81ffac:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  81ffb0:	e0bffd17 	ldw	r2,-12(fp)
  81ffb4:	1004c03a 	cmpne	r2,r2,zero
  81ffb8:	1000071e 	bne	r2,zero,81ffd8 <OSTimeDlyResume+0x98>
  81ffbc:	e0bffc17 	ldw	r2,-16(fp)
  81ffc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ffc4:	e0bffa17 	ldw	r2,-24(fp)
  81ffc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81ffcc:	008010c4 	movi	r2,67
  81ffd0:	e0bfff15 	stw	r2,-4(fp)
  81ffd4:	00005806 	br	820138 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81ffd8:	e0bffd17 	ldw	r2,-12(fp)
  81ffdc:	10800058 	cmpnei	r2,r2,1
  81ffe0:	1000071e 	bne	r2,zero,820000 <OSTimeDlyResume+0xc0>
  81ffe4:	e0bffc17 	ldw	r2,-16(fp)
  81ffe8:	e0bff915 	stw	r2,-28(fp)
  81ffec:	e0bff917 	ldw	r2,-28(fp)
  81fff0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81fff4:	008010c4 	movi	r2,67
  81fff8:	e0bfff15 	stw	r2,-4(fp)
  81fffc:	00004e06 	br	820138 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  820000:	e0bffd17 	ldw	r2,-12(fp)
  820004:	10800b8b 	ldhu	r2,46(r2)
  820008:	10bfffcc 	andi	r2,r2,65535
  82000c:	1004c03a 	cmpne	r2,r2,zero
  820010:	1000071e 	bne	r2,zero,820030 <OSTimeDlyResume+0xf0>
  820014:	e0bffc17 	ldw	r2,-16(fp)
  820018:	e0bff815 	stw	r2,-32(fp)
  82001c:	e0bff817 	ldw	r2,-32(fp)
  820020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  820024:	00801404 	movi	r2,80
  820028:	e0bfff15 	stw	r2,-4(fp)
  82002c:	00004206 	br	820138 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  820030:	e0bffd17 	ldw	r2,-12(fp)
  820034:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  820038:	e0bffd17 	ldw	r2,-12(fp)
  82003c:	10800c03 	ldbu	r2,48(r2)
  820040:	10803fcc 	andi	r2,r2,255
  820044:	10800dcc 	andi	r2,r2,55
  820048:	1005003a 	cmpeq	r2,r2,zero
  82004c:	10000b1e 	bne	r2,zero,82007c <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  820050:	e0bffd17 	ldw	r2,-12(fp)
  820054:	10c00c03 	ldbu	r3,48(r2)
  820058:	00bff204 	movi	r2,-56
  82005c:	1884703a 	and	r2,r3,r2
  820060:	1007883a 	mov	r3,r2
  820064:	e0bffd17 	ldw	r2,-12(fp)
  820068:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  82006c:	e0fffd17 	ldw	r3,-12(fp)
  820070:	00800044 	movi	r2,1
  820074:	18800c45 	stb	r2,49(r3)
  820078:	00000206 	br	820084 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  82007c:	e0bffd17 	ldw	r2,-12(fp)
  820080:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  820084:	e0bffd17 	ldw	r2,-12(fp)
  820088:	10800c03 	ldbu	r2,48(r2)
  82008c:	10803fcc 	andi	r2,r2,255
  820090:	1080020c 	andi	r2,r2,8
  820094:	1004c03a 	cmpne	r2,r2,zero
  820098:	1000221e 	bne	r2,zero,820124 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  82009c:	e0bffd17 	ldw	r2,-12(fp)
  8200a0:	10c00d83 	ldbu	r3,54(r2)
  8200a4:	00802174 	movhi	r2,133
  8200a8:	1082f704 	addi	r2,r2,3036
  8200ac:	10800003 	ldbu	r2,0(r2)
  8200b0:	1884b03a 	or	r2,r3,r2
  8200b4:	1007883a 	mov	r3,r2
  8200b8:	00802174 	movhi	r2,133
  8200bc:	1082f704 	addi	r2,r2,3036
  8200c0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8200c4:	e0bffd17 	ldw	r2,-12(fp)
  8200c8:	10800d03 	ldbu	r2,52(r2)
  8200cc:	11003fcc 	andi	r4,r2,255
  8200d0:	e0bffd17 	ldw	r2,-12(fp)
  8200d4:	10800d03 	ldbu	r2,52(r2)
  8200d8:	10c03fcc 	andi	r3,r2,255
  8200dc:	00802174 	movhi	r2,133
  8200e0:	1082f744 	addi	r2,r2,3037
  8200e4:	10c5883a 	add	r2,r2,r3
  8200e8:	10c00003 	ldbu	r3,0(r2)
  8200ec:	e0bffd17 	ldw	r2,-12(fp)
  8200f0:	10800d43 	ldbu	r2,53(r2)
  8200f4:	1884b03a 	or	r2,r3,r2
  8200f8:	1007883a 	mov	r3,r2
  8200fc:	00802174 	movhi	r2,133
  820100:	1082f744 	addi	r2,r2,3037
  820104:	1105883a 	add	r2,r2,r4
  820108:	10c00005 	stb	r3,0(r2)
  82010c:	e0bffc17 	ldw	r2,-16(fp)
  820110:	e0bff715 	stw	r2,-36(fp)
  820114:	e0bff717 	ldw	r2,-36(fp)
  820118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  82011c:	0818d000 	call	818d00 <OS_Sched>
  820120:	00000406 	br	820134 <OSTimeDlyResume+0x1f4>
  820124:	e0bffc17 	ldw	r2,-16(fp)
  820128:	e0bff615 	stw	r2,-40(fp)
  82012c:	e0bff617 	ldw	r2,-40(fp)
  820130:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  820134:	e03fff15 	stw	zero,-4(fp)
  820138:	e0bfff17 	ldw	r2,-4(fp)
}
  82013c:	e037883a 	mov	sp,fp
  820140:	dfc00117 	ldw	ra,4(sp)
  820144:	df000017 	ldw	fp,0(sp)
  820148:	dec00204 	addi	sp,sp,8
  82014c:	f800283a 	ret

00820150 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  820150:	defffb04 	addi	sp,sp,-20
  820154:	df000415 	stw	fp,16(sp)
  820158:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  82015c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820160:	0005303a 	rdctl	r2,status
  820164:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820168:	e0fffd17 	ldw	r3,-12(fp)
  82016c:	00bfff84 	movi	r2,-2
  820170:	1884703a 	and	r2,r3,r2
  820174:	1001703a 	wrctl	status,r2
  
  return context;
  820178:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  82017c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  820180:	00802174 	movhi	r2,133
  820184:	1082fb04 	addi	r2,r2,3052
  820188:	10800017 	ldw	r2,0(r2)
  82018c:	e0bfff15 	stw	r2,-4(fp)
  820190:	e0bffe17 	ldw	r2,-8(fp)
  820194:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820198:	e0bffc17 	ldw	r2,-16(fp)
  82019c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  8201a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8201a4:	e037883a 	mov	sp,fp
  8201a8:	df000017 	ldw	fp,0(sp)
  8201ac:	dec00104 	addi	sp,sp,4
  8201b0:	f800283a 	ret

008201b4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  8201b4:	defffb04 	addi	sp,sp,-20
  8201b8:	df000415 	stw	fp,16(sp)
  8201bc:	df000404 	addi	fp,sp,16
  8201c0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8201c4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8201c8:	0005303a 	rdctl	r2,status
  8201cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8201d0:	e0fffd17 	ldw	r3,-12(fp)
  8201d4:	00bfff84 	movi	r2,-2
  8201d8:	1884703a 	and	r2,r3,r2
  8201dc:	1001703a 	wrctl	status,r2
  
  return context;
  8201e0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8201e4:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  8201e8:	00c02174 	movhi	r3,133
  8201ec:	18c2fb04 	addi	r3,r3,3052
  8201f0:	e0bfff17 	ldw	r2,-4(fp)
  8201f4:	18800015 	stw	r2,0(r3)
  8201f8:	e0bffe17 	ldw	r2,-8(fp)
  8201fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820200:	e0bffc17 	ldw	r2,-16(fp)
  820204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  820208:	e037883a 	mov	sp,fp
  82020c:	df000017 	ldw	fp,0(sp)
  820210:	dec00104 	addi	sp,sp,4
  820214:	f800283a 	ret

00820218 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  820218:	defffd04 	addi	sp,sp,-12
  82021c:	dfc00215 	stw	ra,8(sp)
  820220:	df000115 	stw	fp,4(sp)
  820224:	df000104 	addi	fp,sp,4
  820228:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  82022c:	083ac780 	call	83ac78 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  820230:	00800044 	movi	r2,1
  820234:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  820238:	e037883a 	mov	sp,fp
  82023c:	dfc00117 	ldw	ra,4(sp)
  820240:	df000017 	ldw	fp,0(sp)
  820244:	dec00204 	addi	sp,sp,8
  820248:	f800283a 	ret

0082024c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  82024c:	defffd04 	addi	sp,sp,-12
  820250:	dfc00215 	stw	ra,8(sp)
  820254:	df000115 	stw	fp,4(sp)
  820258:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  82025c:	01006274 	movhi	r4,393
  820260:	21250004 	addi	r4,r4,-27648
  820264:	000b883a 	mov	r5,zero
  820268:	000d883a 	mov	r6,zero
  82026c:	01c0fa04 	movi	r7,1000
  820270:	08212e80 	call	8212e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  820274:	01002174 	movhi	r4,133
  820278:	213d3c04 	addi	r4,r4,-2832
  82027c:	000b883a 	mov	r5,zero
  820280:	01800044 	movi	r6,1
  820284:	08206640 	call	820664 <altera_avalon_jtag_uart_init>
  820288:	01002174 	movhi	r4,133
  82028c:	213d3204 	addi	r4,r4,-2872
  820290:	08204e40 	call	8204e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_RO_ZIPFS_INIT ( ALTERA_RO_ZIPFS, altera_ro_zipfs);
  820294:	01002174 	movhi	r4,133
  820298:	21014d04 	addi	r4,r4,1332
  82029c:	0821e900 	call	821e90 <alt_ro_zipfs_check_valid>
  8202a0:	1005003a 	cmpeq	r2,r2,zero
  8202a4:	1000031e 	bne	r2,zero,8202b4 <alt_sys_init+0x68>
  8202a8:	01002174 	movhi	r4,133
  8202ac:	21014d04 	addi	r4,r4,1332
  8202b0:	083a3740 	call	83a374 <alt_fs_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  8202b4:	01002174 	movhi	r4,133
  8202b8:	21015904 	addi	r4,r4,1380
  8202bc:	0821f980 	call	821f98 <alt_up_character_lcd_init>
  8202c0:	01002174 	movhi	r4,133
  8202c4:	21015904 	addi	r4,r4,1380
  8202c8:	08204e40 	call	8204e4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  8202cc:	00802174 	movhi	r2,133
  8202d0:	10816404 	addi	r2,r2,1424
  8202d4:	10800a17 	ldw	r2,40(r2)
  8202d8:	10800017 	ldw	r2,0(r2)
  8202dc:	1007883a 	mov	r3,r2
  8202e0:	00802174 	movhi	r2,133
  8202e4:	10816404 	addi	r2,r2,1424
  8202e8:	10c00b15 	stw	r3,44(r2)
  8202ec:	00802174 	movhi	r2,133
  8202f0:	10816404 	addi	r2,r2,1424
  8202f4:	10800a17 	ldw	r2,40(r2)
  8202f8:	10800104 	addi	r2,r2,4
  8202fc:	10800017 	ldw	r2,0(r2)
  820300:	1007883a 	mov	r3,r2
  820304:	00802174 	movhi	r2,133
  820308:	10816404 	addi	r2,r2,1424
  82030c:	10c00c15 	stw	r3,48(r2)
  820310:	00802174 	movhi	r2,133
  820314:	10816404 	addi	r2,r2,1424
  820318:	10800a17 	ldw	r2,40(r2)
  82031c:	10800204 	addi	r2,r2,8
  820320:	10800017 	ldw	r2,0(r2)
  820324:	10ffffcc 	andi	r3,r2,65535
  820328:	00802174 	movhi	r2,133
  82032c:	10816404 	addi	r2,r2,1424
  820330:	10c00f15 	stw	r3,60(r2)
  820334:	00802174 	movhi	r2,133
  820338:	10816404 	addi	r2,r2,1424
  82033c:	10800a17 	ldw	r2,40(r2)
  820340:	10800204 	addi	r2,r2,8
  820344:	10800017 	ldw	r2,0(r2)
  820348:	1005d43a 	srai	r2,r2,16
  82034c:	10ffffcc 	andi	r3,r2,65535
  820350:	00802174 	movhi	r2,133
  820354:	10816404 	addi	r2,r2,1424
  820358:	10c01015 	stw	r3,64(r2)
  82035c:	00802174 	movhi	r2,133
  820360:	10816404 	addi	r2,r2,1424
  820364:	10800a17 	ldw	r2,40(r2)
  820368:	10800304 	addi	r2,r2,12
  82036c:	10800017 	ldw	r2,0(r2)
  820370:	1005d07a 	srai	r2,r2,1
  820374:	10c0004c 	andi	r3,r2,1
  820378:	00802174 	movhi	r2,133
  82037c:	10816404 	addi	r2,r2,1424
  820380:	10c00d15 	stw	r3,52(r2)
  820384:	00802174 	movhi	r2,133
  820388:	10816404 	addi	r2,r2,1424
  82038c:	10800a17 	ldw	r2,40(r2)
  820390:	10800304 	addi	r2,r2,12
  820394:	10800017 	ldw	r2,0(r2)
  820398:	1005d13a 	srai	r2,r2,4
  82039c:	10c003cc 	andi	r3,r2,15
  8203a0:	00802174 	movhi	r2,133
  8203a4:	10816404 	addi	r2,r2,1424
  8203a8:	10c00e15 	stw	r3,56(r2)
  8203ac:	00802174 	movhi	r2,133
  8203b0:	10816404 	addi	r2,r2,1424
  8203b4:	10800a17 	ldw	r2,40(r2)
  8203b8:	10800304 	addi	r2,r2,12
  8203bc:	10800017 	ldw	r2,0(r2)
  8203c0:	1005d43a 	srai	r2,r2,16
  8203c4:	1007883a 	mov	r3,r2
  8203c8:	00bfffc4 	movi	r2,-1
  8203cc:	1884703a 	and	r2,r3,r2
  8203d0:	e0bfff45 	stb	r2,-3(fp)
  8203d4:	00802174 	movhi	r2,133
  8203d8:	10816404 	addi	r2,r2,1424
  8203dc:	10800a17 	ldw	r2,40(r2)
  8203e0:	10800304 	addi	r2,r2,12
  8203e4:	10800017 	ldw	r2,0(r2)
  8203e8:	1005d63a 	srai	r2,r2,24
  8203ec:	1007883a 	mov	r3,r2
  8203f0:	00bfffc4 	movi	r2,-1
  8203f4:	1884703a 	and	r2,r3,r2
  8203f8:	e0bfff05 	stb	r2,-4(fp)
  8203fc:	00802174 	movhi	r2,133
  820400:	10816404 	addi	r2,r2,1424
  820404:	10800e17 	ldw	r2,56(r2)
  820408:	10800058 	cmpnei	r2,r2,1
  82040c:	1000041e 	bne	r2,zero,820420 <alt_sys_init+0x1d4>
  820410:	00802174 	movhi	r2,133
  820414:	10816404 	addi	r2,r2,1424
  820418:	10001115 	stw	zero,68(r2)
  82041c:	00000e06 	br	820458 <alt_sys_init+0x20c>
  820420:	00802174 	movhi	r2,133
  820424:	10816404 	addi	r2,r2,1424
  820428:	10800e17 	ldw	r2,56(r2)
  82042c:	10800098 	cmpnei	r2,r2,2
  820430:	1000051e 	bne	r2,zero,820448 <alt_sys_init+0x1fc>
  820434:	00c02174 	movhi	r3,133
  820438:	18c16404 	addi	r3,r3,1424
  82043c:	00800044 	movi	r2,1
  820440:	18801115 	stw	r2,68(r3)
  820444:	00000406 	br	820458 <alt_sys_init+0x20c>
  820448:	00c02174 	movhi	r3,133
  82044c:	18c16404 	addi	r3,r3,1424
  820450:	00800084 	movi	r2,2
  820454:	18801115 	stw	r2,68(r3)
  820458:	e0ffff43 	ldbu	r3,-3(fp)
  82045c:	00800804 	movi	r2,32
  820460:	10c7c83a 	sub	r3,r2,r3
  820464:	00bfffc4 	movi	r2,-1
  820468:	10c6d83a 	srl	r3,r2,r3
  82046c:	00802174 	movhi	r2,133
  820470:	10816404 	addi	r2,r2,1424
  820474:	10c01215 	stw	r3,72(r2)
  820478:	e0ffff43 	ldbu	r3,-3(fp)
  82047c:	00802174 	movhi	r2,133
  820480:	10816404 	addi	r2,r2,1424
  820484:	10801117 	ldw	r2,68(r2)
  820488:	1887883a 	add	r3,r3,r2
  82048c:	00802174 	movhi	r2,133
  820490:	10816404 	addi	r2,r2,1424
  820494:	10c01315 	stw	r3,76(r2)
  820498:	e0ffff03 	ldbu	r3,-4(fp)
  82049c:	00800804 	movi	r2,32
  8204a0:	10c7c83a 	sub	r3,r2,r3
  8204a4:	00bfffc4 	movi	r2,-1
  8204a8:	10c6d83a 	srl	r3,r2,r3
  8204ac:	00802174 	movhi	r2,133
  8204b0:	10816404 	addi	r2,r2,1424
  8204b4:	10c01415 	stw	r3,80(r2)
  8204b8:	01002174 	movhi	r4,133
  8204bc:	21016404 	addi	r4,r4,1424
  8204c0:	08204e40 	call	8204e4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  8204c4:	01002174 	movhi	r4,133
  8204c8:	21017904 	addi	r4,r4,1508
  8204cc:	08204e40 	call	8204e4 <alt_dev_reg>
}
  8204d0:	e037883a 	mov	sp,fp
  8204d4:	dfc00117 	ldw	ra,4(sp)
  8204d8:	df000017 	ldw	fp,0(sp)
  8204dc:	dec00204 	addi	sp,sp,8
  8204e0:	f800283a 	ret

008204e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8204e4:	defffd04 	addi	sp,sp,-12
  8204e8:	dfc00215 	stw	ra,8(sp)
  8204ec:	df000115 	stw	fp,4(sp)
  8204f0:	df000104 	addi	fp,sp,4
  8204f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8204f8:	e13fff17 	ldw	r4,-4(fp)
  8204fc:	01402174 	movhi	r5,133
  820500:	2942c204 	addi	r5,r5,2824
  820504:	0839fe40 	call	839fe4 <alt_dev_llist_insert>
}
  820508:	e037883a 	mov	sp,fp
  82050c:	dfc00117 	ldw	ra,4(sp)
  820510:	df000017 	ldw	fp,0(sp)
  820514:	dec00204 	addi	sp,sp,8
  820518:	f800283a 	ret

0082051c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  82051c:	defffa04 	addi	sp,sp,-24
  820520:	dfc00515 	stw	ra,20(sp)
  820524:	df000415 	stw	fp,16(sp)
  820528:	df000404 	addi	fp,sp,16
  82052c:	e13ffd15 	stw	r4,-12(fp)
  820530:	e17ffe15 	stw	r5,-8(fp)
  820534:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  820538:	e0bffd17 	ldw	r2,-12(fp)
  82053c:	10800017 	ldw	r2,0(r2)
  820540:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  820544:	e0bffc17 	ldw	r2,-16(fp)
  820548:	11000a04 	addi	r4,r2,40
  82054c:	e0bffd17 	ldw	r2,-12(fp)
  820550:	11c00217 	ldw	r7,8(r2)
  820554:	e17ffe17 	ldw	r5,-8(fp)
  820558:	e1bfff17 	ldw	r6,-4(fp)
  82055c:	0820cdc0 	call	820cdc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  820560:	e037883a 	mov	sp,fp
  820564:	dfc00117 	ldw	ra,4(sp)
  820568:	df000017 	ldw	fp,0(sp)
  82056c:	dec00204 	addi	sp,sp,8
  820570:	f800283a 	ret

00820574 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  820574:	defffa04 	addi	sp,sp,-24
  820578:	dfc00515 	stw	ra,20(sp)
  82057c:	df000415 	stw	fp,16(sp)
  820580:	df000404 	addi	fp,sp,16
  820584:	e13ffd15 	stw	r4,-12(fp)
  820588:	e17ffe15 	stw	r5,-8(fp)
  82058c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  820590:	e0bffd17 	ldw	r2,-12(fp)
  820594:	10800017 	ldw	r2,0(r2)
  820598:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  82059c:	e0bffc17 	ldw	r2,-16(fp)
  8205a0:	11000a04 	addi	r4,r2,40
  8205a4:	e0bffd17 	ldw	r2,-12(fp)
  8205a8:	11c00217 	ldw	r7,8(r2)
  8205ac:	e17ffe17 	ldw	r5,-8(fp)
  8205b0:	e1bfff17 	ldw	r6,-4(fp)
  8205b4:	0820f9c0 	call	820f9c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8205b8:	e037883a 	mov	sp,fp
  8205bc:	dfc00117 	ldw	ra,4(sp)
  8205c0:	df000017 	ldw	fp,0(sp)
  8205c4:	dec00204 	addi	sp,sp,8
  8205c8:	f800283a 	ret

008205cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8205cc:	defffc04 	addi	sp,sp,-16
  8205d0:	dfc00315 	stw	ra,12(sp)
  8205d4:	df000215 	stw	fp,8(sp)
  8205d8:	df000204 	addi	fp,sp,8
  8205dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8205e0:	e0bfff17 	ldw	r2,-4(fp)
  8205e4:	10800017 	ldw	r2,0(r2)
  8205e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8205ec:	e0bffe17 	ldw	r2,-8(fp)
  8205f0:	11000a04 	addi	r4,r2,40
  8205f4:	e0bfff17 	ldw	r2,-4(fp)
  8205f8:	11400217 	ldw	r5,8(r2)
  8205fc:	0820b740 	call	820b74 <altera_avalon_jtag_uart_close>
}
  820600:	e037883a 	mov	sp,fp
  820604:	dfc00117 	ldw	ra,4(sp)
  820608:	df000017 	ldw	fp,0(sp)
  82060c:	dec00204 	addi	sp,sp,8
  820610:	f800283a 	ret

00820614 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  820614:	defffa04 	addi	sp,sp,-24
  820618:	dfc00515 	stw	ra,20(sp)
  82061c:	df000415 	stw	fp,16(sp)
  820620:	df000404 	addi	fp,sp,16
  820624:	e13ffd15 	stw	r4,-12(fp)
  820628:	e17ffe15 	stw	r5,-8(fp)
  82062c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  820630:	e0bffd17 	ldw	r2,-12(fp)
  820634:	10800017 	ldw	r2,0(r2)
  820638:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  82063c:	e0bffc17 	ldw	r2,-16(fp)
  820640:	11000a04 	addi	r4,r2,40
  820644:	e17ffe17 	ldw	r5,-8(fp)
  820648:	e1bfff17 	ldw	r6,-4(fp)
  82064c:	0820be80 	call	820be8 <altera_avalon_jtag_uart_ioctl>
}
  820650:	e037883a 	mov	sp,fp
  820654:	dfc00117 	ldw	ra,4(sp)
  820658:	df000017 	ldw	fp,0(sp)
  82065c:	dec00204 	addi	sp,sp,8
  820660:	f800283a 	ret

00820664 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  820664:	defff404 	addi	sp,sp,-48
  820668:	dfc00b15 	stw	ra,44(sp)
  82066c:	df000a15 	stw	fp,40(sp)
  820670:	df000a04 	addi	fp,sp,40
  820674:	e13ffd15 	stw	r4,-12(fp)
  820678:	e17ffe15 	stw	r5,-8(fp)
  82067c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  820680:	e0bffd17 	ldw	r2,-12(fp)
  820684:	10800c04 	addi	r2,r2,48
  820688:	e0bffb15 	stw	r2,-20(fp)
  82068c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  820690:	e13ffc0b 	ldhu	r4,-16(fp)
  820694:	e17ffc84 	addi	r5,fp,-14
  820698:	08198a80 	call	8198a8 <OSFlagCreate>
  82069c:	1007883a 	mov	r3,r2
  8206a0:	e0bffb17 	ldw	r2,-20(fp)
  8206a4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  8206a8:	e0bffd17 	ldw	r2,-12(fp)
  8206ac:	10800a04 	addi	r2,r2,40
  8206b0:	e0bff915 	stw	r2,-28(fp)
  8206b4:	00800044 	movi	r2,1
  8206b8:	e0bffa0d 	sth	r2,-24(fp)
  8206bc:	e13ffa0b 	ldhu	r4,-24(fp)
  8206c0:	081d7380 	call	81d738 <OSSemCreate>
  8206c4:	1007883a 	mov	r3,r2
  8206c8:	e0bff917 	ldw	r2,-28(fp)
  8206cc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  8206d0:	e0bffd17 	ldw	r2,-12(fp)
  8206d4:	10800b04 	addi	r2,r2,44
  8206d8:	e0bff715 	stw	r2,-36(fp)
  8206dc:	00800044 	movi	r2,1
  8206e0:	e0bff80d 	sth	r2,-32(fp)
  8206e4:	e13ff80b 	ldhu	r4,-32(fp)
  8206e8:	081d7380 	call	81d738 <OSSemCreate>
  8206ec:	1007883a 	mov	r3,r2
  8206f0:	e0bff717 	ldw	r2,-36(fp)
  8206f4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8206f8:	e0fffd17 	ldw	r3,-12(fp)
  8206fc:	00800044 	movi	r2,1
  820700:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  820704:	e0bffd17 	ldw	r2,-12(fp)
  820708:	10800017 	ldw	r2,0(r2)
  82070c:	11000104 	addi	r4,r2,4
  820710:	e0bffd17 	ldw	r2,-12(fp)
  820714:	10800817 	ldw	r2,32(r2)
  820718:	1007883a 	mov	r3,r2
  82071c:	2005883a 	mov	r2,r4
  820720:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  820724:	e13ffe17 	ldw	r4,-8(fp)
  820728:	e17fff17 	ldw	r5,-4(fp)
  82072c:	d8000015 	stw	zero,0(sp)
  820730:	018020b4 	movhi	r6,130
  820734:	3181e704 	addi	r6,r6,1948
  820738:	e1fffd17 	ldw	r7,-12(fp)
  82073c:	083a4f80 	call	83a4f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  820740:	e0bffd17 	ldw	r2,-12(fp)
  820744:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  820748:	e0bffd17 	ldw	r2,-12(fp)
  82074c:	11000204 	addi	r4,r2,8
  820750:	00802174 	movhi	r2,133
  820754:	1082e504 	addi	r2,r2,2964
  820758:	10800017 	ldw	r2,0(r2)
  82075c:	100b883a 	mov	r5,r2
  820760:	018020b4 	movhi	r6,130
  820764:	31829804 	addi	r6,r6,2656
  820768:	e1fffd17 	ldw	r7,-12(fp)
  82076c:	0839bbc0 	call	839bbc <alt_alarm_start>
  820770:	1004403a 	cmpge	r2,r2,zero
  820774:	1000041e 	bne	r2,zero,820788 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  820778:	e0fffd17 	ldw	r3,-12(fp)
  82077c:	00a00034 	movhi	r2,32768
  820780:	10bfffc4 	addi	r2,r2,-1
  820784:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  820788:	e037883a 	mov	sp,fp
  82078c:	dfc00117 	ldw	ra,4(sp)
  820790:	df000017 	ldw	fp,0(sp)
  820794:	dec00204 	addi	sp,sp,8
  820798:	f800283a 	ret

0082079c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  82079c:	defff204 	addi	sp,sp,-56
  8207a0:	dfc00d15 	stw	ra,52(sp)
  8207a4:	df000c15 	stw	fp,48(sp)
  8207a8:	df000c04 	addi	fp,sp,48
  8207ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8207b0:	e0bfff17 	ldw	r2,-4(fp)
  8207b4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  8207b8:	e0bffd17 	ldw	r2,-12(fp)
  8207bc:	10800017 	ldw	r2,0(r2)
  8207c0:	e0bffc15 	stw	r2,-16(fp)
  8207c4:	00000006 	br	8207c8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8207c8:	e0bffc17 	ldw	r2,-16(fp)
  8207cc:	10800104 	addi	r2,r2,4
  8207d0:	10800037 	ldwio	r2,0(r2)
  8207d4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8207d8:	e0bffb17 	ldw	r2,-20(fp)
  8207dc:	1080c00c 	andi	r2,r2,768
  8207e0:	1005003a 	cmpeq	r2,r2,zero
  8207e4:	1000991e 	bne	r2,zero,820a4c <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8207e8:	e0bffb17 	ldw	r2,-20(fp)
  8207ec:	1080400c 	andi	r2,r2,256
  8207f0:	1005003a 	cmpeq	r2,r2,zero
  8207f4:	1000481e 	bne	r2,zero,820918 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8207f8:	00800074 	movhi	r2,1
  8207fc:	e0bffa15 	stw	r2,-24(fp)
  820800:	00000006 	br	820804 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  820804:	e0bffd17 	ldw	r2,-12(fp)
  820808:	10800d17 	ldw	r2,52(r2)
  82080c:	10800044 	addi	r2,r2,1
  820810:	1081ffcc 	andi	r2,r2,2047
  820814:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  820818:	e0bffd17 	ldw	r2,-12(fp)
  82081c:	10c00e17 	ldw	r3,56(r2)
  820820:	e0bff917 	ldw	r2,-28(fp)
  820824:	18802826 	beq	r3,r2,8208c8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  820828:	e0bffc17 	ldw	r2,-16(fp)
  82082c:	10800037 	ldwio	r2,0(r2)
  820830:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  820834:	e0bffa17 	ldw	r2,-24(fp)
  820838:	10a0000c 	andi	r2,r2,32768
  82083c:	1005003a 	cmpeq	r2,r2,zero
  820840:	1000211e 	bne	r2,zero,8208c8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  820844:	e0bffd17 	ldw	r2,-12(fp)
  820848:	10c00d17 	ldw	r3,52(r2)
  82084c:	e0bffa17 	ldw	r2,-24(fp)
  820850:	1009883a 	mov	r4,r2
  820854:	e0bffd17 	ldw	r2,-12(fp)
  820858:	1885883a 	add	r2,r3,r2
  82085c:	10801104 	addi	r2,r2,68
  820860:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  820864:	e0bffd17 	ldw	r2,-12(fp)
  820868:	10800d17 	ldw	r2,52(r2)
  82086c:	10800044 	addi	r2,r2,1
  820870:	10c1ffcc 	andi	r3,r2,2047
  820874:	e0bffd17 	ldw	r2,-12(fp)
  820878:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  82087c:	e0bffd17 	ldw	r2,-12(fp)
  820880:	10800c17 	ldw	r2,48(r2)
  820884:	e0bff615 	stw	r2,-40(fp)
  820888:	00800044 	movi	r2,1
  82088c:	e0bff70d 	sth	r2,-36(fp)
  820890:	00800044 	movi	r2,1
  820894:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  820898:	00802174 	movhi	r2,133
  82089c:	1082eb44 	addi	r2,r2,2989
  8208a0:	10800003 	ldbu	r2,0(r2)
  8208a4:	10803fcc 	andi	r2,r2,255
  8208a8:	1005003a 	cmpeq	r2,r2,zero
  8208ac:	103fd51e 	bne	r2,zero,820804 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  8208b0:	e17ff70b 	ldhu	r5,-36(fp)
  8208b4:	e1bff783 	ldbu	r6,-34(fp)
  8208b8:	e1fffe04 	addi	r7,fp,-8
  8208bc:	e13ff617 	ldw	r4,-40(fp)
  8208c0:	081a5d00 	call	81a5d0 <OSFlagPost>
    return err;
  8208c4:	003fcf06 	br	820804 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8208c8:	e0bffa17 	ldw	r2,-24(fp)
  8208cc:	10bfffec 	andhi	r2,r2,65535
  8208d0:	1005003a 	cmpeq	r2,r2,zero
  8208d4:	1000101e 	bne	r2,zero,820918 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8208d8:	e0bffd17 	ldw	r2,-12(fp)
  8208dc:	10c00817 	ldw	r3,32(r2)
  8208e0:	00bfff84 	movi	r2,-2
  8208e4:	1886703a 	and	r3,r3,r2
  8208e8:	e0bffd17 	ldw	r2,-12(fp)
  8208ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8208f0:	e0bffc17 	ldw	r2,-16(fp)
  8208f4:	11000104 	addi	r4,r2,4
  8208f8:	e0bffd17 	ldw	r2,-12(fp)
  8208fc:	10800817 	ldw	r2,32(r2)
  820900:	1007883a 	mov	r3,r2
  820904:	2005883a 	mov	r2,r4
  820908:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  82090c:	e0bffc17 	ldw	r2,-16(fp)
  820910:	10800104 	addi	r2,r2,4
  820914:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  820918:	e0bffb17 	ldw	r2,-20(fp)
  82091c:	1080800c 	andi	r2,r2,512
  820920:	1005003a 	cmpeq	r2,r2,zero
  820924:	103fa81e 	bne	r2,zero,8207c8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  820928:	e0bffb17 	ldw	r2,-20(fp)
  82092c:	10bfffec 	andhi	r2,r2,65535
  820930:	1004d43a 	srli	r2,r2,16
  820934:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  820938:	00002706 	br	8209d8 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  82093c:	e13ffc17 	ldw	r4,-16(fp)
  820940:	e0bffd17 	ldw	r2,-12(fp)
  820944:	10c01017 	ldw	r3,64(r2)
  820948:	e0bffd17 	ldw	r2,-12(fp)
  82094c:	1885883a 	add	r2,r3,r2
  820950:	10821104 	addi	r2,r2,2116
  820954:	10800003 	ldbu	r2,0(r2)
  820958:	10c03fcc 	andi	r3,r2,255
  82095c:	18c0201c 	xori	r3,r3,128
  820960:	18ffe004 	addi	r3,r3,-128
  820964:	2005883a 	mov	r2,r4
  820968:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  82096c:	e0bffd17 	ldw	r2,-12(fp)
  820970:	10801017 	ldw	r2,64(r2)
  820974:	10800044 	addi	r2,r2,1
  820978:	10c1ffcc 	andi	r3,r2,2047
  82097c:	e0bffd17 	ldw	r2,-12(fp)
  820980:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  820984:	e0bffd17 	ldw	r2,-12(fp)
  820988:	10800c17 	ldw	r2,48(r2)
  82098c:	e0bff415 	stw	r2,-48(fp)
  820990:	00800084 	movi	r2,2
  820994:	e0bff50d 	sth	r2,-44(fp)
  820998:	00800044 	movi	r2,1
  82099c:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8209a0:	00802174 	movhi	r2,133
  8209a4:	1082eb44 	addi	r2,r2,2989
  8209a8:	10800003 	ldbu	r2,0(r2)
  8209ac:	10803fcc 	andi	r2,r2,255
  8209b0:	1005003a 	cmpeq	r2,r2,zero
  8209b4:	1000051e 	bne	r2,zero,8209cc <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  8209b8:	e17ff50b 	ldhu	r5,-44(fp)
  8209bc:	e1bff583 	ldbu	r6,-42(fp)
  8209c0:	e1fffe44 	addi	r7,fp,-7
  8209c4:	e13ff417 	ldw	r4,-48(fp)
  8209c8:	081a5d00 	call	81a5d0 <OSFlagPost>

        space--;
  8209cc:	e0bff817 	ldw	r2,-32(fp)
  8209d0:	10bfffc4 	addi	r2,r2,-1
  8209d4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8209d8:	e0bff817 	ldw	r2,-32(fp)
  8209dc:	1005003a 	cmpeq	r2,r2,zero
  8209e0:	1000051e 	bne	r2,zero,8209f8 <altera_avalon_jtag_uart_irq+0x25c>
  8209e4:	e0bffd17 	ldw	r2,-12(fp)
  8209e8:	10c01017 	ldw	r3,64(r2)
  8209ec:	e0bffd17 	ldw	r2,-12(fp)
  8209f0:	10800f17 	ldw	r2,60(r2)
  8209f4:	18bfd11e 	bne	r3,r2,82093c <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8209f8:	e0bff817 	ldw	r2,-32(fp)
  8209fc:	1005003a 	cmpeq	r2,r2,zero
  820a00:	103f711e 	bne	r2,zero,8207c8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  820a04:	e0bffd17 	ldw	r2,-12(fp)
  820a08:	10c00817 	ldw	r3,32(r2)
  820a0c:	00bfff44 	movi	r2,-3
  820a10:	1886703a 	and	r3,r3,r2
  820a14:	e0bffd17 	ldw	r2,-12(fp)
  820a18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  820a1c:	e0bffd17 	ldw	r2,-12(fp)
  820a20:	10800017 	ldw	r2,0(r2)
  820a24:	11000104 	addi	r4,r2,4
  820a28:	e0bffd17 	ldw	r2,-12(fp)
  820a2c:	10800817 	ldw	r2,32(r2)
  820a30:	1007883a 	mov	r3,r2
  820a34:	2005883a 	mov	r2,r4
  820a38:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  820a3c:	e0bffc17 	ldw	r2,-16(fp)
  820a40:	10800104 	addi	r2,r2,4
  820a44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  820a48:	003f5f06 	br	8207c8 <altera_avalon_jtag_uart_irq+0x2c>
}
  820a4c:	e037883a 	mov	sp,fp
  820a50:	dfc00117 	ldw	ra,4(sp)
  820a54:	df000017 	ldw	fp,0(sp)
  820a58:	dec00204 	addi	sp,sp,8
  820a5c:	f800283a 	ret

00820a60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  820a60:	defff804 	addi	sp,sp,-32
  820a64:	dfc00715 	stw	ra,28(sp)
  820a68:	df000615 	stw	fp,24(sp)
  820a6c:	df000604 	addi	fp,sp,24
  820a70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  820a74:	e0bfff17 	ldw	r2,-4(fp)
  820a78:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  820a7c:	e0bffd17 	ldw	r2,-12(fp)
  820a80:	10800017 	ldw	r2,0(r2)
  820a84:	10800104 	addi	r2,r2,4
  820a88:	10800037 	ldwio	r2,0(r2)
  820a8c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  820a90:	e0bffc17 	ldw	r2,-16(fp)
  820a94:	1081000c 	andi	r2,r2,1024
  820a98:	1005003a 	cmpeq	r2,r2,zero
  820a9c:	10000c1e 	bne	r2,zero,820ad0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  820aa0:	e0bffd17 	ldw	r2,-12(fp)
  820aa4:	10800017 	ldw	r2,0(r2)
  820aa8:	11000104 	addi	r4,r2,4
  820aac:	e0bffd17 	ldw	r2,-12(fp)
  820ab0:	10800817 	ldw	r2,32(r2)
  820ab4:	10810014 	ori	r2,r2,1024
  820ab8:	1007883a 	mov	r3,r2
  820abc:	2005883a 	mov	r2,r4
  820ac0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  820ac4:	e0bffd17 	ldw	r2,-12(fp)
  820ac8:	10000915 	stw	zero,36(r2)
  820acc:	00002106 	br	820b54 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  820ad0:	e0bffd17 	ldw	r2,-12(fp)
  820ad4:	10c00917 	ldw	r3,36(r2)
  820ad8:	00a00034 	movhi	r2,32768
  820adc:	10bfff04 	addi	r2,r2,-4
  820ae0:	10c01c36 	bltu	r2,r3,820b54 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  820ae4:	e0bffd17 	ldw	r2,-12(fp)
  820ae8:	10800917 	ldw	r2,36(r2)
  820aec:	10c00044 	addi	r3,r2,1
  820af0:	e0bffd17 	ldw	r2,-12(fp)
  820af4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  820af8:	e0bffd17 	ldw	r2,-12(fp)
  820afc:	10c00917 	ldw	r3,36(r2)
  820b00:	e0bffd17 	ldw	r2,-12(fp)
  820b04:	10800117 	ldw	r2,4(r2)
  820b08:	18801236 	bltu	r3,r2,820b54 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  820b0c:	e0bffd17 	ldw	r2,-12(fp)
  820b10:	10800c17 	ldw	r2,48(r2)
  820b14:	e0bffa15 	stw	r2,-24(fp)
  820b18:	00800104 	movi	r2,4
  820b1c:	e0bffb0d 	sth	r2,-20(fp)
  820b20:	00800044 	movi	r2,1
  820b24:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  820b28:	00802174 	movhi	r2,133
  820b2c:	1082eb44 	addi	r2,r2,2989
  820b30:	10800003 	ldbu	r2,0(r2)
  820b34:	10803fcc 	andi	r2,r2,255
  820b38:	1005003a 	cmpeq	r2,r2,zero
  820b3c:	1000051e 	bne	r2,zero,820b54 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  820b40:	e17ffb0b 	ldhu	r5,-20(fp)
  820b44:	e1bffb83 	ldbu	r6,-18(fp)
  820b48:	e1fffe04 	addi	r7,fp,-8
  820b4c:	e13ffa17 	ldw	r4,-24(fp)
  820b50:	081a5d00 	call	81a5d0 <OSFlagPost>
  820b54:	00802174 	movhi	r2,133
  820b58:	1082e504 	addi	r2,r2,2964
  820b5c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  820b60:	e037883a 	mov	sp,fp
  820b64:	dfc00117 	ldw	ra,4(sp)
  820b68:	df000017 	ldw	fp,0(sp)
  820b6c:	dec00204 	addi	sp,sp,8
  820b70:	f800283a 	ret

00820b74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  820b74:	defffc04 	addi	sp,sp,-16
  820b78:	df000315 	stw	fp,12(sp)
  820b7c:	df000304 	addi	fp,sp,12
  820b80:	e13ffd15 	stw	r4,-12(fp)
  820b84:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  820b88:	00000706 	br	820ba8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  820b8c:	e0bffe17 	ldw	r2,-8(fp)
  820b90:	1090000c 	andi	r2,r2,16384
  820b94:	1005003a 	cmpeq	r2,r2,zero
  820b98:	1000031e 	bne	r2,zero,820ba8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  820b9c:	00bffd44 	movi	r2,-11
  820ba0:	e0bfff15 	stw	r2,-4(fp)
  820ba4:	00000b06 	br	820bd4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  820ba8:	e0bffd17 	ldw	r2,-12(fp)
  820bac:	10c01017 	ldw	r3,64(r2)
  820bb0:	e0bffd17 	ldw	r2,-12(fp)
  820bb4:	10800f17 	ldw	r2,60(r2)
  820bb8:	18800526 	beq	r3,r2,820bd0 <altera_avalon_jtag_uart_close+0x5c>
  820bbc:	e0bffd17 	ldw	r2,-12(fp)
  820bc0:	10c00917 	ldw	r3,36(r2)
  820bc4:	e0bffd17 	ldw	r2,-12(fp)
  820bc8:	10800117 	ldw	r2,4(r2)
  820bcc:	18bfef36 	bltu	r3,r2,820b8c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  820bd0:	e03fff15 	stw	zero,-4(fp)
  820bd4:	e0bfff17 	ldw	r2,-4(fp)
}
  820bd8:	e037883a 	mov	sp,fp
  820bdc:	df000017 	ldw	fp,0(sp)
  820be0:	dec00104 	addi	sp,sp,4
  820be4:	f800283a 	ret

00820be8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  820be8:	defff804 	addi	sp,sp,-32
  820bec:	df000715 	stw	fp,28(sp)
  820bf0:	df000704 	addi	fp,sp,28
  820bf4:	e13ffb15 	stw	r4,-20(fp)
  820bf8:	e17ffc15 	stw	r5,-16(fp)
  820bfc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  820c00:	00bff9c4 	movi	r2,-25
  820c04:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  820c08:	e0bffc17 	ldw	r2,-16(fp)
  820c0c:	e0bfff15 	stw	r2,-4(fp)
  820c10:	e0ffff17 	ldw	r3,-4(fp)
  820c14:	189a8060 	cmpeqi	r2,r3,27137
  820c18:	1000041e 	bne	r2,zero,820c2c <altera_avalon_jtag_uart_ioctl+0x44>
  820c1c:	e0ffff17 	ldw	r3,-4(fp)
  820c20:	189a80a0 	cmpeqi	r2,r3,27138
  820c24:	10001b1e 	bne	r2,zero,820c94 <altera_avalon_jtag_uart_ioctl+0xac>
  820c28:	00002706 	br	820cc8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  820c2c:	e0bffb17 	ldw	r2,-20(fp)
  820c30:	10c00117 	ldw	r3,4(r2)
  820c34:	00a00034 	movhi	r2,32768
  820c38:	10bfffc4 	addi	r2,r2,-1
  820c3c:	18802226 	beq	r3,r2,820cc8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  820c40:	e0bffd17 	ldw	r2,-12(fp)
  820c44:	10800017 	ldw	r2,0(r2)
  820c48:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  820c4c:	e0bff917 	ldw	r2,-28(fp)
  820c50:	10800090 	cmplti	r2,r2,2
  820c54:	1000071e 	bne	r2,zero,820c74 <altera_avalon_jtag_uart_ioctl+0x8c>
  820c58:	e0fff917 	ldw	r3,-28(fp)
  820c5c:	00a00034 	movhi	r2,32768
  820c60:	10bfffc4 	addi	r2,r2,-1
  820c64:	18800326 	beq	r3,r2,820c74 <altera_avalon_jtag_uart_ioctl+0x8c>
  820c68:	e0bff917 	ldw	r2,-28(fp)
  820c6c:	e0bffe15 	stw	r2,-8(fp)
  820c70:	00000306 	br	820c80 <altera_avalon_jtag_uart_ioctl+0x98>
  820c74:	00e00034 	movhi	r3,32768
  820c78:	18ffff84 	addi	r3,r3,-2
  820c7c:	e0fffe15 	stw	r3,-8(fp)
  820c80:	e0bffb17 	ldw	r2,-20(fp)
  820c84:	e0fffe17 	ldw	r3,-8(fp)
  820c88:	10c00115 	stw	r3,4(r2)
      rc = 0;
  820c8c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  820c90:	00000d06 	br	820cc8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  820c94:	e0bffb17 	ldw	r2,-20(fp)
  820c98:	10c00117 	ldw	r3,4(r2)
  820c9c:	00a00034 	movhi	r2,32768
  820ca0:	10bfffc4 	addi	r2,r2,-1
  820ca4:	18800826 	beq	r3,r2,820cc8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  820ca8:	e13ffd17 	ldw	r4,-12(fp)
  820cac:	e0bffb17 	ldw	r2,-20(fp)
  820cb0:	10c00917 	ldw	r3,36(r2)
  820cb4:	e0bffb17 	ldw	r2,-20(fp)
  820cb8:	10800117 	ldw	r2,4(r2)
  820cbc:	1885803a 	cmpltu	r2,r3,r2
  820cc0:	20800015 	stw	r2,0(r4)
      rc = 0;
  820cc4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  820cc8:	e0bffa17 	ldw	r2,-24(fp)
}
  820ccc:	e037883a 	mov	sp,fp
  820cd0:	df000017 	ldw	fp,0(sp)
  820cd4:	dec00104 	addi	sp,sp,4
  820cd8:	f800283a 	ret

00820cdc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  820cdc:	deffeb04 	addi	sp,sp,-84
  820ce0:	dfc01415 	stw	ra,80(sp)
  820ce4:	df001315 	stw	fp,76(sp)
  820ce8:	df001304 	addi	fp,sp,76
  820cec:	e13ffb15 	stw	r4,-20(fp)
  820cf0:	e17ffc15 	stw	r5,-16(fp)
  820cf4:	e1bffd15 	stw	r6,-12(fp)
  820cf8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  820cfc:	e0bffc17 	ldw	r2,-16(fp)
  820d00:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  820d04:	e0bffb17 	ldw	r2,-20(fp)
  820d08:	10800a17 	ldw	r2,40(r2)
  820d0c:	e0bff315 	stw	r2,-52(fp)
  820d10:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  820d14:	e17ff40b 	ldhu	r5,-48(fp)
  820d18:	e1bffa44 	addi	r6,fp,-23
  820d1c:	e13ff317 	ldw	r4,-52(fp)
  820d20:	081daec0 	call	81daec <OSSemPend>

  while (space > 0)
  820d24:	00006406 	br	820eb8 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  820d28:	e0bffb17 	ldw	r2,-20(fp)
  820d2c:	10800d17 	ldw	r2,52(r2)
  820d30:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  820d34:	e0bffb17 	ldw	r2,-20(fp)
  820d38:	10800e17 	ldw	r2,56(r2)
  820d3c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  820d40:	e0fff617 	ldw	r3,-40(fp)
  820d44:	e0bff517 	ldw	r2,-44(fp)
  820d48:	18800536 	bltu	r3,r2,820d60 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  820d4c:	e0bff617 	ldw	r2,-40(fp)
  820d50:	e0fff517 	ldw	r3,-44(fp)
  820d54:	10c5c83a 	sub	r2,r2,r3
  820d58:	e0bff715 	stw	r2,-36(fp)
  820d5c:	00000406 	br	820d70 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  820d60:	00820004 	movi	r2,2048
  820d64:	e0fff517 	ldw	r3,-44(fp)
  820d68:	10c5c83a 	sub	r2,r2,r3
  820d6c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  820d70:	e0bff717 	ldw	r2,-36(fp)
  820d74:	1005003a 	cmpeq	r2,r2,zero
  820d78:	10001f1e 	bne	r2,zero,820df8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  820d7c:	e0fffd17 	ldw	r3,-12(fp)
  820d80:	e0bff717 	ldw	r2,-36(fp)
  820d84:	1880022e 	bgeu	r3,r2,820d90 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  820d88:	e0bffd17 	ldw	r2,-12(fp)
  820d8c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  820d90:	e0bffb17 	ldw	r2,-20(fp)
  820d94:	10c01104 	addi	r3,r2,68
  820d98:	e0bff517 	ldw	r2,-44(fp)
  820d9c:	1887883a 	add	r3,r3,r2
  820da0:	e0bff917 	ldw	r2,-28(fp)
  820da4:	1009883a 	mov	r4,r2
  820da8:	180b883a 	mov	r5,r3
  820dac:	e1bff717 	ldw	r6,-36(fp)
  820db0:	08073380 	call	807338 <memcpy>
      ptr   += n;
  820db4:	e0fff717 	ldw	r3,-36(fp)
  820db8:	e0bff917 	ldw	r2,-28(fp)
  820dbc:	10c5883a 	add	r2,r2,r3
  820dc0:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  820dc4:	e0fffd17 	ldw	r3,-12(fp)
  820dc8:	e0bff717 	ldw	r2,-36(fp)
  820dcc:	1885c83a 	sub	r2,r3,r2
  820dd0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  820dd4:	e0fff517 	ldw	r3,-44(fp)
  820dd8:	e0bff717 	ldw	r2,-36(fp)
  820ddc:	1885883a 	add	r2,r3,r2
  820de0:	10c1ffcc 	andi	r3,r2,2047
  820de4:	e0bffb17 	ldw	r2,-20(fp)
  820de8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  820dec:	e0bffd17 	ldw	r2,-12(fp)
  820df0:	10800048 	cmpgei	r2,r2,1
  820df4:	103fcc1e 	bne	r2,zero,820d28 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  820df8:	e0fff917 	ldw	r3,-28(fp)
  820dfc:	e0bffc17 	ldw	r2,-16(fp)
  820e00:	1880301e 	bne	r3,r2,820ec4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  820e04:	e0bffe17 	ldw	r2,-8(fp)
  820e08:	1090000c 	andi	r2,r2,16384
  820e0c:	1004c03a 	cmpne	r2,r2,zero
  820e10:	10002c1e 	bne	r2,zero,820ec4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  820e14:	00802174 	movhi	r2,133
  820e18:	1082eb44 	addi	r2,r2,2989
  820e1c:	10800003 	ldbu	r2,0(r2)
  820e20:	10803fcc 	andi	r2,r2,255
  820e24:	10800058 	cmpnei	r2,r2,1
  820e28:	1000161e 	bne	r2,zero,820e84 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  820e2c:	e0bffb17 	ldw	r2,-20(fp)
  820e30:	10800c17 	ldw	r2,48(r2)
  820e34:	e0bff015 	stw	r2,-64(fp)
  820e38:	00800144 	movi	r2,5
  820e3c:	e0bff10d 	sth	r2,-60(fp)
  820e40:	00bfe0c4 	movi	r2,-125
  820e44:	e0bff185 	stb	r2,-58(fp)
  820e48:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  820e4c:	00802174 	movhi	r2,133
  820e50:	1082eb44 	addi	r2,r2,2989
  820e54:	10800003 	ldbu	r2,0(r2)
  820e58:	10803fcc 	andi	r2,r2,255
  820e5c:	1005003a 	cmpeq	r2,r2,zero
  820e60:	1000111e 	bne	r2,zero,820ea8 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  820e64:	e17ff10b 	ldhu	r5,-60(fp)
  820e68:	e1bff183 	ldbu	r6,-58(fp)
  820e6c:	e1fff20b 	ldhu	r7,-56(fp)
  820e70:	e0bffa04 	addi	r2,fp,-24
  820e74:	d8800015 	stw	r2,0(sp)
  820e78:	e13ff017 	ldw	r4,-64(fp)
  820e7c:	0819f240 	call	819f24 <OSFlagPend>
    return err;
  820e80:	00000906 	br	820ea8 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  820e84:	e0bffb17 	ldw	r2,-20(fp)
  820e88:	10c00d17 	ldw	r3,52(r2)
  820e8c:	e0bff617 	ldw	r2,-40(fp)
  820e90:	1880051e 	bne	r3,r2,820ea8 <altera_avalon_jtag_uart_read+0x1cc>
  820e94:	e0bffb17 	ldw	r2,-20(fp)
  820e98:	10c00917 	ldw	r3,36(r2)
  820e9c:	e0bffb17 	ldw	r2,-20(fp)
  820ea0:	10800117 	ldw	r2,4(r2)
  820ea4:	18bff736 	bltu	r3,r2,820e84 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  820ea8:	e0bffb17 	ldw	r2,-20(fp)
  820eac:	10c00d17 	ldw	r3,52(r2)
  820eb0:	e0bff617 	ldw	r2,-40(fp)
  820eb4:	18800326 	beq	r3,r2,820ec4 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  820eb8:	e0bffd17 	ldw	r2,-12(fp)
  820ebc:	10800048 	cmpgei	r2,r2,1
  820ec0:	103f991e 	bne	r2,zero,820d28 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  820ec4:	e0bffb17 	ldw	r2,-20(fp)
  820ec8:	11000a17 	ldw	r4,40(r2)
  820ecc:	081dee40 	call	81dee4 <OSSemPost>

  if (ptr != buffer)
  820ed0:	e0fff917 	ldw	r3,-28(fp)
  820ed4:	e0bffc17 	ldw	r2,-16(fp)
  820ed8:	18801926 	beq	r3,r2,820f40 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820edc:	0005303a 	rdctl	r2,status
  820ee0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820ee4:	e0ffef17 	ldw	r3,-68(fp)
  820ee8:	00bfff84 	movi	r2,-2
  820eec:	1884703a 	and	r2,r3,r2
  820ef0:	1001703a 	wrctl	status,r2
  
  return context;
  820ef4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  820ef8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  820efc:	e0bffb17 	ldw	r2,-20(fp)
  820f00:	10800817 	ldw	r2,32(r2)
  820f04:	10c00054 	ori	r3,r2,1
  820f08:	e0bffb17 	ldw	r2,-20(fp)
  820f0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  820f10:	e0bffb17 	ldw	r2,-20(fp)
  820f14:	10800017 	ldw	r2,0(r2)
  820f18:	11000104 	addi	r4,r2,4
  820f1c:	e0bffb17 	ldw	r2,-20(fp)
  820f20:	10800817 	ldw	r2,32(r2)
  820f24:	1007883a 	mov	r3,r2
  820f28:	2005883a 	mov	r2,r4
  820f2c:	10c00035 	stwio	r3,0(r2)
  820f30:	e0bff817 	ldw	r2,-32(fp)
  820f34:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820f38:	e0bfee17 	ldw	r2,-72(fp)
  820f3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  820f40:	e0fff917 	ldw	r3,-28(fp)
  820f44:	e0bffc17 	ldw	r2,-16(fp)
  820f48:	18800526 	beq	r3,r2,820f60 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  820f4c:	e0fff917 	ldw	r3,-28(fp)
  820f50:	e0bffc17 	ldw	r2,-16(fp)
  820f54:	1887c83a 	sub	r3,r3,r2
  820f58:	e0ffff15 	stw	r3,-4(fp)
  820f5c:	00000906 	br	820f84 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  820f60:	e0bffe17 	ldw	r2,-8(fp)
  820f64:	1090000c 	andi	r2,r2,16384
  820f68:	1005003a 	cmpeq	r2,r2,zero
  820f6c:	1000031e 	bne	r2,zero,820f7c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  820f70:	00bffd44 	movi	r2,-11
  820f74:	e0bfff15 	stw	r2,-4(fp)
  820f78:	00000206 	br	820f84 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  820f7c:	00bffec4 	movi	r2,-5
  820f80:	e0bfff15 	stw	r2,-4(fp)
  820f84:	e0bfff17 	ldw	r2,-4(fp)
}
  820f88:	e037883a 	mov	sp,fp
  820f8c:	dfc00117 	ldw	ra,4(sp)
  820f90:	df000017 	ldw	fp,0(sp)
  820f94:	dec00204 	addi	sp,sp,8
  820f98:	f800283a 	ret

00820f9c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  820f9c:	deffeb04 	addi	sp,sp,-84
  820fa0:	dfc01415 	stw	ra,80(sp)
  820fa4:	df001315 	stw	fp,76(sp)
  820fa8:	df001304 	addi	fp,sp,76
  820fac:	e13ffb15 	stw	r4,-20(fp)
  820fb0:	e17ffc15 	stw	r5,-16(fp)
  820fb4:	e1bffd15 	stw	r6,-12(fp)
  820fb8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  820fbc:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  820fc0:	e0bffc17 	ldw	r2,-16(fp)
  820fc4:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  820fc8:	e0bffb17 	ldw	r2,-20(fp)
  820fcc:	10800b17 	ldw	r2,44(r2)
  820fd0:	e0bff315 	stw	r2,-52(fp)
  820fd4:	e03ff40d 	sth	zero,-48(fp)
  820fd8:	e17ff40b 	ldhu	r5,-48(fp)
  820fdc:	e1bffa04 	addi	r6,fp,-24
  820fe0:	e13ff317 	ldw	r4,-52(fp)
  820fe4:	081daec0 	call	81daec <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  820fe8:	00003a06 	br	8210d4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  820fec:	e0bffb17 	ldw	r2,-20(fp)
  820ff0:	10800f17 	ldw	r2,60(r2)
  820ff4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  820ff8:	e0bffb17 	ldw	r2,-20(fp)
  820ffc:	10801017 	ldw	r2,64(r2)
  821000:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  821004:	e0fff917 	ldw	r3,-28(fp)
  821008:	e0bff817 	ldw	r2,-32(fp)
  82100c:	1880062e 	bgeu	r3,r2,821028 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  821010:	e0fff817 	ldw	r3,-32(fp)
  821014:	e0bff917 	ldw	r2,-28(fp)
  821018:	1885c83a 	sub	r2,r3,r2
  82101c:	10bfffc4 	addi	r2,r2,-1
  821020:	e0bff715 	stw	r2,-36(fp)
  821024:	00000c06 	br	821058 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  821028:	e0bff817 	ldw	r2,-32(fp)
  82102c:	1005003a 	cmpeq	r2,r2,zero
  821030:	1000051e 	bne	r2,zero,821048 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  821034:	00820004 	movi	r2,2048
  821038:	e0fff917 	ldw	r3,-28(fp)
  82103c:	10c5c83a 	sub	r2,r2,r3
  821040:	e0bff715 	stw	r2,-36(fp)
  821044:	00000406 	br	821058 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  821048:	0081ffc4 	movi	r2,2047
  82104c:	e0fff917 	ldw	r3,-28(fp)
  821050:	10c5c83a 	sub	r2,r2,r3
  821054:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  821058:	e0bff717 	ldw	r2,-36(fp)
  82105c:	1005003a 	cmpeq	r2,r2,zero
  821060:	10001f1e 	bne	r2,zero,8210e0 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  821064:	e0fffd17 	ldw	r3,-12(fp)
  821068:	e0bff717 	ldw	r2,-36(fp)
  82106c:	1880022e 	bgeu	r3,r2,821078 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  821070:	e0bffd17 	ldw	r2,-12(fp)
  821074:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  821078:	e0bffb17 	ldw	r2,-20(fp)
  82107c:	10c21104 	addi	r3,r2,2116
  821080:	e0bff917 	ldw	r2,-28(fp)
  821084:	1885883a 	add	r2,r3,r2
  821088:	e0fffc17 	ldw	r3,-16(fp)
  82108c:	1009883a 	mov	r4,r2
  821090:	180b883a 	mov	r5,r3
  821094:	e1bff717 	ldw	r6,-36(fp)
  821098:	08073380 	call	807338 <memcpy>
      ptr   += n;
  82109c:	e0fff717 	ldw	r3,-36(fp)
  8210a0:	e0bffc17 	ldw	r2,-16(fp)
  8210a4:	10c5883a 	add	r2,r2,r3
  8210a8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8210ac:	e0fffd17 	ldw	r3,-12(fp)
  8210b0:	e0bff717 	ldw	r2,-36(fp)
  8210b4:	1885c83a 	sub	r2,r3,r2
  8210b8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8210bc:	e0fff917 	ldw	r3,-28(fp)
  8210c0:	e0bff717 	ldw	r2,-36(fp)
  8210c4:	1885883a 	add	r2,r3,r2
  8210c8:	10c1ffcc 	andi	r3,r2,2047
  8210cc:	e0bffb17 	ldw	r2,-20(fp)
  8210d0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8210d4:	e0bffd17 	ldw	r2,-12(fp)
  8210d8:	10800048 	cmpgei	r2,r2,1
  8210dc:	103fc31e 	bne	r2,zero,820fec <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8210e0:	0005303a 	rdctl	r2,status
  8210e4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8210e8:	e0fff217 	ldw	r3,-56(fp)
  8210ec:	00bfff84 	movi	r2,-2
  8210f0:	1884703a 	and	r2,r3,r2
  8210f4:	1001703a 	wrctl	status,r2
  
  return context;
  8210f8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8210fc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  821100:	e0bffb17 	ldw	r2,-20(fp)
  821104:	10800817 	ldw	r2,32(r2)
  821108:	10c00094 	ori	r3,r2,2
  82110c:	e0bffb17 	ldw	r2,-20(fp)
  821110:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  821114:	e0bffb17 	ldw	r2,-20(fp)
  821118:	10800017 	ldw	r2,0(r2)
  82111c:	11000104 	addi	r4,r2,4
  821120:	e0bffb17 	ldw	r2,-20(fp)
  821124:	10800817 	ldw	r2,32(r2)
  821128:	1007883a 	mov	r3,r2
  82112c:	2005883a 	mov	r2,r4
  821130:	10c00035 	stwio	r3,0(r2)
  821134:	e0bff617 	ldw	r2,-40(fp)
  821138:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82113c:	e0bff117 	ldw	r2,-60(fp)
  821140:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  821144:	e0bffd17 	ldw	r2,-12(fp)
  821148:	10800050 	cmplti	r2,r2,1
  82114c:	10002d1e 	bne	r2,zero,821204 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  821150:	e0bffe17 	ldw	r2,-8(fp)
  821154:	1090000c 	andi	r2,r2,16384
  821158:	1004c03a 	cmpne	r2,r2,zero
  82115c:	10002c1e 	bne	r2,zero,821210 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  821160:	00802174 	movhi	r2,133
  821164:	1082eb44 	addi	r2,r2,2989
  821168:	10800003 	ldbu	r2,0(r2)
  82116c:	10803fcc 	andi	r2,r2,255
  821170:	10800058 	cmpnei	r2,r2,1
  821174:	1000161e 	bne	r2,zero,8211d0 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  821178:	e0bffb17 	ldw	r2,-20(fp)
  82117c:	10800c17 	ldw	r2,48(r2)
  821180:	e0bfee15 	stw	r2,-72(fp)
  821184:	00800184 	movi	r2,6
  821188:	e0bfef0d 	sth	r2,-68(fp)
  82118c:	00bfe0c4 	movi	r2,-125
  821190:	e0bfef85 	stb	r2,-66(fp)
  821194:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  821198:	00802174 	movhi	r2,133
  82119c:	1082eb44 	addi	r2,r2,2989
  8211a0:	10800003 	ldbu	r2,0(r2)
  8211a4:	10803fcc 	andi	r2,r2,255
  8211a8:	1005003a 	cmpeq	r2,r2,zero
  8211ac:	1000111e 	bne	r2,zero,8211f4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8211b0:	e17fef0b 	ldhu	r5,-68(fp)
  8211b4:	e1bfef83 	ldbu	r6,-66(fp)
  8211b8:	e1fff00b 	ldhu	r7,-64(fp)
  8211bc:	e0bffa44 	addi	r2,fp,-23
  8211c0:	d8800015 	stw	r2,0(sp)
  8211c4:	e13fee17 	ldw	r4,-72(fp)
  8211c8:	0819f240 	call	819f24 <OSFlagPend>
    return err;
  8211cc:	00000906 	br	8211f4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8211d0:	e0bffb17 	ldw	r2,-20(fp)
  8211d4:	10c01017 	ldw	r3,64(r2)
  8211d8:	e0bff817 	ldw	r2,-32(fp)
  8211dc:	1880051e 	bne	r3,r2,8211f4 <altera_avalon_jtag_uart_write+0x258>
  8211e0:	e0bffb17 	ldw	r2,-20(fp)
  8211e4:	10c00917 	ldw	r3,36(r2)
  8211e8:	e0bffb17 	ldw	r2,-20(fp)
  8211ec:	10800117 	ldw	r2,4(r2)
  8211f0:	18bff736 	bltu	r3,r2,8211d0 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8211f4:	e0bffb17 	ldw	r2,-20(fp)
  8211f8:	10c01017 	ldw	r3,64(r2)
  8211fc:	e0bff817 	ldw	r2,-32(fp)
  821200:	18800326 	beq	r3,r2,821210 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  821204:	e0bffd17 	ldw	r2,-12(fp)
  821208:	10800048 	cmpgei	r2,r2,1
  82120c:	103fb11e 	bne	r2,zero,8210d4 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  821210:	e0bffb17 	ldw	r2,-20(fp)
  821214:	11000b17 	ldw	r4,44(r2)
  821218:	081dee40 	call	81dee4 <OSSemPost>

  if (ptr != start)
  82121c:	e0fffc17 	ldw	r3,-16(fp)
  821220:	e0bff517 	ldw	r2,-44(fp)
  821224:	18800526 	beq	r3,r2,82123c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  821228:	e0fffc17 	ldw	r3,-16(fp)
  82122c:	e0bff517 	ldw	r2,-44(fp)
  821230:	1887c83a 	sub	r3,r3,r2
  821234:	e0ffff15 	stw	r3,-4(fp)
  821238:	00000906 	br	821260 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  82123c:	e0bffe17 	ldw	r2,-8(fp)
  821240:	1090000c 	andi	r2,r2,16384
  821244:	1005003a 	cmpeq	r2,r2,zero
  821248:	1000031e 	bne	r2,zero,821258 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  82124c:	00bffd44 	movi	r2,-11
  821250:	e0bfff15 	stw	r2,-4(fp)
  821254:	00000206 	br	821260 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  821258:	00bffec4 	movi	r2,-5
  82125c:	e0bfff15 	stw	r2,-4(fp)
  821260:	e0bfff17 	ldw	r2,-4(fp)
}
  821264:	e037883a 	mov	sp,fp
  821268:	dfc00117 	ldw	ra,4(sp)
  82126c:	df000017 	ldw	fp,0(sp)
  821270:	dec00204 	addi	sp,sp,8
  821274:	f800283a 	ret

00821278 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  821278:	defffa04 	addi	sp,sp,-24
  82127c:	dfc00515 	stw	ra,20(sp)
  821280:	df000415 	stw	fp,16(sp)
  821284:	df000404 	addi	fp,sp,16
  821288:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  82128c:	e0bfff17 	ldw	r2,-4(fp)
  821290:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  821294:	e0bfff17 	ldw	r2,-4(fp)
  821298:	10800104 	addi	r2,r2,4
  82129c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8212a0:	0005303a 	rdctl	r2,status
  8212a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8212a8:	e0fffd17 	ldw	r3,-12(fp)
  8212ac:	00bfff84 	movi	r2,-2
  8212b0:	1884703a 	and	r2,r3,r2
  8212b4:	1001703a 	wrctl	status,r2
  
  return context;
  8212b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8212bc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8212c0:	0816db80 	call	816db8 <alt_tick>
  8212c4:	e0bffe17 	ldw	r2,-8(fp)
  8212c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8212cc:	e0bffc17 	ldw	r2,-16(fp)
  8212d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8212d4:	e037883a 	mov	sp,fp
  8212d8:	dfc00117 	ldw	ra,4(sp)
  8212dc:	df000017 	ldw	fp,0(sp)
  8212e0:	dec00204 	addi	sp,sp,8
  8212e4:	f800283a 	ret

008212e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8212e8:	defff804 	addi	sp,sp,-32
  8212ec:	dfc00715 	stw	ra,28(sp)
  8212f0:	df000615 	stw	fp,24(sp)
  8212f4:	df000604 	addi	fp,sp,24
  8212f8:	e13ffc15 	stw	r4,-16(fp)
  8212fc:	e17ffd15 	stw	r5,-12(fp)
  821300:	e1bffe15 	stw	r6,-8(fp)
  821304:	e1ffff15 	stw	r7,-4(fp)
  821308:	e0bfff17 	ldw	r2,-4(fp)
  82130c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  821310:	00802174 	movhi	r2,133
  821314:	1082e504 	addi	r2,r2,2964
  821318:	10800017 	ldw	r2,0(r2)
  82131c:	1004c03a 	cmpne	r2,r2,zero
  821320:	1000041e 	bne	r2,zero,821334 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  821324:	00c02174 	movhi	r3,133
  821328:	18c2e504 	addi	r3,r3,2964
  82132c:	e0bffb17 	ldw	r2,-20(fp)
  821330:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  821334:	e0bffc17 	ldw	r2,-16(fp)
  821338:	10800104 	addi	r2,r2,4
  82133c:	1007883a 	mov	r3,r2
  821340:	008001c4 	movi	r2,7
  821344:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  821348:	d8000015 	stw	zero,0(sp)
  82134c:	e13ffd17 	ldw	r4,-12(fp)
  821350:	e17ffe17 	ldw	r5,-8(fp)
  821354:	018020b4 	movhi	r6,130
  821358:	31849e04 	addi	r6,r6,4728
  82135c:	e1fffc17 	ldw	r7,-16(fp)
  821360:	083a4f80 	call	83a4f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  821364:	e037883a 	mov	sp,fp
  821368:	dfc00117 	ldw	ra,4(sp)
  82136c:	df000017 	ldw	fp,0(sp)
  821370:	dec00204 	addi	sp,sp,8
  821374:	f800283a 	ret

00821378 <read_word>:
* reads a word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  821378:	defffe04 	addi	sp,sp,-8
  82137c:	df000115 	stw	fp,4(sp)
  821380:	df000104 	addi	fp,sp,4
  821384:	e13fff15 	stw	r4,-4(fp)
  return (alt_u32)(*current_ptr | 
  821388:	e0bfff17 	ldw	r2,-4(fp)
  82138c:	10800003 	ldbu	r2,0(r2)
  821390:	10c03fcc 	andi	r3,r2,255
  821394:	e0bfff17 	ldw	r2,-4(fp)
  821398:	10800044 	addi	r2,r2,1
  82139c:	10800003 	ldbu	r2,0(r2)
  8213a0:	10803fcc 	andi	r2,r2,255
  8213a4:	1004923a 	slli	r2,r2,8
  8213a8:	1886b03a 	or	r3,r3,r2
  8213ac:	e0bfff17 	ldw	r2,-4(fp)
  8213b0:	10800084 	addi	r2,r2,2
  8213b4:	10800003 	ldbu	r2,0(r2)
  8213b8:	10803fcc 	andi	r2,r2,255
  8213bc:	1004943a 	slli	r2,r2,16
  8213c0:	1886b03a 	or	r3,r3,r2
  8213c4:	e0bfff17 	ldw	r2,-4(fp)
  8213c8:	108000c4 	addi	r2,r2,3
  8213cc:	10800003 	ldbu	r2,0(r2)
  8213d0:	10803fcc 	andi	r2,r2,255
  8213d4:	1004963a 	slli	r2,r2,24
  8213d8:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
         (*(current_ptr+3) << 24 ));
}
  8213dc:	e037883a 	mov	sp,fp
  8213e0:	df000017 	ldw	fp,0(sp)
  8213e4:	dec00104 	addi	sp,sp,4
  8213e8:	f800283a 	ret

008213ec <read_word_inc>:
* reads a word from an address in flash, and increments the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word_inc(alt_u8** current_ptr)
{
  8213ec:	defffc04 	addi	sp,sp,-16
  8213f0:	dfc00315 	stw	ra,12(sp)
  8213f4:	df000215 	stw	fp,8(sp)
  8213f8:	df000204 	addi	fp,sp,8
  8213fc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 value = read_word(*current_ptr);
  821400:	e0bfff17 	ldw	r2,-4(fp)
  821404:	11000017 	ldw	r4,0(r2)
  821408:	08213780 	call	821378 <read_word>
  82140c:	e0bffe15 	stw	r2,-8(fp)
  *current_ptr += 4;
  821410:	e0bfff17 	ldw	r2,-4(fp)
  821414:	10800017 	ldw	r2,0(r2)
  821418:	10c00104 	addi	r3,r2,4
  82141c:	e0bfff17 	ldw	r2,-4(fp)
  821420:	10c00015 	stw	r3,0(r2)
  return value;
  821424:	e0bffe17 	ldw	r2,-8(fp)
}
  821428:	e037883a 	mov	sp,fp
  82142c:	dfc00117 	ldw	ra,4(sp)
  821430:	df000017 	ldw	fp,0(sp)
  821434:	dec00204 	addi	sp,sp,8
  821438:	f800283a 	ret

0082143c <read_half_word>:
* reads a half word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
  82143c:	defffe04 	addi	sp,sp,-8
  821440:	df000115 	stw	fp,4(sp)
  821444:	df000104 	addi	fp,sp,4
  821448:	e13fff15 	stw	r4,-4(fp)
  return (alt_u16)(*current_ptr | 
  82144c:	e0bfff17 	ldw	r2,-4(fp)
  821450:	10800003 	ldbu	r2,0(r2)
  821454:	10c03fcc 	andi	r3,r2,255
  821458:	e0bfff17 	ldw	r2,-4(fp)
  82145c:	10800044 	addi	r2,r2,1
  821460:	10800003 	ldbu	r2,0(r2)
  821464:	10803fcc 	andi	r2,r2,255
  821468:	1004923a 	slli	r2,r2,8
  82146c:	1884b03a 	or	r2,r3,r2
  821470:	10bfffcc 	andi	r2,r2,65535
         (*(current_ptr+1) << 8));
}
  821474:	e037883a 	mov	sp,fp
  821478:	df000017 	ldw	fp,0(sp)
  82147c:	dec00104 	addi	sp,sp,4
  821480:	f800283a 	ret

00821484 <read_half_word_inc>:
* reads a half word from an address in flash, and increment the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word_inc(alt_u8** current_ptr)
{
  821484:	defffc04 	addi	sp,sp,-16
  821488:	dfc00315 	stw	ra,12(sp)
  82148c:	df000215 	stw	fp,8(sp)
  821490:	df000204 	addi	fp,sp,8
  821494:	e13fff15 	stw	r4,-4(fp)
  alt_u16 value = read_word(*current_ptr);
  821498:	e0bfff17 	ldw	r2,-4(fp)
  82149c:	11000017 	ldw	r4,0(r2)
  8214a0:	08213780 	call	821378 <read_word>
  8214a4:	e0bffe0d 	sth	r2,-8(fp)
  *current_ptr += 2;
  8214a8:	e0bfff17 	ldw	r2,-4(fp)
  8214ac:	10800017 	ldw	r2,0(r2)
  8214b0:	10c00084 	addi	r3,r2,2
  8214b4:	e0bfff17 	ldw	r2,-4(fp)
  8214b8:	10c00015 	stw	r3,0(r2)
  return value;
  8214bc:	e0bffe0b 	ldhu	r2,-8(fp)
}
  8214c0:	e037883a 	mov	sp,fp
  8214c4:	dfc00117 	ldw	ra,4(sp)
  8214c8:	df000017 	ldw	fp,0(sp)
  8214cc:	dec00204 	addi	sp,sp,8
  8214d0:	f800283a 	ret

008214d4 <check_file_header>:
*
* Check that this is a file header we can cope with and inrement the current ptr 
* accordingly
*/
static int check_file_header(alt_u8** current_ptr)
{
  8214d4:	defff704 	addi	sp,sp,-36
  8214d8:	dfc00815 	stw	ra,32(sp)
  8214dc:	df000715 	stw	fp,28(sp)
  8214e0:	df000704 	addi	fp,sp,28
  8214e4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  8214e8:	00bfff84 	movi	r2,-2
  8214ec:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 name_len, extra_len, version, flags, compression;
  alt_u32 uncompressed_len, compressed_len;

  version = read_half_word_inc(current_ptr);
  8214f0:	e13fff17 	ldw	r4,-4(fp)
  8214f4:	08214840 	call	821484 <read_half_word_inc>
  8214f8:	e0bffc0d 	sth	r2,-16(fp)

  /* We can parse files designed for version 10 */
  if (version > 10)
  8214fc:	e0bffc0b 	ldhu	r2,-16(fp)
  821500:	108002e8 	cmpgeui	r2,r2,11
  821504:	1000331e 	bne	r2,zero,8215d4 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);
  821508:	e13fff17 	ldw	r4,-4(fp)
  82150c:	08214840 	call	821484 <read_half_word_inc>
  821510:	e0bffb8d 	sth	r2,-18(fp)

  if (flags )
  821514:	e0bffb8b 	ldhu	r2,-18(fp)
  821518:	1004c03a 	cmpne	r2,r2,zero
  82151c:	10002d1e 	bne	r2,zero,8215d4 <check_file_header+0x100>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  821520:	e13fff17 	ldw	r4,-4(fp)
  821524:	08214840 	call	821484 <read_half_word_inc>
  821528:	e0bffb0d 	sth	r2,-20(fp)

  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  82152c:	e0bfff17 	ldw	r2,-4(fp)
  821530:	10800017 	ldw	r2,0(r2)
  821534:	10c00204 	addi	r3,r2,8
  821538:	e0bfff17 	ldw	r2,-4(fp)
  82153c:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths, these should be the same */
  compressed_len = read_word_inc(current_ptr);
  821540:	e13fff17 	ldw	r4,-4(fp)
  821544:	08213ec0 	call	8213ec <read_word_inc>
  821548:	e0bff915 	stw	r2,-28(fp)
  uncompressed_len = read_word_inc(current_ptr);
  82154c:	e13fff17 	ldw	r4,-4(fp)
  821550:	08213ec0 	call	8213ec <read_word_inc>
  821554:	e0bffa15 	stw	r2,-24(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  821558:	e0bffb0b 	ldhu	r2,-20(fp)
  82155c:	1004c03a 	cmpne	r2,r2,zero
  821560:	10001c1e 	bne	r2,zero,8215d4 <check_file_header+0x100>
  821564:	e0fff917 	ldw	r3,-28(fp)
  821568:	e0bffa17 	ldw	r2,-24(fp)
  82156c:	1880191e 	bne	r3,r2,8215d4 <check_file_header+0x100>
  {
    goto exit;
  }

  /* Read the length of the name and extra fields */
  name_len = read_half_word_inc(current_ptr);
  821570:	e13fff17 	ldw	r4,-4(fp)
  821574:	08214840 	call	821484 <read_half_word_inc>
  821578:	e0bffd0d 	sth	r2,-12(fp)
  extra_len = read_half_word_inc(current_ptr);
  82157c:	e13fff17 	ldw	r4,-4(fp)
  821580:	08214840 	call	821484 <read_half_word_inc>
  821584:	e0bffc8d 	sth	r2,-14(fp)

  /* Skip the name and extra fields */
  *current_ptr += name_len;
  821588:	e0bfff17 	ldw	r2,-4(fp)
  82158c:	10c00017 	ldw	r3,0(r2)
  821590:	e0bffd0b 	ldhu	r2,-12(fp)
  821594:	1887883a 	add	r3,r3,r2
  821598:	e0bfff17 	ldw	r2,-4(fp)
  82159c:	10c00015 	stw	r3,0(r2)
  *current_ptr += extra_len;
  8215a0:	e0bfff17 	ldw	r2,-4(fp)
  8215a4:	10c00017 	ldw	r3,0(r2)
  8215a8:	e0bffc8b 	ldhu	r2,-14(fp)
  8215ac:	1887883a 	add	r3,r3,r2
  8215b0:	e0bfff17 	ldw	r2,-4(fp)
  8215b4:	10c00015 	stw	r3,0(r2)

  *current_ptr += compressed_len;
  8215b8:	e0bfff17 	ldw	r2,-4(fp)
  8215bc:	10c00017 	ldw	r3,0(r2)
  8215c0:	e0bff917 	ldw	r2,-28(fp)
  8215c4:	1887883a 	add	r3,r3,r2
  8215c8:	e0bfff17 	ldw	r2,-4(fp)
  8215cc:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  8215d0:	e03ffe15 	stw	zero,-8(fp)

exit:
  return ret_code;
  8215d4:	e0bffe17 	ldw	r2,-8(fp)
}
  8215d8:	e037883a 	mov	sp,fp
  8215dc:	dfc00117 	ldw	ra,4(sp)
  8215e0:	df000017 	ldw	fp,0(sp)
  8215e4:	dec00204 	addi	sp,sp,8
  8215e8:	f800283a 	ret

008215ec <check_directory_header>:
* Sanity check an entry in the directory structure
* 
* returns 0 for success -ENOENT if not
*/
int check_directory_header(alt_u8** current_ptr)
{
  8215ec:	defff704 	addi	sp,sp,-36
  8215f0:	dfc00815 	stw	ra,32(sp)
  8215f4:	df000715 	stw	fp,28(sp)
  8215f8:	df000704 	addi	fp,sp,28
  8215fc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  821600:	00bfff84 	movi	r2,-2
  821604:	e0bffe15 	stw	r2,-8(fp)
  alt_u16 version, flags, compression, name_len, extra_len, comment_len;
  alt_u32 compressed_len, uncompressed_len;

  /* We don't care what version made this file */
  *current_ptr += 2;
  821608:	e0bfff17 	ldw	r2,-4(fp)
  82160c:	10800017 	ldw	r2,0(r2)
  821610:	10c00084 	addi	r3,r2,2
  821614:	e0bfff17 	ldw	r2,-4(fp)
  821618:	10c00015 	stw	r3,0(r2)

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
  82161c:	e13fff17 	ldw	r4,-4(fp)
  821620:	08214840 	call	821484 <read_half_word_inc>
  821624:	e0bffd8d 	sth	r2,-10(fp)
  if (version > 10)
  821628:	e0bffd8b 	ldhu	r2,-10(fp)
  82162c:	108002e8 	cmpgeui	r2,r2,11
  821630:	1000331e 	bne	r2,zero,821700 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);
  821634:	e13fff17 	ldw	r4,-4(fp)
  821638:	08214840 	call	821484 <read_half_word_inc>
  82163c:	e0bffd0d 	sth	r2,-12(fp)

  if (flags )
  821640:	e0bffd0b 	ldhu	r2,-12(fp)
  821644:	1004c03a 	cmpne	r2,r2,zero
  821648:	10002d1e 	bne	r2,zero,821700 <check_directory_header+0x114>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  82164c:	e13fff17 	ldw	r4,-4(fp)
  821650:	08214840 	call	821484 <read_half_word_inc>
  821654:	e0bffc8d 	sth	r2,-14(fp)


  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  821658:	e0bfff17 	ldw	r2,-4(fp)
  82165c:	10800017 	ldw	r2,0(r2)
  821660:	10c00204 	addi	r3,r2,8
  821664:	e0bfff17 	ldw	r2,-4(fp)
  821668:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths,these should be the same */
  compressed_len = read_word_inc(current_ptr);
  82166c:	e13fff17 	ldw	r4,-4(fp)
  821670:	08213ec0 	call	8213ec <read_word_inc>
  821674:	e0bffa15 	stw	r2,-24(fp)
  uncompressed_len = read_word_inc(current_ptr);
  821678:	e13fff17 	ldw	r4,-4(fp)
  82167c:	08213ec0 	call	8213ec <read_word_inc>
  821680:	e0bff915 	stw	r2,-28(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  821684:	e0bffc8b 	ldhu	r2,-14(fp)
  821688:	1004c03a 	cmpne	r2,r2,zero
  82168c:	10001c1e 	bne	r2,zero,821700 <check_directory_header+0x114>
  821690:	e0fffa17 	ldw	r3,-24(fp)
  821694:	e0bff917 	ldw	r2,-28(fp)
  821698:	1880191e 	bne	r3,r2,821700 <check_directory_header+0x114>
  {
    goto exit;
  }

  /* Read the length of the name, extra fields and comment fields*/
  name_len = read_half_word_inc(current_ptr);
  82169c:	e13fff17 	ldw	r4,-4(fp)
  8216a0:	08214840 	call	821484 <read_half_word_inc>
  8216a4:	e0bffc0d 	sth	r2,-16(fp)
  extra_len = read_half_word_inc(current_ptr);
  8216a8:	e13fff17 	ldw	r4,-4(fp)
  8216ac:	08214840 	call	821484 <read_half_word_inc>
  8216b0:	e0bffb8d 	sth	r2,-18(fp)
  comment_len = read_half_word_inc(current_ptr);
  8216b4:	e13fff17 	ldw	r4,-4(fp)
  8216b8:	08214840 	call	821484 <read_half_word_inc>
  8216bc:	e0bffb0d 	sth	r2,-20(fp)

  /* We don't care about the disk number, the file attributes or the offset */
  *current_ptr += 12;
  8216c0:	e0bfff17 	ldw	r2,-4(fp)
  8216c4:	10800017 	ldw	r2,0(r2)
  8216c8:	10c00304 	addi	r3,r2,12
  8216cc:	e0bfff17 	ldw	r2,-4(fp)
  8216d0:	10c00015 	stw	r3,0(r2)

  *current_ptr += (name_len + extra_len + comment_len);
  8216d4:	e0bfff17 	ldw	r2,-4(fp)
  8216d8:	11000017 	ldw	r4,0(r2)
  8216dc:	e0fffc0b 	ldhu	r3,-16(fp)
  8216e0:	e0bffb8b 	ldhu	r2,-18(fp)
  8216e4:	1887883a 	add	r3,r3,r2
  8216e8:	e0bffb0b 	ldhu	r2,-20(fp)
  8216ec:	1885883a 	add	r2,r3,r2
  8216f0:	2087883a 	add	r3,r4,r2
  8216f4:	e0bfff17 	ldw	r2,-4(fp)
  8216f8:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  8216fc:	e03ffe15 	stw	zero,-8(fp)
exit:
  return ret_code;
  821700:	e0bffe17 	ldw	r2,-8(fp)
}
  821704:	e037883a 	mov	sp,fp
  821708:	dfc00117 	ldw	ra,4(sp)
  82170c:	df000017 	ldw	fp,0(sp)
  821710:	dec00204 	addi	sp,sp,8
  821714:	f800283a 	ret

00821718 <check_directory_table>:
* tokens are in the right place, none of the files are compressed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int check_directory_table(alt_ro_zipfs_dev* dev)
{
  821718:	defff904 	addi	sp,sp,-28
  82171c:	dfc00615 	stw	ra,24(sp)
  821720:	df000515 	stw	fp,20(sp)
  821724:	df000504 	addi	fp,sp,20
  821728:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  82172c:	e03ffc15 	stw	zero,-16(fp)
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  821730:	e0bffe17 	ldw	r2,-8(fp)
  821734:	10800b17 	ldw	r2,44(r2)
  821738:	e0bffd15 	stw	r2,-12(fp)
  alt_u32 token;

  while(1)
  {
    token = read_word_inc(&current_ptr);
  82173c:	e13ffd04 	addi	r4,fp,-12
  821740:	08213ec0 	call	8213ec <read_word_inc>
  821744:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  821748:	e0bffb17 	ldw	r2,-20(fp)
  82174c:	e0bfff15 	stw	r2,-4(fp)
  821750:	00808074 	movhi	r2,513
  821754:	1092d404 	addi	r2,r2,19280
  821758:	e0ffff17 	ldw	r3,-4(fp)
  82175c:	18800526 	beq	r3,r2,821774 <check_directory_table+0x5c>
  821760:	00818174 	movhi	r2,1541
  821764:	1092d404 	addi	r2,r2,19280
  821768:	e0ffff17 	ldw	r3,-4(fp)
  82176c:	18800826 	beq	r3,r2,821790 <check_directory_table+0x78>
  821770:	00000906 	br	821798 <check_directory_table+0x80>
    {
    case ZIP_DIRECTORY_RECORD:
      {
        ret_code = check_directory_header(&current_ptr);
  821774:	e13ffd04 	addi	r4,fp,-12
  821778:	08215ec0 	call	8215ec <check_directory_header>
  82177c:	e0bffc15 	stw	r2,-16(fp)
        if (ret_code)
  821780:	e0bffc17 	ldw	r2,-16(fp)
  821784:	1004c03a 	cmpne	r2,r2,zero
  821788:	1000051e 	bne	r2,zero,8217a0 <check_directory_table+0x88>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  82178c:	003feb06 	br	82173c <check_directory_table+0x24>
        }
        break;
      }
    case ZIP_END_OF_DIRECTORY_RECORD:
      {
        ret_code = 0;
  821790:	e03ffc15 	stw	zero,-16(fp)
        goto exit;
  821794:	00000206 	br	8217a0 <check_directory_table+0x88>
      }
    default:
      {
        ret_code = -ENOENT;
  821798:	00bfff84 	movi	r2,-2
  82179c:	e0bffc15 	stw	r2,-16(fp)
      }
    }
  }

exit:
  return ret_code;
  8217a0:	e0bffc17 	ldw	r2,-16(fp)
}
  8217a4:	e037883a 	mov	sp,fp
  8217a8:	dfc00117 	ldw	ra,4(sp)
  8217ac:	df000017 	ldw	fp,0(sp)
  8217b0:	dec00204 	addi	sp,sp,8
  8217b4:	f800283a 	ret

008217b8 <find_directory_entry>:
* tokens are in the right place, none of the files are comrpessed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int find_directory_entry(alt_ro_zipfs_dev* dev)
{
  8217b8:	defff904 	addi	sp,sp,-28
  8217bc:	dfc00615 	stw	ra,24(sp)
  8217c0:	df000515 	stw	fp,20(sp)
  8217c4:	df000504 	addi	fp,sp,20
  8217c8:	e13ffe15 	stw	r4,-8(fp)
  int ret_code = 0;
  8217cc:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->base;
  8217d0:	e0bffe17 	ldw	r2,-8(fp)
  8217d4:	10800a17 	ldw	r2,40(r2)
  8217d8:	e0bffd15 	stw	r2,-12(fp)

  while(1)
  {
    token = read_word_inc(&current_ptr);
  8217dc:	e13ffd04 	addi	r4,fp,-12
  8217e0:	08213ec0 	call	8213ec <read_word_inc>
  8217e4:	e0bffb15 	stw	r2,-20(fp)

    switch(token)
  8217e8:	e0bffb17 	ldw	r2,-20(fp)
  8217ec:	e0bfff15 	stw	r2,-4(fp)
  8217f0:	00808074 	movhi	r2,513
  8217f4:	1092d404 	addi	r2,r2,19280
  8217f8:	e0ffff17 	ldw	r3,-4(fp)
  8217fc:	18800c26 	beq	r3,r2,821830 <find_directory_entry+0x78>
  821800:	008100f4 	movhi	r2,1027
  821804:	1092d404 	addi	r2,r2,19280
  821808:	e0ffff17 	ldw	r3,-4(fp)
  82180c:	18800126 	beq	r3,r2,821814 <find_directory_entry+0x5c>
  821810:	00000c06 	br	821844 <find_directory_entry+0x8c>
    {
    case ZIP_FILE_RECORD:
      {
        ret_code = check_file_header(&current_ptr);
  821814:	e13ffd04 	addi	r4,fp,-12
  821818:	08214d40 	call	8214d4 <check_file_header>
  82181c:	e0bffc15 	stw	r2,-16(fp)
        if(ret_code)
  821820:	e0bffc17 	ldw	r2,-16(fp)
  821824:	1004c03a 	cmpne	r2,r2,zero
  821828:	1000081e 	bne	r2,zero,82184c <find_directory_entry+0x94>
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  82182c:	003feb06 	br	8217dc <find_directory_entry+0x24>
        }
        break;
      }
    case ZIP_DIRECTORY_RECORD:
      {
        dev->directory = current_ptr - 4;
  821830:	e0bffd17 	ldw	r2,-12(fp)
  821834:	10ffff04 	addi	r3,r2,-4
  821838:	e0bffe17 	ldw	r2,-8(fp)
  82183c:	10c00b15 	stw	r3,44(r2)
        goto exit;
  821840:	00000206 	br	82184c <find_directory_entry+0x94>
      }
    default:
      {
        ret_code = -ENOENT;
  821844:	00bfff84 	movi	r2,-2
  821848:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
      }
    }
  }
exit:
  return ret_code;
  82184c:	e0bffc17 	ldw	r2,-16(fp)
}
  821850:	e037883a 	mov	sp,fp
  821854:	dfc00117 	ldw	ra,4(sp)
  821858:	df000017 	ldw	fp,0(sp)
  82185c:	dec00204 	addi	sp,sp,8
  821860:	f800283a 	ret

00821864 <find_file_entry_by_name>:
*
* returns -ENOENT if fails
*/
static int find_file_entry_by_name( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                                    const alt_u8* name)
{
  821864:	defff504 	addi	sp,sp,-44
  821868:	dfc00a15 	stw	ra,40(sp)
  82186c:	df000915 	stw	fp,36(sp)
  821870:	df000904 	addi	fp,sp,36
  821874:	e13ffd15 	stw	r4,-12(fp)
  821878:	e17ffe15 	stw	r5,-8(fp)
  82187c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = -ENOENT;
  821880:	00bfff84 	movi	r2,-2
  821884:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->directory;
  821888:	e0bffd17 	ldw	r2,-12(fp)
  82188c:	10800b17 	ldw	r2,44(r2)
  821890:	e0bffa15 	stw	r2,-24(fp)
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  821894:	e0bffd17 	ldw	r2,-12(fp)
  821898:	10800b17 	ldw	r2,44(r2)
  82189c:	e0bffa15 	stw	r2,-24(fp)

  while(1)
  {
    token = read_word(current_ptr);
  8218a0:	e13ffa17 	ldw	r4,-24(fp)
  8218a4:	08213780 	call	821378 <read_word>
  8218a8:	e0bffb15 	stw	r2,-20(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  8218ac:	e0fffb17 	ldw	r3,-20(fp)
  8218b0:	00808074 	movhi	r2,513
  8218b4:	1092d404 	addi	r2,r2,19280
  8218b8:	18803c1e 	bne	r3,r2,8219ac <find_file_entry_by_name+0x148>
    {
      break;
    }

    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  8218bc:	e0bffa17 	ldw	r2,-24(fp)
  8218c0:	11000a84 	addi	r4,r2,42
  8218c4:	08213780 	call	821378 <read_word>
  8218c8:	e0bff715 	stw	r2,-36(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  8218cc:	e0bffa17 	ldw	r2,-24(fp)
  8218d0:	11000704 	addi	r4,r2,28
  8218d4:	082143c0 	call	82143c <read_half_word>
  8218d8:	e0bff98d 	sth	r2,-26(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  8218dc:	e0bffa17 	ldw	r2,-24(fp)
  8218e0:	11000784 	addi	r4,r2,30
  8218e4:	082143c0 	call	82143c <read_half_word>
  8218e8:	e0bff90d 	sth	r2,-28(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  8218ec:	e0bffa17 	ldw	r2,-24(fp)
  8218f0:	11000804 	addi	r4,r2,32
  8218f4:	082143c0 	call	82143c <read_half_word>
  8218f8:	e0bff88d 	sth	r2,-30(fp)

    if ((strlen((const char *)name) == name_len) && 
  8218fc:	e13fff17 	ldw	r4,-4(fp)
  821900:	08088440 	call	808844 <strlen>
  821904:	1007883a 	mov	r3,r2
  821908:	e0bff98b 	ldhu	r2,-26(fp)
  82190c:	18801c1e 	bne	r3,r2,821980 <find_file_entry_by_name+0x11c>
  821910:	e0bffa17 	ldw	r2,-24(fp)
  821914:	10800b84 	addi	r2,r2,46
  821918:	1009883a 	mov	r4,r2
  82191c:	e17fff17 	ldw	r5,-4(fp)
  821920:	e1bff98b 	ldhu	r6,-26(fp)
  821924:	08088b80 	call	8088b8 <strncmp>
  821928:	1004c03a 	cmpne	r2,r2,zero
  82192c:	1000141e 	bne	r2,zero,821980 <find_file_entry_by_name+0x11c>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  821930:	e0bffd17 	ldw	r2,-12(fp)
  821934:	10c00a17 	ldw	r3,40(r2)
  821938:	e0bff717 	ldw	r2,-36(fp)
  82193c:	1885883a 	add	r2,r3,r2
  821940:	11000704 	addi	r4,r2,28
  821944:	082143c0 	call	82143c <read_half_word>
  821948:	e0bff80d 	sth	r2,-32(fp)
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
  82194c:	e0bffd17 	ldw	r2,-12(fp)
  821950:	10c00a17 	ldw	r3,40(r2)
  821954:	e0bff717 	ldw	r2,-36(fp)
  821958:	1887883a 	add	r3,r3,r2
  82195c:	e0bff80b 	ldhu	r2,-32(fp)
  821960:	1887883a 	add	r3,r3,r2
  821964:	e0bff98b 	ldhu	r2,-26(fp)
  821968:	1885883a 	add	r2,r3,r2
  82196c:	10c00784 	addi	r3,r2,30
  821970:	e0bffe17 	ldw	r2,-8(fp)
  821974:	10c00115 	stw	r3,4(r2)
                  + offset + extra_file_len + name_len;
      ret_code = 0;
  821978:	e03ffc15 	stw	zero,-16(fp)
      break;
  82197c:	00000b06 	br	8219ac <find_file_entry_by_name+0x148>
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  821980:	e0fff98b 	ldhu	r3,-26(fp)
  821984:	e0bff90b 	ldhu	r2,-28(fp)
  821988:	1887883a 	add	r3,r3,r2
  82198c:	e0bff88b 	ldhu	r2,-30(fp)
  821990:	1885883a 	add	r2,r3,r2
  821994:	1007883a 	mov	r3,r2
  821998:	e0bffa17 	ldw	r2,-24(fp)
  82199c:	1885883a 	add	r2,r3,r2
  8219a0:	10800b84 	addi	r2,r2,46
  8219a4:	e0bffa15 	stw	r2,-24(fp)
  }
  8219a8:	003fbd06 	br	8218a0 <find_file_entry_by_name+0x3c>

  return ret_code;
  8219ac:	e0bffc17 	ldw	r2,-16(fp)
}
  8219b0:	e037883a 	mov	sp,fp
  8219b4:	dfc00117 	ldw	ra,4(sp)
  8219b8:	df000017 	ldw	fp,0(sp)
  8219bc:	dec00204 	addi	sp,sp,8
  8219c0:	f800283a 	ret

008219c4 <find_file_entry>:
*
* returns -EBADF if fails
*/
static int find_file_entry( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                            alt_u8** start, alt_u32* len)
{
  8219c4:	defff304 	addi	sp,sp,-52
  8219c8:	dfc00c15 	stw	ra,48(sp)
  8219cc:	df000b15 	stw	fp,44(sp)
  8219d0:	df000b04 	addi	fp,sp,44
  8219d4:	e13ffc15 	stw	r4,-16(fp)
  8219d8:	e17ffd15 	stw	r5,-12(fp)
  8219dc:	e1bffe15 	stw	r6,-8(fp)
  8219e0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EBADF;
  8219e4:	00bffdc4 	movi	r2,-9
  8219e8:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 token;
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  8219ec:	e0bffc17 	ldw	r2,-16(fp)
  8219f0:	10800b17 	ldw	r2,44(r2)
  8219f4:	e0bff915 	stw	r2,-28(fp)
  alt_u8* end;
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  8219f8:	e0bffc17 	ldw	r2,-16(fp)
  8219fc:	10800b17 	ldw	r2,44(r2)
  821a00:	e0bff915 	stw	r2,-28(fp)
  821a04:	00000006 	br	821a08 <find_file_entry+0x44>

  while(1)
  {
    token = read_word(current_ptr);
  821a08:	e13ff917 	ldw	r4,-28(fp)
  821a0c:	08213780 	call	821378 <read_word>
  821a10:	e0bffa15 	stw	r2,-24(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  821a14:	e0fffa17 	ldw	r3,-24(fp)
  821a18:	00808074 	movhi	r2,513
  821a1c:	1092d404 	addi	r2,r2,19280
  821a20:	1880421e 	bne	r3,r2,821b2c <find_file_entry+0x168>
    {
      break;
    }
    
    *len = read_word(current_ptr + ZIP_DIR_UNCOMPRESSED_LEN);
  821a24:	e0bff917 	ldw	r2,-28(fp)
  821a28:	11000604 	addi	r4,r2,24
  821a2c:	08213780 	call	821378 <read_word>
  821a30:	1007883a 	mov	r3,r2
  821a34:	e0bfff17 	ldw	r2,-4(fp)
  821a38:	10c00015 	stw	r3,0(r2)
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  821a3c:	e0bff917 	ldw	r2,-28(fp)
  821a40:	11000a84 	addi	r4,r2,42
  821a44:	08213780 	call	821378 <read_word>
  821a48:	e0bff515 	stw	r2,-44(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  821a4c:	e0bff917 	ldw	r2,-28(fp)
  821a50:	11000704 	addi	r4,r2,28
  821a54:	082143c0 	call	82143c <read_half_word>
  821a58:	e0bff78d 	sth	r2,-34(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  821a5c:	e0bff917 	ldw	r2,-28(fp)
  821a60:	11000784 	addi	r4,r2,30
  821a64:	082143c0 	call	82143c <read_half_word>
  821a68:	e0bff70d 	sth	r2,-36(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  821a6c:	e0bff917 	ldw	r2,-28(fp)
  821a70:	11000804 	addi	r4,r2,32
  821a74:	082143c0 	call	82143c <read_half_word>
  821a78:	e0bff68d 	sth	r2,-38(fp)
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  821a7c:	e0fff78b 	ldhu	r3,-34(fp)
  821a80:	e0bff70b 	ldhu	r2,-36(fp)
  821a84:	1887883a 	add	r3,r3,r2
  821a88:	e0bff68b 	ldhu	r2,-38(fp)
  821a8c:	1885883a 	add	r2,r3,r2
  821a90:	1007883a 	mov	r3,r2
  821a94:	e0bff917 	ldw	r2,-28(fp)
  821a98:	1885883a 	add	r2,r3,r2
  821a9c:	10800b84 	addi	r2,r2,46
  821aa0:	e0bff915 	stw	r2,-28(fp)

    extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  821aa4:	e0bffc17 	ldw	r2,-16(fp)
  821aa8:	10c00a17 	ldw	r3,40(r2)
  821aac:	e0bff517 	ldw	r2,-44(fp)
  821ab0:	1885883a 	add	r2,r3,r2
  821ab4:	11000704 	addi	r4,r2,28
  821ab8:	082143c0 	call	82143c <read_half_word>
  821abc:	e0bff60d 	sth	r2,-40(fp)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;
  821ac0:	e0bffc17 	ldw	r2,-16(fp)
  821ac4:	10c00a17 	ldw	r3,40(r2)
  821ac8:	e0bff517 	ldw	r2,-44(fp)
  821acc:	1887883a 	add	r3,r3,r2
  821ad0:	e0bff60b 	ldhu	r2,-40(fp)
  821ad4:	1887883a 	add	r3,r3,r2
  821ad8:	e0bff78b 	ldhu	r2,-34(fp)
  821adc:	1885883a 	add	r2,r3,r2
  821ae0:	10c00784 	addi	r3,r2,30
  821ae4:	e0bffe17 	ldw	r2,-8(fp)
  821ae8:	10c00015 	stw	r3,0(r2)

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
  821aec:	e0bffe17 	ldw	r2,-8(fp)
  821af0:	10c00017 	ldw	r3,0(r2)
  821af4:	e0bfff17 	ldw	r2,-4(fp)
  821af8:	10800017 	ldw	r2,0(r2)
  821afc:	1885883a 	add	r2,r3,r2
  821b00:	e0bff815 	stw	r2,-32(fp)
    if ((fd->priv >= *start ) &&
  821b04:	e0bffd17 	ldw	r2,-12(fp)
  821b08:	10c00117 	ldw	r3,4(r2)
  821b0c:	e0bffe17 	ldw	r2,-8(fp)
  821b10:	10800017 	ldw	r2,0(r2)
  821b14:	18bfbc36 	bltu	r3,r2,821a08 <find_file_entry+0x44>
  821b18:	e0bffd17 	ldw	r2,-12(fp)
  821b1c:	10c00117 	ldw	r3,4(r2)
  821b20:	e0bff817 	ldw	r2,-32(fp)
  821b24:	10ffb836 	bltu	r2,r3,821a08 <find_file_entry+0x44>
        (fd->priv <= end))
    {
      ret_code = 0;
  821b28:	e03ffb15 	stw	zero,-20(fp)
      break;
    }
  }

  return ret_code;
  821b2c:	e0bffb17 	ldw	r2,-20(fp)
}
  821b30:	e037883a 	mov	sp,fp
  821b34:	dfc00117 	ldw	ra,4(sp)
  821b38:	df000017 	ldw	fp,0(sp)
  821b3c:	dec00204 	addi	sp,sp,8
  821b40:	f800283a 	ret

00821b44 <alt_ro_zipfs_open>:
* Find the Central dircetory and then find the pointer to this file
* from that.
*
*/
int alt_ro_zipfs_open(alt_fd* fd, const char* name, int flags, int mode)
{
  821b44:	defff804 	addi	sp,sp,-32
  821b48:	dfc00715 	stw	ra,28(sp)
  821b4c:	df000615 	stw	fp,24(sp)
  821b50:	df000604 	addi	fp,sp,24
  821b54:	e13ffc15 	stw	r4,-16(fp)
  821b58:	e17ffd15 	stw	r5,-12(fp)
  821b5c:	e1bffe15 	stw	r6,-8(fp)
  821b60:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EROFS;
  821b64:	00bff884 	movi	r2,-30
  821b68:	e0bffb15 	stw	r2,-20(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  821b6c:	e0bffc17 	ldw	r2,-16(fp)
  821b70:	10800017 	ldw	r2,0(r2)
  821b74:	e0bffa15 	stw	r2,-24(fp)

#ifdef ALT_USE_DIRECT_DRIVERS
  ALT_LINK_ERROR("Error: Read-only ZIP filesystem not supported when direct drivers are used.");
#endif

  if (flags == O_RDONLY )
  821b78:	e0bffe17 	ldw	r2,-8(fp)
  821b7c:	1004c03a 	cmpne	r2,r2,zero
  821b80:	1000101e 	bne	r2,zero,821bc4 <alt_ro_zipfs_open+0x80>
  {
    if (dev->directory != NULL)
  821b84:	e0bffa17 	ldw	r2,-24(fp)
  821b88:	10800b17 	ldw	r2,44(r2)
  821b8c:	1005003a 	cmpeq	r2,r2,zero
  821b90:	10000c1e 	bne	r2,zero,821bc4 <alt_ro_zipfs_open+0x80>
    {
      ret_code = find_file_entry_by_name( dev, fd, 
  821b94:	e0bffa17 	ldw	r2,-24(fp)
  821b98:	11000217 	ldw	r4,8(r2)
  821b9c:	08088440 	call	808844 <strlen>
  821ba0:	1007883a 	mov	r3,r2
  821ba4:	e0bffd17 	ldw	r2,-12(fp)
  821ba8:	1885883a 	add	r2,r3,r2
  821bac:	10800044 	addi	r2,r2,1
  821bb0:	100d883a 	mov	r6,r2
  821bb4:	e13ffa17 	ldw	r4,-24(fp)
  821bb8:	e17ffc17 	ldw	r5,-16(fp)
  821bbc:	08218640 	call	821864 <find_file_entry_by_name>
  821bc0:	e0bffb15 	stw	r2,-20(fp)
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
    }
  }

  return ret_code;
  821bc4:	e0bffb17 	ldw	r2,-20(fp)
}
  821bc8:	e037883a 	mov	sp,fp
  821bcc:	dfc00117 	ldw	ra,4(sp)
  821bd0:	df000017 	ldw	fp,0(sp)
  821bd4:	dec00204 	addi	sp,sp,8
  821bd8:	f800283a 	ret

00821bdc <alt_ro_zipfs_read>:
* alt_ro_zipfs_read
*
* Read the file
*/
int alt_ro_zipfs_read(alt_fd* fd, char* ptr, int len)
{
  821bdc:	defff104 	addi	sp,sp,-60
  821be0:	dfc00e15 	stw	ra,56(sp)
  821be4:	df000d15 	stw	fp,52(sp)
  821be8:	df000d04 	addi	fp,sp,52
  821bec:	e13ffb15 	stw	r4,-20(fp)
  821bf0:	e17ffc15 	stw	r5,-16(fp)
  821bf4:	e1bffd15 	stw	r6,-12(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  821bf8:	e0bffb17 	ldw	r2,-20(fp)
  821bfc:	10800017 	ldw	r2,0(r2)
  821c00:	e0bff815 	stw	r2,-32(fp)
  alt_u8 *start, *current;
  alt_u32 file_len;
  int amount_to_copy;
  alt_irq_context context;

  find_file_entry(dev, fd, &start, &file_len);
  821c04:	e1bff904 	addi	r6,fp,-28
  821c08:	e1fffa04 	addi	r7,fp,-24
  821c0c:	e13ff817 	ldw	r4,-32(fp)
  821c10:	e17ffb17 	ldw	r5,-20(fp)
  821c14:	08219c40 	call	8219c4 <find_file_entry>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  821c18:	0005303a 	rdctl	r2,status
  821c1c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  821c20:	e0fff417 	ldw	r3,-48(fp)
  821c24:	00bfff84 	movi	r2,-2
  821c28:	1884703a 	and	r2,r3,r2
  821c2c:	1001703a 	wrctl	status,r2
  
  return context;
  821c30:	e0bff417 	ldw	r2,-48(fp)
  *
  * We could use a Mutex or a binary semaphore, but those would have 
  * a much bigger code footprint and disable interrupts for as many 
  * instructions anyway
  */
  context = alt_irq_disable_all();
  821c34:	e0bff515 	stw	r2,-44(fp)
  current = fd->priv;
  821c38:	e0bffb17 	ldw	r2,-20(fp)
  821c3c:	10800117 	ldw	r2,4(r2)
  821c40:	e0bff715 	stw	r2,-36(fp)
  amount_to_copy = MIN(len, file_len - (current - start));
  821c44:	e13ffa17 	ldw	r4,-24(fp)
  821c48:	e0fff717 	ldw	r3,-36(fp)
  821c4c:	e0bff917 	ldw	r2,-28(fp)
  821c50:	1885c83a 	sub	r2,r3,r2
  821c54:	2085c83a 	sub	r2,r4,r2
  821c58:	e0fffd17 	ldw	r3,-12(fp)
  821c5c:	e0ffff15 	stw	r3,-4(fp)
  821c60:	e0bffe15 	stw	r2,-8(fp)
  821c64:	e0bfff17 	ldw	r2,-4(fp)
  821c68:	e0fffe17 	ldw	r3,-8(fp)
  821c6c:	10c0022e 	bgeu	r2,r3,821c78 <alt_ro_zipfs_read+0x9c>
  821c70:	e0bfff17 	ldw	r2,-4(fp)
  821c74:	e0bffe15 	stw	r2,-8(fp)
  821c78:	e0fffe17 	ldw	r3,-8(fp)
  821c7c:	e0fff615 	stw	r3,-40(fp)
  fd->priv += amount_to_copy;
  821c80:	e0bffb17 	ldw	r2,-20(fp)
  821c84:	10c00117 	ldw	r3,4(r2)
  821c88:	e0bff617 	ldw	r2,-40(fp)
  821c8c:	1887883a 	add	r3,r3,r2
  821c90:	e0bffb17 	ldw	r2,-20(fp)
  821c94:	10c00115 	stw	r3,4(r2)
  821c98:	e0bff517 	ldw	r2,-44(fp)
  821c9c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  821ca0:	e0bff317 	ldw	r2,-52(fp)
  821ca4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(context);

  memcpy(ptr, current, amount_to_copy);
  821ca8:	e1bff617 	ldw	r6,-40(fp)
  821cac:	e0bffc17 	ldw	r2,-16(fp)
  821cb0:	e0fff717 	ldw	r3,-36(fp)
  821cb4:	1009883a 	mov	r4,r2
  821cb8:	180b883a 	mov	r5,r3
  821cbc:	08073380 	call	807338 <memcpy>
  
  return amount_to_copy;
  821cc0:	e0bff617 	ldw	r2,-40(fp)
}
  821cc4:	e037883a 	mov	sp,fp
  821cc8:	dfc00117 	ldw	ra,4(sp)
  821ccc:	df000017 	ldw	fp,0(sp)
  821cd0:	dec00204 	addi	sp,sp,8
  821cd4:	f800283a 	ret

00821cd8 <alt_ro_zipfs_seek>:
* Move around within a file
*
* returns -EROFS for a seek beyond the end of the file
*/
int alt_ro_zipfs_seek(alt_fd* fd, int ptr, int dir)
{
  821cd8:	defff604 	addi	sp,sp,-40
  821cdc:	dfc00915 	stw	ra,36(sp)
  821ce0:	df000815 	stw	fp,32(sp)
  821ce4:	df000804 	addi	fp,sp,32
  821ce8:	e13ffc15 	stw	r4,-16(fp)
  821cec:	e17ffd15 	stw	r5,-12(fp)
  821cf0:	e1bffe15 	stw	r6,-8(fp)
  int ret_code;
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  821cf4:	e0bffc17 	ldw	r2,-16(fp)
  821cf8:	10800017 	ldw	r2,0(r2)
  821cfc:	e0bff815 	stw	r2,-32(fp)
  alt_u8* start;
  alt_u32 len;

  find_file_entry(dev, fd, &start, &len);
  821d00:	e1bffa04 	addi	r6,fp,-24
  821d04:	e1fffb04 	addi	r7,fp,-20
  821d08:	e13ff817 	ldw	r4,-32(fp)
  821d0c:	e17ffc17 	ldw	r5,-16(fp)
  821d10:	08219c40 	call	8219c4 <find_file_entry>

  switch(dir)
  821d14:	e0bffe17 	ldw	r2,-8(fp)
  821d18:	e0bfff15 	stw	r2,-4(fp)
  821d1c:	e0ffff17 	ldw	r3,-4(fp)
  821d20:	18800060 	cmpeqi	r2,r3,1
  821d24:	1000071e 	bne	r2,zero,821d44 <alt_ro_zipfs_seek+0x6c>
  821d28:	e0ffff17 	ldw	r3,-4(fp)
  821d2c:	188000a0 	cmpeqi	r2,r3,2
  821d30:	1000221e 	bne	r2,zero,821dbc <alt_ro_zipfs_seek+0xe4>
  821d34:	e0ffff17 	ldw	r3,-4(fp)
  821d38:	1805003a 	cmpeq	r2,r3,zero
  821d3c:	1000131e 	bne	r2,zero,821d8c <alt_ro_zipfs_seek+0xb4>
  821d40:	00002b06 	br	821df0 <alt_ro_zipfs_seek+0x118>
  {

  case SEEK_CUR:
    {
      /* Seek from current position */
      if ((fd->priv + ptr) > (start +len))
  821d44:	e0bffc17 	ldw	r2,-16(fp)
  821d48:	10c00117 	ldw	r3,4(r2)
  821d4c:	e0bffd17 	ldw	r2,-12(fp)
  821d50:	1889883a 	add	r4,r3,r2
  821d54:	e0fffa17 	ldw	r3,-24(fp)
  821d58:	e0bffb17 	ldw	r2,-20(fp)
  821d5c:	1885883a 	add	r2,r3,r2
  821d60:	1100032e 	bgeu	r2,r4,821d70 <alt_ro_zipfs_seek+0x98>
      {
        ret_code = -EINVAL;
  821d64:	00bffa84 	movi	r2,-22
  821d68:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  821d6c:	00002606 	br	821e08 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv += ptr;
  821d70:	e0bffc17 	ldw	r2,-16(fp)
  821d74:	10c00117 	ldw	r3,4(r2)
  821d78:	e0bffd17 	ldw	r2,-12(fp)
  821d7c:	1887883a 	add	r3,r3,r2
  821d80:	e0bffc17 	ldw	r2,-16(fp)
  821d84:	10c00115 	stw	r3,4(r2)
      break;
  821d88:	00001906 	br	821df0 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_SET:
    {
      /* Seek from the beginning */
      if (ptr > len)
  821d8c:	e0fffd17 	ldw	r3,-12(fp)
  821d90:	e0bffb17 	ldw	r2,-20(fp)
  821d94:	10c0032e 	bgeu	r2,r3,821da4 <alt_ro_zipfs_seek+0xcc>
      {
        ret_code = -EINVAL;
  821d98:	00bffa84 	movi	r2,-22
  821d9c:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  821da0:	00001906 	br	821e08 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr;
  821da4:	e0fffa17 	ldw	r3,-24(fp)
  821da8:	e0bffd17 	ldw	r2,-12(fp)
  821dac:	1887883a 	add	r3,r3,r2
  821db0:	e0bffc17 	ldw	r2,-16(fp)
  821db4:	10c00115 	stw	r3,4(r2)
      break;
  821db8:	00000d06 	br	821df0 <alt_ro_zipfs_seek+0x118>
    }
  case SEEK_END:
    {
      if(ptr > 0)
  821dbc:	e0bffd17 	ldw	r2,-12(fp)
  821dc0:	10800050 	cmplti	r2,r2,1
  821dc4:	1000031e 	bne	r2,zero,821dd4 <alt_ro_zipfs_seek+0xfc>
      {
        ret_code = -EINVAL;
  821dc8:	00bffa84 	movi	r2,-22
  821dcc:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  821dd0:	00000d06 	br	821e08 <alt_ro_zipfs_seek+0x130>
      }

      fd->priv = start + ptr + len;
  821dd4:	e0fffa17 	ldw	r3,-24(fp)
  821dd8:	e0bffd17 	ldw	r2,-12(fp)
  821ddc:	1887883a 	add	r3,r3,r2
  821de0:	e0bffb17 	ldw	r2,-20(fp)
  821de4:	1887883a 	add	r3,r3,r2
  821de8:	e0bffc17 	ldw	r2,-16(fp)
  821dec:	10c00115 	stw	r3,4(r2)
      break;
    }
  }
  ret_code = (int)(fd->priv - start);
  821df0:	e0bffc17 	ldw	r2,-16(fp)
  821df4:	10800117 	ldw	r2,4(r2)
  821df8:	1007883a 	mov	r3,r2
  821dfc:	e0bffa17 	ldw	r2,-24(fp)
  821e00:	1885c83a 	sub	r2,r3,r2
  821e04:	e0bff915 	stw	r2,-28(fp)

exit:
  return ret_code;
  821e08:	e0bff917 	ldw	r2,-28(fp)
}
  821e0c:	e037883a 	mov	sp,fp
  821e10:	dfc00117 	ldw	ra,4(sp)
  821e14:	df000017 	ldw	fp,0(sp)
  821e18:	dec00204 	addi	sp,sp,8
  821e1c:	f800283a 	ret

00821e20 <alt_ro_zipfs_fstat>:
* 
* Return the file status information, the only fields we fill in are
* the size and that this really is a file, not a device
*/
int alt_ro_zipfs_fstat(alt_fd* fd, struct stat* buf)
{
  821e20:	defff804 	addi	sp,sp,-32
  821e24:	dfc00715 	stw	ra,28(sp)
  821e28:	df000615 	stw	fp,24(sp)
  821e2c:	df000604 	addi	fp,sp,24
  821e30:	e13ffe15 	stw	r4,-8(fp)
  821e34:	e17fff15 	stw	r5,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  821e38:	e0bffe17 	ldw	r2,-8(fp)
  821e3c:	10800017 	ldw	r2,0(r2)
  821e40:	e0bffb15 	stw	r2,-20(fp)
  alt_u8* start;
  alt_u32 len;
  int ret_code = 0;
  821e44:	e03ffa15 	stw	zero,-24(fp)

  find_file_entry(dev, fd, &start, &len);
  821e48:	e1bffc04 	addi	r6,fp,-16
  821e4c:	e1fffd04 	addi	r7,fp,-12
  821e50:	e13ffb17 	ldw	r4,-20(fp)
  821e54:	e17ffe17 	ldw	r5,-8(fp)
  821e58:	08219c40 	call	8219c4 <find_file_entry>
  buf->st_mode = S_IFREG;
  821e5c:	e0ffff17 	ldw	r3,-4(fp)
  821e60:	00a00014 	movui	r2,32768
  821e64:	18800115 	stw	r2,4(r3)
  buf->st_size = (off_t)len;
  821e68:	e0bffd17 	ldw	r2,-12(fp)
  821e6c:	1007883a 	mov	r3,r2
  821e70:	e0bfff17 	ldw	r2,-4(fp)
  821e74:	10c00415 	stw	r3,16(r2)

  return ret_code;
  821e78:	e0bffa17 	ldw	r2,-24(fp)
}
  821e7c:	e037883a 	mov	sp,fp
  821e80:	dfc00117 	ldw	ra,4(sp)
  821e84:	df000017 	ldw	fp,0(sp)
  821e88:	dec00204 	addi	sp,sp,8
  821e8c:	f800283a 	ret

00821e90 <alt_ro_zipfs_check_valid>:
* check that the file system is a valid zip file
* if so return 1
*
*/
int alt_ro_zipfs_check_valid(alt_ro_zipfs_dev* dev)
{
  821e90:	defffc04 	addi	sp,sp,-16
  821e94:	dfc00315 	stw	ra,12(sp)
  821e98:	df000215 	stw	fp,8(sp)
  821e9c:	df000204 	addi	fp,sp,8
  821ea0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  821ea4:	e03ffe15 	stw	zero,-8(fp)
  if (find_directory_entry(dev) != -ENOENT)
  821ea8:	e13fff17 	ldw	r4,-4(fp)
  821eac:	08217b80 	call	8217b8 <find_directory_entry>
  821eb0:	10bfffa0 	cmpeqi	r2,r2,-2
  821eb4:	1000061e 	bne	r2,zero,821ed0 <alt_ro_zipfs_check_valid+0x40>
  {
    if (check_directory_table(dev) != -ENOENT)
  821eb8:	e13fff17 	ldw	r4,-4(fp)
  821ebc:	08217180 	call	821718 <check_directory_table>
  821ec0:	10bfffa0 	cmpeqi	r2,r2,-2
  821ec4:	1000021e 	bne	r2,zero,821ed0 <alt_ro_zipfs_check_valid+0x40>
    {
      ret_code = 1;
  821ec8:	00800044 	movi	r2,1
  821ecc:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return ret_code;
  821ed0:	e0bffe17 	ldw	r2,-8(fp)
}
  821ed4:	e037883a 	mov	sp,fp
  821ed8:	dfc00117 	ldw	ra,4(sp)
  821edc:	df000017 	ldw	fp,0(sp)
  821ee0:	dec00204 	addi	sp,sp,8
  821ee4:	f800283a 	ret

00821ee8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  821ee8:	defffc04 	addi	sp,sp,-16
  821eec:	df000315 	stw	fp,12(sp)
  821ef0:	df000304 	addi	fp,sp,12
  821ef4:	e13ffe15 	stw	r4,-8(fp)
  821ef8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  821efc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  821f00:	e0bfff17 	ldw	r2,-4(fp)
  821f04:	1004c03a 	cmpne	r2,r2,zero
  821f08:	1000061e 	bne	r2,zero,821f24 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  821f0c:	e0bffe17 	ldw	r2,-8(fp)
  821f10:	1007883a 	mov	r3,r2
  821f14:	e0bffd03 	ldbu	r2,-12(fp)
  821f18:	10c4b03a 	or	r2,r2,r3
  821f1c:	e0bffd05 	stb	r2,-12(fp)
  821f20:	00000806 	br	821f44 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  821f24:	e0bffe17 	ldw	r2,-8(fp)
  821f28:	1007883a 	mov	r3,r2
  821f2c:	e0bffd03 	ldbu	r2,-12(fp)
  821f30:	10c4b03a 	or	r2,r2,r3
  821f34:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  821f38:	e0bffd03 	ldbu	r2,-12(fp)
  821f3c:	10801014 	ori	r2,r2,64
  821f40:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  821f44:	e0fffd03 	ldbu	r3,-12(fp)
  821f48:	00bfe004 	movi	r2,-128
  821f4c:	1884b03a 	or	r2,r3,r2
  821f50:	10803fcc 	andi	r2,r2,255
}
  821f54:	e037883a 	mov	sp,fp
  821f58:	df000017 	ldw	fp,0(sp)
  821f5c:	dec00104 	addi	sp,sp,4
  821f60:	f800283a 	ret

00821f64 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  821f64:	defffd04 	addi	sp,sp,-12
  821f68:	df000215 	stw	fp,8(sp)
  821f6c:	df000204 	addi	fp,sp,8
  821f70:	e13ffe15 	stw	r4,-8(fp)
  821f74:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  821f78:	e0bffe17 	ldw	r2,-8(fp)
  821f7c:	10800a17 	ldw	r2,40(r2)
  821f80:	e0ffff03 	ldbu	r3,-4(fp)
  821f84:	10c00025 	stbio	r3,0(r2)
}
  821f88:	e037883a 	mov	sp,fp
  821f8c:	df000017 	ldw	fp,0(sp)
  821f90:	dec00104 	addi	sp,sp,4
  821f94:	f800283a 	ret

00821f98 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  821f98:	defffe04 	addi	sp,sp,-8
  821f9c:	df000115 	stw	fp,4(sp)
  821fa0:	df000104 	addi	fp,sp,4
  821fa4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  821fa8:	e0bfff17 	ldw	r2,-4(fp)
  821fac:	10800a17 	ldw	r2,40(r2)
  821fb0:	1007883a 	mov	r3,r2
  821fb4:	00800044 	movi	r2,1
  821fb8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  821fbc:	e037883a 	mov	sp,fp
  821fc0:	df000017 	ldw	fp,0(sp)
  821fc4:	dec00104 	addi	sp,sp,4
  821fc8:	f800283a 	ret

00821fcc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  821fcc:	defffc04 	addi	sp,sp,-16
  821fd0:	dfc00315 	stw	ra,12(sp)
  821fd4:	df000215 	stw	fp,8(sp)
  821fd8:	df000204 	addi	fp,sp,8
  821fdc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  821fe0:	e13fff17 	ldw	r4,-4(fp)
  821fe4:	01402174 	movhi	r5,133
  821fe8:	2942c204 	addi	r5,r5,2824
  821fec:	083a1c00 	call	83a1c0 <alt_find_dev>
  821ff0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  821ff4:	e0bffe17 	ldw	r2,-8(fp)
}
  821ff8:	e037883a 	mov	sp,fp
  821ffc:	dfc00117 	ldw	ra,4(sp)
  822000:	df000017 	ldw	fp,0(sp)
  822004:	dec00204 	addi	sp,sp,8
  822008:	f800283a 	ret

0082200c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  82200c:	defffb04 	addi	sp,sp,-20
  822010:	df000415 	stw	fp,16(sp)
  822014:	df000404 	addi	fp,sp,16
  822018:	e13ffd15 	stw	r4,-12(fp)
  82201c:	e17ffe15 	stw	r5,-8(fp)
  822020:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  822024:	e03ffc15 	stw	zero,-16(fp)
  822028:	00000f06 	br	822068 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  82202c:	e0bffd17 	ldw	r2,-12(fp)
  822030:	10800a17 	ldw	r2,40(r2)
  822034:	11000044 	addi	r4,r2,1
  822038:	e0fffc17 	ldw	r3,-16(fp)
  82203c:	e0bffe17 	ldw	r2,-8(fp)
  822040:	1885883a 	add	r2,r3,r2
  822044:	10800003 	ldbu	r2,0(r2)
  822048:	10c03fcc 	andi	r3,r2,255
  82204c:	18c0201c 	xori	r3,r3,128
  822050:	18ffe004 	addi	r3,r3,-128
  822054:	2005883a 	mov	r2,r4
  822058:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  82205c:	e0bffc17 	ldw	r2,-16(fp)
  822060:	10800044 	addi	r2,r2,1
  822064:	e0bffc15 	stw	r2,-16(fp)
  822068:	e0fffc17 	ldw	r3,-16(fp)
  82206c:	e0bfff17 	ldw	r2,-4(fp)
  822070:	18bfee36 	bltu	r3,r2,82202c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  822074:	e037883a 	mov	sp,fp
  822078:	df000017 	ldw	fp,0(sp)
  82207c:	dec00104 	addi	sp,sp,4
  822080:	f800283a 	ret

00822084 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  822084:	defffd04 	addi	sp,sp,-12
  822088:	df000215 	stw	fp,8(sp)
  82208c:	df000204 	addi	fp,sp,8
  822090:	e13ffe15 	stw	r4,-8(fp)
  822094:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  822098:	00000d06 	br	8220d0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  82209c:	e0bffe17 	ldw	r2,-8(fp)
  8220a0:	10800a17 	ldw	r2,40(r2)
  8220a4:	11000044 	addi	r4,r2,1
  8220a8:	e0bfff17 	ldw	r2,-4(fp)
  8220ac:	10800003 	ldbu	r2,0(r2)
  8220b0:	10c03fcc 	andi	r3,r2,255
  8220b4:	18c0201c 	xori	r3,r3,128
  8220b8:	18ffe004 	addi	r3,r3,-128
  8220bc:	2005883a 	mov	r2,r4
  8220c0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8220c4:	e0bfff17 	ldw	r2,-4(fp)
  8220c8:	10800044 	addi	r2,r2,1
  8220cc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8220d0:	e0bfff17 	ldw	r2,-4(fp)
  8220d4:	10800003 	ldbu	r2,0(r2)
  8220d8:	10803fcc 	andi	r2,r2,255
  8220dc:	1080201c 	xori	r2,r2,128
  8220e0:	10bfe004 	addi	r2,r2,-128
  8220e4:	1004c03a 	cmpne	r2,r2,zero
  8220e8:	103fec1e 	bne	r2,zero,82209c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8220ec:	e037883a 	mov	sp,fp
  8220f0:	df000017 	ldw	fp,0(sp)
  8220f4:	dec00104 	addi	sp,sp,4
  8220f8:	f800283a 	ret

008220fc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  8220fc:	defffb04 	addi	sp,sp,-20
  822100:	dfc00415 	stw	ra,16(sp)
  822104:	df000315 	stw	fp,12(sp)
  822108:	df000304 	addi	fp,sp,12
  82210c:	e13ffd15 	stw	r4,-12(fp)
  822110:	e17ffe15 	stw	r5,-8(fp)
  822114:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  822118:	e0bffd17 	ldw	r2,-12(fp)
  82211c:	10800017 	ldw	r2,0(r2)
  822120:	1009883a 	mov	r4,r2
  822124:	e1bfff17 	ldw	r6,-4(fp)
  822128:	e17ffe17 	ldw	r5,-8(fp)
  82212c:	082200c0 	call	82200c <alt_up_character_lcd_write>
	return 0;
  822130:	0005883a 	mov	r2,zero
}
  822134:	e037883a 	mov	sp,fp
  822138:	dfc00117 	ldw	ra,4(sp)
  82213c:	df000017 	ldw	fp,0(sp)
  822140:	dec00204 	addi	sp,sp,8
  822144:	f800283a 	ret

00822148 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  822148:	defff904 	addi	sp,sp,-28
  82214c:	dfc00615 	stw	ra,24(sp)
  822150:	df000515 	stw	fp,20(sp)
  822154:	df000504 	addi	fp,sp,20
  822158:	e13ffc15 	stw	r4,-16(fp)
  82215c:	e17ffd15 	stw	r5,-12(fp)
  822160:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  822164:	e0bffd17 	ldw	r2,-12(fp)
  822168:	10800a28 	cmpgeui	r2,r2,40
  82216c:	1000031e 	bne	r2,zero,82217c <alt_up_character_lcd_set_cursor_pos+0x34>
  822170:	e0bffe17 	ldw	r2,-8(fp)
  822174:	108000b0 	cmpltui	r2,r2,2
  822178:	1000031e 	bne	r2,zero,822188 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  82217c:	00bfffc4 	movi	r2,-1
  822180:	e0bfff15 	stw	r2,-4(fp)
  822184:	00000806 	br	8221a8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  822188:	e13ffd17 	ldw	r4,-12(fp)
  82218c:	e17ffe17 	ldw	r5,-8(fp)
  822190:	0821ee80 	call	821ee8 <get_DDRAM_addr>
  822194:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  822198:	e17ffb03 	ldbu	r5,-20(fp)
  82219c:	e13ffc17 	ldw	r4,-16(fp)
  8221a0:	0821f640 	call	821f64 <alt_up_character_lcd_send_cmd>
	return 0;
  8221a4:	e03fff15 	stw	zero,-4(fp)
  8221a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8221ac:	e037883a 	mov	sp,fp
  8221b0:	dfc00117 	ldw	ra,4(sp)
  8221b4:	df000017 	ldw	fp,0(sp)
  8221b8:	dec00204 	addi	sp,sp,8
  8221bc:	f800283a 	ret

008221c0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8221c0:	defff904 	addi	sp,sp,-28
  8221c4:	dfc00615 	stw	ra,24(sp)
  8221c8:	df000515 	stw	fp,20(sp)
  8221cc:	df000504 	addi	fp,sp,20
  8221d0:	e13ffc15 	stw	r4,-16(fp)
  8221d4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8221d8:	e0bffd17 	ldw	r2,-12(fp)
  8221dc:	1005003a 	cmpeq	r2,r2,zero
  8221e0:	10001e1e 	bne	r2,zero,82225c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8221e4:	e0bffd17 	ldw	r2,-12(fp)
  8221e8:	10800050 	cmplti	r2,r2,1
  8221ec:	1000031e 	bne	r2,zero,8221fc <alt_up_character_lcd_shift_cursor+0x3c>
  8221f0:	00800504 	movi	r2,20
  8221f4:	e0bfff05 	stb	r2,-4(fp)
  8221f8:	00000206 	br	822204 <alt_up_character_lcd_shift_cursor+0x44>
  8221fc:	00c00404 	movi	r3,16
  822200:	e0ffff05 	stb	r3,-4(fp)
  822204:	e0bfff03 	ldbu	r2,-4(fp)
  822208:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  82220c:	e0fffd17 	ldw	r3,-12(fp)
  822210:	e0fffe15 	stw	r3,-8(fp)
  822214:	e0fffe17 	ldw	r3,-8(fp)
  822218:	1804403a 	cmpge	r2,r3,zero
  82221c:	1000031e 	bne	r2,zero,82222c <alt_up_character_lcd_shift_cursor+0x6c>
  822220:	e0bffe17 	ldw	r2,-8(fp)
  822224:	0085c83a 	sub	r2,zero,r2
  822228:	e0bffe15 	stw	r2,-8(fp)
  82222c:	e0fffe17 	ldw	r3,-8(fp)
  822230:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  822234:	00000306 	br	822244 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  822238:	e17ffb43 	ldbu	r5,-19(fp)
  82223c:	e13ffc17 	ldw	r4,-16(fp)
  822240:	0821f640 	call	821f64 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  822244:	e0bffb03 	ldbu	r2,-20(fp)
  822248:	10bfffc4 	addi	r2,r2,-1
  82224c:	e0bffb05 	stb	r2,-20(fp)
  822250:	e0bffb03 	ldbu	r2,-20(fp)
  822254:	10803fd8 	cmpnei	r2,r2,255
  822258:	103ff71e 	bne	r2,zero,822238 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  82225c:	e037883a 	mov	sp,fp
  822260:	dfc00117 	ldw	ra,4(sp)
  822264:	df000017 	ldw	fp,0(sp)
  822268:	dec00204 	addi	sp,sp,8
  82226c:	f800283a 	ret

00822270 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  822270:	defff904 	addi	sp,sp,-28
  822274:	dfc00615 	stw	ra,24(sp)
  822278:	df000515 	stw	fp,20(sp)
  82227c:	df000504 	addi	fp,sp,20
  822280:	e13ffc15 	stw	r4,-16(fp)
  822284:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  822288:	e0bffd17 	ldw	r2,-12(fp)
  82228c:	1005003a 	cmpeq	r2,r2,zero
  822290:	10001e1e 	bne	r2,zero,82230c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  822294:	e0bffd17 	ldw	r2,-12(fp)
  822298:	10800050 	cmplti	r2,r2,1
  82229c:	1000031e 	bne	r2,zero,8222ac <alt_up_character_lcd_shift_display+0x3c>
  8222a0:	00800704 	movi	r2,28
  8222a4:	e0bfff05 	stb	r2,-4(fp)
  8222a8:	00000206 	br	8222b4 <alt_up_character_lcd_shift_display+0x44>
  8222ac:	00c00604 	movi	r3,24
  8222b0:	e0ffff05 	stb	r3,-4(fp)
  8222b4:	e0bfff03 	ldbu	r2,-4(fp)
  8222b8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8222bc:	e0fffd17 	ldw	r3,-12(fp)
  8222c0:	e0fffe15 	stw	r3,-8(fp)
  8222c4:	e0fffe17 	ldw	r3,-8(fp)
  8222c8:	1804403a 	cmpge	r2,r3,zero
  8222cc:	1000031e 	bne	r2,zero,8222dc <alt_up_character_lcd_shift_display+0x6c>
  8222d0:	e0bffe17 	ldw	r2,-8(fp)
  8222d4:	0085c83a 	sub	r2,zero,r2
  8222d8:	e0bffe15 	stw	r2,-8(fp)
  8222dc:	e0fffe17 	ldw	r3,-8(fp)
  8222e0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8222e4:	00000306 	br	8222f4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8222e8:	e17ffb43 	ldbu	r5,-19(fp)
  8222ec:	e13ffc17 	ldw	r4,-16(fp)
  8222f0:	0821f640 	call	821f64 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8222f4:	e0bffb03 	ldbu	r2,-20(fp)
  8222f8:	10bfffc4 	addi	r2,r2,-1
  8222fc:	e0bffb05 	stb	r2,-20(fp)
  822300:	e0bffb03 	ldbu	r2,-20(fp)
  822304:	10803fd8 	cmpnei	r2,r2,255
  822308:	103ff71e 	bne	r2,zero,8222e8 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  82230c:	e037883a 	mov	sp,fp
  822310:	dfc00117 	ldw	ra,4(sp)
  822314:	df000017 	ldw	fp,0(sp)
  822318:	dec00204 	addi	sp,sp,8
  82231c:	f800283a 	ret

00822320 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  822320:	defff904 	addi	sp,sp,-28
  822324:	dfc00615 	stw	ra,24(sp)
  822328:	df000515 	stw	fp,20(sp)
  82232c:	df000504 	addi	fp,sp,20
  822330:	e13ffc15 	stw	r4,-16(fp)
  822334:	e17ffd15 	stw	r5,-12(fp)
  822338:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  82233c:	e0bffd17 	ldw	r2,-12(fp)
  822340:	10800a28 	cmpgeui	r2,r2,40
  822344:	1000031e 	bne	r2,zero,822354 <alt_up_character_lcd_erase_pos+0x34>
  822348:	e0bffe17 	ldw	r2,-8(fp)
  82234c:	108000b0 	cmpltui	r2,r2,2
  822350:	1000031e 	bne	r2,zero,822360 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  822354:	00bfffc4 	movi	r2,-1
  822358:	e0bfff15 	stw	r2,-4(fp)
  82235c:	00000e06 	br	822398 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  822360:	e13ffd17 	ldw	r4,-12(fp)
  822364:	e17ffe17 	ldw	r5,-8(fp)
  822368:	0821ee80 	call	821ee8 <get_DDRAM_addr>
  82236c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  822370:	e17ffb03 	ldbu	r5,-20(fp)
  822374:	e13ffc17 	ldw	r4,-16(fp)
  822378:	0821f640 	call	821f64 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  82237c:	e0bffc17 	ldw	r2,-16(fp)
  822380:	10800a17 	ldw	r2,40(r2)
  822384:	10800044 	addi	r2,r2,1
  822388:	1007883a 	mov	r3,r2
  82238c:	00800084 	movi	r2,2
  822390:	18800025 	stbio	r2,0(r3)
	return 0;
  822394:	e03fff15 	stw	zero,-4(fp)
  822398:	e0bfff17 	ldw	r2,-4(fp)
}
  82239c:	e037883a 	mov	sp,fp
  8223a0:	dfc00117 	ldw	ra,4(sp)
  8223a4:	df000017 	ldw	fp,0(sp)
  8223a8:	dec00204 	addi	sp,sp,8
  8223ac:	f800283a 	ret

008223b0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8223b0:	defffd04 	addi	sp,sp,-12
  8223b4:	dfc00215 	stw	ra,8(sp)
  8223b8:	df000115 	stw	fp,4(sp)
  8223bc:	df000104 	addi	fp,sp,4
  8223c0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8223c4:	e13fff17 	ldw	r4,-4(fp)
  8223c8:	01400304 	movi	r5,12
  8223cc:	0821f640 	call	821f64 <alt_up_character_lcd_send_cmd>
}
  8223d0:	e037883a 	mov	sp,fp
  8223d4:	dfc00117 	ldw	ra,4(sp)
  8223d8:	df000017 	ldw	fp,0(sp)
  8223dc:	dec00204 	addi	sp,sp,8
  8223e0:	f800283a 	ret

008223e4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8223e4:	defffd04 	addi	sp,sp,-12
  8223e8:	dfc00215 	stw	ra,8(sp)
  8223ec:	df000115 	stw	fp,4(sp)
  8223f0:	df000104 	addi	fp,sp,4
  8223f4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  8223f8:	e13fff17 	ldw	r4,-4(fp)
  8223fc:	014003c4 	movi	r5,15
  822400:	0821f640 	call	821f64 <alt_up_character_lcd_send_cmd>
}
  822404:	e037883a 	mov	sp,fp
  822408:	dfc00117 	ldw	ra,4(sp)
  82240c:	df000017 	ldw	fp,0(sp)
  822410:	dec00204 	addi	sp,sp,8
  822414:	f800283a 	ret

00822418 <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
  822418:	defffc04 	addi	sp,sp,-16
  82241c:	dfc00315 	stw	ra,12(sp)
  822420:	df000215 	stw	fp,8(sp)
  822424:	df000204 	addi	fp,sp,8
  822428:	e13ffe15 	stw	r4,-8(fp)
  return (fd < ALT_MAX_FD) ? alt_close (fd) : t_socketclose ((long) fd);
  82242c:	e0bffe17 	ldw	r2,-8(fp)
  822430:	10800808 	cmpgei	r2,r2,32
  822434:	1000041e 	bne	r2,zero,822448 <close+0x30>
  822438:	e13ffe17 	ldw	r4,-8(fp)
  82243c:	0839e5c0 	call	839e5c <alt_close>
  822440:	e0bfff15 	stw	r2,-4(fp)
  822444:	00000306 	br	822454 <close+0x3c>
  822448:	e13ffe17 	ldw	r4,-8(fp)
  82244c:	082edf80 	call	82edf8 <t_socketclose>
  822450:	e0bfff15 	stw	r2,-4(fp)
  822454:	e0bfff17 	ldw	r2,-4(fp)
}
  822458:	e037883a 	mov	sp,fp
  82245c:	dfc00117 	ldw	ra,4(sp)
  822460:	df000017 	ldw	fp,0(sp)
  822464:	dec00204 	addi	sp,sp,8
  822468:	f800283a 	ret

0082246c <iniche_devices_init>:
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
  82246c:	defff504 	addi	sp,sp,-44
  822470:	dfc00a15 	stw	ra,40(sp)
  822474:	df000915 	stw	fp,36(sp)
  822478:	df000904 	addi	fp,sp,36
  82247c:	e13fff15 	stw	r4,-4(fp)
                                netmask,
                                gw;
    int                         use_dhcp;

    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
  822480:	d0a03617 	ldw	r2,-32552(gp)
  822484:	e0bffa15 	stw	r2,-24(fp)
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));
  822488:	d0a03604 	addi	r2,gp,-32552
  82248c:	e0bff915 	stw	r2,-28(fp)

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
  822490:	00003e06 	br	82258c <iniche_devices_init+0x120>
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
  822494:	e0fffa17 	ldw	r3,-24(fp)
  822498:	e0bffa17 	ldw	r2,-24(fp)
  82249c:	18800415 	stw	r2,16(r3)
        p_dev->if_num = if_count;
  8224a0:	e0fffa17 	ldw	r3,-24(fp)
  8224a4:	e0bfff17 	ldw	r2,-4(fp)
  8224a8:	18800515 	stw	r2,20(r3)
        p_dev->p_net = nets[p_dev->if_num];
  8224ac:	e0bffa17 	ldw	r2,-24(fp)
  8224b0:	10800517 	ldw	r2,20(r2)
  8224b4:	00c03934 	movhi	r3,228
  8224b8:	18e79c04 	addi	r3,r3,-24976
  8224bc:	1085883a 	add	r2,r2,r2
  8224c0:	1085883a 	add	r2,r2,r2
  8224c4:	10c5883a 	add	r2,r2,r3
  8224c8:	10c00017 	ldw	r3,0(r2)
  8224cc:	e0bffa17 	ldw	r2,-24(fp)
  8224d0:	10c00615 	stw	r3,24(r2)

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
  8224d4:	e0bffa17 	ldw	r2,-24(fp)
  8224d8:	10800317 	ldw	r2,12(r2)
  8224dc:	e13ffa17 	ldw	r4,-24(fp)
  8224e0:	103ee83a 	callr	r2

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
  8224e4:	e0bffa17 	ldw	r2,-24(fp)
  8224e8:	10800617 	ldw	r2,24(r2)
  8224ec:	e0bff815 	stw	r2,-32(fp)
                
        if (get_ip_addr(p_dev, &ipaddr, &netmask, &gw, &use_dhcp))
  8224f0:	e17ffb04 	addi	r5,fp,-20
  8224f4:	e1bffc04 	addi	r6,fp,-16
  8224f8:	e1fffd04 	addi	r7,fp,-12
  8224fc:	e0bffe04 	addi	r2,fp,-8
  822500:	d8800015 	stw	r2,0(sp)
  822504:	e13ffa17 	ldw	r4,-24(fp)
  822508:	08042e40 	call	8042e4 <get_ip_addr>
  82250c:	1005003a 	cmpeq	r2,r2,zero
  822510:	1000181e 	bne	r2,zero,822574 <iniche_devices_init+0x108>
            /* 
             * OR in the DHCP flag, if enabled. This will allow any
             * application-specific flag setting in get_ip_addr(), such 
             * as enabling AUTOIP, to occur 
             */
            if (use_dhcp) {
  822514:	e0bffe17 	ldw	r2,-8(fp)
  822518:	1005003a 	cmpeq	r2,r2,zero
  82251c:	1000051e 	bne	r2,zero,822534 <iniche_devices_init+0xc8>
                p_net->n_flags |= NF_DHCPC;
  822520:	e0bff817 	ldw	r2,-32(fp)
  822524:	10802a17 	ldw	r2,168(r2)
  822528:	10c04014 	ori	r3,r2,256
  82252c:	e0bff817 	ldw	r2,-32(fp)
  822530:	10c02a15 	stw	r3,168(r2)
            }
#endif
            p_net->n_ipaddr = ipaddr;
  822534:	e0fffb17 	ldw	r3,-20(fp)
  822538:	e0bff817 	ldw	r2,-32(fp)
  82253c:	10c00a15 	stw	r3,40(r2)
            p_net->snmask = netmask;
  822540:	e0fffc17 	ldw	r3,-16(fp)
  822544:	e0bff817 	ldw	r2,-32(fp)
  822548:	10c00c15 	stw	r3,48(r2)
            p_net->n_defgw = gw;
  82254c:	e0fffd17 	ldw	r3,-12(fp)
  822550:	e0bff817 	ldw	r2,-32(fp)
  822554:	10c00d15 	stw	r3,52(r2)
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
  822558:	e0fff817 	ldw	r3,-32(fp)
  82255c:	00802134 	movhi	r2,132
  822560:	10ad3904 	addi	r2,r2,-19228
  822564:	18802b15 	stw	r2,172(r3)
#if defined (IGMP_V1) || defined (IGMP_V2)
            p_net->igmp_oper_mode = IGMP_MODE_DEFAULT;
  822568:	e0fff817 	ldw	r3,-32(fp)
  82256c:	00800084 	movi	r2,2
  822570:	18802f05 	stb	r2,188(r3)
#endif  /* IGMPv1 or IGMPv2 */
#endif  /* IP_MULTICAST */
        }

        /* Initialize next device. */
        if_count++;
  822574:	e0bfff17 	ldw	r2,-4(fp)
  822578:	10800044 	addi	r2,r2,1
  82257c:	e0bfff15 	stw	r2,-4(fp)
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
  822580:	e0bffa17 	ldw	r2,-24(fp)
  822584:	10800017 	ldw	r2,0(r2)
  822588:	e0bffa15 	stw	r2,-24(fp)
    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
  82258c:	e0fffa17 	ldw	r3,-24(fp)
  822590:	e0bff917 	ldw	r2,-28(fp)
  822594:	18bfbf1e 	bne	r3,r2,822494 <iniche_devices_init+0x28>
        /* Initialize next device. */
        if_count++;
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
    }

    return (if_count);
  822598:	e0bfff17 	ldw	r2,-4(fp)
}
  82259c:	e037883a 	mov	sp,fp
  8225a0:	dfc00117 	ldw	ra,4(sp)
  8225a4:	df000017 	ldw	fp,0(sp)
  8225a8:	dec00204 	addi	sp,sp,8
  8225ac:	f800283a 	ret

008225b0 <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
  8225b0:	defff804 	addi	sp,sp,-32
  8225b4:	dfc00715 	stw	ra,28(sp)
  8225b8:	df000615 	stw	fp,24(sp)
  8225bc:	df000604 	addi	fp,sp,24
  8225c0:	e13ffc15 	stw	r4,-16(fp)
  8225c4:	e17ffd15 	stw	r5,-12(fp)
  8225c8:	e1bffe15 	stw	r6,-8(fp)
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
  8225cc:	e0bffc17 	ldw	r2,-16(fp)
  8225d0:	10800808 	cmpgei	r2,r2,32
  8225d4:	1000061e 	bne	r2,zero,8225f0 <read+0x40>
  8225d8:	e13ffc17 	ldw	r4,-16(fp)
  8225dc:	e17ffd17 	ldw	r5,-12(fp)
  8225e0:	e1bffe17 	ldw	r6,-8(fp)
  8225e4:	083a9000 	call	83a900 <alt_read>
  8225e8:	e0bfff15 	stw	r2,-4(fp)
  8225ec:	00000806 	br	822610 <read+0x60>
  8225f0:	e1bffe17 	ldw	r6,-8(fp)
  8225f4:	d8000015 	stw	zero,0(sp)
  8225f8:	d8000115 	stw	zero,4(sp)
  8225fc:	e13ffc17 	ldw	r4,-16(fp)
  822600:	e17ffd17 	ldw	r5,-12(fp)
  822604:	000f883a 	mov	r7,zero
  822608:	08251d00 	call	8251d0 <bsd_recvfrom>
  82260c:	e0bfff15 	stw	r2,-4(fp)
  822610:	e0bfff17 	ldw	r2,-4(fp)
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
}
  822614:	e037883a 	mov	sp,fp
  822618:	dfc00117 	ldw	ra,4(sp)
  82261c:	df000017 	ldw	fp,0(sp)
  822620:	dec00204 	addi	sp,sp,8
  822624:	f800283a 	ret

00822628 <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
  822628:	defffa04 	addi	sp,sp,-24
  82262c:	dfc00515 	stw	ra,20(sp)
  822630:	df000415 	stw	fp,16(sp)
  822634:	df000404 	addi	fp,sp,16
  822638:	e13ffc15 	stw	r4,-16(fp)
  82263c:	e17ffd15 	stw	r5,-12(fp)
  822640:	e1bffe15 	stw	r6,-8(fp)
  if (fd < ALT_MAX_FD)
  822644:	e0bffc17 	ldw	r2,-16(fp)
  822648:	10800808 	cmpgei	r2,r2,32
  82264c:	1000061e 	bne	r2,zero,822668 <write+0x40>
  {
    return alt_write (fd, ptr, len);
  822650:	e13ffc17 	ldw	r4,-16(fp)
  822654:	e17ffd17 	ldw	r5,-12(fp)
  822658:	e1bffe17 	ldw	r6,-8(fp)
  82265c:	083aaf80 	call	83aaf8 <alt_write>
  822660:	e0bfff15 	stw	r2,-4(fp)
  822664:	00000606 	br	822680 <write+0x58>
  }
  else
  { 
    return send (fd, (void*) ptr, len, 0);
  822668:	e17ffd17 	ldw	r5,-12(fp)
  82266c:	e1bffe17 	ldw	r6,-8(fp)
  822670:	e13ffc17 	ldw	r4,-16(fp)
  822674:	000f883a 	mov	r7,zero
  822678:	082eaec0 	call	82eaec <t_send>
  82267c:	e0bfff15 	stw	r2,-4(fp)
  822680:	e0bfff17 	ldw	r2,-4(fp)
  }  
}
  822684:	e037883a 	mov	sp,fp
  822688:	dfc00117 	ldw	ra,4(sp)
  82268c:	df000017 	ldw	fp,0(sp)
  822690:	dec00204 	addi	sp,sp,8
  822694:	f800283a 	ret

00822698 <Netinit>:
 * a non-zero error code
 */

int
Netinit()
{
  822698:	defff704 	addi	sp,sp,-36
  82269c:	dfc00815 	stw	ra,32(sp)
  8226a0:	df000715 	stw	fp,28(sp)
  8226a4:	df000704 	addi	fp,sp,28
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
  8226a8:	e03ffa15 	stw	zero,-24(fp)
  8226ac:	00005806 	br	822810 <Netinit+0x178>
   {
      /* sanity check on mtu, et.al. We added this because earlier 
       * drivers were sloppy about setting them, but new
       * logic depends on these sizes.
       */
      if (nets[i]->n_mib->ifType == ETHERNET)   /* ethernet? */
  8226b0:	e0bffa17 	ldw	r2,-24(fp)
  8226b4:	00c03934 	movhi	r3,228
  8226b8:	18e79c04 	addi	r3,r3,-24976
  8226bc:	1085883a 	add	r2,r2,r2
  8226c0:	1085883a 	add	r2,r2,r2
  8226c4:	10c5883a 	add	r2,r2,r3
  8226c8:	10800017 	ldw	r2,0(r2)
  8226cc:	10802717 	ldw	r2,156(r2)
  8226d0:	10800217 	ldw	r2,8(r2)
  8226d4:	10800198 	cmpnei	r2,r2,6
  8226d8:	1000261e 	bne	r2,zero,822774 <Netinit+0xdc>
      {
         if (nets[i]->n_mtu == 0)   /* let device code override */
  8226dc:	e0bffa17 	ldw	r2,-24(fp)
  8226e0:	00c03934 	movhi	r3,228
  8226e4:	18e79c04 	addi	r3,r3,-24976
  8226e8:	1085883a 	add	r2,r2,r2
  8226ec:	1085883a 	add	r2,r2,r2
  8226f0:	10c5883a 	add	r2,r2,r3
  8226f4:	10800017 	ldw	r2,0(r2)
  8226f8:	10800917 	ldw	r2,36(r2)
  8226fc:	1004c03a 	cmpne	r2,r2,zero
  822700:	1000091e 	bne	r2,zero,822728 <Netinit+0x90>
            nets[i]->n_mtu = 1514;
  822704:	e0bffa17 	ldw	r2,-24(fp)
  822708:	00c03934 	movhi	r3,228
  82270c:	18e79c04 	addi	r3,r3,-24976
  822710:	1085883a 	add	r2,r2,r2
  822714:	1085883a 	add	r2,r2,r2
  822718:	10c5883a 	add	r2,r2,r3
  82271c:	10c00017 	ldw	r3,0(r2)
  822720:	00817a84 	movi	r2,1514
  822724:	18800915 	stw	r2,36(r3)

         if (nets[i]->n_lnh == 0)
  822728:	e0bffa17 	ldw	r2,-24(fp)
  82272c:	00c03934 	movhi	r3,228
  822730:	18e79c04 	addi	r3,r3,-24976
  822734:	1085883a 	add	r2,r2,r2
  822738:	1085883a 	add	r2,r2,r2
  82273c:	10c5883a 	add	r2,r2,r3
  822740:	10800017 	ldw	r2,0(r2)
  822744:	10800817 	ldw	r2,32(r2)
  822748:	1004c03a 	cmpne	r2,r2,zero
  82274c:	1000091e 	bne	r2,zero,822774 <Netinit+0xdc>
         {
#ifdef IEEE_802_3
            nets[i]->n_lnh = ETHHDR_SIZE + sizeof(struct snap_hdr);
#else
            nets[i]->n_lnh = ETHHDR_SIZE;
  822750:	e0bffa17 	ldw	r2,-24(fp)
  822754:	00c03934 	movhi	r3,228
  822758:	18e79c04 	addi	r3,r3,-24976
  82275c:	1085883a 	add	r2,r2,r2
  822760:	1085883a 	add	r2,r2,r2
  822764:	10c5883a 	add	r2,r2,r3
  822768:	10c00017 	ldw	r3,0(r2)
  82276c:	00800404 	movi	r2,16
  822770:	18800815 	stw	r2,32(r3)
      {
         continue;
      }
#endif   /* IP_V6 */

      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
  822774:	e0bffa17 	ldw	r2,-24(fp)
  822778:	00c03934 	movhi	r3,228
  82277c:	18e79c04 	addi	r3,r3,-24976
  822780:	1085883a 	add	r2,r2,r2
  822784:	1085883a 	add	r2,r2,r2
  822788:	10c5883a 	add	r2,r2,r3
  82278c:	10800017 	ldw	r2,0(r2)
  822790:	10800817 	ldw	r2,32(r2)
  822794:	d0e08917 	ldw	r3,-32220(gp)
  822798:	e0ffff15 	stw	r3,-4(fp)
  82279c:	e0bffe15 	stw	r2,-8(fp)
  8227a0:	e0bffe17 	ldw	r2,-8(fp)
  8227a4:	e0ffff17 	ldw	r3,-4(fp)
  8227a8:	10c0020e 	bge	r2,r3,8227b4 <Netinit+0x11c>
  8227ac:	e0bfff17 	ldw	r2,-4(fp)
  8227b0:	e0bffe15 	stw	r2,-8(fp)
  8227b4:	e0fffe17 	ldw	r3,-8(fp)
  8227b8:	d0e08915 	stw	r3,-32220(gp)
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
  8227bc:	e0bffa17 	ldw	r2,-24(fp)
  8227c0:	00c03934 	movhi	r3,228
  8227c4:	18e79c04 	addi	r3,r3,-24976
  8227c8:	1085883a 	add	r2,r2,r2
  8227cc:	1085883a 	add	r2,r2,r2
  8227d0:	10c5883a 	add	r2,r2,r3
  8227d4:	10800017 	ldw	r2,0(r2)
  8227d8:	10800917 	ldw	r2,36(r2)
  8227dc:	d0e08a17 	ldw	r3,-32216(gp)
  8227e0:	e0fffd15 	stw	r3,-12(fp)
  8227e4:	e0bffc15 	stw	r2,-16(fp)
  8227e8:	e0bffc17 	ldw	r2,-16(fp)
  8227ec:	e0fffd17 	ldw	r3,-12(fp)
  8227f0:	10c0020e 	bge	r2,r3,8227fc <Netinit+0x164>
  8227f4:	e0bffd17 	ldw	r2,-12(fp)
  8227f8:	e0bffc15 	stw	r2,-16(fp)
  8227fc:	e0fffc17 	ldw	r3,-16(fp)
  822800:	d0e08a15 	stw	r3,-32216(gp)
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
  822804:	e0bffa17 	ldw	r2,-24(fp)
  822808:	10800044 	addi	r2,r2,1
  82280c:	e0bffa15 	stw	r2,-24(fp)
  822810:	00802174 	movhi	r2,133
  822814:	10830204 	addi	r2,r2,3080
  822818:	10800017 	ldw	r2,0(r2)
  82281c:	1007883a 	mov	r3,r2
  822820:	e0bffa17 	ldw	r2,-24(fp)
  822824:	10ffa216 	blt	r2,r3,8226b0 <Netinit+0x18>
      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
  822828:	00803934 	movhi	r2,228
  82282c:	10a6d704 	addi	r2,r2,-25764
  822830:	10000115 	stw	zero,4(r2)
  822834:	00803934 	movhi	r2,228
  822838:	10a6d704 	addi	r2,r2,-25764
  82283c:	10c00117 	ldw	r3,4(r2)
  822840:	00803934 	movhi	r2,228
  822844:	10a6d704 	addi	r2,r2,-25764
  822848:	10c00015 	stw	r3,0(r2)
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;
  82284c:	00803934 	movhi	r2,228
  822850:	10a6d704 	addi	r2,r2,-25764
  822854:	10000215 	stw	zero,8(r2)
  822858:	00803934 	movhi	r2,228
  82285c:	10a6d704 	addi	r2,r2,-25764
  822860:	10c00217 	ldw	r3,8(r2)
  822864:	00803934 	movhi	r2,228
  822868:	10a6d704 	addi	r2,r2,-25764
  82286c:	10c00415 	stw	r3,16(r2)
  822870:	00803934 	movhi	r2,228
  822874:	10a6d704 	addi	r2,r2,-25764
  822878:	10c00417 	ldw	r3,16(r2)
  82287c:	00803934 	movhi	r2,228
  822880:	10a6d704 	addi	r2,r2,-25764
  822884:	10c00315 	stw	r3,12(r2)

   /* initialize freeq */
   LOCK_NET_RESOURCE(FREEQ_RESID);
  822888:	01000084 	movi	r4,2
  82288c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   e = pk_init();
  822890:	08298f40 	call	8298f4 <pk_init>
  822894:	e0bff915 	stw	r2,-28(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  822898:	01000084 	movi	r4,2
  82289c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   if (e)   /* report error (memory ran out?) */
  8228a0:	e0bff917 	ldw	r2,-28(fp)
  8228a4:	1005003a 	cmpeq	r2,r2,zero
  8228a8:	1000031e 	bne	r2,zero,8228b8 <Netinit+0x220>
      return e;
  8228ac:	e0bff917 	ldw	r2,-28(fp)
  8228b0:	e0bffb15 	stw	r2,-20(fp)
  8228b4:	00010506 	br	822ccc <Netinit+0x634>

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */
  8228b8:	010020b4 	movhi	r4,130
  8228bc:	210b9104 	addi	r4,r4,11844
  8228c0:	08238580 	call	823858 <exit_hook>

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
  8228c4:	e03ffa15 	stw	zero,-24(fp)
  8228c8:	0000f906 	br	822cb0 <Netinit+0x618>
   {
      if (nets[i]->n_init != NULL)  /* If iface has init routine... */
  8228cc:	e0bffa17 	ldw	r2,-24(fp)
  8228d0:	00c03934 	movhi	r3,228
  8228d4:	18e79c04 	addi	r3,r3,-24976
  8228d8:	1085883a 	add	r2,r2,r2
  8228dc:	1085883a 	add	r2,r2,r2
  8228e0:	10c5883a 	add	r2,r2,r3
  8228e4:	10800017 	ldw	r2,0(r2)
  8228e8:	10800217 	ldw	r2,8(r2)
  8228ec:	1005003a 	cmpeq	r2,r2,zero
  8228f0:	1000931e 	bne	r2,zero,822b40 <Netinit+0x4a8>
      {
         if ((e = (*nets[i]->n_init)(i)) != 0)  /* call init routine */
  8228f4:	e0bffa17 	ldw	r2,-24(fp)
  8228f8:	00c03934 	movhi	r3,228
  8228fc:	18e79c04 	addi	r3,r3,-24976
  822900:	1085883a 	add	r2,r2,r2
  822904:	1085883a 	add	r2,r2,r2
  822908:	10c5883a 	add	r2,r2,r3
  82290c:	10800017 	ldw	r2,0(r2)
  822910:	10800217 	ldw	r2,8(r2)
  822914:	e13ffa17 	ldw	r4,-24(fp)
  822918:	103ee83a 	callr	r2
  82291c:	e0bff915 	stw	r2,-28(fp)
  822920:	e0bff917 	ldw	r2,-28(fp)
  822924:	1005003a 	cmpeq	r2,r2,zero
  822928:	1000101e 	bne	r2,zero,82296c <Netinit+0x2d4>
         {
            dprintf("init error %d on net[%d]\n", e, i);
  82292c:	01002174 	movhi	r4,133
  822930:	21331304 	addi	r4,r4,-13236
  822934:	e17ff917 	ldw	r5,-28(fp)
  822938:	e1bffa17 	ldw	r6,-24(fp)
  82293c:	08076480 	call	807648 <printf>
            nets[i]->n_mib->ifOperStatus = NI_DOWN;
  822940:	e0bffa17 	ldw	r2,-24(fp)
  822944:	00c03934 	movhi	r3,228
  822948:	18e79c04 	addi	r3,r3,-24976
  82294c:	1085883a 	add	r2,r2,r2
  822950:	1085883a 	add	r2,r2,r2
  822954:	10c5883a 	add	r2,r2,r3
  822958:	10800017 	ldw	r2,0(r2)
  82295c:	10c02717 	ldw	r3,156(r2)
  822960:	00800084 	movi	r2,2
  822964:	18800715 	stw	r2,28(r3)
            continue;   /* ignore ifaces which fail */
  822968:	0000ce06 	br	822ca4 <Netinit+0x60c>
         }
         /* If interface is ethernet, set bcast flag bit. This
          * should really be done by the init routine, but we handle it
          * here to support MAC drivers which predate the flags field.
          */
         if(nets[i]->n_mib->ifType == ETHERNET)
  82296c:	e0bffa17 	ldw	r2,-24(fp)
  822970:	00c03934 	movhi	r3,228
  822974:	18e79c04 	addi	r3,r3,-24976
  822978:	1085883a 	add	r2,r2,r2
  82297c:	1085883a 	add	r2,r2,r2
  822980:	10c5883a 	add	r2,r2,r3
  822984:	10800017 	ldw	r2,0(r2)
  822988:	10802717 	ldw	r2,156(r2)
  82298c:	10800217 	ldw	r2,8(r2)
  822990:	10800198 	cmpnei	r2,r2,6
  822994:	1000111e 	bne	r2,zero,8229dc <Netinit+0x344>
            nets[i]->n_flags |= NF_BCAST;
  822998:	e0bffa17 	ldw	r2,-24(fp)
  82299c:	00c03934 	movhi	r3,228
  8229a0:	18e79c04 	addi	r3,r3,-24976
  8229a4:	1085883a 	add	r2,r2,r2
  8229a8:	1085883a 	add	r2,r2,r2
  8229ac:	10c5883a 	add	r2,r2,r3
  8229b0:	11000017 	ldw	r4,0(r2)
  8229b4:	e0bffa17 	ldw	r2,-24(fp)
  8229b8:	00c03934 	movhi	r3,228
  8229bc:	18e79c04 	addi	r3,r3,-24976
  8229c0:	1085883a 	add	r2,r2,r2
  8229c4:	1085883a 	add	r2,r2,r2
  8229c8:	10c5883a 	add	r2,r2,r3
  8229cc:	10800017 	ldw	r2,0(r2)
  8229d0:	10802a17 	ldw	r2,168(r2)
  8229d4:	10800054 	ori	r2,r2,1
  8229d8:	20802a15 	stw	r2,168(r4)

         /* set ifAdminStatus in case init() routine forgot to. IfOperStatus
          * is not nessecarily up at this point, as in the case of a modem which
          * is now in autoanswer mode.
          */
         nets[i]->n_mib->ifAdminStatus = NI_UP;
  8229dc:	e0bffa17 	ldw	r2,-24(fp)
  8229e0:	00c03934 	movhi	r3,228
  8229e4:	18e79c04 	addi	r3,r3,-24976
  8229e8:	1085883a 	add	r2,r2,r2
  8229ec:	1085883a 	add	r2,r2,r2
  8229f0:	10c5883a 	add	r2,r2,r3
  8229f4:	10800017 	ldw	r2,0(r2)
  8229f8:	10c02717 	ldw	r3,156(r2)
  8229fc:	00800044 	movi	r2,1
  822a00:	18800615 	stw	r2,24(r3)

         /* assign default names to unnamed ifaces */
         if(nets[i]->name[0] == 0)     /* no name set by prep or init */
  822a04:	e0bffa17 	ldw	r2,-24(fp)
  822a08:	00c03934 	movhi	r3,228
  822a0c:	18e79c04 	addi	r3,r3,-24976
  822a10:	1085883a 	add	r2,r2,r2
  822a14:	1085883a 	add	r2,r2,r2
  822a18:	10c5883a 	add	r2,r2,r3
  822a1c:	10800017 	ldw	r2,0(r2)
  822a20:	10800103 	ldbu	r2,4(r2)
  822a24:	10803fcc 	andi	r2,r2,255
  822a28:	1080201c 	xori	r2,r2,128
  822a2c:	10bfe004 	addi	r2,r2,-128
  822a30:	1004c03a 	cmpne	r2,r2,zero
  822a34:	1000421e 	bne	r2,zero,822b40 <Netinit+0x4a8>
         {
            if(nets[i]->n_mib->ifType == ETHERNET)
  822a38:	e0bffa17 	ldw	r2,-24(fp)
  822a3c:	00c03934 	movhi	r3,228
  822a40:	18e79c04 	addi	r3,r3,-24976
  822a44:	1085883a 	add	r2,r2,r2
  822a48:	1085883a 	add	r2,r2,r2
  822a4c:	10c5883a 	add	r2,r2,r3
  822a50:	10800017 	ldw	r2,0(r2)
  822a54:	10802717 	ldw	r2,156(r2)
  822a58:	10800217 	ldw	r2,8(r2)
  822a5c:	10800198 	cmpnei	r2,r2,6
  822a60:	1000131e 	bne	r2,zero,822ab0 <Netinit+0x418>
            {
               nets[i]->name[0] = 'e';    /* "et1", "et2", etc. */
  822a64:	e0bffa17 	ldw	r2,-24(fp)
  822a68:	00c03934 	movhi	r3,228
  822a6c:	18e79c04 	addi	r3,r3,-24976
  822a70:	1085883a 	add	r2,r2,r2
  822a74:	1085883a 	add	r2,r2,r2
  822a78:	10c5883a 	add	r2,r2,r3
  822a7c:	10c00017 	ldw	r3,0(r2)
  822a80:	00801944 	movi	r2,101
  822a84:	18800105 	stb	r2,4(r3)
               nets[i]->name[1] = 't';
  822a88:	e0bffa17 	ldw	r2,-24(fp)
  822a8c:	00c03934 	movhi	r3,228
  822a90:	18e79c04 	addi	r3,r3,-24976
  822a94:	1085883a 	add	r2,r2,r2
  822a98:	1085883a 	add	r2,r2,r2
  822a9c:	10c5883a 	add	r2,r2,r3
  822aa0:	10c00017 	ldw	r3,0(r2)
  822aa4:	00801d04 	movi	r2,116
  822aa8:	18800145 	stb	r2,5(r3)
  822aac:	00001206 	br	822af8 <Netinit+0x460>
            }
            else
            {
               nets[i]->name[0] = 'i';    /* "if1", "if2", etc. */
  822ab0:	e0bffa17 	ldw	r2,-24(fp)
  822ab4:	00c03934 	movhi	r3,228
  822ab8:	18e79c04 	addi	r3,r3,-24976
  822abc:	1085883a 	add	r2,r2,r2
  822ac0:	1085883a 	add	r2,r2,r2
  822ac4:	10c5883a 	add	r2,r2,r3
  822ac8:	10c00017 	ldw	r3,0(r2)
  822acc:	00801a44 	movi	r2,105
  822ad0:	18800105 	stb	r2,4(r3)
               nets[i]->name[1] = 'f';
  822ad4:	e0bffa17 	ldw	r2,-24(fp)
  822ad8:	00c03934 	movhi	r3,228
  822adc:	18e79c04 	addi	r3,r3,-24976
  822ae0:	1085883a 	add	r2,r2,r2
  822ae4:	1085883a 	add	r2,r2,r2
  822ae8:	10c5883a 	add	r2,r2,r3
  822aec:	10c00017 	ldw	r3,0(r2)
  822af0:	00801984 	movi	r2,102
  822af4:	18800145 	stb	r2,5(r3)
            }
            nets[i]->name[2] = (char)(i + '1');
  822af8:	e0bffa17 	ldw	r2,-24(fp)
  822afc:	00c03934 	movhi	r3,228
  822b00:	18e79c04 	addi	r3,r3,-24976
  822b04:	1085883a 	add	r2,r2,r2
  822b08:	1085883a 	add	r2,r2,r2
  822b0c:	10c5883a 	add	r2,r2,r3
  822b10:	10c00017 	ldw	r3,0(r2)
  822b14:	e0bffa17 	ldw	r2,-24(fp)
  822b18:	10800c44 	addi	r2,r2,49
  822b1c:	18800185 	stb	r2,6(r3)
            nets[i]->name[3] = '\0';
  822b20:	e0bffa17 	ldw	r2,-24(fp)
  822b24:	00c03934 	movhi	r3,228
  822b28:	18e79c04 	addi	r3,r3,-24976
  822b2c:	1085883a 	add	r2,r2,r2
  822b30:	1085883a 	add	r2,r2,r2
  822b34:	10c5883a 	add	r2,r2,r3
  822b38:	10800017 	ldw	r2,0(r2)
  822b3c:	100001c5 	stb	zero,7(r2)
         }
      }
      /* check on subnet routing - if no mask then make one */
      fixup_subnet_mask(i);      /* make mask for this net */
  822b40:	e13ffa17 	ldw	r4,-24(fp)
  822b44:	0822ce40 	call	822ce4 <fixup_subnet_mask>

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
  822b48:	e0bffa17 	ldw	r2,-24(fp)
  822b4c:	00c03934 	movhi	r3,228
  822b50:	18e79c04 	addi	r3,r3,-24976
  822b54:	1085883a 	add	r2,r2,r2
  822b58:	1085883a 	add	r2,r2,r2
  822b5c:	10c5883a 	add	r2,r2,r3
  822b60:	10800017 	ldw	r2,0(r2)
  822b64:	10800a17 	ldw	r2,40(r2)
  822b68:	1005003a 	cmpeq	r2,r2,zero
  822b6c:	10004d1e 	bne	r2,zero,822ca4 <Netinit+0x60c>
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
  822b70:	e0bffa17 	ldw	r2,-24(fp)
  822b74:	00c03934 	movhi	r3,228
  822b78:	18e79c04 	addi	r3,r3,-24976
  822b7c:	1085883a 	add	r2,r2,r2
  822b80:	1085883a 	add	r2,r2,r2
  822b84:	10c5883a 	add	r2,r2,r3
  822b88:	11400017 	ldw	r5,0(r2)
  822b8c:	e0bffa17 	ldw	r2,-24(fp)
  822b90:	00c03934 	movhi	r3,228
  822b94:	18e79c04 	addi	r3,r3,-24976
  822b98:	1085883a 	add	r2,r2,r2
  822b9c:	1085883a 	add	r2,r2,r2
  822ba0:	10c5883a 	add	r2,r2,r3
  822ba4:	10800017 	ldw	r2,0(r2)
  822ba8:	11000a17 	ldw	r4,40(r2)
  822bac:	e0bffa17 	ldw	r2,-24(fp)
  822bb0:	00c03934 	movhi	r3,228
  822bb4:	18e79c04 	addi	r3,r3,-24976
  822bb8:	1085883a 	add	r2,r2,r2
  822bbc:	1085883a 	add	r2,r2,r2
  822bc0:	10c5883a 	add	r2,r2,r3
  822bc4:	10800017 	ldw	r2,0(r2)
  822bc8:	10800c17 	ldw	r2,48(r2)
  822bcc:	0084303a 	nor	r2,zero,r2
  822bd0:	2084b03a 	or	r2,r4,r2
  822bd4:	28800e15 	stw	r2,56(r5)
         nets[i]->n_netbr42 = nets[i]->n_ipaddr & nets[i]->snmask;
  822bd8:	e0bffa17 	ldw	r2,-24(fp)
  822bdc:	00c03934 	movhi	r3,228
  822be0:	18e79c04 	addi	r3,r3,-24976
  822be4:	1085883a 	add	r2,r2,r2
  822be8:	1085883a 	add	r2,r2,r2
  822bec:	10c5883a 	add	r2,r2,r3
  822bf0:	11400017 	ldw	r5,0(r2)
  822bf4:	e0bffa17 	ldw	r2,-24(fp)
  822bf8:	00c03934 	movhi	r3,228
  822bfc:	18e79c04 	addi	r3,r3,-24976
  822c00:	1085883a 	add	r2,r2,r2
  822c04:	1085883a 	add	r2,r2,r2
  822c08:	10c5883a 	add	r2,r2,r3
  822c0c:	10800017 	ldw	r2,0(r2)
  822c10:	11000a17 	ldw	r4,40(r2)
  822c14:	e0bffa17 	ldw	r2,-24(fp)
  822c18:	00c03934 	movhi	r3,228
  822c1c:	18e79c04 	addi	r3,r3,-24976
  822c20:	1085883a 	add	r2,r2,r2
  822c24:	1085883a 	add	r2,r2,r2
  822c28:	10c5883a 	add	r2,r2,r3
  822c2c:	10800017 	ldw	r2,0(r2)
  822c30:	10800c17 	ldw	r2,48(r2)
  822c34:	2084703a 	and	r2,r4,r2
  822c38:	28800f15 	stw	r2,60(r5)
         nets[i]->n_subnetbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
  822c3c:	e0bffa17 	ldw	r2,-24(fp)
  822c40:	00c03934 	movhi	r3,228
  822c44:	18e79c04 	addi	r3,r3,-24976
  822c48:	1085883a 	add	r2,r2,r2
  822c4c:	1085883a 	add	r2,r2,r2
  822c50:	10c5883a 	add	r2,r2,r3
  822c54:	11400017 	ldw	r5,0(r2)
  822c58:	e0bffa17 	ldw	r2,-24(fp)
  822c5c:	00c03934 	movhi	r3,228
  822c60:	18e79c04 	addi	r3,r3,-24976
  822c64:	1085883a 	add	r2,r2,r2
  822c68:	1085883a 	add	r2,r2,r2
  822c6c:	10c5883a 	add	r2,r2,r3
  822c70:	10800017 	ldw	r2,0(r2)
  822c74:	11000a17 	ldw	r4,40(r2)
  822c78:	e0bffa17 	ldw	r2,-24(fp)
  822c7c:	00c03934 	movhi	r3,228
  822c80:	18e79c04 	addi	r3,r3,-24976
  822c84:	1085883a 	add	r2,r2,r2
  822c88:	1085883a 	add	r2,r2,r2
  822c8c:	10c5883a 	add	r2,r2,r3
  822c90:	10800017 	ldw	r2,0(r2)
  822c94:	10800c17 	ldw	r2,48(r2)
  822c98:	0084303a 	nor	r2,zero,r2
  822c9c:	2084b03a 	or	r2,r4,r2
  822ca0:	28801015 	stw	r2,64(r5)

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
  822ca4:	e0bffa17 	ldw	r2,-24(fp)
  822ca8:	10800044 	addi	r2,r2,1
  822cac:	e0bffa15 	stw	r2,-24(fp)
  822cb0:	00802174 	movhi	r2,133
  822cb4:	10830204 	addi	r2,r2,3080
  822cb8:	10800017 	ldw	r2,0(r2)
  822cbc:	1007883a 	mov	r3,r2
  822cc0:	e0bffa17 	ldw	r2,-24(fp)
  822cc4:	10ff0116 	blt	r2,r3,8228cc <Netinit+0x234>
#if defined(DYNAMIC_IFACES) && defined(IN_MENUS)
   /* Install dynamic iface menu */
   install_menu(&dynif_menu[0]);
#endif /* DYNAMIC_IFACES && IN_MENUS */

   return(0);
  822cc8:	e03ffb15 	stw	zero,-20(fp)
  822ccc:	e0bffb17 	ldw	r2,-20(fp)
}
  822cd0:	e037883a 	mov	sp,fp
  822cd4:	dfc00117 	ldw	ra,4(sp)
  822cd8:	df000017 	ldw	fp,0(sp)
  822cdc:	dec00204 	addi	sp,sp,8
  822ce0:	f800283a 	ret

00822ce4 <fixup_subnet_mask>:
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
  822ce4:	defffc04 	addi	sp,sp,-16
  822ce8:	dfc00315 	stw	ra,12(sp)
  822cec:	df000215 	stw	fp,8(sp)
  822cf0:	df000204 	addi	fp,sp,8
  822cf4:	e13fff15 	stw	r4,-4(fp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
  822cf8:	e0bfff17 	ldw	r2,-4(fp)
  822cfc:	00c03934 	movhi	r3,228
  822d00:	18e79c04 	addi	r3,r3,-24976
  822d04:	1085883a 	add	r2,r2,r2
  822d08:	1085883a 	add	r2,r2,r2
  822d0c:	10c5883a 	add	r2,r2,r3
  822d10:	10800017 	ldw	r2,0(r2)
  822d14:	10800c17 	ldw	r2,48(r2)
  822d18:	1004c03a 	cmpne	r2,r2,zero
  822d1c:	1000441e 	bne	r2,zero,822e30 <fixup_subnet_mask+0x14c>
      return;

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
  822d20:	e0bfff17 	ldw	r2,-4(fp)
  822d24:	00c03934 	movhi	r3,228
  822d28:	18e79c04 	addi	r3,r3,-24976
  822d2c:	1085883a 	add	r2,r2,r2
  822d30:	1085883a 	add	r2,r2,r2
  822d34:	10c5883a 	add	r2,r2,r3
  822d38:	10800017 	ldw	r2,0(r2)
  822d3c:	10800a17 	ldw	r2,40(r2)
  822d40:	1080200c 	andi	r2,r2,128
  822d44:	1004c03a 	cmpne	r2,r2,zero
  822d48:	1000031e 	bne	r2,zero,822d58 <fixup_subnet_mask+0x74>
      smask = 0xFF000000L;
  822d4c:	00bfc034 	movhi	r2,65280
  822d50:	e0bffe15 	stw	r2,-8(fp)
  822d54:	00001f06 	br	822dd4 <fixup_subnet_mask+0xf0>
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
  822d58:	e0bfff17 	ldw	r2,-4(fp)
  822d5c:	00c03934 	movhi	r3,228
  822d60:	18e79c04 	addi	r3,r3,-24976
  822d64:	1085883a 	add	r2,r2,r2
  822d68:	1085883a 	add	r2,r2,r2
  822d6c:	10c5883a 	add	r2,r2,r3
  822d70:	10800017 	ldw	r2,0(r2)
  822d74:	10800a17 	ldw	r2,40(r2)
  822d78:	1080300c 	andi	r2,r2,192
  822d7c:	10802018 	cmpnei	r2,r2,128
  822d80:	1000031e 	bne	r2,zero,822d90 <fixup_subnet_mask+0xac>
      smask = 0xFFFF0000L;
  822d84:	00bffff4 	movhi	r2,65535
  822d88:	e0bffe15 	stw	r2,-8(fp)
  822d8c:	00001106 	br	822dd4 <fixup_subnet_mask+0xf0>
   else if((nets[netnum]->n_ipaddr & CMASK) == CADDR)
  822d90:	e0bfff17 	ldw	r2,-4(fp)
  822d94:	00c03934 	movhi	r3,228
  822d98:	18e79c04 	addi	r3,r3,-24976
  822d9c:	1085883a 	add	r2,r2,r2
  822da0:	1085883a 	add	r2,r2,r2
  822da4:	10c5883a 	add	r2,r2,r3
  822da8:	10800017 	ldw	r2,0(r2)
  822dac:	10800a17 	ldw	r2,40(r2)
  822db0:	1080380c 	andi	r2,r2,224
  822db4:	10803018 	cmpnei	r2,r2,192
  822db8:	1000031e 	bne	r2,zero,822dc8 <fixup_subnet_mask+0xe4>
      smask = 0xFFFFFF00L;
  822dbc:	00bfc004 	movi	r2,-256
  822dc0:	e0bffe15 	stw	r2,-8(fp)
  822dc4:	00000306 	br	822dd4 <fixup_subnet_mask+0xf0>
   else
   {
      dtrap();    /* bad logic or setup values */
  822dc8:	082a7c80 	call	82a7c8 <dtrap>
      smask = 0xFFFFFF00L;
  822dcc:	00bfc004 	movi	r2,-256
  822dd0:	e0bffe15 	stw	r2,-8(fp)
   }
   nets[netnum]->snmask = htonl(smask);
  822dd4:	e0bfff17 	ldw	r2,-4(fp)
  822dd8:	00c03934 	movhi	r3,228
  822ddc:	18e79c04 	addi	r3,r3,-24976
  822de0:	1085883a 	add	r2,r2,r2
  822de4:	1085883a 	add	r2,r2,r2
  822de8:	10c5883a 	add	r2,r2,r3
  822dec:	11000017 	ldw	r4,0(r2)
  822df0:	e0bffe17 	ldw	r2,-8(fp)
  822df4:	1004d63a 	srli	r2,r2,24
  822df8:	10c03fcc 	andi	r3,r2,255
  822dfc:	e0bffe17 	ldw	r2,-8(fp)
  822e00:	1004d23a 	srli	r2,r2,8
  822e04:	10bfc00c 	andi	r2,r2,65280
  822e08:	1886b03a 	or	r3,r3,r2
  822e0c:	e0bffe17 	ldw	r2,-8(fp)
  822e10:	10bfc00c 	andi	r2,r2,65280
  822e14:	1004923a 	slli	r2,r2,8
  822e18:	1886b03a 	or	r3,r3,r2
  822e1c:	e0bffe17 	ldw	r2,-8(fp)
  822e20:	10803fcc 	andi	r2,r2,255
  822e24:	1004963a 	slli	r2,r2,24
  822e28:	1884b03a 	or	r2,r3,r2
  822e2c:	20800c15 	stw	r2,48(r4)
}
  822e30:	e037883a 	mov	sp,fp
  822e34:	dfc00117 	ldw	ra,4(sp)
  822e38:	df000017 	ldw	fp,0(sp)
  822e3c:	dec00204 	addi	sp,sp,8
  822e40:	f800283a 	ret

00822e44 <netclose>:
 * RETURNS: 
 */

void
netclose()
{
  822e44:	defffc04 	addi	sp,sp,-16
  822e48:	dfc00315 	stw	ra,12(sp)
  822e4c:	df000215 	stw	fp,8(sp)
  822e50:	df000204 	addi	fp,sp,8
   NET ifp;
   int index = 0;
  822e54:	e03ffe15 	stw	zero,-8(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
  822e58:	d0a08b17 	ldw	r2,-32212(gp)
  822e5c:	1080010c 	andi	r2,r2,4
  822e60:	1005003a 	cmpeq	r2,r2,zero
  822e64:	1000031e 	bne	r2,zero,822e74 <netclose+0x30>
  822e68:	01002174 	movhi	r4,133
  822e6c:	21331a04 	addi	r4,r4,-13208
  822e70:	08077600 	call	807760 <puts>
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
  822e74:	00803934 	movhi	r2,228
  822e78:	10a9dd04 	addi	r2,r2,-22668
  822e7c:	10800017 	ldw	r2,0(r2)
  822e80:	e0bfff15 	stw	r2,-4(fp)
  822e84:	00002106 	br	822f0c <netclose+0xc8>
   {
      if (ifp->n_close)
  822e88:	e0bfff17 	ldw	r2,-4(fp)
  822e8c:	10800517 	ldw	r2,20(r2)
  822e90:	1005003a 	cmpeq	r2,r2,zero
  822e94:	10000e1e 	bne	r2,zero,822ed0 <netclose+0x8c>
      {
         dprintf("netclose: closing iface %s\n", ifp->n_mib->ifDescr);
  822e98:	e0bfff17 	ldw	r2,-4(fp)
  822e9c:	10802717 	ldw	r2,156(r2)
  822ea0:	11400117 	ldw	r5,4(r2)
  822ea4:	01002174 	movhi	r4,133
  822ea8:	21331f04 	addi	r4,r4,-13188
  822eac:	08076480 	call	807648 <printf>
         (*(ifp->n_close))(index++);
  822eb0:	e0bfff17 	ldw	r2,-4(fp)
  822eb4:	10c00517 	ldw	r3,20(r2)
  822eb8:	e13ffe17 	ldw	r4,-8(fp)
  822ebc:	e0bffe17 	ldw	r2,-8(fp)
  822ec0:	10800044 	addi	r2,r2,1
  822ec4:	e0bffe15 	stw	r2,-8(fp)
  822ec8:	183ee83a 	callr	r3
  822ecc:	00000c06 	br	822f00 <netclose+0xbc>
      }
      else
      {
#ifdef NPDEBUG
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
  822ed0:	d0a08b17 	ldw	r2,-32212(gp)
  822ed4:	1080010c 	andi	r2,r2,4
  822ed8:	1005003a 	cmpeq	r2,r2,zero
  822edc:	1000051e 	bne	r2,zero,822ef4 <netclose+0xb0>
  822ee0:	e0bfff17 	ldw	r2,-4(fp)
  822ee4:	11400104 	addi	r5,r2,4
  822ee8:	01002174 	movhi	r4,133
  822eec:	21332604 	addi	r4,r4,-13160
  822ef0:	08076480 	call	807648 <printf>
#endif
         index++;
  822ef4:	e0bffe17 	ldw	r2,-8(fp)
  822ef8:	10800044 	addi	r2,r2,1
  822efc:	e0bffe15 	stw	r2,-8(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
  822f00:	e0bfff17 	ldw	r2,-4(fp)
  822f04:	10800017 	ldw	r2,0(r2)
  822f08:	e0bfff15 	stw	r2,-4(fp)
  822f0c:	e0bfff17 	ldw	r2,-4(fp)
  822f10:	1004c03a 	cmpne	r2,r2,zero
  822f14:	103fdc1e 	bne	r2,zero,822e88 <netclose+0x44>
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
#endif
         index++;
      }
   }
}
  822f18:	e037883a 	mov	sp,fp
  822f1c:	dfc00117 	ldw	ra,4(sp)
  822f20:	df000017 	ldw	fp,0(sp)
  822f24:	dec00204 	addi	sp,sp,8
  822f28:	f800283a 	ret

00822f2c <pktdemux>:
 * RETURNS: void
 */

void
pktdemux()
{
  822f2c:	defff804 	addi	sp,sp,-32
  822f30:	dfc00715 	stw	ra,28(sp)
  822f34:	df000615 	stw	fp,24(sp)
  822f38:	df000604 	addi	fp,sp,24
   NET      ifc;                /* interface packet came from */
   IFMIB    mib;
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */
  822f3c:	e03ffb15 	stw	zero,-20(fp)

   while (rcvdq.q_len)
  822f40:	0000e506 	br	8232d8 <pktdemux+0x3ac>
   {
      /* If we are low on free packets, don't hog CPU cycles */
      if (pkts++ > bigfreeq.q_len)
  822f44:	00803934 	movhi	r2,228
  822f48:	10a84304 	addi	r2,r2,-24308
  822f4c:	10c00217 	ldw	r3,8(r2)
  822f50:	e0bffb17 	ldw	r2,-20(fp)
  822f54:	1884803a 	cmplt	r2,r3,r2
  822f58:	1007883a 	mov	r3,r2
  822f5c:	e0bffb17 	ldw	r2,-20(fp)
  822f60:	10800044 	addi	r2,r2,1
  822f64:	e0bffb15 	stw	r2,-20(fp)
  822f68:	18803fcc 	andi	r2,r3,255
  822f6c:	1005003a 	cmpeq	r2,r2,zero
  822f70:	1000021e 	bne	r2,zero,822f7c <pktdemux+0x50>
      {
#ifdef SUPERLOOP
         return;        /* don't hog stack on superloop */
#else    /* SUPERLOOP */
         tk_yield(); /* let application tasks process received packets */
  822f74:	08266b40 	call	8266b4 <tk_yield>
         pkts = 0;   /* reset counter */
  822f78:	e03ffb15 	stw	zero,-20(fp)
#endif   /* SUPERLOOP else */
      }

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
  822f7c:	01000044 	movi	r4,1
  822f80:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pkt = (PACKET)q_deq(&rcvdq);
  822f84:	01003934 	movhi	r4,228
  822f88:	2126d704 	addi	r4,r4,-25764
  822f8c:	082a0900 	call	82a090 <getq>
  822f90:	e0bffe15 	stw	r2,-8(fp)
      UNLOCK_NET_RESOURCE(RXQ_RESID);
  822f94:	01000044 	movi	r4,1
  822f98:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      if (!pkt) panic("pktdemux: got null pkt");
  822f9c:	e0bffe17 	ldw	r2,-8(fp)
  822fa0:	1004c03a 	cmpne	r2,r2,zero
  822fa4:	1000031e 	bne	r2,zero,822fb4 <pktdemux+0x88>
  822fa8:	01002174 	movhi	r4,133
  822fac:	21332d04 	addi	r4,r4,-13132
  822fb0:	0825a2c0 	call	825a2c <panic>
      ifc = pkt->net;
  822fb4:	e0bffe17 	ldw	r2,-8(fp)
  822fb8:	10800617 	ldw	r2,24(r2)
  822fbc:	e0bffd15 	stw	r2,-12(fp)

      mib = ifc->n_mib;
  822fc0:	e0bffd17 	ldw	r2,-12(fp)
  822fc4:	10802717 	ldw	r2,156(r2)
  822fc8:	e0bffc15 	stw	r2,-16(fp)
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
  822fcc:	e0bffe17 	ldw	r2,-8(fp)
  822fd0:	10800117 	ldw	r2,4(r2)
  822fd4:	11400084 	addi	r5,r2,2
  822fd8:	e13ffd17 	ldw	r4,-12(fp)
  822fdc:	083d0580 	call	83d058 <isbcast>
  822fe0:	1005003a 	cmpeq	r2,r2,zero
  822fe4:	1000061e 	bne	r2,zero,823000 <pktdemux+0xd4>
         mib->ifInNUcastPkts++;
  822fe8:	e0bffc17 	ldw	r2,-16(fp)
  822fec:	10800b17 	ldw	r2,44(r2)
  822ff0:	10c00044 	addi	r3,r2,1
  822ff4:	e0bffc17 	ldw	r2,-16(fp)
  822ff8:	10c00b15 	stw	r3,44(r2)
  822ffc:	00000506 	br	823014 <pktdemux+0xe8>
      else
         mib->ifInUcastPkts++;
  823000:	e0bffc17 	ldw	r2,-16(fp)
  823004:	10800a17 	ldw	r2,40(r2)
  823008:	10c00044 	addi	r3,r2,1
  82300c:	e0bffc17 	ldw	r2,-16(fp)
  823010:	10c00a15 	stw	r3,40(r2)

      if(mib->ifAdminStatus == NI_DOWN)
  823014:	e0bffc17 	ldw	r2,-16(fp)
  823018:	10800617 	ldw	r2,24(r2)
  82301c:	10800098 	cmpnei	r2,r2,2
  823020:	10000c1e 	bne	r2,zero,823054 <pktdemux+0x128>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
  823024:	01000084 	movi	r4,2
  823028:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(pkt);  /* dump packet from downed interface */
  82302c:	e13ffe17 	ldw	r4,-8(fp)
  823030:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  823034:	01000084 	movi	r4,2
  823038:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         mib->ifInDiscards++;
  82303c:	e0bffc17 	ldw	r2,-16(fp)
  823040:	10800c17 	ldw	r2,48(r2)
  823044:	10c00044 	addi	r3,r2,1
  823048:	e0bffc17 	ldw	r2,-16(fp)
  82304c:	10c00c15 	stw	r3,48(r2)
         continue;      /* next packet */
  823050:	0000a106 	br	8232d8 <pktdemux+0x3ac>
      }

#ifdef NPDEBUG
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
  823054:	e0bffe17 	ldw	r2,-8(fp)
  823058:	10800117 	ldw	r2,4(r2)
  82305c:	10bfff04 	addi	r2,r2,-4
  823060:	10800003 	ldbu	r2,0(r2)
  823064:	10803fcc 	andi	r2,r2,255
  823068:	1080201c 	xori	r2,r2,128
  82306c:	10bfe004 	addi	r2,r2,-128
  823070:	10801358 	cmpnei	r2,r2,77
  823074:	10000b1e 	bne	r2,zero,8230a4 <pktdemux+0x178>
  823078:	e0bffe17 	ldw	r2,-8(fp)
  82307c:	10c00117 	ldw	r3,4(r2)
  823080:	e0bffe17 	ldw	r2,-8(fp)
  823084:	10800217 	ldw	r2,8(r2)
  823088:	1885883a 	add	r2,r3,r2
  82308c:	10800003 	ldbu	r2,0(r2)
  823090:	10803fcc 	andi	r2,r2,255
  823094:	1080201c 	xori	r2,r2,128
  823098:	10bfe004 	addi	r2,r2,-128
  82309c:	10801360 	cmpeqi	r2,r2,77
  8230a0:	1000041e 	bne	r2,zero,8230b4 <pktdemux+0x188>
          *(pkt->nb_buff + pkt->nb_blen) != 'M')
      {
         dtrap();
  8230a4:	082a7c80 	call	82a7c8 <dtrap>
         panic("pktdemux: corrupt pkt");
  8230a8:	01002174 	movhi	r4,133
  8230ac:	21333304 	addi	r4,r4,-13108
  8230b0:	0825a2c0 	call	825a2c <panic>
         }
      }
#endif   /* LOSSY_IO */

      /* see if driver set pkt->nb_prot and pkt->type */
      if((ifc->n_flags & NF_NBPROT) == 0)
  8230b4:	e0bffd17 	ldw	r2,-12(fp)
  8230b8:	10802a17 	ldw	r2,168(r2)
  8230bc:	1080020c 	andi	r2,r2,8
  8230c0:	1004c03a 	cmpne	r2,r2,zero
  8230c4:	10004d1e 	bne	r2,zero,8231fc <pktdemux+0x2d0>
          * probably the right thing to do, but because of this historic
          * inconsistency we don't try to fix it here - the longer size
          * turns out to be harmless since the IP layer fixes the size
          * based on the IP header length field.
          */
         switch(ifc->n_mib->ifType)
  8230c8:	e0bffd17 	ldw	r2,-12(fp)
  8230cc:	10802717 	ldw	r2,156(r2)
  8230d0:	10800217 	ldw	r2,8(r2)
  8230d4:	108001a0 	cmpeqi	r2,r2,6
  8230d8:	1000011e 	bne	r2,zero,8230e0 <pktdemux+0x1b4>
  8230dc:	00003a06 	br	8231c8 <pktdemux+0x29c>
         {
         case ETHERNET:
            /* get pointer to ethernet header */
            eth = (pkt->nb_buff + ETHHDR_BIAS);
  8230e0:	e0bffe17 	ldw	r2,-8(fp)
  8230e4:	10800117 	ldw	r2,4(r2)
  8230e8:	10800084 	addi	r2,r2,2
  8230ec:	e0bffa15 	stw	r2,-24(fp)
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
  8230f0:	e0bffa17 	ldw	r2,-24(fp)
  8230f4:	10800304 	addi	r2,r2,12
  8230f8:	10800003 	ldbu	r2,0(r2)
  8230fc:	10803fcc 	andi	r2,r2,255
  823100:	1080201c 	xori	r2,r2,128
  823104:	10bfe004 	addi	r2,r2,-128
  823108:	1004923a 	slli	r2,r2,8
  82310c:	1007883a 	mov	r3,r2
  823110:	e0bffa17 	ldw	r2,-24(fp)
  823114:	10800344 	addi	r2,r2,13
  823118:	10800003 	ldbu	r2,0(r2)
  82311c:	10803fcc 	andi	r2,r2,255
  823120:	1080201c 	xori	r2,r2,128
  823124:	10bfe004 	addi	r2,r2,-128
  823128:	10803fcc 	andi	r2,r2,255
  82312c:	1885883a 	add	r2,r3,r2
  823130:	10bfffcc 	andi	r2,r2,65535
  823134:	1004d23a 	srli	r2,r2,8
  823138:	10803fcc 	andi	r2,r2,255
  82313c:	1009883a 	mov	r4,r2
  823140:	e0bffa17 	ldw	r2,-24(fp)
  823144:	10800304 	addi	r2,r2,12
  823148:	10800003 	ldbu	r2,0(r2)
  82314c:	10803fcc 	andi	r2,r2,255
  823150:	1080201c 	xori	r2,r2,128
  823154:	10bfe004 	addi	r2,r2,-128
  823158:	1004923a 	slli	r2,r2,8
  82315c:	1007883a 	mov	r3,r2
  823160:	e0bffa17 	ldw	r2,-24(fp)
  823164:	10800344 	addi	r2,r2,13
  823168:	10800003 	ldbu	r2,0(r2)
  82316c:	10803fcc 	andi	r2,r2,255
  823170:	1080201c 	xori	r2,r2,128
  823174:	10bfe004 	addi	r2,r2,-128
  823178:	10803fcc 	andi	r2,r2,255
  82317c:	1885883a 	add	r2,r3,r2
  823180:	10bfffcc 	andi	r2,r2,65535
  823184:	1004923a 	slli	r2,r2,8
  823188:	1007883a 	mov	r3,r2
  82318c:	00bfc004 	movi	r2,-256
  823190:	1884703a 	and	r2,r3,r2
  823194:	2084b03a 	or	r2,r4,r2
  823198:	1007883a 	mov	r3,r2
  82319c:	e0bffe17 	ldw	r2,-8(fp)
  8231a0:	10c0080d 	sth	r3,32(r2)
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
  8231a4:	e0bffe17 	ldw	r2,-8(fp)
  8231a8:	10c00117 	ldw	r3,4(r2)
  8231ac:	e0bffe17 	ldw	r2,-8(fp)
  8231b0:	10800617 	ldw	r2,24(r2)
  8231b4:	10800817 	ldw	r2,32(r2)
  8231b8:	1887883a 	add	r3,r3,r2
  8231bc:	e0bffe17 	ldw	r2,-8(fp)
  8231c0:	10c00315 	stw	r3,12(r2)
#endif   /* IEEE_802_3 */
            break;
  8231c4:	00000d06 	br	8231fc <pktdemux+0x2d0>
         case PPPOE:
            /* do not change type yet, for PPPoE */
            break;
#endif   /* USE_PPPOE */
         default:    /* driver bug? */
            dprintf("pktdemux: bad Iface type %ld\n",ifc->n_mib->ifType);
  8231c8:	e0bffd17 	ldw	r2,-12(fp)
  8231cc:	10802717 	ldw	r2,156(r2)
  8231d0:	11400217 	ldw	r5,8(r2)
  8231d4:	01002174 	movhi	r4,133
  8231d8:	21333904 	addi	r4,r4,-13084
  8231dc:	08076480 	call	807648 <printf>
            LOCK_NET_RESOURCE(FREEQ_RESID);
  8231e0:	01000084 	movi	r4,2
  8231e4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(pkt);
  8231e8:	e13ffe17 	ldw	r4,-8(fp)
  8231ec:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8231f0:	01000084 	movi	r4,2
  8231f4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            continue;
  8231f8:	00003706 	br	8232d8 <pktdemux+0x3ac>
         }
      }

      /* pkt->nb_prot and pkt->type are now set. pass pkt to upper layer */
      switch(pkt->type)
  8231fc:	e0bffe17 	ldw	r2,-8(fp)
  823200:	1080080b 	ldhu	r2,32(r2)
  823204:	10bfffcc 	andi	r2,r2,65535
  823208:	e0bfff15 	stw	r2,-4(fp)
  82320c:	e0ffff17 	ldw	r3,-4(fp)
  823210:	18800220 	cmpeqi	r2,r3,8
  823214:	1000041e 	bne	r2,zero,823228 <pktdemux+0x2fc>
  823218:	e0ffff17 	ldw	r3,-4(fp)
  82321c:	18818220 	cmpeqi	r2,r3,1544
  823220:	1000081e 	bne	r2,zero,823244 <pktdemux+0x318>
  823224:	00000e06 	br	823260 <pktdemux+0x334>
      {
      case IPTP:     /* IP type */
         LOCK_NET_RESOURCE(NET_RESID);
  823228:	0009883a 	mov	r4,zero
  82322c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
#ifdef SHARED_IPADDRS
         add_share_route(pkt);
#endif /* SHARED_IPADDRS */
#ifdef IP_V4
         ip_rcv(pkt);
  823230:	e13ffe17 	ldw	r4,-8(fp)
  823234:	08412ac0 	call	8412ac <ip_rcv>
            /* don't care, it's IPv4 */
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif
		UNLOCK_NET_RESOURCE(NET_RESID);
  823238:	0009883a 	mov	r4,zero
  82323c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         break;
  823240:	00002506 	br	8232d8 <pktdemux+0x3ac>
#ifdef INCLUDE_ARP
      case ARPTP:       /* ARP type */
         LOCK_NET_RESOURCE(NET_RESID);
  823244:	0009883a 	mov	r4,zero
  823248:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         arprcv(pkt);
  82324c:	e13ffe17 	ldw	r4,-8(fp)
  823250:	083c7e80 	call	83c7e8 <arprcv>
         UNLOCK_NET_RESOURCE(NET_RESID);
  823254:	0009883a 	mov	r4,zero
  823258:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         break;
  82325c:	00001e06 	br	8232d8 <pktdemux+0x3ac>
         UNLOCK_NET_RESOURCE(NET_RESID);
         break;
#endif
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
  823260:	d0a08b17 	ldw	r2,-32212(gp)
  823264:	1081000c 	andi	r2,r2,1024
  823268:	1005003a 	cmpeq	r2,r2,zero
  82326c:	10000f1e 	bne	r2,zero,8232ac <pktdemux+0x380>
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
  823270:	e0bffe17 	ldw	r2,-8(fp)
  823274:	1080080b 	ldhu	r2,32(r2)
  823278:	10bfffcc 	andi	r2,r2,65535
  82327c:	1004d23a 	srli	r2,r2,8
  823280:	10bfffcc 	andi	r2,r2,65535
  823284:	10c03fcc 	andi	r3,r2,255
  823288:	e0bffe17 	ldw	r2,-8(fp)
  82328c:	1080080b 	ldhu	r2,32(r2)
  823290:	10bfffcc 	andi	r2,r2,65535
  823294:	1004923a 	slli	r2,r2,8
  823298:	10bfc00c 	andi	r2,r2,65280
  82329c:	188ab03a 	or	r5,r3,r2
  8232a0:	01002174 	movhi	r4,133
  8232a4:	21334104 	addi	r4,r4,-13052
  8232a8:	08076480 	call	807648 <printf>
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
  8232ac:	e0bffd17 	ldw	r2,-12(fp)
  8232b0:	10c02717 	ldw	r3,156(r2)
  8232b4:	18800e17 	ldw	r2,56(r3)
  8232b8:	10800044 	addi	r2,r2,1
  8232bc:	18800e15 	stw	r2,56(r3)
         LOCK_NET_RESOURCE(FREEQ_RESID);
  8232c0:	01000084 	movi	r4,2
  8232c4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(pkt);           /* return to free buffer */
  8232c8:	e13ffe17 	ldw	r4,-8(fp)
  8232cc:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8232d0:	01000084 	movi	r4,2
  8232d4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */

   while (rcvdq.q_len)
  8232d8:	00803934 	movhi	r2,228
  8232dc:	10a6d704 	addi	r2,r2,-25764
  8232e0:	10800217 	ldw	r2,8(r2)
  8232e4:	1004c03a 	cmpne	r2,r2,zero
  8232e8:	103f161e 	bne	r2,zero,822f44 <pktdemux+0x18>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         break;
      }
      continue;
   }
}
  8232ec:	e037883a 	mov	sp,fp
  8232f0:	dfc00117 	ldw	ra,4(sp)
  8232f4:	df000017 	ldw	fp,0(sp)
  8232f8:	dec00204 	addi	sp,sp,8
  8232fc:	f800283a 	ret

00823300 <c_older>:
 * RETURNS: the older of the two passed tick counts
 */

u_long
c_older(u_long ct1, u_long ct2)
{
  823300:	defffc04 	addi	sp,sp,-16
  823304:	df000315 	stw	fp,12(sp)
  823308:	df000304 	addi	fp,sp,12
  82330c:	e13ffd15 	stw	r4,-12(fp)
  823310:	e17ffe15 	stw	r5,-8(fp)

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
  823314:	00802174 	movhi	r2,133
  823318:	10832604 	addi	r2,r2,3224
  82331c:	10800017 	ldw	r2,0(r2)
  823320:	1004403a 	cmpge	r2,r2,zero
  823324:	1000141e 	bne	r2,zero,823378 <c_older+0x78>
  823328:	00802174 	movhi	r2,133
  82332c:	10832604 	addi	r2,r2,3224
  823330:	10c00017 	ldw	r3,0(r2)
  823334:	e0bffd17 	ldw	r2,-12(fp)
  823338:	18800536 	bltu	r3,r2,823350 <c_older+0x50>
  82333c:	00802174 	movhi	r2,133
  823340:	10832604 	addi	r2,r2,3224
  823344:	10c00017 	ldw	r3,0(r2)
  823348:	e0bffe17 	ldw	r2,-8(fp)
  82334c:	18800a2e 	bgeu	r3,r2,823378 <c_older+0x78>
  823350:	00802174 	movhi	r2,133
  823354:	10832604 	addi	r2,r2,3224
  823358:	10c00017 	ldw	r3,0(r2)
  82335c:	e0bffd17 	ldw	r2,-12(fp)
  823360:	10c00e36 	bltu	r2,r3,82339c <c_older+0x9c>
  823364:	00802174 	movhi	r2,133
  823368:	10832604 	addi	r2,r2,3224
  82336c:	10c00017 	ldw	r3,0(r2)
  823370:	e0bffe17 	ldw	r2,-8(fp)
  823374:	10c00936 	bltu	r2,r3,82339c <c_older+0x9c>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
   {
      if (ct1 < ct2)
  823378:	e0fffd17 	ldw	r3,-12(fp)
  82337c:	e0bffe17 	ldw	r2,-8(fp)
  823380:	1880032e 	bgeu	r3,r2,823390 <c_older+0x90>
         return(ct1);      /* then smaller is oldest */
  823384:	e0bffd17 	ldw	r2,-12(fp)
  823388:	e0bfff15 	stw	r2,-4(fp)
  82338c:	00000b06 	br	8233bc <c_older+0xbc>
      else 
         return(ct2);
  823390:	e0bffe17 	ldw	r2,-8(fp)
  823394:	e0bfff15 	stw	r2,-4(fp)
  823398:	00000806 	br	8233bc <c_older+0xbc>
   }

   /* else one is less than cticks, and one is greater.
   the larger value is then the oldest */
   if (ct1 >= ct2)
  82339c:	e0fffd17 	ldw	r3,-12(fp)
  8233a0:	e0bffe17 	ldw	r2,-8(fp)
  8233a4:	18800336 	bltu	r3,r2,8233b4 <c_older+0xb4>
      return(ct1);
  8233a8:	e0bffd17 	ldw	r2,-12(fp)
  8233ac:	e0bfff15 	stw	r2,-4(fp)
  8233b0:	00000206 	br	8233bc <c_older+0xbc>
   else
      return(ct2);
  8233b4:	e0bffe17 	ldw	r2,-8(fp)
  8233b8:	e0bfff15 	stw	r2,-4(fp)
  8233bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8233c0:	e037883a 	mov	sp,fp
  8233c4:	df000017 	ldw	fp,0(sp)
  8233c8:	dec00104 	addi	sp,sp,4
  8233cc:	f800283a 	ret

008233d0 <ip2mac>:
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
  8233d0:	defffa04 	addi	sp,sp,-24
  8233d4:	dfc00515 	stw	ra,20(sp)
  8233d8:	df000415 	stw	fp,16(sp)
  8233dc:	df000404 	addi	fp,sp,16
  8233e0:	e13ffd15 	stw	r4,-12(fp)
  8233e4:	e17ffe15 	stw	r5,-8(fp)
   IFMIB ifmib = pkt->net->n_mib;   /* mib info for this interface */
  8233e8:	e0bffd17 	ldw	r2,-12(fp)
  8233ec:	10800617 	ldw	r2,24(r2)
  8233f0:	10802717 	ldw	r2,156(r2)
  8233f4:	e0bffc15 	stw	r2,-16(fp)

   /* Always punt if iface ifAdminStatus is DOWN. ifOperStatus may 
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
  8233f8:	e0bffc17 	ldw	r2,-16(fp)
  8233fc:	10800617 	ldw	r2,24(r2)
  823400:	10800098 	cmpnei	r2,r2,2
  823404:	1000091e 	bne	r2,zero,82342c <ip2mac+0x5c>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
  823408:	01000084 	movi	r4,2
  82340c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(pkt);
  823410:	e13ffd17 	ldw	r4,-12(fp)
  823414:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  823418:	01000084 	movi	r4,2
  82341c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return(ENP_NO_ROUTE);
  823420:	00bff7c4 	movi	r2,-33
  823424:	e0bfff15 	stw	r2,-4(fp)
  823428:	00004c06 	br	82355c <ip2mac+0x18c>
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
  82342c:	e0bffd17 	ldw	r2,-12(fp)
  823430:	10800617 	ldw	r2,24(r2)
  823434:	10800817 	ldw	r2,32(r2)
  823438:	1005003a 	cmpeq	r2,r2,zero
  82343c:	1000081e 	bne	r2,zero,823460 <ip2mac+0x90>
  823440:	e0bffc17 	ldw	r2,-16(fp)
  823444:	10800217 	ldw	r2,8(r2)
  823448:	108005e0 	cmpeqi	r2,r2,23
  82344c:	1000041e 	bne	r2,zero,823460 <ip2mac+0x90>
  823450:	e0bffc17 	ldw	r2,-16(fp)
  823454:	10800217 	ldw	r2,8(r2)
  823458:	10800718 	cmpnei	r2,r2,28
  82345c:	1000291e 	bne	r2,zero,823504 <ip2mac+0x134>
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
       (ifmib->ifType == SLIP))
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
  823460:	e0bffc17 	ldw	r2,-16(fp)
  823464:	10801017 	ldw	r2,64(r2)
  823468:	10c00044 	addi	r3,r2,1
  82346c:	e0bffc17 	ldw	r2,-16(fp)
  823470:	10c01015 	stw	r3,64(r2)
      ifmib->ifOutOctets += pkt->nb_plen;
  823474:	e0bffc17 	ldw	r2,-16(fp)
  823478:	10c00f17 	ldw	r3,60(r2)
  82347c:	e0bffd17 	ldw	r2,-12(fp)
  823480:	10800417 	ldw	r2,16(r2)
  823484:	1887883a 	add	r3,r3,r2
  823488:	e0bffc17 	ldw	r2,-16(fp)
  82348c:	10c00f15 	stw	r3,60(r2)

      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
  823490:	e0bffd17 	ldw	r2,-12(fp)
  823494:	10800617 	ldw	r2,24(r2)
  823498:	10800417 	ldw	r2,16(r2)
  82349c:	1005003a 	cmpeq	r2,r2,zero
  8234a0:	1000061e 	bne	r2,zero,8234bc <ip2mac+0xec>
         pkt->net->pkt_send(pkt);   /* pkt will be freed by MAC code */
  8234a4:	e0bffd17 	ldw	r2,-12(fp)
  8234a8:	10800617 	ldw	r2,24(r2)
  8234ac:	10800417 	ldw	r2,16(r2)
  8234b0:	e13ffd17 	ldw	r4,-12(fp)
  8234b4:	103ee83a 	callr	r2
  8234b8:	00001006 	br	8234fc <ip2mac+0x12c>
      else  /* no packet send; try raw send */
      {
         pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
  8234bc:	e0bffd17 	ldw	r2,-12(fp)
  8234c0:	10800617 	ldw	r2,24(r2)
  8234c4:	10c00317 	ldw	r3,12(r2)
  8234c8:	e0bffd17 	ldw	r2,-12(fp)
  8234cc:	11000617 	ldw	r4,24(r2)
  8234d0:	e0bffd17 	ldw	r2,-12(fp)
  8234d4:	11400317 	ldw	r5,12(r2)
  8234d8:	e0bffd17 	ldw	r2,-12(fp)
  8234dc:	11800417 	ldw	r6,16(r2)
  8234e0:	183ee83a 	callr	r3
         LOCK_NET_RESOURCE(FREEQ_RESID);
  8234e4:	01000084 	movi	r4,2
  8234e8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(pkt);
  8234ec:	e13ffd17 	ldw	r4,-12(fp)
  8234f0:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8234f4:	01000084 	movi	r4,2
  8234f8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      }
      return(SUCCESS);
  8234fc:	e03fff15 	stw	zero,-4(fp)
  823500:	00001606 	br	82355c <ip2mac+0x18c>
   }

   /* don't allow unicast sends if NIC iface has no IP address. This
    * is to prevent DHCP clients from sending prior to assignment.
    */
   if (pkt->net->n_ipaddr == 0L)
  823504:	e0bffd17 	ldw	r2,-12(fp)
  823508:	10800617 	ldw	r2,24(r2)
  82350c:	10800a17 	ldw	r2,40(r2)
  823510:	1004c03a 	cmpne	r2,r2,zero
  823514:	10000d1e 	bne	r2,zero,82354c <ip2mac+0x17c>
   {
      if (pkt->fhost != 0xFFFFFFFF) /* check for broadcast packet */
  823518:	e0bffd17 	ldw	r2,-12(fp)
  82351c:	10800717 	ldw	r2,28(r2)
  823520:	10bfffe0 	cmpeqi	r2,r2,-1
  823524:	1000091e 	bne	r2,zero,82354c <ip2mac+0x17c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
  823528:	01000084 	movi	r4,2
  82352c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(pkt);
  823530:	e13ffd17 	ldw	r4,-12(fp)
  823534:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  823538:	01000084 	movi	r4,2
  82353c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return ENP_SENDERR;
  823540:	00bff884 	movi	r2,-30
  823544:	e0bfff15 	stw	r2,-4(fp)
  823548:	00000406 	br	82355c <ip2mac+0x18c>
      }
   }

#ifdef INCLUDE_ARP   /* must be ethernet or token ring */
   return(send_via_arp(pkt, dest_ip));
  82354c:	e13ffd17 	ldw	r4,-12(fp)
  823550:	e17ffe17 	ldw	r5,-8(fp)
  823554:	083ca480 	call	83ca48 <send_via_arp>
  823558:	e0bfff15 	stw	r2,-4(fp)
  82355c:	e0bfff17 	ldw	r2,-4(fp)
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
  823560:	e037883a 	mov	sp,fp
  823564:	dfc00117 	ldw	ra,4(sp)
  823568:	df000017 	ldw	fp,0(sp)
  82356c:	dec00204 	addi	sp,sp,8
  823570:	f800283a 	ret

00823574 <ip_startup>:
 * RETURNS: returns NULL if OK, or text of an error message 
 */

char *   
ip_startup()
{
  823574:	defffb04 	addi	sp,sp,-20
  823578:	dfc00415 	stw	ra,16(sp)
  82357c:	df000315 	stw	fp,12(sp)
  823580:	df000304 	addi	fp,sp,12
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
  823584:	e03ffd15 	stw	zero,-12(fp)
  823588:	00002a06 	br	823634 <ip_startup+0xc0>
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
  82358c:	e13ffd17 	ldw	r4,-12(fp)
  823590:	e0bffd17 	ldw	r2,-12(fp)
  823594:	10803024 	muli	r2,r2,192
  823598:	1007883a 	mov	r3,r2
  82359c:	00803934 	movhi	r2,228
  8235a0:	10a6dc04 	addi	r2,r2,-25744
  8235a4:	188b883a 	add	r5,r3,r2
  8235a8:	00c03934 	movhi	r3,228
  8235ac:	18e79c04 	addi	r3,r3,-24976
  8235b0:	2105883a 	add	r2,r4,r4
  8235b4:	1085883a 	add	r2,r2,r2
  8235b8:	10c5883a 	add	r2,r2,r3
  8235bc:	11400015 	stw	r5,0(r2)
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */
  8235c0:	e0bffd17 	ldw	r2,-12(fp)
  8235c4:	00c03934 	movhi	r3,228
  8235c8:	18e79c04 	addi	r3,r3,-24976
  8235cc:	1085883a 	add	r2,r2,r2
  8235d0:	1085883a 	add	r2,r2,r2
  8235d4:	10c5883a 	add	r2,r2,r3
  8235d8:	11000017 	ldw	r4,0(r2)
  8235dc:	e0bffd17 	ldw	r2,-12(fp)
  8235e0:	00c03934 	movhi	r3,228
  8235e4:	18e79c04 	addi	r3,r3,-24976
  8235e8:	1085883a 	add	r2,r2,r2
  8235ec:	1085883a 	add	r2,r2,r2
  8235f0:	10c5883a 	add	r2,r2,r3
  8235f4:	10800017 	ldw	r2,0(r2)
  8235f8:	10801204 	addi	r2,r2,72
  8235fc:	20802715 	stw	r2,156(r4)

      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
  823600:	e0bffd17 	ldw	r2,-12(fp)
  823604:	00c03934 	movhi	r3,228
  823608:	18e79c04 	addi	r3,r3,-24976
  82360c:	1085883a 	add	r2,r2,r2
  823610:	1085883a 	add	r2,r2,r2
  823614:	10c5883a 	add	r2,r2,r3
  823618:	11400017 	ldw	r5,0(r2)
  82361c:	01003934 	movhi	r4,228
  823620:	2129dd04 	addi	r4,r4,-22668
  823624:	082a1580 	call	82a158 <putq>
{
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
  823628:	e0bffd17 	ldw	r2,-12(fp)
  82362c:	10800044 	addi	r2,r2,1
  823630:	e0bffd15 	stw	r2,-12(fp)
  823634:	e0bffd17 	ldw	r2,-12(fp)
  823638:	10800110 	cmplti	r2,r2,4
  82363c:	103fd31e 	bne	r2,zero,82358c <ip_startup+0x18>
      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
   }

   /* call port routine to locate and init network interfaces. */
   ifNumber = (unsigned)prep_ifaces(ifNumber);
  823640:	d0a08c17 	ldw	r2,-32208(gp)
  823644:	1009883a 	mov	r4,r2
  823648:	08423d80 	call	8423d8 <prep_ifaces>
  82364c:	d0a08c15 	stw	r2,-32208(gp)

   if (ifNumber < 1)    /* no static interfaces? */
  823650:	d0a08c17 	ldw	r2,-32208(gp)
  823654:	1004c03a 	cmpne	r2,r2,zero
  823658:	1000041e 	bne	r2,zero,82366c <ip_startup+0xf8>
#ifdef DYNAMIC_IFACES
      /* print a debug message and hope user knows what he's doing */
      dprintf("unable to find any working interfaces");
#else /* static ifaces only */
      /* no static and no dynamic interfaces is probably a bug... */
      return("unable to find any working interfaces");
  82365c:	00802174 	movhi	r2,133
  823660:	10b35204 	addi	r2,r2,-12984
  823664:	e0bfff15 	stw	r2,-4(fp)
  823668:	00007506 	br	823840 <ip_startup+0x2cc>
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
  82366c:	d0a08c17 	ldw	r2,-32208(gp)
  823670:	e0bffd15 	stw	r2,-12(fp)
  823674:	00001506 	br	8236cc <ip_startup+0x158>
   {
      qdel(&netlist, (qp)nets[i]);  /* remove from queue */
  823678:	e0bffd17 	ldw	r2,-12(fp)
  82367c:	00c03934 	movhi	r3,228
  823680:	18e79c04 	addi	r3,r3,-24976
  823684:	1085883a 	add	r2,r2,r2
  823688:	1085883a 	add	r2,r2,r2
  82368c:	10c5883a 	add	r2,r2,r3
  823690:	10800017 	ldw	r2,0(r2)
  823694:	100b883a 	mov	r5,r2
  823698:	01003934 	movhi	r4,228
  82369c:	2129dd04 	addi	r4,r4,-22668
  8236a0:	082a2080 	call	82a208 <qdel>
      nets[i] = NULL;               /* remove from array */
  8236a4:	e0bffd17 	ldw	r2,-12(fp)
  8236a8:	00c03934 	movhi	r3,228
  8236ac:	18e79c04 	addi	r3,r3,-24976
  8236b0:	1085883a 	add	r2,r2,r2
  8236b4:	1085883a 	add	r2,r2,r2
  8236b8:	10c5883a 	add	r2,r2,r3
  8236bc:	10000015 	stw	zero,0(r2)
      return("unable to find any working interfaces");
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
  8236c0:	e0bffd17 	ldw	r2,-12(fp)
  8236c4:	10800044 	addi	r2,r2,1
  8236c8:	e0bffd15 	stw	r2,-12(fp)
  8236cc:	e0bffd17 	ldw	r2,-12(fp)
  8236d0:	10800110 	cmplti	r2,r2,4
  8236d4:	103fe81e 	bne	r2,zero,823678 <ip_startup+0x104>
   /* The sequence of events when initing the net & interface systems 
    * is very important. Be very carefull about altering the order of 
    * the following statements. 
    */
   /* once these are done, we should call ip_exit before quiting IP */
   clock_init();           /* start clock system */
  8236d8:	082a9040 	call	82a904 <clock_init>
   exit_hook(clock_c);
  8236dc:	010020f4 	movhi	r4,131
  8236e0:	212a5004 	addi	r4,r4,-22208
  8236e4:	08238580 	call	823858 <exit_hook>

   e = Netinit();    /* start net interface(s) */
  8236e8:	08226980 	call	822698 <Netinit>
  8236ec:	e0bffe15 	stw	r2,-8(fp)
   if (e)
  8236f0:	e0bffe17 	ldw	r2,-8(fp)
  8236f4:	1005003a 	cmpeq	r2,r2,zero
  8236f8:	1000041e 	bne	r2,zero,82370c <ip_startup+0x198>
   {
      return("unable to initialize net");
  8236fc:	00802174 	movhi	r2,133
  823700:	10b35c04 	addi	r2,r2,-12944
  823704:	e0bfff15 	stw	r2,-4(fp)
  823708:	00004d06 	br	823840 <ip_startup+0x2cc>
   }

#ifdef INCLUDE_ARP
   e = etainit();          /* startup ARP layer */
  82370c:	083bb340 	call	83bb34 <etainit>
  823710:	e0bffe15 	stw	r2,-8(fp)
   if (e)
  823714:	e0bffe17 	ldw	r2,-8(fp)
  823718:	1005003a 	cmpeq	r2,r2,zero
  82371c:	1000051e 	bne	r2,zero,823734 <ip_startup+0x1c0>
   {
      ip_exit();
  823720:	08238c40 	call	8238c4 <ip_exit>
      return("unable to initialize arp");
  823724:	00802174 	movhi	r2,133
  823728:	10b36304 	addi	r2,r2,-12916
  82372c:	e0bfff15 	stw	r2,-4(fp)
  823730:	00004306 	br	823840 <ip_startup+0x2cc>
   }
#endif

#ifdef IP_V4
   e = ip_init();       /* start up IP layer */
  823734:	083d26c0 	call	83d26c <ip_init>
  823738:	e0bffe15 	stw	r2,-8(fp)
   if (e)
  82373c:	e0bffe17 	ldw	r2,-8(fp)
  823740:	1005003a 	cmpeq	r2,r2,zero
  823744:	1000051e 	bne	r2,zero,82375c <ip_startup+0x1e8>
   {
      ip_exit();
  823748:	08238c40 	call	8238c4 <ip_exit>
      return("unable to initialize IP");
  82374c:	00802174 	movhi	r2,133
  823750:	10b36a04 	addi	r2,r2,-12888
  823754:	e0bfff15 	stw	r2,-4(fp)
  823758:	00003906 	br	823840 <ip_startup+0x2cc>

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Join the All hosts group on every interface that IP multicast is
    * supported
    */
   e = igmp_init();         /* Initialize igmp */
  82375c:	0823a240 	call	823a24 <igmp_init>
  823760:	e0bffe15 	stw	r2,-8(fp)
   if (e)
  823764:	e0bffe17 	ldw	r2,-8(fp)
  823768:	1005003a 	cmpeq	r2,r2,zero
  82376c:	1000041e 	bne	r2,zero,823780 <ip_startup+0x20c>
   {
      ip_exit();
  823770:	08238c40 	call	8238c4 <ip_exit>
      return(ipmcfail_str);
  823774:	d0a03817 	ldw	r2,-32544(gp)
  823778:	e0bfff15 	stw	r2,-4(fp)
  82377c:	00003006 	br	823840 <ip_startup+0x2cc>
   }

   for (i = 0; i < (int)ifNumber; i++)
  823780:	e03ffd15 	stw	zero,-12(fp)
  823784:	00001e06 	br	823800 <ip_startup+0x28c>
   {
      if (nets[i]->n_mcastlist != NULL)
  823788:	e0bffd17 	ldw	r2,-12(fp)
  82378c:	00c03934 	movhi	r3,228
  823790:	18e79c04 	addi	r3,r3,-24976
  823794:	1085883a 	add	r2,r2,r2
  823798:	1085883a 	add	r2,r2,r2
  82379c:	10c5883a 	add	r2,r2,r3
  8237a0:	10800017 	ldw	r2,0(r2)
  8237a4:	10802b17 	ldw	r2,172(r2)
  8237a8:	1005003a 	cmpeq	r2,r2,zero
  8237ac:	1000111e 	bne	r2,zero,8237f4 <ip_startup+0x280>
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
  8237b0:	e0bffd17 	ldw	r2,-12(fp)
  8237b4:	00c03934 	movhi	r3,228
  8237b8:	18e79c04 	addi	r3,r3,-24976
  8237bc:	1085883a 	add	r2,r2,r2
  8237c0:	1085883a 	add	r2,r2,r2
  8237c4:	10c5883a 	add	r2,r2,r3
  8237c8:	11400017 	ldw	r5,0(r2)
  8237cc:	01002174 	movhi	r4,133
  8237d0:	21030604 	addi	r4,r4,3096
  8237d4:	01800104 	movi	r6,4
  8237d8:	08420e80 	call	8420e8 <in_addmulti>
  8237dc:	1004c03a 	cmpne	r2,r2,zero
  8237e0:	1000041e 	bne	r2,zero,8237f4 <ip_startup+0x280>
      {
         ip_exit();
  8237e4:	08238c40 	call	8238c4 <ip_exit>
         return(ipmcfail_str);
  8237e8:	d0a03817 	ldw	r2,-32544(gp)
  8237ec:	e0bfff15 	stw	r2,-4(fp)
  8237f0:	00001306 	br	823840 <ip_startup+0x2cc>
   {
      ip_exit();
      return(ipmcfail_str);
   }

   for (i = 0; i < (int)ifNumber; i++)
  8237f4:	e0bffd17 	ldw	r2,-12(fp)
  8237f8:	10800044 	addi	r2,r2,1
  8237fc:	e0bffd15 	stw	r2,-12(fp)
  823800:	d0a08c17 	ldw	r2,-32208(gp)
  823804:	1007883a 	mov	r3,r2
  823808:	e0bffd17 	ldw	r2,-12(fp)
  82380c:	10ffde16 	blt	r2,r3,823788 <ip_startup+0x214>
      }
   }
#endif /* IP_MULTICAST and (IGMPv1 or IGMPv2) */   

#ifdef INCLUDE_TCP
   e = tcpinit();
  823810:	0838e500 	call	838e50 <tcpinit>
  823814:	e0bffe15 	stw	r2,-8(fp)
   if (e)
  823818:	e0bffe17 	ldw	r2,-8(fp)
  82381c:	1005003a 	cmpeq	r2,r2,zero
  823820:	1000051e 	bne	r2,zero,823838 <ip_startup+0x2c4>
   {
      ip_exit();
  823824:	08238c40 	call	8238c4 <ip_exit>
      return("unable to initialize TCP");
  823828:	00802174 	movhi	r2,133
  82382c:	10b37004 	addi	r2,r2,-12864
  823830:	e0bfff15 	stw	r2,-4(fp)
  823834:	00000206 	br	823840 <ip_startup+0x2cc>
   /* setup event map for (UDP and TCP) socket library's events (such as 
    * those used by tcp_sleep () and tcp_wakeup ()).  These events either 
    * map into operating system primitives such as events or semaphores, 
    * or into task suspend and task resume mechanisms.
    */
   evtmap_setup ();
  823838:	08424940 	call	842494 <evtmap_setup>
      return("unable to initialize IP Filter table");
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
  82383c:	e03fff15 	stw	zero,-4(fp)
  823840:	e0bfff17 	ldw	r2,-4(fp)
}
  823844:	e037883a 	mov	sp,fp
  823848:	dfc00117 	ldw	ra,4(sp)
  82384c:	df000017 	ldw	fp,0(sp)
  823850:	dec00204 	addi	sp,sp,8
  823854:	f800283a 	ret

00823858 <exit_hook>:
 * RETURNS: 
 */

void
exit_hook(void (*func)(void))
{
  823858:	defffd04 	addi	sp,sp,-12
  82385c:	dfc00215 	stw	ra,8(sp)
  823860:	df000115 	stw	fp,4(sp)
  823864:	df000104 	addi	fp,sp,4
  823868:	e13fff15 	stw	r4,-4(fp)
   if (nclosers >= (NUMCLOSERS-1))
  82386c:	d0a08d17 	ldw	r2,-32204(gp)
  823870:	10800390 	cmplti	r2,r2,14
  823874:	1000031e 	bne	r2,zero,823884 <exit_hook+0x2c>
      panic("exit_hook");
  823878:	01002174 	movhi	r4,133
  82387c:	21337704 	addi	r4,r4,-12836
  823880:	0825a2c0 	call	825a2c <panic>

   closers[++nclosers] = func;
  823884:	d0a08d17 	ldw	r2,-32204(gp)
  823888:	10800044 	addi	r2,r2,1
  82388c:	d0a08d15 	stw	r2,-32204(gp)
  823890:	d0a08d17 	ldw	r2,-32204(gp)
  823894:	00c021b4 	movhi	r3,134
  823898:	18f62604 	addi	r3,r3,-10088
  82389c:	1085883a 	add	r2,r2,r2
  8238a0:	1085883a 	add	r2,r2,r2
  8238a4:	10c7883a 	add	r3,r2,r3
  8238a8:	e0bfff17 	ldw	r2,-4(fp)
  8238ac:	18800015 	stw	r2,0(r3)
}
  8238b0:	e037883a 	mov	sp,fp
  8238b4:	dfc00117 	ldw	ra,4(sp)
  8238b8:	df000017 	ldw	fp,0(sp)
  8238bc:	dec00204 	addi	sp,sp,8
  8238c0:	f800283a 	ret

008238c4 <ip_exit>:
 * RETURNS: void
 */

void
ip_exit()
{
  8238c4:	defffd04 	addi	sp,sp,-12
  8238c8:	dfc00215 	stw	ra,8(sp)
  8238cc:	df000115 	stw	fp,4(sp)
  8238d0:	df000104 	addi	fp,sp,4
   int   n;

   for (n=nclosers; n; n--)
  8238d4:	d0a08d17 	ldw	r2,-32204(gp)
  8238d8:	e0bfff15 	stw	r2,-4(fp)
  8238dc:	00002506 	br	823974 <ip_exit+0xb0>
   {
#ifdef NPDEBUG
      dprintf("ip_exit: calling func %p\n", closers[n]);
  8238e0:	e0bfff17 	ldw	r2,-4(fp)
  8238e4:	00c021b4 	movhi	r3,134
  8238e8:	18f62604 	addi	r3,r3,-10088
  8238ec:	1085883a 	add	r2,r2,r2
  8238f0:	1085883a 	add	r2,r2,r2
  8238f4:	10c5883a 	add	r2,r2,r3
  8238f8:	11400017 	ldw	r5,0(r2)
  8238fc:	01002174 	movhi	r4,133
  823900:	21337a04 	addi	r4,r4,-12824
  823904:	08076480 	call	807648 <printf>
#endif
      if(closers[n])
  823908:	e0bfff17 	ldw	r2,-4(fp)
  82390c:	00c021b4 	movhi	r3,134
  823910:	18f62604 	addi	r3,r3,-10088
  823914:	1085883a 	add	r2,r2,r2
  823918:	1085883a 	add	r2,r2,r2
  82391c:	10c5883a 	add	r2,r2,r3
  823920:	10800017 	ldw	r2,0(r2)
  823924:	1005003a 	cmpeq	r2,r2,zero
  823928:	10000f1e 	bne	r2,zero,823968 <ip_exit+0xa4>
      {
         (*closers[n])();
  82392c:	e0bfff17 	ldw	r2,-4(fp)
  823930:	00c021b4 	movhi	r3,134
  823934:	18f62604 	addi	r3,r3,-10088
  823938:	1085883a 	add	r2,r2,r2
  82393c:	1085883a 	add	r2,r2,r2
  823940:	10c5883a 	add	r2,r2,r3
  823944:	10800017 	ldw	r2,0(r2)
  823948:	103ee83a 	callr	r2
         closers[n] = NULL;
  82394c:	e0bfff17 	ldw	r2,-4(fp)
  823950:	00c021b4 	movhi	r3,134
  823954:	18f62604 	addi	r3,r3,-10088
  823958:	1085883a 	add	r2,r2,r2
  82395c:	1085883a 	add	r2,r2,r2
  823960:	10c5883a 	add	r2,r2,r3
  823964:	10000015 	stw	zero,0(r2)
void
ip_exit()
{
   int   n;

   for (n=nclosers; n; n--)
  823968:	e0bfff17 	ldw	r2,-4(fp)
  82396c:	10bfffc4 	addi	r2,r2,-1
  823970:	e0bfff15 	stw	r2,-4(fp)
  823974:	e0bfff17 	ldw	r2,-4(fp)
  823978:	1004c03a 	cmpne	r2,r2,zero
  82397c:	103fd81e 	bne	r2,zero,8238e0 <ip_exit+0x1c>
      {
         (*closers[n])();
         closers[n] = NULL;
      }
   }
}
  823980:	e037883a 	mov	sp,fp
  823984:	dfc00117 	ldw	ra,4(sp)
  823988:	df000017 	ldw	fp,0(sp)
  82398c:	dec00204 	addi	sp,sp,8
  823990:	f800283a 	ret

00823994 <if_netnumber>:
 * RETURNS: net index for passed net pointer
 */

int
if_netnumber(NET nptr)
{
  823994:	defffa04 	addi	sp,sp,-24
  823998:	dfc00515 	stw	ra,20(sp)
  82399c:	df000415 	stw	fp,16(sp)
  8239a0:	df000404 	addi	fp,sp,16
  8239a4:	e13ffe15 	stw	r4,-8(fp)
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
  8239a8:	00803934 	movhi	r2,228
  8239ac:	10a9dd04 	addi	r2,r2,-22668
  8239b0:	10800017 	ldw	r2,0(r2)
  8239b4:	e0bffc15 	stw	r2,-16(fp)
  8239b8:	e03ffd15 	stw	zero,-12(fp)
  8239bc:	00000c06 	br	8239f0 <if_netnumber+0x5c>
   {
      if(ifp == nptr)
  8239c0:	e0fffc17 	ldw	r3,-16(fp)
  8239c4:	e0bffe17 	ldw	r2,-8(fp)
  8239c8:	1880031e 	bne	r3,r2,8239d8 <if_netnumber+0x44>
        return (int)i;
  8239cc:	e0bffd17 	ldw	r2,-12(fp)
  8239d0:	e0bfff15 	stw	r2,-4(fp)
  8239d4:	00000d06 	br	823a0c <if_netnumber+0x78>
if_netnumber(NET nptr)
{
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
  8239d8:	e0bffc17 	ldw	r2,-16(fp)
  8239dc:	10800017 	ldw	r2,0(r2)
  8239e0:	e0bffc15 	stw	r2,-16(fp)
  8239e4:	e0bffd17 	ldw	r2,-12(fp)
  8239e8:	10800044 	addi	r2,r2,1
  8239ec:	e0bffd15 	stw	r2,-12(fp)
  8239f0:	e0bffc17 	ldw	r2,-16(fp)
  8239f4:	1004c03a 	cmpne	r2,r2,zero
  8239f8:	103ff11e 	bne	r2,zero,8239c0 <if_netnumber+0x2c>
   {
      if(ifp == nptr)
        return (int)i;
   }

   panic("bad net ptr");
  8239fc:	01002174 	movhi	r4,133
  823a00:	21338104 	addi	r4,r4,-12796
  823a04:	0825a2c0 	call	825a2c <panic>
   return 0;
  823a08:	e03fff15 	stw	zero,-4(fp)
  823a0c:	e0bfff17 	ldw	r2,-4(fp)
}
  823a10:	e037883a 	mov	sp,fp
  823a14:	dfc00117 	ldw	ra,4(sp)
  823a18:	df000017 	ldw	fp,0(sp)
  823a1c:	dec00204 	addi	sp,sp,8
  823a20:	f800283a 	ret

00823a24 <igmp_init>:
 *
 * OUTPUT: None.
 */

int igmp_init(void)
{
  823a24:	defffe04 	addi	sp,sp,-8
  823a28:	df000115 	stw	fp,4(sp)
  823a2c:	df000104 	addi	fp,sp,4
   NET ifp;

   /*
    * To avoid byte-swapping the same value over and over again.
    */
   igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
  823a30:	00804034 	movhi	r2,256
  823a34:	10803804 	addi	r2,r2,224
  823a38:	d0a09015 	stw	r2,-32192(gp)
   igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);
  823a3c:	00808034 	movhi	r2,512
  823a40:	10803804 	addi	r2,r2,224
  823a44:	d0a09115 	stw	r2,-32188(gp)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
  823a48:	00803934 	movhi	r2,228
  823a4c:	10a9dd04 	addi	r2,r2,-22668
  823a50:	10800017 	ldw	r2,0(r2)
  823a54:	e0bfff15 	stw	r2,-4(fp)
  823a58:	00001006 	br	823a9c <igmp_init+0x78>
   {
      if (ifp->igmp_oper_mode == IGMP_MODE_V1)
  823a5c:	e0bfff17 	ldw	r2,-4(fp)
  823a60:	10802f03 	ldbu	r2,188(r2)
  823a64:	10803fcc 	andi	r2,r2,255
  823a68:	10800058 	cmpnei	r2,r2,1
  823a6c:	1000041e 	bne	r2,zero,823a80 <igmp_init+0x5c>
      {
         ifp->igmpv1_rtr_present = 1;
  823a70:	e0ffff17 	ldw	r3,-4(fp)
  823a74:	00800044 	movi	r2,1
  823a78:	18802d05 	stb	r2,180(r3)
  823a7c:	00000406 	br	823a90 <igmp_init+0x6c>
      }
      else
      {
         ifp->igmpv1_rtr_present = 0;
  823a80:	e0bfff17 	ldw	r2,-4(fp)
  823a84:	10002d05 	stb	zero,180(r2)
         /* not really required, only referred to if IGMPv1 router is 
          * "present" */
         ifp->igmpv1_query_rcvd_time = 0;
  823a88:	e0bfff17 	ldw	r2,-4(fp)
  823a8c:	10002e15 	stw	zero,184(r2)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
  823a90:	e0bfff17 	ldw	r2,-4(fp)
  823a94:	10800017 	ldw	r2,0(r2)
  823a98:	e0bfff15 	stw	r2,-4(fp)
  823a9c:	e0bfff17 	ldw	r2,-4(fp)
  823aa0:	1004c03a 	cmpne	r2,r2,zero
  823aa4:	103fed1e 	bne	r2,zero,823a5c <igmp_init+0x38>
   }

   /*
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
  823aa8:	00802174 	movhi	r2,133
  823aac:	10832604 	addi	r2,r2,3224
  823ab0:	10800017 	ldw	r2,0(r2)
  823ab4:	10803204 	addi	r2,r2,200
  823ab8:	d0a08f15 	stw	r2,-32196(gp)

   /* there are no timers running initially */
   igmp_timers_are_running = 0;
  823abc:	d0208e15 	stw	zero,-32200(gp)

   return IGMP_OK;
  823ac0:	0005883a 	mov	r2,zero
}
  823ac4:	e037883a 	mov	sp,fp
  823ac8:	df000017 	ldw	fp,0(sp)
  823acc:	dec00104 	addi	sp,sp,4
  823ad0:	f800283a 	ret

00823ad4 <igmp_input>:
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
  823ad4:	defff904 	addi	sp,sp,-28
  823ad8:	dfc00615 	stw	ra,24(sp)
  823adc:	df000515 	stw	fp,20(sp)
  823ae0:	df000504 	addi	fp,sp,20
  823ae4:	e13ffd15 	stw	r4,-12(fp)
   u_char mode;
   int rc;
     
   ++igmpstats.igmp_total_rcvd;
  823ae8:	00803934 	movhi	r2,228
  823aec:	10a7a004 	addi	r2,r2,-24960
  823af0:	10800017 	ldw	r2,0(r2)
  823af4:	10c00044 	addi	r3,r2,1
  823af8:	00803934 	movhi	r2,228
  823afc:	10a7a004 	addi	r2,r2,-24960
  823b00:	10c00015 	stw	r3,0(r2)
   
   /* validate the received packet; if validation fails,
    * drop the packet and return */
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
  823b04:	e13ffd17 	ldw	r4,-12(fp)
  823b08:	08242f80 	call	8242f8 <igmp_validate>
  823b0c:	e0bffb15 	stw	r2,-20(fp)
  823b10:	e0bffb17 	ldw	r2,-20(fp)
  823b14:	1004c03a 	cmpne	r2,r2,zero
  823b18:	10001e1e 	bne	r2,zero,823b94 <igmp_input+0xc0>

   /* determine the operating mode for IGMP on the ingress link */
   mode = p->net->igmp_oper_mode;
  823b1c:	e0bffd17 	ldw	r2,-12(fp)
  823b20:	10800617 	ldw	r2,24(r2)
  823b24:	10802f03 	ldbu	r2,188(r2)
  823b28:	e0bffc05 	stb	r2,-16(fp)
   
   /* feed packet to IGMPv1 or IGMPv2 code based on the operating
    * mode of the ingress link */
   switch (mode)
  823b2c:	e0bffc03 	ldbu	r2,-16(fp)
  823b30:	e0bfff15 	stw	r2,-4(fp)
  823b34:	e0ffff17 	ldw	r3,-4(fp)
  823b38:	18800060 	cmpeqi	r2,r3,1
  823b3c:	1000041e 	bne	r2,zero,823b50 <igmp_input+0x7c>
  823b40:	e0ffff17 	ldw	r3,-4(fp)
  823b44:	188000a0 	cmpeqi	r2,r3,2
  823b48:	1000051e 	bne	r2,zero,823b60 <igmp_input+0x8c>
  823b4c:	00000806 	br	823b70 <igmp_input+0x9c>
   {
#ifdef IGMP_V1   
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
  823b50:	e13ffd17 	ldw	r4,-12(fp)
  823b54:	0843f380 	call	843f38 <igmpv1_input>
  823b58:	e0bffe15 	stw	r2,-8(fp)
  823b5c:	00001506 	br	823bb4 <igmp_input+0xe0>
#endif
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
  823b60:	e13ffd17 	ldw	r4,-12(fp)
  823b64:	08442200 	call	844220 <igmpv2_input>
  823b68:	e0bffe15 	stw	r2,-8(fp)
  823b6c:	00001106 	br	823bb4 <igmp_input+0xe0>
#endif
      default:
         ++igmpstats.igmp_bad_oper_mode;     
  823b70:	00803934 	movhi	r2,228
  823b74:	10a7a004 	addi	r2,r2,-24960
  823b78:	10800d17 	ldw	r2,52(r2)
  823b7c:	10c00044 	addi	r3,r2,1
  823b80:	00803934 	movhi	r2,228
  823b84:	10a7a004 	addi	r2,r2,-24960
  823b88:	10c00d15 	stw	r3,52(r2)
         rc = IGMP_ERR;
  823b8c:	00bfffc4 	movi	r2,-1
  823b90:	e0bffb15 	stw	r2,-20(fp)
         break;
   }
   
end:   
   /* return packet buffer back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
  823b94:	01000084 	movi	r4,2
  823b98:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p);
  823b9c:	e13ffd17 	ldw	r4,-12(fp)
  823ba0:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  823ba4:	01000084 	movi	r4,2
  823ba8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      
   return rc;
  823bac:	e0bffb17 	ldw	r2,-20(fp)
  823bb0:	e0bffe15 	stw	r2,-8(fp)
  823bb4:	e0bffe17 	ldw	r2,-8(fp)
}
  823bb8:	e037883a 	mov	sp,fp
  823bbc:	dfc00117 	ldw	ra,4(sp)
  823bc0:	df000017 	ldw	fp,0(sp)
  823bc4:	dec00204 	addi	sp,sp,8
  823bc8:	f800283a 	ret

00823bcc <igmp_fasttimo>:
 *
 * OUTPUT: None.
 */

void igmp_fasttimo (void)
{
  823bcc:	defffc04 	addi	sp,sp,-16
  823bd0:	dfc00315 	stw	ra,12(sp)
  823bd4:	df000215 	stw	fp,8(sp)
  823bd8:	df000204 	addi	fp,sp,8
   struct in_multi * inm;
   NET ifp;
     
   LOCK_NET_RESOURCE (NET_RESID);
  823bdc:	0009883a 	mov	r4,zero
  823be0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   
   /*
    * Quick check to see if any work needs to be done, in order
    * to minimize the overhead of fasttimo processing.
    */
   if (!igmp_timers_are_running)
  823be4:	d0a08e17 	ldw	r2,-32200(gp)
  823be8:	1004c03a 	cmpne	r2,r2,zero
  823bec:	1000031e 	bne	r2,zero,823bfc <igmp_fasttimo+0x30>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
  823bf0:	0009883a 	mov	r4,zero
  823bf4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return;
  823bf8:	00005606 	br	823d54 <igmp_fasttimo+0x188>
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  823bfc:	00803934 	movhi	r2,228
  823c00:	10a9dd04 	addi	r2,r2,-22668
  823c04:	10800017 	ldw	r2,0(r2)
  823c08:	e0bffe15 	stw	r2,-8(fp)
  823c0c:	00004706 	br	823d2c <igmp_fasttimo+0x160>
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
  823c10:	e0bffe17 	ldw	r2,-8(fp)
  823c14:	10802c17 	ldw	r2,176(r2)
  823c18:	e0bfff15 	stw	r2,-4(fp)
  823c1c:	00003d06 	br	823d14 <igmp_fasttimo+0x148>
      {
         /* skip IPv6 entries */
         if (inm->inm_addr == 0) 
  823c20:	e0bfff17 	ldw	r2,-4(fp)
  823c24:	10800017 	ldw	r2,0(r2)
  823c28:	1005003a 	cmpeq	r2,r2,zero
  823c2c:	1000361e 	bne	r2,zero,823d08 <igmp_fasttimo+0x13c>
               continue;

         if (inm->inm_timer == 0)   /* timer not set */
  823c30:	e0bfff17 	ldw	r2,-4(fp)
  823c34:	10800317 	ldw	r2,12(r2)
  823c38:	1005003a 	cmpeq	r2,r2,zero
  823c3c:	1000321e 	bne	r2,zero,823d08 <igmp_fasttimo+0x13c>
         {
            /* do nothing */
         }
         else if (--inm->inm_timer == 0)  /* timer expired */
  823c40:	e0bfff17 	ldw	r2,-4(fp)
  823c44:	10800317 	ldw	r2,12(r2)
  823c48:	10ffffc4 	addi	r3,r2,-1
  823c4c:	e0bfff17 	ldw	r2,-4(fp)
  823c50:	10c00315 	stw	r3,12(r2)
  823c54:	e0bfff17 	ldw	r2,-4(fp)
  823c58:	10800317 	ldw	r2,12(r2)
  823c5c:	1004c03a 	cmpne	r2,r2,zero
  823c60:	1000291e 	bne	r2,zero,823d08 <igmp_fasttimo+0x13c>
         {
            /* send membership report in appropriate format */
            if (ifp->igmpv1_rtr_present)
  823c64:	e0bffe17 	ldw	r2,-8(fp)
  823c68:	10802d03 	ldbu	r2,180(r2)
  823c6c:	10803fcc 	andi	r2,r2,255
  823c70:	1005003a 	cmpeq	r2,r2,zero
  823c74:	1000041e 	bne	r2,zero,823c88 <igmp_fasttimo+0xbc>
            {
               /* always true for IGMPv1, may be true for IGMPv2 */
               igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
  823c78:	01000484 	movi	r4,18
  823c7c:	e17fff17 	ldw	r5,-4(fp)
  823c80:	0823d680 	call	823d68 <igmp_send>
  823c84:	00000306 	br	823c94 <igmp_fasttimo+0xc8>
            }
            else
            {
               igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
  823c88:	01000584 	movi	r4,22
  823c8c:	e17fff17 	ldw	r5,-4(fp)
  823c90:	0823d680 	call	823d68 <igmp_send>

            /* for IGMPv2, indicate that we were the last to send 
             * a Report for this multicast group (relevant for 
             * IGMPv2 only).  also check to see if we should mark 
             * the IGMPv1 router as "absent". */
            if (ifp->igmp_oper_mode == IGMP_MODE_V2)
  823c94:	e0bffe17 	ldw	r2,-8(fp)
  823c98:	10802f03 	ldbu	r2,188(r2)
  823c9c:	10803fcc 	andi	r2,r2,255
  823ca0:	10800098 	cmpnei	r2,r2,2
  823ca4:	1000151e 	bne	r2,zero,823cfc <igmp_fasttimo+0x130>
            {
               inm->last2send_report = IGMP_TRUE;
  823ca8:	e0ffff17 	ldw	r3,-4(fp)
  823cac:	00800044 	movi	r2,1
  823cb0:	18800405 	stb	r2,16(r3)
               
               if (ifp->igmpv1_rtr_present)
  823cb4:	e0bffe17 	ldw	r2,-8(fp)
  823cb8:	10802d03 	ldbu	r2,180(r2)
  823cbc:	10803fcc 	andi	r2,r2,255
  823cc0:	1005003a 	cmpeq	r2,r2,zero
  823cc4:	10000d1e 	bne	r2,zero,823cfc <igmp_fasttimo+0x130>
               {
                  if (cticks > (ifp->igmpv1_query_rcvd_time + (IGMPv1_RTR_PRESENT_TMO * TPS)))
  823cc8:	e0bffe17 	ldw	r2,-8(fp)
  823ccc:	10c02e17 	ldw	r3,184(r2)
  823cd0:	008001b4 	movhi	r2,6
  823cd4:	1086a004 	addi	r2,r2,6784
  823cd8:	1887883a 	add	r3,r3,r2
  823cdc:	00802174 	movhi	r2,133
  823ce0:	10832604 	addi	r2,r2,3224
  823ce4:	10800017 	ldw	r2,0(r2)
  823ce8:	1880042e 	bgeu	r3,r2,823cfc <igmp_fasttimo+0x130>
                     /* we haven't heard from the IGMPv1 router for a duration
                      * greater than or equal to Version 1 Router Present Timeout 
                      * (400 seconds), and will now update the igmpv1_rtr_present 
                      * variable to reflect that.
                      */
                     ifp->igmpv1_rtr_present = IGMP_FALSE;
  823cec:	e0bffe17 	ldw	r2,-8(fp)
  823cf0:	10002d05 	stb	zero,180(r2)
                     ifp->igmpv1_query_rcvd_time = 0;
  823cf4:	e0bffe17 	ldw	r2,-8(fp)
  823cf8:	10002e15 	stw	zero,184(r2)
                  }
               }  
            }

            /* decrement the count of running IGMP timers */
            --igmp_timers_are_running;
  823cfc:	d0a08e17 	ldw	r2,-32200(gp)
  823d00:	10bfffc4 	addi	r2,r2,-1
  823d04:	d0a08e15 	stw	r2,-32200(gp)
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
  823d08:	e0bfff17 	ldw	r2,-4(fp)
  823d0c:	10800517 	ldw	r2,20(r2)
  823d10:	e0bfff15 	stw	r2,-4(fp)
  823d14:	e0bfff17 	ldw	r2,-4(fp)
  823d18:	1004c03a 	cmpne	r2,r2,zero
  823d1c:	103fc01e 	bne	r2,zero,823c20 <igmp_fasttimo+0x54>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  823d20:	e0bffe17 	ldw	r2,-8(fp)
  823d24:	10800017 	ldw	r2,0(r2)
  823d28:	e0bffe15 	stw	r2,-8(fp)
  823d2c:	e0bffe17 	ldw	r2,-8(fp)
  823d30:	1004c03a 	cmpne	r2,r2,zero
  823d34:	103fb61e 	bne	r2,zero,823c10 <igmp_fasttimo+0x44>
      }     
   }

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
  823d38:	00802174 	movhi	r2,133
  823d3c:	10832604 	addi	r2,r2,3224
  823d40:	10800017 	ldw	r2,0(r2)
  823d44:	10803204 	addi	r2,r2,200
  823d48:	d0a08f15 	stw	r2,-32196(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
  823d4c:	0009883a 	mov	r4,zero
  823d50:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   
   return;
}
  823d54:	e037883a 	mov	sp,fp
  823d58:	dfc00117 	ldw	ra,4(sp)
  823d5c:	df000017 	ldw	fp,0(sp)
  823d60:	dec00204 	addi	sp,sp,8
  823d64:	f800283a 	ret

00823d68 <igmp_send>:
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
  823d68:	deffdd04 	addi	sp,sp,-140
  823d6c:	dfc02215 	stw	ra,136(sp)
  823d70:	df002115 	stw	fp,132(sp)
  823d74:	df002104 	addi	fp,sp,132
  823d78:	e17fff15 	stw	r5,-4(fp)
  823d7c:	e13ffe05 	stb	r4,-8(fp)
   struct ip_moptions * imop;
   struct ip_moptions simo;
   struct ip * pip;
   int i;
   u_char * tmpp;
   u_char opts [2] = {IP_RTR_ALERT_OPT, EOL_OPT};
  823d80:	00800504 	movi	r2,20
  823d84:	e0bffd05 	stb	r2,-12(fp)
  823d88:	e03ffd45 	stb	zero,-11(fp)
   u_char reqd_len;

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
  823d8c:	00802174 	movhi	r2,133
  823d90:	1082ff04 	addi	r2,r2,3068
  823d94:	10800017 	ldw	r2,0(r2)
  823d98:	10800704 	addi	r2,r2,28
  823d9c:	e0bfdf05 	stb	r2,-132(fp)
   if ((type == IGMPv2_LEAVE_GROUP) || 
  823da0:	e0bffe03 	ldbu	r2,-8(fp)
  823da4:	108005e0 	cmpeqi	r2,r2,23
  823da8:	1000031e 	bne	r2,zero,823db8 <igmp_send+0x50>
  823dac:	e0bffe03 	ldbu	r2,-8(fp)
  823db0:	10800598 	cmpnei	r2,r2,22
  823db4:	1000031e 	bne	r2,zero,823dc4 <igmp_send+0x5c>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
  823db8:	e0bfdf03 	ldbu	r2,-132(fp)
  823dbc:	10800104 	addi	r2,r2,4
  823dc0:	e0bfdf05 	stb	r2,-132(fp)
   }

   /* obtain a packet to send the IGMP message */
   LOCK_NET_RESOURCE (FREEQ_RESID);
  823dc4:	01000084 	movi	r4,2
  823dc8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   p = pk_alloc (reqd_len);
  823dcc:	e13fdf03 	ldbu	r4,-132(fp)
  823dd0:	0829b840 	call	829b84 <pk_alloc>
  823dd4:	e0bfe615 	stw	r2,-104(fp)
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
  823dd8:	01000084 	movi	r4,2
  823ddc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   
   /* log an error and return if the allocation fails */   
   if (!p)
  823de0:	e0bfe617 	ldw	r2,-104(fp)
  823de4:	1004c03a 	cmpne	r2,r2,zero
  823de8:	1000081e 	bne	r2,zero,823e0c <igmp_send+0xa4>
   {
      ++igmpstats.igmp_pkt_alloc_fail;
  823dec:	00803934 	movhi	r2,228
  823df0:	10a7a004 	addi	r2,r2,-24960
  823df4:	10800c17 	ldw	r2,48(r2)
  823df8:	10c00044 	addi	r3,r2,1
  823dfc:	00803934 	movhi	r2,228
  823e00:	10a7a004 	addi	r2,r2,-24960
  823e04:	10c00c15 	stw	r3,48(r2)
      return;
  823e08:	00007c06 	br	823ffc <igmp_send+0x294>
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
  823e0c:	e0bfe617 	ldw	r2,-104(fp)
  823e10:	10800317 	ldw	r2,12(r2)
  823e14:	e0bfe315 	stw	r2,-116(fp)
   pip->ip_src = inm->inm_netp->n_ipaddr;
  823e18:	e0bfff17 	ldw	r2,-4(fp)
  823e1c:	10800117 	ldw	r2,4(r2)
  823e20:	10c00a17 	ldw	r3,40(r2)
  823e24:	e0bfe317 	ldw	r2,-116(fp)
  823e28:	10c00315 	stw	r3,12(r2)
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
  823e2c:	e0bffe03 	ldbu	r2,-8(fp)
  823e30:	108005d8 	cmpnei	r2,r2,23
  823e34:	1000041e 	bne	r2,zero,823e48 <igmp_send+0xe0>
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
  823e38:	d0e09117 	ldw	r3,-32188(gp)
  823e3c:	e0bfe317 	ldw	r2,-116(fp)
  823e40:	10c00415 	stw	r3,16(r2)
  823e44:	00000406 	br	823e58 <igmp_send+0xf0>
   }
   else
      pip->ip_dest = inm->inm_addr;
  823e48:	e0bfff17 	ldw	r2,-4(fp)
  823e4c:	10c00017 	ldw	r3,0(r2)
  823e50:	e0bfe317 	ldw	r2,-116(fp)
  823e54:	10c00415 	stw	r3,16(r2)
   
   p->fhost = pip->ip_dest;
  823e58:	e0bfe317 	ldw	r2,-116(fp)
  823e5c:	10c00417 	ldw	r3,16(r2)
  823e60:	e0bfe617 	ldw	r2,-104(fp)
  823e64:	10c00715 	stw	r3,28(r2)

   tmpp = (((u_char *) p->nb_prot) + sizeof (struct ip));
  823e68:	e0bfe617 	ldw	r2,-104(fp)
  823e6c:	10800317 	ldw	r2,12(r2)
  823e70:	10800504 	addi	r2,r2,20
  823e74:	e0bfe115 	stw	r2,-124(fp)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
  823e78:	e0bffe03 	ldbu	r2,-8(fp)
  823e7c:	108005e0 	cmpeqi	r2,r2,23
  823e80:	1000031e 	bne	r2,zero,823e90 <igmp_send+0x128>
  823e84:	e0bffe03 	ldbu	r2,-8(fp)
  823e88:	10800598 	cmpnei	r2,r2,22
  823e8c:	1000061e 	bne	r2,zero,823ea8 <igmp_send+0x140>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      /* provide space for ip_write2 () to write option-related data */
      tmpp += IP_RTR_ALERT_OPT_SIZE;
  823e90:	e0bfe117 	ldw	r2,-124(fp)
  823e94:	10800104 	addi	r2,r2,4
  823e98:	e0bfe115 	stw	r2,-124(fp)
      optp = &(opts [0]); /* one option (IP Router Alert) */
  823e9c:	e0bffd04 	addi	r2,fp,-12
  823ea0:	e0bfe015 	stw	r2,-128(fp)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
  823ea4:	00000306 	br	823eb4 <igmp_send+0x14c>
      tmpp += IP_RTR_ALERT_OPT_SIZE;
      optp = &(opts [0]); /* one option (IP Router Alert) */
   }
   /* outgoing packet does not require any options */
   else 
      optp = &(opts [1]);
  823ea8:	e0bffd04 	addi	r2,fp,-12
  823eac:	10800044 	addi	r2,r2,1
  823eb0:	e0bfe015 	stw	r2,-128(fp)
   /* point to the start of the IGMP header */
   igmp = (struct igmp *) tmpp;
  823eb4:	e0bfe117 	ldw	r2,-124(fp)
  823eb8:	e0bfe515 	stw	r2,-108(fp)
   
   igmp->igmp_type = type;
  823ebc:	e0ffe517 	ldw	r3,-108(fp)
  823ec0:	e0bffe03 	ldbu	r2,-8(fp)
  823ec4:	18800005 	stb	r2,0(r3)
   igmp->igmp_code = 0;
  823ec8:	e0bfe517 	ldw	r2,-108(fp)
  823ecc:	10000045 	stb	zero,1(r2)
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
  823ed0:	e0bfff17 	ldw	r2,-4(fp)
  823ed4:	10c00017 	ldw	r3,0(r2)
  823ed8:	e0bfe517 	ldw	r2,-108(fp)
  823edc:	10c00115 	stw	r3,4(r2)
   igmp->igmp_cksum = 0;
  823ee0:	e0bfe517 	ldw	r2,-108(fp)
  823ee4:	1000008d 	sth	zero,2(r2)
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
  823ee8:	e13fe517 	ldw	r4,-108(fp)
  823eec:	01400104 	movi	r5,4
  823ef0:	08256340 	call	825634 <cksum>
  823ef4:	0084303a 	nor	r2,zero,r2
  823ef8:	1007883a 	mov	r3,r2
  823efc:	e0bfe517 	ldw	r2,-108(fp)
  823f00:	10c0008d 	sth	r3,2(r2)

   imop = &simo;
  823f04:	e0bfe704 	addi	r2,fp,-100
  823f08:	e0bfe415 	stw	r2,-112(fp)
   MEMSET(imop, 0, sizeof(simo));
  823f0c:	e0bfe417 	ldw	r2,-112(fp)
  823f10:	1009883a 	mov	r4,r2
  823f14:	01801604 	movi	r6,88
  823f18:	000b883a 	mov	r5,zero
  823f1c:	08074b80 	call	8074b8 <memset>
   imop->imo_multicast_netp = inm->inm_netp;
  823f20:	e0bfff17 	ldw	r2,-4(fp)
  823f24:	10c00117 	ldw	r3,4(r2)
  823f28:	e0bfe417 	ldw	r2,-112(fp)
  823f2c:	10c00015 	stw	r3,0(r2)
   imop->imo_multicast_ttl = 1;
  823f30:	e0ffe417 	ldw	r3,-112(fp)
  823f34:	00800044 	movi	r2,1
  823f38:	18800105 	stb	r2,4(r3)
   /* we do not want our own reports to be looped back */
   imop->imo_multicast_loop = 0;
  823f3c:	e0bfe417 	ldw	r2,-112(fp)
  823f40:	10000145 	stb	zero,5(r2)

   /* set nb_prot to point to the beginning of the IGMP data,
    * and nb_plen to the length of the IGMP data, and attach
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
  823f44:	e0ffe117 	ldw	r3,-124(fp)
  823f48:	e0bfe617 	ldw	r2,-104(fp)
  823f4c:	10c00315 	stw	r3,12(r2)
   p->nb_plen = sizeof(struct igmp);
  823f50:	e0ffe617 	ldw	r3,-104(fp)
  823f54:	00800204 	movi	r2,8
  823f58:	18800415 	stw	r2,16(r3)
   p->imo = imop;
  823f5c:	e0ffe617 	ldw	r3,-104(fp)
  823f60:	e0bfe417 	ldw	r2,-112(fp)
  823f64:	18800b15 	stw	r2,44(r3)
   
   i = ip_write2 (IGMP_PROT, p, optp);
  823f68:	01000084 	movi	r4,2
  823f6c:	e17fe617 	ldw	r5,-104(fp)
  823f70:	e1bfe017 	ldw	r6,-128(fp)
  823f74:	083ded40 	call	83ded4 <ip_write2>
  823f78:	e0bfe215 	stw	r2,-120(fp)

   if (type == IGMPv2_LEAVE_GROUP)
  823f7c:	e0bffe03 	ldbu	r2,-8(fp)
  823f80:	108005d8 	cmpnei	r2,r2,23
  823f84:	1000081e 	bne	r2,zero,823fa8 <igmp_send+0x240>
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
  823f88:	00803934 	movhi	r2,228
  823f8c:	10a7a004 	addi	r2,r2,-24960
  823f90:	10801717 	ldw	r2,92(r2)
  823f94:	10c00044 	addi	r3,r2,1
  823f98:	00803934 	movhi	r2,228
  823f9c:	10a7a004 	addi	r2,r2,-24960
  823fa0:	10c01715 	stw	r3,92(r2)
  823fa4:	00001506 	br	823ffc <igmp_send+0x294>
   else if (type == IGMPv2_MEMBERSHIP_REPORT)
  823fa8:	e0bffe03 	ldbu	r2,-8(fp)
  823fac:	10800598 	cmpnei	r2,r2,22
  823fb0:	1000081e 	bne	r2,zero,823fd4 <igmp_send+0x26c>
      ++igmpstats.igmpv2mode_v2_reports_sent;
  823fb4:	00803934 	movhi	r2,228
  823fb8:	10a7a004 	addi	r2,r2,-24960
  823fbc:	10801817 	ldw	r2,96(r2)
  823fc0:	10c00044 	addi	r3,r2,1
  823fc4:	00803934 	movhi	r2,228
  823fc8:	10a7a004 	addi	r2,r2,-24960
  823fcc:	10c01815 	stw	r3,96(r2)
  823fd0:	00000a06 	br	823ffc <igmp_send+0x294>
   else if (type == IGMP_HOST_MEMBERSHIP_REPORT)
  823fd4:	e0bffe03 	ldbu	r2,-8(fp)
  823fd8:	10800498 	cmpnei	r2,r2,18
  823fdc:	1000071e 	bne	r2,zero,823ffc <igmp_send+0x294>
      ++igmpstats.igmp_v1_reports_sent;
  823fe0:	00803934 	movhi	r2,228
  823fe4:	10a7a004 	addi	r2,r2,-24960
  823fe8:	10801617 	ldw	r2,88(r2)
  823fec:	10c00044 	addi	r3,r2,1
  823ff0:	00803934 	movhi	r2,228
  823ff4:	10a7a004 	addi	r2,r2,-24960
  823ff8:	10c01615 	stw	r3,88(r2)
}
  823ffc:	e037883a 	mov	sp,fp
  824000:	dfc00117 	ldw	ra,4(sp)
  824004:	df000017 	ldw	fp,0(sp)
  824008:	dec00204 	addi	sp,sp,8
  82400c:	f800283a 	ret

00824010 <igmp_joingroup>:
 *
 * OUTPUT: None.
 */
 
void igmp_joingroup(struct in_multi * inm)
{
  824010:	defffc04 	addi	sp,sp,-16
  824014:	dfc00315 	stw	ra,12(sp)
  824018:	df000215 	stw	fp,8(sp)
  82401c:	df000204 	addi	fp,sp,8
  824020:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   /* extract the network interface to which this multicast
    * address is "attached" */
   ifp = inm->inm_netp;
  824024:	e0bfff17 	ldw	r2,-4(fp)
  824028:	10800117 	ldw	r2,4(r2)
  82402c:	e0bffe15 	stw	r2,-8(fp)

   if (inm->inm_addr == igmp_all_hosts_group)
  824030:	e0bfff17 	ldw	r2,-4(fp)
  824034:	10c00017 	ldw	r3,0(r2)
  824038:	d0a09017 	ldw	r2,-32192(gp)
  82403c:	1880031e 	bne	r3,r2,82404c <igmp_joingroup+0x3c>
   {
      inm->inm_timer = 0;
  824040:	e0bfff17 	ldw	r2,-4(fp)
  824044:	10000315 	stw	zero,12(r2)
  824048:	00008706 	br	824268 <igmp_joingroup+0x258>
   }
   else 
   {
      /* send unsolicited membership report in appropriate format */
      if (ifp->igmpv1_rtr_present)
  82404c:	e0bffe17 	ldw	r2,-8(fp)
  824050:	10802d03 	ldbu	r2,180(r2)
  824054:	10803fcc 	andi	r2,r2,255
  824058:	1005003a 	cmpeq	r2,r2,zero
  82405c:	10003c1e 	bne	r2,zero,824150 <igmp_joingroup+0x140>
      {
         /* always true for IGMPv1, may be true for IGMPv2 */
         igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
  824060:	01000484 	movi	r4,18
  824064:	e17fff17 	ldw	r5,-4(fp)
  824068:	0823d680 	call	823d68 <igmp_send>
         /* set a delay timer (with a duration of 
          * IGMP_MAX_HOST_REPORT_DELAY) for a second unsolicited report */
         inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
  82406c:	00803934 	movhi	r2,228
  824070:	10a9e204 	addi	r2,r2,-22648
  824074:	11000217 	ldw	r4,8(r2)
  824078:	00803934 	movhi	r2,228
  82407c:	10a79c04 	addi	r2,r2,-24976
  824080:	10800017 	ldw	r2,0(r2)
  824084:	10800a17 	ldw	r2,40(r2)
  824088:	1004d63a 	srli	r2,r2,24
  82408c:	10c03fcc 	andi	r3,r2,255
  824090:	00803934 	movhi	r2,228
  824094:	10a79c04 	addi	r2,r2,-24976
  824098:	10800017 	ldw	r2,0(r2)
  82409c:	10800a17 	ldw	r2,40(r2)
  8240a0:	1004d23a 	srli	r2,r2,8
  8240a4:	10bfc00c 	andi	r2,r2,65280
  8240a8:	1886b03a 	or	r3,r3,r2
  8240ac:	00803934 	movhi	r2,228
  8240b0:	10a79c04 	addi	r2,r2,-24976
  8240b4:	10800017 	ldw	r2,0(r2)
  8240b8:	10800a17 	ldw	r2,40(r2)
  8240bc:	10bfc00c 	andi	r2,r2,65280
  8240c0:	1004923a 	slli	r2,r2,8
  8240c4:	1886b03a 	or	r3,r3,r2
  8240c8:	00803934 	movhi	r2,228
  8240cc:	10a79c04 	addi	r2,r2,-24976
  8240d0:	10800017 	ldw	r2,0(r2)
  8240d4:	10800a17 	ldw	r2,40(r2)
  8240d8:	10803fcc 	andi	r2,r2,255
  8240dc:	1004963a 	slli	r2,r2,24
  8240e0:	1884b03a 	or	r2,r3,r2
  8240e4:	2089883a 	add	r4,r4,r2
  8240e8:	e0bfff17 	ldw	r2,-4(fp)
  8240ec:	10800017 	ldw	r2,0(r2)
  8240f0:	1004d63a 	srli	r2,r2,24
  8240f4:	10c03fcc 	andi	r3,r2,255
  8240f8:	e0bfff17 	ldw	r2,-4(fp)
  8240fc:	10800017 	ldw	r2,0(r2)
  824100:	1004d23a 	srli	r2,r2,8
  824104:	10bfc00c 	andi	r2,r2,65280
  824108:	1886b03a 	or	r3,r3,r2
  82410c:	e0bfff17 	ldw	r2,-4(fp)
  824110:	10800017 	ldw	r2,0(r2)
  824114:	10bfc00c 	andi	r2,r2,65280
  824118:	1004923a 	slli	r2,r2,8
  82411c:	1886b03a 	or	r3,r3,r2
  824120:	e0bfff17 	ldw	r2,-4(fp)
  824124:	10800017 	ldw	r2,0(r2)
  824128:	10803fcc 	andi	r2,r2,255
  82412c:	1004963a 	slli	r2,r2,24
  824130:	1884b03a 	or	r2,r3,r2
  824134:	2089883a 	add	r4,r4,r2
  824138:	01400c84 	movi	r5,50
  82413c:	08053c00 	call	8053c0 <__umodsi3>
  824140:	10c00044 	addi	r3,r2,1
  824144:	e0bfff17 	ldw	r2,-4(fp)
  824148:	10c00315 	stw	r3,12(r2)
  82414c:	00003b06 	br	82423c <igmp_joingroup+0x22c>
      }
      else
      {
         igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
  824150:	01000584 	movi	r4,22
  824154:	e17fff17 	ldw	r5,-4(fp)
  824158:	0823d680 	call	823d68 <igmp_send>
         /* the delay time duration is the Unsolicited Report Interval */
         inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY ((UNSOLIC_RPT_INTERVAL * PR_FASTHZ), inm->inm_addr);
  82415c:	00803934 	movhi	r2,228
  824160:	10a9e204 	addi	r2,r2,-22648
  824164:	11000217 	ldw	r4,8(r2)
  824168:	00803934 	movhi	r2,228
  82416c:	10a79c04 	addi	r2,r2,-24976
  824170:	10800017 	ldw	r2,0(r2)
  824174:	10800a17 	ldw	r2,40(r2)
  824178:	1004d63a 	srli	r2,r2,24
  82417c:	10c03fcc 	andi	r3,r2,255
  824180:	00803934 	movhi	r2,228
  824184:	10a79c04 	addi	r2,r2,-24976
  824188:	10800017 	ldw	r2,0(r2)
  82418c:	10800a17 	ldw	r2,40(r2)
  824190:	1004d23a 	srli	r2,r2,8
  824194:	10bfc00c 	andi	r2,r2,65280
  824198:	1886b03a 	or	r3,r3,r2
  82419c:	00803934 	movhi	r2,228
  8241a0:	10a79c04 	addi	r2,r2,-24976
  8241a4:	10800017 	ldw	r2,0(r2)
  8241a8:	10800a17 	ldw	r2,40(r2)
  8241ac:	10bfc00c 	andi	r2,r2,65280
  8241b0:	1004923a 	slli	r2,r2,8
  8241b4:	1886b03a 	or	r3,r3,r2
  8241b8:	00803934 	movhi	r2,228
  8241bc:	10a79c04 	addi	r2,r2,-24976
  8241c0:	10800017 	ldw	r2,0(r2)
  8241c4:	10800a17 	ldw	r2,40(r2)
  8241c8:	10803fcc 	andi	r2,r2,255
  8241cc:	1004963a 	slli	r2,r2,24
  8241d0:	1884b03a 	or	r2,r3,r2
  8241d4:	2089883a 	add	r4,r4,r2
  8241d8:	e0bfff17 	ldw	r2,-4(fp)
  8241dc:	10800017 	ldw	r2,0(r2)
  8241e0:	1004d63a 	srli	r2,r2,24
  8241e4:	10c03fcc 	andi	r3,r2,255
  8241e8:	e0bfff17 	ldw	r2,-4(fp)
  8241ec:	10800017 	ldw	r2,0(r2)
  8241f0:	1004d23a 	srli	r2,r2,8
  8241f4:	10bfc00c 	andi	r2,r2,65280
  8241f8:	1886b03a 	or	r3,r3,r2
  8241fc:	e0bfff17 	ldw	r2,-4(fp)
  824200:	10800017 	ldw	r2,0(r2)
  824204:	10bfc00c 	andi	r2,r2,65280
  824208:	1004923a 	slli	r2,r2,8
  82420c:	1886b03a 	or	r3,r3,r2
  824210:	e0bfff17 	ldw	r2,-4(fp)
  824214:	10800017 	ldw	r2,0(r2)
  824218:	10803fcc 	andi	r2,r2,255
  82421c:	1004963a 	slli	r2,r2,24
  824220:	1884b03a 	or	r2,r3,r2
  824224:	2089883a 	add	r4,r4,r2
  824228:	01400c84 	movi	r5,50
  82422c:	08053c00 	call	8053c0 <__umodsi3>
  824230:	10c00044 	addi	r3,r2,1
  824234:	e0bfff17 	ldw	r2,-4(fp)
  824238:	10c00315 	stw	r3,12(r2)
      }
      
      /* for IGMPv2, indicate that we were the last to send 
       * a Report for this multicast group (relevant for 
       * IGMPv2 only). */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
  82423c:	e0bffe17 	ldw	r2,-8(fp)
  824240:	10802f03 	ldbu	r2,188(r2)
  824244:	10803fcc 	andi	r2,r2,255
  824248:	10800098 	cmpnei	r2,r2,2
  82424c:	1000031e 	bne	r2,zero,82425c <igmp_joingroup+0x24c>
      {
         inm->last2send_report = IGMP_TRUE;
  824250:	e0ffff17 	ldw	r3,-4(fp)
  824254:	00800044 	movi	r2,1
  824258:	18800405 	stb	r2,16(r3)
      }

      ++igmp_timers_are_running;
  82425c:	d0a08e17 	ldw	r2,-32200(gp)
  824260:	10800044 	addi	r2,r2,1
  824264:	d0a08e15 	stw	r2,-32200(gp)
   }
   
   return;
}     
  824268:	e037883a 	mov	sp,fp
  82426c:	dfc00117 	ldw	ra,4(sp)
  824270:	df000017 	ldw	fp,0(sp)
  824274:	dec00204 	addi	sp,sp,8
  824278:	f800283a 	ret

0082427c <igmp_leavegroup>:
 *
 * OUTPUT: None.
 */

void igmp_leavegroup (struct in_multi * inm)
{
  82427c:	defffc04 	addi	sp,sp,-16
  824280:	dfc00315 	stw	ra,12(sp)
  824284:	df000215 	stw	fp,8(sp)
  824288:	df000204 	addi	fp,sp,8
  82428c:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   ifp = inm->inm_netp;
  824290:	e0bfff17 	ldw	r2,-4(fp)
  824294:	10800117 	ldw	r2,4(r2)
  824298:	e0bffe15 	stw	r2,-8(fp)

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
  82429c:	e0bffe17 	ldw	r2,-8(fp)
  8242a0:	10802f03 	ldbu	r2,188(r2)
  8242a4:	10803fcc 	andi	r2,r2,255
  8242a8:	10800098 	cmpnei	r2,r2,2
  8242ac:	10000d1e 	bne	r2,zero,8242e4 <igmp_leavegroup+0x68>
  8242b0:	e0bffe17 	ldw	r2,-8(fp)
  8242b4:	10802d03 	ldbu	r2,180(r2)
  8242b8:	10803fcc 	andi	r2,r2,255
  8242bc:	1004c03a 	cmpne	r2,r2,zero
  8242c0:	1000081e 	bne	r2,zero,8242e4 <igmp_leavegroup+0x68>
       !ifp->igmpv1_rtr_present)
   {
      if (inm->last2send_report == IGMP_TRUE)
  8242c4:	e0bfff17 	ldw	r2,-4(fp)
  8242c8:	10800403 	ldbu	r2,16(r2)
  8242cc:	10803fcc 	andi	r2,r2,255
  8242d0:	10800058 	cmpnei	r2,r2,1
  8242d4:	1000031e 	bne	r2,zero,8242e4 <igmp_leavegroup+0x68>
         igmp_send (IGMPv2_LEAVE_GROUP, inm);
  8242d8:	010005c4 	movi	r4,23
  8242dc:	e17fff17 	ldw	r5,-4(fp)
  8242e0:	0823d680 	call	823d68 <igmp_send>
   }
   
   return;
}
  8242e4:	e037883a 	mov	sp,fp
  8242e8:	dfc00117 	ldw	ra,4(sp)
  8242ec:	df000017 	ldw	fp,0(sp)
  8242f0:	dec00204 	addi	sp,sp,8
  8242f4:	f800283a 	ret

008242f8 <igmp_validate>:
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
  8242f8:	defff504 	addi	sp,sp,-44
  8242fc:	dfc00a15 	stw	ra,40(sp)
  824300:	df000915 	stw	fp,36(sp)
  824304:	df000904 	addi	fp,sp,36
  824308:	e13ffe15 	stw	r4,-8(fp)
   u_short xsum;  
   u_char type;
   ip_addr mcgrp_addr;
   u_char resp_time;

   pip = ip_head (p);
  82430c:	e0bffe17 	ldw	r2,-8(fp)
  824310:	10800317 	ldw	r2,12(r2)
  824314:	e0bffd15 	stw	r2,-12(fp)

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
  824318:	e0bffe17 	ldw	r2,-8(fp)
  82431c:	10c00417 	ldw	r3,16(r2)
  824320:	e0bffd17 	ldw	r2,-12(fp)
  824324:	10800003 	ldbu	r2,0(r2)
  824328:	10803fcc 	andi	r2,r2,255
  82432c:	108003cc 	andi	r2,r2,15
  824330:	1085883a 	add	r2,r2,r2
  824334:	1085883a 	add	r2,r2,r2
  824338:	1885c83a 	sub	r2,r3,r2
  82433c:	e0bffc15 	stw	r2,-16(fp)

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
  824340:	e0bffc17 	ldw	r2,-16(fp)
  824344:	10800220 	cmpeqi	r2,r2,8
  824348:	10000a1e 	bne	r2,zero,824374 <igmp_validate+0x7c>
   {
      ++igmpstats.igmp_badlen_rcvd;
  82434c:	00803934 	movhi	r2,228
  824350:	10a7a004 	addi	r2,r2,-24960
  824354:	10800a17 	ldw	r2,40(r2)
  824358:	10c00044 	addi	r3,r2,1
  82435c:	00803934 	movhi	r2,228
  824360:	10a7a004 	addi	r2,r2,-24960
  824364:	10c00a15 	stw	r3,40(r2)
      return ENP_BAD_HEADER;
  824368:	00bff804 	movi	r2,-32
  82436c:	e0bfff15 	stw	r2,-4(fp)
  824370:	0000b206 	br	82463c <igmp_validate+0x344>
   }

   /* validate checksum */
   igmp = (struct igmp *) (ip_data (pip));
  824374:	e0bffd17 	ldw	r2,-12(fp)
  824378:	10800003 	ldbu	r2,0(r2)
  82437c:	10803fcc 	andi	r2,r2,255
  824380:	108003cc 	andi	r2,r2,15
  824384:	1085883a 	add	r2,r2,r2
  824388:	1085883a 	add	r2,r2,r2
  82438c:	1007883a 	mov	r3,r2
  824390:	e0bffd17 	ldw	r2,-12(fp)
  824394:	1885883a 	add	r2,r3,r2
  824398:	e0bffb15 	stw	r2,-20(fp)
   osum = igmp->igmp_cksum;
  82439c:	e0bffb17 	ldw	r2,-20(fp)
  8243a0:	1080008b 	ldhu	r2,2(r2)
  8243a4:	e0bffa0d 	sth	r2,-24(fp)
   igmp->igmp_cksum = 0;
  8243a8:	e0bffb17 	ldw	r2,-20(fp)
  8243ac:	1000008d 	sth	zero,2(r2)
   xsum = ~cksum(igmp, igmplen>>1);
  8243b0:	e0bffc17 	ldw	r2,-16(fp)
  8243b4:	1005d07a 	srai	r2,r2,1
  8243b8:	100b883a 	mov	r5,r2
  8243bc:	e13ffb17 	ldw	r4,-20(fp)
  8243c0:	08256340 	call	825634 <cksum>
  8243c4:	0084303a 	nor	r2,zero,r2
  8243c8:	e0bff98d 	sth	r2,-26(fp)
   if (xsum != osum)
  8243cc:	e0fff98b 	ldhu	r3,-26(fp)
  8243d0:	e0bffa0b 	ldhu	r2,-24(fp)
  8243d4:	18800d26 	beq	r3,r2,82440c <igmp_validate+0x114>
   {
      igmp->igmp_cksum = osum;
  8243d8:	e0fffb17 	ldw	r3,-20(fp)
  8243dc:	e0bffa0b 	ldhu	r2,-24(fp)
  8243e0:	1880008d 	sth	r2,2(r3)
      ++igmpstats.igmp_badsum_rcvd;
  8243e4:	00803934 	movhi	r2,228
  8243e8:	10a7a004 	addi	r2,r2,-24960
  8243ec:	10800b17 	ldw	r2,44(r2)
  8243f0:	10c00044 	addi	r3,r2,1
  8243f4:	00803934 	movhi	r2,228
  8243f8:	10a7a004 	addi	r2,r2,-24960
  8243fc:	10c00b15 	stw	r3,44(r2)
      return ENP_BAD_HEADER;
  824400:	00bff804 	movi	r2,-32
  824404:	e0bfff15 	stw	r2,-4(fp)
  824408:	00008c06 	br	82463c <igmp_validate+0x344>
   }
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
  82440c:	e0bffb17 	ldw	r2,-20(fp)
  824410:	10800003 	ldbu	r2,0(r2)
  824414:	e0bff905 	stb	r2,-28(fp)
   mcgrp_addr = ntohl(igmp->igmp_group); 
  824418:	e0bffb17 	ldw	r2,-20(fp)
  82441c:	10800117 	ldw	r2,4(r2)
  824420:	1004d63a 	srli	r2,r2,24
  824424:	10c03fcc 	andi	r3,r2,255
  824428:	e0bffb17 	ldw	r2,-20(fp)
  82442c:	10800117 	ldw	r2,4(r2)
  824430:	1004d23a 	srli	r2,r2,8
  824434:	10bfc00c 	andi	r2,r2,65280
  824438:	1886b03a 	or	r3,r3,r2
  82443c:	e0bffb17 	ldw	r2,-20(fp)
  824440:	10800117 	ldw	r2,4(r2)
  824444:	10bfc00c 	andi	r2,r2,65280
  824448:	1004923a 	slli	r2,r2,8
  82444c:	1886b03a 	or	r3,r3,r2
  824450:	e0bffb17 	ldw	r2,-20(fp)
  824454:	10800117 	ldw	r2,4(r2)
  824458:	10803fcc 	andi	r2,r2,255
  82445c:	1004963a 	slli	r2,r2,24
  824460:	1884b03a 	or	r2,r3,r2
  824464:	e0bff815 	stw	r2,-32(fp)
   resp_time = igmp->igmp_code;
  824468:	e0bffb17 	ldw	r2,-20(fp)
  82446c:	10800043 	ldbu	r2,1(r2)
  824470:	e0bff705 	stb	r2,-36(fp)
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
  824474:	e0bff903 	ldbu	r2,-28(fp)
  824478:	10800458 	cmpnei	r2,r2,17
  82447c:	1000381e 	bne	r2,zero,824560 <igmp_validate+0x268>
   {
      if ((resp_time == 0) || /* IGMPv1 Query */
  824480:	e0bff703 	ldbu	r2,-36(fp)
  824484:	1005003a 	cmpeq	r2,r2,zero
  824488:	1000061e 	bne	r2,zero,8244a4 <igmp_validate+0x1ac>
  82448c:	e0bff703 	ldbu	r2,-36(fp)
  824490:	1005003a 	cmpeq	r2,r2,zero
  824494:	1000111e 	bne	r2,zero,8244dc <igmp_validate+0x1e4>
  824498:	e0bff817 	ldw	r2,-32(fp)
  82449c:	1004c03a 	cmpne	r2,r2,zero
  8244a0:	10000e1e 	bne	r2,zero,8244dc <igmp_validate+0x1e4>
          ((resp_time > 0) && (mcgrp_addr == 0))) /* IGMPv2 General Query */     
      {
         /* if this is a IGMPv1 Host Membership Query or a IGMPv2 
          * General Query, it must be addressed to the all-hosts 
          * group */
         if (pip->ip_dest != igmp_all_hosts_group) 
  8244a4:	e0bffd17 	ldw	r2,-12(fp)
  8244a8:	10c00417 	ldw	r3,16(r2)
  8244ac:	d0a09017 	ldw	r2,-32192(gp)
  8244b0:	18800a26 	beq	r3,r2,8244dc <igmp_validate+0x1e4>
         {
            ++igmpstats.igmp_bad_queries_rcvd;
  8244b4:	00803934 	movhi	r2,228
  8244b8:	10a7a004 	addi	r2,r2,-24960
  8244bc:	10800e17 	ldw	r2,56(r2)
  8244c0:	10c00044 	addi	r3,r2,1
  8244c4:	00803934 	movhi	r2,228
  8244c8:	10a7a004 	addi	r2,r2,-24960
  8244cc:	10c00e15 	stw	r3,56(r2)
            return ENP_BAD_HEADER;
  8244d0:	00bff804 	movi	r2,-32
  8244d4:	e0bfff15 	stw	r2,-4(fp)
  8244d8:	00005806 	br	82463c <igmp_validate+0x344>
         }     
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
  8244dc:	e0bff703 	ldbu	r2,-36(fp)
  8244e0:	1005003a 	cmpeq	r2,r2,zero
  8244e4:	10001e1e 	bne	r2,zero,824560 <igmp_validate+0x268>
  8244e8:	e0bff817 	ldw	r2,-32(fp)
  8244ec:	1005003a 	cmpeq	r2,r2,zero
  8244f0:	10001b1e 	bne	r2,zero,824560 <igmp_validate+0x268>
      {
         /* this is a IGMPv2 Group-Specific Query. */
         if (p->net->igmp_oper_mode == IGMP_MODE_V1)
  8244f4:	e0bffe17 	ldw	r2,-8(fp)
  8244f8:	10800617 	ldw	r2,24(r2)
  8244fc:	10802f03 	ldbu	r2,188(r2)
  824500:	10803fcc 	andi	r2,r2,255
  824504:	10800058 	cmpnei	r2,r2,1
  824508:	1000031e 	bne	r2,zero,824518 <igmp_validate+0x220>
         {
            /* IGMPv1 code does not understand a IGMPv2 Group-
             * Specific Query */
            return ENP_BAD_HEADER; 
  82450c:	00bff804 	movi	r2,-32
  824510:	e0bfff15 	stw	r2,-4(fp)
  824514:	00004906 	br	82463c <igmp_validate+0x344>
         /* check to make sure that the group address field carries
          * a valid multicast address; if it doesn't, we
          * drop the packet.  Also drop packets that
          * carry the multicast address for the all-hosts
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
  824518:	e0bff817 	ldw	r2,-32(fp)
  82451c:	10fc002c 	andhi	r3,r2,61440
  824520:	00b80034 	movhi	r2,57344
  824524:	1880041e 	bne	r3,r2,824538 <igmp_validate+0x240>
  824528:	e0bffb17 	ldw	r2,-20(fp)
  82452c:	10c00117 	ldw	r3,4(r2)
  824530:	d0a09017 	ldw	r2,-32192(gp)
  824534:	18800a1e 	bne	r3,r2,824560 <igmp_validate+0x268>
             /* igmp_all_hosts_group is already in network byte order */
             (igmp->igmp_group == igmp_all_hosts_group))
         {
            ++igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd;
  824538:	00803934 	movhi	r2,228
  82453c:	10a7a004 	addi	r2,r2,-24960
  824540:	10801117 	ldw	r2,68(r2)
  824544:	10c00044 	addi	r3,r2,1
  824548:	00803934 	movhi	r2,228
  82454c:	10a7a004 	addi	r2,r2,-24960
  824550:	10c01115 	stw	r3,68(r2)
            /* caller will free received packet */
            return ENP_BAD_HEADER;
  824554:	00bff804 	movi	r2,-32
  824558:	e0bfff15 	stw	r2,-4(fp)
  82455c:	00003706 	br	82463c <igmp_validate+0x344>
   
   /* check to ensure that a received IGMPv1 or v2 Report has the 
    * same IP host group address in its IP destination field and 
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
  824560:	e0bff903 	ldbu	r2,-28(fp)
  824564:	108004a0 	cmpeqi	r2,r2,18
  824568:	1000031e 	bne	r2,zero,824578 <igmp_validate+0x280>
  82456c:	e0bff903 	ldbu	r2,-28(fp)
  824570:	10800598 	cmpnei	r2,r2,22
  824574:	1000131e 	bne	r2,zero,8245c4 <igmp_validate+0x2cc>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      if ((igmp->igmp_group != pip->ip_dest) ||
  824578:	e0bffb17 	ldw	r2,-20(fp)
  82457c:	10c00117 	ldw	r3,4(r2)
  824580:	e0bffd17 	ldw	r2,-12(fp)
  824584:	10800417 	ldw	r2,16(r2)
  824588:	1880041e 	bne	r3,r2,82459c <igmp_validate+0x2a4>
  82458c:	e0bff817 	ldw	r2,-32(fp)
  824590:	10fc002c 	andhi	r3,r2,61440
  824594:	00b80034 	movhi	r2,57344
  824598:	18800a26 	beq	r3,r2,8245c4 <igmp_validate+0x2cc>
          (!IN_MULTICAST(mcgrp_addr)))
      {
         ++igmpstats.igmp_bad_reports_rcvd;
  82459c:	00803934 	movhi	r2,228
  8245a0:	10a7a004 	addi	r2,r2,-24960
  8245a4:	10800f17 	ldw	r2,60(r2)
  8245a8:	10c00044 	addi	r3,r2,1
  8245ac:	00803934 	movhi	r2,228
  8245b0:	10a7a004 	addi	r2,r2,-24960
  8245b4:	10c00f15 	stw	r3,60(r2)
         return ENP_BAD_HEADER;    
  8245b8:	00bff804 	movi	r2,-32
  8245bc:	e0bfff15 	stw	r2,-4(fp)
  8245c0:	00001e06 	br	82463c <igmp_validate+0x344>

    * Version 1 Host Membership Reports and Version 1 Host Membership Query
    * packets will not be checked for the IP Router Alert option.
    */
#ifdef IGMP_V2    
   if ((type == IGMPv2_LEAVE_GROUP) || 
  8245c4:	e0bff903 	ldbu	r2,-28(fp)
  8245c8:	108005e0 	cmpeqi	r2,r2,23
  8245cc:	10000b1e 	bne	r2,zero,8245fc <igmp_validate+0x304>
  8245d0:	e0bff903 	ldbu	r2,-28(fp)
  8245d4:	108005a0 	cmpeqi	r2,r2,22
  8245d8:	1000081e 	bne	r2,zero,8245fc <igmp_validate+0x304>
  8245dc:	e0bff903 	ldbu	r2,-28(fp)
  8245e0:	10800458 	cmpnei	r2,r2,17
  8245e4:	1000141e 	bne	r2,zero,824638 <igmp_validate+0x340>
  8245e8:	e0bffb17 	ldw	r2,-20(fp)
  8245ec:	10800043 	ldbu	r2,1(r2)
  8245f0:	10803fcc 	andi	r2,r2,255
  8245f4:	1005003a 	cmpeq	r2,r2,zero
  8245f8:	10000f1e 	bne	r2,zero,824638 <igmp_validate+0x340>
       (type == IGMPv2_MEMBERSHIP_REPORT) ||
       ((type == IGMP_HOST_MEMBERSHIP_QUERY) && (igmp->igmp_code > 0)))
       
   {
      if (!igmpv2_chk4_rtr_alert_opt (pip))
  8245fc:	e13ffd17 	ldw	r4,-12(fp)
  824600:	08448700 	call	844870 <igmpv2_chk4_rtr_alert_opt>
  824604:	10803fcc 	andi	r2,r2,255
  824608:	1004c03a 	cmpne	r2,r2,zero
  82460c:	10000a1e 	bne	r2,zero,824638 <igmp_validate+0x340>
      { 
         ++igmpstats.igmpv2mode_v2_rtr_alert_missing;
  824610:	00803934 	movhi	r2,228
  824614:	10a7a004 	addi	r2,r2,-24960
  824618:	10801417 	ldw	r2,80(r2)
  82461c:	10c00044 	addi	r3,r2,1
  824620:	00803934 	movhi	r2,228
  824624:	10a7a004 	addi	r2,r2,-24960
  824628:	10c01415 	stw	r3,80(r2)
         return ENP_BAD_HEADER;
  82462c:	00bff804 	movi	r2,-32
  824630:	e0bfff15 	stw	r2,-4(fp)
  824634:	00000106 	br	82463c <igmp_validate+0x344>
      }
   }
#endif   

   /* validation successful */
   return IGMP_OK;
  824638:	e03fff15 	stw	zero,-4(fp)
  82463c:	e0bfff17 	ldw	r2,-4(fp)
}
  824640:	e037883a 	mov	sp,fp
  824644:	dfc00117 	ldw	ra,4(sp)
  824648:	df000017 	ldw	fp,0(sp)
  82464c:	dec00204 	addi	sp,sp,8
  824650:	f800283a 	ret

00824654 <igmp_print_stats>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */
   
int igmp_print_stats (void * pio)
{  
  824654:	defff504 	addi	sp,sp,-44
  824658:	dfc00a15 	stw	ra,40(sp)
  82465c:	df000915 	stw	fp,36(sp)
  824660:	df000904 	addi	fp,sp,36
  824664:	e13ffa15 	stw	r4,-24(fp)
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  824668:	00803934 	movhi	r2,228
  82466c:	10a9dd04 	addi	r2,r2,-22668
  824670:	10800017 	ldw	r2,0(r2)
  824674:	e0bff915 	stw	r2,-28(fp)
  824678:	00004506 	br	824790 <igmp_print_stats+0x13c>
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
  82467c:	e0bff917 	ldw	r2,-28(fp)
  824680:	10800104 	addi	r2,r2,4
  824684:	e0bfff15 	stw	r2,-4(fp)
  824688:	e0bff917 	ldw	r2,-28(fp)
  82468c:	10802f03 	ldbu	r2,188(r2)
  824690:	10803fcc 	andi	r2,r2,255
  824694:	e0bffe15 	stw	r2,-8(fp)
  824698:	e0bff917 	ldw	r2,-28(fp)
  82469c:	10802f03 	ldbu	r2,188(r2)
  8246a0:	10803fcc 	andi	r2,r2,255
  8246a4:	10800058 	cmpnei	r2,r2,1
  8246a8:	1000041e 	bne	r2,zero,8246bc <igmp_print_stats+0x68>
  8246ac:	00802174 	movhi	r2,133
  8246b0:	10b38404 	addi	r2,r2,-12784
  8246b4:	e0bffd15 	stw	r2,-12(fp)
  8246b8:	00000306 	br	8246c8 <igmp_print_stats+0x74>
  8246bc:	00802174 	movhi	r2,133
  8246c0:	10b38504 	addi	r2,r2,-12780
  8246c4:	e0bffd15 	stw	r2,-12(fp)
  8246c8:	e0bffd17 	ldw	r2,-12(fp)
  8246cc:	d8800015 	stw	r2,0(sp)
  8246d0:	e13ffa17 	ldw	r4,-24(fp)
  8246d4:	01402174 	movhi	r5,133
  8246d8:	29738604 	addi	r5,r5,-12776
  8246dc:	e1bfff17 	ldw	r6,-4(fp)
  8246e0:	e1fffe17 	ldw	r7,-8(fp)
  8246e4:	0825c540 	call	825c54 <ns_printf>
                 ifp->name, 
                 ifp->igmp_oper_mode, 
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
  8246e8:	e0bff917 	ldw	r2,-28(fp)
  8246ec:	10802f03 	ldbu	r2,188(r2)
  8246f0:	10803fcc 	andi	r2,r2,255
  8246f4:	10800098 	cmpnei	r2,r2,2
  8246f8:	10001e1e 	bne	r2,zero,824774 <igmp_print_stats+0x120>
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
  8246fc:	e0bff917 	ldw	r2,-28(fp)
  824700:	10802d03 	ldbu	r2,180(r2)
  824704:	10803fcc 	andi	r2,r2,255
  824708:	e0bffc15 	stw	r2,-16(fp)
  82470c:	e0bff917 	ldw	r2,-28(fp)
  824710:	10802d03 	ldbu	r2,180(r2)
  824714:	10803fcc 	andi	r2,r2,255
  824718:	10800058 	cmpnei	r2,r2,1
  82471c:	1000041e 	bne	r2,zero,824730 <igmp_print_stats+0xdc>
  824720:	00802174 	movhi	r2,133
  824724:	10b38b04 	addi	r2,r2,-12756
  824728:	e0bffb15 	stw	r2,-20(fp)
  82472c:	00000306 	br	82473c <igmp_print_stats+0xe8>
  824730:	00802174 	movhi	r2,133
  824734:	10b38d04 	addi	r2,r2,-12748
  824738:	e0bffb15 	stw	r2,-20(fp)
  82473c:	e0bff917 	ldw	r2,-28(fp)
  824740:	10c02e17 	ldw	r3,184(r2)
  824744:	00802174 	movhi	r2,133
  824748:	10832604 	addi	r2,r2,3224
  82474c:	10800017 	ldw	r2,0(r2)
  824750:	d8c00015 	stw	r3,0(sp)
  824754:	d8800115 	stw	r2,4(sp)
  824758:	e13ffa17 	ldw	r4,-24(fp)
  82475c:	01402174 	movhi	r5,133
  824760:	29738f04 	addi	r5,r5,-12740
  824764:	e1bffc17 	ldw	r6,-16(fp)
  824768:	e1fffb17 	ldw	r7,-20(fp)
  82476c:	0825c540 	call	825c54 <ns_printf>
  824770:	00000406 	br	824784 <igmp_print_stats+0x130>
                    ifp->igmpv1_rtr_present,
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
                    ifp->igmpv1_query_rcvd_time,
                    cticks);
      }
      else ns_printf (pio, "\n");
  824774:	e13ffa17 	ldw	r4,-24(fp)
  824778:	01402174 	movhi	r5,133
  82477c:	29739a04 	addi	r5,r5,-12696
  824780:	0825c540 	call	825c54 <ns_printf>
   
int igmp_print_stats (void * pio)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  824784:	e0bff917 	ldw	r2,-28(fp)
  824788:	10800017 	ldw	r2,0(r2)
  82478c:	e0bff915 	stw	r2,-28(fp)
  824790:	e0bff917 	ldw	r2,-28(fp)
  824794:	1004c03a 	cmpne	r2,r2,zero
  824798:	103fb81e 	bne	r2,zero,82467c <igmp_print_stats+0x28>
      }
      else ns_printf (pio, "\n");
   }   

   /* rx and timer statistics */
   ns_printf (pio, "[Rx ] IGMP messages rcvd: %lu, timers running: %lu\n", igmpstats.igmp_total_rcvd, igmp_timers_are_running);
  82479c:	00803934 	movhi	r2,228
  8247a0:	10a7a004 	addi	r2,r2,-24960
  8247a4:	11800017 	ldw	r6,0(r2)
  8247a8:	d1e08e17 	ldw	r7,-32200(gp)
  8247ac:	e13ffa17 	ldw	r4,-24(fp)
  8247b0:	01402174 	movhi	r5,133
  8247b4:	29739b04 	addi	r5,r5,-12692
  8247b8:	0825c540 	call	825c54 <ns_printf>
   
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v1-mode links): %lu\n", igmpstats.igmpv1mode_v1_queries_rcvd);
  8247bc:	00803934 	movhi	r2,228
  8247c0:	10a7a004 	addi	r2,r2,-24960
  8247c4:	11800117 	ldw	r6,4(r2)
  8247c8:	e13ffa17 	ldw	r4,-24(fp)
  8247cc:	01402174 	movhi	r5,133
  8247d0:	2973a804 	addi	r5,r5,-12640
  8247d4:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Reports rcvd: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd);
  8247d8:	00803934 	movhi	r2,228
  8247dc:	10a7a004 	addi	r2,r2,-24960
  8247e0:	11800217 	ldw	r6,8(r2)
  8247e4:	e13ffa17 	ldw	r4,-24(fp)
  8247e8:	01402174 	movhi	r5,133
  8247ec:	2973b904 	addi	r5,r5,-12572
  8247f0:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer);
  8247f4:	00803934 	movhi	r2,228
  8247f8:	10a7a004 	addi	r2,r2,-24960
  8247fc:	11800317 	ldw	r6,12(r2)
  824800:	e13ffa17 	ldw	r4,-24(fp)
  824804:	01402174 	movhi	r5,133
  824808:	2973c504 	addi	r5,r5,-12524
  82480c:	0825c540 	call	825c54 <ns_printf>
      
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v2-mode links): %lu\n", igmpstats.igmpv2mode_v1_queries_rcvd);
  824810:	00803934 	movhi	r2,228
  824814:	10a7a004 	addi	r2,r2,-24960
  824818:	11800417 	ldw	r6,16(r2)
  82481c:	e13ffa17 	ldw	r4,-24(fp)
  824820:	01402174 	movhi	r5,133
  824824:	2973d804 	addi	r5,r5,-12448
  824828:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 General Queries rcvd: %lu, Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_general_queries_rcvd, igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd);
  82482c:	00803934 	movhi	r2,228
  824830:	10a7a004 	addi	r2,r2,-24960
  824834:	11800517 	ldw	r6,20(r2)
  824838:	00803934 	movhi	r2,228
  82483c:	10a7a004 	addi	r2,r2,-24960
  824840:	11c00617 	ldw	r7,24(r2)
  824844:	e13ffa17 	ldw	r4,-24(fp)
  824848:	01402174 	movhi	r5,133
  82484c:	2973e904 	addi	r5,r5,-12380
  824850:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer);   
  824854:	00803934 	movhi	r2,228
  824858:	10a7a004 	addi	r2,r2,-24960
  82485c:	11800717 	ldw	r6,28(r2)
  824860:	e13ffa17 	ldw	r4,-24(fp)
  824864:	01402174 	movhi	r5,133
  824868:	2973c504 	addi	r5,r5,-12524
  82486c:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd with no local timer: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_no_timer);
  824870:	00803934 	movhi	r2,228
  824874:	10a7a004 	addi	r2,r2,-24960
  824878:	11800817 	ldw	r6,32(r2)
  82487c:	e13ffa17 	ldw	r4,-24(fp)
  824880:	01402174 	movhi	r5,133
  824884:	2973fc04 	addi	r5,r5,-12304
  824888:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 Leave Group messages rcvd: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_rcvd);
  82488c:	00803934 	movhi	r2,228
  824890:	10a7a004 	addi	r2,r2,-24960
  824894:	11800917 	ldw	r6,36(r2)
  824898:	e13ffa17 	ldw	r4,-24(fp)
  82489c:	01402174 	movhi	r5,133
  8248a0:	29740d04 	addi	r5,r5,-12236
  8248a4:	0825c540 	call	825c54 <ns_printf>
   
   /* tx statistics */
   ns_printf (pio, "[Tx ] IGMPv2 Leave Group messages sent: %lu, Membership Reports sent: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_sent, igmpstats.igmpv2mode_v2_reports_sent);
  8248a8:	00803934 	movhi	r2,228
  8248ac:	10a7a004 	addi	r2,r2,-24960
  8248b0:	11801717 	ldw	r6,92(r2)
  8248b4:	00803934 	movhi	r2,228
  8248b8:	10a7a004 	addi	r2,r2,-24960
  8248bc:	11c01817 	ldw	r7,96(r2)
  8248c0:	e13ffa17 	ldw	r4,-24(fp)
  8248c4:	01402174 	movhi	r5,133
  8248c8:	29741904 	addi	r5,r5,-12188
  8248cc:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Tx ] IGMPv1 Host Membership Reports sent: %lu\n", igmpstats.igmp_v1_reports_sent);
  8248d0:	00803934 	movhi	r2,228
  8248d4:	10a7a004 	addi	r2,r2,-24960
  8248d8:	11801617 	ldw	r6,88(r2)
  8248dc:	e13ffa17 	ldw	r4,-24(fp)
  8248e0:	01402174 	movhi	r5,133
  8248e4:	29742c04 	addi	r5,r5,-12112
  8248e8:	0825c540 	call	825c54 <ns_printf>

   /* error statistics */
   ns_printf (pio, "[Err] IGMP packets rcvd with bad length: %lu\n", igmpstats.igmp_badlen_rcvd);
  8248ec:	00803934 	movhi	r2,228
  8248f0:	10a7a004 	addi	r2,r2,-24960
  8248f4:	11800a17 	ldw	r6,40(r2)
  8248f8:	e13ffa17 	ldw	r4,-24(fp)
  8248fc:	01402174 	movhi	r5,133
  824900:	29743804 	addi	r5,r5,-12064
  824904:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets rcvd with bad checksum: %lu\n", igmpstats.igmp_badsum_rcvd);
  824908:	00803934 	movhi	r2,228
  82490c:	10a7a004 	addi	r2,r2,-24960
  824910:	11800b17 	ldw	r6,44(r2)
  824914:	e13ffa17 	ldw	r4,-24(fp)
  824918:	01402174 	movhi	r5,133
  82491c:	29744404 	addi	r5,r5,-12016
  824920:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] Packet buffer allocation failures: %lu, Bad IGMP Oper Mode config: %lu\n",igmpstats.igmp_pkt_alloc_fail, igmpstats.igmp_bad_oper_mode);
  824924:	00803934 	movhi	r2,228
  824928:	10a7a004 	addi	r2,r2,-24960
  82492c:	11800c17 	ldw	r6,48(r2)
  824930:	00803934 	movhi	r2,228
  824934:	10a7a004 	addi	r2,r2,-24960
  824938:	11c00d17 	ldw	r7,52(r2)
  82493c:	e13ffa17 	ldw	r4,-24(fp)
  824940:	01402174 	movhi	r5,133
  824944:	29745004 	addi	r5,r5,-11968
  824948:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMP Queries rcvd: %lu, Bad IGMP Reports rcvd: %lu\n", igmpstats.igmp_bad_queries_rcvd, igmpstats.igmp_bad_reports_rcvd); 
  82494c:	00803934 	movhi	r2,228
  824950:	10a7a004 	addi	r2,r2,-24960
  824954:	11800e17 	ldw	r6,56(r2)
  824958:	00803934 	movhi	r2,228
  82495c:	10a7a004 	addi	r2,r2,-24960
  824960:	11c00f17 	ldw	r7,60(r2)
  824964:	e13ffa17 	ldw	r4,-24(fp)
  824968:	01402174 	movhi	r5,133
  82496c:	29746404 	addi	r5,r5,-11888
  824970:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMPv2 Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd);
  824974:	00803934 	movhi	r2,228
  824978:	10a7a004 	addi	r2,r2,-24960
  82497c:	11801117 	ldw	r6,68(r2)
  824980:	e13ffa17 	ldw	r4,-24(fp)
  824984:	01402174 	movhi	r5,133
  824988:	29747404 	addi	r5,r5,-11824
  82498c:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] IGMPv2 Group-Specific Queries rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd);
  824990:	00803934 	movhi	r2,228
  824994:	10a7a004 	addi	r2,r2,-24960
  824998:	11801217 	ldw	r6,72(r2)
  82499c:	e13ffa17 	ldw	r4,-24(fp)
  8249a0:	01402174 	movhi	r5,133
  8249a4:	29748104 	addi	r5,r5,-11772
  8249a8:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] IGMP Membership Reports rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd);
  8249ac:	00803934 	movhi	r2,228
  8249b0:	10a7a004 	addi	r2,r2,-24960
  8249b4:	11801317 	ldw	r6,76(r2)
  8249b8:	e13ffa17 	ldw	r4,-24(fp)
  8249bc:	01402174 	movhi	r5,133
  8249c0:	29749404 	addi	r5,r5,-11696
  8249c4:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] Number of IGMPv2 messages rcvd without Router Alert option: %lu\n", igmpstats.igmpv2mode_v2_rtr_alert_missing); 
  8249c8:	00803934 	movhi	r2,228
  8249cc:	10a7a004 	addi	r2,r2,-24960
  8249d0:	11801417 	ldw	r6,80(r2)
  8249d4:	e13ffa17 	ldw	r4,-24(fp)
  8249d8:	01402174 	movhi	r5,133
  8249dc:	2974a504 	addi	r5,r5,-11628
  8249e0:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v1-mode links: %lu\n", igmpstats.igmpv1mode_unknown_pkttype);
  8249e4:	00803934 	movhi	r2,228
  8249e8:	10a7a004 	addi	r2,r2,-24960
  8249ec:	11801017 	ldw	r6,64(r2)
  8249f0:	e13ffa17 	ldw	r4,-24(fp)
  8249f4:	01402174 	movhi	r5,133
  8249f8:	2974b704 	addi	r5,r5,-11556
  8249fc:	0825c540 	call	825c54 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v2-mode links: %lu\n", igmpstats.igmpv2mode_unknown_pkttype);
  824a00:	00803934 	movhi	r2,228
  824a04:	10a7a004 	addi	r2,r2,-24960
  824a08:	11801517 	ldw	r6,84(r2)
  824a0c:	e13ffa17 	ldw	r4,-24(fp)
  824a10:	01402174 	movhi	r5,133
  824a14:	2974c704 	addi	r5,r5,-11492
  824a18:	0825c540 	call	825c54 <ns_printf>
   
   return IGMP_OK;
  824a1c:	0005883a 	mov	r2,zero
}
  824a20:	e037883a 	mov	sp,fp
  824a24:	dfc00117 	ldw	ra,4(sp)
  824a28:	df000017 	ldw	fp,0(sp)
  824a2c:	dec00204 	addi	sp,sp,8
  824a30:	f800283a 	ret

00824a34 <bsd_accept>:
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
  824a34:	defff304 	addi	sp,sp,-52
  824a38:	dfc00c15 	stw	ra,48(sp)
  824a3c:	df000b15 	stw	fp,44(sp)
  824a40:	df000b04 	addi	fp,sp,44
  824a44:	e13ffc15 	stw	r4,-16(fp)
  824a48:	e17ffd15 	stw	r5,-12(fp)
  824a4c:	e1bffe15 	stw	r6,-8(fp)
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
  824a50:	e0bffc17 	ldw	r2,-16(fp)
  824a54:	10bff804 	addi	r2,r2,-32
  824a58:	1085883a 	add	r2,r2,r2
  824a5c:	1085883a 	add	r2,r2,r2
  824a60:	e0bff715 	stw	r2,-36(fp)
   SOC_CHECK(so);
  824a64:	00803934 	movhi	r2,228
  824a68:	10a8d904 	addi	r2,r2,-23708
  824a6c:	e0bff515 	stw	r2,-44(fp)
  824a70:	00000606 	br	824a8c <bsd_accept+0x58>
  824a74:	e0fff517 	ldw	r3,-44(fp)
  824a78:	e0bff717 	ldw	r2,-36(fp)
  824a7c:	18800626 	beq	r3,r2,824a98 <bsd_accept+0x64>
  824a80:	e0bff517 	ldw	r2,-44(fp)
  824a84:	10800017 	ldw	r2,0(r2)
  824a88:	e0bff515 	stw	r2,-44(fp)
  824a8c:	e0bff517 	ldw	r2,-44(fp)
  824a90:	1004c03a 	cmpne	r2,r2,zero
  824a94:	103ff71e 	bne	r2,zero,824a74 <bsd_accept+0x40>
  824a98:	e0fff517 	ldw	r3,-44(fp)
  824a9c:	e0bff717 	ldw	r2,-36(fp)
  824aa0:	18800426 	beq	r3,r2,824ab4 <bsd_accept+0x80>
  824aa4:	082a7c80 	call	82a7c8 <dtrap>
  824aa8:	00bfffc4 	movi	r2,-1
  824aac:	e0bfff15 	stw	r2,-4(fp)
  824ab0:	00002806 	br	824b54 <bsd_accept+0x120>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (addr != NULL)
  824ab4:	e0bffd17 	ldw	r2,-12(fp)
  824ab8:	1005003a 	cmpeq	r2,r2,zero
  824abc:	1000091e 	bne	r2,zero,824ae4 <bsd_accept+0xb0>
   {
      if (addrlen == 0)
  824ac0:	e0bffe17 	ldw	r2,-8(fp)
  824ac4:	1004c03a 	cmpne	r2,r2,zero
  824ac8:	1000061e 	bne	r2,zero,824ae4 <bsd_accept+0xb0>
      {
         so->so_error = EFAULT;
  824acc:	e0fff717 	ldw	r3,-36(fp)
  824ad0:	00800384 	movi	r2,14
  824ad4:	18800615 	stw	r2,24(r3)
         return -1;
  824ad8:	00bfffc4 	movi	r2,-1
  824adc:	e0bfff15 	stw	r2,-4(fp)
  824ae0:	00001c06 	br	824b54 <bsd_accept+0x120>
      }
   }

   lret = t_accept(s, &laddr, addrlen);
  824ae4:	e17ff804 	addi	r5,fp,-32
  824ae8:	e13ffc17 	ldw	r4,-16(fp)
  824aec:	e1bffe17 	ldw	r6,-8(fp)
  824af0:	082db3c0 	call	82db3c <t_accept>
  824af4:	e0bff615 	stw	r2,-40(fp)
    * address: copy the peer's address back into the buffer, but limit
    * the copy to the lesser of the buffer's length and sizeof(struct
    * sockaddr_in), which is all that t_accept() can return as a peer
    * address.  
    */
   if ((lret != -1) && (addr != NULL))
  824af8:	e0bff617 	ldw	r2,-40(fp)
  824afc:	10bfffe0 	cmpeqi	r2,r2,-1
  824b00:	1000121e 	bne	r2,zero,824b4c <bsd_accept+0x118>
  824b04:	e0bffd17 	ldw	r2,-12(fp)
  824b08:	1005003a 	cmpeq	r2,r2,zero
  824b0c:	10000f1e 	bne	r2,zero,824b4c <bsd_accept+0x118>
   {
      if (*addrlen > sizeof(struct sockaddr_in))
  824b10:	e0bffe17 	ldw	r2,-8(fp)
  824b14:	10800017 	ldw	r2,0(r2)
  824b18:	10800470 	cmpltui	r2,r2,17
  824b1c:	1000031e 	bne	r2,zero,824b2c <bsd_accept+0xf8>
         *addrlen = sizeof(struct sockaddr_in);
  824b20:	e0fffe17 	ldw	r3,-8(fp)
  824b24:	00800404 	movi	r2,16
  824b28:	18800015 	stw	r2,0(r3)
      MEMCPY(addr, &laddr, *addrlen);
  824b2c:	e0bffe17 	ldw	r2,-8(fp)
  824b30:	10800017 	ldw	r2,0(r2)
  824b34:	100d883a 	mov	r6,r2
  824b38:	e0bffd17 	ldw	r2,-12(fp)
  824b3c:	e0fff804 	addi	r3,fp,-32
  824b40:	1009883a 	mov	r4,r2
  824b44:	180b883a 	mov	r5,r3
  824b48:	08073380 	call	807338 <memcpy>
   }

   return lret;
  824b4c:	e0bff617 	ldw	r2,-40(fp)
  824b50:	e0bfff15 	stw	r2,-4(fp)
  824b54:	e0bfff17 	ldw	r2,-4(fp)
}
  824b58:	e037883a 	mov	sp,fp
  824b5c:	dfc00117 	ldw	ra,4(sp)
  824b60:	df000017 	ldw	fp,0(sp)
  824b64:	dec00204 	addi	sp,sp,8
  824b68:	f800283a 	ret

00824b6c <bsd_getpeername>:
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
  824b6c:	defff204 	addi	sp,sp,-56
  824b70:	dfc00d15 	stw	ra,52(sp)
  824b74:	df000c15 	stw	fp,48(sp)
  824b78:	df000c04 	addi	fp,sp,48
  824b7c:	e13ffc15 	stw	r4,-16(fp)
  824b80:	e17ffd15 	stw	r5,-12(fp)
  824b84:	e1bffe15 	stw	r6,-8(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
  824b88:	e0bffc17 	ldw	r2,-16(fp)
  824b8c:	10bff804 	addi	r2,r2,-32
  824b90:	1085883a 	add	r2,r2,r2
  824b94:	1085883a 	add	r2,r2,r2
  824b98:	e0bff615 	stw	r2,-40(fp)
   SOC_CHECK(so);
  824b9c:	00803934 	movhi	r2,228
  824ba0:	10a8d904 	addi	r2,r2,-23708
  824ba4:	e0bff415 	stw	r2,-48(fp)
  824ba8:	00000606 	br	824bc4 <bsd_getpeername+0x58>
  824bac:	e0fff417 	ldw	r3,-48(fp)
  824bb0:	e0bff617 	ldw	r2,-40(fp)
  824bb4:	18800626 	beq	r3,r2,824bd0 <bsd_getpeername+0x64>
  824bb8:	e0bff417 	ldw	r2,-48(fp)
  824bbc:	10800017 	ldw	r2,0(r2)
  824bc0:	e0bff415 	stw	r2,-48(fp)
  824bc4:	e0bff417 	ldw	r2,-48(fp)
  824bc8:	1004c03a 	cmpne	r2,r2,zero
  824bcc:	103ff71e 	bne	r2,zero,824bac <bsd_getpeername+0x40>
  824bd0:	e0fff417 	ldw	r3,-48(fp)
  824bd4:	e0bff617 	ldw	r2,-40(fp)
  824bd8:	18800426 	beq	r3,r2,824bec <bsd_getpeername+0x80>
  824bdc:	082a7c80 	call	82a7c8 <dtrap>
  824be0:	00bfffc4 	movi	r2,-1
  824be4:	e0bfff15 	stw	r2,-4(fp)
  824be8:	00002506 	br	824c80 <bsd_getpeername+0x114>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
  824bec:	e0bffe17 	ldw	r2,-8(fp)
  824bf0:	1004c03a 	cmpne	r2,r2,zero
  824bf4:	1000061e 	bne	r2,zero,824c10 <bsd_getpeername+0xa4>
   {
      so->so_error = EFAULT;
  824bf8:	e0fff617 	ldw	r3,-40(fp)
  824bfc:	00800384 	movi	r2,14
  824c00:	18800615 	stw	r2,24(r3)
      return -1;
  824c04:	00bfffc4 	movi	r2,-1
  824c08:	e0bfff15 	stw	r2,-4(fp)
  824c0c:	00001c06 	br	824c80 <bsd_getpeername+0x114>
   }
   lnamelen = *namelen;
  824c10:	e0bffe17 	ldw	r2,-8(fp)
  824c14:	10800017 	ldw	r2,0(r2)
  824c18:	e0bffb15 	stw	r2,-20(fp)

   lret = t_getpeername(s, &lname, &lnamelen);
  824c1c:	e17ff704 	addi	r5,fp,-36
  824c20:	e1bffb04 	addi	r6,fp,-20
  824c24:	e13ffc17 	ldw	r4,-16(fp)
  824c28:	082e07c0 	call	82e07c <t_getpeername>
  824c2c:	e0bff515 	stw	r2,-44(fp)
    * t_getpeername() can return as a peer address, and pass the
    * copied length back to the caller.  
    * For IPV6 addresses, or for dual IPV4/IPV6 stack, 
    * the max size is sizeof(struct sockaddr_in6)
    */
   if (lret != -1)
  824c30:	e0bff517 	ldw	r2,-44(fp)
  824c34:	10bfffe0 	cmpeqi	r2,r2,-1
  824c38:	10000f1e 	bne	r2,zero,824c78 <bsd_getpeername+0x10c>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
  824c3c:	e0bffb17 	ldw	r2,-20(fp)
  824c40:	10800470 	cmpltui	r2,r2,17
  824c44:	1000021e 	bne	r2,zero,824c50 <bsd_getpeername+0xe4>
         lnamelen = sizeof(struct sockaddr_in);
  824c48:	00800404 	movi	r2,16
  824c4c:	e0bffb15 	stw	r2,-20(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(name, &lname, lnamelen);
  824c50:	e0bffb17 	ldw	r2,-20(fp)
  824c54:	100d883a 	mov	r6,r2
  824c58:	e0bffd17 	ldw	r2,-12(fp)
  824c5c:	e0fff704 	addi	r3,fp,-36
  824c60:	1009883a 	mov	r4,r2
  824c64:	180b883a 	mov	r5,r3
  824c68:	08073380 	call	807338 <memcpy>
      *namelen = lnamelen;
  824c6c:	e0fffb17 	ldw	r3,-20(fp)
  824c70:	e0bffe17 	ldw	r2,-8(fp)
  824c74:	10c00015 	stw	r3,0(r2)
   }

   return lret;
  824c78:	e0bff517 	ldw	r2,-44(fp)
  824c7c:	e0bfff15 	stw	r2,-4(fp)
  824c80:	e0bfff17 	ldw	r2,-4(fp)
}
  824c84:	e037883a 	mov	sp,fp
  824c88:	dfc00117 	ldw	ra,4(sp)
  824c8c:	df000017 	ldw	fp,0(sp)
  824c90:	dec00204 	addi	sp,sp,8
  824c94:	f800283a 	ret

00824c98 <bsd_getsockname>:
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
  824c98:	defff204 	addi	sp,sp,-56
  824c9c:	dfc00d15 	stw	ra,52(sp)
  824ca0:	df000c15 	stw	fp,48(sp)
  824ca4:	df000c04 	addi	fp,sp,48
  824ca8:	e13ffc15 	stw	r4,-16(fp)
  824cac:	e17ffd15 	stw	r5,-12(fp)
  824cb0:	e1bffe15 	stw	r6,-8(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
  824cb4:	e0bffc17 	ldw	r2,-16(fp)
  824cb8:	10bff804 	addi	r2,r2,-32
  824cbc:	1085883a 	add	r2,r2,r2
  824cc0:	1085883a 	add	r2,r2,r2
  824cc4:	e0bff615 	stw	r2,-40(fp)
   SOC_CHECK(so);
  824cc8:	00803934 	movhi	r2,228
  824ccc:	10a8d904 	addi	r2,r2,-23708
  824cd0:	e0bff415 	stw	r2,-48(fp)
  824cd4:	00000606 	br	824cf0 <bsd_getsockname+0x58>
  824cd8:	e0fff417 	ldw	r3,-48(fp)
  824cdc:	e0bff617 	ldw	r2,-40(fp)
  824ce0:	18800626 	beq	r3,r2,824cfc <bsd_getsockname+0x64>
  824ce4:	e0bff417 	ldw	r2,-48(fp)
  824ce8:	10800017 	ldw	r2,0(r2)
  824cec:	e0bff415 	stw	r2,-48(fp)
  824cf0:	e0bff417 	ldw	r2,-48(fp)
  824cf4:	1004c03a 	cmpne	r2,r2,zero
  824cf8:	103ff71e 	bne	r2,zero,824cd8 <bsd_getsockname+0x40>
  824cfc:	e0fff417 	ldw	r3,-48(fp)
  824d00:	e0bff617 	ldw	r2,-40(fp)
  824d04:	18800426 	beq	r3,r2,824d18 <bsd_getsockname+0x80>
  824d08:	082a7c80 	call	82a7c8 <dtrap>
  824d0c:	00bfffc4 	movi	r2,-1
  824d10:	e0bfff15 	stw	r2,-4(fp)
  824d14:	00002506 	br	824dac <bsd_getsockname+0x114>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
  824d18:	e0bffe17 	ldw	r2,-8(fp)
  824d1c:	1004c03a 	cmpne	r2,r2,zero
  824d20:	1000061e 	bne	r2,zero,824d3c <bsd_getsockname+0xa4>
   {
      so->so_error = EFAULT;
  824d24:	e0fff617 	ldw	r3,-40(fp)
  824d28:	00800384 	movi	r2,14
  824d2c:	18800615 	stw	r2,24(r3)
      return -1;
  824d30:	00bfffc4 	movi	r2,-1
  824d34:	e0bfff15 	stw	r2,-4(fp)
  824d38:	00001c06 	br	824dac <bsd_getsockname+0x114>
   }
   lnamelen = *namelen;
  824d3c:	e0bffe17 	ldw	r2,-8(fp)
  824d40:	10800017 	ldw	r2,0(r2)
  824d44:	e0bffb15 	stw	r2,-20(fp)

   lret = t_getsockname(s, &lname, &lnamelen);
  824d48:	e17ff704 	addi	r5,fp,-36
  824d4c:	e1bffb04 	addi	r6,fp,-20
  824d50:	e13ffc17 	ldw	r4,-16(fp)
  824d54:	082e0c00 	call	82e0c0 <t_getsockname>
  824d58:	e0bff515 	stw	r2,-44(fp)
    * copied length back to the caller.  
    * For IPV6 addresses, or for a dual IPV4/IPV6 stack, 
    * the max size copied is sizeof(struct sockaddr_in6)
    *
    */
   if (lret != -1)
  824d5c:	e0bff517 	ldw	r2,-44(fp)
  824d60:	10bfffe0 	cmpeqi	r2,r2,-1
  824d64:	10000f1e 	bne	r2,zero,824da4 <bsd_getsockname+0x10c>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
  824d68:	e0bffb17 	ldw	r2,-20(fp)
  824d6c:	10800470 	cmpltui	r2,r2,17
  824d70:	1000021e 	bne	r2,zero,824d7c <bsd_getsockname+0xe4>
         lnamelen = sizeof(struct sockaddr_in);
  824d74:	00800404 	movi	r2,16
  824d78:	e0bffb15 	stw	r2,-20(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);
#endif
      MEMCPY(name, &lname, lnamelen);
  824d7c:	e0bffb17 	ldw	r2,-20(fp)
  824d80:	100d883a 	mov	r6,r2
  824d84:	e0bffd17 	ldw	r2,-12(fp)
  824d88:	e0fff704 	addi	r3,fp,-36
  824d8c:	1009883a 	mov	r4,r2
  824d90:	180b883a 	mov	r5,r3
  824d94:	08073380 	call	807338 <memcpy>
      *namelen = lnamelen;
  824d98:	e0fffb17 	ldw	r3,-20(fp)
  824d9c:	e0bffe17 	ldw	r2,-8(fp)
  824da0:	10c00015 	stw	r3,0(r2)
   }

   return lret;
  824da4:	e0bff517 	ldw	r2,-44(fp)
  824da8:	e0bfff15 	stw	r2,-4(fp)
  824dac:	e0bfff17 	ldw	r2,-4(fp)
}
  824db0:	e037883a 	mov	sp,fp
  824db4:	dfc00117 	ldw	ra,4(sp)
  824db8:	df000017 	ldw	fp,0(sp)
  824dbc:	dec00204 	addi	sp,sp,8
  824dc0:	f800283a 	ret

00824dc4 <bsd_i_sockoptlen>:
 * RETURNS: minimum length of the named socket option, in bytes
 */
int 
bsd_i_sockoptlen(int level,
                 int name)
{
  824dc4:	defffb04 	addi	sp,sp,-20
  824dc8:	df000415 	stw	fp,16(sp)
  824dcc:	df000404 	addi	fp,sp,16
  824dd0:	e13ffc15 	stw	r4,-16(fp)
  824dd4:	e17ffd15 	stw	r5,-12(fp)
   USE_ARG(level);

   switch (name)
  824dd8:	e0bffd17 	ldw	r2,-12(fp)
  824ddc:	e0bfff15 	stw	r2,-4(fp)
  824de0:	e0ffff17 	ldw	r3,-4(fp)
  824de4:	18802020 	cmpeqi	r2,r3,128
  824de8:	1000491e 	bne	r2,zero,824f10 <bsd_i_sockoptlen+0x14c>
  824dec:	e0ffff17 	ldw	r3,-4(fp)
  824df0:	18802048 	cmpgei	r2,r3,129
  824df4:	1000251e 	bne	r2,zero,824e8c <bsd_i_sockoptlen+0xc8>
  824df8:	e0ffff17 	ldw	r3,-4(fp)
  824dfc:	18800308 	cmpgei	r2,r3,12
  824e00:	1000141e 	bne	r2,zero,824e54 <bsd_i_sockoptlen+0x90>
  824e04:	e0ffff17 	ldw	r3,-4(fp)
  824e08:	18800288 	cmpgei	r2,r3,10
  824e0c:	10004c1e 	bne	r2,zero,824f40 <bsd_i_sockoptlen+0x17c>
  824e10:	e0ffff17 	ldw	r3,-4(fp)
  824e14:	18800120 	cmpeqi	r2,r3,4
  824e18:	1000431e 	bne	r2,zero,824f28 <bsd_i_sockoptlen+0x164>
  824e1c:	e0ffff17 	ldw	r3,-4(fp)
  824e20:	18800148 	cmpgei	r2,r3,5
  824e24:	1000041e 	bne	r2,zero,824e38 <bsd_i_sockoptlen+0x74>
  824e28:	e0ffff17 	ldw	r3,-4(fp)
  824e2c:	188000e0 	cmpeqi	r2,r3,3
  824e30:	1000491e 	bne	r2,zero,824f58 <bsd_i_sockoptlen+0x194>
  824e34:	00004b06 	br	824f64 <bsd_i_sockoptlen+0x1a0>
  824e38:	e0ffff17 	ldw	r3,-4(fp)
  824e3c:	18800220 	cmpeqi	r2,r3,8
  824e40:	1000391e 	bne	r2,zero,824f28 <bsd_i_sockoptlen+0x164>
  824e44:	e0ffff17 	ldw	r3,-4(fp)
  824e48:	18800260 	cmpeqi	r2,r3,9
  824e4c:	1000391e 	bne	r2,zero,824f34 <bsd_i_sockoptlen+0x170>
  824e50:	00004406 	br	824f64 <bsd_i_sockoptlen+0x1a0>
  824e54:	e0ffff17 	ldw	r3,-4(fp)
  824e58:	18800420 	cmpeqi	r2,r3,16
  824e5c:	1000321e 	bne	r2,zero,824f28 <bsd_i_sockoptlen+0x164>
  824e60:	e0ffff17 	ldw	r3,-4(fp)
  824e64:	18800448 	cmpgei	r2,r3,17
  824e68:	1000041e 	bne	r2,zero,824e7c <bsd_i_sockoptlen+0xb8>
  824e6c:	e0ffff17 	ldw	r3,-4(fp)
  824e70:	18800388 	cmpgei	r2,r3,14
  824e74:	10003b1e 	bne	r2,zero,824f64 <bsd_i_sockoptlen+0x1a0>
  824e78:	00003406 	br	824f4c <bsd_i_sockoptlen+0x188>
  824e7c:	e0ffff17 	ldw	r3,-4(fp)
  824e80:	18800820 	cmpeqi	r2,r3,32
  824e84:	1000281e 	bne	r2,zero,824f28 <bsd_i_sockoptlen+0x164>
  824e88:	00003606 	br	824f64 <bsd_i_sockoptlen+0x1a0>
  824e8c:	e0ffff17 	ldw	r3,-4(fp)
  824e90:	188401c8 	cmpgei	r2,r3,4103
  824e94:	10000e1e 	bne	r2,zero,824ed0 <bsd_i_sockoptlen+0x10c>
  824e98:	e0ffff17 	ldw	r3,-4(fp)
  824e9c:	18840148 	cmpgei	r2,r3,4101
  824ea0:	10001e1e 	bne	r2,zero,824f1c <bsd_i_sockoptlen+0x158>
  824ea4:	e0ffff17 	ldw	r3,-4(fp)
  824ea8:	18804020 	cmpeqi	r2,r3,256
  824eac:	10001e1e 	bne	r2,zero,824f28 <bsd_i_sockoptlen+0x164>
  824eb0:	e0ffff17 	ldw	r3,-4(fp)
  824eb4:	18804010 	cmplti	r2,r3,256
  824eb8:	10002a1e 	bne	r2,zero,824f64 <bsd_i_sockoptlen+0x1a0>
  824ebc:	e0ffff17 	ldw	r3,-4(fp)
  824ec0:	18bbffc4 	addi	r2,r3,-4097
  824ec4:	108000a8 	cmpgeui	r2,r2,2
  824ec8:	1000261e 	bne	r2,zero,824f64 <bsd_i_sockoptlen+0x1a0>
  824ecc:	00001606 	br	824f28 <bsd_i_sockoptlen+0x164>
  824ed0:	e0ffff17 	ldw	r3,-4(fp)
  824ed4:	18840588 	cmpgei	r2,r3,4118
  824ed8:	1000071e 	bne	r2,zero,824ef8 <bsd_i_sockoptlen+0x134>
  824edc:	e0ffff17 	ldw	r3,-4(fp)
  824ee0:	18840508 	cmpgei	r2,r3,4116
  824ee4:	1000081e 	bne	r2,zero,824f08 <bsd_i_sockoptlen+0x144>
  824ee8:	e0ffff17 	ldw	r3,-4(fp)
  824eec:	18840248 	cmpgei	r2,r3,4105
  824ef0:	10001c1e 	bne	r2,zero,824f64 <bsd_i_sockoptlen+0x1a0>
  824ef4:	00000c06 	br	824f28 <bsd_i_sockoptlen+0x164>
  824ef8:	e0ffff17 	ldw	r3,-4(fp)
  824efc:	188405a0 	cmpeqi	r2,r3,4118
  824f00:	1000091e 	bne	r2,zero,824f28 <bsd_i_sockoptlen+0x164>
  824f04:	00001706 	br	824f64 <bsd_i_sockoptlen+0x1a0>
   {
   case SO_BIO:
   case SO_NBIO:
      /* these don't use an option value */
      return 0;
  824f08:	e03ffe15 	stw	zero,-8(fp)
  824f0c:	00001606 	br	824f68 <bsd_i_sockoptlen+0x1a4>
   case SO_LINGER:
      /* this option is a struct linger */
      return sizeof(struct linger);
  824f10:	00800204 	movi	r2,8
  824f14:	e0bffe15 	stw	r2,-8(fp)
  824f18:	00001306 	br	824f68 <bsd_i_sockoptlen+0x1a4>
   case SO_RCVTIMEO:
   case SO_SNDTIMEO:
      /* these options are type short */
      return sizeof(short);
  824f1c:	00c00084 	movi	r3,2
  824f20:	e0fffe15 	stw	r3,-8(fp)
  824f24:	00001006 	br	824f68 <bsd_i_sockoptlen+0x1a4>
   case SO_RCVBUF:
   case SO_NONBLOCK:
   case SO_ERROR:
   case SO_TYPE:
      /* these options are type int */
      return sizeof(int);
  824f28:	00800104 	movi	r2,4
  824f2c:	e0bffe15 	stw	r2,-8(fp)
  824f30:	00000d06 	br	824f68 <bsd_i_sockoptlen+0x1a4>
      return sizeof(int (*)());
#endif /* TCP_ZEROCOPY */
#ifdef IP_MULTICAST
   case IP_MULTICAST_IF:
      /* this option is type ip_addr */
      return sizeof(ip_addr);
  824f34:	00c00104 	movi	r3,4
  824f38:	e0fffe15 	stw	r3,-8(fp)
  824f3c:	00000a06 	br	824f68 <bsd_i_sockoptlen+0x1a4>
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      /* these options are type u_char */
      return sizeof(u_char);
  824f40:	00800044 	movi	r2,1
  824f44:	e0bffe15 	stw	r2,-8(fp)
  824f48:	00000706 	br	824f68 <bsd_i_sockoptlen+0x1a4>
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      /* these options are struct ip_mreq */
      return sizeof(struct ip_mreq);
  824f4c:	00c00204 	movi	r3,8
  824f50:	e0fffe15 	stw	r3,-8(fp)
  824f54:	00000406 	br	824f68 <bsd_i_sockoptlen+0x1a4>
 * IP_TTL_OPT == SOREUSEADDR. This causes a build erro
 * due to duplicate cases. Removing this one. They both
 * return the same value (sizeof(int)).
 */
  // case IP_TTL_OPT:
      return sizeof(int);
  824f58:	00800104 	movi	r2,4
  824f5c:	e0bffe15 	stw	r2,-8(fp)
  824f60:	00000106 	br	824f68 <bsd_i_sockoptlen+0x1a4>
   default:
      /* we don't know what type these options are */
      return 0;
  824f64:	e03ffe15 	stw	zero,-8(fp)
  824f68:	e0bffe17 	ldw	r2,-8(fp)
   }
   
}
  824f6c:	e037883a 	mov	sp,fp
  824f70:	df000017 	ldw	fp,0(sp)
  824f74:	dec00104 	addi	sp,sp,4
  824f78:	f800283a 	ret

00824f7c <bsd_getsockopt>:
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
  824f7c:	defff404 	addi	sp,sp,-48
  824f80:	dfc00b15 	stw	ra,44(sp)
  824f84:	df000a15 	stw	fp,40(sp)
  824f88:	df000a04 	addi	fp,sp,40
  824f8c:	e13ffb15 	stw	r4,-20(fp)
  824f90:	e17ffc15 	stw	r5,-16(fp)
  824f94:	e1bffd15 	stw	r6,-12(fp)
  824f98:	e1fffe15 	stw	r7,-8(fp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
  824f9c:	e0bffb17 	ldw	r2,-20(fp)
  824fa0:	10bff804 	addi	r2,r2,-32
  824fa4:	1085883a 	add	r2,r2,r2
  824fa8:	1085883a 	add	r2,r2,r2
  824fac:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
  824fb0:	00803934 	movhi	r2,228
  824fb4:	10a8d904 	addi	r2,r2,-23708
  824fb8:	e0bff715 	stw	r2,-36(fp)
  824fbc:	00000606 	br	824fd8 <bsd_getsockopt+0x5c>
  824fc0:	e0fff717 	ldw	r3,-36(fp)
  824fc4:	e0bffa17 	ldw	r2,-24(fp)
  824fc8:	18800626 	beq	r3,r2,824fe4 <bsd_getsockopt+0x68>
  824fcc:	e0bff717 	ldw	r2,-36(fp)
  824fd0:	10800017 	ldw	r2,0(r2)
  824fd4:	e0bff715 	stw	r2,-36(fp)
  824fd8:	e0bff717 	ldw	r2,-36(fp)
  824fdc:	1004c03a 	cmpne	r2,r2,zero
  824fe0:	103ff71e 	bne	r2,zero,824fc0 <bsd_getsockopt+0x44>
  824fe4:	e0fff717 	ldw	r3,-36(fp)
  824fe8:	e0bffa17 	ldw	r2,-24(fp)
  824fec:	18800426 	beq	r3,r2,825000 <bsd_getsockopt+0x84>
  824ff0:	082a7c80 	call	82a7c8 <dtrap>
  824ff4:	00bfffc4 	movi	r2,-1
  824ff8:	e0bfff15 	stw	r2,-4(fp)
  824ffc:	00002106 	br	825084 <bsd_getsockopt+0x108>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   loptlen = bsd_i_sockoptlen(level, name);
  825000:	e13ffc17 	ldw	r4,-16(fp)
  825004:	e17ffd17 	ldw	r5,-12(fp)
  825008:	0824dc40 	call	824dc4 <bsd_i_sockoptlen>
  82500c:	e0bff915 	stw	r2,-28(fp)
   if ((optlen == NULL) || (*optlen < loptlen))
  825010:	e0800217 	ldw	r2,8(fp)
  825014:	1005003a 	cmpeq	r2,r2,zero
  825018:	1000041e 	bne	r2,zero,82502c <bsd_getsockopt+0xb0>
  82501c:	e0800217 	ldw	r2,8(fp)
  825020:	10c00017 	ldw	r3,0(r2)
  825024:	e0bff917 	ldw	r2,-28(fp)
  825028:	1880060e 	bge	r3,r2,825044 <bsd_getsockopt+0xc8>
   {
      so->so_error = EFAULT;
  82502c:	e0fffa17 	ldw	r3,-24(fp)
  825030:	00800384 	movi	r2,14
  825034:	18800615 	stw	r2,24(r3)
      return -1;
  825038:	00bfffc4 	movi	r2,-1
  82503c:	e0bfff15 	stw	r2,-4(fp)
  825040:	00001006 	br	825084 <bsd_getsockopt+0x108>
   }

   e = t_getsockopt(s, level, name, opt, loptlen);
  825044:	e0bff917 	ldw	r2,-28(fp)
  825048:	d8800015 	stw	r2,0(sp)
  82504c:	e13ffb17 	ldw	r4,-20(fp)
  825050:	e17ffc17 	ldw	r5,-16(fp)
  825054:	e1bffd17 	ldw	r6,-12(fp)
  825058:	e1fffe17 	ldw	r7,-8(fp)
  82505c:	082e4dc0 	call	82e4dc <t_getsockopt>
  825060:	e0bff815 	stw	r2,-32(fp)

   /* if it worked, copy the option length back for the caller's use */
   if (e == 0)
  825064:	e0bff817 	ldw	r2,-32(fp)
  825068:	1004c03a 	cmpne	r2,r2,zero
  82506c:	1000031e 	bne	r2,zero,82507c <bsd_getsockopt+0x100>
   {
      *optlen = loptlen;
  825070:	e0c00217 	ldw	r3,8(fp)
  825074:	e0bff917 	ldw	r2,-28(fp)
  825078:	18800015 	stw	r2,0(r3)
   }

   return e;
  82507c:	e0bff817 	ldw	r2,-32(fp)
  825080:	e0bfff15 	stw	r2,-4(fp)
  825084:	e0bfff17 	ldw	r2,-4(fp)
   
}
  825088:	e037883a 	mov	sp,fp
  82508c:	dfc00117 	ldw	ra,4(sp)
  825090:	df000017 	ldw	fp,0(sp)
  825094:	dec00204 	addi	sp,sp,8
  825098:	f800283a 	ret

0082509c <bsd_ioctl>:
 *          available via bsd_errno(s).
 */
int
bsd_ioctl(BSD_SOCKET s, 
          unsigned long request, ...)
{
  82509c:	defff404 	addi	sp,sp,-48
  8250a0:	dfc00915 	stw	ra,36(sp)
  8250a4:	df000815 	stw	fp,32(sp)
  8250a8:	df000804 	addi	fp,sp,32
  8250ac:	e13ffd15 	stw	r4,-12(fp)
  8250b0:	e1800215 	stw	r6,8(fp)
  8250b4:	e1c00315 	stw	r7,12(fp)
  8250b8:	e17ffe15 	stw	r5,-8(fp)
   struct socket * so;
   va_list argptr;
   int iarg;

   so = LONG2SO(s);
  8250bc:	e0bffd17 	ldw	r2,-12(fp)
  8250c0:	10bff804 	addi	r2,r2,-32
  8250c4:	1085883a 	add	r2,r2,r2
  8250c8:	1085883a 	add	r2,r2,r2
  8250cc:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
  8250d0:	00803934 	movhi	r2,228
  8250d4:	10a8d904 	addi	r2,r2,-23708
  8250d8:	e0bff915 	stw	r2,-28(fp)
  8250dc:	00000606 	br	8250f8 <bsd_ioctl+0x5c>
  8250e0:	e0fff917 	ldw	r3,-28(fp)
  8250e4:	e0bffa17 	ldw	r2,-24(fp)
  8250e8:	18800626 	beq	r3,r2,825104 <bsd_ioctl+0x68>
  8250ec:	e0bff917 	ldw	r2,-28(fp)
  8250f0:	10800017 	ldw	r2,0(r2)
  8250f4:	e0bff915 	stw	r2,-28(fp)
  8250f8:	e0bff917 	ldw	r2,-28(fp)
  8250fc:	1004c03a 	cmpne	r2,r2,zero
  825100:	103ff71e 	bne	r2,zero,8250e0 <bsd_ioctl+0x44>
  825104:	e0fff917 	ldw	r3,-28(fp)
  825108:	e0bffa17 	ldw	r2,-24(fp)
  82510c:	18800426 	beq	r3,r2,825120 <bsd_ioctl+0x84>
  825110:	082a7c80 	call	82a7c8 <dtrap>
  825114:	00bfffc4 	movi	r2,-1
  825118:	e0bfff15 	stw	r2,-4(fp)
  82511c:	00001a06 	br	825188 <bsd_ioctl+0xec>

   va_start(argptr, request);
  825120:	e0800204 	addi	r2,fp,8
  825124:	e0bffb15 	stw	r2,-20(fp)

   switch (request)
  825128:	e0bffe17 	ldw	r2,-8(fp)
  82512c:	108405a0 	cmpeqi	r2,r2,4118
  825130:	1000011e 	bne	r2,zero,825138 <bsd_ioctl+0x9c>
  825134:	00000f06 	br	825174 <bsd_ioctl+0xd8>
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
  825138:	e0fffb17 	ldw	r3,-20(fp)
  82513c:	18800104 	addi	r2,r3,4
  825140:	e0bffb15 	stw	r2,-20(fp)
  825144:	1805883a 	mov	r2,r3
  825148:	10800017 	ldw	r2,0(r2)
  82514c:	e0bffc15 	stw	r2,-16(fp)
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
  825150:	e1fffc04 	addi	r7,fp,-16
  825154:	00800104 	movi	r2,4
  825158:	d8800015 	stw	r2,0(sp)
  82515c:	e13ffd17 	ldw	r4,-12(fp)
  825160:	017fffc4 	movi	r5,-1
  825164:	01840584 	movi	r6,4118
  825168:	082e3000 	call	82e300 <t_setsockopt>
  82516c:	e0bfff15 	stw	r2,-4(fp)
  825170:	00000506 	br	825188 <bsd_ioctl+0xec>
   default:
      so->so_error = EINVAL;
  825174:	e0fffa17 	ldw	r3,-24(fp)
  825178:	00800584 	movi	r2,22
  82517c:	18800615 	stw	r2,24(r3)
      return -1;
  825180:	00bfffc4 	movi	r2,-1
  825184:	e0bfff15 	stw	r2,-4(fp)
  825188:	e0bfff17 	ldw	r2,-4(fp)
   }
}
  82518c:	e037883a 	mov	sp,fp
  825190:	dfc00117 	ldw	ra,4(sp)
  825194:	df000017 	ldw	fp,0(sp)
  825198:	dec00404 	addi	sp,sp,16
  82519c:	f800283a 	ret

008251a0 <bsd_inet_ntoa>:
 * RETURNS: pointer to null-terminated string containing dotted-decimal
 *          printable representation of in
 */
char *
bsd_inet_ntoa(struct in_addr in)
{
  8251a0:	defffd04 	addi	sp,sp,-12
  8251a4:	dfc00215 	stw	ra,8(sp)
  8251a8:	df000115 	stw	fp,4(sp)
  8251ac:	df000104 	addi	fp,sp,4
  8251b0:	e13fff15 	stw	r4,-4(fp)
   return print_ipad(in.s_addr);
  8251b4:	e13fff17 	ldw	r4,-4(fp)
  8251b8:	082588c0 	call	82588c <print_ipad>
}
  8251bc:	e037883a 	mov	sp,fp
  8251c0:	dfc00117 	ldw	ra,4(sp)
  8251c4:	df000017 	ldw	fp,0(sp)
  8251c8:	dec00204 	addi	sp,sp,8
  8251cc:	f800283a 	ret

008251d0 <bsd_recvfrom>:
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
  8251d0:	deffef04 	addi	sp,sp,-68
  8251d4:	dfc01015 	stw	ra,64(sp)
  8251d8:	df000f15 	stw	fp,60(sp)
  8251dc:	df000f04 	addi	fp,sp,60
  8251e0:	e13ffb15 	stw	r4,-20(fp)
  8251e4:	e17ffc15 	stw	r5,-16(fp)
  8251e8:	e1bffd15 	stw	r6,-12(fp)
  8251ec:	e1fffe15 	stw	r7,-8(fp)
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
  8251f0:	e03ffa15 	stw	zero,-24(fp)
   int lret;

   so = LONG2SO(s);
  8251f4:	e0bffb17 	ldw	r2,-20(fp)
  8251f8:	10bff804 	addi	r2,r2,-32
  8251fc:	1085883a 	add	r2,r2,r2
  825200:	1085883a 	add	r2,r2,r2
  825204:	e0bff515 	stw	r2,-44(fp)
   SOC_CHECK(so);
  825208:	00803934 	movhi	r2,228
  82520c:	10a8d904 	addi	r2,r2,-23708
  825210:	e0bff315 	stw	r2,-52(fp)
  825214:	00000606 	br	825230 <bsd_recvfrom+0x60>
  825218:	e0fff317 	ldw	r3,-52(fp)
  82521c:	e0bff517 	ldw	r2,-44(fp)
  825220:	18800626 	beq	r3,r2,82523c <bsd_recvfrom+0x6c>
  825224:	e0bff317 	ldw	r2,-52(fp)
  825228:	10800017 	ldw	r2,0(r2)
  82522c:	e0bff315 	stw	r2,-52(fp)
  825230:	e0bff317 	ldw	r2,-52(fp)
  825234:	1004c03a 	cmpne	r2,r2,zero
  825238:	103ff71e 	bne	r2,zero,825218 <bsd_recvfrom+0x48>
  82523c:	e0fff317 	ldw	r3,-52(fp)
  825240:	e0bff517 	ldw	r2,-44(fp)
  825244:	18800426 	beq	r3,r2,825258 <bsd_recvfrom+0x88>
  825248:	082a7c80 	call	82a7c8 <dtrap>
  82524c:	00bfffc4 	movi	r2,-1
  825250:	e0bfff15 	stw	r2,-4(fp)
  825254:	00003006 	br	825318 <bsd_recvfrom+0x148>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (from != NULL)
  825258:	e0800217 	ldw	r2,8(fp)
  82525c:	1005003a 	cmpeq	r2,r2,zero
  825260:	10000c1e 	bne	r2,zero,825294 <bsd_recvfrom+0xc4>
   {
      if (fromlen == NULL)
  825264:	e0800317 	ldw	r2,12(fp)
  825268:	1004c03a 	cmpne	r2,r2,zero
  82526c:	1000061e 	bne	r2,zero,825288 <bsd_recvfrom+0xb8>
      {
         so->so_error = EFAULT;
  825270:	e0fff517 	ldw	r3,-44(fp)
  825274:	00800384 	movi	r2,14
  825278:	18800615 	stw	r2,24(r3)
         return -1;
  82527c:	00bfffc4 	movi	r2,-1
  825280:	e0bfff15 	stw	r2,-4(fp)
  825284:	00002406 	br	825318 <bsd_recvfrom+0x148>
      }
      lfromlen = *fromlen;
  825288:	e0800317 	ldw	r2,12(fp)
  82528c:	10800017 	ldw	r2,0(r2)
  825290:	e0bffa15 	stw	r2,-24(fp)
   }

   lret = t_recvfrom(s, (char *)buf, len, flags, &lfrom, &lfromlen );
  825294:	e17ffc17 	ldw	r5,-16(fp)
  825298:	e0bff604 	addi	r2,fp,-40
  82529c:	d8800015 	stw	r2,0(sp)
  8252a0:	e0bffa04 	addi	r2,fp,-24
  8252a4:	d8800115 	stw	r2,4(sp)
  8252a8:	e13ffb17 	ldw	r4,-20(fp)
  8252ac:	e1bffd17 	ldw	r6,-12(fp)
  8252b0:	e1fffe17 	ldw	r7,-8(fp)
  8252b4:	082e7700 	call	82e770 <t_recvfrom>
  8252b8:	e0bff415 	stw	r2,-48(fp)
    * sockaddr_in), which is all that t_recvfrom() can return as a peer
    * name.
    * For IPV6 addresses or dual IPV4/IPV6 stack, the max size copied
    * is sizeof(struct sockaddr_in6)
    */
   if ((lret != -1) && (from != NULL))
  8252bc:	e0bff417 	ldw	r2,-48(fp)
  8252c0:	10bfffe0 	cmpeqi	r2,r2,-1
  8252c4:	1000121e 	bne	r2,zero,825310 <bsd_recvfrom+0x140>
  8252c8:	e0800217 	ldw	r2,8(fp)
  8252cc:	1005003a 	cmpeq	r2,r2,zero
  8252d0:	10000f1e 	bne	r2,zero,825310 <bsd_recvfrom+0x140>
   {
#ifndef IP_V6
      if (lfromlen > sizeof(struct sockaddr_in))
  8252d4:	e0bffa17 	ldw	r2,-24(fp)
  8252d8:	10800470 	cmpltui	r2,r2,17
  8252dc:	1000021e 	bne	r2,zero,8252e8 <bsd_recvfrom+0x118>
         lfromlen = sizeof(struct sockaddr_in);
  8252e0:	00800404 	movi	r2,16
  8252e4:	e0bffa15 	stw	r2,-24(fp)
#else
      if (lfromlen > sizeof(struct sockaddr_in6))
         lfromlen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(from, &lfrom, lfromlen);
  8252e8:	e0bffa17 	ldw	r2,-24(fp)
  8252ec:	100d883a 	mov	r6,r2
  8252f0:	e0800217 	ldw	r2,8(fp)
  8252f4:	e0fff604 	addi	r3,fp,-40
  8252f8:	1009883a 	mov	r4,r2
  8252fc:	180b883a 	mov	r5,r3
  825300:	08073380 	call	807338 <memcpy>
      *fromlen = lfromlen;
  825304:	e0fffa17 	ldw	r3,-24(fp)
  825308:	e0800317 	ldw	r2,12(fp)
  82530c:	10c00015 	stw	r3,0(r2)
   }

   return lret;
  825310:	e0bff417 	ldw	r2,-48(fp)
  825314:	e0bfff15 	stw	r2,-4(fp)
  825318:	e0bfff17 	ldw	r2,-4(fp)
}
  82531c:	e037883a 	mov	sp,fp
  825320:	dfc00117 	ldw	ra,4(sp)
  825324:	df000017 	ldw	fp,0(sp)
  825328:	dec00204 	addi	sp,sp,8
  82532c:	f800283a 	ret

00825330 <bsd_select>:
bsd_select(int nfds,
           fd_set * readfds,
           fd_set * writefds,
           fd_set * exceptfds,
           BSD_TIMEVAL_T * timeout)
{
  825330:	defff804 	addi	sp,sp,-32
  825334:	dfc00715 	stw	ra,28(sp)
  825338:	df000615 	stw	fp,24(sp)
  82533c:	df000604 	addi	fp,sp,24
  825340:	e13ffc15 	stw	r4,-16(fp)
  825344:	e17ffd15 	stw	r5,-12(fp)
  825348:	e1bffe15 	stw	r6,-8(fp)
  82534c:	e1ffff15 	stw	r7,-4(fp)
   long ltv;    /* timeout expressed in ticks */
   long tps;    /* local copy of TPS */

   USE_ARG(nfds);

   if (timeout != NULL)
  825350:	e0800217 	ldw	r2,8(fp)
  825354:	1005003a 	cmpeq	r2,r2,zero
  825358:	1000431e 	bne	r2,zero,825468 <bsd_select+0x138>
       * million (i.e. any number of microseconds up to one second).
       * So we scale tv_usec from microseconds to something reasonable
       * based on TPS, multiply it by TPS, then scale it the rest of
       * the way to ticks-per-second.
       */
      tps = TPS;
  82535c:	0080fa04 	movi	r2,1000
  825360:	e0bffa15 	stw	r2,-24(fp)
      if (tps >= 1000)
  825364:	e0bffa17 	ldw	r2,-24(fp)
  825368:	1080fa10 	cmplti	r2,r2,1000
  82536c:	10000c1e 	bne	r2,zero,8253a0 <bsd_select+0x70>
      {
         ltv = (((timeout->tv_usec + 50) / 100) * tps) / 10000;
  825370:	e0800217 	ldw	r2,8(fp)
  825374:	10800117 	ldw	r2,4(r2)
  825378:	11000c84 	addi	r4,r2,50
  82537c:	01401904 	movi	r5,100
  825380:	08052f80 	call	8052f8 <__divsi3>
  825384:	1007883a 	mov	r3,r2
  825388:	e0bffa17 	ldw	r2,-24(fp)
  82538c:	1889383a 	mul	r4,r3,r2
  825390:	0149c404 	movi	r5,10000
  825394:	08052f80 	call	8052f8 <__divsi3>
  825398:	e0bffb15 	stw	r2,-20(fp)
  82539c:	00002b06 	br	82544c <bsd_select+0x11c>
      }
      else if (tps >= 100)
  8253a0:	e0bffa17 	ldw	r2,-24(fp)
  8253a4:	10801910 	cmplti	r2,r2,100
  8253a8:	10000c1e 	bne	r2,zero,8253dc <bsd_select+0xac>
      {
         ltv = (((timeout->tv_usec + 500) / 1000) * tps) / 1000;
  8253ac:	e0800217 	ldw	r2,8(fp)
  8253b0:	10800117 	ldw	r2,4(r2)
  8253b4:	11007d04 	addi	r4,r2,500
  8253b8:	0140fa04 	movi	r5,1000
  8253bc:	08052f80 	call	8052f8 <__divsi3>
  8253c0:	1007883a 	mov	r3,r2
  8253c4:	e0bffa17 	ldw	r2,-24(fp)
  8253c8:	1889383a 	mul	r4,r3,r2
  8253cc:	0140fa04 	movi	r5,1000
  8253d0:	08052f80 	call	8052f8 <__divsi3>
  8253d4:	e0bffb15 	stw	r2,-20(fp)
  8253d8:	00001c06 	br	82544c <bsd_select+0x11c>
      }
      else if (tps >= 10)
  8253dc:	e0bffa17 	ldw	r2,-24(fp)
  8253e0:	10800290 	cmplti	r2,r2,10
  8253e4:	10000c1e 	bne	r2,zero,825418 <bsd_select+0xe8>
      {
         ltv = (((timeout->tv_usec + 5000) / 10000) * tps) / 100;
  8253e8:	e0800217 	ldw	r2,8(fp)
  8253ec:	10800117 	ldw	r2,4(r2)
  8253f0:	1104e204 	addi	r4,r2,5000
  8253f4:	0149c404 	movi	r5,10000
  8253f8:	08052f80 	call	8052f8 <__divsi3>
  8253fc:	1007883a 	mov	r3,r2
  825400:	e0bffa17 	ldw	r2,-24(fp)
  825404:	1889383a 	mul	r4,r3,r2
  825408:	01401904 	movi	r5,100
  82540c:	08052f80 	call	8052f8 <__divsi3>
  825410:	e0bffb15 	stw	r2,-20(fp)
  825414:	00000d06 	br	82544c <bsd_select+0x11c>
      }
      else
      {
         ltv = (((timeout->tv_usec + 50000) / 100000) * tps) / 10;
  825418:	e0800217 	ldw	r2,8(fp)
  82541c:	10c00117 	ldw	r3,4(r2)
  825420:	00b0d414 	movui	r2,50000
  825424:	1889883a 	add	r4,r3,r2
  825428:	014000b4 	movhi	r5,2
  82542c:	2961a804 	addi	r5,r5,-31072
  825430:	08052f80 	call	8052f8 <__divsi3>
  825434:	1007883a 	mov	r3,r2
  825438:	e0bffa17 	ldw	r2,-24(fp)
  82543c:	1889383a 	mul	r4,r3,r2
  825440:	01400284 	movi	r5,10
  825444:	08052f80 	call	8052f8 <__divsi3>
  825448:	e0bffb15 	stw	r2,-20(fp)
      }
      ltv += (timeout->tv_sec * TPS);
  82544c:	e0800217 	ldw	r2,8(fp)
  825450:	10800017 	ldw	r2,0(r2)
  825454:	10c0fa24 	muli	r3,r2,1000
  825458:	e0bffb17 	ldw	r2,-20(fp)
  82545c:	1885883a 	add	r2,r3,r2
  825460:	e0bffb15 	stw	r2,-20(fp)
  825464:	00000206 	br	825470 <bsd_select+0x140>
   }
   else {
      /*
       * NULL timeout: wait indefinitely in t_select()
       */
      ltv = -1;
  825468:	00bfffc4 	movi	r2,-1
  82546c:	e0bffb15 	stw	r2,-20(fp)
   }

   return (t_select(readfds, writefds, exceptfds, ltv));
  825470:	e13ffd17 	ldw	r4,-12(fp)
  825474:	e17ffe17 	ldw	r5,-8(fp)
  825478:	e1bfff17 	ldw	r6,-4(fp)
  82547c:	e1fffb17 	ldw	r7,-20(fp)
  825480:	08326880 	call	832688 <t_select>
}
  825484:	e037883a 	mov	sp,fp
  825488:	dfc00117 	ldw	ra,4(sp)
  82548c:	df000017 	ldw	fp,0(sp)
  825490:	dec00204 	addi	sp,sp,8
  825494:	f800283a 	ret

00825498 <bsd_setsockopt>:
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
  825498:	defff604 	addi	sp,sp,-40
  82549c:	dfc00915 	stw	ra,36(sp)
  8254a0:	df000815 	stw	fp,32(sp)
  8254a4:	df000804 	addi	fp,sp,32
  8254a8:	e13ffb15 	stw	r4,-20(fp)
  8254ac:	e17ffc15 	stw	r5,-16(fp)
  8254b0:	e1bffd15 	stw	r6,-12(fp)
  8254b4:	e1fffe15 	stw	r7,-8(fp)
   struct socket * so;

   so = LONG2SO(s);
  8254b8:	e0bffb17 	ldw	r2,-20(fp)
  8254bc:	10bff804 	addi	r2,r2,-32
  8254c0:	1085883a 	add	r2,r2,r2
  8254c4:	1085883a 	add	r2,r2,r2
  8254c8:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
  8254cc:	00803934 	movhi	r2,228
  8254d0:	10a8d904 	addi	r2,r2,-23708
  8254d4:	e0bff915 	stw	r2,-28(fp)
  8254d8:	00000606 	br	8254f4 <bsd_setsockopt+0x5c>
  8254dc:	e0fff917 	ldw	r3,-28(fp)
  8254e0:	e0bffa17 	ldw	r2,-24(fp)
  8254e4:	18800626 	beq	r3,r2,825500 <bsd_setsockopt+0x68>
  8254e8:	e0bff917 	ldw	r2,-28(fp)
  8254ec:	10800017 	ldw	r2,0(r2)
  8254f0:	e0bff915 	stw	r2,-28(fp)
  8254f4:	e0bff917 	ldw	r2,-28(fp)
  8254f8:	1004c03a 	cmpne	r2,r2,zero
  8254fc:	103ff71e 	bne	r2,zero,8254dc <bsd_setsockopt+0x44>
  825500:	e0fff917 	ldw	r3,-28(fp)
  825504:	e0bffa17 	ldw	r2,-24(fp)
  825508:	18800426 	beq	r3,r2,82551c <bsd_setsockopt+0x84>
  82550c:	082a7c80 	call	82a7c8 <dtrap>
  825510:	00bfffc4 	movi	r2,-1
  825514:	e0bfff15 	stw	r2,-4(fp)
  825518:	00001406 	br	82556c <bsd_setsockopt+0xd4>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   if (optlen < bsd_i_sockoptlen(level, name))
  82551c:	e13ffc17 	ldw	r4,-16(fp)
  825520:	e17ffd17 	ldw	r5,-12(fp)
  825524:	0824dc40 	call	824dc4 <bsd_i_sockoptlen>
  825528:	1007883a 	mov	r3,r2
  82552c:	e0800217 	ldw	r2,8(fp)
  825530:	10c0060e 	bge	r2,r3,82554c <bsd_setsockopt+0xb4>
   {
      so->so_error = EFAULT;
  825534:	e0fffa17 	ldw	r3,-24(fp)
  825538:	00800384 	movi	r2,14
  82553c:	18800615 	stw	r2,24(r3)
      return -1;
  825540:	00bfffc4 	movi	r2,-1
  825544:	e0bfff15 	stw	r2,-4(fp)
  825548:	00000806 	br	82556c <bsd_setsockopt+0xd4>
   }

   return t_setsockopt(s, level, name, opt, optlen);
  82554c:	e0800217 	ldw	r2,8(fp)
  825550:	d8800015 	stw	r2,0(sp)
  825554:	e13ffb17 	ldw	r4,-20(fp)
  825558:	e17ffc17 	ldw	r5,-16(fp)
  82555c:	e1bffd17 	ldw	r6,-12(fp)
  825560:	e1fffe17 	ldw	r7,-8(fp)
  825564:	082e3000 	call	82e300 <t_setsockopt>
  825568:	e0bfff15 	stw	r2,-4(fp)
  82556c:	e0bfff17 	ldw	r2,-4(fp)
}
  825570:	e037883a 	mov	sp,fp
  825574:	dfc00117 	ldw	ra,4(sp)
  825578:	df000017 	ldw	fp,0(sp)
  82557c:	dec00204 	addi	sp,sp,8
  825580:	f800283a 	ret

00825584 <ccksum>:
 * be done in 16-bit chunks.
 */

unsigned short
ccksum (void *ptr, unsigned words)
{
  825584:	defffa04 	addi	sp,sp,-24
  825588:	df000515 	stw	fp,20(sp)
  82558c:	df000504 	addi	fp,sp,20
  825590:	e13ffe15 	stw	r4,-8(fp)
  825594:	e17fff15 	stw	r5,-4(fp)
   unsigned short *addr = (unsigned short *)ptr;
  825598:	e0bffe17 	ldw	r2,-8(fp)
  82559c:	e0bffd15 	stw	r2,-12(fp)
   unsigned long sum = 0;
  8255a0:	e03ffc15 	stw	zero,-16(fp)
   int count = (int)words;
  8255a4:	e0bfff17 	ldw	r2,-4(fp)
  8255a8:	e0bffb15 	stw	r2,-20(fp)

   while (--count >= 0)
  8255ac:	00000906 	br	8255d4 <ccksum+0x50>
   {
      /*  This is the inner loop */
      sum += *addr++;
  8255b0:	e0bffd17 	ldw	r2,-12(fp)
  8255b4:	1080000b 	ldhu	r2,0(r2)
  8255b8:	10ffffcc 	andi	r3,r2,65535
  8255bc:	e0bffc17 	ldw	r2,-16(fp)
  8255c0:	10c5883a 	add	r2,r2,r3
  8255c4:	e0bffc15 	stw	r2,-16(fp)
  8255c8:	e0bffd17 	ldw	r2,-12(fp)
  8255cc:	10800084 	addi	r2,r2,2
  8255d0:	e0bffd15 	stw	r2,-12(fp)
{
   unsigned short *addr = (unsigned short *)ptr;
   unsigned long sum = 0;
   int count = (int)words;

   while (--count >= 0)
  8255d4:	e0bffb17 	ldw	r2,-20(fp)
  8255d8:	10bfffc4 	addi	r2,r2,-1
  8255dc:	e0bffb15 	stw	r2,-20(fp)
  8255e0:	e0bffb17 	ldw	r2,-20(fp)
  8255e4:	1004403a 	cmpge	r2,r2,zero
  8255e8:	103ff11e 	bne	r2,zero,8255b0 <ccksum+0x2c>
      /*  This is the inner loop */
      sum += *addr++;
   }

   /*  Fold 32-bit sum to 16 bits */
   sum = (sum & 0xffff) + (sum >> 16);
  8255ec:	e0bffc17 	ldw	r2,-16(fp)
  8255f0:	10ffffcc 	andi	r3,r2,65535
  8255f4:	e0bffc17 	ldw	r2,-16(fp)
  8255f8:	1004d43a 	srli	r2,r2,16
  8255fc:	1885883a 	add	r2,r3,r2
  825600:	e0bffc15 	stw	r2,-16(fp)
   sum = (sum & 0xffff) + (sum >> 16);
  825604:	e0bffc17 	ldw	r2,-16(fp)
  825608:	10ffffcc 	andi	r3,r2,65535
  82560c:	e0bffc17 	ldw	r2,-16(fp)
  825610:	1004d43a 	srli	r2,r2,16
  825614:	1885883a 	add	r2,r3,r2
  825618:	e0bffc15 	stw	r2,-16(fp)

   /* checksum = ~sum; *//* removed for MIT IP stack */
   return ((unsigned short)sum);
  82561c:	e0bffc17 	ldw	r2,-16(fp)
  825620:	10bfffcc 	andi	r2,r2,65535
}
  825624:	e037883a 	mov	sp,fp
  825628:	df000017 	ldw	fp,0(sp)
  82562c:	dec00104 	addi	sp,sp,4
  825630:	f800283a 	ret

00825634 <cksum>:
 *    3 = user-supplied alternate implementation
 */

unsigned short
cksum (void *ptr, unsigned count)
{
  825634:	defffb04 	addi	sp,sp,-20
  825638:	dfc00415 	stw	ra,16(sp)
  82563c:	df000315 	stw	fp,12(sp)
  825640:	df000304 	addi	fp,sp,12
  825644:	e13ffd15 	stw	r4,-12(fp)
  825648:	e17ffe15 	stw	r5,-8(fp)
   switch (cksum_select)
  82564c:	d0a03917 	ldw	r2,-32540(gp)
  825650:	108000a0 	cmpeqi	r2,r2,2
  825654:	1000061e 	bne	r2,zero,825670 <cksum+0x3c>
   {
      case 1:
      default:
         return (ccksum(ptr, count));
  825658:	e13ffd17 	ldw	r4,-12(fp)
  82565c:	e17ffe17 	ldw	r5,-8(fp)
  825660:	08255840 	call	825584 <ccksum>
  825664:	10bfffcc 	andi	r2,r2,65535
  825668:	e0bfff15 	stw	r2,-4(fp)
  82566c:	00000506 	br	825684 <cksum+0x50>
 #ifndef C_CHECKSUM
      case 2:
         return (asm_cksum(ptr, count));
  825670:	e13ffd17 	ldw	r4,-12(fp)
  825674:	e17ffe17 	ldw	r5,-8(fp)
  825678:	082a6340 	call	82a634 <asm_cksum>
  82567c:	10bfffcc 	andi	r2,r2,65535
  825680:	e0bfff15 	stw	r2,-4(fp)
  825684:	e0bfff17 	ldw	r2,-4(fp)
#else
#endif
         return (alt_cksum(ptr, count));
#endif
   }
}
  825688:	e037883a 	mov	sp,fp
  82568c:	dfc00117 	ldw	ra,4(sp)
  825690:	df000017 	ldw	fp,0(sp)
  825694:	dec00204 	addi	sp,sp,8
  825698:	f800283a 	ret

0082569c <do_trap>:
 * RETURNS: 0
 */

int
do_trap(void)
{
  82569c:	defffe04 	addi	sp,sp,-8
  8256a0:	dfc00115 	stw	ra,4(sp)
  8256a4:	df000015 	stw	fp,0(sp)
  8256a8:	d839883a 	mov	fp,sp
   dtrap();
  8256ac:	082a7c80 	call	82a7c8 <dtrap>
   return 0;
  8256b0:	0005883a 	mov	r2,zero
}
  8256b4:	e037883a 	mov	sp,fp
  8256b8:	dfc00117 	ldw	ra,4(sp)
  8256bc:	df000017 	ldw	fp,0(sp)
  8256c0:	dec00204 	addi	sp,sp,8
  8256c4:	f800283a 	ret

008256c8 <nextarg>:
 * RETURNS:  pointer to next arg in string 
 */

char *   
nextarg(char * argp)
{
  8256c8:	defffe04 	addi	sp,sp,-8
  8256cc:	df000115 	stw	fp,4(sp)
  8256d0:	df000104 	addi	fp,sp,4
  8256d4:	e13fff15 	stw	r4,-4(fp)
   while (*argp > ' ')argp++; /* scan past current arg */
  8256d8:	00000306 	br	8256e8 <nextarg+0x20>
  8256dc:	e0bfff17 	ldw	r2,-4(fp)
  8256e0:	10800044 	addi	r2,r2,1
  8256e4:	e0bfff15 	stw	r2,-4(fp)
  8256e8:	e0bfff17 	ldw	r2,-4(fp)
  8256ec:	10800003 	ldbu	r2,0(r2)
  8256f0:	10803fcc 	andi	r2,r2,255
  8256f4:	1080201c 	xori	r2,r2,128
  8256f8:	10bfe004 	addi	r2,r2,-128
  8256fc:	10800848 	cmpgei	r2,r2,33
  825700:	103ff61e 	bne	r2,zero,8256dc <nextarg+0x14>
      while (*argp == ' ')argp++;   /* scan past spaces */
  825704:	00000306 	br	825714 <nextarg+0x4c>
  825708:	e0bfff17 	ldw	r2,-4(fp)
  82570c:	10800044 	addi	r2,r2,1
  825710:	e0bfff15 	stw	r2,-4(fp)
  825714:	e0bfff17 	ldw	r2,-4(fp)
  825718:	10800003 	ldbu	r2,0(r2)
  82571c:	10803fcc 	andi	r2,r2,255
  825720:	1080201c 	xori	r2,r2,128
  825724:	10bfe004 	addi	r2,r2,-128
  825728:	10800820 	cmpeqi	r2,r2,32
  82572c:	103ff61e 	bne	r2,zero,825708 <nextarg+0x40>
      return (argp);
  825730:	e0bfff17 	ldw	r2,-4(fp)
}
  825734:	e037883a 	mov	sp,fp
  825738:	df000017 	ldw	fp,0(sp)
  82573c:	dec00104 	addi	sp,sp,4
  825740:	f800283a 	ret

00825744 <hexdump>:

#define  HEX_BYTES_PER_LINE   16

void
hexdump(void * pio, void * buffer, unsigned len)
{
  825744:	defff704 	addi	sp,sp,-36
  825748:	dfc00815 	stw	ra,32(sp)
  82574c:	df000715 	stw	fp,28(sp)
  825750:	df000704 	addi	fp,sp,28
  825754:	e13ffc15 	stw	r4,-16(fp)
  825758:	e17ffd15 	stw	r5,-12(fp)
  82575c:	e1bffe15 	stw	r6,-8(fp)
   u_char * data  =  (u_char *)buffer;
  825760:	e0bffd17 	ldw	r2,-12(fp)
  825764:	e0bffb15 	stw	r2,-20(fp)
   unsigned int count;
   char  c;

   while (len)
  825768:	00004006 	br	82586c <hexdump+0x128>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
  82576c:	e03ffa15 	stw	zero,-24(fp)
  825770:	00000c06 	br	8257a4 <hexdump+0x60>
         ns_printf(pio, "%02x ", *(data + count));
  825774:	e0fffa17 	ldw	r3,-24(fp)
  825778:	e0bffb17 	ldw	r2,-20(fp)
  82577c:	1885883a 	add	r2,r3,r2
  825780:	10800003 	ldbu	r2,0(r2)
  825784:	11803fcc 	andi	r6,r2,255
  825788:	e13ffc17 	ldw	r4,-16(fp)
  82578c:	01402174 	movhi	r5,133
  825790:	2974d704 	addi	r5,r5,-11428
  825794:	0825c540 	call	825c54 <ns_printf>
   char  c;

   while (len)
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
  825798:	e0bffa17 	ldw	r2,-24(fp)
  82579c:	10800044 	addi	r2,r2,1
  8257a0:	e0bffa15 	stw	r2,-24(fp)
  8257a4:	e0bffa17 	ldw	r2,-24(fp)
  8257a8:	10800428 	cmpgeui	r2,r2,16
  8257ac:	1000031e 	bne	r2,zero,8257bc <hexdump+0x78>
  8257b0:	e0fffa17 	ldw	r3,-24(fp)
  8257b4:	e0bffe17 	ldw	r2,-8(fp)
  8257b8:	18bfee36 	bltu	r3,r2,825774 <hexdump+0x30>
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
  8257bc:	e03ffa15 	stw	zero,-24(fp)
  8257c0:	00001806 	br	825824 <hexdump+0xe0>
      {
         c = *(data + count);
  8257c4:	e0fffa17 	ldw	r3,-24(fp)
  8257c8:	e0bffb17 	ldw	r2,-20(fp)
  8257cc:	1885883a 	add	r2,r3,r2
  8257d0:	10800003 	ldbu	r2,0(r2)
  8257d4:	e0bff905 	stb	r2,-28(fp)
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
  8257d8:	e0bff907 	ldb	r2,-28(fp)
  8257dc:	10800810 	cmplti	r2,r2,32
  8257e0:	1000061e 	bne	r2,zero,8257fc <hexdump+0xb8>
  8257e4:	e0bff907 	ldb	r2,-28(fp)
  8257e8:	10801fe0 	cmpeqi	r2,r2,127
  8257ec:	1000031e 	bne	r2,zero,8257fc <hexdump+0xb8>
  8257f0:	e0bff907 	ldb	r2,-28(fp)
  8257f4:	e0bfff15 	stw	r2,-4(fp)
  8257f8:	00000206 	br	825804 <hexdump+0xc0>
  8257fc:	00800b84 	movi	r2,46
  825800:	e0bfff15 	stw	r2,-4(fp)
  825804:	e13ffc17 	ldw	r4,-16(fp)
  825808:	01402174 	movhi	r5,133
  82580c:	2974d904 	addi	r5,r5,-11420
  825810:	e1bfff17 	ldw	r6,-4(fp)
  825814:	0825c540 	call	825c54 <ns_printf>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
  825818:	e0bffa17 	ldw	r2,-24(fp)
  82581c:	10800044 	addi	r2,r2,1
  825820:	e0bffa15 	stw	r2,-24(fp)
  825824:	e0bffa17 	ldw	r2,-24(fp)
  825828:	10800428 	cmpgeui	r2,r2,16
  82582c:	1000031e 	bne	r2,zero,82583c <hexdump+0xf8>
  825830:	e0fffa17 	ldw	r3,-24(fp)
  825834:	e0bffe17 	ldw	r2,-8(fp)
  825838:	18bfe236 	bltu	r3,r2,8257c4 <hexdump+0x80>
      {
         c = *(data + count);
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
      }
      ns_printf(pio,"\n");
  82583c:	e13ffc17 	ldw	r4,-16(fp)
  825840:	01402174 	movhi	r5,133
  825844:	2974da04 	addi	r5,r5,-11416
  825848:	0825c540 	call	825c54 <ns_printf>
      len -= count;
  82584c:	e0fffe17 	ldw	r3,-8(fp)
  825850:	e0bffa17 	ldw	r2,-24(fp)
  825854:	1885c83a 	sub	r2,r3,r2
  825858:	e0bffe15 	stw	r2,-8(fp)
      data += count;
  82585c:	e0fffa17 	ldw	r3,-24(fp)
  825860:	e0bffb17 	ldw	r2,-20(fp)
  825864:	10c5883a 	add	r2,r2,r3
  825868:	e0bffb15 	stw	r2,-20(fp)
{
   u_char * data  =  (u_char *)buffer;
   unsigned int count;
   char  c;

   while (len)
  82586c:	e0bffe17 	ldw	r2,-8(fp)
  825870:	1004c03a 	cmpne	r2,r2,zero
  825874:	103fbd1e 	bne	r2,zero,82576c <hexdump+0x28>
      }
      ns_printf(pio,"\n");
      len -= count;
      data += count;
   }
}
  825878:	e037883a 	mov	sp,fp
  82587c:	dfc00117 	ldw	ra,4(sp)
  825880:	df000017 	ldw	fp,0(sp)
  825884:	dec00204 	addi	sp,sp,8
  825888:	f800283a 	ret

0082588c <print_ipad>:

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
  82588c:	defffa04 	addi	sp,sp,-24
  825890:	dfc00515 	stw	ra,20(sp)
  825894:	df000415 	stw	fp,16(sp)
  825898:	df000404 	addi	fp,sp,16
  82589c:	e13fff15 	stw	r4,-4(fp)
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
  8258a0:	e0bfff17 	ldw	r2,-4(fp)
  8258a4:	e0bffe15 	stw	r2,-8(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
  8258a8:	e0bffe03 	ldbu	r2,-8(fp)
  8258ac:	11803fcc 	andi	r6,r2,255
  8258b0:	e0bffe43 	ldbu	r2,-7(fp)
  8258b4:	11c03fcc 	andi	r7,r2,255
  8258b8:	e0bffe83 	ldbu	r2,-6(fp)
  8258bc:	10c03fcc 	andi	r3,r2,255
  8258c0:	e0bffec3 	ldbu	r2,-5(fp)
  8258c4:	10803fcc 	andi	r2,r2,255
  8258c8:	d8c00015 	stw	r3,0(sp)
  8258cc:	d8800115 	stw	r2,4(sp)
  8258d0:	01003934 	movhi	r4,228
  8258d4:	2127bd84 	addi	r4,r4,-24842
  8258d8:	01402174 	movhi	r5,133
  8258dc:	2974db04 	addi	r5,r5,-11412
  8258e0:	0807b340 	call	807b34 <sprintf>
    ip.ip.ipchar[0],
    ip.ip.ipchar[1],
    ip.ip.ipchar[2],
    ip.ip.ipchar[3]);

   return ipreturn;
  8258e4:	00803934 	movhi	r2,228
  8258e8:	10a7bd84 	addi	r2,r2,-24842
}
  8258ec:	e037883a 	mov	sp,fp
  8258f0:	dfc00117 	ldw	ra,4(sp)
  8258f4:	df000017 	ldw	fp,0(sp)
  8258f8:	dec00204 	addi	sp,sp,8
  8258fc:	f800283a 	ret

00825900 <print_uptime>:

static char tistring[24];     /* buffer for return */

char *   
print_uptime(unsigned long timetick)
{
  825900:	defff804 	addi	sp,sp,-32
  825904:	dfc00715 	stw	ra,28(sp)
  825908:	df000615 	stw	fp,24(sp)
  82590c:	df000604 	addi	fp,sp,24
  825910:	e13fff15 	stw	r4,-4(fp)
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
  825914:	e13fff17 	ldw	r4,-4(fp)
  825918:	01401904 	movi	r5,100
  82591c:	08053b80 	call	8053b8 <__udivsi3>
  825920:	e0bfff15 	stw	r2,-4(fp)
   seconds = (unsigned)(timetick%60);
  825924:	e13fff17 	ldw	r4,-4(fp)
  825928:	01400f04 	movi	r5,60
  82592c:	08053c00 	call	8053c0 <__umodsi3>
  825930:	e0bffe15 	stw	r2,-8(fp)
   timetick = timetick/60;    /* turn timetick into minutes */
  825934:	e13fff17 	ldw	r4,-4(fp)
  825938:	01400f04 	movi	r5,60
  82593c:	08053b80 	call	8053b8 <__udivsi3>
  825940:	e0bfff15 	stw	r2,-4(fp)
   minutes = (unsigned)(timetick%60);
  825944:	e13fff17 	ldw	r4,-4(fp)
  825948:	01400f04 	movi	r5,60
  82594c:	08053c00 	call	8053c0 <__umodsi3>
  825950:	e0bffd15 	stw	r2,-12(fp)
   timetick = timetick/60;    /* turn timetick into hours */
  825954:	e13fff17 	ldw	r4,-4(fp)
  825958:	01400f04 	movi	r5,60
  82595c:	08053b80 	call	8053b8 <__udivsi3>
  825960:	e0bfff15 	stw	r2,-4(fp)
   hours = (unsigned)(timetick%24);
  825964:	e13fff17 	ldw	r4,-4(fp)
  825968:	01400604 	movi	r5,24
  82596c:	08053c00 	call	8053c0 <__umodsi3>
  825970:	e0bffc15 	stw	r2,-16(fp)
   timetick = timetick/24;    /* turn timetick into days */
  825974:	e13fff17 	ldw	r4,-4(fp)
  825978:	01400604 	movi	r5,24
  82597c:	08053b80 	call	8053b8 <__udivsi3>
  825980:	e0bfff15 	stw	r2,-4(fp)

   if (timetick)  /* Is there a whole number of days? */
  825984:	e0bfff17 	ldw	r2,-4(fp)
  825988:	1005003a 	cmpeq	r2,r2,zero
  82598c:	10000c1e 	bne	r2,zero,8259c0 <print_uptime+0xc0>
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
  825990:	e0bffd17 	ldw	r2,-12(fp)
  825994:	d8800015 	stw	r2,0(sp)
  825998:	e0bffe17 	ldw	r2,-8(fp)
  82599c:	d8800115 	stw	r2,4(sp)
  8259a0:	010021b4 	movhi	r4,134
  8259a4:	21363504 	addi	r4,r4,-10028
  8259a8:	01402174 	movhi	r5,133
  8259ac:	2974de04 	addi	r5,r5,-11400
  8259b0:	e1bfff17 	ldw	r6,-4(fp)
  8259b4:	e1fffc17 	ldw	r7,-16(fp)
  8259b8:	0807b340 	call	807b34 <sprintf>
  8259bc:	00001406 	br	825a10 <print_uptime+0x110>
    timetick, hours, minutes, seconds);
   else if (hours)
  8259c0:	e0bffc17 	ldw	r2,-16(fp)
  8259c4:	1005003a 	cmpeq	r2,r2,zero
  8259c8:	10000a1e 	bne	r2,zero,8259f4 <print_uptime+0xf4>
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
  8259cc:	e0bffe17 	ldw	r2,-8(fp)
  8259d0:	d8800015 	stw	r2,0(sp)
  8259d4:	010021b4 	movhi	r4,134
  8259d8:	21363504 	addi	r4,r4,-10028
  8259dc:	01402174 	movhi	r5,133
  8259e0:	2974e404 	addi	r5,r5,-11376
  8259e4:	e1bffc17 	ldw	r6,-16(fp)
  8259e8:	e1fffd17 	ldw	r7,-12(fp)
  8259ec:	0807b340 	call	807b34 <sprintf>
  8259f0:	00000706 	br	825a10 <print_uptime+0x110>
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
  8259f4:	010021b4 	movhi	r4,134
  8259f8:	21363504 	addi	r4,r4,-10028
  8259fc:	01402174 	movhi	r5,133
  825a00:	2974e904 	addi	r5,r5,-11356
  825a04:	e1bffd17 	ldw	r6,-12(fp)
  825a08:	e1fffe17 	ldw	r7,-8(fp)
  825a0c:	0807b340 	call	807b34 <sprintf>
   return tistring;
  825a10:	008021b4 	movhi	r2,134
  825a14:	10b63504 	addi	r2,r2,-10028
}
  825a18:	e037883a 	mov	sp,fp
  825a1c:	dfc00117 	ldw	ra,4(sp)
  825a20:	df000017 	ldw	fp,0(sp)
  825a24:	dec00204 	addi	sp,sp,8
  825a28:	f800283a 	ret

00825a2c <panic>:
/* allow to be ifdeffed out on systems which already have a panic */
#ifndef PANIC_ALREADY

void
panic(char * msg)
{
  825a2c:	defffd04 	addi	sp,sp,-12
  825a30:	dfc00215 	stw	ra,8(sp)
  825a34:	df000115 	stw	fp,4(sp)
  825a38:	df000104 	addi	fp,sp,4
  825a3c:	e13fff15 	stw	r4,-4(fp)
   dprintf("panic: %s\n", msg);
  825a40:	01002174 	movhi	r4,133
  825a44:	2134ee04 	addi	r4,r4,-11336
  825a48:	e17fff17 	ldw	r5,-4(fp)
  825a4c:	08076480 	call	807648 <printf>
   dtrap();                   /* try to hook debugger */
  825a50:	082a7c80 	call	82a7c8 <dtrap>
   netexit(1);                /* try to clean up */
  825a54:	01000044 	movi	r4,1
  825a58:	084246c0 	call	84246c <netexit>
}
  825a5c:	e037883a 	mov	sp,fp
  825a60:	dfc00117 	ldw	ra,4(sp)
  825a64:	df000017 	ldw	fp,0(sp)
  825a68:	dec00204 	addi	sp,sp,8
  825a6c:	f800283a 	ret

00825a70 <print_eth>:

char     eth_prt_buf[18];  /* buffer for return */

char *   
print_eth(char * addr, char spacer)
{
  825a70:	defffb04 	addi	sp,sp,-20
  825a74:	df000415 	stw	fp,16(sp)
  825a78:	df000404 	addi	fp,sp,16
  825a7c:	e13ffe15 	stw	r4,-8(fp)
  825a80:	e17fff05 	stb	r5,-4(fp)
   int   i;
   char *   out   =  eth_prt_buf;
  825a84:	00803934 	movhi	r2,228
  825a88:	10a7b904 	addi	r2,r2,-24860
  825a8c:	e0bffc15 	stw	r2,-16(fp)

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
  825a90:	e03ffd15 	stw	zero,-12(fp)
  825a94:	00004406 	br	825ba8 <print_eth+0x138>
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
  825a98:	e0bffe17 	ldw	r2,-8(fp)
  825a9c:	10800003 	ldbu	r2,0(r2)
  825aa0:	10803fcc 	andi	r2,r2,255
  825aa4:	1080201c 	xori	r2,r2,128
  825aa8:	10bfe004 	addi	r2,r2,-128
  825aac:	1005d13a 	srai	r2,r2,4
  825ab0:	108003cc 	andi	r2,r2,15
  825ab4:	10800c04 	addi	r2,r2,48
  825ab8:	1007883a 	mov	r3,r2
  825abc:	e0bffc17 	ldw	r2,-16(fp)
  825ac0:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
  825ac4:	e0bffc17 	ldw	r2,-16(fp)
  825ac8:	10800003 	ldbu	r2,0(r2)
  825acc:	10803fcc 	andi	r2,r2,255
  825ad0:	1080201c 	xori	r2,r2,128
  825ad4:	10bfe004 	addi	r2,r2,-128
  825ad8:	10800e90 	cmplti	r2,r2,58
  825adc:	1000061e 	bne	r2,zero,825af8 <print_eth+0x88>
         (*out) += 7;
  825ae0:	e0bffc17 	ldw	r2,-16(fp)
  825ae4:	10800003 	ldbu	r2,0(r2)
  825ae8:	108001c4 	addi	r2,r2,7
  825aec:	1007883a 	mov	r3,r2
  825af0:	e0bffc17 	ldw	r2,-16(fp)
  825af4:	10c00005 	stb	r3,0(r2)
      out++;
  825af8:	e0bffc17 	ldw	r2,-16(fp)
  825afc:	10800044 	addi	r2,r2,1
  825b00:	e0bffc15 	stw	r2,-16(fp)

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
  825b04:	e0bffe17 	ldw	r2,-8(fp)
  825b08:	10800003 	ldbu	r2,0(r2)
  825b0c:	108003cc 	andi	r2,r2,15
  825b10:	10800c04 	addi	r2,r2,48
  825b14:	1007883a 	mov	r3,r2
  825b18:	e0bffc17 	ldw	r2,-16(fp)
  825b1c:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
  825b20:	e0bffc17 	ldw	r2,-16(fp)
  825b24:	10800003 	ldbu	r2,0(r2)
  825b28:	10803fcc 	andi	r2,r2,255
  825b2c:	1080201c 	xori	r2,r2,128
  825b30:	10bfe004 	addi	r2,r2,-128
  825b34:	10800e90 	cmplti	r2,r2,58
  825b38:	1000061e 	bne	r2,zero,825b54 <print_eth+0xe4>
         (*out) += 7;   /* eg 0x3a -> 0x41 ('A') */
  825b3c:	e0bffc17 	ldw	r2,-16(fp)
  825b40:	10800003 	ldbu	r2,0(r2)
  825b44:	108001c4 	addi	r2,r2,7
  825b48:	1007883a 	mov	r3,r2
  825b4c:	e0bffc17 	ldw	r2,-16(fp)
  825b50:	10c00005 	stb	r3,0(r2)
      out++;
  825b54:	e0bffc17 	ldw	r2,-16(fp)
  825b58:	10800044 	addi	r2,r2,1
  825b5c:	e0bffc15 	stw	r2,-16(fp)

      /* optional spacer character */
      if (spacer && i < 5)
  825b60:	e0bfff07 	ldb	r2,-4(fp)
  825b64:	1005003a 	cmpeq	r2,r2,zero
  825b68:	1000091e 	bne	r2,zero,825b90 <print_eth+0x120>
  825b6c:	e0bffd17 	ldw	r2,-12(fp)
  825b70:	10800148 	cmpgei	r2,r2,5
  825b74:	1000061e 	bne	r2,zero,825b90 <print_eth+0x120>
         *out++ = spacer;
  825b78:	e0fffc17 	ldw	r3,-16(fp)
  825b7c:	e0bfff03 	ldbu	r2,-4(fp)
  825b80:	18800005 	stb	r2,0(r3)
  825b84:	e0bffc17 	ldw	r2,-16(fp)
  825b88:	10800044 	addi	r2,r2,1
  825b8c:	e0bffc15 	stw	r2,-16(fp)
      addr++;
  825b90:	e0bffe17 	ldw	r2,-8(fp)
  825b94:	10800044 	addi	r2,r2,1
  825b98:	e0bffe15 	stw	r2,-8(fp)
{
   int   i;
   char *   out   =  eth_prt_buf;

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
  825b9c:	e0bffd17 	ldw	r2,-12(fp)
  825ba0:	10800044 	addi	r2,r2,1
  825ba4:	e0bffd15 	stw	r2,-12(fp)
  825ba8:	e0bffd17 	ldw	r2,-12(fp)
  825bac:	10800190 	cmplti	r2,r2,6
  825bb0:	103fb91e 	bne	r2,zero,825a98 <print_eth+0x28>
      /* optional spacer character */
      if (spacer && i < 5)
         *out++ = spacer;
      addr++;
   }
   *out = 0;
  825bb4:	e0bffc17 	ldw	r2,-16(fp)
  825bb8:	10000005 	stb	zero,0(r2)
   return eth_prt_buf;
  825bbc:	00803934 	movhi	r2,228
  825bc0:	10a7b904 	addi	r2,r2,-24860
}
  825bc4:	e037883a 	mov	sp,fp
  825bc8:	df000017 	ldw	fp,0(sp)
  825bcc:	dec00104 	addi	sp,sp,4
  825bd0:	f800283a 	ret

00825bd4 <uslash>:
 * RETURNS:  pointer to formatted text
 */

char *   
uslash(char * path)
{
  825bd4:	defffd04 	addi	sp,sp,-12
  825bd8:	df000215 	stw	fp,8(sp)
  825bdc:	df000204 	addi	fp,sp,8
  825be0:	e13fff15 	stw	r4,-4(fp)
   char *   cp;

   for (cp = path; *cp; cp++)
  825be4:	e0bfff17 	ldw	r2,-4(fp)
  825be8:	e0bffe15 	stw	r2,-8(fp)
  825bec:	00000d06 	br	825c24 <uslash+0x50>
      if (*cp == '\\')
  825bf0:	e0bffe17 	ldw	r2,-8(fp)
  825bf4:	10800003 	ldbu	r2,0(r2)
  825bf8:	10803fcc 	andi	r2,r2,255
  825bfc:	1080201c 	xori	r2,r2,128
  825c00:	10bfe004 	addi	r2,r2,-128
  825c04:	10801718 	cmpnei	r2,r2,92
  825c08:	1000031e 	bne	r2,zero,825c18 <uslash+0x44>
      *cp = '/';
  825c0c:	e0fffe17 	ldw	r3,-8(fp)
  825c10:	00800bc4 	movi	r2,47
  825c14:	18800005 	stb	r2,0(r3)
char *   
uslash(char * path)
{
   char *   cp;

   for (cp = path; *cp; cp++)
  825c18:	e0bffe17 	ldw	r2,-8(fp)
  825c1c:	10800044 	addi	r2,r2,1
  825c20:	e0bffe15 	stw	r2,-8(fp)
  825c24:	e0bffe17 	ldw	r2,-8(fp)
  825c28:	10800003 	ldbu	r2,0(r2)
  825c2c:	10803fcc 	andi	r2,r2,255
  825c30:	1080201c 	xori	r2,r2,128
  825c34:	10bfe004 	addi	r2,r2,-128
  825c38:	1004c03a 	cmpne	r2,r2,zero
  825c3c:	103fec1e 	bne	r2,zero,825bf0 <uslash+0x1c>
      if (*cp == '\\')
      *cp = '/';
   return path;
  825c40:	e0bfff17 	ldw	r2,-4(fp)
}
  825c44:	e037883a 	mov	sp,fp
  825c48:	df000017 	ldw	fp,0(sp)
  825c4c:	dec00104 	addi	sp,sp,4
  825c50:	f800283a 	ret

00825c54 <ns_printf>:
 */
#ifndef ns_printf

int 
ns_printf(void * vio, char * format, ...)
{
  825c54:	defff204 	addi	sp,sp,-56
  825c58:	dfc00b15 	stw	ra,44(sp)
  825c5c:	df000a15 	stw	fp,40(sp)
  825c60:	dc400915 	stw	r17,36(sp)
  825c64:	dc000815 	stw	r16,32(sp)
  825c68:	df000804 	addi	fp,sp,32
  825c6c:	e13ffd15 	stw	r4,-12(fp)
  825c70:	e1800415 	stw	r6,16(fp)
  825c74:	e1c00515 	stw	r7,20(fp)
  825c78:	e17ffe15 	stw	r5,-8(fp)
   char *   outbuf=NULL;
  825c7c:	e03ffb15 	stw	zero,-20(fp)
   int   ret_value   ;
   int   buf_size =  MAXIOSIZE   ;
  825c80:	00802704 	movi	r2,156
  825c84:	e0bff915 	stw	r2,-28(fp)
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
  825c88:	e0bffd17 	ldw	r2,-12(fp)
  825c8c:	e0bff815 	stw	r2,-32(fp)
   int * next_arg=(int *)  &format;
   next_arg +=  sizeof(char *)/sizeof(int) ;
#endif   /* NATIVE_PRINTF || PRINTF_STRING */

   /* a NULL pio means just dump the output to stdout */
   if (pio == NULL)
  825c90:	e0bff817 	ldw	r2,-32(fp)
  825c94:	1004c03a 	cmpne	r2,r2,zero
  825c98:	1000091e 	bne	r2,zero,825cc0 <ns_printf+0x6c>
   {
#ifdef NATIVE_PRINTF
      /* use the target system's ANSI routines */
      va_start(argList,format);
  825c9c:	e0800404 	addi	r2,fp,16
  825ca0:	e0bffc15 	stw	r2,-16(fp)
      ret_value = vprintf(format,argList);
  825ca4:	e17ffc17 	ldw	r5,-16(fp)
  825ca8:	e13ffe17 	ldw	r4,-8(fp)
  825cac:	084a5800 	call	84a580 <vprintf>
  825cb0:	e0bffa15 	stw	r2,-24(fp)
      va_end(argList);
      return ret_value;
  825cb4:	e0bffa17 	ldw	r2,-24(fp)
  825cb8:	e0bfff15 	stw	r2,-4(fp)
  825cbc:	00003e06 	br	825db8 <ns_printf+0x164>
      return strlen(format);
#endif   /* NATIVE_PRINTF */
   }

   /* Check if the output function is set */
   if (pio->out == NULL)
  825cc0:	e0bff817 	ldw	r2,-32(fp)
  825cc4:	10800117 	ldw	r2,4(r2)
  825cc8:	1004c03a 	cmpne	r2,r2,zero
  825ccc:	1000031e 	bne	r2,zero,825cdc <ns_printf+0x88>
   {
      /* Programming mistake. Output function not set. */
      return -1;
  825cd0:	00bfffc4 	movi	r2,-1
  825cd4:	e0bfff15 	stw	r2,-4(fp)
  825cd8:	00003706 	br	825db8 <ns_printf+0x164>

   /* Allocate memory for the output string 
    * If the format string is greater than MAXIOSIZE, then
    * we surely need to allocate a bigger block
    */
   ret_value = strlen(format); 
  825cdc:	e13ffe17 	ldw	r4,-8(fp)
  825ce0:	08088440 	call	808844 <strlen>
  825ce4:	e0bffa15 	stw	r2,-24(fp)
   if (ret_value >= MAXIOSIZE)
  825ce8:	e0bffa17 	ldw	r2,-24(fp)
  825cec:	10802710 	cmplti	r2,r2,156
  825cf0:	1000041e 	bne	r2,zero,825d04 <ns_printf+0xb0>
   {
      buf_size += ret_value ;
  825cf4:	e0bff917 	ldw	r2,-28(fp)
  825cf8:	e0fffa17 	ldw	r3,-24(fp)
  825cfc:	10c5883a 	add	r2,r2,r3
  825d00:	e0bff915 	stw	r2,-28(fp)
   }

   outbuf=(char *)npalloc(buf_size); 
  825d04:	e13ff917 	ldw	r4,-28(fp)
  825d08:	082b20c0 	call	82b20c <npalloc>
  825d0c:	e0bffb15 	stw	r2,-20(fp)

   if (outbuf == NULL)
  825d10:	e0bffb17 	ldw	r2,-20(fp)
  825d14:	1004c03a 	cmpne	r2,r2,zero
  825d18:	1000031e 	bne	r2,zero,825d28 <ns_printf+0xd4>
   {
      return -2;
  825d1c:	00bfff84 	movi	r2,-2
  825d20:	e0bfff15 	stw	r2,-4(fp)
  825d24:	00002406 	br	825db8 <ns_printf+0x164>

   /* Now populate the output string */

#ifdef NATIVE_PRINTF
   /* use the target system's ANSI routines */
   va_start(argList,format);
  825d28:	e0800404 	addi	r2,fp,16
  825d2c:	e0bffc15 	stw	r2,-16(fp)
   ret_value = vsprintf(outbuf,format,argList);
  825d30:	e1bffc17 	ldw	r6,-16(fp)
  825d34:	e13ffb17 	ldw	r4,-20(fp)
  825d38:	e17ffe17 	ldw	r5,-8(fp)
  825d3c:	084a5f00 	call	84a5f0 <vsprintf>
  825d40:	e0bffa15 	stw	r2,-24(fp)
#endif   /* PRINTF_STDARG */
#endif   /* NATIVE_PRINTF */

#ifdef NATIVE_PRINTF
   /* Check if we have overwritten the output buffer */
   if ((int)strlen(outbuf) > buf_size)
  825d44:	e13ffb17 	ldw	r4,-20(fp)
  825d48:	08088440 	call	808844 <strlen>
  825d4c:	1007883a 	mov	r3,r2
  825d50:	e0bff917 	ldw	r2,-28(fp)
  825d54:	10c0080e 	bge	r2,r3,825d78 <ns_printf+0x124>
       */
      /* Yes , we have overwritten. Truncate the output string.
       * Some memory in the heap has been corrupted, but it is too
       * late to rectify.
       */
      panic("ns_printf:Buffer overflow");
  825d58:	01002174 	movhi	r4,133
  825d5c:	2134f104 	addi	r4,r4,-11324
  825d60:	0825a2c0 	call	825a2c <panic>
      outbuf[buf_size-1]=0;   /* Null terminate the string */
  825d64:	e0fff917 	ldw	r3,-28(fp)
  825d68:	e0bffb17 	ldw	r2,-20(fp)
  825d6c:	1885883a 	add	r2,r3,r2
  825d70:	10bfffc4 	addi	r2,r2,-1
  825d74:	10000005 	stb	zero,0(r2)
   }
#endif

   ret_value =(pio->out)(pio->id,outbuf,strlen(outbuf)) ;
  825d78:	e0bff817 	ldw	r2,-32(fp)
  825d7c:	14400117 	ldw	r17,4(r2)
  825d80:	e0bff817 	ldw	r2,-32(fp)
  825d84:	14000217 	ldw	r16,8(r2)
  825d88:	e13ffb17 	ldw	r4,-20(fp)
  825d8c:	08088440 	call	808844 <strlen>
  825d90:	100d883a 	mov	r6,r2
  825d94:	8009883a 	mov	r4,r16
  825d98:	e17ffb17 	ldw	r5,-20(fp)
  825d9c:	883ee83a 	callr	r17
  825da0:	e0bffa15 	stw	r2,-24(fp)

   /* Free memory for the output string */
   npfree(outbuf); 
  825da4:	e13ffb17 	ldw	r4,-20(fp)
  825da8:	082b3000 	call	82b300 <npfree>

   /* since ns_printf() can get called repeatedly down in the bowels 
    * of a single command interpretting function, spin tk_yield() so 
    * that some packets get a chance to get received 
    */
   tk_yield();
  825dac:	08266b40 	call	8266b4 <tk_yield>

   return ret_value ;
  825db0:	e0bffa17 	ldw	r2,-24(fp)
  825db4:	e0bfff15 	stw	r2,-4(fp)
  825db8:	e0bfff17 	ldw	r2,-4(fp)
}
  825dbc:	e037883a 	mov	sp,fp
  825dc0:	dfc00317 	ldw	ra,12(sp)
  825dc4:	df000217 	ldw	fp,8(sp)
  825dc8:	dc400117 	ldw	r17,4(sp)
  825dcc:	dc000017 	ldw	r16,0(sp)
  825dd0:	dec00604 	addi	sp,sp,24
  825dd4:	f800283a 	ret

00825dd8 <std_out>:
 *
 * RETURNS: Number of bytes send to standard output. 
 */

int std_out(long s, char * buf, int len)
{
  825dd8:	defffb04 	addi	sp,sp,-20
  825ddc:	dfc00415 	stw	ra,16(sp)
  825de0:	df000315 	stw	fp,12(sp)
  825de4:	df000304 	addi	fp,sp,12
  825de8:	e13ffd15 	stw	r4,-12(fp)
  825dec:	e17ffe15 	stw	r5,-8(fp)
  825df0:	e1bfff15 	stw	r6,-4(fp)
   /* puts(buf); - This does newline expansion return 
    * write(0,buf,len); - This doesn't printf(buf); - This has 
    * problems when printf format strings (eg %s) is part of data. 
    */
   printf("%s",buf);
  825df4:	01002174 	movhi	r4,133
  825df8:	2134f804 	addi	r4,r4,-11296
  825dfc:	e17ffe17 	ldw	r5,-8(fp)
  825e00:	08076480 	call	807648 <printf>
   USE_ARG(s);
   return len;
  825e04:	e0bfff17 	ldw	r2,-4(fp)
}
  825e08:	e037883a 	mov	sp,fp
  825e0c:	dfc00117 	ldw	ra,4(sp)
  825e10:	df000017 	ldw	fp,0(sp)
  825e14:	dec00204 	addi	sp,sp,8
  825e18:	f800283a 	ret

00825e1c <con_page>:
 * RETURNS: 1 if we got a break, 0 to keep printing
 */

int
con_page(void * vio, int lines)
{
  825e1c:	defff904 	addi	sp,sp,-28
  825e20:	dfc00615 	stw	ra,24(sp)
  825e24:	df000515 	stw	fp,20(sp)
  825e28:	df000504 	addi	fp,sp,20
  825e2c:	e13ffd15 	stw	r4,-12(fp)
  825e30:	e17ffe15 	stw	r5,-8(fp)
   int   ch;
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
  825e34:	e0bffd17 	ldw	r2,-12(fp)
  825e38:	e0bffb15 	stw	r2,-20(fp)

   if (lines % 20 == 0)   /* Time to get user input */
  825e3c:	e13ffe17 	ldw	r4,-8(fp)
  825e40:	01400504 	movi	r5,20
  825e44:	08053580 	call	805358 <__modsi3>
  825e48:	1004c03a 	cmpne	r2,r2,zero
  825e4c:	1000281e 	bne	r2,zero,825ef0 <con_page+0xd4>
   {
      if (pio && pio->getch)   /*if i/p func is supplied*/
  825e50:	e0bffb17 	ldw	r2,-20(fp)
  825e54:	1005003a 	cmpeq	r2,r2,zero
  825e58:	1000251e 	bne	r2,zero,825ef0 <con_page+0xd4>
  825e5c:	e0bffb17 	ldw	r2,-20(fp)
  825e60:	10800317 	ldw	r2,12(r2)
  825e64:	1005003a 	cmpeq	r2,r2,zero
  825e68:	1000211e 	bne	r2,zero,825ef0 <con_page+0xd4>
      {
         ns_printf(pio,"....press any key for more (ESC to break)....");
  825e6c:	e13ffb17 	ldw	r4,-20(fp)
  825e70:	01402174 	movhi	r5,133
  825e74:	2974f904 	addi	r5,r5,-11292
  825e78:	0825c540 	call	825c54 <ns_printf>

         do 
         {
            ch = (pio->getch)(pio->id);
  825e7c:	e0bffb17 	ldw	r2,-20(fp)
  825e80:	10c00317 	ldw	r3,12(r2)
  825e84:	e0bffb17 	ldw	r2,-20(fp)
  825e88:	11000217 	ldw	r4,8(r2)
  825e8c:	183ee83a 	callr	r3
  825e90:	e0bffc15 	stw	r2,-16(fp)
            if (ch == 0)
  825e94:	e0bffc17 	ldw	r2,-16(fp)
  825e98:	1004c03a 	cmpne	r2,r2,zero
  825e9c:	1000011e 	bne	r2,zero,825ea4 <con_page+0x88>
               tk_yield();    /* Give timeslice to other processes */
  825ea0:	08266b40 	call	8266b4 <tk_yield>
         } while (ch == 0) ;
  825ea4:	e0bffc17 	ldw	r2,-16(fp)
  825ea8:	1005003a 	cmpeq	r2,r2,zero
  825eac:	103ff31e 	bne	r2,zero,825e7c <con_page+0x60>

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
  825eb0:	e0bffc17 	ldw	r2,-16(fp)
  825eb4:	10bfffd8 	cmpnei	r2,r2,-1
  825eb8:	1000031e 	bne	r2,zero,825ec8 <con_page+0xac>
            return 1 ;
  825ebc:	00800044 	movi	r2,1
  825ec0:	e0bfff15 	stw	r2,-4(fp)
  825ec4:	00000b06 	br	825ef4 <con_page+0xd8>

         ns_printf(pio,"\n");
  825ec8:	e13ffb17 	ldw	r4,-20(fp)
  825ecc:	01402174 	movhi	r5,133
  825ed0:	2974da04 	addi	r5,r5,-11416
  825ed4:	0825c540 	call	825c54 <ns_printf>
         if (ch == 27)   /* ESC key pressed */
  825ed8:	e0bffc17 	ldw	r2,-16(fp)
  825edc:	108006d8 	cmpnei	r2,r2,27
  825ee0:	1000031e 	bne	r2,zero,825ef0 <con_page+0xd4>
            return 1 ;
  825ee4:	00800044 	movi	r2,1
  825ee8:	e0bfff15 	stw	r2,-4(fp)
  825eec:	00000106 	br	825ef4 <con_page+0xd8>
      }
   }
   return  0;
  825ef0:	e03fff15 	stw	zero,-4(fp)
  825ef4:	e0bfff17 	ldw	r2,-4(fp)
}
  825ef8:	e037883a 	mov	sp,fp
  825efc:	dfc00117 	ldw	ra,4(sp)
  825f00:	df000017 	ldw	fp,0(sp)
  825f04:	dec00204 	addi	sp,sp,8
  825f08:	f800283a 	ret

00825f0c <parse_args>:

char **parse_args(char *buf, int argc, int *pargc_index)
{
  825f0c:	defff604 	addi	sp,sp,-40
  825f10:	dfc00915 	stw	ra,36(sp)
  825f14:	df000815 	stw	fp,32(sp)
  825f18:	df000804 	addi	fp,sp,32
  825f1c:	e13ffc15 	stw	r4,-16(fp)
  825f20:	e17ffd15 	stw	r5,-12(fp)
  825f24:	e1bffe15 	stw	r6,-8(fp)
   /* This routine assumes buf is a null terminated string */
   int i;
   int len;
   char *bp = buf;
  825f28:	e0bffc17 	ldw	r2,-16(fp)
  825f2c:	e0bff915 	stw	r2,-28(fp)
   char **pargv = NULL;
  825f30:	e03ff815 	stw	zero,-32(fp)
   *pargc_index = 0;
  825f34:	e0bffe17 	ldw	r2,-8(fp)
  825f38:	10000015 	stw	zero,0(r2)
   if (buf == NULL)
  825f3c:	e0bffc17 	ldw	r2,-16(fp)
  825f40:	1004c03a 	cmpne	r2,r2,zero
  825f44:	1000021e 	bne	r2,zero,825f50 <parse_args+0x44>
   {
      return (NULL);
  825f48:	e03fff15 	stw	zero,-4(fp)
  825f4c:	00007406 	br	826120 <parse_args+0x214>
   }
   len = strlen(buf);
  825f50:	e13ffc17 	ldw	r4,-16(fp)
  825f54:	08088440 	call	808844 <strlen>
  825f58:	e0bffa15 	stw	r2,-24(fp)
   if (len <= 0)
  825f5c:	e0bffa17 	ldw	r2,-24(fp)
  825f60:	10800048 	cmpgei	r2,r2,1
  825f64:	1000021e 	bne	r2,zero,825f70 <parse_args+0x64>
   {
      return (NULL);
  825f68:	e03fff15 	stw	zero,-4(fp)
  825f6c:	00006c06 	br	826120 <parse_args+0x214>
   }
   pargv = (char **) npalloc(argc * sizeof(char *));
  825f70:	e0bffd17 	ldw	r2,-12(fp)
  825f74:	1085883a 	add	r2,r2,r2
  825f78:	1085883a 	add	r2,r2,r2
  825f7c:	1009883a 	mov	r4,r2
  825f80:	082b20c0 	call	82b20c <npalloc>
  825f84:	e0bff815 	stw	r2,-32(fp)
   if (pargv == NULL)
  825f88:	e0bff817 	ldw	r2,-32(fp)
  825f8c:	1004c03a 	cmpne	r2,r2,zero
  825f90:	1000051e 	bne	r2,zero,825fa8 <parse_args+0x9c>
   {
      return (NULL);
  825f94:	e03fff15 	stw	zero,-4(fp)
  825f98:	00006106 	br	826120 <parse_args+0x214>
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
  825f9c:	e0bff917 	ldw	r2,-28(fp)
  825fa0:	10800044 	addi	r2,r2,1
  825fa4:	e0bff915 	stw	r2,-28(fp)
   if (pargv == NULL)
   {
      return (NULL);
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
  825fa8:	e0bff917 	ldw	r2,-28(fp)
  825fac:	10800003 	ldbu	r2,0(r2)
  825fb0:	10803fcc 	andi	r2,r2,255
  825fb4:	1080201c 	xori	r2,r2,128
  825fb8:	10bfe004 	addi	r2,r2,-128
  825fbc:	10800820 	cmpeqi	r2,r2,32
  825fc0:	103ff61e 	bne	r2,zero,825f9c <parse_args+0x90>
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
  825fc4:	00003206 	br	826090 <parse_args+0x184>
   {
      pargv[(*pargc_index)] = bp;
  825fc8:	e0bffe17 	ldw	r2,-8(fp)
  825fcc:	10800017 	ldw	r2,0(r2)
  825fd0:	1085883a 	add	r2,r2,r2
  825fd4:	1085883a 	add	r2,r2,r2
  825fd8:	1007883a 	mov	r3,r2
  825fdc:	e0bff817 	ldw	r2,-32(fp)
  825fe0:	1887883a 	add	r3,r3,r2
  825fe4:	e0bff917 	ldw	r2,-28(fp)
  825fe8:	18800015 	stw	r2,0(r3)
      (*pargc_index)++;
  825fec:	e0bffe17 	ldw	r2,-8(fp)
  825ff0:	10800017 	ldw	r2,0(r2)
  825ff4:	10c00044 	addi	r3,r2,1
  825ff8:	e0bffe17 	ldw	r2,-8(fp)
  825ffc:	10c00015 	stw	r3,0(r2)
      while (*bp != ' ' && *bp != '\0')
  826000:	00000306 	br	826010 <parse_args+0x104>
      {
         bp++; 
  826004:	e0bff917 	ldw	r2,-28(fp)
  826008:	10800044 	addi	r2,r2,1
  82600c:	e0bff915 	stw	r2,-28(fp)
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
   {
      pargv[(*pargc_index)] = bp;
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
  826010:	e0bff917 	ldw	r2,-28(fp)
  826014:	10800003 	ldbu	r2,0(r2)
  826018:	10803fcc 	andi	r2,r2,255
  82601c:	1080201c 	xori	r2,r2,128
  826020:	10bfe004 	addi	r2,r2,-128
  826024:	10800820 	cmpeqi	r2,r2,32
  826028:	10000b1e 	bne	r2,zero,826058 <parse_args+0x14c>
  82602c:	e0bff917 	ldw	r2,-28(fp)
  826030:	10800003 	ldbu	r2,0(r2)
  826034:	10803fcc 	andi	r2,r2,255
  826038:	1080201c 	xori	r2,r2,128
  82603c:	10bfe004 	addi	r2,r2,-128
  826040:	1004c03a 	cmpne	r2,r2,zero
  826044:	103fef1e 	bne	r2,zero,826004 <parse_args+0xf8>
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
  826048:	00000306 	br	826058 <parse_args+0x14c>
      {
         bp++; 
  82604c:	e0bff917 	ldw	r2,-28(fp)
  826050:	10800044 	addi	r2,r2,1
  826054:	e0bff915 	stw	r2,-28(fp)
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
  826058:	e0bff917 	ldw	r2,-28(fp)
  82605c:	10800003 	ldbu	r2,0(r2)
  826060:	10803fcc 	andi	r2,r2,255
  826064:	1080201c 	xori	r2,r2,128
  826068:	10bfe004 	addi	r2,r2,-128
  82606c:	10800818 	cmpnei	r2,r2,32
  826070:	1000071e 	bne	r2,zero,826090 <parse_args+0x184>
  826074:	e0bff917 	ldw	r2,-28(fp)
  826078:	10800003 	ldbu	r2,0(r2)
  82607c:	10803fcc 	andi	r2,r2,255
  826080:	1080201c 	xori	r2,r2,128
  826084:	10bfe004 	addi	r2,r2,-128
  826088:	1004c03a 	cmpne	r2,r2,zero
  82608c:	103fef1e 	bne	r2,zero,82604c <parse_args+0x140>
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
  826090:	e0bff917 	ldw	r2,-28(fp)
  826094:	10800003 	ldbu	r2,0(r2)
  826098:	10803fcc 	andi	r2,r2,255
  82609c:	1080201c 	xori	r2,r2,128
  8260a0:	10bfe004 	addi	r2,r2,-128
  8260a4:	1005003a 	cmpeq	r2,r2,zero
  8260a8:	1000041e 	bne	r2,zero,8260bc <parse_args+0x1b0>
  8260ac:	e0bffe17 	ldw	r2,-8(fp)
  8260b0:	10c00017 	ldw	r3,0(r2)
  8260b4:	e0bffd17 	ldw	r2,-12(fp)
  8260b8:	18bfc316 	blt	r3,r2,825fc8 <parse_args+0xbc>
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
  8260bc:	e03ffb15 	stw	zero,-20(fp)
  8260c0:	00001206 	br	82610c <parse_args+0x200>
   {
      if (buf[i] == ' ')
  8260c4:	e0bffb17 	ldw	r2,-20(fp)
  8260c8:	1007883a 	mov	r3,r2
  8260cc:	e0bffc17 	ldw	r2,-16(fp)
  8260d0:	1885883a 	add	r2,r3,r2
  8260d4:	10800003 	ldbu	r2,0(r2)
  8260d8:	10803fcc 	andi	r2,r2,255
  8260dc:	1080201c 	xori	r2,r2,128
  8260e0:	10bfe004 	addi	r2,r2,-128
  8260e4:	10800818 	cmpnei	r2,r2,32
  8260e8:	1000051e 	bne	r2,zero,826100 <parse_args+0x1f4>
         buf[i] = '\0';
  8260ec:	e0bffb17 	ldw	r2,-20(fp)
  8260f0:	1007883a 	mov	r3,r2
  8260f4:	e0bffc17 	ldw	r2,-16(fp)
  8260f8:	1885883a 	add	r2,r3,r2
  8260fc:	10000005 	stb	zero,0(r2)
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
  826100:	e0bffb17 	ldw	r2,-20(fp)
  826104:	10800044 	addi	r2,r2,1
  826108:	e0bffb15 	stw	r2,-20(fp)
  82610c:	e0fffb17 	ldw	r3,-20(fp)
  826110:	e0bffa17 	ldw	r2,-24(fp)
  826114:	18bfeb16 	blt	r3,r2,8260c4 <parse_args+0x1b8>
   {
      printf("pargv[%d] = %s\n", i, pargv[i]);
   }
#endif

   return (pargv);
  826118:	e0bff817 	ldw	r2,-32(fp)
  82611c:	e0bfff15 	stw	r2,-4(fp)
  826120:	e0bfff17 	ldw	r2,-4(fp)
}
  826124:	e037883a 	mov	sp,fp
  826128:	dfc00117 	ldw	ra,4(sp)
  82612c:	df000017 	ldw	fp,0(sp)
  826130:	dec00204 	addi	sp,sp,8
  826134:	f800283a 	ret

00826138 <netmain>:
 * RETURNS: 
 */

int
netmain(void)
{
  826138:	defffb04 	addi	sp,sp,-20
  82613c:	dfc00415 	stw	ra,16(sp)
  826140:	df000315 	stw	fp,12(sp)
  826144:	df000304 	addi	fp,sp,12
   int   i;
   int   e;

   iniche_net_ready = FALSE;
  826148:	d0209415 	stw	zero,-32176(gp)

   e = prep_modules();
  82614c:	083b5080 	call	83b508 <prep_modules>
  826150:	e0bffd15 	stw	r2,-12(fp)

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
  826154:	e03ffe15 	stw	zero,-8(fp)
  826158:	00001c06 	br	8261cc <netmain+0x94>
   {
      e = TK_NEWTASK(&nettasks[i]);
  82615c:	e0bffe17 	ldw	r2,-8(fp)
  826160:	10800624 	muli	r2,r2,24
  826164:	1007883a 	mov	r3,r2
  826168:	00802174 	movhi	r2,133
  82616c:	10818404 	addi	r2,r2,1552
  826170:	1889883a 	add	r4,r3,r2
  826174:	082abb00 	call	82abb0 <TK_NEWTASK>
  826178:	e0bffd15 	stw	r2,-12(fp)
      if (e != 0)
  82617c:	e0bffd17 	ldw	r2,-12(fp)
  826180:	1005003a 	cmpeq	r2,r2,zero
  826184:	10000e1e 	bne	r2,zero,8261c0 <netmain+0x88>
      {
         dprintf("task create error\n");
  826188:	01002174 	movhi	r4,133
  82618c:	21350b04 	addi	r4,r4,-11220
  826190:	08077600 	call	807760 <puts>
         panic((char *)&nettasks[i].name);
  826194:	e0bffe17 	ldw	r2,-8(fp)
  826198:	10800624 	muli	r2,r2,24
  82619c:	10c00104 	addi	r3,r2,4
  8261a0:	00802174 	movhi	r2,133
  8261a4:	10818404 	addi	r2,r2,1552
  8261a8:	1885883a 	add	r2,r3,r2
  8261ac:	1009883a 	mov	r4,r2
  8261b0:	0825a2c0 	call	825a2c <panic>
         return -1;  /* compiler warnings */
  8261b4:	00bfffc4 	movi	r2,-1
  8261b8:	e0bfff15 	stw	r2,-4(fp)
  8261bc:	00001506 	br	826214 <netmain+0xdc>
   iniche_net_ready = FALSE;

   e = prep_modules();

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
  8261c0:	e0bffe17 	ldw	r2,-8(fp)
  8261c4:	10800044 	addi	r2,r2,1
  8261c8:	e0bffe15 	stw	r2,-8(fp)
  8261cc:	d0e03a17 	ldw	r3,-32536(gp)
  8261d0:	e0bffe17 	ldw	r2,-8(fp)
  8261d4:	10ffe116 	blt	r2,r3,82615c <netmain+0x24>
         panic((char *)&nettasks[i].name);
         return -1;  /* compiler warnings */
      }
   }
   
   e = create_apptasks();
  8261d8:	083b9e00 	call	83b9e0 <create_apptasks>
  8261dc:	e0bffd15 	stw	r2,-12(fp)
   if (e != 0) 
  8261e0:	e0bffd17 	ldw	r2,-12(fp)
  8261e4:	1005003a 	cmpeq	r2,r2,zero
  8261e8:	1000091e 	bne	r2,zero,826210 <netmain+0xd8>
   {
      dprintf("task create error\n");
  8261ec:	01002174 	movhi	r4,133
  8261f0:	21350b04 	addi	r4,r4,-11220
  8261f4:	08077600 	call	807760 <puts>
      panic("netmain");
  8261f8:	01002174 	movhi	r4,133
  8261fc:	21351004 	addi	r4,r4,-11200
  826200:	0825a2c0 	call	825a2c <panic>
      return -1;  /* compiler warnings */
  826204:	00bfffc4 	movi	r2,-1
  826208:	e0bfff15 	stw	r2,-4(fp)
  82620c:	00000106 	br	826214 <netmain+0xdc>
#ifdef MAIN_TASK_IS_NET
   tk_netmain(TK_NETMAINPARM);
   panic("net task return");
   return -1;
#else
   return 0;
  826210:	e03fff15 	stw	zero,-4(fp)
  826214:	e0bfff17 	ldw	r2,-4(fp)
#endif
#endif   /* NO_INET_STACK */
}
  826218:	e037883a 	mov	sp,fp
  82621c:	dfc00117 	ldw	ra,4(sp)
  826220:	df000017 	ldw	fp,0(sp)
  826224:	dec00204 	addi	sp,sp,8
  826228:	f800283a 	ret

0082622c <tk_netmain>:
 * RETURNS: n/a
 */

#ifndef NO_INET_STACK
TK_ENTRY(tk_netmain)
{
  82622c:	defffc04 	addi	sp,sp,-16
  826230:	dfc00315 	stw	ra,12(sp)
  826234:	df000215 	stw	fp,8(sp)
  826238:	df000204 	addi	fp,sp,8
  82623c:	e13fff15 	stw	r4,-4(fp)
   netmain_init(); /* initialize all modules */
  826240:	083b18c0 	call	83b18c <netmain_init>

   iniche_net_ready = TRUE;    /* let the other threads spin */
  826244:	00800044 	movi	r2,1
  826248:	d0a09415 	stw	r2,-32176(gp)
  82624c:	00000006 	br	826250 <tk_netmain+0x24>

   for (;;)
   {
      TK_NETRX_BLOCK();
  826250:	00802174 	movhi	r2,133
  826254:	10832904 	addi	r2,r2,3236
  826258:	11000017 	ldw	r4,0(r2)
  82625c:	0140fa04 	movi	r5,1000
  826260:	e1bffe04 	addi	r6,fp,-8
  826264:	081daec0 	call	81daec <OSSemPend>
  826268:	e0bffe03 	ldbu	r2,-8(fp)
  82626c:	10803fcc 	andi	r2,r2,255
  826270:	1005003a 	cmpeq	r2,r2,zero
  826274:	1000051e 	bne	r2,zero,82628c <tk_netmain+0x60>
  826278:	e0bffe03 	ldbu	r2,-8(fp)
  82627c:	10803fcc 	andi	r2,r2,255
  826280:	108002a0 	cmpeqi	r2,r2,10
  826284:	1000011e 	bne	r2,zero,82628c <tk_netmain+0x60>
  826288:	082a7c80 	call	82a7c8 <dtrap>
      netmain_wakes++;  /* count wakeups */
  82628c:	d0a09217 	ldw	r2,-32184(gp)
  826290:	10800044 	addi	r2,r2,1
  826294:	d0a09215 	stw	r2,-32184(gp)

      /* see if there's newly received network packets */
      if (rcvdq.q_len)
  826298:	00803934 	movhi	r2,228
  82629c:	10a6d704 	addi	r2,r2,-25764
  8262a0:	10800217 	ldw	r2,8(r2)
  8262a4:	1005003a 	cmpeq	r2,r2,zero
  8262a8:	103fe91e 	bne	r2,zero,826250 <tk_netmain+0x24>
         pktdemux();
  8262ac:	0822f2c0 	call	822f2c <pktdemux>
       * vital to a clean shutdown 
       */
#ifdef USE_LCD
      update_display();
#endif
   }
  8262b0:	003fe706 	br	826250 <tk_netmain+0x24>

008262b4 <tk_nettick>:
extern   int dhc_second(void);
#endif

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
  8262b4:	defffd04 	addi	sp,sp,-12
  8262b8:	dfc00215 	stw	ra,8(sp)
  8262bc:	df000115 	stw	fp,4(sp)
  8262c0:	df000104 	addi	fp,sp,4
  8262c4:	e13fff15 	stw	r4,-4(fp)
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
  8262c8:	00000306 	br	8262d8 <tk_nettick+0x24>
       * request and then we receive a NAK. At this point the DHCP
       * client is reset to INIT state and dhc_second() needs to be
       * run to restart it.
       */
#ifdef DHCP_CLIENT
      dhc_second();
  8262cc:	0828e200 	call	828e20 <dhc_second>
#endif
      TK_SLEEP(1);
  8262d0:	01000084 	movi	r4,2
  8262d4:	081fc800 	call	81fc80 <OSTimeDly>

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
  8262d8:	d0a09417 	ldw	r2,-32176(gp)
  8262dc:	1005003a 	cmpeq	r2,r2,zero
  8262e0:	103ffa1e 	bne	r2,zero,8262cc <tk_nettick+0x18>
      TK_SLEEP(1);
   }

   for (;;)
   {
      TK_SLEEP(SYS_SHORT_SLEEP);
  8262e4:	01000084 	movi	r4,2
  8262e8:	081fc800 	call	81fc80 <OSTimeDly>
      nettick_wakes++;  /* count wakeups */
  8262ec:	d0a09317 	ldw	r2,-32180(gp)
  8262f0:	10800044 	addi	r2,r2,1
  8262f4:	d0a09315 	stw	r2,-32180(gp)
      inet_timer();  /* let various timeouts occur */
  8262f8:	083b5600 	call	83b560 <inet_timer>
      /* do not kill timers on net_system_exit. They may be
       * vital to a clean shutdown 
       */
   }
  8262fc:	003ff906 	br	8262e4 <tk_nettick+0x30>

00826300 <TK_OSTimeDly>:
u_char   TK_OSTaskQuery(void);



void TK_OSTimeDly(void)
{
  826300:	defffe04 	addi	sp,sp,-8
  826304:	dfc00115 	stw	ra,4(sp)
  826308:	df000015 	stw	fp,0(sp)
  82630c:	d839883a 	mov	fp,sp
   OSTimeDly(2);
  826310:	01000084 	movi	r4,2
  826314:	081fc800 	call	81fc80 <OSTimeDly>
}
  826318:	e037883a 	mov	sp,fp
  82631c:	dfc00117 	ldw	ra,4(sp)
  826320:	df000017 	ldw	fp,0(sp)
  826324:	dec00204 	addi	sp,sp,8
  826328:	f800283a 	ret

0082632c <TK_OSTaskResume>:



void TK_OSTaskResume(u_char * Id)
{
  82632c:	defffc04 	addi	sp,sp,-16
  826330:	dfc00315 	stw	ra,12(sp)
  826334:	df000215 	stw	fp,8(sp)
  826338:	df000204 	addi	fp,sp,8
  82633c:	e13fff15 	stw	r4,-4(fp)
INT8U err;

   err = OSTaskResume(*Id);
  826340:	e0bfff17 	ldw	r2,-4(fp)
  826344:	10800003 	ldbu	r2,0(r2)
  826348:	11003fcc 	andi	r4,r2,255
  82634c:	081f4800 	call	81f480 <OSTaskResume>
  826350:	e0bffe05 	stb	r2,-8(fp)
   
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
  826354:	e0bffe03 	ldbu	r2,-8(fp)
  826358:	1005003a 	cmpeq	r2,r2,zero
  82635c:	10000a1e 	bne	r2,zero,826388 <TK_OSTaskResume+0x5c>
  826360:	e0bffe03 	ldbu	r2,-8(fp)
  826364:	10801120 	cmpeqi	r2,r2,68
  826368:	1000071e 	bne	r2,zero,826388 <TK_OSTaskResume+0x5c>
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
  82636c:	01002174 	movhi	r4,133
  826370:	21351204 	addi	r4,r4,-11192
  826374:	08077600 	call	807760 <puts>
      dtrap();
  826378:	082a7c80 	call	82a7c8 <dtrap>
      panic("TK_OSTaskResume");      
  82637c:	01002174 	movhi	r4,133
  826380:	21351f04 	addi	r4,r4,-11140
  826384:	0825a2c0 	call	825a2c <panic>
   }
#endif
}
  826388:	e037883a 	mov	sp,fp
  82638c:	dfc00117 	ldw	ra,4(sp)
  826390:	df000017 	ldw	fp,0(sp)
  826394:	dec00204 	addi	sp,sp,8
  826398:	f800283a 	ret

0082639c <tcp_sleep>:
 *
 * RETURN: none
 */
void
tcp_sleep(void * event)
{
  82639c:	defffb04 	addi	sp,sp,-20
  8263a0:	dfc00415 	stw	ra,16(sp)
  8263a4:	df000315 	stw	fp,12(sp)
  8263a8:	df000304 	addi	fp,sp,12
  8263ac:	e13fff15 	stw	r4,-4(fp)
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
  8263b0:	e03ffd15 	stw	zero,-12(fp)
  8263b4:	00005006 	br	8264f8 <tcp_sleep+0x15c>
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
  8263b8:	e0bffd17 	ldw	r2,-12(fp)
  8263bc:	00c03934 	movhi	r3,228
  8263c0:	18e88704 	addi	r3,r3,-24036
  8263c4:	10800324 	muli	r2,r2,12
  8263c8:	10c5883a 	add	r2,r2,r3
  8263cc:	10800104 	addi	r2,r2,4
  8263d0:	10800017 	ldw	r2,0(r2)
  8263d4:	1004c03a 	cmpne	r2,r2,zero
  8263d8:	1000441e 	bne	r2,zero,8264ec <tcp_sleep+0x150>
      {
         global_TCPwakeup_set[i].soc_event = event;
  8263dc:	e0bffd17 	ldw	r2,-12(fp)
  8263e0:	00c03934 	movhi	r3,228
  8263e4:	18e88704 	addi	r3,r3,-24036
  8263e8:	10800324 	muli	r2,r2,12
  8263ec:	10c5883a 	add	r2,r2,r3
  8263f0:	10c00104 	addi	r3,r2,4
  8263f4:	e0bfff17 	ldw	r2,-4(fp)
  8263f8:	18800015 	stw	r2,0(r3)
         global_TCPwakeup_set[i].ctick = cticks;
  8263fc:	e13ffd17 	ldw	r4,-12(fp)
  826400:	00802174 	movhi	r2,133
  826404:	10832604 	addi	r2,r2,3224
  826408:	11400017 	ldw	r5,0(r2)
  82640c:	00c03934 	movhi	r3,228
  826410:	18e88704 	addi	r3,r3,-24036
  826414:	20800324 	muli	r2,r4,12
  826418:	10c5883a 	add	r2,r2,r3
  82641c:	11400015 	stw	r5,0(r2)
         if (i > global_TCPwakeup_setIndx)
  826420:	00802174 	movhi	r2,133
  826424:	10832504 	addi	r2,r2,3220
  826428:	10c00017 	ldw	r3,0(r2)
  82642c:	e0bffd17 	ldw	r2,-12(fp)
  826430:	1880040e 	bge	r3,r2,826444 <tcp_sleep+0xa8>
            global_TCPwakeup_setIndx = i;
  826434:	00c02174 	movhi	r3,133
  826438:	18c32504 	addi	r3,r3,3220
  82643c:	e0bffd17 	ldw	r2,-12(fp)
  826440:	18800015 	stw	r2,0(r3)

         tcp_sleep_count++;
  826444:	00802174 	movhi	r2,133
  826448:	10832104 	addi	r2,r2,3204
  82644c:	10800017 	ldw	r2,0(r2)
  826450:	10c00044 	addi	r3,r2,1
  826454:	00802174 	movhi	r2,133
  826458:	10832104 	addi	r2,r2,3204
  82645c:	10c00015 	stw	r3,0(r2)

         /* Give up the lock before going to sleep. This can
          * potentially cause a context switch to the task
          * signaling the event.
          */
         UNLOCK_NET_RESOURCE(NET_RESID);
  826460:	0009883a 	mov	r4,zero
  826464:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
  826468:	e0bffd17 	ldw	r2,-12(fp)
  82646c:	00c03934 	movhi	r3,228
  826470:	18e88704 	addi	r3,r3,-24036
  826474:	10800324 	muli	r2,r2,12
  826478:	10c5883a 	add	r2,r2,r3
  82647c:	10800204 	addi	r2,r2,8
  826480:	11000017 	ldw	r4,0(r2)
  826484:	e1bffe04 	addi	r6,fp,-8
  826488:	0140fa04 	movi	r5,1000
  82648c:	081daec0 	call	81daec <OSSemPend>
         if (err == 10)
  826490:	e0bffe03 	ldbu	r2,-8(fp)
  826494:	10803fcc 	andi	r2,r2,255
  826498:	10800298 	cmpnei	r2,r2,10
  82649c:	1000101e 	bne	r2,zero,8264e0 <tcp_sleep+0x144>
         {
            ++tcp_sleep_timeout;
  8264a0:	d0a09617 	ldw	r2,-32168(gp)
  8264a4:	10800044 	addi	r2,r2,1
  8264a8:	d0a09615 	stw	r2,-32168(gp)

            /* clear the entry */
            global_TCPwakeup_set[i].ctick = 0;
  8264ac:	e0bffd17 	ldw	r2,-12(fp)
  8264b0:	00c03934 	movhi	r3,228
  8264b4:	18e88704 	addi	r3,r3,-24036
  8264b8:	10800324 	muli	r2,r2,12
  8264bc:	10c5883a 	add	r2,r2,r3
  8264c0:	10000015 	stw	zero,0(r2)
            global_TCPwakeup_set[i].soc_event = NULL;
  8264c4:	e0bffd17 	ldw	r2,-12(fp)
  8264c8:	00c03934 	movhi	r3,228
  8264cc:	18e88704 	addi	r3,r3,-24036
  8264d0:	10800324 	muli	r2,r2,12
  8264d4:	10c5883a 	add	r2,r2,r3
  8264d8:	10800104 	addi	r2,r2,4
  8264dc:	10000015 	stw	zero,0(r2)
         }

         /* Regain the lock */
         LOCK_NET_RESOURCE(NET_RESID);
  8264e0:	0009883a 	mov	r4,zero
  8264e4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         return;
  8264e8:	00000f06 	br	826528 <tcp_sleep+0x18c>
tcp_sleep(void * event)
{
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
  8264ec:	e0bffd17 	ldw	r2,-12(fp)
  8264f0:	10800044 	addi	r2,r2,1
  8264f4:	e0bffd15 	stw	r2,-12(fp)
  8264f8:	e0bffd17 	ldw	r2,-12(fp)
  8264fc:	10800510 	cmplti	r2,r2,20
  826500:	103fad1e 	bne	r2,zero,8263b8 <tcp_sleep+0x1c>

   /* The table is full. Try calling TK_YIELD() and hope for the best.
    * The user should increase the size of the table.
    * We'll record the max index for debugging purposes.
    */
   global_TCPwakeup_setIndx = i;
  826504:	00c02174 	movhi	r3,133
  826508:	18c32504 	addi	r3,r3,3220
  82650c:	e0bffd17 	ldw	r2,-12(fp)
  826510:	18800015 	stw	r2,0(r3)

   UNLOCK_NET_RESOURCE(NET_RESID);
  826514:	0009883a 	mov	r4,zero
  826518:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   TK_YIELD();
  82651c:	08266b40 	call	8266b4 <tk_yield>
   LOCK_NET_RESOURCE(NET_RESID);
  826520:	0009883a 	mov	r4,zero
  826524:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
}
  826528:	e037883a 	mov	sp,fp
  82652c:	dfc00117 	ldw	ra,4(sp)
  826530:	df000017 	ldw	fp,0(sp)
  826534:	dec00204 	addi	sp,sp,8
  826538:	f800283a 	ret

0082653c <tcp_wakeup>:
 *
 * RETURN: none
 */
void
tcp_wakeup(void *event)
{
  82653c:	defffc04 	addi	sp,sp,-16
  826540:	dfc00315 	stw	ra,12(sp)
  826544:	df000215 	stw	fp,8(sp)
  826548:	df000204 	addi	fp,sp,8
  82654c:	e13fff15 	stw	r4,-4(fp)
   int i;

   OSSchedLock();
  826550:	0817db80 	call	817db8 <OSSchedLock>

   for (i = 0; i < GLOBWAKE_SZ; i++)
  826554:	e03ffe15 	stw	zero,-8(fp)
  826558:	00003006 	br	82661c <tcp_wakeup+0xe0>
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
  82655c:	e0bffe17 	ldw	r2,-8(fp)
  826560:	00c03934 	movhi	r3,228
  826564:	18e88704 	addi	r3,r3,-24036
  826568:	10800324 	muli	r2,r2,12
  82656c:	10c5883a 	add	r2,r2,r3
  826570:	10800017 	ldw	r2,0(r2)
  826574:	1005003a 	cmpeq	r2,r2,zero
  826578:	1000251e 	bne	r2,zero,826610 <tcp_wakeup+0xd4>
  82657c:	e0bffe17 	ldw	r2,-8(fp)
  826580:	00c03934 	movhi	r3,228
  826584:	18e88704 	addi	r3,r3,-24036
  826588:	10800324 	muli	r2,r2,12
  82658c:	10c5883a 	add	r2,r2,r3
  826590:	10800104 	addi	r2,r2,4
  826594:	10c00017 	ldw	r3,0(r2)
  826598:	e0bfff17 	ldw	r2,-4(fp)
  82659c:	18801c1e 	bne	r3,r2,826610 <tcp_wakeup+0xd4>
          (global_TCPwakeup_set[i].soc_event == event))
      {
         /* signal the event */
         OSSemPost(global_TCPwakeup_set[i].semaphore);
  8265a0:	e0bffe17 	ldw	r2,-8(fp)
  8265a4:	00c03934 	movhi	r3,228
  8265a8:	18e88704 	addi	r3,r3,-24036
  8265ac:	10800324 	muli	r2,r2,12
  8265b0:	10c5883a 	add	r2,r2,r3
  8265b4:	10800204 	addi	r2,r2,8
  8265b8:	11000017 	ldw	r4,0(r2)
  8265bc:	081dee40 	call	81dee4 <OSSemPost>

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
  8265c0:	e0bffe17 	ldw	r2,-8(fp)
  8265c4:	00c03934 	movhi	r3,228
  8265c8:	18e88704 	addi	r3,r3,-24036
  8265cc:	10800324 	muli	r2,r2,12
  8265d0:	10c5883a 	add	r2,r2,r3
  8265d4:	10000015 	stw	zero,0(r2)
         global_TCPwakeup_set[i].soc_event = NULL;
  8265d8:	e0bffe17 	ldw	r2,-8(fp)
  8265dc:	00c03934 	movhi	r3,228
  8265e0:	18e88704 	addi	r3,r3,-24036
  8265e4:	10800324 	muli	r2,r2,12
  8265e8:	10c5883a 	add	r2,r2,r3
  8265ec:	10800104 	addi	r2,r2,4
  8265f0:	10000015 	stw	zero,0(r2)

         tcp_wakeup_count++;
  8265f4:	00802174 	movhi	r2,133
  8265f8:	10832204 	addi	r2,r2,3208
  8265fc:	10800017 	ldw	r2,0(r2)
  826600:	10c00044 	addi	r3,r2,1
  826604:	00802174 	movhi	r2,133
  826608:	10832204 	addi	r2,r2,3208
  82660c:	10c00015 	stw	r3,0(r2)
{
   int i;

   OSSchedLock();

   for (i = 0; i < GLOBWAKE_SZ; i++)
  826610:	e0bffe17 	ldw	r2,-8(fp)
  826614:	10800044 	addi	r2,r2,1
  826618:	e0bffe15 	stw	r2,-8(fp)
  82661c:	e0bffe17 	ldw	r2,-8(fp)
  826620:	10800510 	cmplti	r2,r2,20
  826624:	103fcd1e 	bne	r2,zero,82655c <tcp_wakeup+0x20>

         tcp_wakeup_count++;
      }
   }

   OSSchedUnlock();
  826628:	0817e440 	call	817e44 <OSSchedUnlock>
}
  82662c:	e037883a 	mov	sp,fp
  826630:	dfc00117 	ldw	ra,4(sp)
  826634:	df000017 	ldw	fp,0(sp)
  826638:	dec00204 	addi	sp,sp,8
  82663c:	f800283a 	ret

00826640 <TK_OSTaskQuery>:



u_char TK_OSTaskQuery(void)
{
  826640:	deffe104 	addi	sp,sp,-124
  826644:	dfc01e15 	stw	ra,120(sp)
  826648:	df001d15 	stw	fp,116(sp)
  82664c:	df001d04 	addi	fp,sp,116
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);
  826650:	e17fe404 	addi	r5,fp,-112
  826654:	01003fc4 	movi	r4,255
  826658:	081fac00 	call	81fac0 <OSTaskQuery>
  82665c:	e0bfe345 	stb	r2,-115(fp)

   if (err == OS_NO_ERR)
  826660:	e0bfe343 	ldbu	r2,-115(fp)
  826664:	1004c03a 	cmpne	r2,r2,zero
  826668:	1000051e 	bne	r2,zero,826680 <TK_OSTaskQuery+0x40>
   {
      task_prio = task_data.OSTCBPrio;
  82666c:	e0bff083 	ldbu	r2,-62(fp)
  826670:	e0bfe305 	stb	r2,-116(fp)
      dprintf("ChronOS API call failure, unable to identify task!");
      panic("TK_OSTaskQuery");
      return 0;
   }
   
   return task_prio;
  826674:	e0bfe303 	ldbu	r2,-116(fp)
  826678:	e0bfff15 	stw	r2,-4(fp)
  82667c:	00000706 	br	82669c <TK_OSTaskQuery+0x5c>
   {
      task_prio = task_data.OSTCBPrio;
   }
   else
   {
      dprintf("ChronOS API call failure, unable to identify task!");
  826680:	01002174 	movhi	r4,133
  826684:	21352304 	addi	r4,r4,-11124
  826688:	08076480 	call	807648 <printf>
      panic("TK_OSTaskQuery");
  82668c:	01002174 	movhi	r4,133
  826690:	21353004 	addi	r4,r4,-11072
  826694:	0825a2c0 	call	825a2c <panic>
      return 0;
  826698:	e03fff15 	stw	zero,-4(fp)
  82669c:	e0bfff17 	ldw	r2,-4(fp)
   }
   
   return task_prio;
}
  8266a0:	e037883a 	mov	sp,fp
  8266a4:	dfc00117 	ldw	ra,4(sp)
  8266a8:	df000017 	ldw	fp,0(sp)
  8266ac:	dec00204 	addi	sp,sp,8
  8266b0:	f800283a 	ret

008266b4 <tk_yield>:



void
tk_yield(void)
{
  8266b4:	defffe04 	addi	sp,sp,-8
  8266b8:	dfc00115 	stw	ra,4(sp)
  8266bc:	df000015 	stw	fp,0(sp)
  8266c0:	d839883a 	mov	fp,sp
   /* To ensure cycles to the lower priority tasks we should really
    * delay by two ticks, but that really hurts performance on some
    * long-tick targets. One tick works better overall....
    */
   OSTimeDly(1);
  8266c4:	01000044 	movi	r4,1
  8266c8:	081fc800 	call	81fc80 <OSTimeDly>
}
  8266cc:	e037883a 	mov	sp,fp
  8266d0:	dfc00117 	ldw	ra,4(sp)
  8266d4:	df000017 	ldw	fp,0(sp)
  8266d8:	dec00204 	addi	sp,sp,8
  8266dc:	f800283a 	ret

008266e0 <tk_stats>:
extern struct inet_taskinfo * nettask;
extern int num_net_tasks;

int
tk_stats(void * pio)
{
  8266e0:	deffef04 	addi	sp,sp,-68
  8266e4:	dfc01015 	stw	ra,64(sp)
  8266e8:	df000f15 	stw	fp,60(sp)
  8266ec:	df000f04 	addi	fp,sp,60
  8266f0:	e13fff15 	stw	r4,-4(fp)
   int      stackuse;
   char     name[OS_TASK_NAME_SIZE+1];
   INT8U    err;
   

   ns_printf(pio, "ChronOS RTOS stats:\n");
  8266f4:	e13fff17 	ldw	r4,-4(fp)
  8266f8:	01402174 	movhi	r5,133
  8266fc:	29753404 	addi	r5,r5,-11056
  826700:	0825c540 	call	825c54 <ns_printf>

#ifdef NO_INICHE_EXTENSIONS
   ns_printf(pio, "Context switches; Delay:  %lu\n",
  826704:	00802174 	movhi	r2,133
  826708:	1082f004 	addi	r2,r2,3008
  82670c:	11800017 	ldw	r6,0(r2)
  826710:	e13fff17 	ldw	r4,-4(fp)
  826714:	01402174 	movhi	r5,133
  826718:	29753a04 	addi	r5,r5,-11032
  82671c:	0825c540 	call	825c54 <ns_printf>
#else
   ns_printf(pio, "Context switches; Delay:  %lu, Interrupt: %lu\n",
      OSCtxSwCtr, OSCtxIntCtr);
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");
  826720:	e13fff17 	ldw	r4,-4(fp)
  826724:	01402174 	movhi	r5,133
  826728:	29754204 	addi	r5,r5,-11000
  82672c:	0825c540 	call	825c54 <ns_printf>

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
  826730:	e03ff515 	stw	zero,-44(fp)
  826734:	00005106 	br	82687c <tk_stats+0x19c>
   {
      /* get pointer to TCB and see if entry is in use and not a mutex */
      tcb = OSTCBPrioTbl[t];
  826738:	e0bff517 	ldw	r2,-44(fp)
  82673c:	00c03934 	movhi	r3,228
  826740:	18e6c204 	addi	r3,r3,-25848
  826744:	1085883a 	add	r2,r2,r2
  826748:	1085883a 	add	r2,r2,r2
  82674c:	10c5883a 	add	r2,r2,r3
  826750:	10800017 	ldw	r2,0(r2)
  826754:	e0bff415 	stw	r2,-48(fp)
      if ((tcb == NULL) || (tcb == (OS_TCB *)1))
  826758:	e0bff417 	ldw	r2,-48(fp)
  82675c:	1005003a 	cmpeq	r2,r2,zero
  826760:	1000431e 	bne	r2,zero,826870 <tk_stats+0x190>
  826764:	e0bff417 	ldw	r2,-48(fp)
  826768:	10800060 	cmpeqi	r2,r2,1
  82676c:	1000401e 	bne	r2,zero,826870 <tk_stats+0x190>
         continue;

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);
  826770:	e0bff417 	ldw	r2,-48(fp)
  826774:	10800c83 	ldbu	r2,50(r2)
  826778:	11003fcc 	andi	r4,r2,255
  82677c:	e17ff604 	addi	r5,fp,-40
  826780:	e1bffe44 	addi	r6,fp,-7
  826784:	081f1040 	call	81f104 <OSTaskNameGet>

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
  826788:	e0bff417 	ldw	r2,-48(fp)
  82678c:	10800c83 	ldbu	r2,50(r2)
  826790:	11c03fcc 	andi	r7,r2,255
  826794:	e0bff417 	ldw	r2,-48(fp)
  826798:	10800c03 	ldbu	r2,48(r2)
  82679c:	10803fcc 	andi	r2,r2,255
  8267a0:	e1bff604 	addi	r6,fp,-40
  8267a4:	d8800015 	stw	r2,0(sp)
  8267a8:	e13fff17 	ldw	r4,-4(fp)
  8267ac:	01402174 	movhi	r5,133
  8267b0:	29755204 	addi	r5,r5,-10936
  8267b4:	0825c540 	call	825c54 <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
  8267b8:	e0bff417 	ldw	r2,-48(fp)
  8267bc:	10800217 	ldw	r2,8(r2)
  8267c0:	1005003a 	cmpeq	r2,r2,zero
  8267c4:	1000261e 	bne	r2,zero,826860 <tk_stats+0x180>
  8267c8:	e0bff417 	ldw	r2,-48(fp)
  8267cc:	10800317 	ldw	r2,12(r2)
  8267d0:	1005003a 	cmpeq	r2,r2,zero
  8267d4:	1000221e 	bne	r2,zero,826860 <tk_stats+0x180>
      {
         sp = tcb->OSTCBStkBottom + 1;
  8267d8:	e0bff417 	ldw	r2,-48(fp)
  8267dc:	10800217 	ldw	r2,8(r2)
  8267e0:	10800104 	addi	r2,r2,4
  8267e4:	e0bff315 	stw	r2,-52(fp)
         while(*sp == 0)
  8267e8:	00000306 	br	8267f8 <tk_stats+0x118>
            sp++;
  8267ec:	e0bff317 	ldw	r2,-52(fp)
  8267f0:	10800104 	addi	r2,r2,4
  8267f4:	e0bff315 	stw	r2,-52(fp)
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
      {
         sp = tcb->OSTCBStkBottom + 1;
         while(*sp == 0)
  8267f8:	e0bff317 	ldw	r2,-52(fp)
  8267fc:	10800017 	ldw	r2,0(r2)
  826800:	1005003a 	cmpeq	r2,r2,zero
  826804:	103ff91e 	bne	r2,zero,8267ec <tk_stats+0x10c>
            sp++;
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
  826808:	e0bff417 	ldw	r2,-48(fp)
  82680c:	11000317 	ldw	r4,12(r2)
  826810:	e0fff317 	ldw	r3,-52(fp)
  826814:	e0bff417 	ldw	r2,-48(fp)
  826818:	10800217 	ldw	r2,8(r2)
  82681c:	1885c83a 	sub	r2,r3,r2
  826820:	1005d0ba 	srai	r2,r2,2
  826824:	2085c83a 	sub	r2,r4,r2
  826828:	1085883a 	add	r2,r2,r2
  82682c:	1085883a 	add	r2,r2,r2
  826830:	e0bff215 	stw	r2,-56(fp)
         ns_printf(pio, "%6d,      %6d\n",
  826834:	e0bff417 	ldw	r2,-48(fp)
  826838:	10800317 	ldw	r2,12(r2)
  82683c:	1085883a 	add	r2,r2,r2
  826840:	1085883a 	add	r2,r2,r2
  826844:	100d883a 	mov	r6,r2
  826848:	e13fff17 	ldw	r4,-4(fp)
  82684c:	01402174 	movhi	r5,133
  826850:	29755a04 	addi	r5,r5,-10904
  826854:	e1fff217 	ldw	r7,-56(fp)
  826858:	0825c540 	call	825c54 <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
  82685c:	00000406 	br	826870 <tk_stats+0x190>
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
  826860:	e13fff17 	ldw	r4,-4(fp)
  826864:	01402174 	movhi	r5,133
  826868:	29755e04 	addi	r5,r5,-10888
  82686c:	0825c540 	call	825c54 <ns_printf>
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
  826870:	e0bff517 	ldw	r2,-44(fp)
  826874:	10800044 	addi	r2,r2,1
  826878:	e0bff515 	stw	r2,-44(fp)
  82687c:	e0bff517 	ldw	r2,-44(fp)
  826880:	10800550 	cmplti	r2,r2,21
  826884:	103fac1e 	bne	r2,zero,826738 <tk_stats+0x58>
      {
         ns_printf(pio, "No stack data\n");
      }
   }

   ns_printf(pio, "tcp_sleep_count = %lu, tcp_wakeup_count = %lu\n",
  826888:	00802174 	movhi	r2,133
  82688c:	10832104 	addi	r2,r2,3204
  826890:	11800017 	ldw	r6,0(r2)
  826894:	00802174 	movhi	r2,133
  826898:	10832204 	addi	r2,r2,3208
  82689c:	11c00017 	ldw	r7,0(r2)
  8268a0:	e13fff17 	ldw	r4,-4(fp)
  8268a4:	01402174 	movhi	r5,133
  8268a8:	29756204 	addi	r5,r5,-10872
  8268ac:	0825c540 	call	825c54 <ns_printf>
                  tcp_sleep_count, tcp_wakeup_count);
   ns_printf(pio, "global_TCPwakeup_setIndx = %d, tcp_sleep_timeout = %lu\n",
  8268b0:	00802174 	movhi	r2,133
  8268b4:	10832504 	addi	r2,r2,3220
  8268b8:	11800017 	ldw	r6,0(r2)
  8268bc:	d1e09617 	ldw	r7,-32168(gp)
  8268c0:	e13fff17 	ldw	r4,-4(fp)
  8268c4:	01402174 	movhi	r5,133
  8268c8:	29756e04 	addi	r5,r5,-10824
  8268cc:	0825c540 	call	825c54 <ns_printf>
                  global_TCPwakeup_setIndx, tcp_sleep_timeout);

   return 0;
  8268d0:	0005883a 	mov	r2,zero
}
  8268d4:	e037883a 	mov	sp,fp
  8268d8:	dfc00117 	ldw	ra,4(sp)
  8268dc:	df000017 	ldw	fp,0(sp)
  8268e0:	dec00204 	addi	sp,sp,8
  8268e4:	f800283a 	ret

008268e8 <dhc_get_srv_ipaddr>:
 * RETURNS: 
 */

ip_addr 
dhc_get_srv_ipaddr(u_char *options /* after magic cookie */) 
{
  8268e8:	defffa04 	addi	sp,sp,-24
  8268ec:	dfc00515 	stw	ra,20(sp)
  8268f0:	df000415 	stw	fp,16(sp)
  8268f4:	df000404 	addi	fp,sp,16
  8268f8:	e13fff15 	stw	r4,-4(fp)
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;
  8268fc:	e03ffc15 	stw	zero,-16(fp)

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
  826900:	01000d84 	movi	r4,54
  826904:	e17fff17 	ldw	r5,-4(fp)
  826908:	08298280 	call	829828 <find_opt>
  82690c:	e0bffe15 	stw	r2,-8(fp)
  826910:	e0bffe17 	ldw	r2,-8(fp)
  826914:	1005003a 	cmpeq	r2,r2,zero
  826918:	1000111e 	bne	r2,zero,826960 <dhc_get_srv_ipaddr+0x78>
   {
      opts++;
  82691c:	e0bffe17 	ldw	r2,-8(fp)
  826920:	10800044 	addi	r2,r2,1
  826924:	e0bffe15 	stw	r2,-8(fp)
      optlen = *opts;
  826928:	e0bffe17 	ldw	r2,-8(fp)
  82692c:	10800003 	ldbu	r2,0(r2)
  826930:	e0bffd05 	stb	r2,-12(fp)
      opts++;
  826934:	e0bffe17 	ldw	r2,-8(fp)
  826938:	10800044 	addi	r2,r2,1
  82693c:	e0bffe15 	stw	r2,-8(fp)
      srv_ipaddr = dh_getlong(opts);
  826940:	e13ffe17 	ldw	r4,-8(fp)
  826944:	0828a980 	call	828a98 <dh_getlong>
  826948:	e0bffc15 	stw	r2,-16(fp)
      opts += optlen;
  82694c:	e0bffd03 	ldbu	r2,-12(fp)
  826950:	1007883a 	mov	r3,r2
  826954:	e0bffe17 	ldw	r2,-8(fp)
  826958:	10c5883a 	add	r2,r2,r3
  82695c:	e0bffe15 	stw	r2,-8(fp)
   }

   return (srv_ipaddr);
  826960:	e0bffc17 	ldw	r2,-16(fp)
} 
  826964:	e037883a 	mov	sp,fp
  826968:	dfc00117 	ldw	ra,4(sp)
  82696c:	df000017 	ldw	fp,0(sp)
  826970:	dec00204 	addi	sp,sp,8
  826974:	f800283a 	ret

00826978 <dhc_init>:
 * RETURNS: Returns 0 if OK, else negative error code from net.h file 
 */

int
dhc_init(void)
{
  826978:	defffb04 	addi	sp,sp,-20
  82697c:	dfc00415 	stw	ra,16(sp)
  826980:	df000315 	stw	fp,12(sp)
  826984:	df000304 	addi	fp,sp,12
   int   i;

   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
  826988:	00bfff44 	movi	r2,-3
  82698c:	d8800015 	stw	r2,0(sp)
  826990:	0009883a 	mov	r4,zero
  826994:	014010c4 	movi	r5,67
  826998:	01801104 	movi	r6,68
  82699c:	01c020b4 	movhi	r7,130
  8269a0:	39da9e04 	addi	r7,r7,27256
  8269a4:	082a3180 	call	82a318 <udp_open>
  8269a8:	d0a09715 	stw	r2,-32164(gp)
      BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT,
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
  8269ac:	d0a09717 	ldw	r2,-32164(gp)
  8269b0:	1004c03a 	cmpne	r2,r2,zero
  8269b4:	1000031e 	bne	r2,zero,8269c4 <dhc_init+0x4c>
      return ENP_RESOURCE;
  8269b8:	00bffa84 	movi	r2,-22
  8269bc:	e0bfff15 	stw	r2,-4(fp)
  8269c0:	00001606 	br	826a1c <dhc_init+0xa4>

   for (i = 0; i < MAXNETS; i++)
  8269c4:	e03ffe15 	stw	zero,-8(fp)
  8269c8:	00001006 	br	826a0c <dhc_init+0x94>
   {
      dhc_states[i].state = DHCS_UNUSED;
  8269cc:	e0bffe17 	ldw	r2,-8(fp)
  8269d0:	00c03934 	movhi	r3,228
  8269d4:	18e7c204 	addi	r3,r3,-24824
  8269d8:	10800f24 	muli	r2,r2,60
  8269dc:	10c5883a 	add	r2,r2,r3
  8269e0:	10000015 	stw	zero,0(r2)
      dhc_states[i].tries = 0;
  8269e4:	e0bffe17 	ldw	r2,-8(fp)
  8269e8:	00c03934 	movhi	r3,228
  8269ec:	18e7c204 	addi	r3,r3,-24824
  8269f0:	10800f24 	muli	r2,r2,60
  8269f4:	10c5883a 	add	r2,r2,r3
  8269f8:	10800104 	addi	r2,r2,4
  8269fc:	10000015 	stw	zero,0(r2)
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
      return ENP_RESOURCE;

   for (i = 0; i < MAXNETS; i++)
  826a00:	e0bffe17 	ldw	r2,-8(fp)
  826a04:	10800044 	addi	r2,r2,1
  826a08:	e0bffe15 	stw	r2,-8(fp)
  826a0c:	e0bffe17 	ldw	r2,-8(fp)
  826a10:	10800110 	cmplti	r2,r2,4
  826a14:	103fed1e 	bne	r2,zero,8269cc <dhc_init+0x54>
   {
      dhc_states[i].state = DHCS_UNUSED;
      dhc_states[i].tries = 0;
   }

   return 0;
  826a18:	e03fff15 	stw	zero,-4(fp)
  826a1c:	e0bfff17 	ldw	r2,-4(fp)
}
  826a20:	e037883a 	mov	sp,fp
  826a24:	dfc00117 	ldw	ra,4(sp)
  826a28:	df000017 	ldw	fp,0(sp)
  826a2c:	dec00204 	addi	sp,sp,8
  826a30:	f800283a 	ret

00826a34 <dhc_set_callback>:
 * RETURNS: 
 */

void
dhc_set_callback(int iface, int (*routine)(int,int) )
{
  826a34:	defffd04 	addi	sp,sp,-12
  826a38:	df000215 	stw	fp,8(sp)
  826a3c:	df000204 	addi	fp,sp,8
  826a40:	e13ffe15 	stw	r4,-8(fp)
  826a44:	e17fff15 	stw	r5,-4(fp)
   dhc_states[iface].callback = routine;
  826a48:	e0bffe17 	ldw	r2,-8(fp)
  826a4c:	00c03934 	movhi	r3,228
  826a50:	18e7c204 	addi	r3,r3,-24824
  826a54:	10800f24 	muli	r2,r2,60
  826a58:	10c5883a 	add	r2,r2,r3
  826a5c:	10c00e04 	addi	r3,r2,56
  826a60:	e0bfff17 	ldw	r2,-4(fp)
  826a64:	18800015 	stw	r2,0(r3)
}
  826a68:	e037883a 	mov	sp,fp
  826a6c:	df000017 	ldw	fp,0(sp)
  826a70:	dec00104 	addi	sp,sp,4
  826a74:	f800283a 	ret

00826a78 <dhc_upcall>:
 * returned
 */

int
dhc_upcall(PACKET pkt, void * data)
{
  826a78:	defff204 	addi	sp,sp,-56
  826a7c:	dfc00d15 	stw	ra,52(sp)
  826a80:	df000c15 	stw	fp,48(sp)
  826a84:	dc000b15 	stw	r16,44(sp)
  826a88:	df000b04 	addi	fp,sp,44
  826a8c:	e13ffb15 	stw	r4,-20(fp)
  826a90:	e17ffc15 	stw	r5,-16(fp)
   struct bootp * bp;
   int      len      =  pkt->nb_plen;  /* len of UDP data - the bootp/dhcp struct */
  826a94:	e0bffb17 	ldw	r2,-20(fp)
  826a98:	10800417 	ldw	r2,16(r2)
  826a9c:	e0bff915 	stw	r2,-28(fp)
   int      dhcptype =  0;    /* DHCP type - not valid if bootp */
  826aa0:	e03ff815 	stw	zero,-32(fp)
   int      e;
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
  826aa4:	e0bffc17 	ldw	r2,-16(fp)
  826aa8:	10bfff60 	cmpeqi	r2,r2,-3
  826aac:	1000041e 	bne	r2,zero,826ac0 <dhc_upcall+0x48>
   {
      dtrap();
  826ab0:	082a7c80 	call	82a7c8 <dtrap>
      return ENP_LOGIC;    /* internal logic error */
  826ab4:	00bffd44 	movi	r2,-11
  826ab8:	e0bffe15 	stw	r2,-8(fp)
  826abc:	0001f306 	br	82728c <dhc_upcall+0x814>
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
  826ac0:	e0bffb17 	ldw	r2,-20(fp)
  826ac4:	11000617 	ldw	r4,24(r2)
  826ac8:	08239940 	call	823994 <if_netnumber>
  826acc:	e0bff615 	stw	r2,-40(fp)
   if (dhc_states[iface].state == DHCS_UNUSED)
  826ad0:	e0bff617 	ldw	r2,-40(fp)
  826ad4:	00c03934 	movhi	r3,228
  826ad8:	18e7c204 	addi	r3,r3,-24824
  826adc:	10800f24 	muli	r2,r2,60
  826ae0:	10c5883a 	add	r2,r2,r3
  826ae4:	10800017 	ldw	r2,0(r2)
  826ae8:	1004c03a 	cmpne	r2,r2,zero
  826aec:	1000031e 	bne	r2,zero,826afc <dhc_upcall+0x84>
      return ENP_NOT_MINE;
  826af0:	00c00084 	movi	r3,2
  826af4:	e0fffe15 	stw	r3,-8(fp)
  826af8:	0001e406 	br	82728c <dhc_upcall+0x814>

   bp = (struct bootp *)pkt->nb_prot;
  826afc:	e0bffb17 	ldw	r2,-20(fp)
  826b00:	10800317 	ldw	r2,12(r2)
  826b04:	e0bffa15 	stw	r2,-24(fp)

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
  826b08:	e0bff917 	ldw	r2,-28(fp)
  826b0c:	10803b30 	cmpltui	r2,r2,236
  826b10:	10000b1e 	bne	r2,zero,826b40 <dhc_upcall+0xc8>
  826b14:	e0bffa17 	ldw	r2,-24(fp)
  826b18:	10800003 	ldbu	r2,0(r2)
  826b1c:	10803fcc 	andi	r2,r2,255
  826b20:	10800098 	cmpnei	r2,r2,2
  826b24:	1000061e 	bne	r2,zero,826b40 <dhc_upcall+0xc8>
  826b28:	e0bffa17 	ldw	r2,-24(fp)
  826b2c:	10803b04 	addi	r2,r2,236
  826b30:	10c00017 	ldw	r3,0(r2)
  826b34:	0098d534 	movhi	r2,25428
  826b38:	10a098c4 	addi	r2,r2,-32157
  826b3c:	18800726 	beq	r3,r2,826b5c <dhc_upcall+0xe4>
       (bp->op != BOOTREPLY) ||
       (*(u_long*)(&bp->options) != RFC1084_MAGIC_COOKIE))
   {
      dtrap();
  826b40:	082a7c80 	call	82a7c8 <dtrap>
      dsc_errors++;
  826b44:	d0a09817 	ldw	r2,-32160(gp)
  826b48:	10800044 	addi	r2,r2,1
  826b4c:	d0a09815 	stw	r2,-32160(gp)
      return ENP_NOT_MINE;
  826b50:	01000084 	movi	r4,2
  826b54:	e13ffe15 	stw	r4,-8(fp)
  826b58:	0001cc06 	br	82728c <dhc_upcall+0x814>
   }

   /* punt offers or replys which are not for me */
   if(MEMCMP(bp->chaddr, pkt->net->mib.ifPhysAddress, pkt->net->n_hal))
  826b5c:	e0bffa17 	ldw	r2,-24(fp)
  826b60:	11000704 	addi	r4,r2,28
  826b64:	e0bffb17 	ldw	r2,-20(fp)
  826b68:	10800617 	ldw	r2,24(r2)
  826b6c:	11401717 	ldw	r5,92(r2)
  826b70:	e0bffb17 	ldw	r2,-20(fp)
  826b74:	10800617 	ldw	r2,24(r2)
  826b78:	11801117 	ldw	r6,68(r2)
  826b7c:	080f0080 	call	80f008 <memcmp>
  826b80:	1005003a 	cmpeq	r2,r2,zero
  826b84:	1000031e 	bne	r2,zero,826b94 <dhc_upcall+0x11c>
      return ENP_NOT_MINE;    /* not an error, just ignore it */
  826b88:	00800084 	movi	r2,2
  826b8c:	e0bffe15 	stw	r2,-8(fp)
  826b90:	0001be06 	br	82728c <dhc_upcall+0x814>

   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
  826b94:	e0bffa17 	ldw	r2,-24(fp)
  826b98:	10803b04 	addi	r2,r2,236
  826b9c:	11400104 	addi	r5,r2,4
  826ba0:	01000d44 	movi	r4,53
  826ba4:	08298280 	call	829828 <find_opt>
  826ba8:	e0bff515 	stw	r2,-44(fp)
   if (opts && *opts == DHOP_TYPE)
  826bac:	e0bff517 	ldw	r2,-44(fp)
  826bb0:	1005003a 	cmpeq	r2,r2,zero
  826bb4:	1000101e 	bne	r2,zero,826bf8 <dhc_upcall+0x180>
  826bb8:	e0bff517 	ldw	r2,-44(fp)
  826bbc:	10800003 	ldbu	r2,0(r2)
  826bc0:	10803fcc 	andi	r2,r2,255
  826bc4:	10800d58 	cmpnei	r2,r2,53
  826bc8:	10000b1e 	bne	r2,zero,826bf8 <dhc_upcall+0x180>
   {
      dhcptype = *(opts+2);
  826bcc:	e0bff517 	ldw	r2,-44(fp)
  826bd0:	10800084 	addi	r2,r2,2
  826bd4:	10800003 	ldbu	r2,0(r2)
  826bd8:	10803fcc 	andi	r2,r2,255
  826bdc:	e0bff815 	stw	r2,-32(fp)
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
  826be0:	e0bffa17 	ldw	r2,-24(fp)
  826be4:	10800003 	ldbu	r2,0(r2)
  826be8:	10800114 	ori	r2,r2,4
  826bec:	1007883a 	mov	r3,r2
  826bf0:	e0bffa17 	ldw	r2,-24(fp)
  826bf4:	10c00005 	stb	r3,0(r2)
   }

   if (isdhcp(bp))
  826bf8:	e0bffa17 	ldw	r2,-24(fp)
  826bfc:	10800003 	ldbu	r2,0(r2)
  826c00:	10803fcc 	andi	r2,r2,255
  826c04:	1080010c 	andi	r2,r2,4
  826c08:	1005003a 	cmpeq	r2,r2,zero
  826c0c:	10017e1e 	bne	r2,zero,827208 <dhc_upcall+0x790>
   {
      switch (dhcptype)
  826c10:	e0fff817 	ldw	r3,-32(fp)
  826c14:	e0ffff15 	stw	r3,-4(fp)
  826c18:	e13fff17 	ldw	r4,-4(fp)
  826c1c:	20800148 	cmpgei	r2,r4,5
  826c20:	1000071e 	bne	r2,zero,826c40 <dhc_upcall+0x1c8>
  826c24:	e0ffff17 	ldw	r3,-4(fp)
  826c28:	188000c8 	cmpgei	r2,r3,3
  826c2c:	1000081e 	bne	r2,zero,826c50 <dhc_upcall+0x1d8>
  826c30:	e13fff17 	ldw	r4,-4(fp)
  826c34:	20800060 	cmpeqi	r2,r4,1
  826c38:	1000051e 	bne	r2,zero,826c50 <dhc_upcall+0x1d8>
  826c3c:	00000a06 	br	826c68 <dhc_upcall+0x1f0>
  826c40:	e0ffff17 	ldw	r3,-4(fp)
  826c44:	188001e0 	cmpeqi	r2,r3,7
  826c48:	1000011e 	bne	r2,zero,826c50 <dhc_upcall+0x1d8>
  826c4c:	00000606 	br	826c68 <dhc_upcall+0x1f0>
      {
      case DHCP_DISCOVER:
      case DHCP_REQUEST:
      case DHCP_DECLINE:
      case DHCP_RELEASE:
         dsc_errors++;     /* these should only be upcalled to a server */
  826c50:	d0a09817 	ldw	r2,-32160(gp)
  826c54:	10800044 	addi	r2,r2,1
  826c58:	d0a09815 	stw	r2,-32160(gp)
         return ENP_NOT_MINE;
  826c5c:	01000084 	movi	r4,2
  826c60:	e13ffe15 	stw	r4,-8(fp)
  826c64:	00018906 	br	82728c <dhc_upcall+0x814>
      }

      switch (dhc_states[iface].state)
  826c68:	e0bff617 	ldw	r2,-40(fp)
  826c6c:	00c03934 	movhi	r3,228
  826c70:	18e7c204 	addi	r3,r3,-24824
  826c74:	10800f24 	muli	r2,r2,60
  826c78:	10c5883a 	add	r2,r2,r3
  826c7c:	10800017 	ldw	r2,0(r2)
  826c80:	e0bffd15 	stw	r2,-12(fp)
  826c84:	e0fffd17 	ldw	r3,-12(fp)
  826c88:	18800268 	cmpgeui	r2,r3,9
  826c8c:	1001541e 	bne	r2,zero,8271e0 <dhc_upcall+0x768>
  826c90:	e13ffd17 	ldw	r4,-12(fp)
  826c94:	e13ffd17 	ldw	r4,-12(fp)
  826c98:	2105883a 	add	r2,r4,r4
  826c9c:	1087883a 	add	r3,r2,r2
  826ca0:	008020b4 	movhi	r2,130
  826ca4:	109b2d04 	addi	r2,r2,27828
  826ca8:	1885883a 	add	r2,r3,r2
  826cac:	10800017 	ldw	r2,0(r2)
  826cb0:	1000683a 	jmp	r2
  826cb4:	008271e0 	cmpeqi	r2,zero,2503
  826cb8:	00826cd8 	cmpnei	r2,zero,2483
  826cbc:	00826cd8 	cmpnei	r2,zero,2483
  826cc0:	00826f2c 	andhi	r2,zero,2492
  826cc4:	00826cf0 	cmpltui	r2,zero,2483
  826cc8:	00826e74 	movhi	r2,2489
  826ccc:	00826cd8 	cmpnei	r2,zero,2483
  826cd0:	00826e74 	movhi	r2,2489
  826cd4:	00826e74 	movhi	r2,2489
      case DHCS_INITREBOOT:
         /* How can we receive any response when we never sent one */
      case DHCS_BOUND:
         /* If there are multiple DHCP Servers, and one of them is slow
            in responding, we might get OFFER pkts when are in BOUND state */
         dsc_errors++;     /* these should only be upcalled to a server */
  826cd8:	d0a09817 	ldw	r2,-32160(gp)
  826cdc:	10800044 	addi	r2,r2,1
  826ce0:	d0a09815 	stw	r2,-32160(gp)
         return ENP_NOT_MINE;
  826ce4:	00800084 	movi	r2,2
  826ce8:	e0bffe15 	stw	r2,-8(fp)
  826cec:	00016706 	br	82728c <dhc_upcall+0x814>
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
  826cf0:	e0bff817 	ldw	r2,-32(fp)
  826cf4:	10800098 	cmpnei	r2,r2,2
  826cf8:	1000521e 	bne	r2,zero,826e44 <dhc_upcall+0x3cc>
         {
            dsc_offers++;
  826cfc:	d0a09a17 	ldw	r2,-32152(gp)
  826d00:	10800044 	addi	r2,r2,1
  826d04:	d0a09a15 	stw	r2,-32152(gp)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
  826d08:	e43ff617 	ldw	r16,-40(fp)
  826d0c:	e0bffa17 	ldw	r2,-24(fp)
  826d10:	10803b04 	addi	r2,r2,236
  826d14:	11000104 	addi	r4,r2,4
  826d18:	08268e80 	call	8268e8 <dhc_get_srv_ipaddr>
  826d1c:	1009883a 	mov	r4,r2
  826d20:	00c03934 	movhi	r3,228
  826d24:	18e7c204 	addi	r3,r3,-24824
  826d28:	80800f24 	muli	r2,r16,60
  826d2c:	10c5883a 	add	r2,r2,r3
  826d30:	10800d04 	addi	r2,r2,52
  826d34:	11000015 	stw	r4,0(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
  826d38:	e0bff617 	ldw	r2,-40(fp)
  826d3c:	00c03934 	movhi	r3,228
  826d40:	18e7c204 	addi	r3,r3,-24824
  826d44:	10800f24 	muli	r2,r2,60
  826d48:	10c5883a 	add	r2,r2,r3
  826d4c:	10800d04 	addi	r2,r2,52
  826d50:	10800017 	ldw	r2,0(r2)
  826d54:	1004c03a 	cmpne	r2,r2,zero
  826d58:	10000d1e 	bne	r2,zero,826d90 <dhc_upcall+0x318>
            {
               dtrap(); /* didn't receive server-identifier option */
  826d5c:	082a7c80 	call	82a7c8 <dtrap>
               dsc_errors++;
  826d60:	d0a09817 	ldw	r2,-32160(gp)
  826d64:	10800044 	addi	r2,r2,1
  826d68:	d0a09815 	stw	r2,-32160(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
  826d6c:	e13ff617 	ldw	r4,-40(fp)
  826d70:	e0bffb17 	ldw	r2,-20(fp)
  826d74:	11400717 	ldw	r5,28(r2)
  826d78:	00c03934 	movhi	r3,228
  826d7c:	18e7c204 	addi	r3,r3,-24824
  826d80:	20800f24 	muli	r2,r4,60
  826d84:	10c5883a 	add	r2,r2,r3
  826d88:	10800d04 	addi	r2,r2,52
  826d8c:	11400015 	stw	r5,0(r2)
            }

            if (bp->hops)
  826d90:	e0bffa17 	ldw	r2,-24(fp)
  826d94:	108000c3 	ldbu	r2,3(r2)
  826d98:	10803fcc 	andi	r2,r2,255
  826d9c:	1005003a 	cmpeq	r2,r2,zero
  826da0:	10000a1e 	bne	r2,zero,826dcc <dhc_upcall+0x354>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
  826da4:	e13ff617 	ldw	r4,-40(fp)
  826da8:	e0bffb17 	ldw	r2,-20(fp)
  826dac:	11400717 	ldw	r5,28(r2)
  826db0:	00c03934 	movhi	r3,228
  826db4:	18e7c204 	addi	r3,r3,-24824
  826db8:	20800f24 	muli	r2,r4,60
  826dbc:	10c5883a 	add	r2,r2,r3
  826dc0:	10800c04 	addi	r2,r2,48
  826dc4:	11400015 	stw	r5,0(r2)
  826dc8:	00000706 	br	826de8 <dhc_upcall+0x370>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
  826dcc:	e0bff617 	ldw	r2,-40(fp)
  826dd0:	00c03934 	movhi	r3,228
  826dd4:	18e7c204 	addi	r3,r3,-24824
  826dd8:	10800f24 	muli	r2,r2,60
  826ddc:	10c5883a 	add	r2,r2,r3
  826de0:	10800c04 	addi	r2,r2,48
  826de4:	10000015 	stw	zero,0(r2)

            e = dhc_rx_offer(iface,bp,pkt->nb_plen);     /* send request */
  826de8:	e0bffb17 	ldw	r2,-20(fp)
  826dec:	11800417 	ldw	r6,16(r2)
  826df0:	e13ff617 	ldw	r4,-40(fp)
  826df4:	e17ffa17 	ldw	r5,-24(fp)
  826df8:	08279dc0 	call	8279dc <dhc_rx_offer>
  826dfc:	e0bff715 	stw	r2,-36(fp)
            if (e)
  826e00:	e0bff717 	ldw	r2,-36(fp)
  826e04:	1005003a 	cmpeq	r2,r2,zero
  826e08:	10000a1e 	bne	r2,zero,826e34 <dhc_upcall+0x3bc>
            {
               dsc_errors++;
  826e0c:	d0a09817 	ldw	r2,-32160(gp)
  826e10:	10800044 	addi	r2,r2,1
  826e14:	d0a09815 	stw	r2,-32160(gp)
               dhc_set_state(iface,DHCS_INIT);
  826e18:	e13ff617 	ldw	r4,-40(fp)
  826e1c:	01400044 	movi	r5,1
  826e20:	08297780 	call	829778 <dhc_set_state>
               dtrap();
  826e24:	082a7c80 	call	82a7c8 <dtrap>
               return ENP_NOT_MINE;
  826e28:	00c00084 	movi	r3,2
  826e2c:	e0fffe15 	stw	r3,-8(fp)
  826e30:	00011606 	br	82728c <dhc_upcall+0x814>
            }
            else
               dhc_set_state(iface,DHCS_REQUESTING);
  826e34:	e13ff617 	ldw	r4,-40(fp)
  826e38:	01400144 	movi	r5,5
  826e3c:	08297780 	call	829778 <dhc_set_state>
            dsc_errors++;
            if ( dhcptype == DHCP_NAK ) 
               dsc_naks++;
            return ENP_NOT_MINE;
         }
         break;
  826e40:	00010f06 	br	827280 <dhc_upcall+0x808>
             * Report an error and remain in SELECTING state, so that 
             * an OFFER packet from another DHCP server can be 
             * accepted. If we timeout waiting for a OFFER packet, 
             * then dhc_second() will transition to DHCS_INIT state. 
             */
            dsc_errors++;
  826e44:	d0a09817 	ldw	r2,-32160(gp)
  826e48:	10800044 	addi	r2,r2,1
  826e4c:	d0a09815 	stw	r2,-32160(gp)
            if ( dhcptype == DHCP_NAK ) 
  826e50:	e0bff817 	ldw	r2,-32(fp)
  826e54:	10800198 	cmpnei	r2,r2,6
  826e58:	1000031e 	bne	r2,zero,826e68 <dhc_upcall+0x3f0>
               dsc_naks++;
  826e5c:	d0a0a017 	ldw	r2,-32128(gp)
  826e60:	10800044 	addi	r2,r2,1
  826e64:	d0a0a015 	stw	r2,-32128(gp)
            return ENP_NOT_MINE;
  826e68:	01000084 	movi	r4,2
  826e6c:	e13ffe15 	stw	r4,-8(fp)
  826e70:	00010606 	br	82728c <dhc_upcall+0x814>
      case DHCS_RENEWING:
         /* If the ACK/NACK is not from the same server which sent 
          * the OFFER packet, then discard it. in DHCS_REBOOTING 
          * state, srv_ipaddr is 0. Hence don't check in that state 
          */
         if ( dhc_states[iface].srv_ipaddr != 
  826e74:	e0bff617 	ldw	r2,-40(fp)
  826e78:	00c03934 	movhi	r3,228
  826e7c:	18e7c204 	addi	r3,r3,-24824
  826e80:	10800f24 	muli	r2,r2,60
  826e84:	10c5883a 	add	r2,r2,r3
  826e88:	10800d04 	addi	r2,r2,52
  826e8c:	14000017 	ldw	r16,0(r2)
  826e90:	e0bffa17 	ldw	r2,-24(fp)
  826e94:	10803b04 	addi	r2,r2,236
  826e98:	11000104 	addi	r4,r2,4
  826e9c:	08268e80 	call	8268e8 <dhc_get_srv_ipaddr>
  826ea0:	80800626 	beq	r16,r2,826ebc <dhc_upcall+0x444>
             dhc_get_srv_ipaddr(&bp->options[4]) )
         {
            dsc_errors++;
  826ea4:	d0a09817 	ldw	r2,-32160(gp)
  826ea8:	10800044 	addi	r2,r2,1
  826eac:	d0a09815 	stw	r2,-32160(gp)
            return ENP_NOT_MINE;
  826eb0:	00800084 	movi	r2,2
  826eb4:	e0bffe15 	stw	r2,-8(fp)
  826eb8:	0000f406 	br	82728c <dhc_upcall+0x814>
         }
         if (dhc_states[iface].rly_ipaddr &&
  826ebc:	e0bff617 	ldw	r2,-40(fp)
  826ec0:	00c03934 	movhi	r3,228
  826ec4:	18e7c204 	addi	r3,r3,-24824
  826ec8:	10800f24 	muli	r2,r2,60
  826ecc:	10c5883a 	add	r2,r2,r3
  826ed0:	10800c04 	addi	r2,r2,48
  826ed4:	10800017 	ldw	r2,0(r2)
  826ed8:	1005003a 	cmpeq	r2,r2,zero
  826edc:	1000131e 	bne	r2,zero,826f2c <dhc_upcall+0x4b4>
  826ee0:	e0bff617 	ldw	r2,-40(fp)
  826ee4:	00c03934 	movhi	r3,228
  826ee8:	18e7c204 	addi	r3,r3,-24824
  826eec:	10800f24 	muli	r2,r2,60
  826ef0:	10c5883a 	add	r2,r2,r3
  826ef4:	10800c04 	addi	r2,r2,48
  826ef8:	10c00017 	ldw	r3,0(r2)
  826efc:	e0bffb17 	ldw	r2,-20(fp)
  826f00:	10800717 	ldw	r2,28(r2)
  826f04:	18800926 	beq	r3,r2,826f2c <dhc_upcall+0x4b4>
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
         {
            dsc_rlyerrs++;
  826f08:	d0a0a317 	ldw	r2,-32116(gp)
  826f0c:	10800044 	addi	r2,r2,1
  826f10:	d0a0a315 	stw	r2,-32116(gp)
            dsc_errors++;
  826f14:	d0a09817 	ldw	r2,-32160(gp)
  826f18:	10800044 	addi	r2,r2,1
  826f1c:	d0a09815 	stw	r2,-32160(gp)
            return ENP_NOT_MINE;
  826f20:	00c00084 	movi	r3,2
  826f24:	e0fffe15 	stw	r3,-8(fp)
  826f28:	0000d806 	br	82728c <dhc_upcall+0x814>
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
  826f2c:	e0bff817 	ldw	r2,-32(fp)
  826f30:	10800158 	cmpnei	r2,r2,5
  826f34:	1000891e 	bne	r2,zero,82715c <dhc_upcall+0x6e4>
         {
            dsc_acks++;
  826f38:	d0a09c17 	ldw	r2,-32144(gp)
  826f3c:	10800044 	addi	r2,r2,1
  826f40:	d0a09c15 	stw	r2,-32144(gp)
            dhc_extract_opts(iface,&bp->options[4]);
  826f44:	e0bffa17 	ldw	r2,-24(fp)
  826f48:	10803b04 	addi	r2,r2,236
  826f4c:	11400104 	addi	r5,r2,4
  826f50:	e13ff617 	ldw	r4,-40(fp)
  826f54:	0828b640 	call	828b64 <dhc_extract_opts>
            if ( dhc_states[iface].lease == DHC_INFINITY )
  826f58:	e0bff617 	ldw	r2,-40(fp)
  826f5c:	00c03934 	movhi	r3,228
  826f60:	18e7c204 	addi	r3,r3,-24824
  826f64:	10800f24 	muli	r2,r2,60
  826f68:	10c5883a 	add	r2,r2,r3
  826f6c:	10800504 	addi	r2,r2,20
  826f70:	10800017 	ldw	r2,0(r2)
  826f74:	10bfffd8 	cmpnei	r2,r2,-1
  826f78:	1000111e 	bne	r2,zero,826fc0 <dhc_upcall+0x548>
            {
               dhc_states[iface].t1 = DHC_INFINITY ;
  826f7c:	e0bff617 	ldw	r2,-40(fp)
  826f80:	00c03934 	movhi	r3,228
  826f84:	18e7c204 	addi	r3,r3,-24824
  826f88:	10800f24 	muli	r2,r2,60
  826f8c:	10c5883a 	add	r2,r2,r3
  826f90:	10c00604 	addi	r3,r2,24
  826f94:	00bfffc4 	movi	r2,-1
  826f98:	18800015 	stw	r2,0(r3)
               dhc_states[iface].t2 = DHC_INFINITY ;
  826f9c:	e0bff617 	ldw	r2,-40(fp)
  826fa0:	00c03934 	movhi	r3,228
  826fa4:	18e7c204 	addi	r3,r3,-24824
  826fa8:	10800f24 	muli	r2,r2,60
  826fac:	10c5883a 	add	r2,r2,r3
  826fb0:	10c00704 	addi	r3,r2,28
  826fb4:	00bfffc4 	movi	r2,-1
  826fb8:	18800015 	stw	r2,0(r3)
  826fbc:	00001f06 	br	82703c <dhc_upcall+0x5c4>
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
  826fc0:	e17ff617 	ldw	r5,-40(fp)
  826fc4:	e0bff617 	ldw	r2,-40(fp)
  826fc8:	00c03934 	movhi	r3,228
  826fcc:	18e7c204 	addi	r3,r3,-24824
  826fd0:	10800f24 	muli	r2,r2,60
  826fd4:	10c5883a 	add	r2,r2,r3
  826fd8:	10800504 	addi	r2,r2,20
  826fdc:	10800017 	ldw	r2,0(r2)
  826fe0:	1008d07a 	srli	r4,r2,1
  826fe4:	00c03934 	movhi	r3,228
  826fe8:	18e7c204 	addi	r3,r3,-24824
  826fec:	28800f24 	muli	r2,r5,60
  826ff0:	10c5883a 	add	r2,r2,r3
  826ff4:	10800604 	addi	r2,r2,24
  826ff8:	11000015 	stw	r4,0(r2)
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
  826ffc:	e17ff617 	ldw	r5,-40(fp)
  827000:	e0bff617 	ldw	r2,-40(fp)
  827004:	00c03934 	movhi	r3,228
  827008:	18e7c204 	addi	r3,r3,-24824
  82700c:	10800f24 	muli	r2,r2,60
  827010:	10c5883a 	add	r2,r2,r3
  827014:	10800504 	addi	r2,r2,20
  827018:	10800017 	ldw	r2,0(r2)
  82701c:	1004d0fa 	srli	r2,r2,3
  827020:	110001e4 	muli	r4,r2,7
  827024:	00c03934 	movhi	r3,228
  827028:	18e7c204 	addi	r3,r3,-24824
  82702c:	28800f24 	muli	r2,r5,60
  827030:	10c5883a 	add	r2,r2,r3
  827034:	10800704 	addi	r2,r2,28
  827038:	11000015 	stw	r4,0(r2)
            }
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
  82703c:	e13ff617 	ldw	r4,-40(fp)
  827040:	00802174 	movhi	r2,133
  827044:	10832604 	addi	r2,r2,3224
  827048:	11400017 	ldw	r5,0(r2)
  82704c:	00c03934 	movhi	r3,228
  827050:	18e7c204 	addi	r3,r3,-24824
  827054:	20800f24 	muli	r2,r4,60
  827058:	10c5883a 	add	r2,r2,r3
  82705c:	10800804 	addi	r2,r2,32
  827060:	11400015 	stw	r5,0(r2)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
  827064:	e43ff617 	ldw	r16,-40(fp)
  827068:	e0bffa17 	ldw	r2,-24(fp)
  82706c:	10803b04 	addi	r2,r2,236
  827070:	11000104 	addi	r4,r2,4
  827074:	08268e80 	call	8268e8 <dhc_get_srv_ipaddr>
  827078:	1009883a 	mov	r4,r2
  82707c:	00c03934 	movhi	r3,228
  827080:	18e7c204 	addi	r3,r3,-24824
  827084:	80800f24 	muli	r2,r16,60
  827088:	10c5883a 	add	r2,r2,r3
  82708c:	10800d04 	addi	r2,r2,52
  827090:	11000015 	stw	r4,0(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
  827094:	e0bff617 	ldw	r2,-40(fp)
  827098:	00c03934 	movhi	r3,228
  82709c:	18e7c204 	addi	r3,r3,-24824
  8270a0:	10800f24 	muli	r2,r2,60
  8270a4:	10c5883a 	add	r2,r2,r3
  8270a8:	10800d04 	addi	r2,r2,52
  8270ac:	10800017 	ldw	r2,0(r2)
  8270b0:	1004c03a 	cmpne	r2,r2,zero
  8270b4:	10000d1e 	bne	r2,zero,8270ec <dhc_upcall+0x674>
            {
               dtrap(); /* didn't receive server-identifier option */
  8270b8:	082a7c80 	call	82a7c8 <dtrap>
               dsc_errors++;
  8270bc:	d0a09817 	ldw	r2,-32160(gp)
  8270c0:	10800044 	addi	r2,r2,1
  8270c4:	d0a09815 	stw	r2,-32160(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
  8270c8:	e13ff617 	ldw	r4,-40(fp)
  8270cc:	e0bffb17 	ldw	r2,-20(fp)
  8270d0:	11400717 	ldw	r5,28(r2)
  8270d4:	00c03934 	movhi	r3,228
  8270d8:	18e7c204 	addi	r3,r3,-24824
  8270dc:	20800f24 	muli	r2,r4,60
  8270e0:	10c5883a 	add	r2,r2,r3
  8270e4:	10800d04 	addi	r2,r2,52
  8270e8:	11400015 	stw	r5,0(r2)
            }
            if (bp->hops)
  8270ec:	e0bffa17 	ldw	r2,-24(fp)
  8270f0:	108000c3 	ldbu	r2,3(r2)
  8270f4:	10803fcc 	andi	r2,r2,255
  8270f8:	1005003a 	cmpeq	r2,r2,zero
  8270fc:	10000a1e 	bne	r2,zero,827128 <dhc_upcall+0x6b0>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
  827100:	e13ff617 	ldw	r4,-40(fp)
  827104:	e0bffb17 	ldw	r2,-20(fp)
  827108:	11400717 	ldw	r5,28(r2)
  82710c:	00c03934 	movhi	r3,228
  827110:	18e7c204 	addi	r3,r3,-24824
  827114:	20800f24 	muli	r2,r4,60
  827118:	10c5883a 	add	r2,r2,r3
  82711c:	10800c04 	addi	r2,r2,48
  827120:	11400015 	stw	r5,0(r2)
  827124:	00000706 	br	827144 <dhc_upcall+0x6cc>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
  827128:	e0bff617 	ldw	r2,-40(fp)
  82712c:	00c03934 	movhi	r3,228
  827130:	18e7c204 	addi	r3,r3,-24824
  827134:	10800f24 	muli	r2,r2,60
  827138:	10c5883a 	add	r2,r2,r3
  82713c:	10800c04 	addi	r2,r2,48
  827140:	10000015 	stw	zero,0(r2)

            dhc_setip(iface);
  827144:	e13ff617 	ldw	r4,-40(fp)
  827148:	082861c0 	call	82861c <dhc_setip>
            dhc_set_state(iface,DHCS_BOUND);
  82714c:	e13ff617 	ldw	r4,-40(fp)
  827150:	01400184 	movi	r5,6
  827154:	08297780 	call	829778 <dhc_set_state>
  827158:	00004906 	br	827280 <dhc_upcall+0x808>
         }
         else if ( dhcptype == DHCP_NAK ) /* Server denied our request */
  82715c:	e0bff817 	ldw	r2,-32(fp)
  827160:	10800198 	cmpnei	r2,r2,6
  827164:	1000071e 	bne	r2,zero,827184 <dhc_upcall+0x70c>
         {
            dhc_set_state(iface,DHCS_INIT);
  827168:	e13ff617 	ldw	r4,-40(fp)
  82716c:	01400044 	movi	r5,1
  827170:	08297780 	call	829778 <dhc_set_state>
            dsc_naks++;
  827174:	d0a0a017 	ldw	r2,-32128(gp)
  827178:	10800044 	addi	r2,r2,1
  82717c:	d0a0a015 	stw	r2,-32128(gp)
  827180:	00003f06 	br	827280 <dhc_upcall+0x808>
         {
            /* In REQUESTING state, we might receive a retransmitted
             * OFFER, which we should discard, but it's not an error,
             * so we log it.
             */
            if ((dhc_states[iface].state == DHCS_REQUESTING) &&
  827184:	e0bff617 	ldw	r2,-40(fp)
  827188:	00c03934 	movhi	r3,228
  82718c:	18e7c204 	addi	r3,r3,-24824
  827190:	10800f24 	muli	r2,r2,60
  827194:	10c5883a 	add	r2,r2,r3
  827198:	10800017 	ldw	r2,0(r2)
  82719c:	10800158 	cmpnei	r2,r2,5
  8271a0:	1000091e 	bne	r2,zero,8271c8 <dhc_upcall+0x750>
  8271a4:	e0bff817 	ldw	r2,-32(fp)
  8271a8:	10800098 	cmpnei	r2,r2,2
  8271ac:	1000061e 	bne	r2,zero,8271c8 <dhc_upcall+0x750>
                (dhcptype == DHCP_OFFER))
            {
               dsc_offers++;
  8271b0:	d0a09a17 	ldw	r2,-32152(gp)
  8271b4:	10800044 	addi	r2,r2,1
  8271b8:	d0a09a15 	stw	r2,-32152(gp)
               return ENP_NOT_MINE;
  8271bc:	01000084 	movi	r4,2
  8271c0:	e13ffe15 	stw	r4,-8(fp)
  8271c4:	00003106 	br	82728c <dhc_upcall+0x814>
             * only receive ACK or NAK, and in REQUESTING state we
             * should only receive ACK or NAK or OFFER; these are
             * accounted for above, so we log whatever this is as an
             * error and discard it with no change to our state.
             */
            dsc_errors++;
  8271c8:	d0a09817 	ldw	r2,-32160(gp)
  8271cc:	10800044 	addi	r2,r2,1
  8271d0:	d0a09815 	stw	r2,-32160(gp)
            return ENP_NOT_MINE;
  8271d4:	00800084 	movi	r2,2
  8271d8:	e0bffe15 	stw	r2,-8(fp)
  8271dc:	00002b06 	br	82728c <dhc_upcall+0x814>
         }
         break;
      default:    /* bad state */
         dtrap();
  8271e0:	082a7c80 	call	82a7c8 <dtrap>
         dhc_set_state(iface,DHCS_INIT);
  8271e4:	e13ff617 	ldw	r4,-40(fp)
  8271e8:	01400044 	movi	r5,1
  8271ec:	08297780 	call	829778 <dhc_set_state>
         dsc_errors++;
  8271f0:	d0a09817 	ldw	r2,-32160(gp)
  8271f4:	10800044 	addi	r2,r2,1
  8271f8:	d0a09815 	stw	r2,-32160(gp)
         return -1;
  8271fc:	00ffffc4 	movi	r3,-1
  827200:	e0fffe15 	stw	r3,-8(fp)
  827204:	00002106 	br	82728c <dhc_upcall+0x814>
      }
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
  827208:	d0a09d17 	ldw	r2,-32140(gp)
  82720c:	10800044 	addi	r2,r2,1
  827210:	d0a09d15 	stw	r2,-32140(gp)
      dhc_extract_opts(iface,&bp->options[4]);
  827214:	e0bffa17 	ldw	r2,-24(fp)
  827218:	10803b04 	addi	r2,r2,236
  82721c:	11400104 	addi	r5,r2,4
  827220:	e13ff617 	ldw	r4,-40(fp)
  827224:	0828b640 	call	828b64 <dhc_extract_opts>
      dhc_states[iface].ipaddr = bp->yiaddr;
  827228:	e13ff617 	ldw	r4,-40(fp)
  82722c:	e0bffa17 	ldw	r2,-24(fp)
  827230:	11400417 	ldw	r5,16(r2)
  827234:	00c03934 	movhi	r3,228
  827238:	18e7c204 	addi	r3,r3,-24824
  82723c:	20800f24 	muli	r2,r4,60
  827240:	10c5883a 	add	r2,r2,r3
  827244:	10800904 	addi	r2,r2,36
  827248:	11400015 	stw	r5,0(r2)
      dhc_setip(iface);
  82724c:	e13ff617 	ldw	r4,-40(fp)
  827250:	082861c0 	call	82861c <dhc_setip>

      /* Set values so that DHCP State Machine remains happy */
      dhc_set_state(iface,DHCS_BOUND);
  827254:	e13ff617 	ldw	r4,-40(fp)
  827258:	01400184 	movi	r5,6
  82725c:	08297780 	call	829778 <dhc_set_state>
      dhc_states[iface].t1    = DHC_INFINITY ;
  827260:	e0bff617 	ldw	r2,-40(fp)
  827264:	00c03934 	movhi	r3,228
  827268:	18e7c204 	addi	r3,r3,-24824
  82726c:	10800f24 	muli	r2,r2,60
  827270:	10c5883a 	add	r2,r2,r3
  827274:	10c00604 	addi	r3,r2,24
  827278:	00bfffc4 	movi	r2,-1
  82727c:	18800015 	stw	r2,0(r3)
   }

   udp_free(pkt);
  827280:	e13ffb17 	ldw	r4,-20(fp)
  827284:	0843ef80 	call	843ef8 <udp_free>
   return 0;
  827288:	e03ffe15 	stw	zero,-8(fp)
  82728c:	e0bffe17 	ldw	r2,-8(fp)
}
  827290:	e037883a 	mov	sp,fp
  827294:	dfc00217 	ldw	ra,8(sp)
  827298:	df000117 	ldw	fp,4(sp)
  82729c:	dc000017 	ldw	r16,0(sp)
  8272a0:	dec00304 	addi	sp,sp,12
  8272a4:	f800283a 	ret

008272a8 <dhc_buildheader>:
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
  8272a8:	defff804 	addi	sp,sp,-32
  8272ac:	dfc00715 	stw	ra,28(sp)
  8272b0:	df000615 	stw	fp,24(sp)
  8272b4:	df000604 	addi	fp,sp,24
  8272b8:	e13ffb15 	stw	r4,-20(fp)
  8272bc:	e17ffc15 	stw	r5,-16(fp)
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
  8272c0:	e0bffc17 	ldw	r2,-16(fp)
  8272c4:	1009883a 	mov	r4,r2
  8272c8:	01804b04 	movi	r6,300
  8272cc:	000b883a 	mov	r5,zero
  8272d0:	08074b80 	call	8074b8 <memset>
   outbp->op = BOOTREQUEST;
  8272d4:	e0fffc17 	ldw	r3,-16(fp)
  8272d8:	00800044 	movi	r2,1
  8272dc:	18800005 	stb	r2,0(r3)

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
  8272e0:	e0bffb17 	ldw	r2,-20(fp)
  8272e4:	00c03934 	movhi	r3,228
  8272e8:	18e79c04 	addi	r3,r3,-24976
  8272ec:	1085883a 	add	r2,r2,r2
  8272f0:	1085883a 	add	r2,r2,r2
  8272f4:	10c5883a 	add	r2,r2,r3
  8272f8:	10800017 	ldw	r2,0(r2)
  8272fc:	10802717 	ldw	r2,156(r2)
  827300:	10800217 	ldw	r2,8(r2)
  827304:	e0bfff15 	stw	r2,-4(fp)
  827308:	e0ffff17 	ldw	r3,-4(fp)
  82730c:	188005e0 	cmpeqi	r2,r3,23
  827310:	10000b1e 	bne	r2,zero,827340 <dhc_buildheader+0x98>
  827314:	e0ffff17 	ldw	r3,-4(fp)
  827318:	18800720 	cmpeqi	r2,r3,28
  82731c:	1000081e 	bne	r2,zero,827340 <dhc_buildheader+0x98>
  827320:	e0ffff17 	ldw	r3,-4(fp)
  827324:	188001a0 	cmpeqi	r2,r3,6
  827328:	1000011e 	bne	r2,zero,827330 <dhc_buildheader+0x88>
  82732c:	00000806 	br	827350 <dhc_buildheader+0xa8>
   {
   case ETHERNET:       /* ETHERNET defined in net.h */
      outbp->htype = ETHHWTYPE;  /* defined in dhcp.h */
  827330:	e0fffc17 	ldw	r3,-16(fp)
  827334:	00800044 	movi	r2,1
  827338:	18800045 	stb	r2,1(r3)
   break;
  82733c:	00000806 	br	827360 <dhc_buildheader+0xb8>
   case PPP:
   case SLIP:
      outbp->htype = LINEHWTYPE;    /* line type for PPP or SLIP */
  827340:	e0fffc17 	ldw	r3,-16(fp)
  827344:	00800504 	movi	r2,20
  827348:	18800045 	stb	r2,1(r3)
   break;
  82734c:	00000406 	br	827360 <dhc_buildheader+0xb8>
      default:
      dtrap();
  827350:	082a7c80 	call	82a7c8 <dtrap>
      return ENP_LOGIC;             /* this shouldn't happen */
  827354:	00bffd44 	movi	r2,-11
  827358:	e0bffe15 	stw	r2,-8(fp)
  82735c:	00005306 	br	8274ac <dhc_buildheader+0x204>
   }

   addrlen = min(16, nets[iface]->n_hal);
  827360:	e0bffb17 	ldw	r2,-20(fp)
  827364:	00c03934 	movhi	r3,228
  827368:	18e79c04 	addi	r3,r3,-24976
  82736c:	1085883a 	add	r2,r2,r2
  827370:	1085883a 	add	r2,r2,r2
  827374:	10c5883a 	add	r2,r2,r3
  827378:	10800017 	ldw	r2,0(r2)
  82737c:	10801117 	ldw	r2,68(r2)
  827380:	e0bffd15 	stw	r2,-12(fp)
  827384:	e0fffd17 	ldw	r3,-12(fp)
  827388:	18800470 	cmpltui	r2,r3,17
  82738c:	1000021e 	bne	r2,zero,827398 <dhc_buildheader+0xf0>
  827390:	00800404 	movi	r2,16
  827394:	e0bffd15 	stw	r2,-12(fp)
  827398:	e0fffd17 	ldw	r3,-12(fp)
  82739c:	e0fffa15 	stw	r3,-24(fp)
   outbp->hlen = (u_char)addrlen;
  8273a0:	e0bffa17 	ldw	r2,-24(fp)
  8273a4:	1007883a 	mov	r3,r2
  8273a8:	e0bffc17 	ldw	r2,-16(fp)
  8273ac:	10c00085 	stb	r3,2(r2)
   outbp->hops = 0;
  8273b0:	e0bffc17 	ldw	r2,-16(fp)
  8273b4:	100000c5 	stb	zero,3(r2)
   if(dhc_states[iface].state == DHCS_RENEWING) 
  8273b8:	e0bffb17 	ldw	r2,-20(fp)
  8273bc:	00c03934 	movhi	r3,228
  8273c0:	18e7c204 	addi	r3,r3,-24824
  8273c4:	10800f24 	muli	r2,r2,60
  8273c8:	10c5883a 	add	r2,r2,r3
  8273cc:	10800017 	ldw	r2,0(r2)
  8273d0:	108001d8 	cmpnei	r2,r2,7
  8273d4:	1000031e 	bne	r2,zero,8273e4 <dhc_buildheader+0x13c>
      outbp->flags = 0; /* Renewing needs unicast */
  8273d8:	e0bffc17 	ldw	r2,-16(fp)
  8273dc:	1000028d 	sth	zero,10(r2)
  8273e0:	00000306 	br	8273f0 <dhc_buildheader+0x148>
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
  8273e4:	e0fffc17 	ldw	r3,-16(fp)
  8273e8:	00802004 	movi	r2,128
  8273ec:	1880028d 	sth	r2,10(r3)
   outbp->xid = dhc_states[iface].xid;
  8273f0:	e0bffb17 	ldw	r2,-20(fp)
  8273f4:	00c03934 	movhi	r3,228
  8273f8:	18e7c204 	addi	r3,r3,-24824
  8273fc:	10800f24 	muli	r2,r2,60
  827400:	10c5883a 	add	r2,r2,r3
  827404:	10800204 	addi	r2,r2,8
  827408:	10c00017 	ldw	r3,0(r2)
  82740c:	e0bffc17 	ldw	r2,-16(fp)
  827410:	10c00115 	stw	r3,4(r2)
   outbp->secs = dhc_states[iface].secs;
  827414:	e0bffb17 	ldw	r2,-20(fp)
  827418:	00c03934 	movhi	r3,228
  82741c:	18e7c204 	addi	r3,r3,-24824
  827420:	10800f24 	muli	r2,r2,60
  827424:	10c5883a 	add	r2,r2,r3
  827428:	10800304 	addi	r2,r2,12
  82742c:	10c0000b 	ldhu	r3,0(r2)
  827430:	e0bffc17 	ldw	r2,-16(fp)
  827434:	10c0020d 	sth	r3,8(r2)
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
  827438:	e0bffb17 	ldw	r2,-20(fp)
  82743c:	00c03934 	movhi	r3,228
  827440:	18e79c04 	addi	r3,r3,-24976
  827444:	1085883a 	add	r2,r2,r2
  827448:	1085883a 	add	r2,r2,r2
  82744c:	10c5883a 	add	r2,r2,r3
  827450:	10800017 	ldw	r2,0(r2)
  827454:	10801717 	ldw	r2,92(r2)
  827458:	1004c03a 	cmpne	r2,r2,zero
  82745c:	1000041e 	bne	r2,zero,827470 <dhc_buildheader+0x1c8>
   {
      dtrap();
  827460:	082a7c80 	call	82a7c8 <dtrap>
      return ENP_LOGIC;
  827464:	00bffd44 	movi	r2,-11
  827468:	e0bffe15 	stw	r2,-8(fp)
  82746c:	00000f06 	br	8274ac <dhc_buildheader+0x204>
   }
#endif
   MEMCPY(outbp->chaddr, nets[iface]->mib.ifPhysAddress, addrlen);
  827470:	e0bffc17 	ldw	r2,-16(fp)
  827474:	11000704 	addi	r4,r2,28
  827478:	e0bffb17 	ldw	r2,-20(fp)
  82747c:	00c03934 	movhi	r3,228
  827480:	18e79c04 	addi	r3,r3,-24976
  827484:	1085883a 	add	r2,r2,r2
  827488:	1085883a 	add	r2,r2,r2
  82748c:	10c5883a 	add	r2,r2,r3
  827490:	10800017 	ldw	r2,0(r2)
  827494:	10801717 	ldw	r2,92(r2)
  827498:	e0fffa17 	ldw	r3,-24(fp)
  82749c:	100b883a 	mov	r5,r2
  8274a0:	180d883a 	mov	r6,r3
  8274a4:	08073380 	call	807338 <memcpy>

   /* return success */
   return 0;
  8274a8:	e03ffe15 	stw	zero,-8(fp)
  8274ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8274b0:	e037883a 	mov	sp,fp
  8274b4:	dfc00117 	ldw	ra,4(sp)
  8274b8:	df000017 	ldw	fp,0(sp)
  8274bc:	dec00204 	addi	sp,sp,8
  8274c0:	f800283a 	ret

008274c4 <dhc_discover>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
  8274c4:	defff404 	addi	sp,sp,-48
  8274c8:	dfc00b15 	stw	ra,44(sp)
  8274cc:	df000a15 	stw	fp,40(sp)
  8274d0:	dc000915 	stw	r16,36(sp)
  8274d4:	df000904 	addi	fp,sp,36
  8274d8:	e13ffe15 	stw	r4,-8(fp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
  8274dc:	01004b04 	movi	r4,300
  8274e0:	000b883a 	mov	r5,zero
  8274e4:	0843e0c0 	call	843e0c <udp_alloc>
  8274e8:	e0bffb15 	stw	r2,-20(fp)
   if (!pkt) 
  8274ec:	e0bffb17 	ldw	r2,-20(fp)
  8274f0:	1004c03a 	cmpne	r2,r2,zero
  8274f4:	1000031e 	bne	r2,zero,827504 <dhc_discover+0x40>
      return ENP_NOMEM;
  8274f8:	00bffb04 	movi	r2,-20
  8274fc:	e0bfff15 	stw	r2,-4(fp)
  827500:	00012f06 	br	8279c0 <dhc_discover+0x4fc>
   pkt->nb_plen = sizeof(struct bootp);
  827504:	e0fffb17 	ldw	r3,-20(fp)
  827508:	00804b04 	movi	r2,300
  82750c:	18800415 	stw	r2,16(r3)

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
  827510:	e0bffe17 	ldw	r2,-8(fp)
  827514:	d1203b17 	ldw	r4,-32532(gp)
  827518:	200b883a 	mov	r5,r4
  82751c:	00c03934 	movhi	r3,228
  827520:	18e7c204 	addi	r3,r3,-24824
  827524:	10800f24 	muli	r2,r2,60
  827528:	10c5883a 	add	r2,r2,r3
  82752c:	10800204 	addi	r2,r2,8
  827530:	11400015 	stw	r5,0(r2)
  827534:	20800044 	addi	r2,r4,1
  827538:	d0a03b15 	stw	r2,-32532(gp)
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
  82753c:	e43ffe17 	ldw	r16,-8(fp)
  827540:	083b45c0 	call	83b45c <sysuptime>
  827544:	1009883a 	mov	r4,r2
  827548:	01401904 	movi	r5,100
  82754c:	08053b80 	call	8053b8 <__udivsi3>
  827550:	1009883a 	mov	r4,r2
  827554:	00c03934 	movhi	r3,228
  827558:	18e7c204 	addi	r3,r3,-24824
  82755c:	80800f24 	muli	r2,r16,60
  827560:	10c5883a 	add	r2,r2,r3
  827564:	10800304 	addi	r2,r2,12
  827568:	1100000d 	sth	r4,0(r2)

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
  82756c:	e0bffb17 	ldw	r2,-20(fp)
  827570:	10800317 	ldw	r2,12(r2)
  827574:	e0bffa15 	stw	r2,-24(fp)
   e = dhc_buildheader(iface,outbp);
  827578:	e13ffe17 	ldw	r4,-8(fp)
  82757c:	e17ffa17 	ldw	r5,-24(fp)
  827580:	08272a80 	call	8272a8 <dhc_buildheader>
  827584:	e0bff815 	stw	r2,-32(fp)
   if (e)
  827588:	e0bff817 	ldw	r2,-32(fp)
  82758c:	1005003a 	cmpeq	r2,r2,zero
  827590:	1000031e 	bne	r2,zero,8275a0 <dhc_discover+0xdc>
      return e;
  827594:	e0bff817 	ldw	r2,-32(fp)
  827598:	e0bfff15 	stw	r2,-4(fp)
  82759c:	00010806 	br	8279c0 <dhc_discover+0x4fc>

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
  8275a0:	e0bffa17 	ldw	r2,-24(fp)
  8275a4:	10803b04 	addi	r2,r2,236
  8275a8:	1007883a 	mov	r3,r2
  8275ac:	0098d534 	movhi	r2,25428
  8275b0:	10a098c4 	addi	r2,r2,-32157
  8275b4:	18800015 	stw	r2,0(r3)
   opts = &outbp->options[4];    /* encode options after cookie */
  8275b8:	e0bffa17 	ldw	r2,-24(fp)
  8275bc:	10803b04 	addi	r2,r2,236
  8275c0:	10800104 	addi	r2,r2,4
  8275c4:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHOP_TYPE;
  8275c8:	e0fff917 	ldw	r3,-28(fp)
  8275cc:	00800d44 	movi	r2,53
  8275d0:	18800005 	stb	r2,0(r3)
  8275d4:	e0bff917 	ldw	r2,-28(fp)
  8275d8:	10800044 	addi	r2,r2,1
  8275dc:	e0bff915 	stw	r2,-28(fp)
   *opts++ = 1;   /* length of option field */
  8275e0:	e0fff917 	ldw	r3,-28(fp)
  8275e4:	00800044 	movi	r2,1
  8275e8:	18800005 	stb	r2,0(r3)
  8275ec:	e0bff917 	ldw	r2,-28(fp)
  8275f0:	10800044 	addi	r2,r2,1
  8275f4:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHCP_DISCOVER;
  8275f8:	e0fff917 	ldw	r3,-28(fp)
  8275fc:	00800044 	movi	r2,1
  827600:	18800005 	stb	r2,0(r3)
  827604:	e0bff917 	ldw	r2,-28(fp)
  827608:	10800044 	addi	r2,r2,1
  82760c:	e0bff915 	stw	r2,-28(fp)
   leasetime = -1L ;    /* ask for infinite lease */
  827610:	00bfffc4 	movi	r2,-1
  827614:	e0bffc15 	stw	r2,-16(fp)
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
  827618:	e0fff917 	ldw	r3,-28(fp)
  82761c:	00800cc4 	movi	r2,51
  827620:	18800005 	stb	r2,0(r3)
  827624:	e0bff917 	ldw	r2,-28(fp)
  827628:	10800044 	addi	r2,r2,1
  82762c:	e0bff915 	stw	r2,-28(fp)
  827630:	e0fff917 	ldw	r3,-28(fp)
  827634:	00800104 	movi	r2,4
  827638:	18800005 	stb	r2,0(r3)
  82763c:	e0bff917 	ldw	r2,-28(fp)
  827640:	10800044 	addi	r2,r2,1
  827644:	e0bff915 	stw	r2,-28(fp)
  827648:	e0bff917 	ldw	r2,-28(fp)
  82764c:	10c000c4 	addi	r3,r2,3
  827650:	e0bffc04 	addi	r2,fp,-16
  827654:	10800003 	ldbu	r2,0(r2)
  827658:	18800005 	stb	r2,0(r3)
  82765c:	e0bff917 	ldw	r2,-28(fp)
  827660:	10c00084 	addi	r3,r2,2
  827664:	e0bffc04 	addi	r2,fp,-16
  827668:	10800044 	addi	r2,r2,1
  82766c:	10800003 	ldbu	r2,0(r2)
  827670:	18800005 	stb	r2,0(r3)
  827674:	e0bff917 	ldw	r2,-28(fp)
  827678:	10c00044 	addi	r3,r2,1
  82767c:	e0bffc04 	addi	r2,fp,-16
  827680:	10800084 	addi	r2,r2,2
  827684:	10800003 	ldbu	r2,0(r2)
  827688:	18800005 	stb	r2,0(r3)
  82768c:	e0bffc04 	addi	r2,fp,-16
  827690:	108000c4 	addi	r2,r2,3
  827694:	10800003 	ldbu	r2,0(r2)
  827698:	1007883a 	mov	r3,r2
  82769c:	e0bff917 	ldw	r2,-28(fp)
  8276a0:	10c00005 	stb	r3,0(r2)
  8276a4:	e0bff917 	ldw	r2,-28(fp)
  8276a8:	10800104 	addi	r2,r2,4
  8276ac:	e0bff915 	stw	r2,-28(fp)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
  8276b0:	e0bffe17 	ldw	r2,-8(fp)
  8276b4:	00c03934 	movhi	r3,228
  8276b8:	18e79c04 	addi	r3,r3,-24976
  8276bc:	1085883a 	add	r2,r2,r2
  8276c0:	1085883a 	add	r2,r2,r2
  8276c4:	10c5883a 	add	r2,r2,r3
  8276c8:	10800017 	ldw	r2,0(r2)
  8276cc:	10800a17 	ldw	r2,40(r2)
  8276d0:	1005003a 	cmpeq	r2,r2,zero
  8276d4:	1000521e 	bne	r2,zero,827820 <dhc_discover+0x35c>
   {
      ip_addr my_ip = htonl(nets[iface]->n_ipaddr);
  8276d8:	e0bffe17 	ldw	r2,-8(fp)
  8276dc:	00c03934 	movhi	r3,228
  8276e0:	18e79c04 	addi	r3,r3,-24976
  8276e4:	1085883a 	add	r2,r2,r2
  8276e8:	1085883a 	add	r2,r2,r2
  8276ec:	10c5883a 	add	r2,r2,r3
  8276f0:	10800017 	ldw	r2,0(r2)
  8276f4:	10800a17 	ldw	r2,40(r2)
  8276f8:	1004d63a 	srli	r2,r2,24
  8276fc:	11003fcc 	andi	r4,r2,255
  827700:	e0bffe17 	ldw	r2,-8(fp)
  827704:	00c03934 	movhi	r3,228
  827708:	18e79c04 	addi	r3,r3,-24976
  82770c:	1085883a 	add	r2,r2,r2
  827710:	1085883a 	add	r2,r2,r2
  827714:	10c5883a 	add	r2,r2,r3
  827718:	10800017 	ldw	r2,0(r2)
  82771c:	10800a17 	ldw	r2,40(r2)
  827720:	1004d23a 	srli	r2,r2,8
  827724:	10bfc00c 	andi	r2,r2,65280
  827728:	2088b03a 	or	r4,r4,r2
  82772c:	e0bffe17 	ldw	r2,-8(fp)
  827730:	00c03934 	movhi	r3,228
  827734:	18e79c04 	addi	r3,r3,-24976
  827738:	1085883a 	add	r2,r2,r2
  82773c:	1085883a 	add	r2,r2,r2
  827740:	10c5883a 	add	r2,r2,r3
  827744:	10800017 	ldw	r2,0(r2)
  827748:	10800a17 	ldw	r2,40(r2)
  82774c:	10bfc00c 	andi	r2,r2,65280
  827750:	1004923a 	slli	r2,r2,8
  827754:	2088b03a 	or	r4,r4,r2
  827758:	e0bffe17 	ldw	r2,-8(fp)
  82775c:	00c03934 	movhi	r3,228
  827760:	18e79c04 	addi	r3,r3,-24976
  827764:	1085883a 	add	r2,r2,r2
  827768:	1085883a 	add	r2,r2,r2
  82776c:	10c5883a 	add	r2,r2,r3
  827770:	10800017 	ldw	r2,0(r2)
  827774:	10800a17 	ldw	r2,40(r2)
  827778:	10803fcc 	andi	r2,r2,255
  82777c:	1004963a 	slli	r2,r2,24
  827780:	2084b03a 	or	r2,r4,r2
  827784:	e0bffd15 	stw	r2,-12(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, my_ip);
  827788:	e0fff917 	ldw	r3,-28(fp)
  82778c:	00800c84 	movi	r2,50
  827790:	18800005 	stb	r2,0(r3)
  827794:	e0bff917 	ldw	r2,-28(fp)
  827798:	10800044 	addi	r2,r2,1
  82779c:	e0bff915 	stw	r2,-28(fp)
  8277a0:	e0fff917 	ldw	r3,-28(fp)
  8277a4:	00800104 	movi	r2,4
  8277a8:	18800005 	stb	r2,0(r3)
  8277ac:	e0bff917 	ldw	r2,-28(fp)
  8277b0:	10800044 	addi	r2,r2,1
  8277b4:	e0bff915 	stw	r2,-28(fp)
  8277b8:	e0bff917 	ldw	r2,-28(fp)
  8277bc:	10c000c4 	addi	r3,r2,3
  8277c0:	e0bffd04 	addi	r2,fp,-12
  8277c4:	10800003 	ldbu	r2,0(r2)
  8277c8:	18800005 	stb	r2,0(r3)
  8277cc:	e0bff917 	ldw	r2,-28(fp)
  8277d0:	10c00084 	addi	r3,r2,2
  8277d4:	e0bffd04 	addi	r2,fp,-12
  8277d8:	10800044 	addi	r2,r2,1
  8277dc:	10800003 	ldbu	r2,0(r2)
  8277e0:	18800005 	stb	r2,0(r3)
  8277e4:	e0bff917 	ldw	r2,-28(fp)
  8277e8:	10c00044 	addi	r3,r2,1
  8277ec:	e0bffd04 	addi	r2,fp,-12
  8277f0:	10800084 	addi	r2,r2,2
  8277f4:	10800003 	ldbu	r2,0(r2)
  8277f8:	18800005 	stb	r2,0(r3)
  8277fc:	e0bffd04 	addi	r2,fp,-12
  827800:	108000c4 	addi	r2,r2,3
  827804:	10800003 	ldbu	r2,0(r2)
  827808:	1007883a 	mov	r3,r2
  82780c:	e0bff917 	ldw	r2,-28(fp)
  827810:	10c00005 	stb	r3,0(r2)
  827814:	e0bff917 	ldw	r2,-28(fp)
  827818:	10800104 	addi	r2,r2,4
  82781c:	e0bff915 	stw	r2,-28(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
  827820:	d0a03d17 	ldw	r2,-32524(gp)
  827824:	10800050 	cmplti	r2,r2,1
  827828:	10001e1e 	bne	r2,zero,8278a4 <dhc_discover+0x3e0>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
  82782c:	e0fff917 	ldw	r3,-28(fp)
  827830:	00800dc4 	movi	r2,55
  827834:	18800005 	stb	r2,0(r3)
  827838:	e0bff917 	ldw	r2,-28(fp)
  82783c:	10800044 	addi	r2,r2,1
  827840:	e0bff915 	stw	r2,-28(fp)
      *opts++ = (u_char)reqlist_len ;
  827844:	d0a03d17 	ldw	r2,-32524(gp)
  827848:	1007883a 	mov	r3,r2
  82784c:	e0bff917 	ldw	r2,-28(fp)
  827850:	10c00005 	stb	r3,0(r2)
  827854:	e0bff917 	ldw	r2,-28(fp)
  827858:	10800044 	addi	r2,r2,1
  82785c:	e0bff915 	stw	r2,-28(fp)

      for (i=0 ; i < reqlist_len ; i++ )
  827860:	e03ff715 	stw	zero,-36(fp)
  827864:	00000c06 	br	827898 <dhc_discover+0x3d4>
         *opts++ = reqlist[i];
  827868:	e0fff717 	ldw	r3,-36(fp)
  82786c:	d0a03c04 	addi	r2,gp,-32528
  827870:	1885883a 	add	r2,r3,r2
  827874:	10c00003 	ldbu	r3,0(r2)
  827878:	e0bff917 	ldw	r2,-28(fp)
  82787c:	10c00005 	stb	r3,0(r2)
  827880:	e0bff917 	ldw	r2,-28(fp)
  827884:	10800044 	addi	r2,r2,1
  827888:	e0bff915 	stw	r2,-28(fp)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
  82788c:	e0bff717 	ldw	r2,-36(fp)
  827890:	10800044 	addi	r2,r2,1
  827894:	e0bff715 	stw	r2,-36(fp)
  827898:	d0e03d17 	ldw	r3,-32524(gp)
  82789c:	e0bff717 	ldw	r2,-36(fp)
  8278a0:	10fff116 	blt	r2,r3,827868 <dhc_discover+0x3a4>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   *opts++ = DHOP_END;
  8278a4:	e0fff917 	ldw	r3,-28(fp)
  8278a8:	00bfffc4 	movi	r2,-1
  8278ac:	18800005 	stb	r2,0(r3)
  8278b0:	e0bff917 	ldw	r2,-28(fp)
  8278b4:	10800044 	addi	r2,r2,1
  8278b8:	e0bff915 	stw	r2,-28(fp)

   /* last_tick needs to be set in case we are doing a retry. It 
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;
  8278bc:	e13ffe17 	ldw	r4,-8(fp)
  8278c0:	00802174 	movhi	r2,133
  8278c4:	10832604 	addi	r2,r2,3224
  8278c8:	11400017 	ldw	r5,0(r2)
  8278cc:	00c03934 	movhi	r3,228
  8278d0:	18e7c204 	addi	r3,r3,-24824
  8278d4:	20800f24 	muli	r2,r4,60
  8278d8:	10c5883a 	add	r2,r2,r3
  8278dc:	10800404 	addi	r2,r2,16
  8278e0:	11400015 	stw	r5,0(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
  8278e4:	e0fffb17 	ldw	r3,-20(fp)
  8278e8:	00bfffc4 	movi	r2,-1
  8278ec:	18800715 	stw	r2,28(r3)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
  8278f0:	e0bffe17 	ldw	r2,-8(fp)
  8278f4:	00c03934 	movhi	r3,228
  8278f8:	18e79c04 	addi	r3,r3,-24976
  8278fc:	1085883a 	add	r2,r2,r2
  827900:	1085883a 	add	r2,r2,r2
  827904:	10c5883a 	add	r2,r2,r3
  827908:	10c00017 	ldw	r3,0(r2)
  82790c:	e0bffb17 	ldw	r2,-20(fp)
  827910:	10c00615 	stw	r3,24(r2)

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
  827914:	e0bffe17 	ldw	r2,-8(fp)
  827918:	00c03934 	movhi	r3,228
  82791c:	18e7c204 	addi	r3,r3,-24824
  827920:	10800f24 	muli	r2,r2,60
  827924:	10c5883a 	add	r2,r2,r3
  827928:	10800017 	ldw	r2,0(r2)
  82792c:	10800120 	cmpeqi	r2,r2,4
  827930:	1000031e 	bne	r2,zero,827940 <dhc_discover+0x47c>
      dhc_set_state(iface, DHCS_SELECTING);
  827934:	e13ffe17 	ldw	r4,-8(fp)
  827938:	01400104 	movi	r5,4
  82793c:	08297780 	call	829778 <dhc_set_state>

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
  827940:	010010c4 	movi	r4,67
  827944:	01401104 	movi	r5,68
  827948:	e1bffb17 	ldw	r6,-20(fp)
  82794c:	08439540 	call	843954 <udp_send>
   dsc_discovers++;
  827950:	d0a09917 	ldw	r2,-32156(gp)
  827954:	10800044 	addi	r2,r2,1
  827958:	d0a09915 	stw	r2,-32156(gp)

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
  82795c:	e13ffe17 	ldw	r4,-8(fp)
  827960:	00802174 	movhi	r2,133
  827964:	10832604 	addi	r2,r2,3224
  827968:	11400017 	ldw	r5,0(r2)
  82796c:	00c03934 	movhi	r3,228
  827970:	18e7c204 	addi	r3,r3,-24824
  827974:	20800f24 	muli	r2,r4,60
  827978:	10c5883a 	add	r2,r2,r3
  82797c:	10800404 	addi	r2,r2,16
  827980:	11400015 	stw	r5,0(r2)
   dhc_states[iface].tries++;
  827984:	e17ffe17 	ldw	r5,-8(fp)
  827988:	00c03934 	movhi	r3,228
  82798c:	18e7c204 	addi	r3,r3,-24824
  827990:	28800f24 	muli	r2,r5,60
  827994:	10c5883a 	add	r2,r2,r3
  827998:	10800104 	addi	r2,r2,4
  82799c:	10800017 	ldw	r2,0(r2)
  8279a0:	11000044 	addi	r4,r2,1
  8279a4:	00c03934 	movhi	r3,228
  8279a8:	18e7c204 	addi	r3,r3,-24824
  8279ac:	28800f24 	muli	r2,r5,60
  8279b0:	10c5883a 	add	r2,r2,r3
  8279b4:	10800104 	addi	r2,r2,4
  8279b8:	11000015 	stw	r4,0(r2)

   return 0;
  8279bc:	e03fff15 	stw	zero,-4(fp)
  8279c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8279c4:	e037883a 	mov	sp,fp
  8279c8:	dfc00217 	ldw	ra,8(sp)
  8279cc:	df000117 	ldw	fp,4(sp)
  8279d0:	dc000017 	ldw	r16,0(sp)
  8279d4:	dec00304 	addi	sp,sp,12
  8279d8:	f800283a 	ret

008279dc <dhc_rx_offer>:
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
  8279dc:	defff804 	addi	sp,sp,-32
  8279e0:	dfc00715 	stw	ra,28(sp)
  8279e4:	df000615 	stw	fp,24(sp)
  8279e8:	df000604 	addi	fp,sp,24
  8279ec:	e13ffc15 	stw	r4,-16(fp)
  8279f0:	e17ffd15 	stw	r5,-12(fp)
  8279f4:	e1bffe15 	stw	r6,-8(fp)
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
  8279f8:	e0bffc17 	ldw	r2,-16(fp)
  8279fc:	00c03934 	movhi	r3,228
  827a00:	18e7c204 	addi	r3,r3,-24824
  827a04:	10800f24 	muli	r2,r2,60
  827a08:	10c5883a 	add	r2,r2,r3
  827a0c:	10800204 	addi	r2,r2,8
  827a10:	10c00017 	ldw	r3,0(r2)
  827a14:	e0bffd17 	ldw	r2,-12(fp)
  827a18:	10800117 	ldw	r2,4(r2)
  827a1c:	18800326 	beq	r3,r2,827a2c <dhc_rx_offer+0x50>
      return ENP_NOT_MINE;
  827a20:	00800084 	movi	r2,2
  827a24:	e0bfff15 	stw	r2,-4(fp)
  827a28:	00002706 	br	827ac8 <dhc_rx_offer+0xec>

   opts = &bp->options[4];    /* examine options after cookie */
  827a2c:	e0bffd17 	ldw	r2,-12(fp)
  827a30:	10803b04 	addi	r2,r2,236
  827a34:	10800104 	addi	r2,r2,4
  827a38:	e0bffb15 	stw	r2,-20(fp)
   e = dhc_extract_opts(iface,opts);
  827a3c:	e13ffc17 	ldw	r4,-16(fp)
  827a40:	e17ffb17 	ldw	r5,-20(fp)
  827a44:	0828b640 	call	828b64 <dhc_extract_opts>
  827a48:	e0bffa15 	stw	r2,-24(fp)
   if (e)   /* parse error? */
  827a4c:	e0bffa17 	ldw	r2,-24(fp)
  827a50:	1005003a 	cmpeq	r2,r2,zero
  827a54:	1000041e 	bne	r2,zero,827a68 <dhc_rx_offer+0x8c>
   {
      dtrap();
  827a58:	082a7c80 	call	82a7c8 <dtrap>
      return e;
  827a5c:	e0bffa17 	ldw	r2,-24(fp)
  827a60:	e0bfff15 	stw	r2,-4(fp)
  827a64:	00001806 	br	827ac8 <dhc_rx_offer+0xec>
   }
   if (!bp->yiaddr)  /* require an IP address */
  827a68:	e0bffd17 	ldw	r2,-12(fp)
  827a6c:	10800417 	ldw	r2,16(r2)
  827a70:	1004c03a 	cmpne	r2,r2,zero
  827a74:	1000071e 	bne	r2,zero,827a94 <dhc_rx_offer+0xb8>
   {
      dhc_decline(iface,bp, bplen);
  827a78:	e13ffc17 	ldw	r4,-16(fp)
  827a7c:	e17ffd17 	ldw	r5,-12(fp)
  827a80:	e1bffe17 	ldw	r6,-8(fp)
  827a84:	08289800 	call	828980 <dhc_decline>
      return ENP_NOT_MINE;
  827a88:	00800084 	movi	r2,2
  827a8c:	e0bfff15 	stw	r2,-4(fp)
  827a90:	00000d06 	br	827ac8 <dhc_rx_offer+0xec>
   }
   dhc_states[iface].ipaddr = bp->yiaddr;
  827a94:	e13ffc17 	ldw	r4,-16(fp)
  827a98:	e0bffd17 	ldw	r2,-12(fp)
  827a9c:	11400417 	ldw	r5,16(r2)
  827aa0:	00c03934 	movhi	r3,228
  827aa4:	18e7c204 	addi	r3,r3,-24824
  827aa8:	20800f24 	muli	r2,r4,60
  827aac:	10c5883a 	add	r2,r2,r3
  827ab0:	10800904 	addi	r2,r2,36
  827ab4:	11400015 	stw	r5,0(r2)

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
  827ab8:	e13ffc17 	ldw	r4,-16(fp)
  827abc:	000b883a 	mov	r5,zero
  827ac0:	0827ae00 	call	827ae0 <dhc_request>
  827ac4:	e0bfff15 	stw	r2,-4(fp)
  827ac8:	e0bfff17 	ldw	r2,-4(fp)
}
  827acc:	e037883a 	mov	sp,fp
  827ad0:	dfc00117 	ldw	ra,4(sp)
  827ad4:	df000017 	ldw	fp,0(sp)
  827ad8:	dec00204 	addi	sp,sp,8
  827adc:	f800283a 	ret

00827ae0 <dhc_request>:
 * RETURNS:  Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_request(int iface,int xid_flag)
{
  827ae0:	defff304 	addi	sp,sp,-52
  827ae4:	dfc00c15 	stw	ra,48(sp)
  827ae8:	df000b15 	stw	fp,44(sp)
  827aec:	df000b04 	addi	fp,sp,44
  827af0:	e13ffd15 	stw	r4,-12(fp)
  827af4:	e17ffe15 	stw	r5,-8(fp)
   u_char  *   opts; /* scratch pointer to DHCP options field */
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
  827af8:	01008904 	movi	r4,548
  827afc:	000b883a 	mov	r5,zero
  827b00:	0843e0c0 	call	843e0c <udp_alloc>
  827b04:	e0bffa15 	stw	r2,-24(fp)
   if (!pkt) 
  827b08:	e0bffa17 	ldw	r2,-24(fp)
  827b0c:	1004c03a 	cmpne	r2,r2,zero
  827b10:	1000031e 	bne	r2,zero,827b20 <dhc_request+0x40>
      return ENP_NOMEM;
  827b14:	00bffb04 	movi	r2,-20
  827b18:	e0bfff15 	stw	r2,-4(fp)
  827b1c:	0002b906 	br	828604 <dhc_request+0xb24>
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;
  827b20:	e0fffa17 	ldw	r3,-24(fp)
  827b24:	00803b04 	movi	r2,236
  827b28:	18800415 	stw	r2,16(r3)

   if ( xid_flag == TRUE )
  827b2c:	e0bffe17 	ldw	r2,-8(fp)
  827b30:	10800058 	cmpnei	r2,r2,1
  827b34:	1000121e 	bne	r2,zero,827b80 <dhc_request+0xa0>
   {
      dhc_states[iface].xid  = xids++;
  827b38:	e0bffd17 	ldw	r2,-12(fp)
  827b3c:	d1203b17 	ldw	r4,-32532(gp)
  827b40:	200b883a 	mov	r5,r4
  827b44:	00c03934 	movhi	r3,228
  827b48:	18e7c204 	addi	r3,r3,-24824
  827b4c:	10800f24 	muli	r2,r2,60
  827b50:	10c5883a 	add	r2,r2,r3
  827b54:	10800204 	addi	r2,r2,8
  827b58:	11400015 	stw	r5,0(r2)
  827b5c:	20800044 	addi	r2,r4,1
  827b60:	d0a03b15 	stw	r2,-32532(gp)
      dhc_states[iface].secs = 0;
  827b64:	e0bffd17 	ldw	r2,-12(fp)
  827b68:	00c03934 	movhi	r3,228
  827b6c:	18e7c204 	addi	r3,r3,-24824
  827b70:	10800f24 	muli	r2,r2,60
  827b74:	10c5883a 	add	r2,r2,r3
  827b78:	10800304 	addi	r2,r2,12
  827b7c:	1000000d 	sth	zero,0(r2)
   }

   /* build a BOOTP request header */
   outbp = (struct bootp *)pkt->nb_prot;
  827b80:	e0bffa17 	ldw	r2,-24(fp)
  827b84:	10800317 	ldw	r2,12(r2)
  827b88:	e0bffb15 	stw	r2,-20(fp)
   e     = dhc_buildheader(iface,outbp);
  827b8c:	e13ffd17 	ldw	r4,-12(fp)
  827b90:	e17ffb17 	ldw	r5,-20(fp)
  827b94:	08272a80 	call	8272a8 <dhc_buildheader>
  827b98:	e0bff815 	stw	r2,-32(fp)
   if (e)
  827b9c:	e0bff817 	ldw	r2,-32(fp)
  827ba0:	1005003a 	cmpeq	r2,r2,zero
  827ba4:	1000031e 	bne	r2,zero,827bb4 <dhc_request+0xd4>
      return e;
  827ba8:	e0bff817 	ldw	r2,-32(fp)
  827bac:	e0bfff15 	stw	r2,-4(fp)
  827bb0:	00029406 	br	828604 <dhc_request+0xb24>

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
  827bb4:	e0bffb17 	ldw	r2,-20(fp)
  827bb8:	10803b04 	addi	r2,r2,236
  827bbc:	1007883a 	mov	r3,r2
  827bc0:	0098d534 	movhi	r2,25428
  827bc4:	10a098c4 	addi	r2,r2,-32157
  827bc8:	18800015 	stw	r2,0(r3)
   opts    = &outbp->options[4];    /* encode options after cookie */
  827bcc:	e0bffb17 	ldw	r2,-20(fp)
  827bd0:	10803b04 	addi	r2,r2,236
  827bd4:	10800104 	addi	r2,r2,4
  827bd8:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHOP_TYPE;
  827bdc:	e0fff917 	ldw	r3,-28(fp)
  827be0:	00800d44 	movi	r2,53
  827be4:	18800005 	stb	r2,0(r3)
  827be8:	e0bff917 	ldw	r2,-28(fp)
  827bec:	10800044 	addi	r2,r2,1
  827bf0:	e0bff915 	stw	r2,-28(fp)
   *opts++ = 1;   /* length of option field */
  827bf4:	e0fff917 	ldw	r3,-28(fp)
  827bf8:	00800044 	movi	r2,1
  827bfc:	18800005 	stb	r2,0(r3)
  827c00:	e0bff917 	ldw	r2,-28(fp)
  827c04:	10800044 	addi	r2,r2,1
  827c08:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHCP_REQUEST;
  827c0c:	e0fff917 	ldw	r3,-28(fp)
  827c10:	008000c4 	movi	r2,3
  827c14:	18800005 	stb	r2,0(r3)
  827c18:	e0bff917 	ldw	r2,-28(fp)
  827c1c:	10800044 	addi	r2,r2,1
  827c20:	e0bff915 	stw	r2,-28(fp)

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
  827c24:	e0bffd17 	ldw	r2,-12(fp)
  827c28:	00c03934 	movhi	r3,228
  827c2c:	18e7c204 	addi	r3,r3,-24824
  827c30:	10800f24 	muli	r2,r2,60
  827c34:	10c5883a 	add	r2,r2,r3
  827c38:	10800017 	ldw	r2,0(r2)
  827c3c:	10800120 	cmpeqi	r2,r2,4
  827c40:	1000181e 	bne	r2,zero,827ca4 <dhc_request+0x1c4>
  827c44:	e0bffd17 	ldw	r2,-12(fp)
  827c48:	00c03934 	movhi	r3,228
  827c4c:	18e7c204 	addi	r3,r3,-24824
  827c50:	10800f24 	muli	r2,r2,60
  827c54:	10c5883a 	add	r2,r2,r3
  827c58:	10800017 	ldw	r2,0(r2)
  827c5c:	10800160 	cmpeqi	r2,r2,5
  827c60:	1000101e 	bne	r2,zero,827ca4 <dhc_request+0x1c4>
  827c64:	e0bffd17 	ldw	r2,-12(fp)
  827c68:	00c03934 	movhi	r3,228
  827c6c:	18e7c204 	addi	r3,r3,-24824
  827c70:	10800f24 	muli	r2,r2,60
  827c74:	10c5883a 	add	r2,r2,r3
  827c78:	10800017 	ldw	r2,0(r2)
  827c7c:	108000e0 	cmpeqi	r2,r2,3
  827c80:	1000081e 	bne	r2,zero,827ca4 <dhc_request+0x1c4>
  827c84:	e0bffd17 	ldw	r2,-12(fp)
  827c88:	00c03934 	movhi	r3,228
  827c8c:	18e7c204 	addi	r3,r3,-24824
  827c90:	10800f24 	muli	r2,r2,60
  827c94:	10c5883a 	add	r2,r2,r3
  827c98:	10800017 	ldw	r2,0(r2)
  827c9c:	10800098 	cmpnei	r2,r2,2
  827ca0:	10004e1e 	bne	r2,zero,827ddc <dhc_request+0x2fc>
       (dhc_states[iface].state == DHCS_REQUESTING) ||
       (dhc_states[iface].state == DHCS_REBOOTING) ||
       (dhc_states[iface].state == DHCS_INITREBOOT))
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
  827ca4:	e0bffd17 	ldw	r2,-12(fp)
  827ca8:	00c03934 	movhi	r3,228
  827cac:	18e7c204 	addi	r3,r3,-24824
  827cb0:	10800f24 	muli	r2,r2,60
  827cb4:	10c5883a 	add	r2,r2,r3
  827cb8:	10800904 	addi	r2,r2,36
  827cbc:	10800017 	ldw	r2,0(r2)
  827cc0:	1004d63a 	srli	r2,r2,24
  827cc4:	11003fcc 	andi	r4,r2,255
  827cc8:	e0bffd17 	ldw	r2,-12(fp)
  827ccc:	00c03934 	movhi	r3,228
  827cd0:	18e7c204 	addi	r3,r3,-24824
  827cd4:	10800f24 	muli	r2,r2,60
  827cd8:	10c5883a 	add	r2,r2,r3
  827cdc:	10800904 	addi	r2,r2,36
  827ce0:	10800017 	ldw	r2,0(r2)
  827ce4:	1004d23a 	srli	r2,r2,8
  827ce8:	10bfc00c 	andi	r2,r2,65280
  827cec:	2088b03a 	or	r4,r4,r2
  827cf0:	e0bffd17 	ldw	r2,-12(fp)
  827cf4:	00c03934 	movhi	r3,228
  827cf8:	18e7c204 	addi	r3,r3,-24824
  827cfc:	10800f24 	muli	r2,r2,60
  827d00:	10c5883a 	add	r2,r2,r3
  827d04:	10800904 	addi	r2,r2,36
  827d08:	10800017 	ldw	r2,0(r2)
  827d0c:	10bfc00c 	andi	r2,r2,65280
  827d10:	1004923a 	slli	r2,r2,8
  827d14:	2088b03a 	or	r4,r4,r2
  827d18:	e0bffd17 	ldw	r2,-12(fp)
  827d1c:	00c03934 	movhi	r3,228
  827d20:	18e7c204 	addi	r3,r3,-24824
  827d24:	10800f24 	muli	r2,r2,60
  827d28:	10c5883a 	add	r2,r2,r3
  827d2c:	10800904 	addi	r2,r2,36
  827d30:	10800017 	ldw	r2,0(r2)
  827d34:	10803fcc 	andi	r2,r2,255
  827d38:	1004963a 	slli	r2,r2,24
  827d3c:	2084b03a 	or	r2,r4,r2
  827d40:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
  827d44:	e0fff917 	ldw	r3,-28(fp)
  827d48:	00800c84 	movi	r2,50
  827d4c:	18800005 	stb	r2,0(r3)
  827d50:	e0bff917 	ldw	r2,-28(fp)
  827d54:	10800044 	addi	r2,r2,1
  827d58:	e0bff915 	stw	r2,-28(fp)
  827d5c:	e0fff917 	ldw	r3,-28(fp)
  827d60:	00800104 	movi	r2,4
  827d64:	18800005 	stb	r2,0(r3)
  827d68:	e0bff917 	ldw	r2,-28(fp)
  827d6c:	10800044 	addi	r2,r2,1
  827d70:	e0bff915 	stw	r2,-28(fp)
  827d74:	e0bff917 	ldw	r2,-28(fp)
  827d78:	10c000c4 	addi	r3,r2,3
  827d7c:	e0bffc04 	addi	r2,fp,-16
  827d80:	10800003 	ldbu	r2,0(r2)
  827d84:	18800005 	stb	r2,0(r3)
  827d88:	e0bff917 	ldw	r2,-28(fp)
  827d8c:	10c00084 	addi	r3,r2,2
  827d90:	e0bffc04 	addi	r2,fp,-16
  827d94:	10800044 	addi	r2,r2,1
  827d98:	10800003 	ldbu	r2,0(r2)
  827d9c:	18800005 	stb	r2,0(r3)
  827da0:	e0bff917 	ldw	r2,-28(fp)
  827da4:	10c00044 	addi	r3,r2,1
  827da8:	e0bffc04 	addi	r2,fp,-16
  827dac:	10800084 	addi	r2,r2,2
  827db0:	10800003 	ldbu	r2,0(r2)
  827db4:	18800005 	stb	r2,0(r3)
  827db8:	e0bffc04 	addi	r2,fp,-16
  827dbc:	108000c4 	addi	r2,r2,3
  827dc0:	10800003 	ldbu	r2,0(r2)
  827dc4:	1007883a 	mov	r3,r2
  827dc8:	e0bff917 	ldw	r2,-28(fp)
  827dcc:	10c00005 	stb	r3,0(r2)
  827dd0:	e0bff917 	ldw	r2,-28(fp)
  827dd4:	10800104 	addi	r2,r2,4
  827dd8:	e0bff915 	stw	r2,-28(fp)
   }
   if (dhc_states[iface].snmask)
  827ddc:	e0bffd17 	ldw	r2,-12(fp)
  827de0:	00c03934 	movhi	r3,228
  827de4:	18e7c204 	addi	r3,r3,-24824
  827de8:	10800f24 	muli	r2,r2,60
  827dec:	10c5883a 	add	r2,r2,r3
  827df0:	10800a04 	addi	r2,r2,40
  827df4:	10800017 	ldw	r2,0(r2)
  827df8:	1005003a 	cmpeq	r2,r2,zero
  827dfc:	10004e1e 	bne	r2,zero,827f38 <dhc_request+0x458>
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
  827e00:	e0bffd17 	ldw	r2,-12(fp)
  827e04:	00c03934 	movhi	r3,228
  827e08:	18e7c204 	addi	r3,r3,-24824
  827e0c:	10800f24 	muli	r2,r2,60
  827e10:	10c5883a 	add	r2,r2,r3
  827e14:	10800a04 	addi	r2,r2,40
  827e18:	10800017 	ldw	r2,0(r2)
  827e1c:	1004d63a 	srli	r2,r2,24
  827e20:	11003fcc 	andi	r4,r2,255
  827e24:	e0bffd17 	ldw	r2,-12(fp)
  827e28:	00c03934 	movhi	r3,228
  827e2c:	18e7c204 	addi	r3,r3,-24824
  827e30:	10800f24 	muli	r2,r2,60
  827e34:	10c5883a 	add	r2,r2,r3
  827e38:	10800a04 	addi	r2,r2,40
  827e3c:	10800017 	ldw	r2,0(r2)
  827e40:	1004d23a 	srli	r2,r2,8
  827e44:	10bfc00c 	andi	r2,r2,65280
  827e48:	2088b03a 	or	r4,r4,r2
  827e4c:	e0bffd17 	ldw	r2,-12(fp)
  827e50:	00c03934 	movhi	r3,228
  827e54:	18e7c204 	addi	r3,r3,-24824
  827e58:	10800f24 	muli	r2,r2,60
  827e5c:	10c5883a 	add	r2,r2,r3
  827e60:	10800a04 	addi	r2,r2,40
  827e64:	10800017 	ldw	r2,0(r2)
  827e68:	10bfc00c 	andi	r2,r2,65280
  827e6c:	1004923a 	slli	r2,r2,8
  827e70:	2088b03a 	or	r4,r4,r2
  827e74:	e0bffd17 	ldw	r2,-12(fp)
  827e78:	00c03934 	movhi	r3,228
  827e7c:	18e7c204 	addi	r3,r3,-24824
  827e80:	10800f24 	muli	r2,r2,60
  827e84:	10c5883a 	add	r2,r2,r3
  827e88:	10800a04 	addi	r2,r2,40
  827e8c:	10800017 	ldw	r2,0(r2)
  827e90:	10803fcc 	andi	r2,r2,255
  827e94:	1004963a 	slli	r2,r2,24
  827e98:	2084b03a 	or	r2,r4,r2
  827e9c:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
  827ea0:	e0fff917 	ldw	r3,-28(fp)
  827ea4:	00800044 	movi	r2,1
  827ea8:	18800005 	stb	r2,0(r3)
  827eac:	e0bff917 	ldw	r2,-28(fp)
  827eb0:	10800044 	addi	r2,r2,1
  827eb4:	e0bff915 	stw	r2,-28(fp)
  827eb8:	e0fff917 	ldw	r3,-28(fp)
  827ebc:	00800104 	movi	r2,4
  827ec0:	18800005 	stb	r2,0(r3)
  827ec4:	e0bff917 	ldw	r2,-28(fp)
  827ec8:	10800044 	addi	r2,r2,1
  827ecc:	e0bff915 	stw	r2,-28(fp)
  827ed0:	e0bff917 	ldw	r2,-28(fp)
  827ed4:	10c000c4 	addi	r3,r2,3
  827ed8:	e0bffc04 	addi	r2,fp,-16
  827edc:	10800003 	ldbu	r2,0(r2)
  827ee0:	18800005 	stb	r2,0(r3)
  827ee4:	e0bff917 	ldw	r2,-28(fp)
  827ee8:	10c00084 	addi	r3,r2,2
  827eec:	e0bffc04 	addi	r2,fp,-16
  827ef0:	10800044 	addi	r2,r2,1
  827ef4:	10800003 	ldbu	r2,0(r2)
  827ef8:	18800005 	stb	r2,0(r3)
  827efc:	e0bff917 	ldw	r2,-28(fp)
  827f00:	10c00044 	addi	r3,r2,1
  827f04:	e0bffc04 	addi	r2,fp,-16
  827f08:	10800084 	addi	r2,r2,2
  827f0c:	10800003 	ldbu	r2,0(r2)
  827f10:	18800005 	stb	r2,0(r3)
  827f14:	e0bffc04 	addi	r2,fp,-16
  827f18:	108000c4 	addi	r2,r2,3
  827f1c:	10800003 	ldbu	r2,0(r2)
  827f20:	1007883a 	mov	r3,r2
  827f24:	e0bff917 	ldw	r2,-28(fp)
  827f28:	10c00005 	stb	r3,0(r2)
  827f2c:	e0bff917 	ldw	r2,-28(fp)
  827f30:	10800104 	addi	r2,r2,4
  827f34:	e0bff915 	stw	r2,-28(fp)
   }
   if (dhc_states[iface].defgw)
  827f38:	e0bffd17 	ldw	r2,-12(fp)
  827f3c:	00c03934 	movhi	r3,228
  827f40:	18e7c204 	addi	r3,r3,-24824
  827f44:	10800f24 	muli	r2,r2,60
  827f48:	10c5883a 	add	r2,r2,r3
  827f4c:	10800b04 	addi	r2,r2,44
  827f50:	10800017 	ldw	r2,0(r2)
  827f54:	1005003a 	cmpeq	r2,r2,zero
  827f58:	10004e1e 	bne	r2,zero,828094 <dhc_request+0x5b4>
   {
      opt_ip = ntohl(dhc_states[iface].defgw);
  827f5c:	e0bffd17 	ldw	r2,-12(fp)
  827f60:	00c03934 	movhi	r3,228
  827f64:	18e7c204 	addi	r3,r3,-24824
  827f68:	10800f24 	muli	r2,r2,60
  827f6c:	10c5883a 	add	r2,r2,r3
  827f70:	10800b04 	addi	r2,r2,44
  827f74:	10800017 	ldw	r2,0(r2)
  827f78:	1004d63a 	srli	r2,r2,24
  827f7c:	11003fcc 	andi	r4,r2,255
  827f80:	e0bffd17 	ldw	r2,-12(fp)
  827f84:	00c03934 	movhi	r3,228
  827f88:	18e7c204 	addi	r3,r3,-24824
  827f8c:	10800f24 	muli	r2,r2,60
  827f90:	10c5883a 	add	r2,r2,r3
  827f94:	10800b04 	addi	r2,r2,44
  827f98:	10800017 	ldw	r2,0(r2)
  827f9c:	1004d23a 	srli	r2,r2,8
  827fa0:	10bfc00c 	andi	r2,r2,65280
  827fa4:	2088b03a 	or	r4,r4,r2
  827fa8:	e0bffd17 	ldw	r2,-12(fp)
  827fac:	00c03934 	movhi	r3,228
  827fb0:	18e7c204 	addi	r3,r3,-24824
  827fb4:	10800f24 	muli	r2,r2,60
  827fb8:	10c5883a 	add	r2,r2,r3
  827fbc:	10800b04 	addi	r2,r2,44
  827fc0:	10800017 	ldw	r2,0(r2)
  827fc4:	10bfc00c 	andi	r2,r2,65280
  827fc8:	1004923a 	slli	r2,r2,8
  827fcc:	2088b03a 	or	r4,r4,r2
  827fd0:	e0bffd17 	ldw	r2,-12(fp)
  827fd4:	00c03934 	movhi	r3,228
  827fd8:	18e7c204 	addi	r3,r3,-24824
  827fdc:	10800f24 	muli	r2,r2,60
  827fe0:	10c5883a 	add	r2,r2,r3
  827fe4:	10800b04 	addi	r2,r2,44
  827fe8:	10800017 	ldw	r2,0(r2)
  827fec:	10803fcc 	andi	r2,r2,255
  827ff0:	1004963a 	slli	r2,r2,24
  827ff4:	2084b03a 	or	r2,r4,r2
  827ff8:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_ROUTER, opt_ip);
  827ffc:	e0fff917 	ldw	r3,-28(fp)
  828000:	008000c4 	movi	r2,3
  828004:	18800005 	stb	r2,0(r3)
  828008:	e0bff917 	ldw	r2,-28(fp)
  82800c:	10800044 	addi	r2,r2,1
  828010:	e0bff915 	stw	r2,-28(fp)
  828014:	e0fff917 	ldw	r3,-28(fp)
  828018:	00800104 	movi	r2,4
  82801c:	18800005 	stb	r2,0(r3)
  828020:	e0bff917 	ldw	r2,-28(fp)
  828024:	10800044 	addi	r2,r2,1
  828028:	e0bff915 	stw	r2,-28(fp)
  82802c:	e0bff917 	ldw	r2,-28(fp)
  828030:	10c000c4 	addi	r3,r2,3
  828034:	e0bffc04 	addi	r2,fp,-16
  828038:	10800003 	ldbu	r2,0(r2)
  82803c:	18800005 	stb	r2,0(r3)
  828040:	e0bff917 	ldw	r2,-28(fp)
  828044:	10c00084 	addi	r3,r2,2
  828048:	e0bffc04 	addi	r2,fp,-16
  82804c:	10800044 	addi	r2,r2,1
  828050:	10800003 	ldbu	r2,0(r2)
  828054:	18800005 	stb	r2,0(r3)
  828058:	e0bff917 	ldw	r2,-28(fp)
  82805c:	10c00044 	addi	r3,r2,1
  828060:	e0bffc04 	addi	r2,fp,-16
  828064:	10800084 	addi	r2,r2,2
  828068:	10800003 	ldbu	r2,0(r2)
  82806c:	18800005 	stb	r2,0(r3)
  828070:	e0bffc04 	addi	r2,fp,-16
  828074:	108000c4 	addi	r2,r2,3
  828078:	10800003 	ldbu	r2,0(r2)
  82807c:	1007883a 	mov	r3,r2
  828080:	e0bff917 	ldw	r2,-28(fp)
  828084:	10c00005 	stb	r3,0(r2)
  828088:	e0bff917 	ldw	r2,-28(fp)
  82808c:	10800104 	addi	r2,r2,4
  828090:	e0bff915 	stw	r2,-28(fp)
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
  828094:	e0bffd17 	ldw	r2,-12(fp)
  828098:	00c03934 	movhi	r3,228
  82809c:	18e7c204 	addi	r3,r3,-24824
  8280a0:	10800f24 	muli	r2,r2,60
  8280a4:	10c5883a 	add	r2,r2,r3
  8280a8:	10800504 	addi	r2,r2,20
  8280ac:	10800017 	ldw	r2,0(r2)
  8280b0:	1005003a 	cmpeq	r2,r2,zero
  8280b4:	10003a1e 	bne	r2,zero,8281a0 <dhc_request+0x6c0>
   {
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
  8280b8:	e0fff917 	ldw	r3,-28(fp)
  8280bc:	00800cc4 	movi	r2,51
  8280c0:	18800005 	stb	r2,0(r3)
  8280c4:	e0bff917 	ldw	r2,-28(fp)
  8280c8:	10800044 	addi	r2,r2,1
  8280cc:	e0bff915 	stw	r2,-28(fp)
  8280d0:	e0fff917 	ldw	r3,-28(fp)
  8280d4:	00800104 	movi	r2,4
  8280d8:	18800005 	stb	r2,0(r3)
  8280dc:	e0bff917 	ldw	r2,-28(fp)
  8280e0:	10800044 	addi	r2,r2,1
  8280e4:	e0bff915 	stw	r2,-28(fp)
  8280e8:	e0bff917 	ldw	r2,-28(fp)
  8280ec:	110000c4 	addi	r4,r2,3
  8280f0:	e0bffd17 	ldw	r2,-12(fp)
  8280f4:	10800f24 	muli	r2,r2,60
  8280f8:	10c00504 	addi	r3,r2,20
  8280fc:	00803934 	movhi	r2,228
  828100:	10a7c204 	addi	r2,r2,-24824
  828104:	1885883a 	add	r2,r3,r2
  828108:	10800003 	ldbu	r2,0(r2)
  82810c:	20800005 	stb	r2,0(r4)
  828110:	e0bff917 	ldw	r2,-28(fp)
  828114:	11000084 	addi	r4,r2,2
  828118:	e0bffd17 	ldw	r2,-12(fp)
  82811c:	10800f24 	muli	r2,r2,60
  828120:	10c00504 	addi	r3,r2,20
  828124:	00803934 	movhi	r2,228
  828128:	10a7c204 	addi	r2,r2,-24824
  82812c:	1885883a 	add	r2,r3,r2
  828130:	10800044 	addi	r2,r2,1
  828134:	10800003 	ldbu	r2,0(r2)
  828138:	20800005 	stb	r2,0(r4)
  82813c:	e0bff917 	ldw	r2,-28(fp)
  828140:	11000044 	addi	r4,r2,1
  828144:	e0bffd17 	ldw	r2,-12(fp)
  828148:	10800f24 	muli	r2,r2,60
  82814c:	10c00504 	addi	r3,r2,20
  828150:	00803934 	movhi	r2,228
  828154:	10a7c204 	addi	r2,r2,-24824
  828158:	1885883a 	add	r2,r3,r2
  82815c:	10800084 	addi	r2,r2,2
  828160:	10800003 	ldbu	r2,0(r2)
  828164:	20800005 	stb	r2,0(r4)
  828168:	e0bffd17 	ldw	r2,-12(fp)
  82816c:	10800f24 	muli	r2,r2,60
  828170:	10c00504 	addi	r3,r2,20
  828174:	00803934 	movhi	r2,228
  828178:	10a7c204 	addi	r2,r2,-24824
  82817c:	1885883a 	add	r2,r3,r2
  828180:	108000c4 	addi	r2,r2,3
  828184:	10800003 	ldbu	r2,0(r2)
  828188:	1007883a 	mov	r3,r2
  82818c:	e0bff917 	ldw	r2,-28(fp)
  828190:	10c00005 	stb	r3,0(r2)
  828194:	e0bff917 	ldw	r2,-28(fp)
  828198:	10800104 	addi	r2,r2,4
  82819c:	e0bff915 	stw	r2,-28(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
  8281a0:	d0a03d17 	ldw	r2,-32524(gp)
  8281a4:	10800050 	cmplti	r2,r2,1
  8281a8:	10001e1e 	bne	r2,zero,828224 <dhc_request+0x744>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
  8281ac:	e0fff917 	ldw	r3,-28(fp)
  8281b0:	00800dc4 	movi	r2,55
  8281b4:	18800005 	stb	r2,0(r3)
  8281b8:	e0bff917 	ldw	r2,-28(fp)
  8281bc:	10800044 	addi	r2,r2,1
  8281c0:	e0bff915 	stw	r2,-28(fp)
      *opts++ = (u_char)reqlist_len ;
  8281c4:	d0a03d17 	ldw	r2,-32524(gp)
  8281c8:	1007883a 	mov	r3,r2
  8281cc:	e0bff917 	ldw	r2,-28(fp)
  8281d0:	10c00005 	stb	r3,0(r2)
  8281d4:	e0bff917 	ldw	r2,-28(fp)
  8281d8:	10800044 	addi	r2,r2,1
  8281dc:	e0bff915 	stw	r2,-28(fp)

      for (i=0 ; i < reqlist_len ; i++ )
  8281e0:	e03ff715 	stw	zero,-36(fp)
  8281e4:	00000c06 	br	828218 <dhc_request+0x738>
         *opts++ = reqlist[i];
  8281e8:	e0fff717 	ldw	r3,-36(fp)
  8281ec:	d0a03c04 	addi	r2,gp,-32528
  8281f0:	1885883a 	add	r2,r3,r2
  8281f4:	10c00003 	ldbu	r3,0(r2)
  8281f8:	e0bff917 	ldw	r2,-28(fp)
  8281fc:	10c00005 	stb	r3,0(r2)
  828200:	e0bff917 	ldw	r2,-28(fp)
  828204:	10800044 	addi	r2,r2,1
  828208:	e0bff915 	stw	r2,-28(fp)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
  82820c:	e0bff717 	ldw	r2,-36(fp)
  828210:	10800044 	addi	r2,r2,1
  828214:	e0bff715 	stw	r2,-36(fp)
  828218:	d0e03d17 	ldw	r3,-32524(gp)
  82821c:	e0bff717 	ldw	r2,-36(fp)
  828220:	10fff116 	blt	r2,r3,8281e8 <dhc_request+0x708>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
  828224:	e0bffd17 	ldw	r2,-12(fp)
  828228:	00c03934 	movhi	r3,228
  82822c:	18e7c204 	addi	r3,r3,-24824
  828230:	10800f24 	muli	r2,r2,60
  828234:	10c5883a 	add	r2,r2,r3
  828238:	10800017 	ldw	r2,0(r2)
  82823c:	108001e0 	cmpeqi	r2,r2,7
  828240:	1000081e 	bne	r2,zero,828264 <dhc_request+0x784>
  828244:	e0bffd17 	ldw	r2,-12(fp)
  828248:	00c03934 	movhi	r3,228
  82824c:	18e7c204 	addi	r3,r3,-24824
  828250:	10800f24 	muli	r2,r2,60
  828254:	10c5883a 	add	r2,r2,r3
  828258:	10800017 	ldw	r2,0(r2)
  82825c:	10800218 	cmpnei	r2,r2,8
  828260:	10000a1e 	bne	r2,zero,82828c <dhc_request+0x7ac>
       || (dhc_states[iface].state == DHCS_REBINDING))
   {
      outbp->ciaddr = nets[iface]->n_ipaddr;
  828264:	e0bffd17 	ldw	r2,-12(fp)
  828268:	00c03934 	movhi	r3,228
  82826c:	18e79c04 	addi	r3,r3,-24976
  828270:	1085883a 	add	r2,r2,r2
  828274:	1085883a 	add	r2,r2,r2
  828278:	10c5883a 	add	r2,r2,r3
  82827c:	10800017 	ldw	r2,0(r2)
  828280:	10c00a17 	ldw	r3,40(r2)
  828284:	e0bffb17 	ldw	r2,-20(fp)
  828288:	10c00315 	stw	r3,12(r2)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
  82828c:	e0bffd17 	ldw	r2,-12(fp)
  828290:	00c03934 	movhi	r3,228
  828294:	18e7c204 	addi	r3,r3,-24824
  828298:	10800f24 	muli	r2,r2,60
  82829c:	10c5883a 	add	r2,r2,r3
  8282a0:	10800017 	ldw	r2,0(r2)
  8282a4:	10800120 	cmpeqi	r2,r2,4
  8282a8:	1000081e 	bne	r2,zero,8282cc <dhc_request+0x7ec>
  8282ac:	e0bffd17 	ldw	r2,-12(fp)
  8282b0:	00c03934 	movhi	r3,228
  8282b4:	18e7c204 	addi	r3,r3,-24824
  8282b8:	10800f24 	muli	r2,r2,60
  8282bc:	10c5883a 	add	r2,r2,r3
  8282c0:	10800017 	ldw	r2,0(r2)
  8282c4:	10800158 	cmpnei	r2,r2,5
  8282c8:	10004e1e 	bne	r2,zero,828404 <dhc_request+0x924>
       (dhc_states[iface].state == DHCS_REQUESTING))
   {
      opt_ip = ntohl(dhc_states[iface].srv_ipaddr);
  8282cc:	e0bffd17 	ldw	r2,-12(fp)
  8282d0:	00c03934 	movhi	r3,228
  8282d4:	18e7c204 	addi	r3,r3,-24824
  8282d8:	10800f24 	muli	r2,r2,60
  8282dc:	10c5883a 	add	r2,r2,r3
  8282e0:	10800d04 	addi	r2,r2,52
  8282e4:	10800017 	ldw	r2,0(r2)
  8282e8:	1004d63a 	srli	r2,r2,24
  8282ec:	11003fcc 	andi	r4,r2,255
  8282f0:	e0bffd17 	ldw	r2,-12(fp)
  8282f4:	00c03934 	movhi	r3,228
  8282f8:	18e7c204 	addi	r3,r3,-24824
  8282fc:	10800f24 	muli	r2,r2,60
  828300:	10c5883a 	add	r2,r2,r3
  828304:	10800d04 	addi	r2,r2,52
  828308:	10800017 	ldw	r2,0(r2)
  82830c:	1004d23a 	srli	r2,r2,8
  828310:	10bfc00c 	andi	r2,r2,65280
  828314:	2088b03a 	or	r4,r4,r2
  828318:	e0bffd17 	ldw	r2,-12(fp)
  82831c:	00c03934 	movhi	r3,228
  828320:	18e7c204 	addi	r3,r3,-24824
  828324:	10800f24 	muli	r2,r2,60
  828328:	10c5883a 	add	r2,r2,r3
  82832c:	10800d04 	addi	r2,r2,52
  828330:	10800017 	ldw	r2,0(r2)
  828334:	10bfc00c 	andi	r2,r2,65280
  828338:	1004923a 	slli	r2,r2,8
  82833c:	2088b03a 	or	r4,r4,r2
  828340:	e0bffd17 	ldw	r2,-12(fp)
  828344:	00c03934 	movhi	r3,228
  828348:	18e7c204 	addi	r3,r3,-24824
  82834c:	10800f24 	muli	r2,r2,60
  828350:	10c5883a 	add	r2,r2,r3
  828354:	10800d04 	addi	r2,r2,52
  828358:	10800017 	ldw	r2,0(r2)
  82835c:	10803fcc 	andi	r2,r2,255
  828360:	1004963a 	slli	r2,r2,24
  828364:	2084b03a 	or	r2,r4,r2
  828368:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_SERVER, opt_ip);
  82836c:	e0fff917 	ldw	r3,-28(fp)
  828370:	00800d84 	movi	r2,54
  828374:	18800005 	stb	r2,0(r3)
  828378:	e0bff917 	ldw	r2,-28(fp)
  82837c:	10800044 	addi	r2,r2,1
  828380:	e0bff915 	stw	r2,-28(fp)
  828384:	e0fff917 	ldw	r3,-28(fp)
  828388:	00800104 	movi	r2,4
  82838c:	18800005 	stb	r2,0(r3)
  828390:	e0bff917 	ldw	r2,-28(fp)
  828394:	10800044 	addi	r2,r2,1
  828398:	e0bff915 	stw	r2,-28(fp)
  82839c:	e0bff917 	ldw	r2,-28(fp)
  8283a0:	10c000c4 	addi	r3,r2,3
  8283a4:	e0bffc04 	addi	r2,fp,-16
  8283a8:	10800003 	ldbu	r2,0(r2)
  8283ac:	18800005 	stb	r2,0(r3)
  8283b0:	e0bff917 	ldw	r2,-28(fp)
  8283b4:	10c00084 	addi	r3,r2,2
  8283b8:	e0bffc04 	addi	r2,fp,-16
  8283bc:	10800044 	addi	r2,r2,1
  8283c0:	10800003 	ldbu	r2,0(r2)
  8283c4:	18800005 	stb	r2,0(r3)
  8283c8:	e0bff917 	ldw	r2,-28(fp)
  8283cc:	10c00044 	addi	r3,r2,1
  8283d0:	e0bffc04 	addi	r2,fp,-16
  8283d4:	10800084 	addi	r2,r2,2
  8283d8:	10800003 	ldbu	r2,0(r2)
  8283dc:	18800005 	stb	r2,0(r3)
  8283e0:	e0bffc04 	addi	r2,fp,-16
  8283e4:	108000c4 	addi	r2,r2,3
  8283e8:	10800003 	ldbu	r2,0(r2)
  8283ec:	1007883a 	mov	r3,r2
  8283f0:	e0bff917 	ldw	r2,-28(fp)
  8283f4:	10c00005 	stb	r3,0(r2)
  8283f8:	e0bff917 	ldw	r2,-28(fp)
  8283fc:	10800104 	addi	r2,r2,4
  828400:	e0bff915 	stw	r2,-28(fp)
   /* add hostname (code 12) */
   PUT_STRING_OPT(opts, 12, dhc_hostname()); 
#endif /* USE_AUTOIP */

   /* Client Fully Qualified Domain Name */
   PUT_STRING_OPT(opts, 81, DC_DOMAINNAME); 
  828404:	e0fff917 	ldw	r3,-28(fp)
  828408:	00801444 	movi	r2,81
  82840c:	18800005 	stb	r2,0(r3)
  828410:	e0bff917 	ldw	r2,-28(fp)
  828414:	10800044 	addi	r2,r2,1
  828418:	e0bff915 	stw	r2,-28(fp)
  82841c:	00800184 	movi	r2,6
  828420:	e0bff615 	stw	r2,-40(fp)
  828424:	e0bff617 	ldw	r2,-40(fp)
  828428:	1007883a 	mov	r3,r2
  82842c:	e0bff917 	ldw	r2,-28(fp)
  828430:	10c00005 	stb	r3,0(r2)
  828434:	e0bff917 	ldw	r2,-28(fp)
  828438:	10800044 	addi	r2,r2,1
  82843c:	e0bff915 	stw	r2,-28(fp)
  828440:	e13ff917 	ldw	r4,-28(fp)
  828444:	e1bff617 	ldw	r6,-40(fp)
  828448:	01402174 	movhi	r5,133
  82844c:	29757c04 	addi	r5,r5,-10768
  828450:	08089a80 	call	8089a8 <strncpy>
  828454:	e0bff617 	ldw	r2,-40(fp)
  828458:	1007883a 	mov	r3,r2
  82845c:	e0bff917 	ldw	r2,-28(fp)
  828460:	10c5883a 	add	r2,r2,r3
  828464:	e0bff915 	stw	r2,-28(fp)
   /* Vendor Class Identifier */
   PUT_STRING_OPT(opts, 60, name); 
  828468:	e0fff917 	ldw	r3,-28(fp)
  82846c:	00800f04 	movi	r2,60
  828470:	18800005 	stb	r2,0(r3)
  828474:	e0bff917 	ldw	r2,-28(fp)
  828478:	10800044 	addi	r2,r2,1
  82847c:	e0bff915 	stw	r2,-28(fp)
  828480:	00802174 	movhi	r2,133
  828484:	1082c604 	addi	r2,r2,2840
  828488:	11000017 	ldw	r4,0(r2)
  82848c:	08088440 	call	808844 <strlen>
  828490:	e0bff515 	stw	r2,-44(fp)
  828494:	e0bff517 	ldw	r2,-44(fp)
  828498:	1007883a 	mov	r3,r2
  82849c:	e0bff917 	ldw	r2,-28(fp)
  8284a0:	10c00005 	stb	r3,0(r2)
  8284a4:	e0bff917 	ldw	r2,-28(fp)
  8284a8:	10800044 	addi	r2,r2,1
  8284ac:	e0bff915 	stw	r2,-28(fp)
  8284b0:	e13ff917 	ldw	r4,-28(fp)
  8284b4:	00802174 	movhi	r2,133
  8284b8:	1082c604 	addi	r2,r2,2840
  8284bc:	11400017 	ldw	r5,0(r2)
  8284c0:	e1bff517 	ldw	r6,-44(fp)
  8284c4:	08089a80 	call	8089a8 <strncpy>
  8284c8:	e0bff517 	ldw	r2,-44(fp)
  8284cc:	1007883a 	mov	r3,r2
  8284d0:	e0bff917 	ldw	r2,-28(fp)
  8284d4:	10c5883a 	add	r2,r2,r3
  8284d8:	e0bff915 	stw	r2,-28(fp)

   *opts++ = DHOP_END;  /* Mark the end of options */
  8284dc:	e0fff917 	ldw	r3,-28(fp)
  8284e0:	00bfffc4 	movi	r2,-1
  8284e4:	18800005 	stb	r2,0(r3)
  8284e8:	e0bff917 	ldw	r2,-28(fp)
  8284ec:	10800044 	addi	r2,r2,1
  8284f0:	e0bff915 	stw	r2,-28(fp)

   /* figure out whether to send via unicast or broadcast */
   if (dhc_states[iface].state == DHCS_RENEWING)
  8284f4:	e0bffd17 	ldw	r2,-12(fp)
  8284f8:	00c03934 	movhi	r3,228
  8284fc:	18e7c204 	addi	r3,r3,-24824
  828500:	10800f24 	muli	r2,r2,60
  828504:	10c5883a 	add	r2,r2,r3
  828508:	10800017 	ldw	r2,0(r2)
  82850c:	108001d8 	cmpnei	r2,r2,7
  828510:	10000a1e 	bne	r2,zero,82853c <dhc_request+0xa5c>
   {
      pkt->fhost = dhc_states[iface].srv_ipaddr;
  828514:	e0bffd17 	ldw	r2,-12(fp)
  828518:	00c03934 	movhi	r3,228
  82851c:	18e7c204 	addi	r3,r3,-24824
  828520:	10800f24 	muli	r2,r2,60
  828524:	10c5883a 	add	r2,r2,r3
  828528:	10800d04 	addi	r2,r2,52
  82852c:	10c00017 	ldw	r3,0(r2)
  828530:	e0bffa17 	ldw	r2,-24(fp)
  828534:	10c00715 	stw	r3,28(r2)
  828538:	00000306 	br	828548 <dhc_request+0xa68>
   }
   else
   {
      pkt->fhost = 0xFFFFFFFF;   /* broadcast request */
  82853c:	e0fffa17 	ldw	r3,-24(fp)
  828540:	00bfffc4 	movi	r2,-1
  828544:	18800715 	stw	r2,28(r3)
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
  828548:	e0bffd17 	ldw	r2,-12(fp)
  82854c:	00c03934 	movhi	r3,228
  828550:	18e79c04 	addi	r3,r3,-24976
  828554:	1085883a 	add	r2,r2,r2
  828558:	1085883a 	add	r2,r2,r2
  82855c:	10c5883a 	add	r2,r2,r3
  828560:	10c00017 	ldw	r3,0(r2)
  828564:	e0bffa17 	ldw	r2,-24(fp)
  828568:	10c00615 	stw	r3,24(r2)
   pkt->nb_plen = (char *)opts - (char *)outbp;
  82856c:	e0fff917 	ldw	r3,-28(fp)
  828570:	e0bffb17 	ldw	r2,-20(fp)
  828574:	1885c83a 	sub	r2,r3,r2
  828578:	1007883a 	mov	r3,r2
  82857c:	e0bffa17 	ldw	r2,-24(fp)
  828580:	10c00415 	stw	r3,16(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
  828584:	010010c4 	movi	r4,67
  828588:	01401104 	movi	r5,68
  82858c:	e1bffa17 	ldw	r6,-24(fp)
  828590:	08439540 	call	843954 <udp_send>
   dsc_requests++;
  828594:	d0a09b17 	ldw	r2,-32148(gp)
  828598:	10800044 	addi	r2,r2,1
  82859c:	d0a09b15 	stw	r2,-32148(gp)

   dhc_states[iface].last_tick = cticks;
  8285a0:	e13ffd17 	ldw	r4,-12(fp)
  8285a4:	00802174 	movhi	r2,133
  8285a8:	10832604 	addi	r2,r2,3224
  8285ac:	11400017 	ldw	r5,0(r2)
  8285b0:	00c03934 	movhi	r3,228
  8285b4:	18e7c204 	addi	r3,r3,-24824
  8285b8:	20800f24 	muli	r2,r4,60
  8285bc:	10c5883a 	add	r2,r2,r3
  8285c0:	10800404 	addi	r2,r2,16
  8285c4:	11400015 	stw	r5,0(r2)
   dhc_states[iface].tries++;
  8285c8:	e17ffd17 	ldw	r5,-12(fp)
  8285cc:	00c03934 	movhi	r3,228
  8285d0:	18e7c204 	addi	r3,r3,-24824
  8285d4:	28800f24 	muli	r2,r5,60
  8285d8:	10c5883a 	add	r2,r2,r3
  8285dc:	10800104 	addi	r2,r2,4
  8285e0:	10800017 	ldw	r2,0(r2)
  8285e4:	11000044 	addi	r4,r2,1
  8285e8:	00c03934 	movhi	r3,228
  8285ec:	18e7c204 	addi	r3,r3,-24824
  8285f0:	28800f24 	muli	r2,r5,60
  8285f4:	10c5883a 	add	r2,r2,r3
  8285f8:	10800104 	addi	r2,r2,4
  8285fc:	11000015 	stw	r4,0(r2)

   return 0;   /* return OK code */
  828600:	e03fff15 	stw	zero,-4(fp)
  828604:	e0bfff17 	ldw	r2,-4(fp)
}
  828608:	e037883a 	mov	sp,fp
  82860c:	dfc00117 	ldw	ra,4(sp)
  828610:	df000017 	ldw	fp,0(sp)
  828614:	dec00204 	addi	sp,sp,8
  828618:	f800283a 	ret

0082861c <dhc_setip>:
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
  82861c:	defffd04 	addi	sp,sp,-12
  828620:	dfc00215 	stw	ra,8(sp)
  828624:	df000115 	stw	fp,4(sp)
  828628:	df000104 	addi	fp,sp,4
  82862c:	e13fff15 	stw	r4,-4(fp)
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
  828630:	e0bfff17 	ldw	r2,-4(fp)
  828634:	00c03934 	movhi	r3,228
  828638:	18e79c04 	addi	r3,r3,-24976
  82863c:	1085883a 	add	r2,r2,r2
  828640:	1085883a 	add	r2,r2,r2
  828644:	10c5883a 	add	r2,r2,r3
  828648:	11000017 	ldw	r4,0(r2)
  82864c:	e0bfff17 	ldw	r2,-4(fp)
  828650:	00c03934 	movhi	r3,228
  828654:	18e7c204 	addi	r3,r3,-24824
  828658:	10800f24 	muli	r2,r2,60
  82865c:	10c5883a 	add	r2,r2,r3
  828660:	10800904 	addi	r2,r2,36
  828664:	10800017 	ldw	r2,0(r2)
  828668:	20800a15 	stw	r2,40(r4)
   nets[iface]->snmask   = dhc_states[iface].snmask;
  82866c:	e0bfff17 	ldw	r2,-4(fp)
  828670:	00c03934 	movhi	r3,228
  828674:	18e79c04 	addi	r3,r3,-24976
  828678:	1085883a 	add	r2,r2,r2
  82867c:	1085883a 	add	r2,r2,r2
  828680:	10c5883a 	add	r2,r2,r3
  828684:	11000017 	ldw	r4,0(r2)
  828688:	e0bfff17 	ldw	r2,-4(fp)
  82868c:	00c03934 	movhi	r3,228
  828690:	18e7c204 	addi	r3,r3,-24824
  828694:	10800f24 	muli	r2,r2,60
  828698:	10c5883a 	add	r2,r2,r3
  82869c:	10800a04 	addi	r2,r2,40
  8286a0:	10800017 	ldw	r2,0(r2)
  8286a4:	20800c15 	stw	r2,48(r4)
   nets[iface]->n_defgw  = dhc_states[iface].defgw;
  8286a8:	e0bfff17 	ldw	r2,-4(fp)
  8286ac:	00c03934 	movhi	r3,228
  8286b0:	18e79c04 	addi	r3,r3,-24976
  8286b4:	1085883a 	add	r2,r2,r2
  8286b8:	1085883a 	add	r2,r2,r2
  8286bc:	10c5883a 	add	r2,r2,r3
  8286c0:	11000017 	ldw	r4,0(r2)
  8286c4:	e0bfff17 	ldw	r2,-4(fp)
  8286c8:	00c03934 	movhi	r3,228
  8286cc:	18e7c204 	addi	r3,r3,-24824
  8286d0:	10800f24 	muli	r2,r2,60
  8286d4:	10c5883a 	add	r2,r2,r3
  8286d8:	10800b04 	addi	r2,r2,44
  8286dc:	10800017 	ldw	r2,0(r2)
  8286e0:	20800d15 	stw	r2,52(r4)

   if ( nets[iface]->snmask == 0 )
  8286e4:	e0bfff17 	ldw	r2,-4(fp)
  8286e8:	00c03934 	movhi	r3,228
  8286ec:	18e79c04 	addi	r3,r3,-24976
  8286f0:	1085883a 	add	r2,r2,r2
  8286f4:	1085883a 	add	r2,r2,r2
  8286f8:	10c5883a 	add	r2,r2,r3
  8286fc:	10800017 	ldw	r2,0(r2)
  828700:	10800c17 	ldw	r2,48(r2)
  828704:	1004c03a 	cmpne	r2,r2,zero
  828708:	1000111e 	bne	r2,zero,828750 <dhc_setip+0x134>
   {
      fixup_subnet_mask(iface);
  82870c:	e13fff17 	ldw	r4,-4(fp)
  828710:	0822ce40 	call	822ce4 <fixup_subnet_mask>
      dhc_states[iface].snmask = nets[iface]->snmask; 
  828714:	e17fff17 	ldw	r5,-4(fp)
  828718:	e0bfff17 	ldw	r2,-4(fp)
  82871c:	00c03934 	movhi	r3,228
  828720:	18e79c04 	addi	r3,r3,-24976
  828724:	1085883a 	add	r2,r2,r2
  828728:	1085883a 	add	r2,r2,r2
  82872c:	10c5883a 	add	r2,r2,r3
  828730:	10800017 	ldw	r2,0(r2)
  828734:	11000c17 	ldw	r4,48(r2)
  828738:	00c03934 	movhi	r3,228
  82873c:	18e7c204 	addi	r3,r3,-24824
  828740:	28800f24 	muli	r2,r5,60
  828744:	10c5883a 	add	r2,r2,r3
  828748:	10800a04 	addi	r2,r2,40
  82874c:	11000015 	stw	r4,0(r2)
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
  828750:	e0bfff17 	ldw	r2,-4(fp)
  828754:	00c03934 	movhi	r3,228
  828758:	18e79c04 	addi	r3,r3,-24976
  82875c:	1085883a 	add	r2,r2,r2
  828760:	1085883a 	add	r2,r2,r2
  828764:	10c5883a 	add	r2,r2,r3
  828768:	11400017 	ldw	r5,0(r2)
  82876c:	e0bfff17 	ldw	r2,-4(fp)
  828770:	00c03934 	movhi	r3,228
  828774:	18e79c04 	addi	r3,r3,-24976
  828778:	1085883a 	add	r2,r2,r2
  82877c:	1085883a 	add	r2,r2,r2
  828780:	10c5883a 	add	r2,r2,r3
  828784:	10800017 	ldw	r2,0(r2)
  828788:	11000a17 	ldw	r4,40(r2)
  82878c:	e0bfff17 	ldw	r2,-4(fp)
  828790:	00c03934 	movhi	r3,228
  828794:	18e79c04 	addi	r3,r3,-24976
  828798:	1085883a 	add	r2,r2,r2
  82879c:	1085883a 	add	r2,r2,r2
  8287a0:	10c5883a 	add	r2,r2,r3
  8287a4:	10800017 	ldw	r2,0(r2)
  8287a8:	10800c17 	ldw	r2,48(r2)
  8287ac:	0084303a 	nor	r2,zero,r2
  8287b0:	2084b03a 	or	r2,r4,r2
  8287b4:	28800e15 	stw	r2,56(r5)
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
  8287b8:	e0bfff17 	ldw	r2,-4(fp)
  8287bc:	00c03934 	movhi	r3,228
  8287c0:	18e79c04 	addi	r3,r3,-24976
  8287c4:	1085883a 	add	r2,r2,r2
  8287c8:	1085883a 	add	r2,r2,r2
  8287cc:	10c5883a 	add	r2,r2,r3
  8287d0:	11400017 	ldw	r5,0(r2)
  8287d4:	e0bfff17 	ldw	r2,-4(fp)
  8287d8:	00c03934 	movhi	r3,228
  8287dc:	18e79c04 	addi	r3,r3,-24976
  8287e0:	1085883a 	add	r2,r2,r2
  8287e4:	1085883a 	add	r2,r2,r2
  8287e8:	10c5883a 	add	r2,r2,r3
  8287ec:	10800017 	ldw	r2,0(r2)
  8287f0:	11000a17 	ldw	r4,40(r2)
  8287f4:	e0bfff17 	ldw	r2,-4(fp)
  8287f8:	00c03934 	movhi	r3,228
  8287fc:	18e79c04 	addi	r3,r3,-24976
  828800:	1085883a 	add	r2,r2,r2
  828804:	1085883a 	add	r2,r2,r2
  828808:	10c5883a 	add	r2,r2,r3
  82880c:	10800017 	ldw	r2,0(r2)
  828810:	10800c17 	ldw	r2,48(r2)
  828814:	2084703a 	and	r2,r4,r2
  828818:	28800f15 	stw	r2,60(r5)
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
  82881c:	e0bfff17 	ldw	r2,-4(fp)
  828820:	00c03934 	movhi	r3,228
  828824:	18e79c04 	addi	r3,r3,-24976
  828828:	1085883a 	add	r2,r2,r2
  82882c:	1085883a 	add	r2,r2,r2
  828830:	10c5883a 	add	r2,r2,r3
  828834:	11400017 	ldw	r5,0(r2)
  828838:	e0bfff17 	ldw	r2,-4(fp)
  82883c:	00c03934 	movhi	r3,228
  828840:	18e79c04 	addi	r3,r3,-24976
  828844:	1085883a 	add	r2,r2,r2
  828848:	1085883a 	add	r2,r2,r2
  82884c:	10c5883a 	add	r2,r2,r3
  828850:	10800017 	ldw	r2,0(r2)
  828854:	11000a17 	ldw	r4,40(r2)
  828858:	e0bfff17 	ldw	r2,-4(fp)
  82885c:	00c03934 	movhi	r3,228
  828860:	18e79c04 	addi	r3,r3,-24976
  828864:	1085883a 	add	r2,r2,r2
  828868:	1085883a 	add	r2,r2,r2
  82886c:	10c5883a 	add	r2,r2,r3
  828870:	10800017 	ldw	r2,0(r2)
  828874:	10800c17 	ldw	r2,48(r2)
  828878:	0084303a 	nor	r2,zero,r2
  82887c:	2084b03a 	or	r2,r4,r2
  828880:	28801015 	stw	r2,64(r5)

   return 0;   /* return OK code */
  828884:	0005883a 	mov	r2,zero
}
  828888:	e037883a 	mov	sp,fp
  82888c:	dfc00117 	ldw	ra,4(sp)
  828890:	df000017 	ldw	fp,0(sp)
  828894:	dec00204 	addi	sp,sp,8
  828898:	f800283a 	ret

0082889c <dhc_resetip>:
 * RETURNS: Returns 0 if ok, else non-zero error. 
 */

int
dhc_resetip(int iface)
{
  82889c:	defffe04 	addi	sp,sp,-8
  8288a0:	df000115 	stw	fp,4(sp)
  8288a4:	df000104 	addi	fp,sp,4
  8288a8:	e13fff15 	stw	r4,-4(fp)
   /* reset the ipaddress */
   nets[iface]->n_ipaddr = 0;
  8288ac:	e0bfff17 	ldw	r2,-4(fp)
  8288b0:	00c03934 	movhi	r3,228
  8288b4:	18e79c04 	addi	r3,r3,-24976
  8288b8:	1085883a 	add	r2,r2,r2
  8288bc:	1085883a 	add	r2,r2,r2
  8288c0:	10c5883a 	add	r2,r2,r3
  8288c4:	10800017 	ldw	r2,0(r2)
  8288c8:	10000a15 	stw	zero,40(r2)
   nets[iface]->snmask   = 0;
  8288cc:	e0bfff17 	ldw	r2,-4(fp)
  8288d0:	00c03934 	movhi	r3,228
  8288d4:	18e79c04 	addi	r3,r3,-24976
  8288d8:	1085883a 	add	r2,r2,r2
  8288dc:	1085883a 	add	r2,r2,r2
  8288e0:	10c5883a 	add	r2,r2,r3
  8288e4:	10800017 	ldw	r2,0(r2)
  8288e8:	10000c15 	stw	zero,48(r2)
   nets[iface]->n_defgw  = 0;
  8288ec:	e0bfff17 	ldw	r2,-4(fp)
  8288f0:	00c03934 	movhi	r3,228
  8288f4:	18e79c04 	addi	r3,r3,-24976
  8288f8:	1085883a 	add	r2,r2,r2
  8288fc:	1085883a 	add	r2,r2,r2
  828900:	10c5883a 	add	r2,r2,r3
  828904:	10800017 	ldw	r2,0(r2)
  828908:	10000d15 	stw	zero,52(r2)

   /* reset the broadcast addresses */
   nets[iface]->n_netbr    = 0;
  82890c:	e0bfff17 	ldw	r2,-4(fp)
  828910:	00c03934 	movhi	r3,228
  828914:	18e79c04 	addi	r3,r3,-24976
  828918:	1085883a 	add	r2,r2,r2
  82891c:	1085883a 	add	r2,r2,r2
  828920:	10c5883a 	add	r2,r2,r3
  828924:	10800017 	ldw	r2,0(r2)
  828928:	10000e15 	stw	zero,56(r2)
   nets[iface]->n_netbr42  = 0;
  82892c:	e0bfff17 	ldw	r2,-4(fp)
  828930:	00c03934 	movhi	r3,228
  828934:	18e79c04 	addi	r3,r3,-24976
  828938:	1085883a 	add	r2,r2,r2
  82893c:	1085883a 	add	r2,r2,r2
  828940:	10c5883a 	add	r2,r2,r3
  828944:	10800017 	ldw	r2,0(r2)
  828948:	10000f15 	stw	zero,60(r2)
   nets[iface]->n_subnetbr = 0;
  82894c:	e0bfff17 	ldw	r2,-4(fp)
  828950:	00c03934 	movhi	r3,228
  828954:	18e79c04 	addi	r3,r3,-24976
  828958:	1085883a 	add	r2,r2,r2
  82895c:	1085883a 	add	r2,r2,r2
  828960:	10c5883a 	add	r2,r2,r3
  828964:	10800017 	ldw	r2,0(r2)
  828968:	10001015 	stw	zero,64(r2)

   return 0;   /* return OK code */
  82896c:	0005883a 	mov	r2,zero
}
  828970:	e037883a 	mov	sp,fp
  828974:	df000017 	ldw	fp,0(sp)
  828978:	dec00104 	addi	sp,sp,4
  82897c:	f800283a 	ret

00828980 <dhc_decline>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_decline(int iface,struct bootp * bp, unsigned bplen)
{
  828980:	defff704 	addi	sp,sp,-36
  828984:	dfc00815 	stw	ra,32(sp)
  828988:	df000715 	stw	fp,28(sp)
  82898c:	df000704 	addi	fp,sp,28
  828990:	e13ffc15 	stw	r4,-16(fp)
  828994:	e17ffd15 	stw	r5,-12(fp)
  828998:	e1bffe15 	stw	r6,-8(fp)
   struct bootp * outbp;
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
  82899c:	e13ffe17 	ldw	r4,-8(fp)
  8289a0:	000b883a 	mov	r5,zero
  8289a4:	0843e0c0 	call	843e0c <udp_alloc>
  8289a8:	e0bffa15 	stw	r2,-24(fp)
   if (!pkt) 
  8289ac:	e0bffa17 	ldw	r2,-24(fp)
  8289b0:	1004c03a 	cmpne	r2,r2,zero
  8289b4:	1000031e 	bne	r2,zero,8289c4 <dhc_decline+0x44>
      return ENP_NOMEM;
  8289b8:	00bffb04 	movi	r2,-20
  8289bc:	e0bfff15 	stw	r2,-4(fp)
  8289c0:	00002f06 	br	828a80 <dhc_decline+0x100>
   pkt->nb_plen = bplen;
  8289c4:	e0fffa17 	ldw	r3,-24(fp)
  8289c8:	e0bffe17 	ldw	r2,-8(fp)
  8289cc:	18800415 	stw	r2,16(r3)

   outbp = (struct bootp *)pkt->nb_prot;
  8289d0:	e0bffa17 	ldw	r2,-24(fp)
  8289d4:	10800317 	ldw	r2,12(r2)
  8289d8:	e0bffb15 	stw	r2,-20(fp)
   MEMCPY(outbp, bp, bplen);
  8289dc:	e0bffb17 	ldw	r2,-20(fp)
  8289e0:	e0fffd17 	ldw	r3,-12(fp)
  8289e4:	1009883a 	mov	r4,r2
  8289e8:	180b883a 	mov	r5,r3
  8289ec:	e1bffe17 	ldw	r6,-8(fp)
  8289f0:	08073380 	call	807338 <memcpy>
   outbp->op = BOOTREQUEST;
  8289f4:	e0fffb17 	ldw	r3,-20(fp)
  8289f8:	00800044 	movi	r2,1
  8289fc:	18800005 	stb	r2,0(r3)

   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
  828a00:	e0bffb17 	ldw	r2,-20(fp)
  828a04:	10803b04 	addi	r2,r2,236
  828a08:	11400104 	addi	r5,r2,4
  828a0c:	01000d44 	movi	r4,53
  828a10:	08298280 	call	829828 <find_opt>
  828a14:	e0bff915 	stw	r2,-28(fp)
   opts += 2;     /* point to actual op code */
  828a18:	e0bff917 	ldw	r2,-28(fp)
  828a1c:	10800084 	addi	r2,r2,2
  828a20:	e0bff915 	stw	r2,-28(fp)
   *opts = DHCP_DECLINE;   /* overwrite op code */
  828a24:	e0fff917 	ldw	r3,-28(fp)
  828a28:	00800104 	movi	r2,4
  828a2c:	18800005 	stb	r2,0(r3)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
  828a30:	e0fffa17 	ldw	r3,-24(fp)
  828a34:	00bfffc4 	movi	r2,-1
  828a38:	18800715 	stw	r2,28(r3)
   pkt->net = nets[iface];    /* send out caller speced net */
  828a3c:	e0bffc17 	ldw	r2,-16(fp)
  828a40:	00c03934 	movhi	r3,228
  828a44:	18e79c04 	addi	r3,r3,-24976
  828a48:	1085883a 	add	r2,r2,r2
  828a4c:	1085883a 	add	r2,r2,r2
  828a50:	10c5883a 	add	r2,r2,r3
  828a54:	10c00017 	ldw	r3,0(r2)
  828a58:	e0bffa17 	ldw	r2,-24(fp)
  828a5c:	10c00615 	stw	r3,24(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
  828a60:	010010c4 	movi	r4,67
  828a64:	01401104 	movi	r5,68
  828a68:	e1bffa17 	ldw	r6,-24(fp)
  828a6c:	08439540 	call	843954 <udp_send>
   dsc_declines++;   /* count declines sent */
  828a70:	d0a09e17 	ldw	r2,-32136(gp)
  828a74:	10800044 	addi	r2,r2,1
  828a78:	d0a09e15 	stw	r2,-32136(gp)
   return 0;
  828a7c:	e03fff15 	stw	zero,-4(fp)
  828a80:	e0bfff17 	ldw	r2,-4(fp)
}
  828a84:	e037883a 	mov	sp,fp
  828a88:	dfc00117 	ldw	ra,4(sp)
  828a8c:	df000017 	ldw	fp,0(sp)
  828a90:	dec00204 	addi	sp,sp,8
  828a94:	f800283a 	ret

00828a98 <dh_getlong>:
 *
 * RETURNS: the extracted 32 bit value
 */

static   long dh_getlong( u_char *ptr )
{
  828a98:	defffc04 	addi	sp,sp,-16
  828a9c:	df000315 	stw	fp,12(sp)
  828aa0:	df000304 	addi	fp,sp,12
  828aa4:	e13fff15 	stw	r4,-4(fp)
     long  v;
     u_char * p2 =  (u_char *)&v;
  828aa8:	e0bffe04 	addi	r2,fp,-8
  828aac:	e0bffd15 	stw	r2,-12(fp)

   *p2++ = *ptr++;
  828ab0:	e0bfff17 	ldw	r2,-4(fp)
  828ab4:	10c00003 	ldbu	r3,0(r2)
  828ab8:	e0bffd17 	ldw	r2,-12(fp)
  828abc:	10c00005 	stb	r3,0(r2)
  828ac0:	e0bffd17 	ldw	r2,-12(fp)
  828ac4:	10800044 	addi	r2,r2,1
  828ac8:	e0bffd15 	stw	r2,-12(fp)
  828acc:	e0bfff17 	ldw	r2,-4(fp)
  828ad0:	10800044 	addi	r2,r2,1
  828ad4:	e0bfff15 	stw	r2,-4(fp)
   *p2++ = *ptr++;
  828ad8:	e0bfff17 	ldw	r2,-4(fp)
  828adc:	10c00003 	ldbu	r3,0(r2)
  828ae0:	e0bffd17 	ldw	r2,-12(fp)
  828ae4:	10c00005 	stb	r3,0(r2)
  828ae8:	e0bffd17 	ldw	r2,-12(fp)
  828aec:	10800044 	addi	r2,r2,1
  828af0:	e0bffd15 	stw	r2,-12(fp)
  828af4:	e0bfff17 	ldw	r2,-4(fp)
  828af8:	10800044 	addi	r2,r2,1
  828afc:	e0bfff15 	stw	r2,-4(fp)
   *p2++ = *ptr++;
  828b00:	e0bfff17 	ldw	r2,-4(fp)
  828b04:	10c00003 	ldbu	r3,0(r2)
  828b08:	e0bffd17 	ldw	r2,-12(fp)
  828b0c:	10c00005 	stb	r3,0(r2)
  828b10:	e0bffd17 	ldw	r2,-12(fp)
  828b14:	10800044 	addi	r2,r2,1
  828b18:	e0bffd15 	stw	r2,-12(fp)
  828b1c:	e0bfff17 	ldw	r2,-4(fp)
  828b20:	10800044 	addi	r2,r2,1
  828b24:	e0bfff15 	stw	r2,-4(fp)
   *p2++ = *ptr++;
  828b28:	e0bfff17 	ldw	r2,-4(fp)
  828b2c:	10c00003 	ldbu	r3,0(r2)
  828b30:	e0bffd17 	ldw	r2,-12(fp)
  828b34:	10c00005 	stb	r3,0(r2)
  828b38:	e0bffd17 	ldw	r2,-12(fp)
  828b3c:	10800044 	addi	r2,r2,1
  828b40:	e0bffd15 	stw	r2,-12(fp)
  828b44:	e0bfff17 	ldw	r2,-4(fp)
  828b48:	10800044 	addi	r2,r2,1
  828b4c:	e0bfff15 	stw	r2,-4(fp)

   return v;
  828b50:	e0bffe17 	ldw	r2,-8(fp)
}
  828b54:	e037883a 	mov	sp,fp
  828b58:	df000017 	ldw	fp,0(sp)
  828b5c:	dec00104 	addi	sp,sp,4
  828b60:	f800283a 	ret

00828b64 <dhc_extract_opts>:
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
  828b64:	defff604 	addi	sp,sp,-40
  828b68:	dfc00915 	stw	ra,36(sp)
  828b6c:	df000815 	stw	fp,32(sp)
  828b70:	dc400715 	stw	r17,28(sp)
  828b74:	dc000615 	stw	r16,24(sp)
  828b78:	df000604 	addi	fp,sp,24
  828b7c:	e13ffc15 	stw	r4,-16(fp)
  828b80:	e17ffd15 	stw	r5,-12(fp)
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
  828b84:	e0bffd17 	ldw	r2,-12(fp)
  828b88:	10804e04 	addi	r2,r2,312
  828b8c:	e0bffb15 	stw	r2,-20(fp)
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
  828b90:	e0bffc17 	ldw	r2,-16(fp)
  828b94:	00c03934 	movhi	r3,228
  828b98:	18e7c204 	addi	r3,r3,-24824
  828b9c:	10800f24 	muli	r2,r2,60
  828ba0:	10c5883a 	add	r2,r2,r3
  828ba4:	10800a04 	addi	r2,r2,40
  828ba8:	10000015 	stw	zero,0(r2)
   dhc_states[iface].defgw = 0; 
  828bac:	e0bffc17 	ldw	r2,-16(fp)
  828bb0:	00c03934 	movhi	r3,228
  828bb4:	18e7c204 	addi	r3,r3,-24824
  828bb8:	10800f24 	muli	r2,r2,60
  828bbc:	10c5883a 	add	r2,r2,r3
  828bc0:	10800b04 	addi	r2,r2,44
  828bc4:	10000015 	stw	zero,0(r2)
   dhc_states[iface].lease = 0; 
  828bc8:	e0bffc17 	ldw	r2,-16(fp)
  828bcc:	00c03934 	movhi	r3,228
  828bd0:	18e7c204 	addi	r3,r3,-24824
  828bd4:	10800f24 	muli	r2,r2,60
  828bd8:	10c5883a 	add	r2,r2,r3
  828bdc:	10800504 	addi	r2,r2,20
  828be0:	10000015 	stw	zero,0(r2)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
  828be4:	00008006 	br	828de8 <dhc_extract_opts+0x284>
   {
      switch (*opts++)
  828be8:	e0bffd17 	ldw	r2,-12(fp)
  828bec:	10800003 	ldbu	r2,0(r2)
  828bf0:	10803fcc 	andi	r2,r2,255
  828bf4:	e0bfff15 	stw	r2,-4(fp)
  828bf8:	e0bffd17 	ldw	r2,-12(fp)
  828bfc:	10800044 	addi	r2,r2,1
  828c00:	e0bffd15 	stw	r2,-12(fp)
  828c04:	e0ffff17 	ldw	r3,-4(fp)
  828c08:	188000e0 	cmpeqi	r2,r3,3
  828c0c:	1000271e 	bne	r2,zero,828cac <dhc_extract_opts+0x148>
  828c10:	e0ffff17 	ldw	r3,-4(fp)
  828c14:	18800108 	cmpgei	r2,r3,4
  828c18:	1000071e 	bne	r2,zero,828c38 <dhc_extract_opts+0xd4>
  828c1c:	e0ffff17 	ldw	r3,-4(fp)
  828c20:	1805003a 	cmpeq	r2,r3,zero
  828c24:	1000701e 	bne	r2,zero,828de8 <dhc_extract_opts+0x284>
  828c28:	e0ffff17 	ldw	r3,-4(fp)
  828c2c:	18800060 	cmpeqi	r2,r3,1
  828c30:	10000d1e 	bne	r2,zero,828c68 <dhc_extract_opts+0x104>
  828c34:	00006406 	br	828dc8 <dhc_extract_opts+0x264>
  828c38:	e0ffff17 	ldw	r3,-4(fp)
  828c3c:	18800ce0 	cmpeqi	r2,r3,51
  828c40:	1000331e 	bne	r2,zero,828d10 <dhc_extract_opts+0x1ac>
  828c44:	e0ffff17 	ldw	r3,-4(fp)
  828c48:	18803fe0 	cmpeqi	r2,r3,255
  828c4c:	1000041e 	bne	r2,zero,828c60 <dhc_extract_opts+0xfc>
  828c50:	e0ffff17 	ldw	r3,-4(fp)
  828c54:	188001a0 	cmpeqi	r2,r3,6
  828c58:	10004f1e 	bne	r2,zero,828d98 <dhc_extract_opts+0x234>
  828c5c:	00005a06 	br	828dc8 <dhc_extract_opts+0x264>
      {
      case DHOP_PAD:
         break;
      case DHOP_END:
         return 0;   /* only good exit point */
  828c60:	e03ffe15 	stw	zero,-8(fp)
  828c64:	00006606 	br	828e00 <dhc_extract_opts+0x29c>
      case DHOP_SNMASK:
         opts++;
  828c68:	e0bffd17 	ldw	r2,-12(fp)
  828c6c:	10800044 	addi	r2,r2,1
  828c70:	e0bffd15 	stw	r2,-12(fp)
         dhc_states[iface].snmask = dh_getlong(opts);
  828c74:	e43ffc17 	ldw	r16,-16(fp)
  828c78:	e13ffd17 	ldw	r4,-12(fp)
  828c7c:	0828a980 	call	828a98 <dh_getlong>
  828c80:	1009883a 	mov	r4,r2
  828c84:	00c03934 	movhi	r3,228
  828c88:	18e7c204 	addi	r3,r3,-24824
  828c8c:	80800f24 	muli	r2,r16,60
  828c90:	10c5883a 	add	r2,r2,r3
  828c94:	10800a04 	addi	r2,r2,40
  828c98:	11000015 	stw	r4,0(r2)
         opts += 4;
  828c9c:	e0bffd17 	ldw	r2,-12(fp)
  828ca0:	10800104 	addi	r2,r2,4
  828ca4:	e0bffd15 	stw	r2,-12(fp)
         break;
  828ca8:	00004f06 	br	828de8 <dhc_extract_opts+0x284>
      case DHOP_ROUTER:
         optlen = *opts++;
  828cac:	e0bffd17 	ldw	r2,-12(fp)
  828cb0:	10800003 	ldbu	r2,0(r2)
  828cb4:	e0bffa05 	stb	r2,-24(fp)
  828cb8:	e0bffd17 	ldw	r2,-12(fp)
  828cbc:	10800044 	addi	r2,r2,1
  828cc0:	e0bffd15 	stw	r2,-12(fp)
         if (optlen >= 4)
  828cc4:	e0bffa03 	ldbu	r2,-24(fp)
  828cc8:	10800130 	cmpltui	r2,r2,4
  828ccc:	10000a1e 	bne	r2,zero,828cf8 <dhc_extract_opts+0x194>
            dhc_states[iface].defgw = dh_getlong(opts);
  828cd0:	e43ffc17 	ldw	r16,-16(fp)
  828cd4:	e13ffd17 	ldw	r4,-12(fp)
  828cd8:	0828a980 	call	828a98 <dh_getlong>
  828cdc:	1009883a 	mov	r4,r2
  828ce0:	00c03934 	movhi	r3,228
  828ce4:	18e7c204 	addi	r3,r3,-24824
  828ce8:	80800f24 	muli	r2,r16,60
  828cec:	10c5883a 	add	r2,r2,r3
  828cf0:	10800b04 	addi	r2,r2,44
  828cf4:	11000015 	stw	r4,0(r2)
         opts += optlen;
  828cf8:	e0bffa03 	ldbu	r2,-24(fp)
  828cfc:	1007883a 	mov	r3,r2
  828d00:	e0bffd17 	ldw	r2,-12(fp)
  828d04:	10c5883a 	add	r2,r2,r3
  828d08:	e0bffd15 	stw	r2,-12(fp)
         break;
  828d0c:	00003606 	br	828de8 <dhc_extract_opts+0x284>
      case DHOP_LEASE:
         opts++;
  828d10:	e0bffd17 	ldw	r2,-12(fp)
  828d14:	10800044 	addi	r2,r2,1
  828d18:	e0bffd15 	stw	r2,-12(fp)
         dhc_states[iface].lease = htonl(dh_getlong(opts));
  828d1c:	e47ffc17 	ldw	r17,-16(fp)
  828d20:	e13ffd17 	ldw	r4,-12(fp)
  828d24:	0828a980 	call	828a98 <dh_getlong>
  828d28:	1005d63a 	srai	r2,r2,24
  828d2c:	14003fcc 	andi	r16,r2,255
  828d30:	e13ffd17 	ldw	r4,-12(fp)
  828d34:	0828a980 	call	828a98 <dh_getlong>
  828d38:	1005d23a 	srai	r2,r2,8
  828d3c:	10bfc00c 	andi	r2,r2,65280
  828d40:	80a0b03a 	or	r16,r16,r2
  828d44:	e13ffd17 	ldw	r4,-12(fp)
  828d48:	0828a980 	call	828a98 <dh_getlong>
  828d4c:	10bfc00c 	andi	r2,r2,65280
  828d50:	1004923a 	slli	r2,r2,8
  828d54:	80a0b03a 	or	r16,r16,r2
  828d58:	e13ffd17 	ldw	r4,-12(fp)
  828d5c:	0828a980 	call	828a98 <dh_getlong>
  828d60:	10803fcc 	andi	r2,r2,255
  828d64:	1004963a 	slli	r2,r2,24
  828d68:	8084b03a 	or	r2,r16,r2
  828d6c:	1009883a 	mov	r4,r2
  828d70:	00c03934 	movhi	r3,228
  828d74:	18e7c204 	addi	r3,r3,-24824
  828d78:	88800f24 	muli	r2,r17,60
  828d7c:	10c5883a 	add	r2,r2,r3
  828d80:	10800504 	addi	r2,r2,20
  828d84:	11000015 	stw	r4,0(r2)
         opts += 4;
  828d88:	e0bffd17 	ldw	r2,-12(fp)
  828d8c:	10800104 	addi	r2,r2,4
  828d90:	e0bffd15 	stw	r2,-12(fp)
         break;
  828d94:	00001406 	br	828de8 <dhc_extract_opts+0x284>
      case DHOP_DNSRV:
         optlen = *opts++;
  828d98:	e0bffd17 	ldw	r2,-12(fp)
  828d9c:	10800003 	ldbu	r2,0(r2)
  828da0:	e0bffa05 	stb	r2,-24(fp)
  828da4:	e0bffd17 	ldw	r2,-12(fp)
  828da8:	10800044 	addi	r2,r2,1
  828dac:	e0bffd15 	stw	r2,-12(fp)
               opts += 4;
               i++;
            }
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
  828db0:	e0bffa03 	ldbu	r2,-24(fp)
  828db4:	1007883a 	mov	r3,r2
  828db8:	e0bffd17 	ldw	r2,-12(fp)
  828dbc:	10c5883a 	add	r2,r2,r3
  828dc0:	e0bffd15 	stw	r2,-12(fp)
         break;
  828dc4:	00000806 	br	828de8 <dhc_extract_opts+0x284>
      default:
         opts += ((*opts) + 1);
  828dc8:	e0bffd17 	ldw	r2,-12(fp)
  828dcc:	10800003 	ldbu	r2,0(r2)
  828dd0:	10803fcc 	andi	r2,r2,255
  828dd4:	1007883a 	mov	r3,r2
  828dd8:	e0bffd17 	ldw	r2,-12(fp)
  828ddc:	1885883a 	add	r2,r3,r2
  828de0:	10800044 	addi	r2,r2,1
  828de4:	e0bffd15 	stw	r2,-12(fp)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
  828de8:	e0fffd17 	ldw	r3,-12(fp)
  828dec:	e0bffb17 	ldw	r2,-20(fp)
  828df0:	10ff7d2e 	bgeu	r2,r3,828be8 <dhc_extract_opts+0x84>
      default:
         opts += ((*opts) + 1);
         break;
      }
   }
   dtrap();
  828df4:	082a7c80 	call	82a7c8 <dtrap>
   return -1;
  828df8:	00bfffc4 	movi	r2,-1
  828dfc:	e0bffe15 	stw	r2,-8(fp)
  828e00:	e0bffe17 	ldw	r2,-8(fp)
}
  828e04:	e037883a 	mov	sp,fp
  828e08:	dfc00317 	ldw	ra,12(sp)
  828e0c:	df000217 	ldw	fp,8(sp)
  828e10:	dc400117 	ldw	r17,4(sp)
  828e14:	dc000017 	ldw	r16,0(sp)
  828e18:	dec00404 	addi	sp,sp,16
  828e1c:	f800283a 	ret

00828e20 <dhc_second>:
 * RETURNS: Returns 0 or ENP_ error code 
 */

int
dhc_second(void)
{
  828e20:	defff704 	addi	sp,sp,-36
  828e24:	dfc00815 	stw	ra,32(sp)
  828e28:	df000715 	stw	fp,28(sp)
  828e2c:	df000704 	addi	fp,sp,28
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
  828e30:	e03ffc15 	stw	zero,-16(fp)
  828e34:	00015706 	br	829394 <dhc_second+0x574>
   {
      switch (dhc_states[iface].state)
  828e38:	e0bffc17 	ldw	r2,-16(fp)
  828e3c:	00c03934 	movhi	r3,228
  828e40:	18e7c204 	addi	r3,r3,-24824
  828e44:	10800f24 	muli	r2,r2,60
  828e48:	10c5883a 	add	r2,r2,r3
  828e4c:	10800017 	ldw	r2,0(r2)
  828e50:	e0bfff15 	stw	r2,-4(fp)
  828e54:	e0ffff17 	ldw	r3,-4(fp)
  828e58:	18800268 	cmpgeui	r2,r3,9
  828e5c:	10014a1e 	bne	r2,zero,829388 <dhc_second+0x568>
  828e60:	e13fff17 	ldw	r4,-4(fp)
  828e64:	e13fff17 	ldw	r4,-4(fp)
  828e68:	2105883a 	add	r2,r4,r4
  828e6c:	1087883a 	add	r3,r2,r2
  828e70:	008020f4 	movhi	r2,131
  828e74:	10a3a104 	addi	r2,r2,-29052
  828e78:	1885883a 	add	r2,r3,r2
  828e7c:	10800017 	ldw	r2,0(r2)
  828e80:	1000683a 	jmp	r2
  828e84:	00829388 	cmpgei	r2,zero,2638
  828e88:	00828ea8 	cmpgeui	r2,zero,2618
  828e8c:	00828ee0 	cmpeqi	r2,zero,2619
  828e90:	00828f18 	cmpnei	r2,zero,2620
  828e94:	00828f18 	cmpnei	r2,zero,2620
  828e98:	00828f18 	cmpnei	r2,zero,2620
  828e9c:	0082917c 	xorhi	r2,zero,2629
  828ea0:	00829234 	movhi	r2,2632
  828ea4:	00829048 	cmpgei	r2,zero,2625
      {
      case DHCS_INIT:         /* Send a discover packet */
         e = dhc_discover(iface);
  828ea8:	e13ffc17 	ldw	r4,-16(fp)
  828eac:	08274c40 	call	8274c4 <dhc_discover>
  828eb0:	e0bffa15 	stw	r2,-24(fp)
         /* Error while sending a discover packet */
         if (e)
  828eb4:	e0bffa17 	ldw	r2,-24(fp)
  828eb8:	1005003a 	cmpeq	r2,r2,zero
  828ebc:	1000041e 	bne	r2,zero,828ed0 <dhc_second+0xb0>
         {
            dtrap();
  828ec0:	082a7c80 	call	82a7c8 <dtrap>
            return e;
  828ec4:	e0bffa17 	ldw	r2,-24(fp)
  828ec8:	e0bffe15 	stw	r2,-8(fp)
  828ecc:	00013506 	br	8293a4 <dhc_second+0x584>
         }
         dhc_set_state(iface,DHCS_SELECTING);
  828ed0:	e13ffc17 	ldw	r4,-16(fp)
  828ed4:	01400104 	movi	r5,4
  828ed8:	08297780 	call	829778 <dhc_set_state>
         break;
  828edc:	00012a06 	br	829388 <dhc_second+0x568>
      case DHCS_INITREBOOT:   /* Send a request packet */
         e = dhc_reclaim(iface);
  828ee0:	e13ffc17 	ldw	r4,-16(fp)
  828ee4:	08294440 	call	829444 <dhc_reclaim>
  828ee8:	e0bffa15 	stw	r2,-24(fp)
         if (e)
  828eec:	e0bffa17 	ldw	r2,-24(fp)
  828ef0:	1005003a 	cmpeq	r2,r2,zero
  828ef4:	1000041e 	bne	r2,zero,828f08 <dhc_second+0xe8>
         {
            dtrap();
  828ef8:	082a7c80 	call	82a7c8 <dtrap>
            return e;
  828efc:	e0fffa17 	ldw	r3,-24(fp)
  828f00:	e0fffe15 	stw	r3,-8(fp)
  828f04:	00012706 	br	8293a4 <dhc_second+0x584>
         }
         dhc_set_state(iface,DHCS_REBOOTING);
  828f08:	e13ffc17 	ldw	r4,-16(fp)
  828f0c:	014000c4 	movi	r5,3
  828f10:	08297780 	call	829778 <dhc_set_state>
         break;
  828f14:	00011c06 	br	829388 <dhc_second+0x568>
         /* Send discover packet on timeout */
      case DHCS_REBOOTING:
      case DHCS_REQUESTING:
         /* Discovery timeout = DHC_RETRY_TMO secs * (2 ** retries), max 64 */

         tries = dhc_states[iface].tries ;
  828f18:	e0bffc17 	ldw	r2,-16(fp)
  828f1c:	00c03934 	movhi	r3,228
  828f20:	18e7c204 	addi	r3,r3,-24824
  828f24:	10800f24 	muli	r2,r2,60
  828f28:	10c5883a 	add	r2,r2,r3
  828f2c:	10800104 	addi	r2,r2,4
  828f30:	10800017 	ldw	r2,0(r2)
  828f34:	e0bffb15 	stw	r2,-20(fp)

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
  828f38:	e0bffb17 	ldw	r2,-20(fp)
  828f3c:	10800110 	cmplti	r2,r2,4
  828f40:	1000021e 	bne	r2,zero,828f4c <dhc_second+0x12c>
            tries= DHC_MAX_TRIES;
  828f44:	00800104 	movi	r2,4
  828f48:	e0bffb15 	stw	r2,-20(fp)
         if ( cticks > (dhc_states[iface].last_tick + 
  828f4c:	e0bffc17 	ldw	r2,-16(fp)
  828f50:	00c03934 	movhi	r3,228
  828f54:	18e7c204 	addi	r3,r3,-24824
  828f58:	10800f24 	muli	r2,r2,60
  828f5c:	10c5883a 	add	r2,r2,r3
  828f60:	10800404 	addi	r2,r2,16
  828f64:	11000017 	ldw	r4,0(r2)
  828f68:	00c3e804 	movi	r3,4000
  828f6c:	e0bffb17 	ldw	r2,-20(fp)
  828f70:	1884983a 	sll	r2,r3,r2
  828f74:	2087883a 	add	r3,r4,r2
  828f78:	00802174 	movhi	r2,133
  828f7c:	10832604 	addi	r2,r2,3224
  828f80:	10800017 	ldw	r2,0(r2)
  828f84:	18801c2e 	bgeu	r3,r2,828ff8 <dhc_second+0x1d8>
             (((u_long) (DHC_RETRY_TMO*TPS)) << tries ) ) )
         {
            /* Timeout while waiting for a OFFER/ACK/NAK. Retransmit */
            switch(dhc_states[iface].state)
  828f88:	e0bffc17 	ldw	r2,-16(fp)
  828f8c:	00c03934 	movhi	r3,228
  828f90:	18e7c204 	addi	r3,r3,-24824
  828f94:	10800f24 	muli	r2,r2,60
  828f98:	10c5883a 	add	r2,r2,r3
  828f9c:	10800017 	ldw	r2,0(r2)
  828fa0:	e0bffd15 	stw	r2,-12(fp)
  828fa4:	e13ffd17 	ldw	r4,-12(fp)
  828fa8:	20800120 	cmpeqi	r2,r4,4
  828fac:	1000071e 	bne	r2,zero,828fcc <dhc_second+0x1ac>
  828fb0:	e0fffd17 	ldw	r3,-12(fp)
  828fb4:	18800160 	cmpeqi	r2,r3,5
  828fb8:	1000071e 	bne	r2,zero,828fd8 <dhc_second+0x1b8>
  828fbc:	e13ffd17 	ldw	r4,-12(fp)
  828fc0:	208000e0 	cmpeqi	r2,r4,3
  828fc4:	1000081e 	bne	r2,zero,828fe8 <dhc_second+0x1c8>
  828fc8:	00000a06 	br	828ff4 <dhc_second+0x1d4>
            {
            case DHCS_SELECTING:
               dhc_discover(iface);
  828fcc:	e13ffc17 	ldw	r4,-16(fp)
  828fd0:	08274c40 	call	8274c4 <dhc_discover>
               break;
  828fd4:	00000806 	br	828ff8 <dhc_second+0x1d8>
            case DHCS_REQUESTING:
               dhc_request(iface,FALSE);
  828fd8:	e13ffc17 	ldw	r4,-16(fp)
  828fdc:	000b883a 	mov	r5,zero
  828fe0:	0827ae00 	call	827ae0 <dhc_request>
               break;
  828fe4:	00000406 	br	828ff8 <dhc_second+0x1d8>
            case DHCS_REBOOTING:
               dhc_reclaim(iface);
  828fe8:	e13ffc17 	ldw	r4,-16(fp)
  828fec:	08294440 	call	829444 <dhc_reclaim>
               break;
  828ff0:	00000106 	br	828ff8 <dhc_second+0x1d8>
            default:
               dtrap(); /* bogus state */
  828ff4:	082a7c80 	call	82a7c8 <dtrap>
               break;
            }
         }
         if ( tries == DHC_MAX_TRIES && 
  828ff8:	e0bffb17 	ldw	r2,-20(fp)
  828ffc:	10800118 	cmpnei	r2,r2,4
  829000:	1000e11e 	bne	r2,zero,829388 <dhc_second+0x568>
  829004:	e0bffc17 	ldw	r2,-16(fp)
  829008:	00c03934 	movhi	r3,228
  82900c:	18e7c204 	addi	r3,r3,-24824
  829010:	10800f24 	muli	r2,r2,60
  829014:	10c5883a 	add	r2,r2,r3
  829018:	10800017 	ldw	r2,0(r2)
  82901c:	10800120 	cmpeqi	r2,r2,4
  829020:	1000d91e 	bne	r2,zero,829388 <dhc_second+0x568>
             (dhc_states[iface].state !=DHCS_SELECTING) )
         {
            /* We have tried enough. Restart from INIT state */
            dhc_set_state(iface,DHCS_RESTARTING);
  829024:	e13ffc17 	ldw	r4,-16(fp)
  829028:	01400244 	movi	r5,9
  82902c:	08297780 	call	829778 <dhc_set_state>
            dhc_resetip(iface);
  829030:	e13ffc17 	ldw	r4,-16(fp)
  829034:	082889c0 	call	82889c <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
  829038:	e13ffc17 	ldw	r4,-16(fp)
  82903c:	01400044 	movi	r5,1
  829040:	08297780 	call	829778 <dhc_set_state>
         }
         break;
  829044:	0000d006 	br	829388 <dhc_second+0x568>
      case DHCS_REBINDING:
         /* Check for timeout. Retry if we didn't get a ACK/NAK response. */

         if ( (dhc_states[iface].lease*TPS+dhc_states[iface].lease_start) > cticks )
  829048:	e0bffc17 	ldw	r2,-16(fp)
  82904c:	00c03934 	movhi	r3,228
  829050:	18e7c204 	addi	r3,r3,-24824
  829054:	10800f24 	muli	r2,r2,60
  829058:	10c5883a 	add	r2,r2,r3
  82905c:	10800504 	addi	r2,r2,20
  829060:	10800017 	ldw	r2,0(r2)
  829064:	1100fa24 	muli	r4,r2,1000
  829068:	e0bffc17 	ldw	r2,-16(fp)
  82906c:	00c03934 	movhi	r3,228
  829070:	18e7c204 	addi	r3,r3,-24824
  829074:	10800f24 	muli	r2,r2,60
  829078:	10c5883a 	add	r2,r2,r3
  82907c:	10800804 	addi	r2,r2,32
  829080:	10800017 	ldw	r2,0(r2)
  829084:	2087883a 	add	r3,r4,r2
  829088:	00802174 	movhi	r2,133
  82908c:	10832604 	addi	r2,r2,3224
  829090:	10800017 	ldw	r2,0(r2)
  829094:	10c0302e 	bgeu	r2,r3,829158 <dhc_second+0x338>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
  829098:	e0bffc17 	ldw	r2,-16(fp)
  82909c:	00c03934 	movhi	r3,228
  8290a0:	18e7c204 	addi	r3,r3,-24824
  8290a4:	10800f24 	muli	r2,r2,60
  8290a8:	10c5883a 	add	r2,r2,r3
  8290ac:	10800804 	addi	r2,r2,32
  8290b0:	11000017 	ldw	r4,0(r2)
  8290b4:	e0bffc17 	ldw	r2,-16(fp)
  8290b8:	00c03934 	movhi	r3,228
  8290bc:	18e7c204 	addi	r3,r3,-24824
  8290c0:	10800f24 	muli	r2,r2,60
  8290c4:	10c5883a 	add	r2,r2,r3
  8290c8:	10800504 	addi	r2,r2,20
  8290cc:	10800017 	ldw	r2,0(r2)
  8290d0:	1080fa24 	muli	r2,r2,1000
  8290d4:	2089883a 	add	r4,r4,r2
  8290d8:	e0bffc17 	ldw	r2,-16(fp)
  8290dc:	00c03934 	movhi	r3,228
  8290e0:	18e7c204 	addi	r3,r3,-24824
  8290e4:	10800f24 	muli	r2,r2,60
  8290e8:	10c5883a 	add	r2,r2,r3
  8290ec:	10800404 	addi	r2,r2,16
  8290f0:	10800017 	ldw	r2,0(r2)
  8290f4:	2085c83a 	sub	r2,r4,r2
  8290f8:	1004d07a 	srli	r2,r2,1
  8290fc:	e0bff915 	stw	r2,-28(fp)
             dhc_states[iface].lease*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
  829100:	e0fff917 	ldw	r3,-28(fp)
  829104:	00ba97d4 	movui	r2,59999
  829108:	10c00236 	bltu	r2,r3,829114 <dhc_second+0x2f4>
               half_time = 60*TPS;
  82910c:	00ba9814 	movui	r2,60000
  829110:	e0bff915 	stw	r2,-28(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
  829114:	e0bffc17 	ldw	r2,-16(fp)
  829118:	00c03934 	movhi	r3,228
  82911c:	18e7c204 	addi	r3,r3,-24824
  829120:	10800f24 	muli	r2,r2,60
  829124:	10c5883a 	add	r2,r2,r3
  829128:	10800404 	addi	r2,r2,16
  82912c:	10c00017 	ldw	r3,0(r2)
  829130:	e0bff917 	ldw	r2,-28(fp)
  829134:	1887883a 	add	r3,r3,r2
  829138:	00802174 	movhi	r2,133
  82913c:	10832604 	addi	r2,r2,3224
  829140:	10800017 	ldw	r2,0(r2)
  829144:	1880902e 	bgeu	r3,r2,829388 <dhc_second+0x568>
            {
               dhc_request(iface,FALSE);
  829148:	e13ffc17 	ldw	r4,-16(fp)
  82914c:	000b883a 	mov	r5,zero
  829150:	0827ae00 	call	827ae0 <dhc_request>
  829154:	00008c06 	br	829388 <dhc_second+0x568>
            }
         }
         else
         {
            /* Lease has expired. We didn't receive a ACK/NAK. Hence restart*/
            dhc_set_state(iface,DHCS_RESTARTING);
  829158:	e13ffc17 	ldw	r4,-16(fp)
  82915c:	01400244 	movi	r5,9
  829160:	08297780 	call	829778 <dhc_set_state>
            dhc_resetip(iface);
  829164:	e13ffc17 	ldw	r4,-16(fp)
  829168:	082889c0 	call	82889c <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
  82916c:	e13ffc17 	ldw	r4,-16(fp)
  829170:	01400044 	movi	r5,1
  829174:	08297780 	call	829778 <dhc_set_state>
         }
         break;
  829178:	00008306 	br	829388 <dhc_second+0x568>

      case DHCS_BOUND:
         /* Test for lease expiry. The RENEW timer. */
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
  82917c:	e0bffc17 	ldw	r2,-16(fp)
  829180:	00c03934 	movhi	r3,228
  829184:	18e7c204 	addi	r3,r3,-24824
  829188:	10800f24 	muli	r2,r2,60
  82918c:	10c5883a 	add	r2,r2,r3
  829190:	10800604 	addi	r2,r2,24
  829194:	10800017 	ldw	r2,0(r2)
  829198:	10bfffe0 	cmpeqi	r2,r2,-1
  82919c:	10007a1e 	bne	r2,zero,829388 <dhc_second+0x568>
  8291a0:	e0bffc17 	ldw	r2,-16(fp)
  8291a4:	00c03934 	movhi	r3,228
  8291a8:	18e7c204 	addi	r3,r3,-24824
  8291ac:	10800f24 	muli	r2,r2,60
  8291b0:	10c5883a 	add	r2,r2,r3
  8291b4:	10800604 	addi	r2,r2,24
  8291b8:	10800017 	ldw	r2,0(r2)
  8291bc:	1100fa24 	muli	r4,r2,1000
  8291c0:	e0bffc17 	ldw	r2,-16(fp)
  8291c4:	00c03934 	movhi	r3,228
  8291c8:	18e7c204 	addi	r3,r3,-24824
  8291cc:	10800f24 	muli	r2,r2,60
  8291d0:	10c5883a 	add	r2,r2,r3
  8291d4:	10800804 	addi	r2,r2,32
  8291d8:	10800017 	ldw	r2,0(r2)
  8291dc:	2087883a 	add	r3,r4,r2
  8291e0:	00802174 	movhi	r2,133
  8291e4:	10832604 	addi	r2,r2,3224
  8291e8:	10800017 	ldw	r2,0(r2)
  8291ec:	1880662e 	bgeu	r3,r2,829388 <dhc_second+0x568>
             (((dhc_states[iface].t1*TPS)+dhc_states[iface].lease_start) < cticks ) )
         {
            /* Time to renew. Send a UNICAST to the DHCP server */
            dhc_set_state(iface,DHCS_RENEWING);
  8291f0:	e13ffc17 	ldw	r4,-16(fp)
  8291f4:	014001c4 	movi	r5,7
  8291f8:	08297780 	call	829778 <dhc_set_state>
            e = dhc_reclaim(iface); /* unicast */ 
  8291fc:	e13ffc17 	ldw	r4,-16(fp)
  829200:	08294440 	call	829444 <dhc_reclaim>
  829204:	e0bffa15 	stw	r2,-24(fp)
            if (e)
  829208:	e0bffa17 	ldw	r2,-24(fp)
  82920c:	1005003a 	cmpeq	r2,r2,zero
  829210:	1000041e 	bne	r2,zero,829224 <dhc_second+0x404>
            {
               dtrap();
  829214:	082a7c80 	call	82a7c8 <dtrap>
               return e;
  829218:	e0bffa17 	ldw	r2,-24(fp)
  82921c:	e0bffe15 	stw	r2,-8(fp)
  829220:	00006006 	br	8293a4 <dhc_second+0x584>
            }
            dsc_renew++;
  829224:	d0a0a117 	ldw	r2,-32124(gp)
  829228:	10800044 	addi	r2,r2,1
  82922c:	d0a0a115 	stw	r2,-32124(gp)
         }
         break;
  829230:	00005506 	br	829388 <dhc_second+0x568>
      case DHCS_RENEWING:
         /* Test for lease expiry. The REBIND timer. */
         if ( (dhc_states[iface].t2*TPS+dhc_states[iface].lease_start) > cticks )
  829234:	e0bffc17 	ldw	r2,-16(fp)
  829238:	00c03934 	movhi	r3,228
  82923c:	18e7c204 	addi	r3,r3,-24824
  829240:	10800f24 	muli	r2,r2,60
  829244:	10c5883a 	add	r2,r2,r3
  829248:	10800704 	addi	r2,r2,28
  82924c:	10800017 	ldw	r2,0(r2)
  829250:	1100fa24 	muli	r4,r2,1000
  829254:	e0bffc17 	ldw	r2,-16(fp)
  829258:	00c03934 	movhi	r3,228
  82925c:	18e7c204 	addi	r3,r3,-24824
  829260:	10800f24 	muli	r2,r2,60
  829264:	10c5883a 	add	r2,r2,r3
  829268:	10800804 	addi	r2,r2,32
  82926c:	10800017 	ldw	r2,0(r2)
  829270:	2087883a 	add	r3,r4,r2
  829274:	00802174 	movhi	r2,133
  829278:	10832604 	addi	r2,r2,3224
  82927c:	10800017 	ldw	r2,0(r2)
  829280:	10c0302e 	bgeu	r2,r3,829344 <dhc_second+0x524>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
  829284:	e0bffc17 	ldw	r2,-16(fp)
  829288:	00c03934 	movhi	r3,228
  82928c:	18e7c204 	addi	r3,r3,-24824
  829290:	10800f24 	muli	r2,r2,60
  829294:	10c5883a 	add	r2,r2,r3
  829298:	10800804 	addi	r2,r2,32
  82929c:	11000017 	ldw	r4,0(r2)
  8292a0:	e0bffc17 	ldw	r2,-16(fp)
  8292a4:	00c03934 	movhi	r3,228
  8292a8:	18e7c204 	addi	r3,r3,-24824
  8292ac:	10800f24 	muli	r2,r2,60
  8292b0:	10c5883a 	add	r2,r2,r3
  8292b4:	10800704 	addi	r2,r2,28
  8292b8:	10800017 	ldw	r2,0(r2)
  8292bc:	1080fa24 	muli	r2,r2,1000
  8292c0:	2089883a 	add	r4,r4,r2
  8292c4:	e0bffc17 	ldw	r2,-16(fp)
  8292c8:	00c03934 	movhi	r3,228
  8292cc:	18e7c204 	addi	r3,r3,-24824
  8292d0:	10800f24 	muli	r2,r2,60
  8292d4:	10c5883a 	add	r2,r2,r3
  8292d8:	10800404 	addi	r2,r2,16
  8292dc:	10800017 	ldw	r2,0(r2)
  8292e0:	2085c83a 	sub	r2,r4,r2
  8292e4:	1004d07a 	srli	r2,r2,1
  8292e8:	e0bff915 	stw	r2,-28(fp)
             dhc_states[iface].t2*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
  8292ec:	e0fff917 	ldw	r3,-28(fp)
  8292f0:	00ba97d4 	movui	r2,59999
  8292f4:	10c00236 	bltu	r2,r3,829300 <dhc_second+0x4e0>
               half_time = 60*TPS;
  8292f8:	00ba9814 	movui	r2,60000
  8292fc:	e0bff915 	stw	r2,-28(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
  829300:	e0bffc17 	ldw	r2,-16(fp)
  829304:	00c03934 	movhi	r3,228
  829308:	18e7c204 	addi	r3,r3,-24824
  82930c:	10800f24 	muli	r2,r2,60
  829310:	10c5883a 	add	r2,r2,r3
  829314:	10800404 	addi	r2,r2,16
  829318:	10c00017 	ldw	r3,0(r2)
  82931c:	e0bff917 	ldw	r2,-28(fp)
  829320:	1887883a 	add	r3,r3,r2
  829324:	00802174 	movhi	r2,133
  829328:	10832604 	addi	r2,r2,3224
  82932c:	10800017 	ldw	r2,0(r2)
  829330:	1880152e 	bgeu	r3,r2,829388 <dhc_second+0x568>
            {
               dhc_request(iface,FALSE);
  829334:	e13ffc17 	ldw	r4,-16(fp)
  829338:	000b883a 	mov	r5,zero
  82933c:	0827ae00 	call	827ae0 <dhc_request>
  829340:	00001106 	br	829388 <dhc_second+0x568>
         {
            /* No Response has come from the Server that assigned our 
             * IP. Hence send a broadcast packet to see if we can 
             * lease this IP from some other server 
             */
            dhc_set_state(iface,DHCS_REBINDING);
  829344:	e13ffc17 	ldw	r4,-16(fp)
  829348:	01400204 	movi	r5,8
  82934c:	08297780 	call	829778 <dhc_set_state>
            e = dhc_request(iface,TRUE);  /* broadcast */
  829350:	e13ffc17 	ldw	r4,-16(fp)
  829354:	01400044 	movi	r5,1
  829358:	0827ae00 	call	827ae0 <dhc_request>
  82935c:	e0bffa15 	stw	r2,-24(fp)
            if (e)
  829360:	e0bffa17 	ldw	r2,-24(fp)
  829364:	1005003a 	cmpeq	r2,r2,zero
  829368:	1000041e 	bne	r2,zero,82937c <dhc_second+0x55c>
            {
               dtrap();
  82936c:	082a7c80 	call	82a7c8 <dtrap>
               return e;
  829370:	e0fffa17 	ldw	r3,-24(fp)
  829374:	e0fffe15 	stw	r3,-8(fp)
  829378:	00000a06 	br	8293a4 <dhc_second+0x584>
            }
            dsc_rebind++;
  82937c:	d0a0a217 	ldw	r2,-32120(gp)
  829380:	10800044 	addi	r2,r2,1
  829384:	d0a0a215 	stw	r2,-32120(gp)
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
  829388:	e0bffc17 	ldw	r2,-16(fp)
  82938c:	10800044 	addi	r2,r2,1
  829390:	e0bffc15 	stw	r2,-16(fp)
  829394:	e0bffc17 	ldw	r2,-16(fp)
  829398:	10800110 	cmplti	r2,r2,4
  82939c:	103ea61e 	bne	r2,zero,828e38 <dhc_second+0x18>
      case DHCS_UNUSED:
      default:
         continue;
      }
   }
   return 0;
  8293a0:	e03ffe15 	stw	zero,-8(fp)
  8293a4:	e0bffe17 	ldw	r2,-8(fp)
}
  8293a8:	e037883a 	mov	sp,fp
  8293ac:	dfc00117 	ldw	ra,4(sp)
  8293b0:	df000017 	ldw	fp,0(sp)
  8293b4:	dec00204 	addi	sp,sp,8
  8293b8:	f800283a 	ret

008293bc <dhc_halt>:
 * RETURNS: void
 */

void
dhc_halt(int iface)
{
  8293bc:	defffd04 	addi	sp,sp,-12
  8293c0:	dfc00215 	stw	ra,8(sp)
  8293c4:	df000115 	stw	fp,4(sp)
  8293c8:	df000104 	addi	fp,sp,4
  8293cc:	e13fff15 	stw	r4,-4(fp)
   if (iface < 0 || iface > MAXNETS)
  8293d0:	e0bfff17 	ldw	r2,-4(fp)
  8293d4:	1004803a 	cmplt	r2,r2,zero
  8293d8:	1000031e 	bne	r2,zero,8293e8 <dhc_halt+0x2c>
  8293dc:	e0bfff17 	ldw	r2,-4(fp)
  8293e0:	10800150 	cmplti	r2,r2,5
  8293e4:	1000021e 	bne	r2,zero,8293f0 <dhc_halt+0x34>
   {
      dtrap();
  8293e8:	082a7c80 	call	82a7c8 <dtrap>
      return;
  8293ec:	00001006 	br	829430 <dhc_halt+0x74>
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
  8293f0:	e0bfff17 	ldw	r2,-4(fp)
  8293f4:	10800f24 	muli	r2,r2,60
  8293f8:	1007883a 	mov	r3,r2
  8293fc:	00803934 	movhi	r2,228
  829400:	10a7c204 	addi	r2,r2,-24824
  829404:	1885883a 	add	r2,r3,r2
  829408:	1009883a 	mov	r4,r2
  82940c:	01800f04 	movi	r6,60
  829410:	000b883a 	mov	r5,zero
  829414:	08074b80 	call	8074b8 <memset>
   dhc_states[iface].state = DHCS_UNUSED;
  829418:	e0bfff17 	ldw	r2,-4(fp)
  82941c:	00c03934 	movhi	r3,228
  829420:	18e7c204 	addi	r3,r3,-24824
  829424:	10800f24 	muli	r2,r2,60
  829428:	10c5883a 	add	r2,r2,r3
  82942c:	10000015 	stw	zero,0(r2)
}
  829430:	e037883a 	mov	sp,fp
  829434:	dfc00117 	ldw	ra,4(sp)
  829438:	df000017 	ldw	fp,0(sp)
  82943c:	dec00204 	addi	sp,sp,8
  829440:	f800283a 	ret

00829444 <dhc_reclaim>:
 * RETURNS: Returns 0 if DHCP request was sent OK, else non-zero error. 
 */

int   
dhc_reclaim(int iface)
{
  829444:	defffb04 	addi	sp,sp,-20
  829448:	dfc00415 	stw	ra,16(sp)
  82944c:	df000315 	stw	fp,12(sp)
  829450:	df000304 	addi	fp,sp,12
  829454:	e13ffe15 	stw	r4,-8(fp)
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
  829458:	e0bffe17 	ldw	r2,-8(fp)
  82945c:	00c03934 	movhi	r3,228
  829460:	18e79c04 	addi	r3,r3,-24976
  829464:	1085883a 	add	r2,r2,r2
  829468:	1085883a 	add	r2,r2,r2
  82946c:	10c5883a 	add	r2,r2,r3
  829470:	10800017 	ldw	r2,0(r2)
  829474:	10800a17 	ldw	r2,40(r2)
  829478:	1004c03a 	cmpne	r2,r2,zero
  82947c:	1000041e 	bne	r2,zero,829490 <dhc_reclaim+0x4c>
   {
      dtrap();    /* programming bug? */
  829480:	082a7c80 	call	82a7c8 <dtrap>
      return ENP_LOGIC;
  829484:	00bffd44 	movi	r2,-11
  829488:	e0bfff15 	stw	r2,-4(fp)
  82948c:	00005b06 	br	8295fc <dhc_reclaim+0x1b8>
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
  829490:	e17ffe17 	ldw	r5,-8(fp)
  829494:	e0bffe17 	ldw	r2,-8(fp)
  829498:	00c03934 	movhi	r3,228
  82949c:	18e79c04 	addi	r3,r3,-24976
  8294a0:	1085883a 	add	r2,r2,r2
  8294a4:	1085883a 	add	r2,r2,r2
  8294a8:	10c5883a 	add	r2,r2,r3
  8294ac:	10800017 	ldw	r2,0(r2)
  8294b0:	11000a17 	ldw	r4,40(r2)
  8294b4:	00c03934 	movhi	r3,228
  8294b8:	18e7c204 	addi	r3,r3,-24824
  8294bc:	28800f24 	muli	r2,r5,60
  8294c0:	10c5883a 	add	r2,r2,r3
  8294c4:	10800904 	addi	r2,r2,36
  8294c8:	11000015 	stw	r4,0(r2)
   dhc_states[iface].snmask = nets[iface]->snmask;
  8294cc:	e17ffe17 	ldw	r5,-8(fp)
  8294d0:	e0bffe17 	ldw	r2,-8(fp)
  8294d4:	00c03934 	movhi	r3,228
  8294d8:	18e79c04 	addi	r3,r3,-24976
  8294dc:	1085883a 	add	r2,r2,r2
  8294e0:	1085883a 	add	r2,r2,r2
  8294e4:	10c5883a 	add	r2,r2,r3
  8294e8:	10800017 	ldw	r2,0(r2)
  8294ec:	11000c17 	ldw	r4,48(r2)
  8294f0:	00c03934 	movhi	r3,228
  8294f4:	18e7c204 	addi	r3,r3,-24824
  8294f8:	28800f24 	muli	r2,r5,60
  8294fc:	10c5883a 	add	r2,r2,r3
  829500:	10800a04 	addi	r2,r2,40
  829504:	11000015 	stw	r4,0(r2)
   dhc_states[iface].defgw  = nets[iface]->n_defgw;
  829508:	e17ffe17 	ldw	r5,-8(fp)
  82950c:	e0bffe17 	ldw	r2,-8(fp)
  829510:	00c03934 	movhi	r3,228
  829514:	18e79c04 	addi	r3,r3,-24976
  829518:	1085883a 	add	r2,r2,r2
  82951c:	1085883a 	add	r2,r2,r2
  829520:	10c5883a 	add	r2,r2,r3
  829524:	10800017 	ldw	r2,0(r2)
  829528:	11000d17 	ldw	r4,52(r2)
  82952c:	00c03934 	movhi	r3,228
  829530:	18e7c204 	addi	r3,r3,-24824
  829534:	28800f24 	muli	r2,r5,60
  829538:	10c5883a 	add	r2,r2,r3
  82953c:	10800b04 	addi	r2,r2,44
  829540:	11000015 	stw	r4,0(r2)

#ifdef IP_ROUTING
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
  829544:	e0bffe17 	ldw	r2,-8(fp)
  829548:	00c03934 	movhi	r3,228
  82954c:	18e7c204 	addi	r3,r3,-24824
  829550:	10800f24 	muli	r2,r2,60
  829554:	10c5883a 	add	r2,r2,r3
  829558:	10800c04 	addi	r2,r2,48
  82955c:	10800017 	ldw	r2,0(r2)
  829560:	1005003a 	cmpeq	r2,r2,zero
  829564:	1000211e 	bne	r2,zero,8295ec <dhc_reclaim+0x1a8>
   {
      if (dhc_states[iface].srv_ipaddr)
  829568:	e0bffe17 	ldw	r2,-8(fp)
  82956c:	00c03934 	movhi	r3,228
  829570:	18e7c204 	addi	r3,r3,-24824
  829574:	10800f24 	muli	r2,r2,60
  829578:	10c5883a 	add	r2,r2,r3
  82957c:	10800d04 	addi	r2,r2,52
  829580:	10800017 	ldw	r2,0(r2)
  829584:	1005003a 	cmpeq	r2,r2,zero
  829588:	1000171e 	bne	r2,zero,8295e8 <dhc_reclaim+0x1a4>
      {
         /* yes, earlier negotiation was done via a relay agent */
         if ( !add_route(dhc_states[iface].srv_ipaddr, 0xFFFFFFFF,
  82958c:	e0bffe17 	ldw	r2,-8(fp)
  829590:	00c03934 	movhi	r3,228
  829594:	18e7c204 	addi	r3,r3,-24824
  829598:	10800f24 	muli	r2,r2,60
  82959c:	10c5883a 	add	r2,r2,r3
  8295a0:	10800d04 	addi	r2,r2,52
  8295a4:	11000017 	ldw	r4,0(r2)
  8295a8:	e0bffe17 	ldw	r2,-8(fp)
  8295ac:	00c03934 	movhi	r3,228
  8295b0:	18e7c204 	addi	r3,r3,-24824
  8295b4:	10800f24 	muli	r2,r2,60
  8295b8:	10c5883a 	add	r2,r2,r3
  8295bc:	10800c04 	addi	r2,r2,48
  8295c0:	11800017 	ldw	r6,0(r2)
  8295c4:	00800084 	movi	r2,2
  8295c8:	d8800015 	stw	r2,0(sp)
  8295cc:	017fffc4 	movi	r5,-1
  8295d0:	e1fffe17 	ldw	r7,-8(fp)
  8295d4:	0842b900 	call	842b90 <add_route>
  8295d8:	1004c03a 	cmpne	r2,r2,zero
  8295dc:	1000031e 	bne	r2,zero,8295ec <dhc_reclaim+0x1a8>
             dhc_states[iface].rly_ipaddr, iface, IPRP_LOCAL))
         {
            /* route was not added. check this case */
            dtrap(); 
  8295e0:	082a7c80 	call	82a7c8 <dtrap>
  8295e4:	00000106 	br	8295ec <dhc_reclaim+0x1a8>
      else
      {
         /* DHCP relay IP address is set, but DHCP Server IP address is
          * not set ! How can this happen ?
          */
         dtrap();
  8295e8:	082a7c80 	call	82a7c8 <dtrap>
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
  8295ec:	e13ffe17 	ldw	r4,-8(fp)
  8295f0:	01400044 	movi	r5,1
  8295f4:	0827ae00 	call	827ae0 <dhc_request>
  8295f8:	e0bfff15 	stw	r2,-4(fp)
  8295fc:	e0bfff17 	ldw	r2,-4(fp)
}
  829600:	e037883a 	mov	sp,fp
  829604:	dfc00117 	ldw	ra,4(sp)
  829608:	df000017 	ldw	fp,0(sp)
  82960c:	dec00204 	addi	sp,sp,8
  829610:	f800283a 	ret

00829614 <dhc_state_init>:
 * RETURNS: void
 */

void 
dhc_state_init(int iface, int init_flag)
{
  829614:	defffa04 	addi	sp,sp,-24
  829618:	dfc00515 	stw	ra,20(sp)
  82961c:	df000415 	stw	fp,16(sp)
  829620:	df000404 	addi	fp,sp,16
  829624:	e13ffd15 	stw	r4,-12(fp)
  829628:	e17ffe15 	stw	r5,-8(fp)
   int state = (init_flag == TRUE) ? DHCS_INIT : DHCS_INITREBOOT;
  82962c:	e0bffe17 	ldw	r2,-8(fp)
  829630:	10800058 	cmpnei	r2,r2,1
  829634:	1000031e 	bne	r2,zero,829644 <dhc_state_init+0x30>
  829638:	00800044 	movi	r2,1
  82963c:	e0bfff15 	stw	r2,-4(fp)
  829640:	00000206 	br	82964c <dhc_state_init+0x38>
  829644:	00800084 	movi	r2,2
  829648:	e0bfff15 	stw	r2,-4(fp)
  82964c:	e0bfff17 	ldw	r2,-4(fp)
  829650:	e0bffc15 	stw	r2,-16(fp)
   
   dhc_set_state(iface, state);
  829654:	e13ffd17 	ldw	r4,-12(fp)
  829658:	e17ffc17 	ldw	r5,-16(fp)
  82965c:	08297780 	call	829778 <dhc_set_state>
}
  829660:	e037883a 	mov	sp,fp
  829664:	dfc00117 	ldw	ra,4(sp)
  829668:	df000017 	ldw	fp,0(sp)
  82966c:	dec00204 	addi	sp,sp,8
  829670:	f800283a 	ret

00829674 <dhc_alldone>:
 * otherwise. 
 */

int 
dhc_alldone(void)
{
  829674:	defffd04 	addi	sp,sp,-12
  829678:	df000215 	stw	fp,8(sp)
  82967c:	df000204 	addi	fp,sp,8
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
  829680:	e03ffe15 	stw	zero,-8(fp)
  829684:	00001506 	br	8296dc <dhc_alldone+0x68>
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
  829688:	e0bffe17 	ldw	r2,-8(fp)
  82968c:	00c03934 	movhi	r3,228
  829690:	18e7c204 	addi	r3,r3,-24824
  829694:	10800f24 	muli	r2,r2,60
  829698:	10c5883a 	add	r2,r2,r3
  82969c:	10800017 	ldw	r2,0(r2)
  8296a0:	1005003a 	cmpeq	r2,r2,zero
  8296a4:	10000a1e 	bne	r2,zero,8296d0 <dhc_alldone+0x5c>
  8296a8:	e0bffe17 	ldw	r2,-8(fp)
  8296ac:	00c03934 	movhi	r3,228
  8296b0:	18e7c204 	addi	r3,r3,-24824
  8296b4:	10800f24 	muli	r2,r2,60
  8296b8:	10c5883a 	add	r2,r2,r3
  8296bc:	10800017 	ldw	r2,0(r2)
  8296c0:	108001a0 	cmpeqi	r2,r2,6
  8296c4:	1000021e 	bne	r2,zero,8296d0 <dhc_alldone+0x5c>
      {
         continue ;
      }
      else
      {
         return FALSE ;
  8296c8:	e03fff15 	stw	zero,-4(fp)
  8296cc:	00000806 	br	8296f0 <dhc_alldone+0x7c>

int 
dhc_alldone(void)
{
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
  8296d0:	e0bffe17 	ldw	r2,-8(fp)
  8296d4:	10800044 	addi	r2,r2,1
  8296d8:	e0bffe15 	stw	r2,-8(fp)
  8296dc:	e0bffe17 	ldw	r2,-8(fp)
  8296e0:	10800110 	cmplti	r2,r2,4
  8296e4:	103fe81e 	bne	r2,zero,829688 <dhc_alldone+0x14>
      else
      {
         return FALSE ;
      }
   }
   return TRUE ;
  8296e8:	00800044 	movi	r2,1
  8296ec:	e0bfff15 	stw	r2,-4(fp)
  8296f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8296f4:	e037883a 	mov	sp,fp
  8296f8:	df000017 	ldw	fp,0(sp)
  8296fc:	dec00104 	addi	sp,sp,4
  829700:	f800283a 	ret

00829704 <dhc_ifacedone>:
 * RETURNS: 
 */

int 
dhc_ifacedone(int iface)
{
  829704:	defffd04 	addi	sp,sp,-12
  829708:	df000215 	stw	fp,8(sp)
  82970c:	df000204 	addi	fp,sp,8
  829710:	e13ffe15 	stw	r4,-8(fp)
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
  829714:	e0bffe17 	ldw	r2,-8(fp)
  829718:	00c03934 	movhi	r3,228
  82971c:	18e7c204 	addi	r3,r3,-24824
  829720:	10800f24 	muli	r2,r2,60
  829724:	10c5883a 	add	r2,r2,r3
  829728:	10800017 	ldw	r2,0(r2)
  82972c:	1005003a 	cmpeq	r2,r2,zero
  829730:	1000081e 	bne	r2,zero,829754 <dhc_ifacedone+0x50>
  829734:	e0bffe17 	ldw	r2,-8(fp)
  829738:	00c03934 	movhi	r3,228
  82973c:	18e7c204 	addi	r3,r3,-24824
  829740:	10800f24 	muli	r2,r2,60
  829744:	10c5883a 	add	r2,r2,r3
  829748:	10800017 	ldw	r2,0(r2)
  82974c:	10800198 	cmpnei	r2,r2,6
  829750:	1000031e 	bne	r2,zero,829760 <dhc_ifacedone+0x5c>
       ( dhc_states[iface].state == DHCS_BOUND  )  )
   {
      return TRUE ;
  829754:	00800044 	movi	r2,1
  829758:	e0bfff15 	stw	r2,-4(fp)
  82975c:	00000106 	br	829764 <dhc_ifacedone+0x60>
   }
   else
   {
      return FALSE ;
  829760:	e03fff15 	stw	zero,-4(fp)
  829764:	e0bfff17 	ldw	r2,-4(fp)
   }
}
  829768:	e037883a 	mov	sp,fp
  82976c:	df000017 	ldw	fp,0(sp)
  829770:	dec00104 	addi	sp,sp,4
  829774:	f800283a 	ret

00829778 <dhc_set_state>:
 *
 * RETURNS: 
 */

void dhc_set_state(int iface, int state)
{
  829778:	defffc04 	addi	sp,sp,-16
  82977c:	dfc00315 	stw	ra,12(sp)
  829780:	df000215 	stw	fp,8(sp)
  829784:	df000204 	addi	fp,sp,8
  829788:	e13ffe15 	stw	r4,-8(fp)
  82978c:	e17fff15 	stw	r5,-4(fp)
   dhc_states[iface].state = state; /* Set the new state */
  829790:	e0bffe17 	ldw	r2,-8(fp)
  829794:	e13fff17 	ldw	r4,-4(fp)
  829798:	00c03934 	movhi	r3,228
  82979c:	18e7c204 	addi	r3,r3,-24824
  8297a0:	10800f24 	muli	r2,r2,60
  8297a4:	10c5883a 	add	r2,r2,r3
  8297a8:	11000015 	stw	r4,0(r2)
   dhc_states[iface].tries = 0;     /* Reset the number of tries */
  8297ac:	e0bffe17 	ldw	r2,-8(fp)
  8297b0:	00c03934 	movhi	r3,228
  8297b4:	18e7c204 	addi	r3,r3,-24824
  8297b8:	10800f24 	muli	r2,r2,60
  8297bc:	10c5883a 	add	r2,r2,r3
  8297c0:	10800104 	addi	r2,r2,4
  8297c4:	10000015 	stw	zero,0(r2)

   /* If callback is set, call it */
   if (dhc_states[iface].callback)
  8297c8:	e0bffe17 	ldw	r2,-8(fp)
  8297cc:	00c03934 	movhi	r3,228
  8297d0:	18e7c204 	addi	r3,r3,-24824
  8297d4:	10800f24 	muli	r2,r2,60
  8297d8:	10c5883a 	add	r2,r2,r3
  8297dc:	10800e04 	addi	r2,r2,56
  8297e0:	10800017 	ldw	r2,0(r2)
  8297e4:	1005003a 	cmpeq	r2,r2,zero
  8297e8:	10000a1e 	bne	r2,zero,829814 <dhc_set_state+0x9c>
      dhc_states[iface].callback(iface,state);
  8297ec:	e0bffe17 	ldw	r2,-8(fp)
  8297f0:	00c03934 	movhi	r3,228
  8297f4:	18e7c204 	addi	r3,r3,-24824
  8297f8:	10800f24 	muli	r2,r2,60
  8297fc:	10c5883a 	add	r2,r2,r3
  829800:	10800e04 	addi	r2,r2,56
  829804:	10800017 	ldw	r2,0(r2)
  829808:	e13ffe17 	ldw	r4,-8(fp)
  82980c:	e17fff17 	ldw	r5,-4(fp)
  829810:	103ee83a 	callr	r2
}
  829814:	e037883a 	mov	sp,fp
  829818:	dfc00117 	ldw	ra,4(sp)
  82981c:	df000017 	ldw	fp,0(sp)
  829820:	dec00204 	addi	sp,sp,8
  829824:	f800283a 	ret

00829828 <find_opt>:
 * RETURNS:  Return pointer to that code if found, NULL if not found.
 */

u_char * 
find_opt(u_char opcode, u_char * opts)
{
  829828:	defffb04 	addi	sp,sp,-20
  82982c:	df000415 	stw	fp,16(sp)
  829830:	df000404 	addi	fp,sp,16
  829834:	e17ffe15 	stw	r5,-8(fp)
  829838:	e13ffd05 	stb	r4,-12(fp)
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */
  82983c:	e0bffe17 	ldw	r2,-8(fp)
  829840:	10804e04 	addi	r2,r2,312
  829844:	e0bffc15 	stw	r2,-16(fp)

   while (opts < end)
  829848:	00002106 	br	8298d0 <find_opt+0xa8>
   {
      if (*opts == opcode) /* found it */
  82984c:	e0bffe17 	ldw	r2,-8(fp)
  829850:	10800003 	ldbu	r2,0(r2)
  829854:	10c03fcc 	andi	r3,r2,255
  829858:	e0bffd03 	ldbu	r2,-12(fp)
  82985c:	1880031e 	bne	r3,r2,82986c <find_opt+0x44>
         return opts;
  829860:	e0bffe17 	ldw	r2,-8(fp)
  829864:	e0bfff15 	stw	r2,-4(fp)
  829868:	00001d06 	br	8298e0 <find_opt+0xb8>
      if (*opts == DHOP_END)  /* end of options; opcode not found */
  82986c:	e0bffe17 	ldw	r2,-8(fp)
  829870:	10800003 	ldbu	r2,0(r2)
  829874:	10803fcc 	andi	r2,r2,255
  829878:	10803fd8 	cmpnei	r2,r2,255
  82987c:	1000021e 	bne	r2,zero,829888 <find_opt+0x60>
         return NULL;
  829880:	e03fff15 	stw	zero,-4(fp)
  829884:	00001606 	br	8298e0 <find_opt+0xb8>
      if (*opts == DHOP_PAD)  /* PAD has only 1 byte */
  829888:	e0bffe17 	ldw	r2,-8(fp)
  82988c:	10800003 	ldbu	r2,0(r2)
  829890:	10803fcc 	andi	r2,r2,255
  829894:	1004c03a 	cmpne	r2,r2,zero
  829898:	1000041e 	bne	r2,zero,8298ac <find_opt+0x84>
         opts++;
  82989c:	e0bffe17 	ldw	r2,-8(fp)
  8298a0:	10800044 	addi	r2,r2,1
  8298a4:	e0bffe15 	stw	r2,-8(fp)
  8298a8:	00000906 	br	8298d0 <find_opt+0xa8>
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
  8298ac:	e0bffe17 	ldw	r2,-8(fp)
  8298b0:	10800044 	addi	r2,r2,1
  8298b4:	10800003 	ldbu	r2,0(r2)
  8298b8:	10803fcc 	andi	r2,r2,255
  8298bc:	1007883a 	mov	r3,r2
  8298c0:	e0bffe17 	ldw	r2,-8(fp)
  8298c4:	1885883a 	add	r2,r3,r2
  8298c8:	10800084 	addi	r2,r2,2
  8298cc:	e0bffe15 	stw	r2,-8(fp)
u_char * 
find_opt(u_char opcode, u_char * opts)
{
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */

   while (opts < end)
  8298d0:	e0fffe17 	ldw	r3,-8(fp)
  8298d4:	e0bffc17 	ldw	r2,-16(fp)
  8298d8:	18bfdc36 	bltu	r3,r2,82984c <find_opt+0x24>
         opts++;
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
   }
   /* no DHOP_END option?? */
   return NULL;
  8298dc:	e03fff15 	stw	zero,-4(fp)
  8298e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8298e4:	e037883a 	mov	sp,fp
  8298e8:	df000017 	ldw	fp,0(sp)
  8298ec:	dec00104 	addi	sp,sp,4
  8298f0:	f800283a 	ret

008298f4 <pk_init>:
 * for a PACKET buffer or a data buffer fails, or if there is an inconsistency
 * between (bigbufs + lilbufs) and MAXPACKETS) it returns -1. 
 */

int pk_init (void)
{
  8298f4:	defff704 	addi	sp,sp,-36
  8298f8:	dfc00815 	stw	ra,32(sp)
  8298fc:	df000715 	stw	fp,28(sp)
  829900:	df000704 	addi	fp,sp,28
   PACKET packet;
   unsigned i;
   unsigned numpkts = bigbufs + lilbufs;
  829904:	d0a04017 	ldw	r2,-32512(gp)
  829908:	d0e03e17 	ldw	r3,-32520(gp)
  82990c:	10c5883a 	add	r2,r2,r3
  829910:	e0bffc15 	stw	r2,-16(fp)
   u_char align_req;
   
#ifdef ALIGN_BUFS
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
  829914:	e03ffb05 	stb	zero,-20(fp)
#endif

   for (i = 0; i < numpkts; i++)
  829918:	e03ffd15 	stw	zero,-12(fp)
  82991c:	00007e06 	br	829b18 <pk_init+0x224>
   {
      packet = (PACKET)NB_ALLOC(sizeof(struct netbuf));
  829920:	01000d04 	movi	r4,52
  829924:	082b20c0 	call	82b20c <npalloc>
  829928:	e0bffe15 	stw	r2,-8(fp)
      if (packet == NULL)
  82992c:	e0bffe17 	ldw	r2,-8(fp)
  829930:	1005003a 	cmpeq	r2,r2,zero
  829934:	1000871e 	bne	r2,zero,829b54 <pk_init+0x260>
         goto no_pkt_buf;

#ifdef NPDEBUG
      if (i >= MAXPACKETS)
  829938:	e0bffd17 	ldw	r2,-12(fp)
  82993c:	10800f30 	cmpltui	r2,r2,60
  829940:	1000061e 	bne	r2,zero,82995c <pk_init+0x68>
      {
         dprintf("pk_init: bad define\n");
  829944:	01002174 	movhi	r4,133
  829948:	21357e04 	addi	r4,r4,-10760
  82994c:	08077600 	call	807760 <puts>
         return -1;
  829950:	00bfffc4 	movi	r2,-1
  829954:	e0bfff15 	stw	r2,-4(fp)
  829958:	00008406 	br	829b6c <pk_init+0x278>
      }
      pktlog[i] = packet;     /* save for debugging */
  82995c:	e0bffd17 	ldw	r2,-12(fp)
  829960:	00c03934 	movhi	r3,228
  829964:	18e80704 	addi	r3,r3,-24548
  829968:	1085883a 	add	r2,r2,r2
  82996c:	1085883a 	add	r2,r2,r2
  829970:	10c7883a 	add	r3,r2,r3
  829974:	e0bffe17 	ldw	r2,-8(fp)
  829978:	18800015 	stw	r2,0(r3)
#endif

      packet->nb_tstamp = 0L;
  82997c:	e0bffe17 	ldw	r2,-8(fp)
  829980:	10000515 	stw	zero,20(r2)

      if (i < bigbufs)
  829984:	d0e04017 	ldw	r3,-32512(gp)
  829988:	e0bffd17 	ldw	r2,-12(fp)
  82998c:	10c0302e 	bgeu	r2,r3,829a50 <pk_init+0x15c>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
  829990:	d0a04117 	ldw	r2,-32508(gp)
  829994:	11000144 	addi	r4,r2,5
  829998:	082b20c0 	call	82b20c <npalloc>
  82999c:	1007883a 	mov	r3,r2
  8299a0:	e0bffe17 	ldw	r2,-8(fp)
  8299a4:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
  8299a8:	e0bffe17 	ldw	r2,-8(fp)
  8299ac:	10800117 	ldw	r2,4(r2)
  8299b0:	1005003a 	cmpeq	r2,r2,zero
  8299b4:	1000671e 	bne	r2,zero,829b54 <pk_init+0x260>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
  8299b8:	e03ffa15 	stw	zero,-24(fp)
  8299bc:	00000906 	br	8299e4 <pk_init+0xf0>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
  8299c0:	e0bffe17 	ldw	r2,-8(fp)
  8299c4:	10c00117 	ldw	r3,4(r2)
  8299c8:	e0bffa17 	ldw	r2,-24(fp)
  8299cc:	1887883a 	add	r3,r3,r2
  8299d0:	00801344 	movi	r2,77
  8299d4:	18800005 	stb	r2,0(r3)
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
            if (!(packet->nb_buff))
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
  8299d8:	e0bffa17 	ldw	r2,-24(fp)
  8299dc:	10800044 	addi	r2,r2,1
  8299e0:	e0bffa15 	stw	r2,-24(fp)
  8299e4:	e0bffa17 	ldw	r2,-24(fp)
  8299e8:	10800110 	cmplti	r2,r2,4
  8299ec:	103ff41e 	bne	r2,zero,8299c0 <pk_init+0xcc>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */

            *(packet->nb_buff + bigbufsiz + ALIGN_TYPE) = 'M';
  8299f0:	e0bffe17 	ldw	r2,-8(fp)
  8299f4:	10c00117 	ldw	r3,4(r2)
  8299f8:	d0a04117 	ldw	r2,-32508(gp)
  8299fc:	1885883a 	add	r2,r3,r2
  829a00:	10c00104 	addi	r3,r2,4
  829a04:	00801344 	movi	r2,77
  829a08:	18800005 	stb	r2,0(r3)
            packet->nb_buff += ALIGN_TYPE;   /* bump buf past MMs */
  829a0c:	e0bffe17 	ldw	r2,-8(fp)
  829a10:	10800117 	ldw	r2,4(r2)
  829a14:	10c00104 	addi	r3,r2,4
  829a18:	e0bffe17 	ldw	r2,-8(fp)
  829a1c:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
  829a20:	e0bffe17 	ldw	r2,-8(fp)
  829a24:	10800117 	ldw	r2,4(r2)
  829a28:	1005003a 	cmpeq	r2,r2,zero
  829a2c:	1000491e 	bne	r2,zero,829b54 <pk_init+0x260>
            goto no_pkt_buf;
         packet->nb_blen = bigbufsiz;
  829a30:	d0e04117 	ldw	r3,-32508(gp)
  829a34:	e0bffe17 	ldw	r2,-8(fp)
  829a38:	10c00215 	stw	r3,8(r2)
         q_add(&bigfreeq, packet);        /* save it in big pkt free queue */
  829a3c:	01003934 	movhi	r4,228
  829a40:	21284304 	addi	r4,r4,-24308
  829a44:	e17ffe17 	ldw	r5,-8(fp)
  829a48:	082a1580 	call	82a158 <putq>
  829a4c:	00002f06 	br	829b0c <pk_init+0x218>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
  829a50:	d0a03f17 	ldw	r2,-32516(gp)
  829a54:	11000144 	addi	r4,r2,5
  829a58:	082b20c0 	call	82b20c <npalloc>
  829a5c:	1007883a 	mov	r3,r2
  829a60:	e0bffe17 	ldw	r2,-8(fp)
  829a64:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
  829a68:	e0bffe17 	ldw	r2,-8(fp)
  829a6c:	10800117 	ldw	r2,4(r2)
  829a70:	1005003a 	cmpeq	r2,r2,zero
  829a74:	1000371e 	bne	r2,zero,829b54 <pk_init+0x260>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
  829a78:	e03ff915 	stw	zero,-28(fp)
  829a7c:	00000906 	br	829aa4 <pk_init+0x1b0>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
  829a80:	e0bffe17 	ldw	r2,-8(fp)
  829a84:	10c00117 	ldw	r3,4(r2)
  829a88:	e0bff917 	ldw	r2,-28(fp)
  829a8c:	1887883a 	add	r3,r3,r2
  829a90:	00801344 	movi	r2,77
  829a94:	18800005 	stb	r2,0(r3)
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
            if (!(packet->nb_buff))
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
  829a98:	e0bff917 	ldw	r2,-28(fp)
  829a9c:	10800044 	addi	r2,r2,1
  829aa0:	e0bff915 	stw	r2,-28(fp)
  829aa4:	e0bff917 	ldw	r2,-28(fp)
  829aa8:	10800110 	cmplti	r2,r2,4
  829aac:	103ff41e 	bne	r2,zero,829a80 <pk_init+0x18c>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */

            *(packet->nb_buff + lilbufsiz + ALIGN_TYPE) = 'M';
  829ab0:	e0bffe17 	ldw	r2,-8(fp)
  829ab4:	10c00117 	ldw	r3,4(r2)
  829ab8:	d0a03f17 	ldw	r2,-32516(gp)
  829abc:	1885883a 	add	r2,r3,r2
  829ac0:	10c00104 	addi	r3,r2,4
  829ac4:	00801344 	movi	r2,77
  829ac8:	18800005 	stb	r2,0(r3)
            packet->nb_buff += ALIGN_TYPE;
  829acc:	e0bffe17 	ldw	r2,-8(fp)
  829ad0:	10800117 	ldw	r2,4(r2)
  829ad4:	10c00104 	addi	r3,r2,4
  829ad8:	e0bffe17 	ldw	r2,-8(fp)
  829adc:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
  829ae0:	e0bffe17 	ldw	r2,-8(fp)
  829ae4:	10800117 	ldw	r2,4(r2)
  829ae8:	1005003a 	cmpeq	r2,r2,zero
  829aec:	1000191e 	bne	r2,zero,829b54 <pk_init+0x260>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
  829af0:	d0e03f17 	ldw	r3,-32516(gp)
  829af4:	e0bffe17 	ldw	r2,-8(fp)
  829af8:	10c00215 	stw	r3,8(r2)
         q_add(&lilfreeq, packet);        /* save it in little free queue */
  829afc:	01003934 	movhi	r4,228
  829b00:	2127fe04 	addi	r4,r4,-24584
  829b04:	e17ffe17 	ldw	r5,-8(fp)
  829b08:	082a1580 	call	82a158 <putq>
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
  829b0c:	e0bffd17 	ldw	r2,-12(fp)
  829b10:	10800044 	addi	r2,r2,1
  829b14:	e0bffd15 	stw	r2,-12(fp)
  829b18:	e0fffd17 	ldw	r3,-12(fp)
  829b1c:	e0bffc17 	ldw	r2,-16(fp)
  829b20:	18bf7f36 	bltu	r3,r2,829920 <pk_init+0x2c>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
         q_add(&lilfreeq, packet);        /* save it in little free queue */
      }
   }
   bigfreeq.q_min = bigbufs;
  829b24:	d0a04017 	ldw	r2,-32512(gp)
  829b28:	1007883a 	mov	r3,r2
  829b2c:	00803934 	movhi	r2,228
  829b30:	10a84304 	addi	r2,r2,-24308
  829b34:	10c00415 	stw	r3,16(r2)
   lilfreeq.q_min = lilbufs;
  829b38:	d0a03e17 	ldw	r2,-32520(gp)
  829b3c:	1007883a 	mov	r3,r2
  829b40:	00803934 	movhi	r2,228
  829b44:	10a7fe04 	addi	r2,r2,-24584
  829b48:	10c00415 	stw	r3,16(r2)
   heap_curr_mem_hi_watermark = 0;
   /* set the heap's access type to blocking */
   heap_type = HEAP_ACCESS_BLOCKING;
#endif

   return 0;
  829b4c:	e03fff15 	stw	zero,-4(fp)
  829b50:	00000606 	br	829b6c <pk_init+0x278>

no_pkt_buf:
#ifdef NPDEBUG
   dprintf("Netinit: calloc failed getting buffer %d\n", i);
  829b54:	01002174 	movhi	r4,133
  829b58:	21358304 	addi	r4,r4,-10740
  829b5c:	e17ffd17 	ldw	r5,-12(fp)
  829b60:	08076480 	call	807648 <printf>
#endif
   return(-1);
  829b64:	00bfffc4 	movi	r2,-1
  829b68:	e0bfff15 	stw	r2,-4(fp)
  829b6c:	e0bfff17 	ldw	r2,-4(fp)
}
  829b70:	e037883a 	mov	sp,fp
  829b74:	dfc00117 	ldw	ra,4(sp)
  829b78:	df000017 	ldw	fp,0(sp)
  829b7c:	dec00204 	addi	sp,sp,8
  829b80:	f800283a 	ret

00829b84 <pk_alloc>:
 * OUTPUT: 0 if the request cannot be satisfied, or a pointer to the struct
 * netbuf structure that corresponds to the just allocated data buffer.
 */

PACKET pk_alloc(unsigned len)
{
  829b84:	defffb04 	addi	sp,sp,-20
  829b88:	dfc00415 	stw	ra,16(sp)
  829b8c:	df000315 	stw	fp,12(sp)
  829b90:	df000304 	addi	fp,sp,12
  829b94:	e13ffe15 	stw	r4,-8(fp)
   PACKET p;

   if (len > bigbufsiz) /* caller wants oversize buffer? */
  829b98:	d0e04117 	ldw	r3,-32508(gp)
  829b9c:	e0bffe17 	ldw	r2,-8(fp)
  829ba0:	1880022e 	bgeu	r3,r2,829bac <pk_alloc+0x28>
   {
#ifdef HEAPBUFS
      if ((p = pk_alloc_heapbuf (len)) == NULL)
         return NULL;
#else
      return(NULL);
  829ba4:	e03fff15 	stw	zero,-4(fp)
  829ba8:	00002706 	br	829c48 <pk_alloc+0xc4>
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
  829bac:	d0e03f17 	ldw	r3,-32516(gp)
  829bb0:	e0bffe17 	ldw	r2,-8(fp)
  829bb4:	18800536 	bltu	r3,r2,829bcc <pk_alloc+0x48>
  829bb8:	00803934 	movhi	r2,228
  829bbc:	10a7fe04 	addi	r2,r2,-24584
  829bc0:	10800217 	ldw	r2,8(r2)
  829bc4:	1004c03a 	cmpne	r2,r2,zero
  829bc8:	1000051e 	bne	r2,zero,829be0 <pk_alloc+0x5c>
         p = (PACKET)getq(&bigfreeq);
  829bcc:	01003934 	movhi	r4,228
  829bd0:	21284304 	addi	r4,r4,-24308
  829bd4:	082a0900 	call	82a090 <getq>
  829bd8:	e0bffd15 	stw	r2,-12(fp)
      return(NULL);
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
  829bdc:	00000406 	br	829bf0 <pk_alloc+0x6c>
         p = (PACKET)getq(&bigfreeq);
      else
         p = (PACKET)getq(&lilfreeq);
  829be0:	01003934 	movhi	r4,228
  829be4:	2127fe04 	addi	r4,r4,-24584
  829be8:	082a0900 	call	82a090 <getq>
  829bec:	e0bffd15 	stw	r2,-12(fp)

      if (!p)
  829bf0:	e0bffd17 	ldw	r2,-12(fp)
  829bf4:	1004c03a 	cmpne	r2,r2,zero
  829bf8:	1000021e 	bne	r2,zero,829c04 <pk_alloc+0x80>
         return NULL;
  829bfc:	e03fff15 	stw	zero,-4(fp)
  829c00:	00001106 	br	829c48 <pk_alloc+0xc4>
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
  829c04:	e0bffd17 	ldw	r2,-12(fp)
  829c08:	10c00117 	ldw	r3,4(r2)
  829c0c:	00802174 	movhi	r2,133
  829c10:	1082ff04 	addi	r2,r2,3068
  829c14:	10800017 	ldw	r2,0(r2)
  829c18:	1887883a 	add	r3,r3,r2
  829c1c:	e0bffd17 	ldw	r2,-12(fp)
  829c20:	10c00315 	stw	r3,12(r2)
   p->nb_plen = 0;   /* no protocol data there yet */
  829c24:	e0bffd17 	ldw	r2,-12(fp)
  829c28:	10000415 	stw	zero,16(r2)
   p->net = NULL;
  829c2c:	e0bffd17 	ldw	r2,-12(fp)
  829c30:	10000615 	stw	zero,24(r2)
   p->nexthop = NULL;      /* no next hop  */
   p->nb_pmtu = 1240;      /* Set minimum IPv6 Path MTU */
#endif   /* IP_V6 */
#endif /* LINKED_PKTS */

   p->inuse = 1;  /* initially buffer in use by 1 user */
  829c34:	e0fffd17 	ldw	r3,-12(fp)
  829c38:	00800044 	movi	r2,1
  829c3c:	18800915 	stw	r2,36(r3)

   /* note that 'type' and 'fhost' fields are not set in pk_alloc () */
   return(p);
  829c40:	e0bffd17 	ldw	r2,-12(fp)
  829c44:	e0bfff15 	stw	r2,-4(fp)
  829c48:	e0bfff17 	ldw	r2,-4(fp)
}
  829c4c:	e037883a 	mov	sp,fp
  829c50:	dfc00117 	ldw	ra,4(sp)
  829c54:	df000017 	ldw	fp,0(sp)
  829c58:	dec00204 	addi	sp,sp,8
  829c5c:	f800283a 	ret

00829c60 <pk_validate>:
 * OUTPUT: 0 if the buffer being freed was successfully validated, or
 * -1 if the validation failed.
 */

int pk_validate(PACKET pkt)   /* check if pk_free() can free the pkt */
{
  829c60:	defffa04 	addi	sp,sp,-24
  829c64:	dfc00515 	stw	ra,20(sp)
  829c68:	df000415 	stw	fp,16(sp)
  829c6c:	df000404 	addi	fp,sp,16
  829c70:	e13ffe15 	stw	r4,-8(fp)
   /* If packet link is non-zero, then this packet is
    * part of a chain and deleted this packet would break
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
  829c74:	e0bffe17 	ldw	r2,-8(fp)
  829c78:	10800017 	ldw	r2,0(r2)
  829c7c:	1005003a 	cmpeq	r2,r2,zero
  829c80:	1000101e 	bne	r2,zero,829cc4 <pk_validate+0x64>
  829c84:	e0bffe17 	ldw	r2,-8(fp)
  829c88:	10800917 	ldw	r2,36(r2)
  829c8c:	1005003a 	cmpeq	r2,r2,zero
  829c90:	10000c1e 	bne	r2,zero,829cc4 <pk_validate+0x64>
   {
      INCR_SHARED_VAR (memestats, INCONSISTENT_LOCATION_ERR, 1);   
  829c94:	082a9c80 	call	82a9c8 <irq_Mask>
  829c98:	00803934 	movhi	r2,228
  829c9c:	10a80304 	addi	r2,r2,-24564
  829ca0:	10800317 	ldw	r2,12(r2)
  829ca4:	10c00044 	addi	r3,r2,1
  829ca8:	00803934 	movhi	r2,228
  829cac:	10a80304 	addi	r2,r2,-24564
  829cb0:	10c00315 	stw	r3,12(r2)
  829cb4:	082aa240 	call	82aa24 <irq_Unmask>
      return -1;
  829cb8:	00bfffc4 	movi	r2,-1
  829cbc:	e0bfff15 	stw	r2,-4(fp)
  829cc0:	00008f06 	br	829f00 <pk_validate+0x2a0>
   }
   else  
#endif /* HEAPBUFS */
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
  829cc4:	e0bffe17 	ldw	r2,-8(fp)
  829cc8:	10c00217 	ldw	r3,8(r2)
  829ccc:	d0a04117 	ldw	r2,-32508(gp)
  829cd0:	1880221e 	bne	r3,r2,829d5c <pk_validate+0xfc>
      {
         ENTER_CRIT_SECTION(&bigfreeq);
  829cd4:	082a9c80 	call	82a9c8 <irq_Mask>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
  829cd8:	00803934 	movhi	r2,228
  829cdc:	10a84304 	addi	r2,r2,-24308
  829ce0:	10800017 	ldw	r2,0(r2)
  829ce4:	e0bffd15 	stw	r2,-12(fp)
  829ce8:	00001706 	br	829d48 <pk_validate+0xe8>
            if (p == pkt)
  829cec:	e0fffd17 	ldw	r3,-12(fp)
  829cf0:	e0bffe17 	ldw	r2,-8(fp)
  829cf4:	1880111e 	bne	r3,r2,829d3c <pk_validate+0xdc>
            {
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
  829cf8:	01002174 	movhi	r4,133
  829cfc:	21358e04 	addi	r4,r4,-10696
  829d00:	e17ffe17 	ldw	r5,-8(fp)
  829d04:	08076480 	call	807648 <printf>
               EXIT_CRIT_SECTION(&bigfreeq);
  829d08:	082aa240 	call	82aa24 <irq_Unmask>
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
  829d0c:	082a9c80 	call	82a9c8 <irq_Mask>
  829d10:	00803934 	movhi	r2,228
  829d14:	10a80304 	addi	r2,r2,-24564
  829d18:	10800217 	ldw	r2,8(r2)
  829d1c:	10c00044 	addi	r3,r2,1
  829d20:	00803934 	movhi	r2,228
  829d24:	10a80304 	addi	r2,r2,-24564
  829d28:	10c00215 	stw	r3,8(r2)
  829d2c:	082aa240 	call	82aa24 <irq_Unmask>
               return -1;
  829d30:	00bfffc4 	movi	r2,-1
  829d34:	e0bfff15 	stw	r2,-4(fp)
  829d38:	00007106 	br	829f00 <pk_validate+0x2a0>
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
      {
         ENTER_CRIT_SECTION(&bigfreeq);
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
  829d3c:	e0bffd17 	ldw	r2,-12(fp)
  829d40:	10800017 	ldw	r2,0(r2)
  829d44:	e0bffd15 	stw	r2,-12(fp)
  829d48:	e0bffd17 	ldw	r2,-12(fp)
  829d4c:	1004c03a 	cmpne	r2,r2,zero
  829d50:	103fe61e 	bne	r2,zero,829cec <pk_validate+0x8c>
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
               EXIT_CRIT_SECTION(&bigfreeq);
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
               return -1;
            }
         EXIT_CRIT_SECTION(&bigfreeq);
  829d54:	082aa240 	call	82aa24 <irq_Unmask>
  829d58:	00003206 	br	829e24 <pk_validate+0x1c4>
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
  829d5c:	e0bffe17 	ldw	r2,-8(fp)
  829d60:	10c00217 	ldw	r3,8(r2)
  829d64:	d0a03f17 	ldw	r2,-32516(gp)
  829d68:	1880221e 	bne	r3,r2,829df4 <pk_validate+0x194>
      {
         ENTER_CRIT_SECTION(&lilfreeq);
  829d6c:	082a9c80 	call	82a9c8 <irq_Mask>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
  829d70:	00803934 	movhi	r2,228
  829d74:	10a7fe04 	addi	r2,r2,-24584
  829d78:	10800017 	ldw	r2,0(r2)
  829d7c:	e0bffd15 	stw	r2,-12(fp)
  829d80:	00001706 	br	829de0 <pk_validate+0x180>
            if (p == pkt)
  829d84:	e0fffd17 	ldw	r3,-12(fp)
  829d88:	e0bffe17 	ldw	r2,-8(fp)
  829d8c:	1880111e 	bne	r3,r2,829dd4 <pk_validate+0x174>
         {
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
  829d90:	01002174 	movhi	r4,133
  829d94:	21359804 	addi	r4,r4,-10656
  829d98:	e17ffe17 	ldw	r5,-8(fp)
  829d9c:	08076480 	call	807648 <printf>
            EXIT_CRIT_SECTION(&lilfreeq);
  829da0:	082aa240 	call	82aa24 <irq_Unmask>
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
  829da4:	082a9c80 	call	82a9c8 <irq_Mask>
  829da8:	00803934 	movhi	r2,228
  829dac:	10a80304 	addi	r2,r2,-24564
  829db0:	10800217 	ldw	r2,8(r2)
  829db4:	10c00044 	addi	r3,r2,1
  829db8:	00803934 	movhi	r2,228
  829dbc:	10a80304 	addi	r2,r2,-24564
  829dc0:	10c00215 	stw	r3,8(r2)
  829dc4:	082aa240 	call	82aa24 <irq_Unmask>
            return -1;
  829dc8:	00bfffc4 	movi	r2,-1
  829dcc:	e0bfff15 	stw	r2,-4(fp)
  829dd0:	00004b06 	br	829f00 <pk_validate+0x2a0>
         EXIT_CRIT_SECTION(&bigfreeq);
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
      {
         ENTER_CRIT_SECTION(&lilfreeq);
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
  829dd4:	e0bffd17 	ldw	r2,-12(fp)
  829dd8:	10800017 	ldw	r2,0(r2)
  829ddc:	e0bffd15 	stw	r2,-12(fp)
  829de0:	e0bffd17 	ldw	r2,-12(fp)
  829de4:	1004c03a 	cmpne	r2,r2,zero
  829de8:	103fe61e 	bne	r2,zero,829d84 <pk_validate+0x124>
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
            EXIT_CRIT_SECTION(&lilfreeq);
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
            return -1;
         }
         EXIT_CRIT_SECTION(&lilfreeq);
  829dec:	082aa240 	call	82aa24 <irq_Unmask>
  829df0:	00000c06 	br	829e24 <pk_validate+0x1c4>
      }
      else
      {
         /* log an error */
         INCR_SHARED_VAR (memestats, BAD_REGULAR_BUF_LEN_ERR, 1);
  829df4:	082a9c80 	call	82a9c8 <irq_Mask>
  829df8:	00803934 	movhi	r2,228
  829dfc:	10a80304 	addi	r2,r2,-24564
  829e00:	10800017 	ldw	r2,0(r2)
  829e04:	10c00044 	addi	r3,r2,1
  829e08:	00803934 	movhi	r2,228
  829e0c:	10a80304 	addi	r2,r2,-24564
  829e10:	10c00015 	stw	r3,0(r2)
  829e14:	082aa240 	call	82aa24 <irq_Unmask>
         return -1;
  829e18:	00bfffc4 	movi	r2,-1
  829e1c:	e0bfff15 	stw	r2,-4(fp)
  829e20:	00003706 	br	829f00 <pk_validate+0x2a0>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
  829e24:	00800104 	movi	r2,4
  829e28:	e0bffc15 	stw	r2,-16(fp)
  829e2c:	00001906 	br	829e94 <pk_validate+0x234>
   {
      if (*(pkt->nb_buff - j) != 'M')
  829e30:	e0bffe17 	ldw	r2,-8(fp)
  829e34:	10c00117 	ldw	r3,4(r2)
  829e38:	e0bffc17 	ldw	r2,-16(fp)
  829e3c:	1885c83a 	sub	r2,r3,r2
  829e40:	10800003 	ldbu	r2,0(r2)
  829e44:	10803fcc 	andi	r2,r2,255
  829e48:	1080201c 	xori	r2,r2,128
  829e4c:	10bfe004 	addi	r2,r2,-128
  829e50:	10801360 	cmpeqi	r2,r2,77
  829e54:	10000c1e 	bne	r2,zero,829e88 <pk_validate+0x228>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
  829e58:	082a9c80 	call	82a9c8 <irq_Mask>
  829e5c:	00803934 	movhi	r2,228
  829e60:	10a80304 	addi	r2,r2,-24564
  829e64:	10800117 	ldw	r2,4(r2)
  829e68:	10c00044 	addi	r3,r2,1
  829e6c:	00803934 	movhi	r2,228
  829e70:	10a80304 	addi	r2,r2,-24564
  829e74:	10c00115 	stw	r3,4(r2)
  829e78:	082aa240 	call	82aa24 <irq_Unmask>
         return -1;
  829e7c:	00bfffc4 	movi	r2,-1
  829e80:	e0bfff15 	stw	r2,-4(fp)
  829e84:	00001e06 	br	829f00 <pk_validate+0x2a0>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
  829e88:	e0bffc17 	ldw	r2,-16(fp)
  829e8c:	10bfffc4 	addi	r2,r2,-1
  829e90:	e0bffc15 	stw	r2,-16(fp)
  829e94:	e0bffc17 	ldw	r2,-16(fp)
  829e98:	10800048 	cmpgei	r2,r2,1
  829e9c:	103fe41e 	bne	r2,zero,829e30 <pk_validate+0x1d0>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
         return -1;
      }
   }
   if (*(pkt->nb_buff + pkt->nb_blen) != 'M')
  829ea0:	e0bffe17 	ldw	r2,-8(fp)
  829ea4:	10c00117 	ldw	r3,4(r2)
  829ea8:	e0bffe17 	ldw	r2,-8(fp)
  829eac:	10800217 	ldw	r2,8(r2)
  829eb0:	1885883a 	add	r2,r3,r2
  829eb4:	10800003 	ldbu	r2,0(r2)
  829eb8:	10803fcc 	andi	r2,r2,255
  829ebc:	1080201c 	xori	r2,r2,128
  829ec0:	10bfe004 	addi	r2,r2,-128
  829ec4:	10801360 	cmpeqi	r2,r2,77
  829ec8:	10000c1e 	bne	r2,zero,829efc <pk_validate+0x29c>
   {
      INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
  829ecc:	082a9c80 	call	82a9c8 <irq_Mask>
  829ed0:	00803934 	movhi	r2,228
  829ed4:	10a80304 	addi	r2,r2,-24564
  829ed8:	10800117 	ldw	r2,4(r2)
  829edc:	10c00044 	addi	r3,r2,1
  829ee0:	00803934 	movhi	r2,228
  829ee4:	10a80304 	addi	r2,r2,-24564
  829ee8:	10c00115 	stw	r3,4(r2)
  829eec:	082aa240 	call	82aa24 <irq_Unmask>
      return -1;
  829ef0:	00bfffc4 	movi	r2,-1
  829ef4:	e0bfff15 	stw	r2,-4(fp)
  829ef8:	00000106 	br	829f00 <pk_validate+0x2a0>
   }
#endif /* NPDEBUG */

   return 0;
  829efc:	e03fff15 	stw	zero,-4(fp)
  829f00:	e0bfff17 	ldw	r2,-4(fp)
}
  829f04:	e037883a 	mov	sp,fp
  829f08:	dfc00117 	ldw	ra,4(sp)
  829f0c:	df000017 	ldw	fp,0(sp)
  829f10:	dec00204 	addi	sp,sp,8
  829f14:	f800283a 	ret

00829f18 <pk_free>:
 *
 * OUTPUT: None.
 */

void pk_free(PACKET pkt)   /* PACKET to place in free queue */
{
  829f18:	defffc04 	addi	sp,sp,-16
  829f1c:	dfc00315 	stw	ra,12(sp)
  829f20:	df000215 	stw	fp,8(sp)
  829f24:	df000204 	addi	fp,sp,8
  829f28:	e13fff15 	stw	r4,-4(fp)
      PACKET pknext;
      pknext = pkt->pk_next;
#endif /* LINKED_PKTS */

      /* validate the pkt before freeing */
      e = pk_validate(pkt);
  829f2c:	e13fff17 	ldw	r4,-4(fp)
  829f30:	0829c600 	call	829c60 <pk_validate>
  829f34:	e0bffe15 	stw	r2,-8(fp)
      if (e)
  829f38:	e0bffe17 	ldw	r2,-8(fp)
  829f3c:	1004c03a 	cmpne	r2,r2,zero
  829f40:	10001b1e 	bne	r2,zero,829fb0 <pk_free+0x98>
            continue; /* skip this pkt, examine the next pkt */
         }
#endif
         return;
      }
      if (pkt->inuse-- > 1)   /* more than 1 owner? */
  829f44:	e0bfff17 	ldw	r2,-4(fp)
  829f48:	10c00917 	ldw	r3,36(r2)
  829f4c:	188000a8 	cmpgeui	r2,r3,2
  829f50:	1009883a 	mov	r4,r2
  829f54:	18ffffc4 	addi	r3,r3,-1
  829f58:	e0bfff17 	ldw	r2,-4(fp)
  829f5c:	10c00915 	stw	r3,36(r2)
  829f60:	20803fcc 	andi	r2,r4,255
  829f64:	1004c03a 	cmpne	r2,r2,zero
  829f68:	1000111e 	bne	r2,zero,829fb0 <pk_free+0x98>
         pk_free_heapbuf (pkt);
      }
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
  829f6c:	e0bfff17 	ldw	r2,-4(fp)
  829f70:	10c00217 	ldw	r3,8(r2)
  829f74:	d0a04117 	ldw	r2,-32508(gp)
  829f78:	1880051e 	bne	r3,r2,829f90 <pk_free+0x78>
            q_add(&bigfreeq, (qp)pkt);
  829f7c:	e17fff17 	ldw	r5,-4(fp)
  829f80:	01003934 	movhi	r4,228
  829f84:	21284304 	addi	r4,r4,-24308
  829f88:	082a1580 	call	82a158 <putq>
  829f8c:	00000806 	br	829fb0 <pk_free+0x98>
         else if (pkt->nb_blen == lilbufsiz)
  829f90:	e0bfff17 	ldw	r2,-4(fp)
  829f94:	10c00217 	ldw	r3,8(r2)
  829f98:	d0a03f17 	ldw	r2,-32516(gp)
  829f9c:	1880041e 	bne	r3,r2,829fb0 <pk_free+0x98>
            q_add(&lilfreeq, (qp)pkt);
  829fa0:	e17fff17 	ldw	r5,-4(fp)
  829fa4:	01003934 	movhi	r4,228
  829fa8:	2127fe04 	addi	r4,r4,-24584
  829fac:	082a1580 	call	82a158 <putq>
#ifdef LINKED_PKTS
      pkt = pknext;
   }
#endif 

}
  829fb0:	e037883a 	mov	sp,fp
  829fb4:	dfc00117 	ldw	ra,4(sp)
  829fb8:	df000017 	ldw	fp,0(sp)
  829fbc:	dec00204 	addi	sp,sp,8
  829fc0:	f800283a 	ret

00829fc4 <pk_get_max_intrsafe_buf_len>:
 *
 * OUTPUT: This function always returns the length of a big buffer (bigbufsiz).
 */

unsigned pk_get_max_intrsafe_buf_len(void)
{
  829fc4:	deffff04 	addi	sp,sp,-4
  829fc8:	df000015 	stw	fp,0(sp)
  829fcc:	d839883a 	mov	fp,sp
   return bigbufsiz;
  829fd0:	d0a04117 	ldw	r2,-32508(gp)
}
  829fd4:	e037883a 	mov	sp,fp
  829fd8:	df000017 	ldw	fp,0(sp)
  829fdc:	dec00104 	addi	sp,sp,4
  829fe0:	f800283a 	ret

00829fe4 <dump_buf_estats>:
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
  829fe4:	defff904 	addi	sp,sp,-28
  829fe8:	dfc00615 	stw	ra,24(sp)
  829fec:	df000515 	stw	fp,20(sp)
  829ff0:	df000504 	addi	fp,sp,20
  829ff4:	e13fff15 	stw	r4,-4(fp)
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
  829ff8:	01000084 	movi	r4,2
  829ffc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   ENTER_CRIT_SECTION(&memestats);
  82a000:	082a9c80 	call	82a9c8 <irq_Mask>
   MEMCPY (&mlocal, &memestats, sizeof(memestats));
  82a004:	00c03934 	movhi	r3,228
  82a008:	18e80304 	addi	r3,r3,-24564
  82a00c:	18800017 	ldw	r2,0(r3)
  82a010:	e0bffb15 	stw	r2,-20(fp)
  82a014:	18800117 	ldw	r2,4(r3)
  82a018:	e0bffc15 	stw	r2,-16(fp)
  82a01c:	18800217 	ldw	r2,8(r3)
  82a020:	e0bffd15 	stw	r2,-12(fp)
  82a024:	18800317 	ldw	r2,12(r3)
  82a028:	e0bffe15 	stw	r2,-8(fp)
   EXIT_CRIT_SECTION(&memestats);
  82a02c:	082aa240 	call	82aa24 <irq_Unmask>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82a030:	01000084 	movi	r4,2
  82a034:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   ns_printf(pio, "Regular buffer error statistics:\n");
  82a038:	e13fff17 	ldw	r4,-4(fp)
  82a03c:	01402174 	movhi	r5,133
  82a040:	2975a204 	addi	r5,r5,-10616
  82a044:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio, "Bad buffer length %lu, Guard band violations %lu\n",mlocal[BAD_REGULAR_BUF_LEN_ERR],mlocal[GUARD_BAND_VIOLATED_ERR]);
  82a048:	e1bffb17 	ldw	r6,-20(fp)
  82a04c:	e1fffc17 	ldw	r7,-16(fp)
  82a050:	e13fff17 	ldw	r4,-4(fp)
  82a054:	01402174 	movhi	r5,133
  82a058:	2975ab04 	addi	r5,r5,-10580
  82a05c:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio, "Multiple frees %lu, Inconsistent location %lu\n",mlocal[MULTIPLE_FREE_ERR],mlocal[INCONSISTENT_LOCATION_ERR]);
  82a060:	e1bffd17 	ldw	r6,-12(fp)
  82a064:	e1fffe17 	ldw	r7,-8(fp)
  82a068:	e13fff17 	ldw	r4,-4(fp)
  82a06c:	01402174 	movhi	r5,133
  82a070:	2975b804 	addi	r5,r5,-10528
  82a074:	0825c540 	call	825c54 <ns_printf>

   return 0;
  82a078:	0005883a 	mov	r2,zero
}
  82a07c:	e037883a 	mov	sp,fp
  82a080:	dfc00117 	ldw	ra,4(sp)
  82a084:	df000017 	ldw	fp,0(sp)
  82a088:	dec00204 	addi	sp,sp,8
  82a08c:	f800283a 	ret

0082a090 <getq>:
 * RETURNS: pointer to the first element if any, or 0 if the queue is empty.
 */

void*
getq(queue * q)
{
  82a090:	defffb04 	addi	sp,sp,-20
  82a094:	dfc00415 	stw	ra,16(sp)
  82a098:	df000315 	stw	fp,12(sp)
  82a09c:	df000304 	addi	fp,sp,12
  82a0a0:	e13ffe15 	stw	r4,-8(fp)
   q_elt   temp;        /* temp for result */


   ENTER_CRIT_SECTION(q);     /* shut off ints, save old state */   
  82a0a4:	082a9c80 	call	82a9c8 <irq_Mask>

   LOCKNET_CHECK(q);          /* make sure queue is protected */

   if ((temp = q->q_head) == 0)  /* queue empty? */
  82a0a8:	e0bffe17 	ldw	r2,-8(fp)
  82a0ac:	10800017 	ldw	r2,0(r2)
  82a0b0:	e0bffd15 	stw	r2,-12(fp)
  82a0b4:	e0bffd17 	ldw	r2,-12(fp)
  82a0b8:	1004c03a 	cmpne	r2,r2,zero
  82a0bc:	1000031e 	bne	r2,zero,82a0cc <getq+0x3c>
   {
      EXIT_CRIT_SECTION(q);
  82a0c0:	082aa240 	call	82aa24 <irq_Unmask>
      return (0);             /* yes, show none */
  82a0c4:	e03fff15 	stw	zero,-4(fp)
  82a0c8:	00001d06 	br	82a140 <getq+0xb0>
   }

   q->q_head = temp->qe_next; /* else unlink */
  82a0cc:	e0bffd17 	ldw	r2,-12(fp)
  82a0d0:	10c00017 	ldw	r3,0(r2)
  82a0d4:	e0bffe17 	ldw	r2,-8(fp)
  82a0d8:	10c00015 	stw	r3,0(r2)
   temp->qe_next = 0;         /* avoid dangling pointers */
  82a0dc:	e0bffd17 	ldw	r2,-12(fp)
  82a0e0:	10000015 	stw	zero,0(r2)
   if (q->q_head == 0)        /* queue empty? */
  82a0e4:	e0bffe17 	ldw	r2,-8(fp)
  82a0e8:	10800017 	ldw	r2,0(r2)
  82a0ec:	1004c03a 	cmpne	r2,r2,zero
  82a0f0:	1000021e 	bne	r2,zero,82a0fc <getq+0x6c>
      q->q_tail = 0;          /* yes, update tail pointer too */
  82a0f4:	e0bffe17 	ldw	r2,-8(fp)
  82a0f8:	10000115 	stw	zero,4(r2)
   q->q_len--;                /* update queue length */
  82a0fc:	e0bffe17 	ldw	r2,-8(fp)
  82a100:	10800217 	ldw	r2,8(r2)
  82a104:	10ffffc4 	addi	r3,r2,-1
  82a108:	e0bffe17 	ldw	r2,-8(fp)
  82a10c:	10c00215 	stw	r3,8(r2)
   if (q->q_len < q->q_min)
  82a110:	e0bffe17 	ldw	r2,-8(fp)
  82a114:	10c00217 	ldw	r3,8(r2)
  82a118:	e0bffe17 	ldw	r2,-8(fp)
  82a11c:	10800417 	ldw	r2,16(r2)
  82a120:	1880040e 	bge	r3,r2,82a134 <getq+0xa4>
      q->q_min = q->q_len;
  82a124:	e0bffe17 	ldw	r2,-8(fp)
  82a128:	10c00217 	ldw	r3,8(r2)
  82a12c:	e0bffe17 	ldw	r2,-8(fp)
  82a130:	10c00415 	stw	r3,16(r2)

   QUEUE_CHECK(q);         /* make sure queue is not corrupted */

   EXIT_CRIT_SECTION(q);   /* restore caller's int state */
  82a134:	082aa240 	call	82aa24 <irq_Unmask>

   return ((void*)temp);
  82a138:	e0bffd17 	ldw	r2,-12(fp)
  82a13c:	e0bfff15 	stw	r2,-4(fp)
  82a140:	e0bfff17 	ldw	r2,-4(fp)
}
  82a144:	e037883a 	mov	sp,fp
  82a148:	dfc00117 	ldw	ra,4(sp)
  82a14c:	df000017 	ldw	fp,0(sp)
  82a150:	dec00204 	addi	sp,sp,8
  82a154:	f800283a 	ret

0082a158 <putq>:

void
putq(
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
  82a158:	defffc04 	addi	sp,sp,-16
  82a15c:	dfc00315 	stw	ra,12(sp)
  82a160:	df000215 	stw	fp,8(sp)
  82a164:	df000204 	addi	fp,sp,8
  82a168:	e13ffe15 	stw	r4,-8(fp)
  82a16c:	e17fff15 	stw	r5,-4(fp)
   ENTER_CRIT_SECTION(q);
  82a170:	082a9c80 	call	82a9c8 <irq_Mask>
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
  82a174:	e0bfff17 	ldw	r2,-4(fp)
  82a178:	10000015 	stw	zero,0(r2)
  82a17c:	e0bffe17 	ldw	r2,-8(fp)
  82a180:	10800017 	ldw	r2,0(r2)
  82a184:	1004c03a 	cmpne	r2,r2,zero
  82a188:	1000041e 	bne	r2,zero,82a19c <putq+0x44>
  82a18c:	e0ffff17 	ldw	r3,-4(fp)
  82a190:	e0bffe17 	ldw	r2,-8(fp)
  82a194:	10c00015 	stw	r3,0(r2)
  82a198:	00000406 	br	82a1ac <putq+0x54>
  82a19c:	e0bffe17 	ldw	r2,-8(fp)
  82a1a0:	10c00117 	ldw	r3,4(r2)
  82a1a4:	e0bfff17 	ldw	r2,-4(fp)
  82a1a8:	18800015 	stw	r2,0(r3)
  82a1ac:	e0ffff17 	ldw	r3,-4(fp)
  82a1b0:	e0bffe17 	ldw	r2,-8(fp)
  82a1b4:	10c00115 	stw	r3,4(r2)
  82a1b8:	e0bffe17 	ldw	r2,-8(fp)
  82a1bc:	10800217 	ldw	r2,8(r2)
  82a1c0:	10c00044 	addi	r3,r2,1
  82a1c4:	e0bffe17 	ldw	r2,-8(fp)
  82a1c8:	10c00215 	stw	r3,8(r2)
  82a1cc:	e0bffe17 	ldw	r2,-8(fp)
  82a1d0:	10c00217 	ldw	r3,8(r2)
  82a1d4:	e0bffe17 	ldw	r2,-8(fp)
  82a1d8:	10800317 	ldw	r2,12(r2)
  82a1dc:	10c0040e 	bge	r2,r3,82a1f0 <putq+0x98>
  82a1e0:	e0bffe17 	ldw	r2,-8(fp)
  82a1e4:	10c00217 	ldw	r3,8(r2)
  82a1e8:	e0bffe17 	ldw	r2,-8(fp)
  82a1ec:	10c00315 	stw	r3,12(r2)
   QUEUE_CHECK(q);         /* make sure queue is not corrupted */
   EXIT_CRIT_SECTION(q);   /* restore int state */
  82a1f0:	082aa240 	call	82aa24 <irq_Unmask>
}
  82a1f4:	e037883a 	mov	sp,fp
  82a1f8:	dfc00117 	ldw	ra,4(sp)
  82a1fc:	df000017 	ldw	fp,0(sp)
  82a200:	dec00204 	addi	sp,sp,8
  82a204:	f800283a 	ret

0082a208 <qdel>:
 * RETURNS: Return pointer to queue member if found, else NULL. 
 */

qp
qdel(queue * q, void * elt)
{
  82a208:	defff904 	addi	sp,sp,-28
  82a20c:	dfc00615 	stw	ra,24(sp)
  82a210:	df000515 	stw	fp,20(sp)
  82a214:	df000504 	addi	fp,sp,20
  82a218:	e13ffd15 	stw	r4,-12(fp)
  82a21c:	e17ffe15 	stw	r5,-8(fp)
   qp qptr;
   qp qlast;

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
  82a220:	082a9c80 	call	82a9c8 <irq_Mask>
   qptr = q->q_head;
  82a224:	e0bffd17 	ldw	r2,-12(fp)
  82a228:	10800017 	ldw	r2,0(r2)
  82a22c:	e0bffc15 	stw	r2,-16(fp)
   qlast = NULL;
  82a230:	e03ffb15 	stw	zero,-20(fp)
   while (qptr)
  82a234:	00002d06 	br	82a2ec <qdel+0xe4>
   {
      if (qptr == (qp)elt)
  82a238:	e0fffe17 	ldw	r3,-8(fp)
  82a23c:	e0bffc17 	ldw	r2,-16(fp)
  82a240:	10c0251e 	bne	r2,r3,82a2d8 <qdel+0xd0>
      {
         /* found our item; dequeue it */
         if (qlast)
  82a244:	e0bffb17 	ldw	r2,-20(fp)
  82a248:	1005003a 	cmpeq	r2,r2,zero
  82a24c:	1000051e 	bne	r2,zero,82a264 <qdel+0x5c>
            qlast->qe_next = qptr->qe_next;
  82a250:	e0bffc17 	ldw	r2,-16(fp)
  82a254:	10c00017 	ldw	r3,0(r2)
  82a258:	e0bffb17 	ldw	r2,-20(fp)
  82a25c:	10c00015 	stw	r3,0(r2)
  82a260:	00000406 	br	82a274 <qdel+0x6c>
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;
  82a264:	e0bffc17 	ldw	r2,-16(fp)
  82a268:	10c00017 	ldw	r3,0(r2)
  82a26c:	e0bffd17 	ldw	r2,-12(fp)
  82a270:	10c00015 	stw	r3,0(r2)

         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
  82a274:	e0bffd17 	ldw	r2,-12(fp)
  82a278:	10c00117 	ldw	r3,4(r2)
  82a27c:	e0bffe17 	ldw	r2,-8(fp)
  82a280:	1880031e 	bne	r3,r2,82a290 <qdel+0x88>
            q->q_tail = qlast;
  82a284:	e0fffd17 	ldw	r3,-12(fp)
  82a288:	e0bffb17 	ldw	r2,-20(fp)
  82a28c:	18800115 	stw	r2,4(r3)

         /* fix queue counters */
         q->q_len--;
  82a290:	e0bffd17 	ldw	r2,-12(fp)
  82a294:	10800217 	ldw	r2,8(r2)
  82a298:	10ffffc4 	addi	r3,r2,-1
  82a29c:	e0bffd17 	ldw	r2,-12(fp)
  82a2a0:	10c00215 	stw	r3,8(r2)
         if (q->q_len < q->q_min)
  82a2a4:	e0bffd17 	ldw	r2,-12(fp)
  82a2a8:	10c00217 	ldw	r3,8(r2)
  82a2ac:	e0bffd17 	ldw	r2,-12(fp)
  82a2b0:	10800417 	ldw	r2,16(r2)
  82a2b4:	1880040e 	bge	r3,r2,82a2c8 <qdel+0xc0>
            q->q_min = q->q_len;
  82a2b8:	e0bffd17 	ldw	r2,-12(fp)
  82a2bc:	10c00217 	ldw	r3,8(r2)
  82a2c0:	e0bffd17 	ldw	r2,-12(fp)
  82a2c4:	10c00415 	stw	r3,16(r2)
         EXIT_CRIT_SECTION(q);   /* restore int state */
  82a2c8:	082aa240 	call	82aa24 <irq_Unmask>
         return (qp)elt;   /* success exit point */
  82a2cc:	e0bffe17 	ldw	r2,-8(fp)
  82a2d0:	e0bfff15 	stw	r2,-4(fp)
  82a2d4:	00000a06 	br	82a300 <qdel+0xf8>
      }
      qlast = qptr;
  82a2d8:	e0bffc17 	ldw	r2,-16(fp)
  82a2dc:	e0bffb15 	stw	r2,-20(fp)
      qptr = qptr->qe_next;
  82a2e0:	e0bffc17 	ldw	r2,-16(fp)
  82a2e4:	10800017 	ldw	r2,0(r2)
  82a2e8:	e0bffc15 	stw	r2,-16(fp)

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
   qptr = q->q_head;
   qlast = NULL;
   while (qptr)
  82a2ec:	e0bffc17 	ldw	r2,-16(fp)
  82a2f0:	1004c03a 	cmpne	r2,r2,zero
  82a2f4:	103fd01e 	bne	r2,zero,82a238 <qdel+0x30>
         return (qp)elt;   /* success exit point */
      }
      qlast = qptr;
      qptr = qptr->qe_next;
   }
   EXIT_CRIT_SECTION(q);   /* restore int state */
  82a2f8:	082aa240 	call	82aa24 <irq_Unmask>
   return NULL;   /* item not found in queue */
  82a2fc:	e03fff15 	stw	zero,-4(fp)
  82a300:	e0bfff17 	ldw	r2,-4(fp)
}
  82a304:	e037883a 	mov	sp,fp
  82a308:	dfc00117 	ldw	ra,4(sp)
  82a30c:	df000017 	ldw	fp,0(sp)
  82a310:	dec00204 	addi	sp,sp,8
  82a314:	f800283a 	ret

0082a318 <udp_open>:
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
  82a318:	defff304 	addi	sp,sp,-52
  82a31c:	dfc00c15 	stw	ra,48(sp)
  82a320:	df000b15 	stw	fp,44(sp)
  82a324:	df000b04 	addi	fp,sp,44
  82a328:	e13ffb15 	stw	r4,-20(fp)
  82a32c:	e1fffe15 	stw	r7,-8(fp)
  82a330:	e17ffc0d 	sth	r5,-16(fp)
  82a334:	e1bffd0d 	sth	r6,-12(fp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
  82a338:	00802174 	movhi	r2,133
  82a33c:	10830104 	addi	r2,r2,3076
  82a340:	10800017 	ldw	r2,0(r2)
  82a344:	1080010c 	andi	r2,r2,4
  82a348:	1005003a 	cmpeq	r2,r2,zero
  82a34c:	1000171e 	bne	r2,zero,82a3ac <udp_open+0x94>
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
  82a350:	e0bffb17 	ldw	r2,-20(fp)
  82a354:	11803fcc 	andi	r6,r2,255
  82a358:	e0bffb17 	ldw	r2,-20(fp)
  82a35c:	1004d23a 	srli	r2,r2,8
  82a360:	11c03fcc 	andi	r7,r2,255
  82a364:	e0bffb17 	ldw	r2,-20(fp)
  82a368:	1004d43a 	srli	r2,r2,16
  82a36c:	12003fcc 	andi	r8,r2,255
  82a370:	e0bffb17 	ldw	r2,-20(fp)
  82a374:	1006d63a 	srli	r3,r2,24
  82a378:	e13ffd0b 	ldhu	r4,-12(fp)
  82a37c:	e17ffc0b 	ldhu	r5,-16(fp)
  82a380:	e0800217 	ldw	r2,8(fp)
  82a384:	d8c00015 	stw	r3,0(sp)
  82a388:	d9000115 	stw	r4,4(sp)
  82a38c:	d9400215 	stw	r5,8(sp)
  82a390:	d8800315 	stw	r2,12(sp)
  82a394:	01002174 	movhi	r4,133
  82a398:	2135c404 	addi	r4,r4,-10480
  82a39c:	300b883a 	mov	r5,r6
  82a3a0:	380d883a 	mov	r6,r7
  82a3a4:	400f883a 	mov	r7,r8
  82a3a8:	08076480 	call	807648 <printf>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
  82a3ac:	0009883a 	mov	r4,zero
  82a3b0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   ocon = NULL;
  82a3b4:	e03ff915 	stw	zero,-28(fp)
   for (con = firstudp; con; con = con->u_next)
  82a3b8:	d0a0a417 	ldw	r2,-32112(gp)
  82a3bc:	e0bffa15 	stw	r2,-24(fp)
  82a3c0:	00002406 	br	82a454 <udp_open+0x13c>
   {
      ocon = con;       /* remember last con in list */
  82a3c4:	e0bffa17 	ldw	r2,-24(fp)
  82a3c8:	e0bff915 	stw	r2,-28(fp)
      /* we only want to check UDP-over-IPv4 connections */
      if (!(con->u_flags & UDPCF_V4))
         continue;
#endif

      if (con->u_lport == lsock && con->u_fport == fsock &&
  82a3cc:	e0bffa17 	ldw	r2,-24(fp)
  82a3d0:	1080018b 	ldhu	r2,6(r2)
  82a3d4:	10ffffcc 	andi	r3,r2,65535
  82a3d8:	e0bffd0b 	ldhu	r2,-12(fp)
  82a3dc:	18801a1e 	bne	r3,r2,82a448 <udp_open+0x130>
  82a3e0:	e0bffa17 	ldw	r2,-24(fp)
  82a3e4:	1080020b 	ldhu	r2,8(r2)
  82a3e8:	10ffffcc 	andi	r3,r2,65535
  82a3ec:	e0bffc0b 	ldhu	r2,-16(fp)
  82a3f0:	1880151e 	bne	r3,r2,82a448 <udp_open+0x130>
  82a3f4:	e0bffa17 	ldw	r2,-24(fp)
  82a3f8:	10800317 	ldw	r2,12(r2)
  82a3fc:	1004c03a 	cmpne	r2,r2,zero
  82a400:	1000111e 	bne	r2,zero,82a448 <udp_open+0x130>
  82a404:	e0bffa17 	ldw	r2,-24(fp)
  82a408:	10c00417 	ldw	r3,16(r2)
  82a40c:	e0bffb17 	ldw	r2,-20(fp)
  82a410:	18800d1e 	bne	r3,r2,82a448 <udp_open+0x130>
          con->u_lhost == 0 && con->u_fhost == fhost)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (INFOMSG|PROTERR))
  82a414:	00802174 	movhi	r2,133
  82a418:	10830104 	addi	r2,r2,3076
  82a41c:	10800017 	ldw	r2,0(r2)
  82a420:	1080050c 	andi	r2,r2,20
  82a424:	1005003a 	cmpeq	r2,r2,zero
  82a428:	1000031e 	bne	r2,zero,82a438 <udp_open+0x120>
            dprintf("UDP: Connection already exists.\n");
  82a42c:	01002174 	movhi	r4,133
  82a430:	2135d304 	addi	r4,r4,-10420
  82a434:	08077600 	call	807760 <puts>
#endif
         UNLOCK_NET_RESOURCE(NET_RESID);
  82a438:	0009883a 	mov	r4,zero
  82a43c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return(NULL);
  82a440:	e03fff15 	stw	zero,-4(fp)
  82a444:	00003c06 	br	82a538 <udp_open+0x220>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   ocon = NULL;
   for (con = firstudp; con; con = con->u_next)
  82a448:	e0bffa17 	ldw	r2,-24(fp)
  82a44c:	10800017 	ldw	r2,0(r2)
  82a450:	e0bffa15 	stw	r2,-24(fp)
  82a454:	e0bffa17 	ldw	r2,-24(fp)
  82a458:	1004c03a 	cmpne	r2,r2,zero
  82a45c:	103fd91e 	bne	r2,zero,82a3c4 <udp_open+0xac>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return(NULL);
      }
   }

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
  82a460:	01000804 	movi	r4,32
  82a464:	082b20c0 	call	82b20c <npalloc>
  82a468:	e0bffa15 	stw	r2,-24(fp)
   if (con == 0)
  82a46c:	e0bffa17 	ldw	r2,-24(fp)
  82a470:	1004c03a 	cmpne	r2,r2,zero
  82a474:	10000d1e 	bne	r2,zero,82a4ac <udp_open+0x194>
   {
#ifdef   NPDEBUG
      if (NDEBUG & INFOMSG)
  82a478:	00802174 	movhi	r2,133
  82a47c:	10830104 	addi	r2,r2,3076
  82a480:	10800017 	ldw	r2,0(r2)
  82a484:	1080010c 	andi	r2,r2,4
  82a488:	1005003a 	cmpeq	r2,r2,zero
  82a48c:	1000031e 	bne	r2,zero,82a49c <udp_open+0x184>
         dprintf("UDP: Couldn't allocate conn storage.\n");
  82a490:	01002174 	movhi	r4,133
  82a494:	2135db04 	addi	r4,r4,-10388
  82a498:	08077600 	call	807760 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
  82a49c:	0009883a 	mov	r4,zero
  82a4a0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return(NULL);
  82a4a4:	e03fff15 	stw	zero,-4(fp)
  82a4a8:	00002306 	br	82a538 <udp_open+0x220>
   }

   if (ocon)   /* ocon is end of list */
  82a4ac:	e0bff917 	ldw	r2,-28(fp)
  82a4b0:	1005003a 	cmpeq	r2,r2,zero
  82a4b4:	1000041e 	bne	r2,zero,82a4c8 <udp_open+0x1b0>
      ocon->u_next = con;  /* add new connection to end */
  82a4b8:	e0fff917 	ldw	r3,-28(fp)
  82a4bc:	e0bffa17 	ldw	r2,-24(fp)
  82a4c0:	18800015 	stw	r2,0(r3)
  82a4c4:	00000206 	br	82a4d0 <udp_open+0x1b8>
   else  /* no list, start one */
      firstudp = con;
  82a4c8:	e0bffa17 	ldw	r2,-24(fp)
  82a4cc:	d0a0a415 	stw	r2,-32112(gp)

   con->u_next = 0;
  82a4d0:	e0bffa17 	ldw	r2,-24(fp)
  82a4d4:	10000015 	stw	zero,0(r2)

   con->u_lport = lsock;      /* fill in connection info */
  82a4d8:	e0fffa17 	ldw	r3,-24(fp)
  82a4dc:	e0bffd0b 	ldhu	r2,-12(fp)
  82a4e0:	1880018d 	sth	r2,6(r3)
   con->u_fport = fsock;
  82a4e4:	e0fffa17 	ldw	r3,-24(fp)
  82a4e8:	e0bffc0b 	ldhu	r2,-16(fp)
  82a4ec:	1880020d 	sth	r2,8(r3)
   con->u_lhost = 0;
  82a4f0:	e0bffa17 	ldw	r2,-24(fp)
  82a4f4:	10000315 	stw	zero,12(r2)
   con->u_fhost = fhost;
  82a4f8:	e0fffa17 	ldw	r3,-24(fp)
  82a4fc:	e0bffb17 	ldw	r2,-20(fp)
  82a500:	18800415 	stw	r2,16(r3)
   con->u_rcv   = handler;
  82a504:	e0fffa17 	ldw	r3,-24(fp)
  82a508:	e0bffe17 	ldw	r2,-8(fp)
  82a50c:	18800515 	stw	r2,20(r3)
   con->u_data  = data;
  82a510:	e0fffa17 	ldw	r3,-24(fp)
  82a514:	e0800217 	ldw	r2,8(fp)
  82a518:	18800615 	stw	r2,24(r3)
   con->u_flags = UDPCF_V4;
  82a51c:	e0fffa17 	ldw	r3,-24(fp)
  82a520:	00800044 	movi	r2,1
  82a524:	1880010d 	sth	r2,4(r3)

   UNLOCK_NET_RESOURCE(NET_RESID);
  82a528:	0009883a 	mov	r4,zero
  82a52c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return(con);
  82a530:	e0bffa17 	ldw	r2,-24(fp)
  82a534:	e0bfff15 	stw	r2,-4(fp)
  82a538:	e0bfff17 	ldw	r2,-4(fp)
}
  82a53c:	e037883a 	mov	sp,fp
  82a540:	dfc00117 	ldw	ra,4(sp)
  82a544:	df000017 	ldw	fp,0(sp)
  82a548:	dec00204 	addi	sp,sp,8
  82a54c:	f800283a 	ret

0082a550 <udp_close>:
 * RETURNS: void
 */

void
udp_close(UDPCONN con)
{
  82a550:	defffb04 	addi	sp,sp,-20
  82a554:	dfc00415 	stw	ra,16(sp)
  82a558:	df000315 	stw	fp,12(sp)
  82a55c:	df000304 	addi	fp,sp,12
  82a560:	e13fff15 	stw	r4,-4(fp)
   UDPCONN pcon;
   UDPCONN lcon;

#ifdef NPDEBUG
   if ((con == NULL) || (firstudp == NULL))
  82a564:	e0bfff17 	ldw	r2,-4(fp)
  82a568:	1005003a 	cmpeq	r2,r2,zero
  82a56c:	1000031e 	bne	r2,zero,82a57c <udp_close+0x2c>
  82a570:	d0a0a417 	ldw	r2,-32112(gp)
  82a574:	1004c03a 	cmpne	r2,r2,zero
  82a578:	1000021e 	bne	r2,zero,82a584 <udp_close+0x34>
   {
      dtrap(); /* bad programming! */
  82a57c:	082a7c80 	call	82a7c8 <dtrap>
      return;
  82a580:	00002706 	br	82a620 <udp_close+0xd0>
   }
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
  82a584:	0009883a 	mov	r4,zero
  82a588:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
  82a58c:	e03ffd15 	stw	zero,-12(fp)
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
  82a590:	d0a0a417 	ldw	r2,-32112(gp)
  82a594:	e0bffe15 	stw	r2,-8(fp)
  82a598:	00000806 	br	82a5bc <udp_close+0x6c>
   {
      if (pcon == con)  /* found connection to delete */
  82a59c:	e0fffe17 	ldw	r3,-8(fp)
  82a5a0:	e0bfff17 	ldw	r2,-4(fp)
  82a5a4:	18800826 	beq	r3,r2,82a5c8 <udp_close+0x78>
      break;
      lcon = pcon;   /* remember last connection */
  82a5a8:	e0bffe17 	ldw	r2,-8(fp)
  82a5ac:	e0bffd15 	stw	r2,-12(fp)
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
  82a5b0:	e0bffe17 	ldw	r2,-8(fp)
  82a5b4:	10800017 	ldw	r2,0(r2)
  82a5b8:	e0bffe15 	stw	r2,-8(fp)
  82a5bc:	e0bffe17 	ldw	r2,-8(fp)
  82a5c0:	1004c03a 	cmpne	r2,r2,zero
  82a5c4:	103ff51e 	bne	r2,zero,82a59c <udp_close+0x4c>
      if (pcon == con)  /* found connection to delete */
      break;
      lcon = pcon;   /* remember last connection */
   }

   if (!pcon)
  82a5c8:	e0bffe17 	ldw	r2,-8(fp)
  82a5cc:	1004c03a 	cmpne	r2,r2,zero
  82a5d0:	1000041e 	bne	r2,zero,82a5e4 <udp_close+0x94>
   {
      dtrap(); /* prog error - connenction not in list */
  82a5d4:	082a7c80 	call	82a7c8 <dtrap>
      UNLOCK_NET_RESOURCE(NET_RESID);
  82a5d8:	0009883a 	mov	r4,zero
  82a5dc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return;
  82a5e0:	00000f06 	br	82a620 <udp_close+0xd0>
   }

   if (lcon)   /* in con is not head of list */
  82a5e4:	e0bffd17 	ldw	r2,-12(fp)
  82a5e8:	1005003a 	cmpeq	r2,r2,zero
  82a5ec:	1000051e 	bne	r2,zero,82a604 <udp_close+0xb4>
      lcon->u_next = con->u_next;   /* unlink */
  82a5f0:	e0bfff17 	ldw	r2,-4(fp)
  82a5f4:	10c00017 	ldw	r3,0(r2)
  82a5f8:	e0bffd17 	ldw	r2,-12(fp)
  82a5fc:	10c00015 	stw	r3,0(r2)
  82a600:	00000306 	br	82a610 <udp_close+0xc0>
   else
      firstudp = con->u_next; /* remove from head */
  82a604:	e0bfff17 	ldw	r2,-4(fp)
  82a608:	10800017 	ldw	r2,0(r2)
  82a60c:	d0a0a415 	stw	r2,-32112(gp)

   UC_FREE(con);  /* free memory for structure */
  82a610:	e13fff17 	ldw	r4,-4(fp)
  82a614:	082b3000 	call	82b300 <npfree>
   UNLOCK_NET_RESOURCE(NET_RESID);
  82a618:	0009883a 	mov	r4,zero
  82a61c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
}
  82a620:	e037883a 	mov	sp,fp
  82a624:	dfc00117 	ldw	ra,4(sp)
  82a628:	df000017 	ldw	fp,0(sp)
  82a62c:	dec00204 	addi	sp,sp,8
  82a630:	f800283a 	ret

0082a634 <asm_cksum>:
      .text

      .global	  asm_cksum

asm_cksum:
      mov   r2, zero		       /* accumulator = 0 */
  82a634:	0005883a 	mov	r2,zero
      ble   r5, zero, done	       /* count <= 0 ? */
  82a638:	0140620e 	bge	zero,r5,82a7c4 <done>

      mov   r6, zero		       /* carry accumulator */
  82a63c:	000d883a 	mov	r6,zero

      andi  r3, r4, 2		       /* ptr 32-bit aligned? */
  82a640:	20c0008c 	andi	r3,r4,2
      beq   r3, zero, asm1
  82a644:	18000326 	beq	r3,zero,82a654 <asm1>
      ldhu  r2, (r4)		       /* no - process first 16-bits */
  82a648:	2080000b 	ldhu	r2,0(r4)
      addi  r4, r4, 2
  82a64c:	21000084 	addi	r4,r4,2
      subi  r5, r5, 1
  82a650:	297fffc4 	addi	r5,r5,-1

0082a654 <asm1>:
  82a654:	02c020f4 	movhi	r11,131
/*
 * adjust ptr by ((count/2) mod 16) * 4 bytes
 * jump to location: loop0 - (count/2 mod 16) * 4 instructions
 */
asm1:
      movia r11, loop0
  82a658:	5ae9e004 	addi	r11,r11,-22656
      andi  r9, r5, 1		       /* r9 = last halfword flag */
  82a65c:	2a40004c 	andi	r9,r5,1
      srai  r5, r5, 1		       /* count = number of words */
  82a660:	280bd07a 	srai	r5,r5,1
      andi  r10, r5, 0xf	       /* modulo 16 */
  82a664:	2a8003cc 	andi	r10,r5,15
      slli  r10, r10, 2		       /*      * 4 bytes per word */
  82a668:	501490ba 	slli	r10,r10,2
      add   r4, r10, r4		       /* adjust ptr */
  82a66c:	5109883a 	add	r4,r10,r4
      slli  r10, r10, 2		       /*      * 4 instructions per 4 bytes */
  82a670:	501490ba 	slli	r10,r10,2
      sub   r11, r11, r10
  82a674:	5a97c83a 	sub	r11,r11,r10
      jmp   r11
  82a678:	5800683a 	jmp	r11

0082a67c <loop>:
      
loop:
      addi  r4, r4, 64		       /* increment data pointer */
  82a67c:	21001004 	addi	r4,r4,64

      ldw   r7, -64(r4)
  82a680:	21fff017 	ldw	r7,-64(r4)
      add   r2, r7, r2
  82a684:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a688:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a68c:	418d883a 	add	r6,r8,r6

      ldw   r7, -60(r4)
  82a690:	21fff117 	ldw	r7,-60(r4)
      add   r2, r7, r2
  82a694:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a698:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a69c:	418d883a 	add	r6,r8,r6

      ldw   r7, -56(r4)
  82a6a0:	21fff217 	ldw	r7,-56(r4)
      add   r2, r7, r2
  82a6a4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a6a8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a6ac:	418d883a 	add	r6,r8,r6

      ldw   r7, -52(r4)
  82a6b0:	21fff317 	ldw	r7,-52(r4)
      add   r2, r7, r2
  82a6b4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a6b8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a6bc:	418d883a 	add	r6,r8,r6

      ldw   r7, -48(r4)
  82a6c0:	21fff417 	ldw	r7,-48(r4)
      add   r2, r7, r2
  82a6c4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a6c8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a6cc:	418d883a 	add	r6,r8,r6

      ldw   r7, -44(r4)
  82a6d0:	21fff517 	ldw	r7,-44(r4)
      add   r2, r7, r2
  82a6d4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a6d8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a6dc:	418d883a 	add	r6,r8,r6

      ldw   r7, -40(r4)
  82a6e0:	21fff617 	ldw	r7,-40(r4)
      add   r2, r7, r2
  82a6e4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a6e8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a6ec:	418d883a 	add	r6,r8,r6

      ldw   r7, -36(r4)
  82a6f0:	21fff717 	ldw	r7,-36(r4)
      add   r2, r7, r2
  82a6f4:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a6f8:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a6fc:	418d883a 	add	r6,r8,r6

      ldw   r7, -32(r4)
  82a700:	21fff817 	ldw	r7,-32(r4)
      add   r2, r7, r2
  82a704:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a708:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a70c:	418d883a 	add	r6,r8,r6

      ldw   r7, -28(r4)
  82a710:	21fff917 	ldw	r7,-28(r4)
      add   r2, r7, r2
  82a714:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a718:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a71c:	418d883a 	add	r6,r8,r6

      ldw   r7, -24(r4)
  82a720:	21fffa17 	ldw	r7,-24(r4)
      add   r2, r7, r2
  82a724:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a728:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a72c:	418d883a 	add	r6,r8,r6

      ldw   r7, -20(r4)
  82a730:	21fffb17 	ldw	r7,-20(r4)
      add   r2, r7, r2
  82a734:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a738:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a73c:	418d883a 	add	r6,r8,r6

      ldw   r7, -16(r4)
  82a740:	21fffc17 	ldw	r7,-16(r4)
      add   r2, r7, r2
  82a744:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a748:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a74c:	418d883a 	add	r6,r8,r6

      ldw   r7, -12(r4)
  82a750:	21fffd17 	ldw	r7,-12(r4)
      add   r2, r7, r2
  82a754:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a758:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a75c:	418d883a 	add	r6,r8,r6

      ldw   r7, -8(r4)
  82a760:	21fffe17 	ldw	r7,-8(r4)
      add   r2, r7, r2
  82a764:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a768:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a76c:	418d883a 	add	r6,r8,r6

      ldw   r7, -4(r4)
  82a770:	21ffff17 	ldw	r7,-4(r4)
      add   r2, r7, r2
  82a774:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a778:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a77c:	418d883a 	add	r6,r8,r6

0082a780 <loop0>:
loop0:
      subi  r5, r5, 16
  82a780:	297ffc04 	addi	r5,r5,-16
      bge   r5, zero, loop
  82a784:	283fbd0e 	bge	r5,zero,82a67c <loop>
/*
 * process last halfword (if any)
 */
      beq   r9, zero, fold
  82a788:	48000426 	beq	r9,zero,82a79c <fold>
      ldhu  r7, 0(r4)
  82a78c:	21c0000b 	ldhu	r7,0(r4)
      add   r2, r7, r2
  82a790:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
  82a794:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
  82a798:	418d883a 	add	r6,r8,r6

0082a79c <fold>:
      
fold:
      srli  r7, r2, 16
  82a79c:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
  82a7a0:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add the upper and lower halfwords */
  82a7a4:	3885883a 	add	r2,r7,r2
      add   r2, r6, r2		    /* add the carries */
  82a7a8:	3085883a 	add	r2,r6,r2
/* the accumulator is 18 bits */
      srli  r7, r2, 16
  82a7ac:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
  82a7b0:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add 2 carry bits to lower halfword */
  82a7b4:	3885883a 	add	r2,r7,r2
/* the accumulator is 17 bits */
      srli  r7, r2, 16
  82a7b8:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
  82a7bc:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add carry to lower halfword */
  82a7c0:	3885883a 	add	r2,r7,r2

0082a7c4 <done>:

done:
      ret			    		/* r2 = 16-bit checksum */
  82a7c4:	f800283a 	ret

0082a7c8 <dtrap>:
void irq_Unmask(void);

/* dtrap() - function to trap to debugger */
void
dtrap(void)
{
  82a7c8:	defffe04 	addi	sp,sp,-8
  82a7cc:	dfc00115 	stw	ra,4(sp)
  82a7d0:	df000015 	stw	fp,0(sp)
  82a7d4:	d839883a 	mov	fp,sp
   printf("dtrap - needs breakpoint\n");
  82a7d8:	01002174 	movhi	r4,133
  82a7dc:	2135e504 	addi	r4,r4,-10348
  82a7e0:	08077600 	call	807760 <puts>
}
  82a7e4:	e037883a 	mov	sp,fp
  82a7e8:	dfc00117 	ldw	ra,4(sp)
  82a7ec:	df000017 	ldw	fp,0(sp)
  82a7f0:	dec00204 	addi	sp,sp,8
  82a7f4:	f800283a 	ret

0082a7f8 <kbhit>:

int
kbhit()
{
  82a7f8:	defffc04 	addi	sp,sp,-16
  82a7fc:	dfc00315 	stw	ra,12(sp)
  82a800:	df000215 	stw	fp,8(sp)
  82a804:	df000204 	addi	fp,sp,8
   static int kbd_init = 0;
   int   kb;
   
   if (!kbd_init)
  82a808:	d0a0a517 	ldw	r2,-32108(gp)
  82a80c:	1004c03a 	cmpne	r2,r2,zero
  82a810:	10000c1e 	bne	r2,zero,82a844 <kbhit+0x4c>
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
  82a814:	0009883a 	mov	r4,zero
  82a818:	01400104 	movi	r5,4
  82a81c:	01900004 	movi	r6,16384
  82a820:	083ba840 	call	83ba84 <fcntl>
  82a824:	1005003a 	cmpeq	r2,r2,zero
  82a828:	1000041e 	bne	r2,zero,82a83c <kbhit+0x44>
      {
         printf("F_SETFL failed.\n");
  82a82c:	01002174 	movhi	r4,133
  82a830:	2135ec04 	addi	r4,r4,-10320
  82a834:	08077600 	call	807760 <puts>
         dtrap();
  82a838:	082a7c80 	call	82a7c8 <dtrap>
      }
      kbd_init = 1; 
  82a83c:	00800044 	movi	r2,1
  82a840:	d0a0a515 	stw	r2,-32108(gp)
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
  82a844:	d0a04217 	ldw	r2,-32504(gp)
  82a848:	10bfffd8 	cmpnei	r2,r2,-1
  82a84c:	10000d1e 	bne	r2,zero,82a884 <kbhit+0x8c>
   {
      kb = getchar();
  82a850:	00802174 	movhi	r2,133
  82a854:	10828104 	addi	r2,r2,2564
  82a858:	10800017 	ldw	r2,0(r2)
  82a85c:	11000117 	ldw	r4,4(r2)
  82a860:	084a3bc0 	call	84a3bc <getc>
  82a864:	e0bffe15 	stw	r2,-8(fp)
      if (kb < 0)       /* any error means no character present */
  82a868:	e0bffe17 	ldw	r2,-8(fp)
  82a86c:	1004403a 	cmpge	r2,r2,zero
  82a870:	1000021e 	bne	r2,zero,82a87c <kbhit+0x84>
         return (FALSE);
  82a874:	e03fff15 	stw	zero,-4(fp)
  82a878:	00000406 	br	82a88c <kbhit+0x94>
         
      /* there was a character, and we read it. */
      kb_last = kb;
  82a87c:	e0bffe17 	ldw	r2,-8(fp)
  82a880:	d0a04215 	stw	r2,-32504(gp)
   }

   return (TRUE);
  82a884:	00800044 	movi	r2,1
  82a888:	e0bfff15 	stw	r2,-4(fp)
  82a88c:	e0bfff17 	ldw	r2,-4(fp)
}
  82a890:	e037883a 	mov	sp,fp
  82a894:	dfc00117 	ldw	ra,4(sp)
  82a898:	df000017 	ldw	fp,0(sp)
  82a89c:	dec00204 	addi	sp,sp,8
  82a8a0:	f800283a 	ret

0082a8a4 <getch>:

int 
getch()
{
  82a8a4:	defffd04 	addi	sp,sp,-12
  82a8a8:	dfc00215 	stw	ra,8(sp)
  82a8ac:	df000115 	stw	fp,4(sp)
  82a8b0:	df000104 	addi	fp,sp,4
int chr;

   if(kb_last != EOF)
  82a8b4:	d0a04217 	ldw	r2,-32504(gp)
  82a8b8:	10bfffe0 	cmpeqi	r2,r2,-1
  82a8bc:	1000051e 	bne	r2,zero,82a8d4 <getch+0x30>
   {
      chr = kb_last;
  82a8c0:	d0a04217 	ldw	r2,-32504(gp)
  82a8c4:	e0bfff15 	stw	r2,-4(fp)
      kb_last = EOF;
  82a8c8:	00bfffc4 	movi	r2,-1
  82a8cc:	d0a04215 	stw	r2,-32504(gp)
  82a8d0:	00000606 	br	82a8ec <getch+0x48>
   }
   else
      chr = getchar();
  82a8d4:	00802174 	movhi	r2,133
  82a8d8:	10828104 	addi	r2,r2,2564
  82a8dc:	10800017 	ldw	r2,0(r2)
  82a8e0:	11000117 	ldw	r4,4(r2)
  82a8e4:	084a3bc0 	call	84a3bc <getc>
  82a8e8:	e0bfff15 	stw	r2,-4(fp)

   return chr;
  82a8ec:	e0bfff17 	ldw	r2,-4(fp)
}
  82a8f0:	e037883a 	mov	sp,fp
  82a8f4:	dfc00117 	ldw	ra,4(sp)
  82a8f8:	df000017 	ldw	fp,0(sp)
  82a8fc:	dec00204 	addi	sp,sp,8
  82a900:	f800283a 	ret

0082a904 <clock_init>:
int OS_TPS;
int cticks_factor;
int cticks_initialized = 0;

void clock_init(void)
{
  82a904:	deffff04 	addi	sp,sp,-4
  82a908:	df000015 	stw	fp,0(sp)
  82a90c:	d839883a 	mov	fp,sp
   OS_TPS = OS_TICKS_PER_SEC;
  82a910:	0080fa04 	movi	r2,1000
  82a914:	d0a0aa15 	stw	r2,-32088(gp)
   cticks_factor = 0;
  82a918:	d020a915 	stw	zero,-32092(gp)
   cticks = 0;
  82a91c:	00802174 	movhi	r2,133
  82a920:	10832604 	addi	r2,r2,3224
  82a924:	10000015 	stw	zero,0(r2)
   cticks_initialized = 1;
  82a928:	00800044 	movi	r2,1
  82a92c:	d0a0a615 	stw	r2,-32104(gp)
}
  82a930:	e037883a 	mov	sp,fp
  82a934:	df000017 	ldw	fp,0(sp)
  82a938:	dec00104 	addi	sp,sp,4
  82a93c:	f800283a 	ret

0082a940 <clock_c>:

/* undo effects of clock_init (i.e. restore ISR vector) 
 * NO OP since using RTOS's timer.
 */
void clock_c(void)
{
  82a940:	deffff04 	addi	sp,sp,-4
  82a944:	df000015 	stw	fp,0(sp)
  82a948:	d839883a 	mov	fp,sp
   /* null */ ;
}
  82a94c:	e037883a 	mov	sp,fp
  82a950:	df000017 	ldw	fp,0(sp)
  82a954:	dec00104 	addi	sp,sp,4
  82a958:	f800283a 	ret

0082a95c <cticks_hook>:
 * Use the uCOS-II/Altera HAL BSP's timer and scale cticks as per TPS.
 */

void
cticks_hook(void)
{
  82a95c:	deffff04 	addi	sp,sp,-4
  82a960:	df000015 	stw	fp,0(sp)
  82a964:	d839883a 	mov	fp,sp
   if (cticks_initialized) 
  82a968:	d0a0a617 	ldw	r2,-32104(gp)
  82a96c:	1005003a 	cmpeq	r2,r2,zero
  82a970:	1000111e 	bne	r2,zero,82a9b8 <cticks_hook+0x5c>
   {
      cticks_factor += TPS;
  82a974:	d0a0a917 	ldw	r2,-32092(gp)
  82a978:	1080fa04 	addi	r2,r2,1000
  82a97c:	d0a0a915 	stw	r2,-32092(gp)
      if (cticks_factor >= OS_TPS)
  82a980:	d0e0a917 	ldw	r3,-32092(gp)
  82a984:	d0a0aa17 	ldw	r2,-32088(gp)
  82a988:	18800b16 	blt	r3,r2,82a9b8 <cticks_hook+0x5c>
      {
         cticks++;
  82a98c:	00802174 	movhi	r2,133
  82a990:	10832604 	addi	r2,r2,3224
  82a994:	10800017 	ldw	r2,0(r2)
  82a998:	10c00044 	addi	r3,r2,1
  82a99c:	00802174 	movhi	r2,133
  82a9a0:	10832604 	addi	r2,r2,3224
  82a9a4:	10c00015 	stw	r3,0(r2)
         cticks_factor -= OS_TPS;
  82a9a8:	d0e0a917 	ldw	r3,-32092(gp)
  82a9ac:	d0a0aa17 	ldw	r2,-32088(gp)
  82a9b0:	1885c83a 	sub	r2,r3,r2
  82a9b4:	d0a0a915 	stw	r2,-32092(gp)
#ifdef USE_LCD
         update_display();
#endif
      }
   }
}
  82a9b8:	e037883a 	mov	sp,fp
  82a9bc:	df000017 	ldw	fp,0(sp)
  82a9c0:	dec00104 	addi	sp,sp,4
  82a9c4:	f800283a 	ret

0082a9c8 <irq_Mask>:
 * ENTER_CRIT_SECTION() and enable them in EXIT_CRIT_SECTION()
 * because calls to ENTER_CRIT_SECTION() can be nested."
 */
void
irq_Mask(void)
{
  82a9c8:	defffd04 	addi	sp,sp,-12
  82a9cc:	df000215 	stw	fp,8(sp)
  82a9d0:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  82a9d4:	0005303a 	rdctl	r2,status
  82a9d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  82a9dc:	e0fffe17 	ldw	r3,-8(fp)
  82a9e0:	00bfff84 	movi	r2,-2
  82a9e4:	1884703a 	and	r2,r3,r2
  82a9e8:	1001703a 	wrctl	status,r2
  
  return context;
  82a9ec:	e0bffe17 	ldw	r2,-8(fp)
   alt_irq_context  local_cpu_statusreg;

   local_cpu_statusreg = alt_irq_disable_all();
  82a9f0:	e0bfff15 	stw	r2,-4(fp)
	
   if (++irq_level == 1)
  82a9f4:	d0a0a717 	ldw	r2,-32100(gp)
  82a9f8:	10800044 	addi	r2,r2,1
  82a9fc:	d0a0a715 	stw	r2,-32100(gp)
  82aa00:	d0a0a717 	ldw	r2,-32100(gp)
  82aa04:	10800058 	cmpnei	r2,r2,1
  82aa08:	1000021e 	bne	r2,zero,82aa14 <irq_Mask+0x4c>
   {
      cpu_statusreg = local_cpu_statusreg;
  82aa0c:	e0bfff17 	ldw	r2,-4(fp)
  82aa10:	d0a0a815 	stw	r2,-32096(gp)
   }
}
  82aa14:	e037883a 	mov	sp,fp
  82aa18:	df000017 	ldw	fp,0(sp)
  82aa1c:	dec00104 	addi	sp,sp,4
  82aa20:	f800283a 	ret

0082aa24 <irq_Unmask>:


/* Re-Enable Interrupts */
void
irq_Unmask(void)
{
  82aa24:	defffe04 	addi	sp,sp,-8
  82aa28:	df000115 	stw	fp,4(sp)
  82aa2c:	df000104 	addi	fp,sp,4
   if (--irq_level == 0)
  82aa30:	d0a0a717 	ldw	r2,-32100(gp)
  82aa34:	10bfffc4 	addi	r2,r2,-1
  82aa38:	d0a0a715 	stw	r2,-32100(gp)
  82aa3c:	d0a0a717 	ldw	r2,-32100(gp)
  82aa40:	1004c03a 	cmpne	r2,r2,zero
  82aa44:	1000041e 	bne	r2,zero,82aa58 <irq_Unmask+0x34>
   {
      alt_irq_enable_all(cpu_statusreg);
  82aa48:	d0a0a817 	ldw	r2,-32096(gp)
  82aa4c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82aa50:	e0bfff17 	ldw	r2,-4(fp)
  82aa54:	1001703a 	wrctl	status,r2
   }
}
  82aa58:	e037883a 	mov	sp,fp
  82aa5c:	df000017 	ldw	fp,0(sp)
  82aa60:	dec00104 	addi	sp,sp,4
  82aa64:	f800283a 	ret

0082aa68 <LOCK_NET_RESOURCE>:
extern void irq_Mask(void);
extern void irq_Unmask(void);

void
LOCK_NET_RESOURCE(int resid)
{
  82aa68:	defffb04 	addi	sp,sp,-20
  82aa6c:	dfc00415 	stw	ra,16(sp)
  82aa70:	df000315 	stw	fp,12(sp)
  82aa74:	df000304 	addi	fp,sp,12
  82aa78:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
  82aa7c:	e03ffe05 	stb	zero,-8(fp)
   int   errct = 0;
  82aa80:	e03ffd15 	stw	zero,-12(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
  82aa84:	e0bfff17 	ldw	r2,-4(fp)
  82aa88:	1004803a 	cmplt	r2,r2,zero
  82aa8c:	1000201e 	bne	r2,zero,82ab10 <LOCK_NET_RESOURCE+0xa8>
  82aa90:	e0bfff17 	ldw	r2,-4(fp)
  82aa94:	10800408 	cmpgei	r2,r2,16
  82aa98:	10001d1e 	bne	r2,zero,82ab10 <LOCK_NET_RESOURCE+0xa8>
   {
      do
      {
         OSSemPend(resid_semaphore[resid], 0, &error);
  82aa9c:	e0bfff17 	ldw	r2,-4(fp)
  82aaa0:	00c03934 	movhi	r3,228
  82aaa4:	18e8c304 	addi	r3,r3,-23796
  82aaa8:	1085883a 	add	r2,r2,r2
  82aaac:	1085883a 	add	r2,r2,r2
  82aab0:	10c5883a 	add	r2,r2,r3
  82aab4:	11000017 	ldw	r4,0(r2)
  82aab8:	e1bffe04 	addi	r6,fp,-8
  82aabc:	000b883a 	mov	r5,zero
  82aac0:	081daec0 	call	81daec <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
  82aac4:	e0bffe03 	ldbu	r2,-8(fp)
  82aac8:	10803fcc 	andi	r2,r2,255
  82aacc:	10800298 	cmpnei	r2,r2,10
  82aad0:	10000a1e 	bne	r2,zero,82aafc <LOCK_NET_RESOURCE+0x94>
  82aad4:	e0bffd17 	ldw	r2,-12(fp)
  82aad8:	10800044 	addi	r2,r2,1
  82aadc:	e0bffd15 	stw	r2,-12(fp)
  82aae0:	e0bffd17 	ldw	r2,-12(fp)
  82aae4:	1080fa50 	cmplti	r2,r2,1001
  82aae8:	1000041e 	bne	r2,zero,82aafc <LOCK_NET_RESOURCE+0x94>
         {
            panic("lock NET");   /* fatal */
  82aaec:	01002174 	movhi	r4,133
  82aaf0:	2135f004 	addi	r4,r4,-10304
  82aaf4:	0825a2c0 	call	825a2c <panic>
            return;
  82aaf8:	00000606 	br	82ab14 <LOCK_NET_RESOURCE+0xac>
         }
      } while (error == 10);
  82aafc:	e0bffe03 	ldbu	r2,-8(fp)
  82ab00:	10803fcc 	andi	r2,r2,255
  82ab04:	108002a0 	cmpeqi	r2,r2,10
  82ab08:	103fe41e 	bne	r2,zero,82aa9c <LOCK_NET_RESOURCE+0x34>
LOCK_NET_RESOURCE(int resid)
{
   INT8U error = 0;
   int   errct = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
  82ab0c:	00000106 	br	82ab14 <LOCK_NET_RESOURCE+0xac>
            return;
         }
      } while (error == 10);
   }
   else
      dtrap();
  82ab10:	082a7c80 	call	82a7c8 <dtrap>
}
  82ab14:	e037883a 	mov	sp,fp
  82ab18:	dfc00117 	ldw	ra,4(sp)
  82ab1c:	df000017 	ldw	fp,0(sp)
  82ab20:	dec00204 	addi	sp,sp,8
  82ab24:	f800283a 	ret

0082ab28 <UNLOCK_NET_RESOURCE>:

void
UNLOCK_NET_RESOURCE(int resid)
{
  82ab28:	defffc04 	addi	sp,sp,-16
  82ab2c:	dfc00315 	stw	ra,12(sp)
  82ab30:	df000215 	stw	fp,8(sp)
  82ab34:	df000204 	addi	fp,sp,8
  82ab38:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
  82ab3c:	e03ffe05 	stb	zero,-8(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
  82ab40:	e0bfff17 	ldw	r2,-4(fp)
  82ab44:	1004803a 	cmplt	r2,r2,zero
  82ab48:	1000131e 	bne	r2,zero,82ab98 <UNLOCK_NET_RESOURCE+0x70>
  82ab4c:	e0bfff17 	ldw	r2,-4(fp)
  82ab50:	10800408 	cmpgei	r2,r2,16
  82ab54:	1000101e 	bne	r2,zero,82ab98 <UNLOCK_NET_RESOURCE+0x70>
   {
      error = OSSemPost(resid_semaphore[resid]);
  82ab58:	e0bfff17 	ldw	r2,-4(fp)
  82ab5c:	00c03934 	movhi	r3,228
  82ab60:	18e8c304 	addi	r3,r3,-23796
  82ab64:	1085883a 	add	r2,r2,r2
  82ab68:	1085883a 	add	r2,r2,r2
  82ab6c:	10c5883a 	add	r2,r2,r3
  82ab70:	11000017 	ldw	r4,0(r2)
  82ab74:	081dee40 	call	81dee4 <OSSemPost>
  82ab78:	e0bffe05 	stb	r2,-8(fp)
      if (error != OS_NO_ERR)
  82ab7c:	e0bffe03 	ldbu	r2,-8(fp)
  82ab80:	1005003a 	cmpeq	r2,r2,zero
  82ab84:	1000051e 	bne	r2,zero,82ab9c <UNLOCK_NET_RESOURCE+0x74>
      {
         panic("unlock NET");
  82ab88:	01002174 	movhi	r4,133
  82ab8c:	2135f304 	addi	r4,r4,-10292
  82ab90:	0825a2c0 	call	825a2c <panic>
void
UNLOCK_NET_RESOURCE(int resid)
{
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
  82ab94:	00000106 	br	82ab9c <UNLOCK_NET_RESOURCE+0x74>
      {
         panic("unlock NET");
      }
   }
   else
      dtrap();
  82ab98:	082a7c80 	call	82a7c8 <dtrap>
}
  82ab9c:	e037883a 	mov	sp,fp
  82aba0:	dfc00117 	ldw	ra,4(sp)
  82aba4:	df000017 	ldw	fp,0(sp)
  82aba8:	dec00204 	addi	sp,sp,8
  82abac:	f800283a 	ret

0082abb0 <TK_NEWTASK>:
extern long     nettick_wakes;


int
TK_NEWTASK(struct inet_taskinfo * nettask)
{
  82abb0:	deffed04 	addi	sp,sp,-76
  82abb4:	dfc01215 	stw	ra,72(sp)
  82abb8:	df001115 	stw	fp,68(sp)
  82abbc:	df001104 	addi	fp,sp,68
  82abc0:	e13ffe15 	stw	r4,-8(fp)
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
  82abc4:	e0bffe17 	ldw	r2,-8(fp)
  82abc8:	10800417 	ldw	r2,16(r2)
  82abcc:	1009883a 	mov	r4,r2
  82abd0:	082b20c0 	call	82b20c <npalloc>
  82abd4:	e0bff415 	stw	r2,-48(fp)
   if(!stack)
  82abd8:	e0bff417 	ldw	r2,-48(fp)
  82abdc:	1004c03a 	cmpne	r2,r2,zero
  82abe0:	1000031e 	bne	r2,zero,82abf0 <TK_NEWTASK+0x40>
      panic("stack alloc");
  82abe4:	01002174 	movhi	r4,133
  82abe8:	2135f604 	addi	r4,r4,-10280
  82abec:	0825a2c0 	call	825a2c <panic>

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
  82abf0:	e0bffe17 	ldw	r2,-8(fp)
  82abf4:	11400217 	ldw	r5,8(r2)
  82abf8:	e0bffe17 	ldw	r2,-8(fp)
  82abfc:	10800417 	ldw	r2,16(r2)
  82ac00:	1004d0ba 	srli	r2,r2,2
  82ac04:	1085883a 	add	r2,r2,r2
  82ac08:	1085883a 	add	r2,r2,r2
  82ac0c:	1007883a 	mov	r3,r2
  82ac10:	e0bff417 	ldw	r2,-48(fp)
  82ac14:	1885883a 	add	r2,r3,r2
  82ac18:	11bfff04 	addi	r6,r2,-4
  82ac1c:	e0bffe17 	ldw	r2,-8(fp)
  82ac20:	10800317 	ldw	r2,12(r2)
  82ac24:	11c03fcc 	andi	r7,r2,255
  82ac28:	e0bffe17 	ldw	r2,-8(fp)
  82ac2c:	10800317 	ldw	r2,12(r2)
  82ac30:	10ffffcc 	andi	r3,r2,65535
  82ac34:	e0bffe17 	ldw	r2,-8(fp)
  82ac38:	10800417 	ldw	r2,16(r2)
  82ac3c:	1008d0ba 	srli	r4,r2,2
  82ac40:	d8c00015 	stw	r3,0(sp)
  82ac44:	e0bff417 	ldw	r2,-48(fp)
  82ac48:	d8800115 	stw	r2,4(sp)
  82ac4c:	d9000215 	stw	r4,8(sp)
  82ac50:	d8000315 	stw	zero,12(sp)
  82ac54:	008000c4 	movi	r2,3
  82ac58:	d8800415 	stw	r2,16(sp)
  82ac5c:	2809883a 	mov	r4,r5
  82ac60:	000b883a 	mov	r5,zero
  82ac64:	081e9880 	call	81e988 <OSTaskCreateExt>
  82ac68:	e0bff505 	stb	r2,-44(fp)
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
  82ac6c:	e0bff503 	ldbu	r2,-44(fp)
  82ac70:	10803fcc 	andi	r2,r2,255
  82ac74:	10800a18 	cmpnei	r2,r2,40
  82ac78:	1000161e 	bne	r2,zero,82acd4 <TK_NEWTASK+0x124>
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, curr_task, &err);
  82ac7c:	e0bffe17 	ldw	r2,-8(fp)
  82ac80:	10800317 	ldw	r2,12(r2)
  82ac84:	11003fcc 	andi	r4,r2,255
  82ac88:	e17ff584 	addi	r5,fp,-42
  82ac8c:	e1bff544 	addi	r6,fp,-43
  82ac90:	081f1040 	call	81f104 <OSTaskNameGet>
     curr_task[OS_TASK_NAME_SIZE-1]=0;
  82ac94:	e03ffd45 	stb	zero,-11(fp)
    
     printf("Priority requested for task \"%s\" (Prio:%d) conflicts with "\
  82ac98:	e0bffe17 	ldw	r2,-8(fp)
  82ac9c:	11400117 	ldw	r5,4(r2)
  82aca0:	e0bffe17 	ldw	r2,-8(fp)
  82aca4:	11800317 	ldw	r6,12(r2)
  82aca8:	e0bffe17 	ldw	r2,-8(fp)
  82acac:	10800317 	ldw	r2,12(r2)
  82acb0:	e1fff584 	addi	r7,fp,-42
  82acb4:	d8800015 	stw	r2,0(sp)
  82acb8:	01002174 	movhi	r4,133
  82acbc:	2135f904 	addi	r4,r4,-10268
  82acc0:	08076480 	call	807648 <printf>
            "already running task \"%s\" (Prio: %d)\n",
             nettask->name, nettask->priority, curr_task, nettask->priority);
             
     printf("You may wish to check your task priority settings in "\
  82acc4:	01002174 	movhi	r4,133
  82acc8:	21361104 	addi	r4,r4,-10172
  82accc:	08077600 	call	807760 <puts>
  82acd0:	00001e06 	br	82ad4c <TK_NEWTASK+0x19c>
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
  82acd4:	e0bff503 	ldbu	r2,-44(fp)
  82acd8:	10803fcc 	andi	r2,r2,255
  82acdc:	10800a98 	cmpnei	r2,r2,42
  82ace0:	10000c1e 	bne	r2,zero,82ad14 <TK_NEWTASK+0x164>
   {
     printf("Priority requested for task \"%s\" (Prio:%d) exceeds "\
  82ace4:	e0bffe17 	ldw	r2,-8(fp)
  82ace8:	11400117 	ldw	r5,4(r2)
  82acec:	e0bffe17 	ldw	r2,-8(fp)
  82acf0:	11800317 	ldw	r6,12(r2)
  82acf4:	01002174 	movhi	r4,133
  82acf8:	21363904 	addi	r4,r4,-10012
  82acfc:	01c00504 	movi	r7,20
  82ad00:	08076480 	call	807648 <printf>
            "available priority levels in the system (OS_LOWEST_PRIO = %d)\n\n",
             nettask->name, nettask->priority, OS_LOWEST_PRIO);
             
     printf("Please modify the tasks priority level, or modify the "\
  82ad04:	01002174 	movhi	r4,133
  82ad08:	21365604 	addi	r4,r4,-9896
  82ad0c:	08077600 	call	807760 <puts>
  82ad10:	00000e06 	br	82ad4c <TK_NEWTASK+0x19c>
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
  82ad14:	e0bff503 	ldbu	r2,-44(fp)
  82ad18:	10803fcc 	andi	r2,r2,255
  82ad1c:	1005003a 	cmpeq	r2,r2,zero
  82ad20:	10000a1e 	bne	r2,zero,82ad4c <TK_NEWTASK+0x19c>
   {                          /* All other errors are fatal */
      printf("Task create error /(MicroC/OS-II error code:%d/) on %s\n",
  82ad24:	e0bff503 	ldbu	r2,-44(fp)
  82ad28:	11403fcc 	andi	r5,r2,255
  82ad2c:	e0bffe17 	ldw	r2,-8(fp)
  82ad30:	11800117 	ldw	r6,4(r2)
  82ad34:	01002174 	movhi	r4,133
  82ad38:	21367504 	addi	r4,r4,-9772
  82ad3c:	08076480 	call	807648 <printf>
             error, nettask->name);
      return (-1);
  82ad40:	00bfffc4 	movi	r2,-1
  82ad44:	e0bfff15 	stw	r2,-4(fp)
  82ad48:	00001806 	br	82adac <TK_NEWTASK+0x1fc>
   }

   /* Include the task name, so that uc/osII (os aware) debuggers can
    * display it.
    */
   OSTaskNameSet(nettask->priority, &nettask->name[0], &error);
  82ad4c:	e0bffe17 	ldw	r2,-8(fp)
  82ad50:	10800317 	ldw	r2,12(r2)
  82ad54:	11003fcc 	andi	r4,r2,255
  82ad58:	e0bffe17 	ldw	r2,-8(fp)
  82ad5c:	10800117 	ldw	r2,4(r2)
  82ad60:	100b883a 	mov	r5,r2
  82ad64:	e1bff504 	addi	r6,fp,-44
  82ad68:	081f2bc0 	call	81f2bc <OSTaskNameSet>

   nettask->stackbase = (char*)stack;
  82ad6c:	e0fff417 	ldw	r3,-48(fp)
  82ad70:	e0bffe17 	ldw	r2,-8(fp)
  82ad74:	10c00515 	stw	r3,20(r2)
   *nettask->tk_ptr = (INT8U)nettask->priority;  
  82ad78:	e0bffe17 	ldw	r2,-8(fp)
  82ad7c:	10c00017 	ldw	r3,0(r2)
  82ad80:	e0bffe17 	ldw	r2,-8(fp)
  82ad84:	10800317 	ldw	r2,12(r2)
  82ad88:	18800005 	stb	r2,0(r3)

   printf("Created \"%s\" task (Prio: %d)\n",
  82ad8c:	e0bffe17 	ldw	r2,-8(fp)
  82ad90:	11400117 	ldw	r5,4(r2)
  82ad94:	e0bffe17 	ldw	r2,-8(fp)
  82ad98:	11800317 	ldw	r6,12(r2)
  82ad9c:	01002174 	movhi	r4,133
  82ada0:	21368304 	addi	r4,r4,-9716
  82ada4:	08076480 	call	807648 <printf>
         (char *)nettask->name, nettask->priority);

   return (0);
  82ada8:	e03fff15 	stw	zero,-4(fp)
  82adac:	e0bfff17 	ldw	r2,-4(fp)
}
  82adb0:	e037883a 	mov	sp,fp
  82adb4:	dfc00117 	ldw	ra,4(sp)
  82adb8:	df000017 	ldw	fp,0(sp)
  82adbc:	dec00204 	addi	sp,sp,8
  82adc0:	f800283a 	ret

0082adc4 <wait_app_sem>:
 * event (e.g., configuration inputs from user, initiation of a new session,
 * or a periodic timeout notification.
 */
void
wait_app_sem(unsigned long semid)
{
  82adc4:	defffb04 	addi	sp,sp,-20
  82adc8:	dfc00415 	stw	ra,16(sp)
  82adcc:	df000315 	stw	fp,12(sp)
  82add0:	df000304 	addi	fp,sp,12
  82add4:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
  82add8:	e03ffe05 	stb	zero,-8(fp)
   int   errct = 0;
  82addc:	e03ffd15 	stw	zero,-12(fp)

   if ((0 <= semid) && (semid <= MAX_SEMID))
  82ade0:	e0bfff17 	ldw	r2,-4(fp)
  82ade4:	108001a8 	cmpgeui	r2,r2,6
  82ade8:	10001d1e 	bne	r2,zero,82ae60 <wait_app_sem+0x9c>
   {
      do
      {
         OSSemPend(app_semaphore[semid], 0, &error);
  82adec:	e0bfff17 	ldw	r2,-4(fp)
  82adf0:	00c03934 	movhi	r3,228
  82adf4:	18e8d304 	addi	r3,r3,-23732
  82adf8:	1085883a 	add	r2,r2,r2
  82adfc:	1085883a 	add	r2,r2,r2
  82ae00:	10c5883a 	add	r2,r2,r3
  82ae04:	11000017 	ldw	r4,0(r2)
  82ae08:	e1bffe04 	addi	r6,fp,-8
  82ae0c:	000b883a 	mov	r5,zero
  82ae10:	081daec0 	call	81daec <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
  82ae14:	e0bffe03 	ldbu	r2,-8(fp)
  82ae18:	10803fcc 	andi	r2,r2,255
  82ae1c:	10800298 	cmpnei	r2,r2,10
  82ae20:	10000a1e 	bne	r2,zero,82ae4c <wait_app_sem+0x88>
  82ae24:	e0bffd17 	ldw	r2,-12(fp)
  82ae28:	10800044 	addi	r2,r2,1
  82ae2c:	e0bffd15 	stw	r2,-12(fp)
  82ae30:	e0bffd17 	ldw	r2,-12(fp)
  82ae34:	1080fa50 	cmplti	r2,r2,1001
  82ae38:	1000041e 	bne	r2,zero,82ae4c <wait_app_sem+0x88>
         {
            panic("lock NET");   /* fatal */
  82ae3c:	01002174 	movhi	r4,133
  82ae40:	2135f004 	addi	r4,r4,-10304
  82ae44:	0825a2c0 	call	825a2c <panic>
            return;
  82ae48:	00000606 	br	82ae64 <wait_app_sem+0xa0>
         }
      } while (error == 10);
  82ae4c:	e0bffe03 	ldbu	r2,-8(fp)
  82ae50:	10803fcc 	andi	r2,r2,255
  82ae54:	108002a0 	cmpeqi	r2,r2,10
  82ae58:	103fe41e 	bne	r2,zero,82adec <wait_app_sem+0x28>
  82ae5c:	00000106 	br	82ae64 <wait_app_sem+0xa0>
   }
   else
      dtrap();
  82ae60:	082a7c80 	call	82a7c8 <dtrap>
}
  82ae64:	e037883a 	mov	sp,fp
  82ae68:	dfc00117 	ldw	ra,4(sp)
  82ae6c:	df000017 	ldw	fp,0(sp)
  82ae70:	dec00204 	addi	sp,sp,8
  82ae74:	f800283a 	ret

0082ae78 <post_app_sem>:
 * notification. It signals the corresponding application event.
 */

void
post_app_sem(unsigned long semid)
{
  82ae78:	defffc04 	addi	sp,sp,-16
  82ae7c:	dfc00315 	stw	ra,12(sp)
  82ae80:	df000215 	stw	fp,8(sp)
  82ae84:	df000204 	addi	fp,sp,8
  82ae88:	e13fff15 	stw	r4,-4(fp)
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
  82ae8c:	e0bfff17 	ldw	r2,-4(fp)
  82ae90:	108001a8 	cmpgeui	r2,r2,6
  82ae94:	1000101e 	bne	r2,zero,82aed8 <post_app_sem+0x60>
   {
      error = OSSemPost(app_semaphore[semid]);
  82ae98:	e0bfff17 	ldw	r2,-4(fp)
  82ae9c:	00c03934 	movhi	r3,228
  82aea0:	18e8d304 	addi	r3,r3,-23732
  82aea4:	1085883a 	add	r2,r2,r2
  82aea8:	1085883a 	add	r2,r2,r2
  82aeac:	10c5883a 	add	r2,r2,r3
  82aeb0:	11000017 	ldw	r4,0(r2)
  82aeb4:	081dee40 	call	81dee4 <OSSemPost>
  82aeb8:	e0bffe05 	stb	r2,-8(fp)
      if (error != OS_NO_ERR)
  82aebc:	e0bffe03 	ldbu	r2,-8(fp)
  82aec0:	1005003a 	cmpeq	r2,r2,zero
  82aec4:	1000051e 	bne	r2,zero,82aedc <post_app_sem+0x64>
      {
         panic("unlock NET");
  82aec8:	01002174 	movhi	r4,133
  82aecc:	2135f304 	addi	r4,r4,-10292
  82aed0:	0825a2c0 	call	825a2c <panic>
  82aed4:	00000106 	br	82aedc <post_app_sem+0x64>
      }
   }
   else
      dtrap();
  82aed8:	082a7c80 	call	82a7c8 <dtrap>
}
  82aedc:	e037883a 	mov	sp,fp
  82aee0:	dfc00117 	ldw	ra,4(sp)
  82aee4:	df000017 	ldw	fp,0(sp)
  82aee8:	dec00204 	addi	sp,sp,8
  82aeec:	f800283a 	ret

0082aef0 <alt_iniche_init>:
#ifndef SUPERLOOP

extern OS_EVENT *resid_semaphore[MAX_RESID+1];

void alt_iniche_init(void)
{
  82aef0:	defffc04 	addi	sp,sp,-16
  82aef4:	dfc00315 	stw	ra,12(sp)
  82aef8:	df000215 	stw	fp,8(sp)
  82aefc:	dc000115 	stw	r16,4(sp)
  82af00:	df000104 	addi	fp,sp,4
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
  82af04:	01000044 	movi	r4,1
  82af08:	081d7380 	call	81d738 <OSSemCreate>
  82af0c:	d0a0b215 	stw	r2,-32056(gp)
   if (!mheap_sem_ptr)
  82af10:	d0a0b217 	ldw	r2,-32056(gp)
  82af14:	1004c03a 	cmpne	r2,r2,zero
  82af18:	1000031e 	bne	r2,zero,82af28 <alt_iniche_init+0x38>
      panic("mheap_sem_ptr create err"); 
  82af1c:	01002174 	movhi	r4,133
  82af20:	21368b04 	addi	r4,r4,-9684
  82af24:	0825a2c0 	call	825a2c <panic>

   rcvdq_sem_ptr = OSSemCreate(0);
  82af28:	0009883a 	mov	r4,zero
  82af2c:	081d7380 	call	81d738 <OSSemCreate>
  82af30:	d0a0b315 	stw	r2,-32052(gp)
   if (!rcvdq_sem_ptr)
  82af34:	d0a0b317 	ldw	r2,-32052(gp)
  82af38:	1004c03a 	cmpne	r2,r2,zero
  82af3c:	1000031e 	bne	r2,zero,82af4c <alt_iniche_init+0x5c>
      panic("rcvdq_sem_ptr create err"); 
  82af40:	01002174 	movhi	r4,133
  82af44:	21369204 	addi	r4,r4,-9656
  82af48:	0825a2c0 	call	825a2c <panic>

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
  82af4c:	e03fff15 	stw	zero,-4(fp)
  82af50:	00001906 	br	82afb8 <alt_iniche_init+0xc8>
   {
      resid_semaphore[i] = OSSemCreate(1);
  82af54:	e43fff17 	ldw	r16,-4(fp)
  82af58:	01000044 	movi	r4,1
  82af5c:	081d7380 	call	81d738 <OSSemCreate>
  82af60:	1009883a 	mov	r4,r2
  82af64:	00c03934 	movhi	r3,228
  82af68:	18e8c304 	addi	r3,r3,-23796
  82af6c:	8405883a 	add	r2,r16,r16
  82af70:	1085883a 	add	r2,r2,r2
  82af74:	10c5883a 	add	r2,r2,r3
  82af78:	11000015 	stw	r4,0(r2)
      if (!resid_semaphore[i])
  82af7c:	e0bfff17 	ldw	r2,-4(fp)
  82af80:	00c03934 	movhi	r3,228
  82af84:	18e8c304 	addi	r3,r3,-23796
  82af88:	1085883a 	add	r2,r2,r2
  82af8c:	1085883a 	add	r2,r2,r2
  82af90:	10c5883a 	add	r2,r2,r3
  82af94:	10800017 	ldw	r2,0(r2)
  82af98:	1004c03a 	cmpne	r2,r2,zero
  82af9c:	1000031e 	bne	r2,zero,82afac <alt_iniche_init+0xbc>
         panic("resid_semaphore create err");  
  82afa0:	01002174 	movhi	r4,133
  82afa4:	21369904 	addi	r4,r4,-9628
  82afa8:	0825a2c0 	call	825a2c <panic>
   rcvdq_sem_ptr = OSSemCreate(0);
   if (!rcvdq_sem_ptr)
      panic("rcvdq_sem_ptr create err"); 

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
  82afac:	e0bfff17 	ldw	r2,-4(fp)
  82afb0:	10800044 	addi	r2,r2,1
  82afb4:	e0bfff15 	stw	r2,-4(fp)
  82afb8:	e0bfff17 	ldw	r2,-4(fp)
  82afbc:	10800410 	cmplti	r2,r2,16
  82afc0:	103fe41e 	bne	r2,zero,82af54 <alt_iniche_init+0x64>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
  82afc4:	e03fff15 	stw	zero,-4(fp)
  82afc8:	00001906 	br	82b030 <alt_iniche_init+0x140>
   {
      app_semaphore[i] = OSSemCreate(1);
  82afcc:	e43fff17 	ldw	r16,-4(fp)
  82afd0:	01000044 	movi	r4,1
  82afd4:	081d7380 	call	81d738 <OSSemCreate>
  82afd8:	1009883a 	mov	r4,r2
  82afdc:	00c03934 	movhi	r3,228
  82afe0:	18e8d304 	addi	r3,r3,-23732
  82afe4:	8405883a 	add	r2,r16,r16
  82afe8:	1085883a 	add	r2,r2,r2
  82afec:	10c5883a 	add	r2,r2,r3
  82aff0:	11000015 	stw	r4,0(r2)
      if (!app_semaphore[i])
  82aff4:	e0bfff17 	ldw	r2,-4(fp)
  82aff8:	00c03934 	movhi	r3,228
  82affc:	18e8d304 	addi	r3,r3,-23732
  82b000:	1085883a 	add	r2,r2,r2
  82b004:	1085883a 	add	r2,r2,r2
  82b008:	10c5883a 	add	r2,r2,r3
  82b00c:	10800017 	ldw	r2,0(r2)
  82b010:	1004c03a 	cmpne	r2,r2,zero
  82b014:	1000031e 	bne	r2,zero,82b024 <alt_iniche_init+0x134>
         panic("app_semaphore create err");  
  82b018:	01002174 	movhi	r4,133
  82b01c:	2136a004 	addi	r4,r4,-9600
  82b020:	0825a2c0 	call	825a2c <panic>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
  82b024:	e0bfff17 	ldw	r2,-4(fp)
  82b028:	10800044 	addi	r2,r2,1
  82b02c:	e0bfff15 	stw	r2,-4(fp)
  82b030:	e0bfff17 	ldw	r2,-4(fp)
  82b034:	10800190 	cmplti	r2,r2,6
  82b038:	103fe41e 	bne	r2,zero,82afcc <alt_iniche_init+0xdc>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
  82b03c:	e03fff15 	stw	zero,-4(fp)
  82b040:	00002606 	br	82b0dc <alt_iniche_init+0x1ec>
   {
      global_TCPwakeup_set[i].ctick = 0;
  82b044:	e0bfff17 	ldw	r2,-4(fp)
  82b048:	00c03934 	movhi	r3,228
  82b04c:	18e88704 	addi	r3,r3,-24036
  82b050:	10800324 	muli	r2,r2,12
  82b054:	10c5883a 	add	r2,r2,r3
  82b058:	10000015 	stw	zero,0(r2)
      global_TCPwakeup_set[i].soc_event = NULL;
  82b05c:	e0bfff17 	ldw	r2,-4(fp)
  82b060:	00c03934 	movhi	r3,228
  82b064:	18e88704 	addi	r3,r3,-24036
  82b068:	10800324 	muli	r2,r2,12
  82b06c:	10c5883a 	add	r2,r2,r3
  82b070:	10800104 	addi	r2,r2,4
  82b074:	10000015 	stw	zero,0(r2)
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
  82b078:	e43fff17 	ldw	r16,-4(fp)
  82b07c:	0009883a 	mov	r4,zero
  82b080:	081d7380 	call	81d738 <OSSemCreate>
  82b084:	1009883a 	mov	r4,r2
  82b088:	00c03934 	movhi	r3,228
  82b08c:	18e88704 	addi	r3,r3,-24036
  82b090:	80800324 	muli	r2,r16,12
  82b094:	10c5883a 	add	r2,r2,r3
  82b098:	10800204 	addi	r2,r2,8
  82b09c:	11000015 	stw	r4,0(r2)
      if (!global_TCPwakeup_set[i].semaphore)
  82b0a0:	e0bfff17 	ldw	r2,-4(fp)
  82b0a4:	00c03934 	movhi	r3,228
  82b0a8:	18e88704 	addi	r3,r3,-24036
  82b0ac:	10800324 	muli	r2,r2,12
  82b0b0:	10c5883a 	add	r2,r2,r3
  82b0b4:	10800204 	addi	r2,r2,8
  82b0b8:	10800017 	ldw	r2,0(r2)
  82b0bc:	1004c03a 	cmpne	r2,r2,zero
  82b0c0:	1000031e 	bne	r2,zero,82b0d0 <alt_iniche_init+0x1e0>
         panic("globwake_semaphore create err");  
  82b0c4:	01002174 	movhi	r4,133
  82b0c8:	2136a704 	addi	r4,r4,-9572
  82b0cc:	0825a2c0 	call	825a2c <panic>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
  82b0d0:	e0bfff17 	ldw	r2,-4(fp)
  82b0d4:	10800044 	addi	r2,r2,1
  82b0d8:	e0bfff15 	stw	r2,-4(fp)
  82b0dc:	e0bfff17 	ldw	r2,-4(fp)
  82b0e0:	10800510 	cmplti	r2,r2,20
  82b0e4:	103fd71e 	bne	r2,zero,82b044 <alt_iniche_init+0x154>
      global_TCPwakeup_set[i].soc_event = NULL;
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
      if (!global_TCPwakeup_set[i].semaphore)
         panic("globwake_semaphore create err");  
   }
   global_TCPwakeup_setIndx = 0;
  82b0e8:	00802174 	movhi	r2,133
  82b0ec:	10832504 	addi	r2,r2,3220
  82b0f0:	10000015 	stw	zero,0(r2)
#endif  /* TCPWAKE_RTOS */
}
  82b0f4:	e037883a 	mov	sp,fp
  82b0f8:	dfc00217 	ldw	ra,8(sp)
  82b0fc:	df000117 	ldw	fp,4(sp)
  82b100:	dc000017 	ldw	r16,0(sp)
  82b104:	dec00304 	addi	sp,sp,12
  82b108:	f800283a 	ret

0082b10c <pre_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
pre_task_setup()
{
  82b10c:	deffff04 	addi	sp,sp,-4
  82b110:	df000015 	stw	fp,0(sp)
  82b114:	d839883a 	mov	fp,sp
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
  82b118:	00c02174 	movhi	r3,133
  82b11c:	18c2b604 	addi	r3,r3,2776
  82b120:	00800784 	movi	r2,30
  82b124:	18800015 	stw	r2,0(r3)
   lilbufs = MAXLILPKTS;
  82b128:	00c02174 	movhi	r3,133
  82b12c:	18c2b404 	addi	r3,r3,2768
  82b130:	00800784 	movi	r2,30
  82b134:	18800015 	stw	r2,0(r3)
   bigbufsiz = BIGBUFSIZE;
  82b138:	00c02174 	movhi	r3,133
  82b13c:	18c2b704 	addi	r3,r3,2780
  82b140:	00818004 	movi	r2,1536
  82b144:	18800015 	stw	r2,0(r3)
   lilbufsiz = LILBUFSIZE;
  82b148:	00c02174 	movhi	r3,133
  82b14c:	18c2b504 	addi	r3,r3,2772
  82b150:	00802004 	movi	r2,128
  82b154:	18800015 	stw	r2,0(r3)

   /* Install callback to prep_armintcp from prep_ifaces() */
   port_prep = prep_armintcp;
  82b158:	00c02174 	movhi	r3,133
  82b15c:	18c34504 	addi	r3,r3,3348
  82b160:	008020f4 	movhi	r2,131
  82b164:	10ac6804 	addi	r2,r2,-20064
  82b168:	18800015 	stw	r2,0(r3)
#endif   /* NOTDEF */

#endif   /* USE_PPP */


   return NULL;
  82b16c:	0005883a 	mov	r2,zero
}
  82b170:	e037883a 	mov	sp,fp
  82b174:	df000017 	ldw	fp,0(sp)
  82b178:	dec00104 	addi	sp,sp,4
  82b17c:	f800283a 	ret

0082b180 <post_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
post_task_setup()
{
  82b180:	deffff04 	addi	sp,sp,-4
  82b184:	df000015 	stw	fp,0(sp)
  82b188:	d839883a 	mov	fp,sp
   return NULL;
  82b18c:	0005883a 	mov	r2,zero
}
  82b190:	e037883a 	mov	sp,fp
  82b194:	df000017 	ldw	fp,0(sp)
  82b198:	dec00104 	addi	sp,sp,4
  82b19c:	f800283a 	ret

0082b1a0 <prep_armintcp>:

#endif  /* INCLUDE_NVPARMS */

int 
prep_armintcp(int ifaces_found)
{
  82b1a0:	defffd04 	addi	sp,sp,-12
  82b1a4:	dfc00215 	stw	ra,8(sp)
  82b1a8:	df000115 	stw	fp,4(sp)
  82b1ac:	df000104 	addi	fp,sp,4
  82b1b0:	e13fff15 	stw	r4,-4(fp)
 * Call iniche_devices_init, in alt_iniche_dev.c, 
 * to step through all devices and all their respective
 * low-level initialization routines.
 */
#ifdef ALT_INICHE
   ifaces_found = iniche_devices_init(ifaces_found);
  82b1b4:	e13fff17 	ldw	r4,-4(fp)
  82b1b8:	082246c0 	call	82246c <iniche_devices_init>
  82b1bc:	e0bfff15 	stw	r2,-4(fp)

#ifdef USE_SLIP
   ifaces_found = prep_slip(ifaces_found);
#endif

   return ifaces_found;
  82b1c0:	e0bfff17 	ldw	r2,-4(fp)
}
  82b1c4:	e037883a 	mov	sp,fp
  82b1c8:	dfc00117 	ldw	ra,4(sp)
  82b1cc:	df000017 	ldw	fp,0(sp)
  82b1d0:	dec00204 	addi	sp,sp,8
  82b1d4:	f800283a 	ret

0082b1d8 <calloc2>:
 * There is already a function called calloc1() in memio.c,
 * hence use a different function name.
 */
char * 
calloc2(unsigned size)
{
  82b1d8:	defffd04 	addi	sp,sp,-12
  82b1dc:	dfc00215 	stw	ra,8(sp)
  82b1e0:	df000115 	stw	fp,4(sp)
  82b1e4:	df000104 	addi	fp,sp,4
  82b1e8:	e13fff15 	stw	r4,-4(fp)
   return (calloc(1,size));
  82b1ec:	01000044 	movi	r4,1
  82b1f0:	e17fff17 	ldw	r5,-4(fp)
  82b1f4:	084a3680 	call	84a368 <calloc>
}
  82b1f8:	e037883a 	mov	sp,fp
  82b1fc:	dfc00117 	ldw	ra,4(sp)
  82b200:	df000017 	ldw	fp,0(sp)
  82b204:	dec00204 	addi	sp,sp,8
  82b208:	f800283a 	ret

0082b20c <npalloc>:


char *
npalloc(unsigned size)
{
  82b20c:	defff904 	addi	sp,sp,-28
  82b210:	dfc00615 	stw	ra,24(sp)
  82b214:	df000515 	stw	fp,20(sp)
  82b218:	df000504 	addi	fp,sp,20
  82b21c:	e13ffe15 	stw	r4,-8(fp)
#ifdef UCOS_II
   INT8U err;
#endif

#ifdef UCOS_II
   OSSemPend(mheap_sem_ptr, 0, &err);
  82b220:	d120b217 	ldw	r4,-32056(gp)
  82b224:	e1bffd04 	addi	r6,fp,-12
  82b228:	000b883a 	mov	r5,zero
  82b22c:	081daec0 	call	81daec <OSSemPend>
   if(err)
  82b230:	e0bffd03 	ldbu	r2,-12(fp)
  82b234:	10803fcc 	andi	r2,r2,255
  82b238:	1005003a 	cmpeq	r2,r2,zero
  82b23c:	1000181e 	bne	r2,zero,82b2a0 <npalloc+0x94>
   {
      int errct = 0;
  82b240:	e03ffb15 	stw	zero,-20(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
  82b244:	00001206 	br	82b290 <npalloc+0x84>
      {
         if(errct++ > 1000)
  82b248:	e0bffb17 	ldw	r2,-20(fp)
  82b24c:	1080fa48 	cmpgei	r2,r2,1001
  82b250:	1007883a 	mov	r3,r2
  82b254:	e0bffb17 	ldw	r2,-20(fp)
  82b258:	10800044 	addi	r2,r2,1
  82b25c:	e0bffb15 	stw	r2,-20(fp)
  82b260:	18803fcc 	andi	r2,r3,255
  82b264:	1005003a 	cmpeq	r2,r2,zero
  82b268:	1000051e 	bne	r2,zero,82b280 <npalloc+0x74>
         {
            panic("npalloc");    /* fatal? */
  82b26c:	01002174 	movhi	r4,133
  82b270:	2136af04 	addi	r4,r4,-9540
  82b274:	0825a2c0 	call	825a2c <panic>
            return NULL;
  82b278:	e03fff15 	stw	zero,-4(fp)
  82b27c:	00001a06 	br	82b2e8 <npalloc+0xdc>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
  82b280:	d120b217 	ldw	r4,-32056(gp)
  82b284:	e1bffd04 	addi	r6,fp,-12
  82b288:	000b883a 	mov	r5,zero
  82b28c:	081daec0 	call	81daec <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
  82b290:	e0bffd03 	ldbu	r2,-12(fp)
  82b294:	10803fcc 	andi	r2,r2,255
  82b298:	108002a0 	cmpeqi	r2,r2,10
  82b29c:	103fea1e 	bne	r2,zero,82b248 <npalloc+0x3c>
#endif

#ifdef   MEM_WRAPPERS
   ptr = wrap_alloc(size, calloc2);
#else
   ptr = calloc2(size);
  82b2a0:	e13ffe17 	ldw	r4,-8(fp)
  82b2a4:	082b1d80 	call	82b1d8 <calloc2>
  82b2a8:	e0bffc15 	stw	r2,-16(fp)
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
  82b2ac:	d120b217 	ldw	r4,-32056(gp)
  82b2b0:	081dee40 	call	81dee4 <OSSemPost>
  82b2b4:	e0bffd05 	stb	r2,-12(fp)
#endif
   
   if(!ptr)
  82b2b8:	e0bffc17 	ldw	r2,-16(fp)
  82b2bc:	1004c03a 	cmpne	r2,r2,zero
  82b2c0:	1000021e 	bne	r2,zero,82b2cc <npalloc+0xc0>
      return NULL;
  82b2c4:	e03fff15 	stw	zero,-4(fp)
  82b2c8:	00000706 	br	82b2e8 <npalloc+0xdc>

   MEMSET(ptr, 0, size);
  82b2cc:	e0bffc17 	ldw	r2,-16(fp)
  82b2d0:	1009883a 	mov	r4,r2
  82b2d4:	e1bffe17 	ldw	r6,-8(fp)
  82b2d8:	000b883a 	mov	r5,zero
  82b2dc:	08074b80 	call	8074b8 <memset>
   return ptr;      
  82b2e0:	e0bffc17 	ldw	r2,-16(fp)
  82b2e4:	e0bfff15 	stw	r2,-4(fp)
  82b2e8:	e0bfff17 	ldw	r2,-4(fp)
}
  82b2ec:	e037883a 	mov	sp,fp
  82b2f0:	dfc00117 	ldw	ra,4(sp)
  82b2f4:	df000017 	ldw	fp,0(sp)
  82b2f8:	dec00204 	addi	sp,sp,8
  82b2fc:	f800283a 	ret

0082b300 <npfree>:

void
npfree(void * ptr)
{
  82b300:	defffb04 	addi	sp,sp,-20
  82b304:	dfc00415 	stw	ra,16(sp)
  82b308:	df000315 	stw	fp,12(sp)
  82b30c:	df000304 	addi	fp,sp,12
  82b310:	e13fff15 	stw	r4,-4(fp)
#ifdef UCOS_II
   INT8U err;

   OSSemPend(mheap_sem_ptr, 0, &err);
  82b314:	d120b217 	ldw	r4,-32056(gp)
  82b318:	e1bffe04 	addi	r6,fp,-8
  82b31c:	000b883a 	mov	r5,zero
  82b320:	081daec0 	call	81daec <OSSemPend>
   if (err)
  82b324:	e0bffe03 	ldbu	r2,-8(fp)
  82b328:	10803fcc 	andi	r2,r2,255
  82b32c:	1005003a 	cmpeq	r2,r2,zero
  82b330:	1000171e 	bne	r2,zero,82b390 <npfree+0x90>
   {
      int errct = 0;
  82b334:	e03ffd15 	stw	zero,-12(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
  82b338:	00001106 	br	82b380 <npfree+0x80>
      {
         if (errct++ > 1000)
  82b33c:	e0bffd17 	ldw	r2,-12(fp)
  82b340:	1080fa48 	cmpgei	r2,r2,1001
  82b344:	1007883a 	mov	r3,r2
  82b348:	e0bffd17 	ldw	r2,-12(fp)
  82b34c:	10800044 	addi	r2,r2,1
  82b350:	e0bffd15 	stw	r2,-12(fp)
  82b354:	18803fcc 	andi	r2,r3,255
  82b358:	1005003a 	cmpeq	r2,r2,zero
  82b35c:	1000041e 	bne	r2,zero,82b370 <npfree+0x70>
         {
            panic("npfree");    /* fatal? */
  82b360:	01002174 	movhi	r4,133
  82b364:	2136b104 	addi	r4,r4,-9532
  82b368:	0825a2c0 	call	825a2c <panic>
            return;
  82b36c:	00000d06 	br	82b3a4 <npfree+0xa4>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
  82b370:	d120b217 	ldw	r4,-32056(gp)
  82b374:	e1bffe04 	addi	r6,fp,-8
  82b378:	000b883a 	mov	r5,zero
  82b37c:	081daec0 	call	81daec <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
  82b380:	e0bffe03 	ldbu	r2,-8(fp)
  82b384:	10803fcc 	andi	r2,r2,255
  82b388:	108002a0 	cmpeqi	r2,r2,10
  82b38c:	103feb1e 	bne	r2,zero,82b33c <npfree+0x3c>
   }
   
#ifdef   MEM_WRAPPERS
   wrap_free((char*)ptr, free);
#else
   free(ptr);
  82b390:	e13fff17 	ldw	r4,-4(fp)
  82b394:	084a4e40 	call	84a4e4 <free>
#endif

   err = OSSemPost(mheap_sem_ptr);
  82b398:	d120b217 	ldw	r4,-32056(gp)
  82b39c:	081dee40 	call	81dee4 <OSSemPost>
  82b3a0:	e0bffe05 	stb	r2,-8(fp)
 */
   free(ptr);
#endif
#endif

}
  82b3a4:	e037883a 	mov	sp,fp
  82b3a8:	dfc00117 	ldw	ra,4(sp)
  82b3ac:	df000017 	ldw	fp,0(sp)
  82b3b0:	dec00204 	addi	sp,sp,8
  82b3b4:	f800283a 	ret

0082b3b8 <ncpalloc>:
 * contains macro definitions that assign specific memory
 * allocation calls to these routines.
 */
#ifdef ALT_INICHE
char * ncpalloc(unsigned size)
{
  82b3b8:	defffc04 	addi	sp,sp,-16
  82b3bc:	dfc00315 	stw	ra,12(sp)
  82b3c0:	df000215 	stw	fp,8(sp)
  82b3c4:	df000204 	addi	fp,sp,8
  82b3c8:	e13fff15 	stw	r4,-4(fp)
   char *ptr = npalloc(size);
  82b3cc:	e13fff17 	ldw	r4,-4(fp)
  82b3d0:	082b20c0 	call	82b20c <npalloc>
  82b3d4:	e0bffe15 	stw	r2,-8(fp)

   if(ptr) {
  82b3d8:	e0bffe17 	ldw	r2,-8(fp)
  82b3dc:	1005003a 	cmpeq	r2,r2,zero
  82b3e0:	1000041e 	bne	r2,zero,82b3f4 <ncpalloc+0x3c>
      ptr = (char *) alt_remap_uncached(ptr, size);
  82b3e4:	e13ffe17 	ldw	r4,-8(fp)
  82b3e8:	e17fff17 	ldw	r5,-4(fp)
  82b3ec:	083aab80 	call	83aab8 <alt_remap_uncached>
  82b3f0:	e0bffe15 	stw	r2,-8(fp)
   }

   return ptr;
  82b3f4:	e0bffe17 	ldw	r2,-8(fp)
}
  82b3f8:	e037883a 	mov	sp,fp
  82b3fc:	dfc00117 	ldw	ra,4(sp)
  82b400:	df000017 	ldw	fp,0(sp)
  82b404:	dec00204 	addi	sp,sp,8
  82b408:	f800283a 	ret

0082b40c <ncpfree>:

void ncpfree(void *ptr)
{
  82b40c:	defffd04 	addi	sp,sp,-12
  82b410:	dfc00215 	stw	ra,8(sp)
  82b414:	df000115 	stw	fp,4(sp)
  82b418:	df000104 	addi	fp,sp,4
  82b41c:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
  82b420:	e0bfff17 	ldw	r2,-4(fp)
  82b424:	1005003a 	cmpeq	r2,r2,zero
  82b428:	1000061e 	bne	r2,zero,82b444 <ncpfree+0x38>
      ptr = alt_remap_cached(ptr, sizeof(ptr));
  82b42c:	e13fff17 	ldw	r4,-4(fp)
  82b430:	01400104 	movi	r5,4
  82b434:	083aa800 	call	83aa80 <alt_remap_cached>
  82b438:	e0bfff15 	stw	r2,-4(fp)
      npfree(ptr);
  82b43c:	e13fff17 	ldw	r4,-4(fp)
  82b440:	082b3000 	call	82b300 <npfree>
   }
}
  82b444:	e037883a 	mov	sp,fp
  82b448:	dfc00117 	ldw	ra,4(sp)
  82b44c:	df000017 	ldw	fp,0(sp)
  82b450:	dec00204 	addi	sp,sp,8
  82b454:	f800283a 	ret

0082b458 <pffindtype>:
 * RETURNS: 
 */

struct protosw *  
pffindtype(int domain, int type)
{
  82b458:	defffb04 	addi	sp,sp,-20
  82b45c:	dfc00415 	stw	ra,16(sp)
  82b460:	df000315 	stw	fp,12(sp)
  82b464:	df000304 	addi	fp,sp,12
  82b468:	e13ffd15 	stw	r4,-12(fp)
  82b46c:	e17ffe15 	stw	r5,-8(fp)

   /* check that the passed domain is vaid for the build */
   if (domain != AF_INET)
  82b470:	e0bffd17 	ldw	r2,-12(fp)
  82b474:	108000a0 	cmpeqi	r2,r2,2
  82b478:	1000031e 	bne	r2,zero,82b488 <pffindtype+0x30>
   {
#ifdef IP_V6
      if(domain != AF_INET6)
#endif
      {
         dtrap();    /* programming error */
  82b47c:	082a7c80 	call	82a7c8 <dtrap>
         return NULL;
  82b480:	e03fff15 	stw	zero,-4(fp)
  82b484:	00001606 	br	82b4e0 <pffindtype+0x88>
      }
   }

   if (type == SOCK_STREAM)
  82b488:	e0bffe17 	ldw	r2,-8(fp)
  82b48c:	10800058 	cmpnei	r2,r2,1
  82b490:	1000041e 	bne	r2,zero,82b4a4 <pffindtype+0x4c>
      return &tcp_protosw;
  82b494:	00802174 	movhi	r2,133
  82b498:	10819004 	addi	r2,r2,1600
  82b49c:	e0bfff15 	stw	r2,-4(fp)
  82b4a0:	00000f06 	br	82b4e0 <pffindtype+0x88>
#ifdef UDP_SOCKETS
   else if(type == SOCK_DGRAM)
  82b4a4:	e0bffe17 	ldw	r2,-8(fp)
  82b4a8:	10800098 	cmpnei	r2,r2,2
  82b4ac:	1000041e 	bne	r2,zero,82b4c0 <pffindtype+0x68>
      return &udp_protosw;
  82b4b0:	00802174 	movhi	r2,133
  82b4b4:	10819604 	addi	r2,r2,1624
  82b4b8:	e0bfff15 	stw	r2,-4(fp)
  82b4bc:	00000806 	br	82b4e0 <pffindtype+0x88>
#endif   /* UDP_SOCKETS */
#ifdef IP_RAW
   else if(type == SOCK_RAW)
  82b4c0:	e0bffe17 	ldw	r2,-8(fp)
  82b4c4:	108000d8 	cmpnei	r2,r2,3
  82b4c8:	1000041e 	bne	r2,zero,82b4dc <pffindtype+0x84>
      return &rawip_protosw;
  82b4cc:	00802174 	movhi	r2,133
  82b4d0:	10819c04 	addi	r2,r2,1648
  82b4d4:	e0bfff15 	stw	r2,-4(fp)
  82b4d8:	00000106 	br	82b4e0 <pffindtype+0x88>
#endif  /* IP_RAW */
   else
      return NULL;
  82b4dc:	e03fff15 	stw	zero,-4(fp)
  82b4e0:	e0bfff17 	ldw	r2,-4(fp)
}
  82b4e4:	e037883a 	mov	sp,fp
  82b4e8:	dfc00117 	ldw	ra,4(sp)
  82b4ec:	df000017 	ldw	fp,0(sp)
  82b4f0:	dec00204 	addi	sp,sp,8
  82b4f4:	f800283a 	ret

0082b4f8 <pffindproto>:
 * RETURNS: 
 */

struct protosw *  
pffindproto(int domain, int protocol, int type)
{
  82b4f8:	defff904 	addi	sp,sp,-28
  82b4fc:	dfc00615 	stw	ra,24(sp)
  82b500:	df000515 	stw	fp,20(sp)
  82b504:	df000504 	addi	fp,sp,20
  82b508:	e13ffb15 	stw	r4,-20(fp)
  82b50c:	e17ffc15 	stw	r5,-16(fp)
  82b510:	e1bffd15 	stw	r6,-12(fp)
#ifdef IP_RAW
   if (type == SOCK_RAW)
  82b514:	e0bffd17 	ldw	r2,-12(fp)
  82b518:	108000d8 	cmpnei	r2,r2,3
  82b51c:	1000051e 	bne	r2,zero,82b534 <pffindproto+0x3c>
      return(pffindtype(domain, type));
  82b520:	e13ffb17 	ldw	r4,-20(fp)
  82b524:	e17ffd17 	ldw	r5,-12(fp)
  82b528:	082b4580 	call	82b458 <pffindtype>
  82b52c:	e0bffe15 	stw	r2,-8(fp)
  82b530:	00001f06 	br	82b5b0 <pffindproto+0xb8>
#endif

   switch (protocol)
  82b534:	e0bffc17 	ldw	r2,-16(fp)
  82b538:	e0bfff15 	stw	r2,-4(fp)
  82b53c:	e0ffff17 	ldw	r3,-4(fp)
  82b540:	188001a0 	cmpeqi	r2,r3,6
  82b544:	1000071e 	bne	r2,zero,82b564 <pffindproto+0x6c>
  82b548:	e0ffff17 	ldw	r3,-4(fp)
  82b54c:	18800460 	cmpeqi	r2,r3,17
  82b550:	10000a1e 	bne	r2,zero,82b57c <pffindproto+0x84>
  82b554:	e0ffff17 	ldw	r3,-4(fp)
  82b558:	1805003a 	cmpeq	r2,r3,zero
  82b55c:	1000101e 	bne	r2,zero,82b5a0 <pffindproto+0xa8>
  82b560:	00000c06 	br	82b594 <pffindproto+0x9c>
   {
#ifdef BSD_SOCKETS
   case IPPROTO_TCP:
      if (type == SOCK_STREAM)
  82b564:	e0bffd17 	ldw	r2,-12(fp)
  82b568:	10800060 	cmpeqi	r2,r2,1
  82b56c:	10000c1e 	bne	r2,zero,82b5a0 <pffindproto+0xa8>
         break;
      /* IPPROTO_TCP protocol on non-SOCK_STREAM type socket */
      dtrap();
  82b570:	082a7c80 	call	82a7c8 <dtrap>
      return NULL;
  82b574:	e03ffe15 	stw	zero,-8(fp)
  82b578:	00000d06 	br	82b5b0 <pffindproto+0xb8>
   case IPPROTO_UDP:
      if (type == SOCK_DGRAM)
  82b57c:	e0bffd17 	ldw	r2,-12(fp)
  82b580:	108000a0 	cmpeqi	r2,r2,2
  82b584:	1000061e 	bne	r2,zero,82b5a0 <pffindproto+0xa8>
         break;
      /* IPPROTO_UDP protocol on non-SOCK_DGRAM type socket */
      dtrap();
  82b588:	082a7c80 	call	82a7c8 <dtrap>
      return NULL;
  82b58c:	e03ffe15 	stw	zero,-8(fp)
  82b590:	00000706 	br	82b5b0 <pffindproto+0xb8>
   case 0:
      /* let protocol default based on socket type */
      break;
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
  82b594:	082a7c80 	call	82a7c8 <dtrap>
      return NULL;
  82b598:	e03ffe15 	stw	zero,-8(fp)
  82b59c:	00000406 	br	82b5b0 <pffindproto+0xb8>
   }
   return(pffindtype(domain, type));   /* map to findtype */
  82b5a0:	e13ffb17 	ldw	r4,-20(fp)
  82b5a4:	e17ffd17 	ldw	r5,-12(fp)
  82b5a8:	082b4580 	call	82b458 <pffindtype>
  82b5ac:	e0bffe15 	stw	r2,-8(fp)
  82b5b0:	e0bffe17 	ldw	r2,-8(fp)
}
  82b5b4:	e037883a 	mov	sp,fp
  82b5b8:	dfc00117 	ldw	ra,4(sp)
  82b5bc:	df000017 	ldw	fp,0(sp)
  82b5c0:	dec00204 	addi	sp,sp,8
  82b5c4:	f800283a 	ret

0082b5c8 <m_getnbuf>:
 * RETURNS: 
 */

struct mbuf *  
m_getnbuf(int type, int len)
{
  82b5c8:	defff904 	addi	sp,sp,-28
  82b5cc:	dfc00615 	stw	ra,24(sp)
  82b5d0:	df000515 	stw	fp,20(sp)
  82b5d4:	df000504 	addi	fp,sp,20
  82b5d8:	e13ffd15 	stw	r4,-12(fp)
  82b5dc:	e17ffe15 	stw	r5,-8(fp)
   struct mbuf *  m;
   PACKET pkt = NULL;
  82b5e0:	e03ffb15 	stw	zero,-20(fp)

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
  82b5e4:	e0bffd17 	ldw	r2,-12(fp)
  82b5e8:	10800050 	cmplti	r2,r2,1
  82b5ec:	1000031e 	bne	r2,zero,82b5fc <m_getnbuf+0x34>
  82b5f0:	e0bffd17 	ldw	r2,-12(fp)
  82b5f4:	10800390 	cmplti	r2,r2,14
  82b5f8:	1000011e 	bne	r2,zero,82b600 <m_getnbuf+0x38>
   {
      dtrap(); /* is this OK? */
  82b5fc:	082a7c80 	call	82a7c8 <dtrap>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
  82b600:	e0bffe17 	ldw	r2,-8(fp)
  82b604:	1005003a 	cmpeq	r2,r2,zero
  82b608:	10000e1e 	bne	r2,zero,82b644 <m_getnbuf+0x7c>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
  82b60c:	01000084 	movi	r4,2
  82b610:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pkt = pk_alloc(len + HDRSLEN);
  82b614:	e0bffe17 	ldw	r2,-8(fp)
  82b618:	10800e04 	addi	r2,r2,56
  82b61c:	1009883a 	mov	r4,r2
  82b620:	0829b840 	call	829b84 <pk_alloc>
  82b624:	e0bffb15 	stw	r2,-20(fp)

      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82b628:	01000084 	movi	r4,2
  82b62c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      if (!pkt)
  82b630:	e0bffb17 	ldw	r2,-20(fp)
  82b634:	1004c03a 	cmpne	r2,r2,zero
  82b638:	1000021e 	bne	r2,zero,82b644 <m_getnbuf+0x7c>
         return NULL;
  82b63c:	e03fff15 	stw	zero,-4(fp)
  82b640:	00004506 	br	82b758 <m_getnbuf+0x190>
   }

   m = (struct mbuf *)getq(&mfreeq);
  82b644:	01003934 	movhi	r4,228
  82b648:	2128f204 	addi	r4,r4,-23608
  82b64c:	082a0900 	call	82a090 <getq>
  82b650:	e0bffc15 	stw	r2,-16(fp)
   if (!m)
  82b654:	e0bffc17 	ldw	r2,-16(fp)
  82b658:	1004c03a 	cmpne	r2,r2,zero
  82b65c:	10000b1e 	bne	r2,zero,82b68c <m_getnbuf+0xc4>
   {
      if (pkt) 
  82b660:	e0bffb17 	ldw	r2,-20(fp)
  82b664:	1005003a 	cmpeq	r2,r2,zero
  82b668:	1000061e 	bne	r2,zero,82b684 <m_getnbuf+0xbc>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
  82b66c:	01000084 	movi	r4,2
  82b670:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(pkt);
  82b674:	e13ffb17 	ldw	r4,-20(fp)
  82b678:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82b67c:	01000084 	movi	r4,2
  82b680:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      }
      return NULL;
  82b684:	e03fff15 	stw	zero,-4(fp)
  82b688:	00003306 	br	82b758 <m_getnbuf+0x190>
   }
   m->m_type = type;
  82b68c:	e0fffc17 	ldw	r3,-16(fp)
  82b690:	e0bffd17 	ldw	r2,-12(fp)
  82b694:	18800815 	stw	r2,32(r3)
   if (len == 0)
  82b698:	e0bffe17 	ldw	r2,-8(fp)
  82b69c:	1004c03a 	cmpne	r2,r2,zero
  82b6a0:	1000071e 	bne	r2,zero,82b6c0 <m_getnbuf+0xf8>
   {
      m->pkt = NULL;
  82b6a4:	e0bffc17 	ldw	r2,-16(fp)
  82b6a8:	10000115 	stw	zero,4(r2)
      m->m_base = NULL;    /* caller better fill these in! */
  82b6ac:	e0bffc17 	ldw	r2,-16(fp)
  82b6b0:	10000415 	stw	zero,16(r2)
      m->m_memsz = 0;
  82b6b4:	e0bffc17 	ldw	r2,-16(fp)
  82b6b8:	10000515 	stw	zero,20(r2)
  82b6bc:	00001506 	br	82b714 <m_getnbuf+0x14c>
   }
   else
   {
      m->pkt = pkt;
  82b6c0:	e0fffc17 	ldw	r3,-16(fp)
  82b6c4:	e0bffb17 	ldw	r2,-20(fp)
  82b6c8:	18800115 	stw	r2,4(r3)
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
  82b6cc:	e0bffb17 	ldw	r2,-20(fp)
  82b6d0:	10800117 	ldw	r2,4(r2)
  82b6d4:	10c00e04 	addi	r3,r2,56
  82b6d8:	e0bffb17 	ldw	r2,-20(fp)
  82b6dc:	10c00315 	stw	r3,12(r2)
  82b6e0:	e0bffb17 	ldw	r2,-20(fp)
  82b6e4:	10c00317 	ldw	r3,12(r2)
  82b6e8:	e0bffc17 	ldw	r2,-16(fp)
  82b6ec:	10c00315 	stw	r3,12(r2)
  82b6f0:	e0bffc17 	ldw	r2,-16(fp)
  82b6f4:	10c00317 	ldw	r3,12(r2)
  82b6f8:	e0bffc17 	ldw	r2,-16(fp)
  82b6fc:	10c00415 	stw	r3,16(r2)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
  82b700:	e0bffb17 	ldw	r2,-20(fp)
  82b704:	10800217 	ldw	r2,8(r2)
  82b708:	10fff204 	addi	r3,r2,-56
  82b70c:	e0bffc17 	ldw	r2,-16(fp)
  82b710:	10c00515 	stw	r3,20(r2)
   }
   m->m_len = 0;
  82b714:	e0bffc17 	ldw	r2,-16(fp)
  82b718:	10000215 	stw	zero,8(r2)
   m->m_next = m->m_act = NULL;
  82b71c:	e0bffc17 	ldw	r2,-16(fp)
  82b720:	10000715 	stw	zero,28(r2)
  82b724:	e0bffc17 	ldw	r2,-16(fp)
  82b728:	10c00717 	ldw	r3,28(r2)
  82b72c:	e0bffc17 	ldw	r2,-16(fp)
  82b730:	10c00615 	stw	r3,24(r2)
   mbstat.allocs++;        /* maintain local statistics */
  82b734:	d0a0b617 	ldw	r2,-32040(gp)
  82b738:	10800044 	addi	r2,r2,1
  82b73c:	d0a0b615 	stw	r2,-32040(gp)
   putq(&mbufq, (qp)m);
  82b740:	e17ffc17 	ldw	r5,-16(fp)
  82b744:	01003934 	movhi	r4,228
  82b748:	2128ed04 	addi	r4,r4,-23628
  82b74c:	082a1580 	call	82a158 <putq>
   return m;
  82b750:	e0bffc17 	ldw	r2,-16(fp)
  82b754:	e0bfff15 	stw	r2,-4(fp)
  82b758:	e0bfff17 	ldw	r2,-4(fp)
}
  82b75c:	e037883a 	mov	sp,fp
  82b760:	dfc00117 	ldw	ra,4(sp)
  82b764:	df000017 	ldw	fp,0(sp)
  82b768:	dec00204 	addi	sp,sp,8
  82b76c:	f800283a 	ret

0082b770 <m_free>:
 */


struct mbuf *  
m_free(struct mbuf * m)
{
  82b770:	defffb04 	addi	sp,sp,-20
  82b774:	dfc00415 	stw	ra,16(sp)
  82b778:	df000315 	stw	fp,12(sp)
  82b77c:	df000304 	addi	fp,sp,12
  82b780:	e13ffe15 	stw	r4,-8(fp)
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
  82b784:	00803934 	movhi	r2,228
  82b788:	10a8ed04 	addi	r2,r2,-23628
  82b78c:	10800217 	ldw	r2,8(r2)
  82b790:	10800048 	cmpgei	r2,r2,1
  82b794:	1000031e 	bne	r2,zero,82b7a4 <m_free+0x34>
      panic("mfree: q_len");
  82b798:	01002174 	movhi	r4,133
  82b79c:	2136b304 	addi	r4,r4,-9524
  82b7a0:	0825a2c0 	call	825a2c <panic>

   if (m->m_type < MT_RXDATA || m->m_type > MT_IFADDR)
  82b7a4:	e0bffe17 	ldw	r2,-8(fp)
  82b7a8:	10800817 	ldw	r2,32(r2)
  82b7ac:	10800050 	cmplti	r2,r2,1
  82b7b0:	1000041e 	bne	r2,zero,82b7c4 <m_free+0x54>
  82b7b4:	e0bffe17 	ldw	r2,-8(fp)
  82b7b8:	10800817 	ldw	r2,32(r2)
  82b7bc:	10800390 	cmplti	r2,r2,14
  82b7c0:	10000c1e 	bne	r2,zero,82b7f4 <m_free+0x84>
   {
      if (m->m_type == MT_FREE)
  82b7c4:	e0bffe17 	ldw	r2,-8(fp)
  82b7c8:	10800817 	ldw	r2,32(r2)
  82b7cc:	1004c03a 	cmpne	r2,r2,zero
  82b7d0:	1000051e 	bne	r2,zero,82b7e8 <m_free+0x78>
      {
         dtrap(); /* debug double free of mbuf by tcp_in() */
  82b7d4:	082a7c80 	call	82a7c8 <dtrap>
         return m->m_next; /* seems harmless, though.... */
  82b7d8:	e0bffe17 	ldw	r2,-8(fp)
  82b7dc:	10800617 	ldw	r2,24(r2)
  82b7e0:	e0bfff15 	stw	r2,-4(fp)
  82b7e4:	00002906 	br	82b88c <m_free+0x11c>
      }
      else
         panic("m_free: type");
  82b7e8:	01002174 	movhi	r4,133
  82b7ec:	2136b704 	addi	r4,r4,-9508
  82b7f0:	0825a2c0 	call	825a2c <panic>
   }
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */
  82b7f4:	e0bffe17 	ldw	r2,-8(fp)
  82b7f8:	10800617 	ldw	r2,24(r2)
  82b7fc:	e0bffd15 	stw	r2,-12(fp)

   if (qdel(&mbufq, m) == NULL)
  82b800:	01003934 	movhi	r4,228
  82b804:	2128ed04 	addi	r4,r4,-23628
  82b808:	e17ffe17 	ldw	r5,-8(fp)
  82b80c:	082a2080 	call	82a208 <qdel>
  82b810:	1004c03a 	cmpne	r2,r2,zero
  82b814:	1000031e 	bne	r2,zero,82b824 <m_free+0xb4>
      panic("m_free: missing");
  82b818:	01002174 	movhi	r4,133
  82b81c:	2136bb04 	addi	r4,r4,-9492
  82b820:	0825a2c0 	call	825a2c <panic>

   m->m_type = MT_FREE;    /* this may seem silly, but helps error checking */
  82b824:	e0bffe17 	ldw	r2,-8(fp)
  82b828:	10000815 	stw	zero,32(r2)

   if (m->pkt)
  82b82c:	e0bffe17 	ldw	r2,-8(fp)
  82b830:	10800117 	ldw	r2,4(r2)
  82b834:	1005003a 	cmpeq	r2,r2,zero
  82b838:	1000071e 	bne	r2,zero,82b858 <m_free+0xe8>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
  82b83c:	01000084 	movi	r4,2
  82b840:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(m->pkt);     /* free up the netport buffer */
  82b844:	e0bffe17 	ldw	r2,-8(fp)
  82b848:	11000117 	ldw	r4,4(r2)
  82b84c:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82b850:	01000084 	movi	r4,2
  82b854:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   }
   mbstat.frees++;
  82b858:	00802174 	movhi	r2,133
  82b85c:	10832d04 	addi	r2,r2,3252
  82b860:	10800017 	ldw	r2,0(r2)
  82b864:	10c00044 	addi	r3,r2,1
  82b868:	00802174 	movhi	r2,133
  82b86c:	10832d04 	addi	r2,r2,3252
  82b870:	10c00015 	stw	r3,0(r2)
   putq(&mfreeq, (qp)m);
  82b874:	e17ffe17 	ldw	r5,-8(fp)
  82b878:	01003934 	movhi	r4,228
  82b87c:	2128f204 	addi	r4,r4,-23608
  82b880:	082a1580 	call	82a158 <putq>
   return nextptr;
  82b884:	e0bffd17 	ldw	r2,-12(fp)
  82b888:	e0bfff15 	stw	r2,-4(fp)
  82b88c:	e0bfff17 	ldw	r2,-4(fp)
}
  82b890:	e037883a 	mov	sp,fp
  82b894:	dfc00117 	ldw	ra,4(sp)
  82b898:	df000017 	ldw	fp,0(sp)
  82b89c:	dec00204 	addi	sp,sp,8
  82b8a0:	f800283a 	ret

0082b8a4 <m_freem>:
 * RETURNS: 
 */

void
m_freem(struct mbuf * m)
{
  82b8a4:	defffd04 	addi	sp,sp,-12
  82b8a8:	dfc00215 	stw	ra,8(sp)
  82b8ac:	df000115 	stw	fp,4(sp)
  82b8b0:	df000104 	addi	fp,sp,4
  82b8b4:	e13fff15 	stw	r4,-4(fp)
   while (m != NULL)
  82b8b8:	00000306 	br	82b8c8 <m_freem+0x24>
      m = m_free(m);
  82b8bc:	e13fff17 	ldw	r4,-4(fp)
  82b8c0:	082b7700 	call	82b770 <m_free>
  82b8c4:	e0bfff15 	stw	r2,-4(fp)
 */

void
m_freem(struct mbuf * m)
{
   while (m != NULL)
  82b8c8:	e0bfff17 	ldw	r2,-4(fp)
  82b8cc:	1004c03a 	cmpne	r2,r2,zero
  82b8d0:	103ffa1e 	bne	r2,zero,82b8bc <m_freem+0x18>
      m = m_free(m);
}
  82b8d4:	e037883a 	mov	sp,fp
  82b8d8:	dfc00117 	ldw	ra,4(sp)
  82b8dc:	df000017 	ldw	fp,0(sp)
  82b8e0:	dec00204 	addi	sp,sp,8
  82b8e4:	f800283a 	ret

0082b8e8 <m_copy>:
 * RETURNS: 
 */

struct mbuf *  
m_copy(struct mbuf * m, int off, int len)
{
  82b8e8:	defff404 	addi	sp,sp,-48
  82b8ec:	dfc00b15 	stw	ra,44(sp)
  82b8f0:	df000a15 	stw	fp,40(sp)
  82b8f4:	df000a04 	addi	fp,sp,40
  82b8f8:	e13ffa15 	stw	r4,-24(fp)
  82b8fc:	e17ffb15 	stw	r5,-20(fp)
  82b900:	e1bffc15 	stw	r6,-16(fp)
   struct mbuf *  nb, * head, *  tail;
   int   tocopy;

   if (len == 0)  /* nothing to do */
  82b904:	e0bffc17 	ldw	r2,-16(fp)
  82b908:	1004c03a 	cmpne	r2,r2,zero
  82b90c:	1000021e 	bne	r2,zero,82b918 <m_copy+0x30>
      return NULL;
  82b910:	e03ffd15 	stw	zero,-12(fp)
  82b914:	0000b706 	br	82bbf4 <m_copy+0x30c>

#ifdef NPDEBUG
   /* sanity test parms */
   if (off < 0 || (len < 0 && len != M_COPYALL))
  82b918:	e0bffb17 	ldw	r2,-20(fp)
  82b91c:	1004803a 	cmplt	r2,r2,zero
  82b920:	1000061e 	bne	r2,zero,82b93c <m_copy+0x54>
  82b924:	e0bffc17 	ldw	r2,-16(fp)
  82b928:	1004403a 	cmpge	r2,r2,zero
  82b92c:	1000191e 	bne	r2,zero,82b994 <m_copy+0xac>
  82b930:	e0bffc17 	ldw	r2,-16(fp)
  82b934:	10bfffe0 	cmpeqi	r2,r2,-1
  82b938:	1000161e 	bne	r2,zero,82b994 <m_copy+0xac>
   {
      dtrap();
  82b93c:	082a7c80 	call	82a7c8 <dtrap>
      return NULL;
  82b940:	e03ffd15 	stw	zero,-12(fp)
  82b944:	0000ab06 	br	82bbf4 <m_copy+0x30c>
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
   {
      if (!m)
  82b948:	e0bffa17 	ldw	r2,-24(fp)
  82b94c:	1004c03a 	cmpne	r2,r2,zero
  82b950:	1000031e 	bne	r2,zero,82b960 <m_copy+0x78>
      {
         dtrap();
  82b954:	082a7c80 	call	82a7c8 <dtrap>
         return NULL;
  82b958:	e03ffd15 	stw	zero,-12(fp)
  82b95c:	0000a506 	br	82bbf4 <m_copy+0x30c>
      }
      if (off < (int)m->m_len)
  82b960:	e0bffa17 	ldw	r2,-24(fp)
  82b964:	10800217 	ldw	r2,8(r2)
  82b968:	1007883a 	mov	r3,r2
  82b96c:	e0bffb17 	ldw	r2,-20(fp)
  82b970:	10c00b16 	blt	r2,r3,82b9a0 <m_copy+0xb8>
         break;
      off -= m->m_len;
  82b974:	e0fffb17 	ldw	r3,-20(fp)
  82b978:	e0bffa17 	ldw	r2,-24(fp)
  82b97c:	10800217 	ldw	r2,8(r2)
  82b980:	1885c83a 	sub	r2,r3,r2
  82b984:	e0bffb15 	stw	r2,-20(fp)
      m = m->m_next;
  82b988:	e0bffa17 	ldw	r2,-24(fp)
  82b98c:	10800617 	ldw	r2,24(r2)
  82b990:	e0bffa15 	stw	r2,-24(fp)
      return NULL;
   }
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
  82b994:	e0bffb17 	ldw	r2,-20(fp)
  82b998:	10800048 	cmpgei	r2,r2,1
  82b99c:	103fea1e 	bne	r2,zero,82b948 <m_copy+0x60>
         break;
      off -= m->m_len;
      m = m->m_next;
   }

   head = tail = NULL;
  82b9a0:	e03ff715 	stw	zero,-36(fp)
  82b9a4:	e0bff717 	ldw	r2,-36(fp)
  82b9a8:	e0bff815 	stw	r2,-32(fp)

   while (len > 0)
  82b9ac:	00008806 	br	82bbd0 <m_copy+0x2e8>
   {
      if (m == NULL) /* at end of queue? */
  82b9b0:	e0bffa17 	ldw	r2,-24(fp)
  82b9b4:	1004c03a 	cmpne	r2,r2,zero
  82b9b8:	1000051e 	bne	r2,zero,82b9d0 <m_copy+0xe8>
      {
         panic("m_copy: bad len");
  82b9bc:	01002174 	movhi	r4,133
  82b9c0:	2136bf04 	addi	r4,r4,-9476
  82b9c4:	0825a2c0 	call	825a2c <panic>
         return NULL;
  82b9c8:	e03ffd15 	stw	zero,-12(fp)
  82b9cc:	00008906 	br	82bbf4 <m_copy+0x30c>
      }
      tocopy = (int)MIN(len, (int)(m->m_len - off));
  82b9d0:	e0bffa17 	ldw	r2,-24(fp)
  82b9d4:	10c00217 	ldw	r3,8(r2)
  82b9d8:	e0bffb17 	ldw	r2,-20(fp)
  82b9dc:	1885c83a 	sub	r2,r3,r2
  82b9e0:	e0fffc17 	ldw	r3,-16(fp)
  82b9e4:	e0ffff15 	stw	r3,-4(fp)
  82b9e8:	e0bffe15 	stw	r2,-8(fp)
  82b9ec:	e0bfff17 	ldw	r2,-4(fp)
  82b9f0:	e0fffe17 	ldw	r3,-8(fp)
  82b9f4:	10c0020e 	bge	r2,r3,82ba00 <m_copy+0x118>
  82b9f8:	e0bfff17 	ldw	r2,-4(fp)
  82b9fc:	e0bffe15 	stw	r2,-8(fp)
  82ba00:	e0fffe17 	ldw	r3,-8(fp)
  82ba04:	e0fff615 	stw	r3,-40(fp)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
  82ba08:	e0bffb17 	ldw	r2,-20(fp)
  82ba0c:	108000cc 	andi	r2,r2,3
  82ba10:	1004c03a 	cmpne	r2,r2,zero
  82ba14:	1000051e 	bne	r2,zero,82ba2c <m_copy+0x144>
  82ba18:	e0bffa17 	ldw	r2,-24(fp)
  82ba1c:	10800117 	ldw	r2,4(r2)
  82ba20:	10800917 	ldw	r2,36(r2)
  82ba24:	10800060 	cmpeqi	r2,r2,1
  82ba28:	1000251e 	bne	r2,zero,82bac0 <m_copy+0x1d8>
          (m->pkt->inuse != 1))
      {
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
  82ba2c:	e0bffa17 	ldw	r2,-24(fp)
  82ba30:	11000817 	ldw	r4,32(r2)
  82ba34:	e17ff617 	ldw	r5,-40(fp)
  82ba38:	082b5c80 	call	82b5c8 <m_getnbuf>
  82ba3c:	e0bff915 	stw	r2,-28(fp)
  82ba40:	e0bff917 	ldw	r2,-28(fp)
  82ba44:	1005003a 	cmpeq	r2,r2,zero
  82ba48:	1000671e 	bne	r2,zero,82bbe8 <m_copy+0x300>
            goto nospace;
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
  82ba4c:	e0bff917 	ldw	r2,-28(fp)
  82ba50:	11000317 	ldw	r4,12(r2)
  82ba54:	e0bffa17 	ldw	r2,-24(fp)
  82ba58:	10c00317 	ldw	r3,12(r2)
  82ba5c:	e0bffb17 	ldw	r2,-20(fp)
  82ba60:	1885883a 	add	r2,r3,r2
  82ba64:	e0fff617 	ldw	r3,-40(fp)
  82ba68:	100b883a 	mov	r5,r2
  82ba6c:	180d883a 	mov	r6,r3
  82ba70:	08073380 	call	807338 <memcpy>
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */
  82ba74:	e0fff617 	ldw	r3,-40(fp)
  82ba78:	e0bff917 	ldw	r2,-28(fp)
  82ba7c:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mcopies++;
  82ba80:	00803934 	movhi	r2,228
  82ba84:	10a90c04 	addi	r2,r2,-23504
  82ba88:	10802e17 	ldw	r2,184(r2)
  82ba8c:	10c00044 	addi	r3,r2,1
  82ba90:	00803934 	movhi	r2,228
  82ba94:	10a90c04 	addi	r2,r2,-23504
  82ba98:	10c02e15 	stw	r3,184(r2)
         tcpstat.tcps_mcopiedbytes += tocopy;
  82ba9c:	00803934 	movhi	r2,228
  82baa0:	10a90c04 	addi	r2,r2,-23504
  82baa4:	10c03017 	ldw	r3,192(r2)
  82baa8:	e0bff617 	ldw	r2,-40(fp)
  82baac:	1887883a 	add	r3,r3,r2
  82bab0:	00803934 	movhi	r2,228
  82bab4:	10a90c04 	addi	r2,r2,-23504
  82bab8:	10c03015 	stw	r3,192(r2)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
  82babc:	00003106 	br	82bb84 <m_copy+0x29c>
      {
         /* Rather than memcpy every mbuf's data, "clone" the data by 
          * making a duplicate of the mbufs involved and bumping the 
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
  82bac0:	e0bffa17 	ldw	r2,-24(fp)
  82bac4:	11000817 	ldw	r4,32(r2)
  82bac8:	000b883a 	mov	r5,zero
  82bacc:	082b5c80 	call	82b5c8 <m_getnbuf>
  82bad0:	e0bff915 	stw	r2,-28(fp)
  82bad4:	e0bff917 	ldw	r2,-28(fp)
  82bad8:	1005003a 	cmpeq	r2,r2,zero
  82badc:	1000421e 	bne	r2,zero,82bbe8 <m_copy+0x300>
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */
  82bae0:	e0bffa17 	ldw	r2,-24(fp)
  82bae4:	10c00117 	ldw	r3,4(r2)
  82bae8:	18800917 	ldw	r2,36(r3)
  82baec:	10800044 	addi	r2,r2,1
  82baf0:	18800915 	stw	r2,36(r3)

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
  82baf4:	e0bffa17 	ldw	r2,-24(fp)
  82baf8:	10c00117 	ldw	r3,4(r2)
  82bafc:	e0bff917 	ldw	r2,-28(fp)
  82bb00:	10c00115 	stw	r3,4(r2)
         nb->m_base = m->m_base;
  82bb04:	e0bffa17 	ldw	r2,-24(fp)
  82bb08:	10c00417 	ldw	r3,16(r2)
  82bb0c:	e0bff917 	ldw	r2,-28(fp)
  82bb10:	10c00415 	stw	r3,16(r2)
         nb->m_memsz = m->m_memsz;
  82bb14:	e0bffa17 	ldw	r2,-24(fp)
  82bb18:	10c00517 	ldw	r3,20(r2)
  82bb1c:	e0bff917 	ldw	r2,-28(fp)
  82bb20:	10c00515 	stw	r3,20(r2)
         nb->m_data = m->m_data + off;
  82bb24:	e0bffa17 	ldw	r2,-24(fp)
  82bb28:	10c00317 	ldw	r3,12(r2)
  82bb2c:	e0bffb17 	ldw	r2,-20(fp)
  82bb30:	1887883a 	add	r3,r3,r2
  82bb34:	e0bff917 	ldw	r2,-28(fp)
  82bb38:	10c00315 	stw	r3,12(r2)
         nb->m_len = tocopy;
  82bb3c:	e0fff617 	ldw	r3,-40(fp)
  82bb40:	e0bff917 	ldw	r2,-28(fp)
  82bb44:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mclones++;
  82bb48:	00803934 	movhi	r2,228
  82bb4c:	10a90c04 	addi	r2,r2,-23504
  82bb50:	10802f17 	ldw	r2,188(r2)
  82bb54:	10c00044 	addi	r3,r2,1
  82bb58:	00803934 	movhi	r2,228
  82bb5c:	10a90c04 	addi	r2,r2,-23504
  82bb60:	10c02f15 	stw	r3,188(r2)
         tcpstat.tcps_mclonedbytes += tocopy;
  82bb64:	00803934 	movhi	r2,228
  82bb68:	10a90c04 	addi	r2,r2,-23504
  82bb6c:	10c03117 	ldw	r3,196(r2)
  82bb70:	e0bff617 	ldw	r2,-40(fp)
  82bb74:	1887883a 	add	r3,r3,r2
  82bb78:	00803934 	movhi	r2,228
  82bb7c:	10a90c04 	addi	r2,r2,-23504
  82bb80:	10c03115 	stw	r3,196(r2)
      }

      len -= tocopy;
  82bb84:	e0fffc17 	ldw	r3,-16(fp)
  82bb88:	e0bff617 	ldw	r2,-40(fp)
  82bb8c:	1885c83a 	sub	r2,r3,r2
  82bb90:	e0bffc15 	stw	r2,-16(fp)
      off = 0;
  82bb94:	e03ffb15 	stw	zero,-20(fp)
      if (tail)      /* head & tail are set by first pass thru loop */
  82bb98:	e0bff717 	ldw	r2,-36(fp)
  82bb9c:	1005003a 	cmpeq	r2,r2,zero
  82bba0:	1000041e 	bne	r2,zero,82bbb4 <m_copy+0x2cc>
         tail->m_next = nb;
  82bba4:	e0fff717 	ldw	r3,-36(fp)
  82bba8:	e0bff917 	ldw	r2,-28(fp)
  82bbac:	18800615 	stw	r2,24(r3)
  82bbb0:	00000206 	br	82bbbc <m_copy+0x2d4>
      else
         head = nb;
  82bbb4:	e0bff917 	ldw	r2,-28(fp)
  82bbb8:	e0bff815 	stw	r2,-32(fp)
      tail = nb;     /* always make new mbuf the tail */
  82bbbc:	e0bff917 	ldw	r2,-28(fp)
  82bbc0:	e0bff715 	stw	r2,-36(fp)
      m = m->m_next;
  82bbc4:	e0bffa17 	ldw	r2,-24(fp)
  82bbc8:	10800617 	ldw	r2,24(r2)
  82bbcc:	e0bffa15 	stw	r2,-24(fp)
      m = m->m_next;
   }

   head = tail = NULL;

   while (len > 0)
  82bbd0:	e0bffc17 	ldw	r2,-16(fp)
  82bbd4:	10800048 	cmpgei	r2,r2,1
  82bbd8:	103f751e 	bne	r2,zero,82b9b0 <m_copy+0xc8>
      tail = nb;     /* always make new mbuf the tail */
      m = m->m_next;

   }

   return head;
  82bbdc:	e0bff817 	ldw	r2,-32(fp)
  82bbe0:	e0bffd15 	stw	r2,-12(fp)
  82bbe4:	00000306 	br	82bbf4 <m_copy+0x30c>

nospace:
   m_freem (head);
  82bbe8:	e13ff817 	ldw	r4,-32(fp)
  82bbec:	082b8a40 	call	82b8a4 <m_freem>
   return NULL;
  82bbf0:	e03ffd15 	stw	zero,-12(fp)
  82bbf4:	e0bffd17 	ldw	r2,-12(fp)
}
  82bbf8:	e037883a 	mov	sp,fp
  82bbfc:	dfc00117 	ldw	ra,4(sp)
  82bc00:	df000017 	ldw	fp,0(sp)
  82bc04:	dec00204 	addi	sp,sp,8
  82bc08:	f800283a 	ret

0082bc0c <m_adj>:
 * RETURNS: 
 */

void
m_adj(struct mbuf * mp, int len)
{
  82bc0c:	defffb04 	addi	sp,sp,-20
  82bc10:	df000415 	stw	fp,16(sp)
  82bc14:	df000404 	addi	fp,sp,16
  82bc18:	e13ffe15 	stw	r4,-8(fp)
  82bc1c:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m;
   int   count;

   if ((m = mp) == NULL)
  82bc20:	e0bffe17 	ldw	r2,-8(fp)
  82bc24:	e0bffd15 	stw	r2,-12(fp)
  82bc28:	e0bffd17 	ldw	r2,-12(fp)
  82bc2c:	1005003a 	cmpeq	r2,r2,zero
  82bc30:	1000661e 	bne	r2,zero,82bdcc <m_adj+0x1c0>
      return;

   if (len >= 0) 
  82bc34:	e0bfff17 	ldw	r2,-4(fp)
  82bc38:	1004803a 	cmplt	r2,r2,zero
  82bc3c:	1000241e 	bne	r2,zero,82bcd0 <m_adj+0xc4>
   {
      while (m != NULL && len > 0) 
  82bc40:	00001c06 	br	82bcb4 <m_adj+0xa8>
      {
         if (m->m_len <= (unsigned)len)
  82bc44:	e0bffd17 	ldw	r2,-12(fp)
  82bc48:	10c00217 	ldw	r3,8(r2)
  82bc4c:	e0bfff17 	ldw	r2,-4(fp)
  82bc50:	10c00b36 	bltu	r2,r3,82bc80 <m_adj+0x74>
         {
            len -= m->m_len;
  82bc54:	e0ffff17 	ldw	r3,-4(fp)
  82bc58:	e0bffd17 	ldw	r2,-12(fp)
  82bc5c:	10800217 	ldw	r2,8(r2)
  82bc60:	1885c83a 	sub	r2,r3,r2
  82bc64:	e0bfff15 	stw	r2,-4(fp)
            m->m_len = 0;
  82bc68:	e0bffd17 	ldw	r2,-12(fp)
  82bc6c:	10000215 	stw	zero,8(r2)
            m = m->m_next;
  82bc70:	e0bffd17 	ldw	r2,-12(fp)
  82bc74:	10800617 	ldw	r2,24(r2)
  82bc78:	e0bffd15 	stw	r2,-12(fp)
  82bc7c:	00000d06 	br	82bcb4 <m_adj+0xa8>
         }
         else
         {
            m->m_len -= len;
  82bc80:	e0bffd17 	ldw	r2,-12(fp)
  82bc84:	10c00217 	ldw	r3,8(r2)
  82bc88:	e0bfff17 	ldw	r2,-4(fp)
  82bc8c:	1887c83a 	sub	r3,r3,r2
  82bc90:	e0bffd17 	ldw	r2,-12(fp)
  82bc94:	10c00215 	stw	r3,8(r2)
            m->m_data += len;
  82bc98:	e0bffd17 	ldw	r2,-12(fp)
  82bc9c:	10c00317 	ldw	r3,12(r2)
  82bca0:	e0bfff17 	ldw	r2,-4(fp)
  82bca4:	1887883a 	add	r3,r3,r2
  82bca8:	e0bffd17 	ldw	r2,-12(fp)
  82bcac:	10c00315 	stw	r3,12(r2)
            break;
  82bcb0:	00004606 	br	82bdcc <m_adj+0x1c0>
   if ((m = mp) == NULL)
      return;

   if (len >= 0) 
   {
      while (m != NULL && len > 0) 
  82bcb4:	e0bffd17 	ldw	r2,-12(fp)
  82bcb8:	1005003a 	cmpeq	r2,r2,zero
  82bcbc:	1000431e 	bne	r2,zero,82bdcc <m_adj+0x1c0>
  82bcc0:	e0bfff17 	ldw	r2,-4(fp)
  82bcc4:	10800048 	cmpgei	r2,r2,1
  82bcc8:	103fde1e 	bne	r2,zero,82bc44 <m_adj+0x38>
  82bccc:	00003f06 	br	82bdcc <m_adj+0x1c0>
       * calculating its length and finding the last mbuf.
       * If the adjustment only affects this mbuf, then just
       * adjust and return.  Otherwise, rescan and truncate
       * after the remaining size.
       */
      len = -len;
  82bcd0:	e0bfff17 	ldw	r2,-4(fp)
  82bcd4:	0085c83a 	sub	r2,zero,r2
  82bcd8:	e0bfff15 	stw	r2,-4(fp)
      count = 0;
  82bcdc:	e03ffc15 	stw	zero,-16(fp)
      for (;;) 
      {
         count += m->m_len;
  82bce0:	e0bffd17 	ldw	r2,-12(fp)
  82bce4:	10c00217 	ldw	r3,8(r2)
  82bce8:	e0bffc17 	ldw	r2,-16(fp)
  82bcec:	1885883a 	add	r2,r3,r2
  82bcf0:	e0bffc15 	stw	r2,-16(fp)
         if (m->m_next == (struct mbuf *)0)
  82bcf4:	e0bffd17 	ldw	r2,-12(fp)
  82bcf8:	10800617 	ldw	r2,24(r2)
  82bcfc:	1005003a 	cmpeq	r2,r2,zero
  82bd00:	1000041e 	bne	r2,zero,82bd14 <m_adj+0x108>
            break;
         m = m->m_next;
  82bd04:	e0bffd17 	ldw	r2,-12(fp)
  82bd08:	10800617 	ldw	r2,24(r2)
  82bd0c:	e0bffd15 	stw	r2,-12(fp)
      }
  82bd10:	003ff306 	br	82bce0 <m_adj+0xd4>
      if (m->m_len >= (unsigned)len)
  82bd14:	e0bffd17 	ldw	r2,-12(fp)
  82bd18:	10c00217 	ldw	r3,8(r2)
  82bd1c:	e0bfff17 	ldw	r2,-4(fp)
  82bd20:	18800736 	bltu	r3,r2,82bd40 <m_adj+0x134>
      {
         m->m_len -= len;
  82bd24:	e0bffd17 	ldw	r2,-12(fp)
  82bd28:	10c00217 	ldw	r3,8(r2)
  82bd2c:	e0bfff17 	ldw	r2,-4(fp)
  82bd30:	1887c83a 	sub	r3,r3,r2
  82bd34:	e0bffd17 	ldw	r2,-12(fp)
  82bd38:	10c00215 	stw	r3,8(r2)
         return;
  82bd3c:	00002306 	br	82bdcc <m_adj+0x1c0>
      }
      count -= len;
  82bd40:	e0fffc17 	ldw	r3,-16(fp)
  82bd44:	e0bfff17 	ldw	r2,-4(fp)
  82bd48:	1885c83a 	sub	r2,r3,r2
  82bd4c:	e0bffc15 	stw	r2,-16(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
  82bd50:	e0bffe17 	ldw	r2,-8(fp)
  82bd54:	e0bffd15 	stw	r2,-12(fp)
  82bd58:	00001006 	br	82bd9c <m_adj+0x190>
      {
         if (m->m_len >= (unsigned)count)
  82bd5c:	e0bffd17 	ldw	r2,-12(fp)
  82bd60:	10c00217 	ldw	r3,8(r2)
  82bd64:	e0bffc17 	ldw	r2,-16(fp)
  82bd68:	18800436 	bltu	r3,r2,82bd7c <m_adj+0x170>
         {
            m->m_len = count;
  82bd6c:	e0fffc17 	ldw	r3,-16(fp)
  82bd70:	e0bffd17 	ldw	r2,-12(fp)
  82bd74:	10c00215 	stw	r3,8(r2)
            break;
  82bd78:	00000e06 	br	82bdb4 <m_adj+0x1a8>
         }
         count -= m->m_len;
  82bd7c:	e0fffc17 	ldw	r3,-16(fp)
  82bd80:	e0bffd17 	ldw	r2,-12(fp)
  82bd84:	10800217 	ldw	r2,8(r2)
  82bd88:	1885c83a 	sub	r2,r3,r2
  82bd8c:	e0bffc15 	stw	r2,-16(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
  82bd90:	e0bffd17 	ldw	r2,-12(fp)
  82bd94:	10800617 	ldw	r2,24(r2)
  82bd98:	e0bffd15 	stw	r2,-12(fp)
  82bd9c:	e0bffd17 	ldw	r2,-12(fp)
  82bda0:	1004c03a 	cmpne	r2,r2,zero
  82bda4:	103fed1e 	bne	r2,zero,82bd5c <m_adj+0x150>
            m->m_len = count;
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
  82bda8:	00000206 	br	82bdb4 <m_adj+0x1a8>
         m->m_len = 0;
  82bdac:	e0bffd17 	ldw	r2,-12(fp)
  82bdb0:	10000215 	stw	zero,8(r2)
            m->m_len = count;
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
  82bdb4:	e0bffd17 	ldw	r2,-12(fp)
  82bdb8:	10800617 	ldw	r2,24(r2)
  82bdbc:	e0bffd15 	stw	r2,-12(fp)
  82bdc0:	e0bffd17 	ldw	r2,-12(fp)
  82bdc4:	1004c03a 	cmpne	r2,r2,zero
  82bdc8:	103ff81e 	bne	r2,zero,82bdac <m_adj+0x1a0>
         m->m_len = 0;
   }
}
  82bdcc:	e037883a 	mov	sp,fp
  82bdd0:	df000017 	ldw	fp,0(sp)
  82bdd4:	dec00104 	addi	sp,sp,4
  82bdd8:	f800283a 	ret

0082bddc <mbuf_len>:
 * RETURNS: 
 */

int
mbuf_len (struct mbuf * m)
{
  82bddc:	defffd04 	addi	sp,sp,-12
  82bde0:	df000215 	stw	fp,8(sp)
  82bde4:	df000204 	addi	fp,sp,8
  82bde8:	e13fff15 	stw	r4,-4(fp)
   int   len   =  0;
  82bdec:	e03ffe15 	stw	zero,-8(fp)

   while (m)
  82bdf0:	00000806 	br	82be14 <mbuf_len+0x38>
   {
      len += m->m_len;
  82bdf4:	e0bfff17 	ldw	r2,-4(fp)
  82bdf8:	10c00217 	ldw	r3,8(r2)
  82bdfc:	e0bffe17 	ldw	r2,-8(fp)
  82be00:	1885883a 	add	r2,r3,r2
  82be04:	e0bffe15 	stw	r2,-8(fp)
      m = m->m_next;
  82be08:	e0bfff17 	ldw	r2,-4(fp)
  82be0c:	10800617 	ldw	r2,24(r2)
  82be10:	e0bfff15 	stw	r2,-4(fp)
int
mbuf_len (struct mbuf * m)
{
   int   len   =  0;

   while (m)
  82be14:	e0bfff17 	ldw	r2,-4(fp)
  82be18:	1004c03a 	cmpne	r2,r2,zero
  82be1c:	103ff51e 	bne	r2,zero,82bdf4 <mbuf_len+0x18>
   {
      len += m->m_len;
      m = m->m_next;
   }
   return len;
  82be20:	e0bffe17 	ldw	r2,-8(fp)
}
  82be24:	e037883a 	mov	sp,fp
  82be28:	df000017 	ldw	fp,0(sp)
  82be2c:	dec00104 	addi	sp,sp,4
  82be30:	f800283a 	ret

0082be34 <dtom>:
 * RETURNS: 
 */

struct mbuf *  
dtom(void * data)
{
  82be34:	defffa04 	addi	sp,sp,-24
  82be38:	dfc00515 	stw	ra,20(sp)
  82be3c:	df000415 	stw	fp,16(sp)
  82be40:	df000404 	addi	fp,sp,16
  82be44:	e13ffe15 	stw	r4,-8(fp)
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
  82be48:	00803934 	movhi	r2,228
  82be4c:	10a8ed04 	addi	r2,r2,-23628
  82be50:	10800017 	ldw	r2,0(r2)
  82be54:	e0bffd15 	stw	r2,-12(fp)
  82be58:	00001306 	br	82bea8 <dtom+0x74>
   {
      m = (struct mbuf *)qptr;
  82be5c:	e0bffd17 	ldw	r2,-12(fp)
  82be60:	e0bffc15 	stw	r2,-16(fp)

      if (IN_RANGE(m->m_base, m->m_memsz, (char*)data))
  82be64:	e0bffc17 	ldw	r2,-16(fp)
  82be68:	10c00417 	ldw	r3,16(r2)
  82be6c:	e0bffe17 	ldw	r2,-8(fp)
  82be70:	10c00a36 	bltu	r2,r3,82be9c <dtom+0x68>
  82be74:	e0bffc17 	ldw	r2,-16(fp)
  82be78:	10c00417 	ldw	r3,16(r2)
  82be7c:	e0bffc17 	ldw	r2,-16(fp)
  82be80:	10800517 	ldw	r2,20(r2)
  82be84:	1887883a 	add	r3,r3,r2
  82be88:	e0bffe17 	ldw	r2,-8(fp)
  82be8c:	10c0032e 	bgeu	r2,r3,82be9c <dtom+0x68>
         return (struct mbuf *)qptr;
  82be90:	e0bffd17 	ldw	r2,-12(fp)
  82be94:	e0bfff15 	stw	r2,-4(fp)
  82be98:	00000a06 	br	82bec4 <dtom+0x90>
dtom(void * data)
{
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
  82be9c:	e0bffd17 	ldw	r2,-12(fp)
  82bea0:	10800017 	ldw	r2,0(r2)
  82bea4:	e0bffd15 	stw	r2,-12(fp)
  82bea8:	e0bffd17 	ldw	r2,-12(fp)
  82beac:	1004c03a 	cmpne	r2,r2,zero
  82beb0:	103fea1e 	bne	r2,zero,82be5c <dtom+0x28>
      else
         continue;

   }

   panic("dtom");    /* data not found in any "in use" mbuf */
  82beb4:	01002174 	movhi	r4,133
  82beb8:	2136c304 	addi	r4,r4,-9460
  82bebc:	0825a2c0 	call	825a2c <panic>
   return NULL;
  82bec0:	e03fff15 	stw	zero,-4(fp)
  82bec4:	e0bfff17 	ldw	r2,-4(fp)
}
  82bec8:	e037883a 	mov	sp,fp
  82becc:	dfc00117 	ldw	ra,4(sp)
  82bed0:	df000017 	ldw	fp,0(sp)
  82bed4:	dec00204 	addi	sp,sp,8
  82bed8:	f800283a 	ret

0082bedc <remque>:
};


void
remque (void * arg)
{
  82bedc:	defffd04 	addi	sp,sp,-12
  82bee0:	df000215 	stw	fp,8(sp)
  82bee4:	df000204 	addi	fp,sp,8
  82bee8:	e13fff15 	stw	r4,-4(fp)
   struct bsdq *  old;

   old = (struct bsdq *)arg;
  82beec:	e0bfff17 	ldw	r2,-4(fp)
  82bef0:	e0bffe15 	stw	r2,-8(fp)
   if (!old->prev) return;
  82bef4:	e0bffe17 	ldw	r2,-8(fp)
  82bef8:	10800117 	ldw	r2,4(r2)
  82befc:	1005003a 	cmpeq	r2,r2,zero
  82bf00:	10000e1e 	bne	r2,zero,82bf3c <remque+0x60>
      old->prev->next = old->next;
  82bf04:	e0bffe17 	ldw	r2,-8(fp)
  82bf08:	10c00117 	ldw	r3,4(r2)
  82bf0c:	e0bffe17 	ldw	r2,-8(fp)
  82bf10:	10800017 	ldw	r2,0(r2)
  82bf14:	18800015 	stw	r2,0(r3)
   if (old->next)
  82bf18:	e0bffe17 	ldw	r2,-8(fp)
  82bf1c:	10800017 	ldw	r2,0(r2)
  82bf20:	1005003a 	cmpeq	r2,r2,zero
  82bf24:	1000051e 	bne	r2,zero,82bf3c <remque+0x60>
      old->next->prev = old->prev;
  82bf28:	e0bffe17 	ldw	r2,-8(fp)
  82bf2c:	10c00017 	ldw	r3,0(r2)
  82bf30:	e0bffe17 	ldw	r2,-8(fp)
  82bf34:	10800117 	ldw	r2,4(r2)
  82bf38:	18800115 	stw	r2,4(r3)
}
  82bf3c:	e037883a 	mov	sp,fp
  82bf40:	df000017 	ldw	fp,0(sp)
  82bf44:	dec00104 	addi	sp,sp,4
  82bf48:	f800283a 	ret

0082bf4c <insque>:
 * RETURNS: 
 */

void
insque(void * n, void * p)
{
  82bf4c:	defffb04 	addi	sp,sp,-20
  82bf50:	df000415 	stw	fp,16(sp)
  82bf54:	df000404 	addi	fp,sp,16
  82bf58:	e13ffe15 	stw	r4,-8(fp)
  82bf5c:	e17fff15 	stw	r5,-4(fp)
   struct bsdq *  newe, *  prev;

   newe = (struct bsdq *)n;
  82bf60:	e0bffe17 	ldw	r2,-8(fp)
  82bf64:	e0bffd15 	stw	r2,-12(fp)
   prev = (struct bsdq *)p;
  82bf68:	e0bfff17 	ldw	r2,-4(fp)
  82bf6c:	e0bffc15 	stw	r2,-16(fp)
   newe->next = prev->next;
  82bf70:	e0bffc17 	ldw	r2,-16(fp)
  82bf74:	10c00017 	ldw	r3,0(r2)
  82bf78:	e0bffd17 	ldw	r2,-12(fp)
  82bf7c:	10c00015 	stw	r3,0(r2)
   newe->prev = prev;
  82bf80:	e0fffd17 	ldw	r3,-12(fp)
  82bf84:	e0bffc17 	ldw	r2,-16(fp)
  82bf88:	18800115 	stw	r2,4(r3)
   prev->next = newe;
  82bf8c:	e0fffc17 	ldw	r3,-16(fp)
  82bf90:	e0bffd17 	ldw	r2,-12(fp)
  82bf94:	18800015 	stw	r2,0(r3)
   if (newe->next)
  82bf98:	e0bffd17 	ldw	r2,-12(fp)
  82bf9c:	10800017 	ldw	r2,0(r2)
  82bfa0:	1005003a 	cmpeq	r2,r2,zero
  82bfa4:	1000041e 	bne	r2,zero,82bfb8 <insque+0x6c>
      newe->next->prev = newe;
  82bfa8:	e0bffd17 	ldw	r2,-12(fp)
  82bfac:	10c00017 	ldw	r3,0(r2)
  82bfb0:	e0bffd17 	ldw	r2,-12(fp)
  82bfb4:	18800115 	stw	r2,4(r3)
}
  82bfb8:	e037883a 	mov	sp,fp
  82bfbc:	df000017 	ldw	fp,0(sp)
  82bfc0:	dec00104 	addi	sp,sp,4
  82bfc4:	f800283a 	ret

0082bfc8 <nptcp_init>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
nptcp_init()
{
  82bfc8:	defffb04 	addi	sp,sp,-20
  82bfcc:	dfc00415 	stw	ra,16(sp)
  82bfd0:	df000315 	stw	fp,12(sp)
  82bfd4:	df000304 	addi	fp,sp,12
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
  82bfd8:	00802174 	movhi	r2,133
  82bfdc:	1082b404 	addi	r2,r2,2768
  82bfe0:	10c00017 	ldw	r3,0(r2)
  82bfe4:	00802174 	movhi	r2,133
  82bfe8:	1082b604 	addi	r2,r2,2776
  82bfec:	10800017 	ldw	r2,0(r2)
  82bff0:	1885883a 	add	r2,r3,r2
  82bff4:	1085883a 	add	r2,r2,r2
  82bff8:	108000c4 	addi	r2,r2,3
  82bffc:	e0bffe15 	stw	r2,-8(fp)
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
  82c000:	00803934 	movhi	r2,228
  82c004:	10a8d904 	addi	r2,r2,-23708
  82c008:	10000015 	stw	zero,0(r2)
  82c00c:	10000115 	stw	zero,4(r2)
  82c010:	10000215 	stw	zero,8(r2)
  82c014:	10000315 	stw	zero,12(r2)
  82c018:	10000415 	stw	zero,16(r2)
   MEMSET(&mbufq, 0, sizeof(mbufq));
  82c01c:	00803934 	movhi	r2,228
  82c020:	10a8ed04 	addi	r2,r2,-23628
  82c024:	10000015 	stw	zero,0(r2)
  82c028:	10000115 	stw	zero,4(r2)
  82c02c:	10000215 	stw	zero,8(r2)
  82c030:	10000315 	stw	zero,12(r2)
  82c034:	10000415 	stw	zero,16(r2)
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
  82c038:	00803934 	movhi	r2,228
  82c03c:	10a8f204 	addi	r2,r2,-23608
  82c040:	10000015 	stw	zero,0(r2)
  82c044:	10000115 	stw	zero,4(r2)
  82c048:	10000215 	stw	zero,8(r2)
  82c04c:	10000315 	stw	zero,12(r2)
  82c050:	10000415 	stw	zero,16(r2)
   for (i = 0; i < (int)bufcount; i++)
  82c054:	e03fff15 	stw	zero,-4(fp)
  82c058:	00001606 	br	82c0b4 <nptcp_init+0xec>
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
  82c05c:	01000904 	movi	r4,36
  82c060:	082b20c0 	call	82b20c <npalloc>
  82c064:	e0bffd15 	stw	r2,-12(fp)
      if (!m)  /* malloc error, bail out */
  82c068:	e0bffd17 	ldw	r2,-12(fp)
  82c06c:	1004c03a 	cmpne	r2,r2,zero
  82c070:	1000031e 	bne	r2,zero,82c080 <nptcp_init+0xb8>
         panic("tcpinit");
  82c074:	01002174 	movhi	r4,133
  82c078:	2136c504 	addi	r4,r4,-9452
  82c07c:	0825a2c0 	call	825a2c <panic>
      m->m_type = MT_FREE;
  82c080:	e0bffd17 	ldw	r2,-12(fp)
  82c084:	10000815 	stw	zero,32(r2)
      m->m_len = 0;
  82c088:	e0bffd17 	ldw	r2,-12(fp)
  82c08c:	10000215 	stw	zero,8(r2)
      m->m_data = NULL;
  82c090:	e0bffd17 	ldw	r2,-12(fp)
  82c094:	10000315 	stw	zero,12(r2)
      putq(&mfreeq, (qp)m);
  82c098:	e17ffd17 	ldw	r5,-12(fp)
  82c09c:	01003934 	movhi	r4,228
  82c0a0:	2128f204 	addi	r4,r4,-23608
  82c0a4:	082a1580 	call	82a158 <putq>
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
   MEMSET(&mbufq, 0, sizeof(mbufq));
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   for (i = 0; i < (int)bufcount; i++)
  82c0a8:	e0bfff17 	ldw	r2,-4(fp)
  82c0ac:	10800044 	addi	r2,r2,1
  82c0b0:	e0bfff15 	stw	r2,-4(fp)
  82c0b4:	e0fffe17 	ldw	r3,-8(fp)
  82c0b8:	e0bfff17 	ldw	r2,-4(fp)
  82c0bc:	10ffe716 	blt	r2,r3,82c05c <nptcp_init+0x94>
      m->m_type = MT_FREE;
      m->m_len = 0;
      m->m_data = NULL;
      putq(&mfreeq, (qp)m);
   }
   mfreeq.q_min = (int)bufcount;   /* this should match q_max and q_len */
  82c0c0:	e0fffe17 	ldw	r3,-8(fp)
  82c0c4:	00803934 	movhi	r2,228
  82c0c8:	10a8f204 	addi	r2,r2,-23608
  82c0cc:	10c00415 	stw	r3,16(r2)
   tcpmib.tcpRtoAlgorithm = 4;     /* Van Jacobson's algorithm */
   tcpmib.tcpRtoMin = TCPTV_MIN * 1000;      /* PR_SLOWHZ */
   tcpmib.tcpRtoMax = TCPTV_REXMTMAX * 1000; /* PR_SLOWHZ */
#endif

   tcp_init();    /* call the BSD init in tcp_usr.c */
  82c0d0:	08372e40 	call	8372e4 <tcp_init>

#ifdef TCP_MENUS
   install_menu(&tcpmenu[0]);
#endif   /* IN_MENUS */

   return 0;   /* good return */
  82c0d4:	0005883a 	mov	r2,zero
}
  82c0d8:	e037883a 	mov	sp,fp
  82c0dc:	dfc00117 	ldw	ra,4(sp)
  82c0e0:	df000017 	ldw	fp,0(sp)
  82c0e4:	dec00204 	addi	sp,sp,8
  82c0e8:	f800283a 	ret

0082c0ec <tcp_rcv>:

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
  82c0ec:	defff804 	addi	sp,sp,-32
  82c0f0:	dfc00715 	stw	ra,28(sp)
  82c0f4:	df000615 	stw	fp,24(sp)
  82c0f8:	df000604 	addi	fp,sp,24
  82c0fc:	e13ffe15 	stw	r4,-8(fp)

   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
  82c100:	e0bffe17 	ldw	r2,-8(fp)
  82c104:	10800317 	ldw	r2,12(r2)
  82c108:	e0bffc15 	stw	r2,-16(fp)
   len = ntohs(bip->ip_len);  /* get length in local endian */
  82c10c:	e0bffc17 	ldw	r2,-16(fp)
  82c110:	1080008b 	ldhu	r2,2(r2)
  82c114:	10bfffcc 	andi	r2,r2,65535
  82c118:	1004d23a 	srli	r2,r2,8
  82c11c:	10803fcc 	andi	r2,r2,255
  82c120:	1009883a 	mov	r4,r2
  82c124:	e0bffc17 	ldw	r2,-16(fp)
  82c128:	1080008b 	ldhu	r2,2(r2)
  82c12c:	10bfffcc 	andi	r2,r2,65535
  82c130:	1004923a 	slli	r2,r2,8
  82c134:	1007883a 	mov	r3,r2
  82c138:	00bfc004 	movi	r2,-256
  82c13c:	1884703a 	and	r2,r3,r2
  82c140:	2084b03a 	or	r2,r4,r2
  82c144:	e0bffa0d 	sth	r2,-24(fp)

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
  82c148:	e0bffc17 	ldw	r2,-16(fp)
  82c14c:	10800003 	ldbu	r2,0(r2)
  82c150:	10803fcc 	andi	r2,r2,255
  82c154:	108003cc 	andi	r2,r2,15
  82c158:	1085883a 	add	r2,r2,r2
  82c15c:	1085883a 	add	r2,r2,r2
  82c160:	1007883a 	mov	r3,r2
  82c164:	e0bffc17 	ldw	r2,-16(fp)
  82c168:	1885883a 	add	r2,r3,r2
  82c16c:	e0bffb15 	stw	r2,-20(fp)
   if (tcp_cksum(bip) != tcpp->th_sum)
  82c170:	e13ffc17 	ldw	r4,-16(fp)
  82c174:	08469300 	call	846930 <tcp_cksum>
  82c178:	1007883a 	mov	r3,r2
  82c17c:	e0bffb17 	ldw	r2,-20(fp)
  82c180:	1080040b 	ldhu	r2,16(r2)
  82c184:	18ffffcc 	andi	r3,r3,65535
  82c188:	10bfffcc 	andi	r2,r2,65535
  82c18c:	18801726 	beq	r3,r2,82c1ec <tcp_rcv+0x100>
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
  82c190:	00803934 	movhi	r2,228
  82c194:	10a8de04 	addi	r2,r2,-23688
  82c198:	10800d17 	ldw	r2,52(r2)
  82c19c:	10c00044 	addi	r3,r2,1
  82c1a0:	00803934 	movhi	r2,228
  82c1a4:	10a8de04 	addi	r2,r2,-23688
  82c1a8:	10c00d15 	stw	r3,52(r2)
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
  82c1ac:	00803934 	movhi	r2,228
  82c1b0:	10a90c04 	addi	r2,r2,-23504
  82c1b4:	10801c17 	ldw	r2,112(r2)
  82c1b8:	10c00044 	addi	r3,r2,1
  82c1bc:	00803934 	movhi	r2,228
  82c1c0:	10a90c04 	addi	r2,r2,-23504
  82c1c4:	10c01c15 	stw	r3,112(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
  82c1c8:	01000084 	movi	r4,2
  82c1cc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(pkt);  /* punt packet */
  82c1d0:	e13ffe17 	ldw	r4,-8(fp)
  82c1d4:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82c1d8:	01000084 	movi	r4,2
  82c1dc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
  82c1e0:	00bff804 	movi	r2,-32
  82c1e4:	e0bfff15 	stw	r2,-4(fp)
  82c1e8:	00003506 	br	82c2c0 <tcp_rcv+0x1d4>
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
  82c1ec:	01000044 	movi	r4,1
  82c1f0:	000b883a 	mov	r5,zero
  82c1f4:	082b5c80 	call	82b5c8 <m_getnbuf>
  82c1f8:	e0bffd15 	stw	r2,-12(fp)
   if (!m_in){
  82c1fc:	e0bffd17 	ldw	r2,-12(fp)
  82c200:	1004c03a 	cmpne	r2,r2,zero
  82c204:	1000091e 	bne	r2,zero,82c22c <tcp_rcv+0x140>
      LOCK_NET_RESOURCE(FREEQ_RESID);
  82c208:	01000084 	movi	r4,2
  82c20c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(pkt);
  82c210:	e13ffe17 	ldw	r4,-8(fp)
  82c214:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82c218:	01000084 	movi	r4,2
  82c21c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;  
  82c220:	00bffa84 	movi	r2,-22
  82c224:	e0bfff15 	stw	r2,-4(fp)
  82c228:	00002506 	br	82c2c0 <tcp_rcv+0x1d4>
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
  82c22c:	e0bffc17 	ldw	r2,-16(fp)
  82c230:	10800003 	ldbu	r2,0(r2)
  82c234:	10803fcc 	andi	r2,r2,255
  82c238:	108003cc 	andi	r2,r2,15
  82c23c:	1085883a 	add	r2,r2,r2
  82c240:	1085883a 	add	r2,r2,r2
  82c244:	1007883a 	mov	r3,r2
  82c248:	e0bffa0b 	ldhu	r2,-24(fp)
  82c24c:	10c5c83a 	sub	r2,r2,r3
  82c250:	e0bffa0d 	sth	r2,-24(fp)
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
  82c254:	e0fffc17 	ldw	r3,-16(fp)
  82c258:	e0bffa0b 	ldhu	r2,-24(fp)
  82c25c:	1880008d 	sth	r2,2(r3)

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
  82c260:	e0fffd17 	ldw	r3,-12(fp)
  82c264:	e0bffe17 	ldw	r2,-8(fp)
  82c268:	18800115 	stw	r2,4(r3)
   m_in->m_data = pkt->nb_prot;
  82c26c:	e0bffe17 	ldw	r2,-8(fp)
  82c270:	10c00317 	ldw	r3,12(r2)
  82c274:	e0bffd17 	ldw	r2,-12(fp)
  82c278:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
  82c27c:	e0bffe17 	ldw	r2,-8(fp)
  82c280:	10c00417 	ldw	r3,16(r2)
  82c284:	e0bffd17 	ldw	r2,-12(fp)
  82c288:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;     /* ??? */
  82c28c:	e0bffe17 	ldw	r2,-8(fp)
  82c290:	10c00117 	ldw	r3,4(r2)
  82c294:	e0bffd17 	ldw	r2,-12(fp)
  82c298:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;    /* ??? */
  82c29c:	e0bffe17 	ldw	r2,-8(fp)
  82c2a0:	10c00217 	ldw	r3,8(r2)
  82c2a4:	e0bffd17 	ldw	r2,-12(fp)
  82c2a8:	10c00515 	stw	r3,20(r2)

   tcp_input(m_in, pkt->net);
  82c2ac:	e0bffe17 	ldw	r2,-8(fp)
  82c2b0:	11400617 	ldw	r5,24(r2)
  82c2b4:	e13ffd17 	ldw	r4,-12(fp)
  82c2b8:	08333a40 	call	8333a4 <tcp_input>

   IN_PROFILER(PF_TCP, PF_EXIT);      /* measure time in TCP */

   return 0;
  82c2bc:	e03fff15 	stw	zero,-4(fp)
  82c2c0:	e0bfff17 	ldw	r2,-4(fp)
}
  82c2c4:	e037883a 	mov	sp,fp
  82c2c8:	dfc00117 	ldw	ra,4(sp)
  82c2cc:	df000017 	ldw	fp,0(sp)
  82c2d0:	dec00204 	addi	sp,sp,8
  82c2d4:	f800283a 	ret

0082c2d8 <ip_output>:
 * RETURNS: 
 */

int
ip_output(struct mbuf * data, struct   ip_socopts * so_optsPack) /* mbuf chain with data to send */
{
  82c2d8:	defff304 	addi	sp,sp,-52
  82c2dc:	dfc00c15 	stw	ra,48(sp)
  82c2e0:	df000b15 	stw	fp,44(sp)
  82c2e4:	df000b04 	addi	fp,sp,44
  82c2e8:	e13ffd15 	stw	r4,-12(fp)
  82c2ec:	e17ffe15 	stw	r5,-8(fp)
    * little copying as possible. Typically the mbufs will be either 
    * 1) a single mbuf with iptcp header info only (e.g.tcp ACK 
    * packet), or 2) iptcp header with data mbuf chained to it, or 3) 
    * #2) with a tiny option data mbuf between header and data. 
    */
   if ((data->m_next))
  82c2f0:	e0bffd17 	ldw	r2,-12(fp)
  82c2f4:	10800617 	ldw	r2,24(r2)
  82c2f8:	1005003a 	cmpeq	r2,r2,zero
  82c2fc:	1001101e 	bne	r2,zero,82c740 <ip_output+0x468>
   {
      m1 = data;
  82c300:	e0bffd17 	ldw	r2,-12(fp)
  82c304:	e0bff915 	stw	r2,-28(fp)
      m2 = data->m_next;
  82c308:	e0bffd17 	ldw	r2,-12(fp)
  82c30c:	10800617 	ldw	r2,24(r2)
  82c310:	e0bff815 	stw	r2,-32(fp)

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
  82c314:	00003406 	br	82c3e8 <ip_output+0x110>
      {
         pkt = m1->pkt;
  82c318:	e0bff917 	ldw	r2,-28(fp)
  82c31c:	10800117 	ldw	r2,4(r2)
  82c320:	e0bffa15 	stw	r2,-24(fp)
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
  82c324:	e0bffa17 	ldw	r2,-24(fp)
  82c328:	10c00117 	ldw	r3,4(r2)
  82c32c:	e0bffa17 	ldw	r2,-24(fp)
  82c330:	10800217 	ldw	r2,8(r2)
  82c334:	1889883a 	add	r4,r3,r2
  82c338:	e0bff917 	ldw	r2,-28(fp)
  82c33c:	10c00317 	ldw	r3,12(r2)
  82c340:	e0bff917 	ldw	r2,-28(fp)
  82c344:	10800217 	ldw	r2,8(r2)
  82c348:	1887883a 	add	r3,r3,r2
  82c34c:	e0bff817 	ldw	r2,-32(fp)
  82c350:	10800217 	ldw	r2,8(r2)
  82c354:	1885883a 	add	r2,r3,r2
  82c358:	1100822e 	bgeu	r2,r4,82c564 <ip_output+0x28c>
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
  82c35c:	e0bff917 	ldw	r2,-28(fp)
  82c360:	10c00317 	ldw	r3,12(r2)
  82c364:	e0bff917 	ldw	r2,-28(fp)
  82c368:	10800217 	ldw	r2,8(r2)
  82c36c:	1887883a 	add	r3,r3,r2
  82c370:	e0bff817 	ldw	r2,-32(fp)
  82c374:	11400317 	ldw	r5,12(r2)
  82c378:	e0bff817 	ldw	r2,-32(fp)
  82c37c:	10800217 	ldw	r2,8(r2)
  82c380:	1809883a 	mov	r4,r3
  82c384:	100d883a 	mov	r6,r2
  82c388:	08073380 	call	807338 <memcpy>
            m1->m_len += m2->m_len;
  82c38c:	e0bff917 	ldw	r2,-28(fp)
  82c390:	10c00217 	ldw	r3,8(r2)
  82c394:	e0bff817 	ldw	r2,-32(fp)
  82c398:	10800217 	ldw	r2,8(r2)
  82c39c:	1887883a 	add	r3,r3,r2
  82c3a0:	e0bff917 	ldw	r2,-28(fp)
  82c3a4:	10c00215 	stw	r3,8(r2)
            m1->m_next = m2->m_next;
  82c3a8:	e0bff817 	ldw	r2,-32(fp)
  82c3ac:	10c00617 	ldw	r3,24(r2)
  82c3b0:	e0bff917 	ldw	r2,-28(fp)
  82c3b4:	10c00615 	stw	r3,24(r2)
            m_free(m2);    /* free this m2.... */
  82c3b8:	e13ff817 	ldw	r4,-32(fp)
  82c3bc:	082b7700 	call	82b770 <m_free>
            m2 = m1->m_next;  /* ...and thread the next one */
  82c3c0:	e0bff917 	ldw	r2,-28(fp)
  82c3c4:	10800617 	ldw	r2,24(r2)
  82c3c8:	e0bff815 	stw	r2,-32(fp)
            tcpstat.tcps_oappends++;
  82c3cc:	00803934 	movhi	r2,228
  82c3d0:	10a90c04 	addi	r2,r2,-23504
  82c3d4:	10803317 	ldw	r2,204(r2)
  82c3d8:	10c00044 	addi	r3,r2,1
  82c3dc:	00803934 	movhi	r2,228
  82c3e0:	10a90c04 	addi	r2,r2,-23504
  82c3e4:	10c03315 	stw	r3,204(r2)
   {
      m1 = data;
      m2 = data->m_next;

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
  82c3e8:	e0bff817 	ldw	r2,-32(fp)
  82c3ec:	1005003a 	cmpeq	r2,r2,zero
  82c3f0:	10005c1e 	bne	r2,zero,82c564 <ip_output+0x28c>
  82c3f4:	e0bff817 	ldw	r2,-32(fp)
  82c3f8:	10800217 	ldw	r2,8(r2)
  82c3fc:	108002b0 	cmpltui	r2,r2,10
  82c400:	103fc51e 	bne	r2,zero,82c318 <ip_output+0x40>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
  82c404:	00005706 	br	82c564 <ip_output+0x28c>
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
  82c408:	e0bff817 	ldw	r2,-32(fp)
  82c40c:	10800317 	ldw	r2,12(r2)
  82c410:	1007883a 	mov	r3,r2
  82c414:	e0bff817 	ldw	r2,-32(fp)
  82c418:	10800117 	ldw	r2,4(r2)
  82c41c:	10800117 	ldw	r2,4(r2)
  82c420:	1885c83a 	sub	r2,r3,r2
  82c424:	e0bff615 	stw	r2,-40(fp)
         if (e < MaxLnh)
  82c428:	00802174 	movhi	r2,133
  82c42c:	1082ff04 	addi	r2,r2,3068
  82c430:	10c00017 	ldw	r3,0(r2)
  82c434:	e0bff617 	ldw	r2,-40(fp)
  82c438:	10c00a0e 	bge	r2,r3,82c464 <ip_output+0x18c>
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
  82c43c:	00802174 	movhi	r2,133
  82c440:	1082ff04 	addi	r2,r2,3068
  82c444:	11400017 	ldw	r5,0(r2)
  82c448:	01002174 	movhi	r4,133
  82c44c:	2136c704 	addi	r4,r4,-9444
  82c450:	e1bff617 	ldw	r6,-40(fp)
  82c454:	08076480 	call	807648 <printf>
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
  82c458:	01002174 	movhi	r4,133
  82c45c:	2136cd04 	addi	r4,r4,-9420
  82c460:	0825a2c0 	call	825a2c <panic>
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
  82c464:	e0bff917 	ldw	r2,-28(fp)
  82c468:	11000217 	ldw	r4,8(r2)
  82c46c:	00802174 	movhi	r2,133
  82c470:	1082ff04 	addi	r2,r2,3068
  82c474:	10c00017 	ldw	r3,0(r2)
  82c478:	e0bff617 	ldw	r2,-40(fp)
  82c47c:	10c5c83a 	sub	r2,r2,r3
  82c480:	20803b2e 	bgeu	r4,r2,82c570 <ip_output+0x298>
  82c484:	e0bff917 	ldw	r2,-28(fp)
  82c488:	10800217 	ldw	r2,8(r2)
  82c48c:	108000cc 	andi	r2,r2,3
  82c490:	1004c03a 	cmpne	r2,r2,zero
  82c494:	1000361e 	bne	r2,zero,82c570 <ip_output+0x298>
  82c498:	e0bff817 	ldw	r2,-32(fp)
  82c49c:	10800317 	ldw	r2,12(r2)
  82c4a0:	1007883a 	mov	r3,r2
  82c4a4:	e0bff817 	ldw	r2,-32(fp)
  82c4a8:	10800117 	ldw	r2,4(r2)
  82c4ac:	10800117 	ldw	r2,4(r2)
  82c4b0:	1885c83a 	sub	r2,r3,r2
  82c4b4:	10800e18 	cmpnei	r2,r2,56
  82c4b8:	10002d1e 	bne	r2,zero,82c570 <ip_output+0x298>
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
  82c4bc:	e0bff817 	ldw	r2,-32(fp)
  82c4c0:	10c00317 	ldw	r3,12(r2)
  82c4c4:	e0bff917 	ldw	r2,-28(fp)
  82c4c8:	10800217 	ldw	r2,8(r2)
  82c4cc:	1887c83a 	sub	r3,r3,r2
  82c4d0:	e0bff917 	ldw	r2,-28(fp)
  82c4d4:	11400317 	ldw	r5,12(r2)
  82c4d8:	e0bff917 	ldw	r2,-28(fp)
  82c4dc:	10800217 	ldw	r2,8(r2)
  82c4e0:	1809883a 	mov	r4,r3
  82c4e4:	100d883a 	mov	r6,r2
  82c4e8:	08073380 	call	807338 <memcpy>
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
  82c4ec:	e0bff817 	ldw	r2,-32(fp)
  82c4f0:	10c00317 	ldw	r3,12(r2)
  82c4f4:	e0bff917 	ldw	r2,-28(fp)
  82c4f8:	10800217 	ldw	r2,8(r2)
  82c4fc:	1887c83a 	sub	r3,r3,r2
  82c500:	e0bff817 	ldw	r2,-32(fp)
  82c504:	10c00315 	stw	r3,12(r2)
            m2->m_len += m1->m_len;
  82c508:	e0bff817 	ldw	r2,-32(fp)
  82c50c:	10c00217 	ldw	r3,8(r2)
  82c510:	e0bff917 	ldw	r2,-28(fp)
  82c514:	10800217 	ldw	r2,8(r2)
  82c518:	1887883a 	add	r3,r3,r2
  82c51c:	e0bff817 	ldw	r2,-32(fp)
  82c520:	10c00215 	stw	r3,8(r2)
            m_free(m1);    /* free head (copied) mbuf */
  82c524:	e13ff917 	ldw	r4,-28(fp)
  82c528:	082b7700 	call	82b770 <m_free>
            data = m1 = m2;   /* move other mbufs up the chain */
  82c52c:	e0bff817 	ldw	r2,-32(fp)
  82c530:	e0bff915 	stw	r2,-28(fp)
  82c534:	e0bff917 	ldw	r2,-28(fp)
  82c538:	e0bffd15 	stw	r2,-12(fp)
            m2 = m2->m_next;  /* loop to while(m2) test */
  82c53c:	e0bff817 	ldw	r2,-32(fp)
  82c540:	10800617 	ldw	r2,24(r2)
  82c544:	e0bff815 	stw	r2,-32(fp)
            tcpstat.tcps_oprepends++;
  82c548:	00803934 	movhi	r2,228
  82c54c:	10a90c04 	addi	r2,r2,-23504
  82c550:	10803217 	ldw	r2,200(r2)
  82c554:	10c00044 	addi	r3,r2,1
  82c558:	00803934 	movhi	r2,228
  82c55c:	10a90c04 	addi	r2,r2,-23504
  82c560:	10c03215 	stw	r3,200(r2)
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
  82c564:	e0bff817 	ldw	r2,-32(fp)
  82c568:	1004c03a 	cmpne	r2,r2,zero
  82c56c:	103fa61e 	bne	r2,zero,82c408 <ip_output+0x130>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      if (m2)  /* If all else fails, brute force copy: */
  82c570:	e0bff817 	ldw	r2,-32(fp)
  82c574:	1005003a 	cmpeq	r2,r2,zero
  82c578:	1000711e 	bne	r2,zero,82c740 <ip_output+0x468>
      {
         total = 0;
  82c57c:	e03ff515 	stw	zero,-44(fp)
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
  82c580:	e0bff917 	ldw	r2,-28(fp)
  82c584:	e0bff715 	stw	r2,-36(fp)
  82c588:	00000806 	br	82c5ac <ip_output+0x2d4>
            total += mtmp->m_len;
  82c58c:	e0bff717 	ldw	r2,-36(fp)
  82c590:	10c00217 	ldw	r3,8(r2)
  82c594:	e0bff517 	ldw	r2,-44(fp)
  82c598:	1885883a 	add	r2,r3,r2
  82c59c:	e0bff515 	stw	r2,-44(fp)
      }

      if (m2)  /* If all else fails, brute force copy: */
      {
         total = 0;
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
  82c5a0:	e0bff717 	ldw	r2,-36(fp)
  82c5a4:	10800617 	ldw	r2,24(r2)
  82c5a8:	e0bff715 	stw	r2,-36(fp)
  82c5ac:	e0bff717 	ldw	r2,-36(fp)
  82c5b0:	1004c03a 	cmpne	r2,r2,zero
  82c5b4:	103ff51e 	bne	r2,zero,82c58c <ip_output+0x2b4>
            total += mtmp->m_len;
         LOCK_NET_RESOURCE(FREEQ_RESID);
  82c5b8:	01000084 	movi	r4,2
  82c5bc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pkt = pk_alloc(total + HDRSLEN);
  82c5c0:	e0bff517 	ldw	r2,-44(fp)
  82c5c4:	10800e04 	addi	r2,r2,56
  82c5c8:	1009883a 	mov	r4,r2
  82c5cc:	0829b840 	call	829b84 <pk_alloc>
  82c5d0:	e0bffa15 	stw	r2,-24(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82c5d4:	01000084 	movi	r4,2
  82c5d8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         if (!pkt)
  82c5dc:	e0bffa17 	ldw	r2,-24(fp)
  82c5e0:	1004c03a 	cmpne	r2,r2,zero
  82c5e4:	1000031e 	bne	r2,zero,82c5f4 <ip_output+0x31c>
            return ENOBUFS;
  82c5e8:	00801a44 	movi	r2,105
  82c5ec:	e0bfff15 	stw	r2,-4(fp)
  82c5f0:	0000b106 	br	82c8b8 <ip_output+0x5e0>
         pkt->nb_prot = pkt->nb_buff + MaxLnh;
  82c5f4:	e0bffa17 	ldw	r2,-24(fp)
  82c5f8:	10c00117 	ldw	r3,4(r2)
  82c5fc:	00802174 	movhi	r2,133
  82c600:	1082ff04 	addi	r2,r2,3068
  82c604:	10800017 	ldw	r2,0(r2)
  82c608:	1887883a 	add	r3,r3,r2
  82c60c:	e0bffa17 	ldw	r2,-24(fp)
  82c610:	10c00315 	stw	r3,12(r2)

         mtmp = m1;
  82c614:	e0bff917 	ldw	r2,-28(fp)
  82c618:	e0bff715 	stw	r2,-36(fp)
         while (mtmp)
  82c61c:	00002806 	br	82c6c0 <ip_output+0x3e8>
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
  82c620:	e0bffa17 	ldw	r2,-24(fp)
  82c624:	10c00317 	ldw	r3,12(r2)
  82c628:	e0bff717 	ldw	r2,-36(fp)
  82c62c:	11400317 	ldw	r5,12(r2)
  82c630:	e0bff717 	ldw	r2,-36(fp)
  82c634:	10800217 	ldw	r2,8(r2)
  82c638:	1809883a 	mov	r4,r3
  82c63c:	100d883a 	mov	r6,r2
  82c640:	08073380 	call	807338 <memcpy>
            pkt->nb_prot += mtmp->m_len;
  82c644:	e0bffa17 	ldw	r2,-24(fp)
  82c648:	10c00317 	ldw	r3,12(r2)
  82c64c:	e0bff717 	ldw	r2,-36(fp)
  82c650:	10800217 	ldw	r2,8(r2)
  82c654:	1887883a 	add	r3,r3,r2
  82c658:	e0bffa17 	ldw	r2,-24(fp)
  82c65c:	10c00315 	stw	r3,12(r2)
            pkt->nb_plen += mtmp->m_len;
  82c660:	e0bffa17 	ldw	r2,-24(fp)
  82c664:	10c00417 	ldw	r3,16(r2)
  82c668:	e0bff717 	ldw	r2,-36(fp)
  82c66c:	10800217 	ldw	r2,8(r2)
  82c670:	1887883a 	add	r3,r3,r2
  82c674:	e0bffa17 	ldw	r2,-24(fp)
  82c678:	10c00415 	stw	r3,16(r2)
            m2 = mtmp;
  82c67c:	e0bff717 	ldw	r2,-36(fp)
  82c680:	e0bff815 	stw	r2,-32(fp)
            mtmp = mtmp->m_next;
  82c684:	e0bff717 	ldw	r2,-36(fp)
  82c688:	10800617 	ldw	r2,24(r2)
  82c68c:	e0bff715 	stw	r2,-36(fp)
            if (m2 != data)   /* save original head */
  82c690:	e0fff817 	ldw	r3,-32(fp)
  82c694:	e0bffd17 	ldw	r2,-12(fp)
  82c698:	18800226 	beq	r3,r2,82c6a4 <ip_output+0x3cc>
               m_free(m2);
  82c69c:	e13ff817 	ldw	r4,-32(fp)
  82c6a0:	082b7700 	call	82b770 <m_free>
            tcpstat.tcps_ocopies++;
  82c6a4:	00803934 	movhi	r2,228
  82c6a8:	10a90c04 	addi	r2,r2,-23504
  82c6ac:	10803417 	ldw	r2,208(r2)
  82c6b0:	10c00044 	addi	r3,r2,1
  82c6b4:	00803934 	movhi	r2,228
  82c6b8:	10a90c04 	addi	r2,r2,-23504
  82c6bc:	10c03415 	stw	r3,208(r2)
         if (!pkt)
            return ENOBUFS;
         pkt->nb_prot = pkt->nb_buff + MaxLnh;

         mtmp = m1;
         while (mtmp)
  82c6c0:	e0bff717 	ldw	r2,-36(fp)
  82c6c4:	1004c03a 	cmpne	r2,r2,zero
  82c6c8:	103fd51e 	bne	r2,zero,82c620 <ip_output+0x348>
            mtmp = mtmp->m_next;
            if (m2 != data)   /* save original head */
               m_free(m2);
            tcpstat.tcps_ocopies++;
         }
         pkt->nb_prot -= total;     /* fix data pointer */
  82c6cc:	e0bffa17 	ldw	r2,-24(fp)
  82c6d0:	10c00317 	ldw	r3,12(r2)
  82c6d4:	e0bff517 	ldw	r2,-44(fp)
  82c6d8:	1887c83a 	sub	r3,r3,r2
  82c6dc:	e0bffa17 	ldw	r2,-24(fp)
  82c6e0:	10c00315 	stw	r3,12(r2)

         /* release the original mbufs packet install the new one */
         LOCK_NET_RESOURCE(FREEQ_RESID);
  82c6e4:	01000084 	movi	r4,2
  82c6e8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(data->pkt);
  82c6ec:	e0bffd17 	ldw	r2,-12(fp)
  82c6f0:	11000117 	ldw	r4,4(r2)
  82c6f4:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82c6f8:	01000084 	movi	r4,2
  82c6fc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         data->pkt = pkt;
  82c700:	e0fffd17 	ldw	r3,-12(fp)
  82c704:	e0bffa17 	ldw	r2,-24(fp)
  82c708:	18800115 	stw	r2,4(r3)
         data->m_len = pkt->nb_plen;
  82c70c:	e0bffa17 	ldw	r2,-24(fp)
  82c710:	10c00417 	ldw	r3,16(r2)
  82c714:	e0bffd17 	ldw	r2,-12(fp)
  82c718:	10c00215 	stw	r3,8(r2)
         data->m_next = NULL;
  82c71c:	e0bffd17 	ldw	r2,-12(fp)
  82c720:	10000615 	stw	zero,24(r2)
         data->m_data = pkt->nb_prot;
  82c724:	e0bffa17 	ldw	r2,-24(fp)
  82c728:	10c00317 	ldw	r3,12(r2)
  82c72c:	e0bffd17 	ldw	r2,-12(fp)
  82c730:	10c00315 	stw	r3,12(r2)
         data->m_len = total;
  82c734:	e0fff517 	ldw	r3,-44(fp)
  82c738:	e0bffd17 	ldw	r2,-12(fp)
  82c73c:	10c00215 	stw	r3,8(r2)
      }
   }

   if ((data->m_data < (data->pkt->nb_buff + MaxLnh)))
  82c740:	e0bffd17 	ldw	r2,-12(fp)
  82c744:	11000317 	ldw	r4,12(r2)
  82c748:	e0bffd17 	ldw	r2,-12(fp)
  82c74c:	10800117 	ldw	r2,4(r2)
  82c750:	10c00117 	ldw	r3,4(r2)
  82c754:	00802174 	movhi	r2,133
  82c758:	1082ff04 	addi	r2,r2,3068
  82c75c:	10800017 	ldw	r2,0(r2)
  82c760:	1885883a 	add	r2,r3,r2
  82c764:	2080032e 	bgeu	r4,r2,82c774 <ip_output+0x49c>
      panic("ip_output: overflow");
  82c768:	01002174 	movhi	r4,133
  82c76c:	2136d204 	addi	r4,r4,-9400
  82c770:	0825a2c0 	call	825a2c <panic>

   pkt = data->pkt;
  82c774:	e0bffd17 	ldw	r2,-12(fp)
  82c778:	10800117 	ldw	r2,4(r2)
  82c77c:	e0bffa15 	stw	r2,-24(fp)

   /* do we have options? */
   if (so_optsPack)
  82c780:	e0bffe17 	ldw	r2,-8(fp)
  82c784:	1005003a 	cmpeq	r2,r2,zero
  82c788:	1000031e 	bne	r2,zero,82c798 <ip_output+0x4c0>
	   pkt->soxopts = so_optsPack;   /* yup */
  82c78c:	e0fffa17 	ldw	r3,-24(fp)
  82c790:	e0bffe17 	ldw	r2,-8(fp)
  82c794:	18800c15 	stw	r2,48(r3)
      panic("ip_output: no so_optsPack for the IPv6 scope");     
   }
#endif

   /* fill in dest host for IP layer */
   bip = (struct ip *)data->m_data;
  82c798:	e0bffd17 	ldw	r2,-12(fp)
  82c79c:	10800317 	ldw	r2,12(r2)
  82c7a0:	e0bffc15 	stw	r2,-16(fp)
   pkt->fhost = bip->ip_dest;
  82c7a4:	e0bffc17 	ldw	r2,-16(fp)
  82c7a8:	10c00417 	ldw	r3,16(r2)
  82c7ac:	e0bffa17 	ldw	r2,-24(fp)
  82c7b0:	10c00715 	stw	r3,28(r2)

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
  82c7b4:	e0fffc17 	ldw	r3,-16(fp)
  82c7b8:	00801144 	movi	r2,69
  82c7bc:	18800005 	stb	r2,0(r3)
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
  82c7c0:	e0bffc17 	ldw	r2,-16(fp)
  82c7c4:	1080008b 	ldhu	r2,2(r2)
  82c7c8:	10bfffcc 	andi	r2,r2,65535
  82c7cc:	1004d23a 	srli	r2,r2,8
  82c7d0:	10803fcc 	andi	r2,r2,255
  82c7d4:	1009883a 	mov	r4,r2
  82c7d8:	e0bffc17 	ldw	r2,-16(fp)
  82c7dc:	1080008b 	ldhu	r2,2(r2)
  82c7e0:	10bfffcc 	andi	r2,r2,65535
  82c7e4:	1004923a 	slli	r2,r2,8
  82c7e8:	1007883a 	mov	r3,r2
  82c7ec:	00bfc004 	movi	r2,-256
  82c7f0:	1884703a 	and	r2,r3,r2
  82c7f4:	2084b03a 	or	r2,r4,r2
  82c7f8:	1007883a 	mov	r3,r2
  82c7fc:	e0bffc17 	ldw	r2,-16(fp)
  82c800:	10c0008d 	sth	r3,2(r2)
   tcpp = (struct tcphdr *)ip_data(bip);
  82c804:	e0bffc17 	ldw	r2,-16(fp)
  82c808:	10800003 	ldbu	r2,0(r2)
  82c80c:	10803fcc 	andi	r2,r2,255
  82c810:	108003cc 	andi	r2,r2,15
  82c814:	1085883a 	add	r2,r2,r2
  82c818:	1085883a 	add	r2,r2,r2
  82c81c:	1007883a 	mov	r3,r2
  82c820:	e0bffc17 	ldw	r2,-16(fp)
  82c824:	1885883a 	add	r2,r3,r2
  82c828:	e0bffb15 	stw	r2,-20(fp)
#ifdef CSUM_DEMO
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);
  82c82c:	e13ffc17 	ldw	r4,-16(fp)
  82c830:	08469300 	call	846930 <tcp_cksum>
  82c834:	1007883a 	mov	r3,r2
  82c838:	e0bffb17 	ldw	r2,-20(fp)
  82c83c:	10c0040d 	sth	r3,16(r2)

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
  82c840:	e0bffc17 	ldw	r2,-16(fp)
  82c844:	10800504 	addi	r2,r2,20
  82c848:	1007883a 	mov	r3,r2
  82c84c:	e0bffa17 	ldw	r2,-24(fp)
  82c850:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen = data->m_len - sizeof(struct ip);
  82c854:	e0bffd17 	ldw	r2,-12(fp)
  82c858:	10800217 	ldw	r2,8(r2)
  82c85c:	10fffb04 	addi	r3,r2,-20
  82c860:	e0bffa17 	ldw	r2,-24(fp)
  82c864:	10c00415 	stw	r3,16(r2)

   e = ip_write(IPPROTO_TCP, pkt);
  82c868:	01000184 	movi	r4,6
  82c86c:	e17ffa17 	ldw	r5,-24(fp)
  82c870:	083dc8c0 	call	83dc8c <ip_write>
  82c874:	e0bff615 	stw	r2,-40(fp)

   /* ip_write() is now responsable for data->pkt, so... */
   data->pkt = NULL;
  82c878:	e0bffd17 	ldw	r2,-12(fp)
  82c87c:	10000115 	stw	zero,4(r2)
   m_freem(data);
  82c880:	e13ffd17 	ldw	r4,-12(fp)
  82c884:	082b8a40 	call	82b8a4 <m_freem>

   if (e < 0)
  82c888:	e0bff617 	ldw	r2,-40(fp)
  82c88c:	1004403a 	cmpge	r2,r2,zero
  82c890:	1000081e 	bne	r2,zero,82c8b4 <ip_output+0x5dc>
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
  82c894:	e0bff617 	ldw	r2,-40(fp)
  82c898:	10bffa98 	cmpnei	r2,r2,-22
  82c89c:	1000021e 	bne	r2,zero,82c8a8 <ip_output+0x5d0>
         return 0;
  82c8a0:	e03fff15 	stw	zero,-4(fp)
  82c8a4:	00000406 	br	82c8b8 <ip_output+0x5e0>
      return e;
  82c8a8:	e0bff617 	ldw	r2,-40(fp)
  82c8ac:	e0bfff15 	stw	r2,-4(fp)
  82c8b0:	00000106 	br	82c8b8 <ip_output+0x5e0>
   }
   else
      return 0;
  82c8b4:	e03fff15 	stw	zero,-4(fp)
  82c8b8:	e0bfff17 	ldw	r2,-4(fp)
}
  82c8bc:	e037883a 	mov	sp,fp
  82c8c0:	dfc00117 	ldw	ra,4(sp)
  82c8c4:	df000017 	ldw	fp,0(sp)
  82c8c8:	dec00204 	addi	sp,sp,8
  82c8cc:	f800283a 	ret

0082c8d0 <in_broadcast>:
 * RETURNS: TRUE if broadcast, else FALSE
 */

int
in_broadcast(u_long ipaddr)   /* passed in net endian */
{
  82c8d0:	defffd04 	addi	sp,sp,-12
  82c8d4:	df000215 	stw	fp,8(sp)
  82c8d8:	df000204 	addi	fp,sp,8
  82c8dc:	e13ffe15 	stw	r4,-8(fp)
   if (ipaddr == 0xffffffff)
  82c8e0:	e0bffe17 	ldw	r2,-8(fp)
  82c8e4:	10bfffd8 	cmpnei	r2,r2,-1
  82c8e8:	1000031e 	bne	r2,zero,82c8f8 <in_broadcast+0x28>
      return TRUE;
  82c8ec:	00800044 	movi	r2,1
  82c8f0:	e0bfff15 	stw	r2,-4(fp)
  82c8f4:	00000106 	br	82c8fc <in_broadcast+0x2c>

   return FALSE;
  82c8f8:	e03fff15 	stw	zero,-4(fp)
  82c8fc:	e0bfff17 	ldw	r2,-4(fp)
}
  82c900:	e037883a 	mov	sp,fp
  82c904:	df000017 	ldw	fp,0(sp)
  82c908:	dec00104 	addi	sp,sp,4
  82c90c:	f800283a 	ret

0082c910 <np_stripoptions>:
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
  82c910:	defffb04 	addi	sp,sp,-20
  82c914:	dfc00415 	stw	ra,16(sp)
  82c918:	df000315 	stw	fp,12(sp)
  82c91c:	df000304 	addi	fp,sp,12
  82c920:	e13ffe15 	stw	r4,-8(fp)
  82c924:	e17fff15 	stw	r5,-4(fp)
   int   ihlen;

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;
  82c928:	e0bffe17 	ldw	r2,-8(fp)
  82c92c:	10800003 	ldbu	r2,0(r2)
  82c930:	10803fcc 	andi	r2,r2,255
  82c934:	108003cc 	andi	r2,r2,15
  82c938:	1085883a 	add	r2,r2,r2
  82c93c:	1085883a 	add	r2,r2,r2
  82c940:	e0bffd15 	stw	r2,-12(fp)

   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
  82c944:	e0bffd17 	ldw	r2,-12(fp)
  82c948:	10800550 	cmplti	r2,r2,21
  82c94c:	1000251e 	bne	r2,zero,82c9e4 <np_stripoptions+0xd4>
      return;

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;
  82c950:	e0bffd17 	ldw	r2,-12(fp)
  82c954:	10bffb04 	addi	r2,r2,-20
  82c958:	e0bffd15 	stw	r2,-12(fp)

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;
  82c95c:	e0bffe17 	ldw	r2,-8(fp)
  82c960:	10c0008b 	ldhu	r3,2(r2)
  82c964:	e0bffd17 	ldw	r2,-12(fp)
  82c968:	1885c83a 	sub	r2,r3,r2
  82c96c:	1007883a 	mov	r3,r2
  82c970:	e0bffe17 	ldw	r2,-8(fp)
  82c974:	10c0008d 	sth	r3,2(r2)

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
  82c978:	e0bffe17 	ldw	r2,-8(fp)
  82c97c:	10800003 	ldbu	r2,0(r2)
  82c980:	1007883a 	mov	r3,r2
  82c984:	00bffc04 	movi	r2,-16
  82c988:	1884703a 	and	r2,r3,r2
  82c98c:	10800154 	ori	r2,r2,5
  82c990:	1007883a 	mov	r3,r2
  82c994:	e0bffe17 	ldw	r2,-8(fp)
  82c998:	10c00005 	stb	r3,0(r2)

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
  82c99c:	e0fffe17 	ldw	r3,-8(fp)
  82c9a0:	e0bffd17 	ldw	r2,-12(fp)
  82c9a4:	1889883a 	add	r4,r3,r2
  82c9a8:	e17ffe17 	ldw	r5,-8(fp)
  82c9ac:	01800504 	movi	r6,20
  82c9b0:	08073d80 	call	8073d8 <memmove>
   m->m_len -= ihlen;
  82c9b4:	e0bfff17 	ldw	r2,-4(fp)
  82c9b8:	10c00217 	ldw	r3,8(r2)
  82c9bc:	e0bffd17 	ldw	r2,-12(fp)
  82c9c0:	1887c83a 	sub	r3,r3,r2
  82c9c4:	e0bfff17 	ldw	r2,-4(fp)
  82c9c8:	10c00215 	stw	r3,8(r2)
   m->m_data += ihlen;
  82c9cc:	e0bfff17 	ldw	r2,-4(fp)
  82c9d0:	10c00317 	ldw	r3,12(r2)
  82c9d4:	e0bffd17 	ldw	r2,-12(fp)
  82c9d8:	1887883a 	add	r3,r3,r2
  82c9dc:	e0bfff17 	ldw	r2,-4(fp)
  82c9e0:	10c00315 	stw	r3,12(r2)
}
  82c9e4:	e037883a 	mov	sp,fp
  82c9e8:	dfc00117 	ldw	ra,4(sp)
  82c9ec:	df000017 	ldw	fp,0(sp)
  82c9f0:	dec00204 	addi	sp,sp,8
  82c9f4:	f800283a 	ret

0082c9f8 <so_icmpdu>:
 * RETURNS: 
 */

void
so_icmpdu(PACKET p, struct destun * pdp)
{
  82c9f8:	defff304 	addi	sp,sp,-52
  82c9fc:	dfc00c15 	stw	ra,48(sp)
  82ca00:	df000b15 	stw	fp,44(sp)
  82ca04:	df000b04 	addi	fp,sp,44
  82ca08:	e13ffe15 	stw	r4,-8(fp)
  82ca0c:	e17fff15 	stw	r5,-4(fp)
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
  82ca10:	e0bfff17 	ldw	r2,-4(fp)
  82ca14:	10800617 	ldw	r2,24(r2)
  82ca18:	1004d63a 	srli	r2,r2,24
  82ca1c:	10c03fcc 	andi	r3,r2,255
  82ca20:	e0bfff17 	ldw	r2,-4(fp)
  82ca24:	10800617 	ldw	r2,24(r2)
  82ca28:	1004d23a 	srli	r2,r2,8
  82ca2c:	10bfc00c 	andi	r2,r2,65280
  82ca30:	1886b03a 	or	r3,r3,r2
  82ca34:	e0bfff17 	ldw	r2,-4(fp)
  82ca38:	10800617 	ldw	r2,24(r2)
  82ca3c:	10bfc00c 	andi	r2,r2,65280
  82ca40:	1004923a 	slli	r2,r2,8
  82ca44:	1886b03a 	or	r3,r3,r2
  82ca48:	e0bfff17 	ldw	r2,-4(fp)
  82ca4c:	10800617 	ldw	r2,24(r2)
  82ca50:	10803fcc 	andi	r2,r2,255
  82ca54:	1004963a 	slli	r2,r2,24
  82ca58:	1884b03a 	or	r2,r3,r2
  82ca5c:	e0bffc15 	stw	r2,-16(fp)
   lhost = htonl(pdp->dip.ip_src);
  82ca60:	e0bfff17 	ldw	r2,-4(fp)
  82ca64:	10800517 	ldw	r2,20(r2)
  82ca68:	1004d63a 	srli	r2,r2,24
  82ca6c:	10c03fcc 	andi	r3,r2,255
  82ca70:	e0bfff17 	ldw	r2,-4(fp)
  82ca74:	10800517 	ldw	r2,20(r2)
  82ca78:	1004d23a 	srli	r2,r2,8
  82ca7c:	10bfc00c 	andi	r2,r2,65280
  82ca80:	1886b03a 	or	r3,r3,r2
  82ca84:	e0bfff17 	ldw	r2,-4(fp)
  82ca88:	10800517 	ldw	r2,20(r2)
  82ca8c:	10bfc00c 	andi	r2,r2,65280
  82ca90:	1004923a 	slli	r2,r2,8
  82ca94:	1886b03a 	or	r3,r3,r2
  82ca98:	e0bfff17 	ldw	r2,-4(fp)
  82ca9c:	10800517 	ldw	r2,20(r2)
  82caa0:	10803fcc 	andi	r2,r2,255
  82caa4:	1004963a 	slli	r2,r2,24
  82caa8:	1884b03a 	or	r2,r3,r2
  82caac:	e0bffd15 	stw	r2,-12(fp)
   lport = htons(*(unshort*)(&pdp->ddata[0]));
  82cab0:	e0bfff17 	ldw	r2,-4(fp)
  82cab4:	10800704 	addi	r2,r2,28
  82cab8:	1080000b 	ldhu	r2,0(r2)
  82cabc:	10bfffcc 	andi	r2,r2,65535
  82cac0:	1004d23a 	srli	r2,r2,8
  82cac4:	10803fcc 	andi	r2,r2,255
  82cac8:	1009883a 	mov	r4,r2
  82cacc:	e0bfff17 	ldw	r2,-4(fp)
  82cad0:	10800704 	addi	r2,r2,28
  82cad4:	1080000b 	ldhu	r2,0(r2)
  82cad8:	10bfffcc 	andi	r2,r2,65535
  82cadc:	1004923a 	slli	r2,r2,8
  82cae0:	1007883a 	mov	r3,r2
  82cae4:	00bfc004 	movi	r2,-256
  82cae8:	1884703a 	and	r2,r3,r2
  82caec:	2084b03a 	or	r2,r4,r2
  82caf0:	e0bffb0d 	sth	r2,-20(fp)
   fport = htons(*(unshort*)(&pdp->ddata[2]));
  82caf4:	e0bfff17 	ldw	r2,-4(fp)
  82caf8:	10800704 	addi	r2,r2,28
  82cafc:	10800084 	addi	r2,r2,2
  82cb00:	1080000b 	ldhu	r2,0(r2)
  82cb04:	10bfffcc 	andi	r2,r2,65535
  82cb08:	1004d23a 	srli	r2,r2,8
  82cb0c:	10803fcc 	andi	r2,r2,255
  82cb10:	1009883a 	mov	r4,r2
  82cb14:	e0bfff17 	ldw	r2,-4(fp)
  82cb18:	10800704 	addi	r2,r2,28
  82cb1c:	10800084 	addi	r2,r2,2
  82cb20:	1080000b 	ldhu	r2,0(r2)
  82cb24:	10bfffcc 	andi	r2,r2,65535
  82cb28:	1004923a 	slli	r2,r2,8
  82cb2c:	1007883a 	mov	r3,r2
  82cb30:	00bfc004 	movi	r2,-256
  82cb34:	1884703a 	and	r2,r3,r2
  82cb38:	2084b03a 	or	r2,r4,r2
  82cb3c:	e0bffb8d 	sth	r2,-18(fp)
#ifndef IP_PMTU
   /* if it's a datagram-too-big message, ignore it -- As the
    * build isn't using PMTU Discovery this packet is most 
    * probably a Denial of Service Attack.
    */
    if(pdp->dcode == DSTFRAG)
  82cb40:	e0bfff17 	ldw	r2,-4(fp)
  82cb44:	10800043 	ldbu	r2,1(r2)
  82cb48:	10803fcc 	andi	r2,r2,255
  82cb4c:	1080201c 	xori	r2,r2,128
  82cb50:	10bfe004 	addi	r2,r2,-128
  82cb54:	10800120 	cmpeqi	r2,r2,4
  82cb58:	1000721e 	bne	r2,zero,82cd24 <so_icmpdu+0x32c>
       goto done;
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
  82cb5c:	e0bfff17 	ldw	r2,-4(fp)
  82cb60:	10800443 	ldbu	r2,17(r2)
  82cb64:	10803fcc 	andi	r2,r2,255
  82cb68:	10800198 	cmpnei	r2,r2,6
  82cb6c:	1000241e 	bne	r2,zero,82cc00 <so_icmpdu+0x208>
   {
      /* find associated data structs and socket */
      inp = in_pcblookup(&tcb, fhost, fport, lhost, lport, INPLOOKUP_WILDCARD);
  82cb70:	e1bffb8b 	ldhu	r6,-18(fp)
  82cb74:	e0bffb0b 	ldhu	r2,-20(fp)
  82cb78:	d8800015 	stw	r2,0(sp)
  82cb7c:	00800044 	movi	r2,1
  82cb80:	d8800115 	stw	r2,4(sp)
  82cb84:	01003934 	movhi	r4,228
  82cb88:	21290104 	addi	r4,r4,-23548
  82cb8c:	e17ffc17 	ldw	r5,-16(fp)
  82cb90:	e1fffd17 	ldw	r7,-12(fp)
  82cb94:	08471a00 	call	8471a0 <in_pcblookup>
  82cb98:	e0bffa15 	stw	r2,-24(fp)
      if (inp == 0)
  82cb9c:	e0bffa17 	ldw	r2,-24(fp)
  82cba0:	1005003a 	cmpeq	r2,r2,zero
  82cba4:	10005f1e 	bne	r2,zero,82cd24 <so_icmpdu+0x32c>
         goto done;
      so = inp->inp_socket;
  82cba8:	e0bffa17 	ldw	r2,-24(fp)
  82cbac:	10800817 	ldw	r2,32(r2)
  82cbb0:	e0bff915 	stw	r2,-28(fp)
      if (so == 0)
  82cbb4:	e0bff917 	ldw	r2,-28(fp)
  82cbb8:	1005003a 	cmpeq	r2,r2,zero
  82cbbc:	1000591e 	bne	r2,zero,82cd24 <so_icmpdu+0x32c>
         goto done;
      tp = intotcpcb(inp);
  82cbc0:	e0bffa17 	ldw	r2,-24(fp)
  82cbc4:	10800917 	ldw	r2,36(r2)
  82cbc8:	e0bff815 	stw	r2,-32(fp)
      if (tp)
  82cbcc:	e0bff817 	ldw	r2,-32(fp)
  82cbd0:	1005003a 	cmpeq	r2,r2,zero
  82cbd4:	1000061e 	bne	r2,zero,82cbf0 <so_icmpdu+0x1f8>
      {
         if (tp->t_state <= TCPS_LISTEN)
  82cbd8:	e0bff817 	ldw	r2,-32(fp)
  82cbdc:	10800217 	ldw	r2,8(r2)
  82cbe0:	10800090 	cmplti	r2,r2,2
  82cbe4:	10004f1e 	bne	r2,zero,82cd24 <so_icmpdu+0x32c>
               goto done;
        }
   }
#endif

         tcp_close(tp);
  82cbe8:	e13ff817 	ldw	r4,-32(fp)
  82cbec:	0837aa00 	call	837aa0 <tcp_close>
      }
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
  82cbf0:	e0fff917 	ldw	r3,-28(fp)
  82cbf4:	00801bc4 	movi	r2,111
  82cbf8:	18800615 	stw	r2,24(r3)
  82cbfc:	00004906 	br	82cd24 <so_icmpdu+0x32c>
   }   
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
  82cc00:	e0bfff17 	ldw	r2,-4(fp)
  82cc04:	10800443 	ldbu	r2,17(r2)
  82cc08:	10803fcc 	andi	r2,r2,255
  82cc0c:	10800458 	cmpnei	r2,r2,17
  82cc10:	1000441e 	bne	r2,zero,82cd24 <so_icmpdu+0x32c>
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
  82cc14:	00802174 	movhi	r2,133
  82cc18:	10831a04 	addi	r2,r2,3176
  82cc1c:	10800017 	ldw	r2,0(r2)
  82cc20:	e0bff715 	stw	r2,-36(fp)
  82cc24:	00002406 	br	82ccb8 <so_icmpdu+0x2c0>
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
  82cc28:	e0bff717 	ldw	r2,-36(fp)
  82cc2c:	1080020b 	ldhu	r2,8(r2)
  82cc30:	10ffffcc 	andi	r3,r2,65535
  82cc34:	e0bffb8b 	ldhu	r2,-18(fp)
  82cc38:	18800526 	beq	r3,r2,82cc50 <so_icmpdu+0x258>
  82cc3c:	e0bff717 	ldw	r2,-36(fp)
  82cc40:	1080020b 	ldhu	r2,8(r2)
  82cc44:	10bfffcc 	andi	r2,r2,65535
  82cc48:	1004c03a 	cmpne	r2,r2,zero
  82cc4c:	1000171e 	bne	r2,zero,82ccac <so_icmpdu+0x2b4>
  82cc50:	e0bff717 	ldw	r2,-36(fp)
  82cc54:	11000417 	ldw	r4,16(r2)
  82cc58:	e0bffc17 	ldw	r2,-16(fp)
  82cc5c:	1004d63a 	srli	r2,r2,24
  82cc60:	10c03fcc 	andi	r3,r2,255
  82cc64:	e0bffc17 	ldw	r2,-16(fp)
  82cc68:	1004d23a 	srli	r2,r2,8
  82cc6c:	10bfc00c 	andi	r2,r2,65280
  82cc70:	1886b03a 	or	r3,r3,r2
  82cc74:	e0bffc17 	ldw	r2,-16(fp)
  82cc78:	10bfc00c 	andi	r2,r2,65280
  82cc7c:	1004923a 	slli	r2,r2,8
  82cc80:	1886b03a 	or	r3,r3,r2
  82cc84:	e0bffc17 	ldw	r2,-16(fp)
  82cc88:	10803fcc 	andi	r2,r2,255
  82cc8c:	1004963a 	slli	r2,r2,24
  82cc90:	1884b03a 	or	r2,r3,r2
  82cc94:	2080051e 	bne	r4,r2,82ccac <so_icmpdu+0x2b4>
  82cc98:	e0bff717 	ldw	r2,-36(fp)
  82cc9c:	1080018b 	ldhu	r2,6(r2)
  82cca0:	10ffffcc 	andi	r3,r2,65535
  82cca4:	e0bffb0b 	ldhu	r2,-20(fp)
  82cca8:	18800626 	beq	r3,r2,82ccc4 <so_icmpdu+0x2cc>
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
  82ccac:	e0bff717 	ldw	r2,-36(fp)
  82ccb0:	10800017 	ldw	r2,0(r2)
  82ccb4:	e0bff715 	stw	r2,-36(fp)
  82ccb8:	e0bff717 	ldw	r2,-36(fp)
  82ccbc:	1004c03a 	cmpne	r2,r2,zero
  82ccc0:	103fd91e 	bne	r2,zero,82cc28 <so_icmpdu+0x230>
             (tmp->u_fhost == htonl(fhost)) &&
             (tmp->u_lport == lport))
         {
            break;   /* found our UDP table entry */
         }
      if (!tmp) 
  82ccc4:	e0bff717 	ldw	r2,-36(fp)
  82ccc8:	1005003a 	cmpeq	r2,r2,zero
  82cccc:	1000151e 	bne	r2,zero,82cd24 <so_icmpdu+0x32c>
         goto done;
      so = (struct socket *)tmp->u_data;
  82ccd0:	e0bff717 	ldw	r2,-36(fp)
  82ccd4:	10800617 	ldw	r2,24(r2)
  82ccd8:	e0bff915 	stw	r2,-28(fp)
      /* May be non-socket (lightweight) UDP connection. */
      if (so->so_type != SOCK_DGRAM)
  82ccdc:	e0bff917 	ldw	r2,-28(fp)
  82cce0:	10800983 	ldbu	r2,38(r2)
  82cce4:	10803fcc 	andi	r2,r2,255
  82cce8:	1080201c 	xori	r2,r2,128
  82ccec:	10bfe004 	addi	r2,r2,-128
  82ccf0:	10800098 	cmpnei	r2,r2,2
  82ccf4:	10000b1e 	bne	r2,zero,82cd24 <so_icmpdu+0x32c>
         goto done;
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
  82ccf8:	e0fff917 	ldw	r3,-28(fp)
  82ccfc:	00801bc4 	movi	r2,111
  82cd00:	18800615 	stw	r2,24(r3)
      /* do a select() notify on socket here */
      sorwakeup(so);
  82cd04:	e0bff917 	ldw	r2,-28(fp)
  82cd08:	11400a04 	addi	r5,r2,40
  82cd0c:	e13ff917 	ldw	r4,-28(fp)
  82cd10:	0831b480 	call	831b48 <sbwakeup>
      sowwakeup(so);
  82cd14:	e0bff917 	ldw	r2,-28(fp)
  82cd18:	11401204 	addi	r5,r2,72
  82cd1c:	e13ff917 	ldw	r4,-28(fp)
  82cd20:	0831b480 	call	831b48 <sbwakeup>
   if (pdp->dcode == DSTFRAG)
      pmtucache_set(pdp->dip.ip_dest, htons(pdp->dno2));
#endif   /* IP_PMTU */

done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
  82cd24:	01000084 	movi	r4,2
  82cd28:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p); /* done with original packet */
  82cd2c:	e13ffe17 	ldw	r4,-8(fp)
  82cd30:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  82cd34:	01000084 	movi	r4,2
  82cd38:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return;
}
  82cd3c:	e037883a 	mov	sp,fp
  82cd40:	dfc00117 	ldw	ra,4(sp)
  82cd44:	df000017 	ldw	fp,0(sp)
  82cd48:	dec00204 	addi	sp,sp,8
  82cd4c:	f800283a 	ret

0082cd50 <tcp_tick>:
unsigned long nextslow = 0L;     /* next slow tcp timer time */
static int in_tcptick = 0;       /* reentry gaurd */

void
tcp_tick()
{
  82cd50:	defffe04 	addi	sp,sp,-8
  82cd54:	dfc00115 	stw	ra,4(sp)
  82cd58:	df000015 	stw	fp,0(sp)
  82cd5c:	d839883a 	mov	fp,sp
   /* guard against re-entry */
   if (in_tcptick)
  82cd60:	d0a0b517 	ldw	r2,-32044(gp)
  82cd64:	1004c03a 	cmpne	r2,r2,zero
  82cd68:	1000151e 	bne	r2,zero,82cdc0 <tcp_tick+0x70>
      return;
   in_tcptick++;
  82cd6c:	d0a0b517 	ldw	r2,-32044(gp)
  82cd70:	10800044 	addi	r2,r2,1
  82cd74:	d0a0b515 	stw	r2,-32044(gp)

   LOCK_NET_RESOURCE(NET_RESID);
  82cd78:	0009883a 	mov	r4,zero
  82cd7c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   if (cticks >= nextslow) /* time to do it again */
  82cd80:	00802174 	movhi	r2,133
  82cd84:	10832604 	addi	r2,r2,3224
  82cd88:	10c00017 	ldw	r3,0(r2)
  82cd8c:	d0a0b417 	ldw	r2,-32048(gp)
  82cd90:	18800636 	bltu	r3,r2,82cdac <tcp_tick+0x5c>
   {
      tcp_slowtimo();      /* call routine in BSD tcp_timr.c */
  82cd94:	0837ccc0 	call	837ccc <tcp_slowtimo>
#ifdef CSUM_DEMO
      nextslow = cticks + (TPS/5);  /* another 200 ms */
#else
      nextslow = cticks + (TPS/2);  /* another 500 ms */
  82cd98:	00802174 	movhi	r2,133
  82cd9c:	10832604 	addi	r2,r2,3224
  82cda0:	10800017 	ldw	r2,0(r2)
  82cda4:	10807d04 	addi	r2,r2,500
  82cda8:	d0a0b415 	stw	r2,-32048(gp)

#ifdef DO_DELAY_ACKS
   tcp_fasttimo();
#endif   /* DO_DELAY_ACKS */

   UNLOCK_NET_RESOURCE(NET_RESID);
  82cdac:	0009883a 	mov	r4,zero
  82cdb0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   in_tcptick--;
  82cdb4:	d0a0b517 	ldw	r2,-32044(gp)
  82cdb8:	10bfffc4 	addi	r2,r2,-1
  82cdbc:	d0a0b515 	stw	r2,-32044(gp)
}
  82cdc0:	e037883a 	mov	sp,fp
  82cdc4:	dfc00117 	ldw	ra,4(sp)
  82cdc8:	df000017 	ldw	fp,0(sp)
  82cdcc:	dec00204 	addi	sp,sp,8
  82cdd0:	f800283a 	ret

0082cdd4 <rawip_lookup>:
 *          or NULL if no matching raw IP endpoint is found.
 */

struct ipraw_ep *
rawip_lookup(struct socket * so)
{
  82cdd4:	defffc04 	addi	sp,sp,-16
  82cdd8:	df000315 	stw	fp,12(sp)
  82cddc:	df000304 	addi	fp,sp,12
  82cde0:	e13ffe15 	stw	r4,-8(fp)
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
  82cde4:	00802174 	movhi	r2,133
  82cde8:	10834a04 	addi	r2,r2,3368
  82cdec:	10800017 	ldw	r2,0(r2)
  82cdf0:	e0bffd15 	stw	r2,-12(fp)
  82cdf4:	00000a06 	br	82ce20 <rawip_lookup+0x4c>
      if (tmp->ipr_data == (void*)so)
  82cdf8:	e0bffd17 	ldw	r2,-12(fp)
  82cdfc:	10c00417 	ldw	r3,16(r2)
  82ce00:	e0bffe17 	ldw	r2,-8(fp)
  82ce04:	1880031e 	bne	r3,r2,82ce14 <rawip_lookup+0x40>
      return (tmp);
  82ce08:	e0bffd17 	ldw	r2,-12(fp)
  82ce0c:	e0bfff15 	stw	r2,-4(fp)
  82ce10:	00000706 	br	82ce30 <rawip_lookup+0x5c>
struct ipraw_ep *
rawip_lookup(struct socket * so)
{
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
  82ce14:	e0bffd17 	ldw	r2,-12(fp)
  82ce18:	10800017 	ldw	r2,0(r2)
  82ce1c:	e0bffd15 	stw	r2,-12(fp)
  82ce20:	e0bffd17 	ldw	r2,-12(fp)
  82ce24:	1004c03a 	cmpne	r2,r2,zero
  82ce28:	103ff31e 	bne	r2,zero,82cdf8 <rawip_lookup+0x24>
      if (tmp->ipr_data == (void*)so)
      return (tmp);

   return NULL;   /* didn't find it */
  82ce2c:	e03fff15 	stw	zero,-4(fp)
  82ce30:	e0bfff17 	ldw	r2,-4(fp)
}
  82ce34:	e037883a 	mov	sp,fp
  82ce38:	df000017 	ldw	fp,0(sp)
  82ce3c:	dec00104 	addi	sp,sp,4
  82ce40:	f800283a 	ret

0082ce44 <rawip_soinput>:
 *          indicates that the packet has not been accepted.
 */

int
rawip_soinput(PACKET pkt, void * so_ptr)
{
  82ce44:	defff404 	addi	sp,sp,-48
  82ce48:	dfc00b15 	stw	ra,44(sp)
  82ce4c:	df000a15 	stw	fp,40(sp)
  82ce50:	df000a04 	addi	fp,sp,40
  82ce54:	e13ffd15 	stw	r4,-12(fp)
  82ce58:	e17ffe15 	stw	r5,-8(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
  82ce5c:	e0bffe17 	ldw	r2,-8(fp)
  82ce60:	e0bff715 	stw	r2,-36(fp)
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 
  82ce64:	0009883a 	mov	r4,zero
  82ce68:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
  82ce6c:	e0bff717 	ldw	r2,-36(fp)
  82ce70:	10c00a17 	ldw	r3,40(r2)
  82ce74:	e0bffd17 	ldw	r2,-12(fp)
  82ce78:	10800417 	ldw	r2,16(r2)
  82ce7c:	1887883a 	add	r3,r3,r2
  82ce80:	e0bff717 	ldw	r2,-36(fp)
  82ce84:	10800b17 	ldw	r2,44(r2)
  82ce88:	18800536 	bltu	r3,r2,82cea0 <rawip_soinput+0x5c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
  82ce8c:	0009883a 	mov	r4,zero
  82ce90:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
  82ce94:	00801a44 	movi	r2,105
  82ce98:	e0bfff15 	stw	r2,-4(fp)
  82ce9c:	00005806 	br	82d000 <rawip_soinput+0x1bc>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
  82cea0:	01000044 	movi	r4,1
  82cea4:	000b883a 	mov	r5,zero
  82cea8:	082b5c80 	call	82b5c8 <m_getnbuf>
  82ceac:	e0bff815 	stw	r2,-32(fp)
   if (!m_in)
  82ceb0:	e0bff817 	ldw	r2,-32(fp)
  82ceb4:	1004c03a 	cmpne	r2,r2,zero
  82ceb8:	1000051e 	bne	r2,zero,82ced0 <rawip_soinput+0x8c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
  82cebc:	0009883a 	mov	r4,zero
  82cec0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
  82cec4:	00801a44 	movi	r2,105
  82cec8:	e0bfff15 	stw	r2,-4(fp)
  82cecc:	00004c06 	br	82d000 <rawip_soinput+0x1bc>
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
  82ced0:	e0fff817 	ldw	r3,-32(fp)
  82ced4:	e0bffd17 	ldw	r2,-12(fp)
  82ced8:	18800115 	stw	r2,4(r3)
   m_in->m_base = pkt->nb_buff;
  82cedc:	e0bffd17 	ldw	r2,-12(fp)
  82cee0:	10c00117 	ldw	r3,4(r2)
  82cee4:	e0bff817 	ldw	r2,-32(fp)
  82cee8:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
  82ceec:	e0bffd17 	ldw	r2,-12(fp)
  82cef0:	10c00217 	ldw	r3,8(r2)
  82cef4:	e0bff817 	ldw	r2,-32(fp)
  82cef8:	10c00515 	stw	r3,20(r2)
   m_in->m_data = pkt->nb_prot;
  82cefc:	e0bffd17 	ldw	r2,-12(fp)
  82cf00:	10c00317 	ldw	r3,12(r2)
  82cf04:	e0bff817 	ldw	r2,-32(fp)
  82cf08:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
  82cf0c:	e0bffd17 	ldw	r2,-12(fp)
  82cf10:	10c00417 	ldw	r3,16(r2)
  82cf14:	e0bff817 	ldw	r2,-32(fp)
  82cf18:	10c00215 	stw	r3,8(r2)

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
  82cf1c:	e0bff717 	ldw	r2,-36(fp)
  82cf20:	10800417 	ldw	r2,16(r2)
  82cf24:	1088000c 	andi	r2,r2,8192
  82cf28:	1004c03a 	cmpne	r2,r2,zero
  82cf2c:	1000141e 	bne	r2,zero,82cf80 <rawip_soinput+0x13c>
   {
      unsigned int ihl = 
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
  82cf30:	e0bffd17 	ldw	r2,-12(fp)
  82cf34:	10800317 	ldw	r2,12(r2)
  82cf38:	10800003 	ldbu	r2,0(r2)
  82cf3c:	10803fcc 	andi	r2,r2,255
  82cf40:	108003cc 	andi	r2,r2,15
  82cf44:	1085883a 	add	r2,r2,r2
  82cf48:	1085883a 	add	r2,r2,r2
  82cf4c:	e0bff615 	stw	r2,-40(fp)
      m_in->m_data += ihl;
  82cf50:	e0bff817 	ldw	r2,-32(fp)
  82cf54:	10c00317 	ldw	r3,12(r2)
  82cf58:	e0bff617 	ldw	r2,-40(fp)
  82cf5c:	1887883a 	add	r3,r3,r2
  82cf60:	e0bff817 	ldw	r2,-32(fp)
  82cf64:	10c00315 	stw	r3,12(r2)
      m_in->m_len -= ihl;
  82cf68:	e0bff817 	ldw	r2,-32(fp)
  82cf6c:	10c00217 	ldw	r3,8(r2)
  82cf70:	e0bff617 	ldw	r2,-40(fp)
  82cf74:	1887c83a 	sub	r3,r3,r2
  82cf78:	e0bff817 	ldw	r2,-32(fp)
  82cf7c:	10c00215 	stw	r3,8(r2)
   }

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
  82cf80:	e0bffd17 	ldw	r2,-12(fp)
  82cf84:	10800717 	ldw	r2,28(r2)
  82cf88:	e0bffa15 	stw	r2,-24(fp)
   sin.sin_port = 0;
  82cf8c:	e03ff98d 	sth	zero,-26(fp)
   sin.sin_family = AF_INET;
  82cf90:	00800084 	movi	r2,2
  82cf94:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
  82cf98:	e0bff717 	ldw	r2,-36(fp)
  82cf9c:	11000a04 	addi	r4,r2,40
  82cfa0:	e17ff904 	addi	r5,fp,-28
  82cfa4:	e1bff817 	ldw	r6,-32(fp)
  82cfa8:	0831e940 	call	831e94 <sbappendaddr>
  82cfac:	1004c03a 	cmpne	r2,r2,zero
  82cfb0:	1000091e 	bne	r2,zero,82cfd8 <rawip_soinput+0x194>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       * underlying stack
       */
      m_in->pkt = NULL;
  82cfb4:	e0bff817 	ldw	r2,-32(fp)
  82cfb8:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
  82cfbc:	e13ff817 	ldw	r4,-32(fp)
  82cfc0:	082b7700 	call	82b770 <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
  82cfc4:	0009883a 	mov	r4,zero
  82cfc8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
  82cfcc:	00801a44 	movi	r2,105
  82cfd0:	e0bfff15 	stw	r2,-4(fp)
  82cfd4:	00000a06 	br	82d000 <rawip_soinput+0x1bc>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
  82cfd8:	e0bff717 	ldw	r2,-36(fp)
  82cfdc:	11000a04 	addi	r4,r2,40
  82cfe0:	082653c0 	call	82653c <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
  82cfe4:	e0bff717 	ldw	r2,-36(fp)
  82cfe8:	11400a04 	addi	r5,r2,40
  82cfec:	e13ff717 	ldw	r4,-36(fp)
  82cff0:	0831b480 	call	831b48 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
  82cff4:	0009883a 	mov	r4,zero
  82cff8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return 0;
  82cffc:	e03fff15 	stw	zero,-4(fp)
  82d000:	e0bfff17 	ldw	r2,-4(fp)
}
  82d004:	e037883a 	mov	sp,fp
  82d008:	dfc00117 	ldw	ra,4(sp)
  82d00c:	df000017 	ldw	fp,0(sp)
  82d010:	dec00204 	addi	sp,sp,8
  82d014:	f800283a 	ret

0082d018 <rawip_usrreq>:

int
rawip_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
  82d018:	deffee04 	addi	sp,sp,-72
  82d01c:	dfc01115 	stw	ra,68(sp)
  82d020:	df001015 	stw	fp,64(sp)
  82d024:	dc000f15 	stw	r16,60(sp)
  82d028:	df000f04 	addi	fp,sp,60
  82d02c:	e13ffc15 	stw	r4,-16(fp)
  82d030:	e17ffd15 	stw	r5,-12(fp)
  82d034:	e1bffe15 	stw	r6,-8(fp)
   u_char prot;
   struct ip * pip;
   int   req;
   NET   ifp;     /* ptr to network interface structure */

   req = so->so_req;    /* get request from socket struct */
  82d038:	e0bffc17 	ldw	r2,-16(fp)
  82d03c:	10800717 	ldw	r2,28(r2)
  82d040:	e0bff315 	stw	r2,-52(fp)

   switch (req) 
  82d044:	e0bff317 	ldw	r2,-52(fp)
  82d048:	10800468 	cmpgeui	r2,r2,17
  82d04c:	1001e31e 	bne	r2,zero,82d7dc <rawip_usrreq+0x7c4>
  82d050:	e0bff317 	ldw	r2,-52(fp)
  82d054:	1085883a 	add	r2,r2,r2
  82d058:	1087883a 	add	r3,r2,r2
  82d05c:	008020f4 	movhi	r2,131
  82d060:	10b41c04 	addi	r2,r2,-12176
  82d064:	1885883a 	add	r2,r3,r2
  82d068:	10800017 	ldw	r2,0(r2)
  82d06c:	1000683a 	jmp	r2
  82d070:	0082d0b4 	movhi	r2,2882
  82d074:	0082d13c 	xorhi	r2,zero,2884
  82d078:	0082d180 	call	82d18 <OSCtxSw_SWITCH_PC+0x82cd8>
  82d07c:	0082d7dc 	xori	r2,zero,2911
  82d080:	0082d180 	call	82d18 <OSCtxSw_SWITCH_PC+0x82cd8>
  82d084:	0082d7dc 	xori	r2,zero,2911
  82d088:	0082d7d0 	cmplti	r2,zero,2911
  82d08c:	0082d7dc 	xori	r2,zero,2911
  82d090:	0082d7d0 	cmplti	r2,zero,2911
  82d094:	0082d334 	movhi	r2,2892
  82d098:	0082d7dc 	xori	r2,zero,2911
  82d09c:	0082d7dc 	xori	r2,zero,2911
  82d0a0:	0082d7dc 	xori	r2,zero,2911
  82d0a4:	0082d7dc 	xori	r2,zero,2911
  82d0a8:	0082d7dc 	xori	r2,zero,2911
  82d0ac:	0082d724 	muli	r2,zero,2908
  82d0b0:	0082d724 	muli	r2,zero,2908
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
  82d0b4:	e0bffc17 	ldw	r2,-16(fp)
  82d0b8:	10800417 	ldw	r2,16(r2)
  82d0bc:	1108000c 	andi	r4,r2,8192
  82d0c0:	08429b00 	call	8429b0 <ip_raw_maxalloc>
  82d0c4:	1007883a 	mov	r3,r2
  82d0c8:	e0bffc17 	ldw	r2,-16(fp)
  82d0cc:	10c01315 	stw	r3,76(r2)
  82d0d0:	e0bffc17 	ldw	r2,-16(fp)
  82d0d4:	10c01317 	ldw	r3,76(r2)
  82d0d8:	e0bffc17 	ldw	r2,-16(fp)
  82d0dc:	10c00b15 	stw	r3,44(r2)
         ip_raw_maxalloc(so->so_options & SO_HDRINCL);
      /* make a raw IP endpoint */
      prot = (u_char)(MBUF2LONG(nam));
  82d0e0:	e0bffe17 	ldw	r2,-8(fp)
  82d0e4:	e0bff505 	stb	r2,-44(fp)
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
  82d0e8:	0009883a 	mov	r4,zero
  82d0ec:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      ep = ip_raw_open(prot, 0L, 0L, rawip_soinput, so);
  82d0f0:	e13ff503 	ldbu	r4,-44(fp)
  82d0f4:	e0bffc17 	ldw	r2,-16(fp)
  82d0f8:	d8800015 	stw	r2,0(sp)
  82d0fc:	000b883a 	mov	r5,zero
  82d100:	000d883a 	mov	r6,zero
  82d104:	01c020f4 	movhi	r7,131
  82d108:	39f39104 	addi	r7,r7,-12732
  82d10c:	08424bc0 	call	8424bc <ip_raw_open>
  82d110:	e0bff815 	stw	r2,-32(fp)
      LOCK_NET_RESOURCE(NET_RESID);
  82d114:	0009883a 	mov	r4,zero
  82d118:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      if (!ep)
  82d11c:	e0bff817 	ldw	r2,-32(fp)
  82d120:	1004c03a 	cmpne	r2,r2,zero
  82d124:	1000031e 	bne	r2,zero,82d134 <rawip_usrreq+0x11c>
         return(EINVAL);
  82d128:	00800584 	movi	r2,22
  82d12c:	e0bfff15 	stw	r2,-4(fp)
  82d130:	0001ac06 	br	82d7e4 <rawip_usrreq+0x7cc>
      return 0;
  82d134:	e03fff15 	stw	zero,-4(fp)
  82d138:	0001aa06 	br	82d7e4 <rawip_usrreq+0x7cc>
   case PRU_DETACH:
      /* delete the raw IP endpoint */
      ep = rawip_lookup(so);
  82d13c:	e13ffc17 	ldw	r4,-16(fp)
  82d140:	082cdd40 	call	82cdd4 <rawip_lookup>
  82d144:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
  82d148:	e0bff817 	ldw	r2,-32(fp)
  82d14c:	1004c03a 	cmpne	r2,r2,zero
  82d150:	1000031e 	bne	r2,zero,82d160 <rawip_usrreq+0x148>
         return(EINVAL);
  82d154:	00800584 	movi	r2,22
  82d158:	e0bfff15 	stw	r2,-4(fp)
  82d15c:	0001a106 	br	82d7e4 <rawip_usrreq+0x7cc>
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
  82d160:	0009883a 	mov	r4,zero
  82d164:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      ip_raw_close(ep);
  82d168:	e13ff817 	ldw	r4,-32(fp)
  82d16c:	08425ac0 	call	8425ac <ip_raw_close>
      LOCK_NET_RESOURCE(NET_RESID);
  82d170:	0009883a 	mov	r4,zero
  82d174:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      return 0;
  82d178:	e03fff15 	stw	zero,-4(fp)
  82d17c:	00019906 	br	82d7e4 <rawip_usrreq+0x7cc>
       * a default address for sending
       */
      /* fall through to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
  82d180:	e0bffe17 	ldw	r2,-8(fp)
  82d184:	1004c03a 	cmpne	r2,r2,zero
  82d188:	1000031e 	bne	r2,zero,82d198 <rawip_usrreq+0x180>
         return(EINVAL);
  82d18c:	00800584 	movi	r2,22
  82d190:	e0bfff15 	stw	r2,-4(fp)
  82d194:	00019306 	br	82d7e4 <rawip_usrreq+0x7cc>
      sin = mtod(nam, struct sockaddr_in *);
  82d198:	e0bffe17 	ldw	r2,-8(fp)
  82d19c:	10800317 	ldw	r2,12(r2)
  82d1a0:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
  82d1a4:	e0bff917 	ldw	r2,-28(fp)
  82d1a8:	1004c03a 	cmpne	r2,r2,zero
  82d1ac:	1000031e 	bne	r2,zero,82d1bc <rawip_usrreq+0x1a4>
         return(EINVAL);
  82d1b0:	00800584 	movi	r2,22
  82d1b4:	e0bfff15 	stw	r2,-4(fp)
  82d1b8:	00018a06 	br	82d7e4 <rawip_usrreq+0x7cc>
      if (nam->m_len != sizeof (*sin))
  82d1bc:	e0bffe17 	ldw	r2,-8(fp)
  82d1c0:	10800217 	ldw	r2,8(r2)
  82d1c4:	10800420 	cmpeqi	r2,r2,16
  82d1c8:	1000031e 	bne	r2,zero,82d1d8 <rawip_usrreq+0x1c0>
         return(EINVAL);
  82d1cc:	00800584 	movi	r2,22
  82d1d0:	e0bfff15 	stw	r2,-4(fp)
  82d1d4:	00018306 	br	82d7e4 <rawip_usrreq+0x7cc>
      ep = rawip_lookup(so);
  82d1d8:	e13ffc17 	ldw	r4,-16(fp)
  82d1dc:	082cdd40 	call	82cdd4 <rawip_lookup>
  82d1e0:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
  82d1e4:	e0bff817 	ldw	r2,-32(fp)
  82d1e8:	1004c03a 	cmpne	r2,r2,zero
  82d1ec:	1000031e 	bne	r2,zero,82d1fc <rawip_usrreq+0x1e4>
         return(EINVAL);
  82d1f0:	00800584 	movi	r2,22
  82d1f4:	e0bfff15 	stw	r2,-4(fp)
  82d1f8:	00017a06 	br	82d7e4 <rawip_usrreq+0x7cc>
      if (req == PRU_BIND)
  82d1fc:	e0bff317 	ldw	r2,-52(fp)
  82d200:	10800098 	cmpnei	r2,r2,2
  82d204:	1000221e 	bne	r2,zero,82d290 <rawip_usrreq+0x278>
          * if the caller-supplied address is INADDR_ANY,
          * don't bind to a specific address; else, 
          * make sure the caller-supplied address is
          * an interface IP address and if so, bind to that
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
  82d208:	e0bff917 	ldw	r2,-28(fp)
  82d20c:	10800117 	ldw	r2,4(r2)
  82d210:	1004c03a 	cmpne	r2,r2,zero
  82d214:	1000021e 	bne	r2,zero,82d220 <rawip_usrreq+0x208>
         {
            lhost = 0L;
  82d218:	e03ff615 	stw	zero,-40(fp)
  82d21c:	00001806 	br	82d280 <rawip_usrreq+0x268>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
  82d220:	e0bff917 	ldw	r2,-28(fp)
  82d224:	10800117 	ldw	r2,4(r2)
  82d228:	e0bff615 	stw	r2,-40(fp)
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d22c:	00803934 	movhi	r2,228
  82d230:	10a9dd04 	addi	r2,r2,-22668
  82d234:	10800017 	ldw	r2,0(r2)
  82d238:	e0bff215 	stw	r2,-56(fp)
  82d23c:	00000706 	br	82d25c <rawip_usrreq+0x244>
               if (ifp->n_ipaddr == lhost)
  82d240:	e0bff217 	ldw	r2,-56(fp)
  82d244:	10c00a17 	ldw	r3,40(r2)
  82d248:	e0bff617 	ldw	r2,-40(fp)
  82d24c:	18800626 	beq	r3,r2,82d268 <rawip_usrreq+0x250>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d250:	e0bff217 	ldw	r2,-56(fp)
  82d254:	10800017 	ldw	r2,0(r2)
  82d258:	e0bff215 	stw	r2,-56(fp)
  82d25c:	e0bff217 	ldw	r2,-56(fp)
  82d260:	1004c03a 	cmpne	r2,r2,zero
  82d264:	103ff61e 	bne	r2,zero,82d240 <rawip_usrreq+0x228>
               if (ifp->n_ipaddr == lhost)
                  break;
            if (ifp == NULL)
  82d268:	e0bff217 	ldw	r2,-56(fp)
  82d26c:	1004c03a 	cmpne	r2,r2,zero
  82d270:	1000031e 	bne	r2,zero,82d280 <rawip_usrreq+0x268>
               return(EADDRNOTAVAIL);
  82d274:	00801f44 	movi	r2,125
  82d278:	e0bfff15 	stw	r2,-4(fp)
  82d27c:	00015906 	br	82d7e4 <rawip_usrreq+0x7cc>
         }

         /* bind the endpoint */
         ep->ipr_laddr = lhost;
  82d280:	e0fff817 	ldw	r3,-32(fp)
  82d284:	e0bff617 	ldw	r2,-40(fp)
  82d288:	18800115 	stw	r2,4(r3)
  82d28c:	00002706 	br	82d32c <rawip_usrreq+0x314>
          *
          * if the caller-supplied address is INADDR_ANY,
          * use the wildcard address; else, use the caller-
          * supplied address
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
  82d290:	e0bff917 	ldw	r2,-28(fp)
  82d294:	10800117 	ldw	r2,4(r2)
  82d298:	1004c03a 	cmpne	r2,r2,zero
  82d29c:	1000021e 	bne	r2,zero,82d2a8 <rawip_usrreq+0x290>
            fhost = 0L;
  82d2a0:	e03ff715 	stw	zero,-36(fp)
  82d2a4:	00000306 	br	82d2b4 <rawip_usrreq+0x29c>
         else
            fhost = sin->sin_addr.s_addr;
  82d2a8:	e0bff917 	ldw	r2,-28(fp)
  82d2ac:	10800117 	ldw	r2,4(r2)
  82d2b0:	e0bff715 	stw	r2,-36(fp)
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
  82d2b4:	e0fff817 	ldw	r3,-32(fp)
  82d2b8:	e0bff717 	ldw	r2,-36(fp)
  82d2bc:	18800215 	stw	r2,8(r3)
         /* mark the socket as connected or disconnected, as appropriate */
         if (fhost != 0L) {
  82d2c0:	e0bff717 	ldw	r2,-36(fp)
  82d2c4:	1005003a 	cmpeq	r2,r2,zero
  82d2c8:	10000e1e 	bne	r2,zero,82d304 <rawip_usrreq+0x2ec>
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
  82d2cc:	e0bffc17 	ldw	r2,-16(fp)
  82d2d0:	10c0088b 	ldhu	r3,34(r2)
  82d2d4:	00bffcc4 	movi	r2,-13
  82d2d8:	1884703a 	and	r2,r3,r2
  82d2dc:	1007883a 	mov	r3,r2
  82d2e0:	e0bffc17 	ldw	r2,-16(fp)
  82d2e4:	10c0088d 	sth	r3,34(r2)
            so->so_state |= SS_ISCONNECTED;
  82d2e8:	e0bffc17 	ldw	r2,-16(fp)
  82d2ec:	1080088b 	ldhu	r2,34(r2)
  82d2f0:	10800094 	ori	r2,r2,2
  82d2f4:	1007883a 	mov	r3,r2
  82d2f8:	e0bffc17 	ldw	r2,-16(fp)
  82d2fc:	10c0088d 	sth	r3,34(r2)
  82d300:	00000706 	br	82d320 <rawip_usrreq+0x308>
         }
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
  82d304:	e0bffc17 	ldw	r2,-16(fp)
  82d308:	10c0088b 	ldhu	r3,34(r2)
  82d30c:	00bfff44 	movi	r2,-3
  82d310:	1884703a 	and	r2,r3,r2
  82d314:	1007883a 	mov	r3,r2
  82d318:	e0bffc17 	ldw	r2,-16(fp)
  82d31c:	10c0088d 	sth	r3,34(r2)
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
  82d320:	e0bffc17 	ldw	r2,-16(fp)
  82d324:	11000a04 	addi	r4,r2,40
  82d328:	08322840 	call	832284 <sbflush>
      }
      return 0;
  82d32c:	e03fff15 	stw	zero,-4(fp)
  82d330:	00012c06 	br	82d7e4 <rawip_usrreq+0x7cc>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
  82d334:	e0bffd17 	ldw	r2,-12(fp)
  82d338:	1004c03a 	cmpne	r2,r2,zero
  82d33c:	1000031e 	bne	r2,zero,82d34c <rawip_usrreq+0x334>
         return(EINVAL);
  82d340:	00800584 	movi	r2,22
  82d344:	e0bfff15 	stw	r2,-4(fp)
  82d348:	00012606 	br	82d7e4 <rawip_usrreq+0x7cc>

      ep = rawip_lookup(so);
  82d34c:	e13ffc17 	ldw	r4,-16(fp)
  82d350:	082cdd40 	call	82cdd4 <rawip_lookup>
  82d354:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
  82d358:	e0bff817 	ldw	r2,-32(fp)
  82d35c:	1004c03a 	cmpne	r2,r2,zero
  82d360:	1000051e 	bne	r2,zero,82d378 <rawip_usrreq+0x360>
      {
         m_free(m);
  82d364:	e13ffd17 	ldw	r4,-12(fp)
  82d368:	082b7700 	call	82b770 <m_free>
         /* may be bogus socket, but more likely the connection may 
         have closed due to ICMP dest unreachable from other side. */
         return(ECONNREFUSED);
  82d36c:	00801bc4 	movi	r2,111
  82d370:	e0bfff15 	stw	r2,-4(fp)
  82d374:	00011b06 	br	82d7e4 <rawip_usrreq+0x7cc>
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
  82d378:	e0bffe17 	ldw	r2,-8(fp)
  82d37c:	1004c03a 	cmpne	r2,r2,zero
  82d380:	10000d1e 	bne	r2,zero,82d3b8 <rawip_usrreq+0x3a0>
      {
         if (!(so->so_state & SS_ISCONNECTED))
  82d384:	e0bffc17 	ldw	r2,-16(fp)
  82d388:	1080088b 	ldhu	r2,34(r2)
  82d38c:	10bfffcc 	andi	r2,r2,65535
  82d390:	1080008c 	andi	r2,r2,2
  82d394:	1004c03a 	cmpne	r2,r2,zero
  82d398:	1000031e 	bne	r2,zero,82d3a8 <rawip_usrreq+0x390>
            return (ENOTCONN);
  82d39c:	00802004 	movi	r2,128
  82d3a0:	e0bfff15 	stw	r2,-4(fp)
  82d3a4:	00010f06 	br	82d7e4 <rawip_usrreq+0x7cc>
         fhost = ep->ipr_faddr;
  82d3a8:	e0bff817 	ldw	r2,-32(fp)
  82d3ac:	10800217 	ldw	r2,8(r2)
  82d3b0:	e0bff715 	stw	r2,-36(fp)
  82d3b4:	00001706 	br	82d414 <rawip_usrreq+0x3fc>
      }
      else 
      {
         if (so->so_state & SS_ISCONNECTED)
  82d3b8:	e0bffc17 	ldw	r2,-16(fp)
  82d3bc:	1080088b 	ldhu	r2,34(r2)
  82d3c0:	10bfffcc 	andi	r2,r2,65535
  82d3c4:	1080008c 	andi	r2,r2,2
  82d3c8:	1005003a 	cmpeq	r2,r2,zero
  82d3cc:	1000031e 	bne	r2,zero,82d3dc <rawip_usrreq+0x3c4>
            return (EISCONN);
  82d3d0:	00801fc4 	movi	r2,127
  82d3d4:	e0bfff15 	stw	r2,-4(fp)
  82d3d8:	00010206 	br	82d7e4 <rawip_usrreq+0x7cc>
         if (nam->m_len != sizeof (*sin))
  82d3dc:	e0bffe17 	ldw	r2,-8(fp)
  82d3e0:	10800217 	ldw	r2,8(r2)
  82d3e4:	10800420 	cmpeqi	r2,r2,16
  82d3e8:	1000041e 	bne	r2,zero,82d3fc <rawip_usrreq+0x3e4>
         {
            dtrap();
  82d3ec:	082a7c80 	call	82a7c8 <dtrap>
            return (EINVAL);
  82d3f0:	00800584 	movi	r2,22
  82d3f4:	e0bfff15 	stw	r2,-4(fp)
  82d3f8:	0000fa06 	br	82d7e4 <rawip_usrreq+0x7cc>
         }
         sin = mtod(nam, struct sockaddr_in *);
  82d3fc:	e0bffe17 	ldw	r2,-8(fp)
  82d400:	10800317 	ldw	r2,12(r2)
  82d404:	e0bff915 	stw	r2,-28(fp)
         fhost = sin->sin_addr.s_addr;
  82d408:	e0bff917 	ldw	r2,-28(fp)
  82d40c:	10800117 	ldw	r2,4(r2)
  82d410:	e0bff715 	stw	r2,-36(fp)

      /* since our pkt->nb_buff size is tied to max packet size, we 
       * assume our raw IP datagrams are always in one mbuf and that the 
       * mbuf -- but check anyway
       */
      if (m->m_len > (unsigned)ip_raw_maxalloc(so->so_options & SO_HDRINCL))
  82d414:	e0bffd17 	ldw	r2,-12(fp)
  82d418:	14000217 	ldw	r16,8(r2)
  82d41c:	e0bffc17 	ldw	r2,-16(fp)
  82d420:	10800417 	ldw	r2,16(r2)
  82d424:	1108000c 	andi	r4,r2,8192
  82d428:	08429b00 	call	8429b0 <ip_raw_maxalloc>
  82d42c:	1400042e 	bgeu	r2,r16,82d440 <rawip_usrreq+0x428>
      {
         dtrap(); /* should never happen */
  82d430:	082a7c80 	call	82a7c8 <dtrap>
         return EMSGSIZE;  /* try to recover */
  82d434:	00801e84 	movi	r2,122
  82d438:	e0bfff15 	stw	r2,-4(fp)
  82d43c:	0000e906 	br	82d7e4 <rawip_usrreq+0x7cc>
      }
      /* get a packet buffer for send */
      pkt = ip_raw_alloc(m->m_len, so->so_options & SO_HDRINCL);
  82d440:	e0bffd17 	ldw	r2,-12(fp)
  82d444:	10800217 	ldw	r2,8(r2)
  82d448:	1009883a 	mov	r4,r2
  82d44c:	e0bffc17 	ldw	r2,-16(fp)
  82d450:	10800417 	ldw	r2,16(r2)
  82d454:	1148000c 	andi	r5,r2,8192
  82d458:	08428a40 	call	8428a4 <ip_raw_alloc>
  82d45c:	e0bffa15 	stw	r2,-24(fp)
      if (!pkt)
  82d460:	e0bffa17 	ldw	r2,-24(fp)
  82d464:	1004c03a 	cmpne	r2,r2,zero
  82d468:	1000051e 	bne	r2,zero,82d480 <rawip_usrreq+0x468>
      {
         m_free(m);
  82d46c:	e13ffd17 	ldw	r4,-12(fp)
  82d470:	082b7700 	call	82b770 <m_free>
         return ENOBUFS;   /* report buffer shortages */
  82d474:	00801a44 	movi	r2,105
  82d478:	e0bfff15 	stw	r2,-4(fp)
  82d47c:	0000d906 	br	82d7e4 <rawip_usrreq+0x7cc>
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
  82d480:	e0bffa17 	ldw	r2,-24(fp)
  82d484:	10c00317 	ldw	r3,12(r2)
  82d488:	e0bffd17 	ldw	r2,-12(fp)
  82d48c:	11400317 	ldw	r5,12(r2)
  82d490:	e0bffd17 	ldw	r2,-12(fp)
  82d494:	10800217 	ldw	r2,8(r2)
  82d498:	1809883a 	mov	r4,r3
  82d49c:	100d883a 	mov	r6,r2
  82d4a0:	08073380 	call	807338 <memcpy>
      pkt->nb_plen = m->m_len;
  82d4a4:	e0bffd17 	ldw	r2,-12(fp)
  82d4a8:	10c00217 	ldw	r3,8(r2)
  82d4ac:	e0bffa17 	ldw	r2,-24(fp)
  82d4b0:	10c00415 	stw	r3,16(r2)
      /* finished with mbuf, free it now */
      m_free(m);
  82d4b4:	e13ffd17 	ldw	r4,-12(fp)
  82d4b8:	082b7700 	call	82b770 <m_free>
      pkt->fhost = fhost;
  82d4bc:	e0fffa17 	ldw	r3,-24(fp)
  82d4c0:	e0bff717 	ldw	r2,-36(fp)
  82d4c4:	18800715 	stw	r2,28(r3)
       * is up; if (after all that) we don't have an interface then we
       * fail with error EADDRNOTAVAIL; and finally, if we're built
       * for a single-homed configuration where there's only one
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
  82d4c8:	e0bff717 	ldw	r2,-36(fp)
  82d4cc:	10bfffd8 	cmpnei	r2,r2,-1
  82d4d0:	10004f1e 	bne	r2,zero,82d610 <rawip_usrreq+0x5f8>
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
  82d4d4:	e0bff817 	ldw	r2,-32(fp)
  82d4d8:	10800117 	ldw	r2,4(r2)
  82d4dc:	1005003a 	cmpeq	r2,r2,zero
  82d4e0:	1000111e 	bne	r2,zero,82d528 <rawip_usrreq+0x510>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d4e4:	00803934 	movhi	r2,228
  82d4e8:	10a9dd04 	addi	r2,r2,-22668
  82d4ec:	10800017 	ldw	r2,0(r2)
  82d4f0:	e0bff215 	stw	r2,-56(fp)
  82d4f4:	00000806 	br	82d518 <rawip_usrreq+0x500>
               if (ifp->n_ipaddr == ep->ipr_laddr)
  82d4f8:	e0bff217 	ldw	r2,-56(fp)
  82d4fc:	10c00a17 	ldw	r3,40(r2)
  82d500:	e0bff817 	ldw	r2,-32(fp)
  82d504:	10800117 	ldw	r2,4(r2)
  82d508:	18802126 	beq	r3,r2,82d590 <rawip_usrreq+0x578>
      if (fhost == 0xffffffff)
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d50c:	e0bff217 	ldw	r2,-56(fp)
  82d510:	10800017 	ldw	r2,0(r2)
  82d514:	e0bff215 	stw	r2,-56(fp)
  82d518:	e0bff217 	ldw	r2,-56(fp)
  82d51c:	1004c03a 	cmpne	r2,r2,zero
  82d520:	103ff51e 	bne	r2,zero,82d4f8 <rawip_usrreq+0x4e0>
  82d524:	00001a06 	br	82d590 <rawip_usrreq+0x578>
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d528:	00803934 	movhi	r2,228
  82d52c:	10a9dd04 	addi	r2,r2,-22668
  82d530:	10800017 	ldw	r2,0(r2)
  82d534:	e0bff215 	stw	r2,-56(fp)
  82d538:	00001206 	br	82d584 <rawip_usrreq+0x56c>
               if ((ifp->n_flags & NF_BCAST) &&
  82d53c:	e0bff217 	ldw	r2,-56(fp)
  82d540:	10802a17 	ldw	r2,168(r2)
  82d544:	1080004c 	andi	r2,r2,1
  82d548:	10803fcc 	andi	r2,r2,255
  82d54c:	1005003a 	cmpeq	r2,r2,zero
  82d550:	1000091e 	bne	r2,zero,82d578 <rawip_usrreq+0x560>
  82d554:	e0bff217 	ldw	r2,-56(fp)
  82d558:	10802717 	ldw	r2,156(r2)
  82d55c:	1005003a 	cmpeq	r2,r2,zero
  82d560:	1000051e 	bne	r2,zero,82d578 <rawip_usrreq+0x560>
  82d564:	e0bff217 	ldw	r2,-56(fp)
  82d568:	10802717 	ldw	r2,156(r2)
  82d56c:	10800617 	ldw	r2,24(r2)
  82d570:	10800060 	cmpeqi	r2,r2,1
  82d574:	1000061e 	bne	r2,zero,82d590 <rawip_usrreq+0x578>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d578:	e0bff217 	ldw	r2,-56(fp)
  82d57c:	10800017 	ldw	r2,0(r2)
  82d580:	e0bff215 	stw	r2,-56(fp)
  82d584:	e0bff217 	ldw	r2,-56(fp)
  82d588:	1004c03a 	cmpne	r2,r2,zero
  82d58c:	103feb1e 	bne	r2,zero,82d53c <rawip_usrreq+0x524>
               if ((ifp->n_flags & NF_BCAST) &&
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
  82d590:	e0bff217 	ldw	r2,-56(fp)
  82d594:	1004c03a 	cmpne	r2,r2,zero
  82d598:	10001a1e 	bne	r2,zero,82d604 <rawip_usrreq+0x5ec>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d59c:	00803934 	movhi	r2,228
  82d5a0:	10a9dd04 	addi	r2,r2,-22668
  82d5a4:	10800017 	ldw	r2,0(r2)
  82d5a8:	e0bff215 	stw	r2,-56(fp)
  82d5ac:	00000c06 	br	82d5e0 <rawip_usrreq+0x5c8>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
  82d5b0:	e0bff217 	ldw	r2,-56(fp)
  82d5b4:	10802717 	ldw	r2,156(r2)
  82d5b8:	1005003a 	cmpeq	r2,r2,zero
  82d5bc:	1000051e 	bne	r2,zero,82d5d4 <rawip_usrreq+0x5bc>
  82d5c0:	e0bff217 	ldw	r2,-56(fp)
  82d5c4:	10802717 	ldw	r2,156(r2)
  82d5c8:	10800617 	ldw	r2,24(r2)
  82d5cc:	10800060 	cmpeqi	r2,r2,1
  82d5d0:	1000061e 	bne	r2,zero,82d5ec <rawip_usrreq+0x5d4>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  82d5d4:	e0bff217 	ldw	r2,-56(fp)
  82d5d8:	10800017 	ldw	r2,0(r2)
  82d5dc:	e0bff215 	stw	r2,-56(fp)
  82d5e0:	e0bff217 	ldw	r2,-56(fp)
  82d5e4:	1004c03a 	cmpne	r2,r2,zero
  82d5e8:	103ff11e 	bne	r2,zero,82d5b0 <rawip_usrreq+0x598>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
            if (ifp == NULL)
  82d5ec:	e0bff217 	ldw	r2,-56(fp)
  82d5f0:	1004c03a 	cmpne	r2,r2,zero
  82d5f4:	1000031e 	bne	r2,zero,82d604 <rawip_usrreq+0x5ec>
               return(EADDRNOTAVAIL);
  82d5f8:	00801f44 	movi	r2,125
  82d5fc:	e0bfff15 	stw	r2,-4(fp)
  82d600:	00007806 	br	82d7e4 <rawip_usrreq+0x7cc>
         }
         pkt->net = ifp;
  82d604:	e0fffa17 	ldw	r3,-24(fp)
  82d608:	e0bff217 	ldw	r2,-56(fp)
  82d60c:	18800615 	stw	r2,24(r3)
#ifdef IP_MULTICAST

      /* If the socket has an IP moptions structure for multicast options,
       * place a pointer to this structure in the PACKET structure.
       */
      if (so->inp_moptions)
  82d610:	e0bffc17 	ldw	r2,-16(fp)
  82d614:	10800317 	ldw	r2,12(r2)
  82d618:	1005003a 	cmpeq	r2,r2,zero
  82d61c:	1000041e 	bne	r2,zero,82d630 <rawip_usrreq+0x618>
         pkt->imo = so->inp_moptions;
  82d620:	e0bffc17 	ldw	r2,-16(fp)
  82d624:	10c00317 	ldw	r3,12(r2)
  82d628:	e0bffa17 	ldw	r2,-24(fp)
  82d62c:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
  82d630:	e0bffc17 	ldw	r2,-16(fp)
  82d634:	10800417 	ldw	r2,16(r2)
  82d638:	1088000c 	andi	r2,r2,8192
  82d63c:	1005003a 	cmpeq	r2,r2,zero
  82d640:	1000081e 	bne	r2,zero,82d664 <rawip_usrreq+0x64c>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
  82d644:	0009883a 	mov	r4,zero
  82d648:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         e = ip_raw_write(pkt);
  82d64c:	e13ffa17 	ldw	r4,-24(fp)
  82d650:	083e2840 	call	83e284 <ip_raw_write>
  82d654:	e0bffb15 	stw	r2,-20(fp)
         LOCK_NET_RESOURCE(NET_RESID);
  82d658:	0009883a 	mov	r4,zero
  82d65c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
  82d660:	00002806 	br	82d704 <rawip_usrreq+0x6ec>
      }
      else
      {
         pip = (struct ip *)(pkt->nb_prot - IPHSIZ);
  82d664:	e0bffa17 	ldw	r2,-24(fp)
  82d668:	10800317 	ldw	r2,12(r2)
  82d66c:	10bffb04 	addi	r2,r2,-20
  82d670:	e0bff415 	stw	r2,-48(fp)
         if (ep->ipr_laddr)
  82d674:	e0bff817 	ldw	r2,-32(fp)
  82d678:	10800117 	ldw	r2,4(r2)
  82d67c:	1005003a 	cmpeq	r2,r2,zero
  82d680:	1000051e 	bne	r2,zero,82d698 <rawip_usrreq+0x680>
            pip->ip_src = ep->ipr_laddr;
  82d684:	e0bff817 	ldw	r2,-32(fp)
  82d688:	10c00117 	ldw	r3,4(r2)
  82d68c:	e0bff417 	ldw	r2,-48(fp)
  82d690:	10c00315 	stw	r3,12(r2)
  82d694:	00000e06 	br	82d6d0 <rawip_usrreq+0x6b8>
         else
         {
            if (fhost == 0xffffffff)
  82d698:	e0bff717 	ldw	r2,-36(fp)
  82d69c:	10bfffd8 	cmpnei	r2,r2,-1
  82d6a0:	1000061e 	bne	r2,zero,82d6bc <rawip_usrreq+0x6a4>
               pip->ip_src = pkt->net->n_ipaddr;
  82d6a4:	e0bffa17 	ldw	r2,-24(fp)
  82d6a8:	10800617 	ldw	r2,24(r2)
  82d6ac:	10c00a17 	ldw	r3,40(r2)
  82d6b0:	e0bff417 	ldw	r2,-48(fp)
  82d6b4:	10c00315 	stw	r3,12(r2)
  82d6b8:	00000506 	br	82d6d0 <rawip_usrreq+0x6b8>
            else
               pip->ip_src = ip_mymach(fhost);
  82d6bc:	e13ff717 	ldw	r4,-36(fp)
  82d6c0:	083ee080 	call	83ee08 <ip_mymach>
  82d6c4:	1007883a 	mov	r3,r2
  82d6c8:	e0bff417 	ldw	r2,-48(fp)
  82d6cc:	10c00315 	stw	r3,12(r2)
         }
         pip->ip_dest = fhost;
  82d6d0:	e0fff417 	ldw	r3,-48(fp)
  82d6d4:	e0bff717 	ldw	r2,-36(fp)
  82d6d8:	18800415 	stw	r2,16(r3)
         UNLOCK_NET_RESOURCE(NET_RESID);
  82d6dc:	0009883a 	mov	r4,zero
  82d6e0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         e = ip_write(ep->ipr_prot, pkt);
  82d6e4:	e0bff817 	ldw	r2,-32(fp)
  82d6e8:	10800503 	ldbu	r2,20(r2)
  82d6ec:	11003fcc 	andi	r4,r2,255
  82d6f0:	e17ffa17 	ldw	r5,-24(fp)
  82d6f4:	083dc8c0 	call	83dc8c <ip_write>
  82d6f8:	e0bffb15 	stw	r2,-20(fp)
         LOCK_NET_RESOURCE(NET_RESID);
  82d6fc:	0009883a 	mov	r4,zero
  82d700:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      }         
      if (e < 0) 
  82d704:	e0bffb17 	ldw	r2,-20(fp)
  82d708:	1004403a 	cmpge	r2,r2,zero
  82d70c:	1000031e 	bne	r2,zero,82d71c <rawip_usrreq+0x704>
         return(e);
  82d710:	e0bffb17 	ldw	r2,-20(fp)
  82d714:	e0bfff15 	stw	r2,-4(fp)
  82d718:	00003206 	br	82d7e4 <rawip_usrreq+0x7cc>
      return 0;
  82d71c:	e03fff15 	stw	zero,-4(fp)
  82d720:	00003006 	br	82d7e4 <rawip_usrreq+0x7cc>
   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
  82d724:	e0bffe17 	ldw	r2,-8(fp)
  82d728:	1004c03a 	cmpne	r2,r2,zero
  82d72c:	1000031e 	bne	r2,zero,82d73c <rawip_usrreq+0x724>
         return(EINVAL);
  82d730:	00800584 	movi	r2,22
  82d734:	e0bfff15 	stw	r2,-4(fp)
  82d738:	00002a06 	br	82d7e4 <rawip_usrreq+0x7cc>
      sin = mtod(nam, struct sockaddr_in *);
  82d73c:	e0bffe17 	ldw	r2,-8(fp)
  82d740:	10800317 	ldw	r2,12(r2)
  82d744:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
  82d748:	e0bff917 	ldw	r2,-28(fp)
  82d74c:	1004c03a 	cmpne	r2,r2,zero
  82d750:	1000031e 	bne	r2,zero,82d760 <rawip_usrreq+0x748>
         return(EINVAL);
  82d754:	00800584 	movi	r2,22
  82d758:	e0bfff15 	stw	r2,-4(fp)
  82d75c:	00002106 	br	82d7e4 <rawip_usrreq+0x7cc>
      ep = rawip_lookup(so);
  82d760:	e13ffc17 	ldw	r4,-16(fp)
  82d764:	082cdd40 	call	82cdd4 <rawip_lookup>
  82d768:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
  82d76c:	e0bff817 	ldw	r2,-32(fp)
  82d770:	1004c03a 	cmpne	r2,r2,zero
  82d774:	1000031e 	bne	r2,zero,82d784 <rawip_usrreq+0x76c>
         return(EINVAL);
  82d778:	00800584 	movi	r2,22
  82d77c:	e0bfff15 	stw	r2,-4(fp)
  82d780:	00001806 	br	82d7e4 <rawip_usrreq+0x7cc>
      sin->sin_port = 0;
  82d784:	e0bff917 	ldw	r2,-28(fp)
  82d788:	1000008d 	sth	zero,2(r2)
      nam->m_len = sizeof(*sin);
  82d78c:	e0fffe17 	ldw	r3,-8(fp)
  82d790:	00800404 	movi	r2,16
  82d794:	18800215 	stw	r2,8(r3)
      if (req == PRU_SOCKADDR)
  82d798:	e0bff317 	ldw	r2,-52(fp)
  82d79c:	108003d8 	cmpnei	r2,r2,15
  82d7a0:	1000051e 	bne	r2,zero,82d7b8 <rawip_usrreq+0x7a0>
      {
         sin->sin_addr.s_addr = ep->ipr_laddr;
  82d7a4:	e0bff817 	ldw	r2,-32(fp)
  82d7a8:	10c00117 	ldw	r3,4(r2)
  82d7ac:	e0bff917 	ldw	r2,-28(fp)
  82d7b0:	10c00115 	stw	r3,4(r2)
  82d7b4:	00000406 	br	82d7c8 <rawip_usrreq+0x7b0>
      }
      else /* PRU_PEERADDR */
      {
         sin->sin_addr.s_addr = ep->ipr_faddr;
  82d7b8:	e0bff817 	ldw	r2,-32(fp)
  82d7bc:	10c00217 	ldw	r3,8(r2)
  82d7c0:	e0bff917 	ldw	r2,-28(fp)
  82d7c4:	10c00115 	stw	r3,4(r2)
      }
      return 0;
  82d7c8:	e03fff15 	stw	zero,-4(fp)
  82d7cc:	00000506 	br	82d7e4 <rawip_usrreq+0x7cc>
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
  82d7d0:	082a7c80 	call	82a7c8 <dtrap>
      return 0;
  82d7d4:	e03fff15 	stw	zero,-4(fp)
  82d7d8:	00000206 	br	82d7e4 <rawip_usrreq+0x7cc>
   case PRU_LISTEN:     /* don't support these for raw IP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
  82d7dc:	008017c4 	movi	r2,95
  82d7e0:	e0bfff15 	stw	r2,-4(fp)
  82d7e4:	e0bfff17 	ldw	r2,-4(fp)
   }
}
  82d7e8:	e037883a 	mov	sp,fp
  82d7ec:	dfc00217 	ldw	ra,8(sp)
  82d7f0:	df000117 	ldw	fp,4(sp)
  82d7f4:	dc000017 	ldw	r16,0(sp)
  82d7f8:	dec00304 	addi	sp,sp,12
  82d7fc:	f800283a 	ret

0082d800 <DOMAIN_CHECK>:
 */

#ifdef NPDEBUG
void
DOMAIN_CHECK(struct socket * so, int size)
{
  82d800:	defffc04 	addi	sp,sp,-16
  82d804:	dfc00315 	stw	ra,12(sp)
  82d808:	df000215 	stw	fp,8(sp)
  82d80c:	df000204 	addi	fp,sp,8
  82d810:	e13ffe15 	stw	r4,-8(fp)
  82d814:	e17fff15 	stw	r5,-4(fp)
#ifdef IP_V4
   if((so->so_domain == AF_INET) &&
  82d818:	e0bffe17 	ldw	r2,-8(fp)
  82d81c:	10800517 	ldw	r2,20(r2)
  82d820:	10800098 	cmpnei	r2,r2,2
  82d824:	1000041e 	bne	r2,zero,82d838 <DOMAIN_CHECK+0x38>
  82d828:	e0bfff17 	ldw	r2,-4(fp)
  82d82c:	10800428 	cmpgeui	r2,r2,16
  82d830:	1000011e 	bne	r2,zero,82d838 <DOMAIN_CHECK+0x38>
      (size < sizeof(struct sockaddr_in)))
   {
      dtrap(); /* programmer passed wrong structure */
  82d834:	082a7c80 	call	82a7c8 <dtrap>
      (size != sizeof(struct sockaddr_in6)))
   {
      dtrap(); /* programmer passed wrong structure */
   }
#endif   /* IP_V6 */
}
  82d838:	e037883a 	mov	sp,fp
  82d83c:	dfc00117 	ldw	ra,4(sp)
  82d840:	df000017 	ldw	fp,0(sp)
  82d844:	dec00204 	addi	sp,sp,8
  82d848:	f800283a 	ret

0082d84c <t_socket>:

long
t_socket(int family, 
   int   type, 
   int   proto)
{
  82d84c:	defff904 	addi	sp,sp,-28
  82d850:	dfc00615 	stw	ra,24(sp)
  82d854:	df000515 	stw	fp,20(sp)
  82d858:	df000504 	addi	fp,sp,20
  82d85c:	e13ffc15 	stw	r4,-16(fp)
  82d860:	e17ffd15 	stw	r5,-12(fp)
  82d864:	e1bffe15 	stw	r6,-8(fp)
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
  82d868:	0009883a 	mov	r4,zero
  82d86c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   if ((so = socreate (family, type, proto)) == NULL) 
  82d870:	e13ffc17 	ldw	r4,-16(fp)
  82d874:	e17ffd17 	ldw	r5,-12(fp)
  82d878:	e1bffe17 	ldw	r6,-8(fp)
  82d87c:	082effc0 	call	82effc <socreate>
  82d880:	e0bffb15 	stw	r2,-20(fp)
  82d884:	e0bffb17 	ldw	r2,-20(fp)
  82d888:	1004c03a 	cmpne	r2,r2,zero
  82d88c:	1000051e 	bne	r2,zero,82d8a4 <t_socket+0x58>
   {  /* can't really return error info since no socket.... */
      UNLOCK_NET_RESOURCE(NET_RESID);
  82d890:	0009883a 	mov	r4,zero
  82d894:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
  82d898:	00bfffc4 	movi	r2,-1
  82d89c:	e0bfff15 	stw	r2,-4(fp)
  82d8a0:	00000806 	br	82d8c4 <t_socket+0x78>
   }
   SOC_RANGE(so);
   so->so_error = 0;
  82d8a4:	e0bffb17 	ldw	r2,-20(fp)
  82d8a8:	10000615 	stw	zero,24(r2)
   UNLOCK_NET_RESOURCE(NET_RESID);
  82d8ac:	0009883a 	mov	r4,zero
  82d8b0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return SO2LONG(so);
  82d8b4:	e0bffb17 	ldw	r2,-20(fp)
  82d8b8:	1004d0ba 	srli	r2,r2,2
  82d8bc:	10800804 	addi	r2,r2,32
  82d8c0:	e0bfff15 	stw	r2,-4(fp)
  82d8c4:	e0bfff17 	ldw	r2,-4(fp)
}
  82d8c8:	e037883a 	mov	sp,fp
  82d8cc:	dfc00117 	ldw	ra,4(sp)
  82d8d0:	df000017 	ldw	fp,0(sp)
  82d8d4:	dec00204 	addi	sp,sp,8
  82d8d8:	f800283a 	ret

0082d8dc <t_bind>:

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
  82d8dc:	defff104 	addi	sp,sp,-60
  82d8e0:	dfc00e15 	stw	ra,56(sp)
  82d8e4:	df000d15 	stw	fp,52(sp)
  82d8e8:	df000d04 	addi	fp,sp,52
  82d8ec:	e13ffc15 	stw	r4,-16(fp)
  82d8f0:	e17ffd15 	stw	r5,-12(fp)
  82d8f4:	e1bffe15 	stw	r6,-8(fp)
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
  82d8f8:	e0bffc17 	ldw	r2,-16(fp)
  82d8fc:	10bff804 	addi	r2,r2,-32
  82d900:	1085883a 	add	r2,r2,r2
  82d904:	1085883a 	add	r2,r2,r2
  82d908:	e0bff515 	stw	r2,-44(fp)
   SOC_CHECK(so);
  82d90c:	00803934 	movhi	r2,228
  82d910:	10a8d904 	addi	r2,r2,-23708
  82d914:	e0bff315 	stw	r2,-52(fp)
  82d918:	00000606 	br	82d934 <t_bind+0x58>
  82d91c:	e0fff317 	ldw	r3,-52(fp)
  82d920:	e0bff517 	ldw	r2,-44(fp)
  82d924:	18800626 	beq	r3,r2,82d940 <t_bind+0x64>
  82d928:	e0bff317 	ldw	r2,-52(fp)
  82d92c:	10800017 	ldw	r2,0(r2)
  82d930:	e0bff315 	stw	r2,-52(fp)
  82d934:	e0bff317 	ldw	r2,-52(fp)
  82d938:	1004c03a 	cmpne	r2,r2,zero
  82d93c:	103ff71e 	bne	r2,zero,82d91c <t_bind+0x40>
  82d940:	e0fff317 	ldw	r3,-52(fp)
  82d944:	e0bff517 	ldw	r2,-44(fp)
  82d948:	18800426 	beq	r3,r2,82d95c <t_bind+0x80>
  82d94c:	082a7c80 	call	82a7c8 <dtrap>
  82d950:	00bfffc4 	movi	r2,-1
  82d954:	e0bfff15 	stw	r2,-4(fp)
  82d958:	00003906 	br	82da40 <t_bind+0x164>
   DOMAIN_CHECK(so, addrlen);
  82d95c:	e13ff517 	ldw	r4,-44(fp)
  82d960:	e17ffe17 	ldw	r5,-8(fp)
  82d964:	082d8000 	call	82d800 <DOMAIN_CHECK>

   so->so_error = 0;
  82d968:	e0bff517 	ldw	r2,-44(fp)
  82d96c:	10000615 	stw	zero,24(r2)
   if (addr == (struct sockaddr *)NULL) 
  82d970:	e0bffd17 	ldw	r2,-12(fp)
  82d974:	1004c03a 	cmpne	r2,r2,zero
  82d978:	10000d1e 	bne	r2,zero,82d9b0 <t_bind+0xd4>
   {
      MEMSET ((void *)&sa, 0, sizeof(sa));
  82d97c:	e0bff804 	addi	r2,fp,-32
  82d980:	10000015 	stw	zero,0(r2)
  82d984:	10000115 	stw	zero,4(r2)
  82d988:	10000215 	stw	zero,8(r2)
  82d98c:	10000315 	stw	zero,12(r2)
      addrlen = sizeof(sa);
  82d990:	00800404 	movi	r2,16
  82d994:	e0bffe15 	stw	r2,-8(fp)
      sa.sa_family = so->so_domain;
  82d998:	e0bff517 	ldw	r2,-44(fp)
  82d99c:	10800517 	ldw	r2,20(r2)
  82d9a0:	e0bff80d 	sth	r2,-32(fp)
      sap = &sa;
  82d9a4:	e0bff804 	addi	r2,fp,-32
  82d9a8:	e0bff615 	stw	r2,-40(fp)
  82d9ac:	00000206 	br	82d9b8 <t_bind+0xdc>
   } else
      sap = addr;
  82d9b0:	e0bffd17 	ldw	r2,-12(fp)
  82d9b4:	e0bff615 	stw	r2,-40(fp)

   if ((nam = sockargs (sap, addrlen, MT_SONAME)) == NULL) 
  82d9b8:	e13ff617 	ldw	r4,-40(fp)
  82d9bc:	e17ffe17 	ldw	r5,-8(fp)
  82d9c0:	01800244 	movi	r6,9
  82d9c4:	082eec80 	call	82eec8 <sockargs>
  82d9c8:	e0bff715 	stw	r2,-36(fp)
  82d9cc:	e0bff717 	ldw	r2,-36(fp)
  82d9d0:	1004c03a 	cmpne	r2,r2,zero
  82d9d4:	1000061e 	bne	r2,zero,82d9f0 <t_bind+0x114>
   {
      so->so_error = ENOMEM;
  82d9d8:	e0fff517 	ldw	r3,-44(fp)
  82d9dc:	00800304 	movi	r2,12
  82d9e0:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82d9e4:	00bfffc4 	movi	r2,-1
  82d9e8:	e0bfff15 	stw	r2,-4(fp)
  82d9ec:	00001406 	br	82da40 <t_bind+0x164>
   }
   LOCK_NET_RESOURCE(NET_RESID);
  82d9f0:	0009883a 	mov	r4,zero
  82d9f4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   err = sobind (so, nam);
  82d9f8:	e13ff517 	ldw	r4,-44(fp)
  82d9fc:	e17ff717 	ldw	r5,-36(fp)
  82da00:	082f1c80 	call	82f1c8 <sobind>
  82da04:	e0bff415 	stw	r2,-48(fp)
   m_freem(nam);
  82da08:	e13ff717 	ldw	r4,-36(fp)
  82da0c:	082b8a40 	call	82b8a4 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
  82da10:	0009883a 	mov	r4,zero
  82da14:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   if (err) 
  82da18:	e0bff417 	ldw	r2,-48(fp)
  82da1c:	1005003a 	cmpeq	r2,r2,zero
  82da20:	1000061e 	bne	r2,zero,82da3c <t_bind+0x160>
   {
      so->so_error = err;
  82da24:	e0fff517 	ldw	r3,-44(fp)
  82da28:	e0bff417 	ldw	r2,-48(fp)
  82da2c:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82da30:	00bfffc4 	movi	r2,-1
  82da34:	e0bfff15 	stw	r2,-4(fp)
  82da38:	00000106 	br	82da40 <t_bind+0x164>
   }
   return 0;
  82da3c:	e03fff15 	stw	zero,-4(fp)
  82da40:	e0bfff17 	ldw	r2,-4(fp)
}
  82da44:	e037883a 	mov	sp,fp
  82da48:	dfc00117 	ldw	ra,4(sp)
  82da4c:	df000017 	ldw	fp,0(sp)
  82da50:	dec00204 	addi	sp,sp,8
  82da54:	f800283a 	ret

0082da58 <t_listen>:
 */

int
t_listen(long s, 
   int   backlog)
{
  82da58:	defff804 	addi	sp,sp,-32
  82da5c:	dfc00715 	stw	ra,28(sp)
  82da60:	df000615 	stw	fp,24(sp)
  82da64:	df000604 	addi	fp,sp,24
  82da68:	e13ffd15 	stw	r4,-12(fp)
  82da6c:	e17ffe15 	stw	r5,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
  82da70:	e0bffd17 	ldw	r2,-12(fp)
  82da74:	10bff804 	addi	r2,r2,-32
  82da78:	1085883a 	add	r2,r2,r2
  82da7c:	1085883a 	add	r2,r2,r2
  82da80:	e0bffc15 	stw	r2,-16(fp)
   SOC_CHECK(so);
  82da84:	00803934 	movhi	r2,228
  82da88:	10a8d904 	addi	r2,r2,-23708
  82da8c:	e0bffa15 	stw	r2,-24(fp)
  82da90:	00000606 	br	82daac <t_listen+0x54>
  82da94:	e0fffa17 	ldw	r3,-24(fp)
  82da98:	e0bffc17 	ldw	r2,-16(fp)
  82da9c:	18800626 	beq	r3,r2,82dab8 <t_listen+0x60>
  82daa0:	e0bffa17 	ldw	r2,-24(fp)
  82daa4:	10800017 	ldw	r2,0(r2)
  82daa8:	e0bffa15 	stw	r2,-24(fp)
  82daac:	e0bffa17 	ldw	r2,-24(fp)
  82dab0:	1004c03a 	cmpne	r2,r2,zero
  82dab4:	103ff71e 	bne	r2,zero,82da94 <t_listen+0x3c>
  82dab8:	e0fffa17 	ldw	r3,-24(fp)
  82dabc:	e0bffc17 	ldw	r2,-16(fp)
  82dac0:	18800426 	beq	r3,r2,82dad4 <t_listen+0x7c>
  82dac4:	082a7c80 	call	82a7c8 <dtrap>
  82dac8:	00bfffc4 	movi	r2,-1
  82dacc:	e0bfff15 	stw	r2,-4(fp)
  82dad0:	00001406 	br	82db24 <t_listen+0xcc>
   so->so_error = 0;
  82dad4:	e0bffc17 	ldw	r2,-16(fp)
  82dad8:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("SOCK:listen:qlen %d\n", backlog));

   LOCK_NET_RESOURCE(NET_RESID);
  82dadc:	0009883a 	mov	r4,zero
  82dae0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   err = solisten (so, backlog);
  82dae4:	e13ffc17 	ldw	r4,-16(fp)
  82dae8:	e17ffe17 	ldw	r5,-8(fp)
  82daec:	082f2240 	call	82f224 <solisten>
  82daf0:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
  82daf4:	0009883a 	mov	r4,zero
  82daf8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
  82dafc:	e0bffb17 	ldw	r2,-20(fp)
  82db00:	1005003a 	cmpeq	r2,r2,zero
  82db04:	1000061e 	bne	r2,zero,82db20 <t_listen+0xc8>
   {
      so->so_error = err;
  82db08:	e0fffc17 	ldw	r3,-16(fp)
  82db0c:	e0bffb17 	ldw	r2,-20(fp)
  82db10:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82db14:	00bfffc4 	movi	r2,-1
  82db18:	e0bfff15 	stw	r2,-4(fp)
  82db1c:	00000106 	br	82db24 <t_listen+0xcc>
   }
   return 0;
  82db20:	e03fff15 	stw	zero,-4(fp)
  82db24:	e0bfff17 	ldw	r2,-4(fp)
}
  82db28:	e037883a 	mov	sp,fp
  82db2c:	dfc00117 	ldw	ra,4(sp)
  82db30:	df000017 	ldw	fp,0(sp)
  82db34:	dec00204 	addi	sp,sp,8
  82db38:	f800283a 	ret

0082db3c <t_accept>:

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
  82db3c:	defff604 	addi	sp,sp,-40
  82db40:	dfc00915 	stw	ra,36(sp)
  82db44:	df000815 	stw	fp,32(sp)
  82db48:	df000804 	addi	fp,sp,32
  82db4c:	e13ffc15 	stw	r4,-16(fp)
  82db50:	e17ffd15 	stw	r5,-12(fp)
  82db54:	e1bffe15 	stw	r6,-8(fp)
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
  82db58:	e0bffc17 	ldw	r2,-16(fp)
  82db5c:	10bff804 	addi	r2,r2,-32
  82db60:	1085883a 	add	r2,r2,r2
  82db64:	1085883a 	add	r2,r2,r2
  82db68:	e0bffb15 	stw	r2,-20(fp)
   SOC_CHECK(so);
  82db6c:	00803934 	movhi	r2,228
  82db70:	10a8d904 	addi	r2,r2,-23708
  82db74:	e0bff915 	stw	r2,-28(fp)
  82db78:	00000606 	br	82db94 <t_accept+0x58>
  82db7c:	e0fff917 	ldw	r3,-28(fp)
  82db80:	e0bffb17 	ldw	r2,-20(fp)
  82db84:	18800626 	beq	r3,r2,82dba0 <t_accept+0x64>
  82db88:	e0bff917 	ldw	r2,-28(fp)
  82db8c:	10800017 	ldw	r2,0(r2)
  82db90:	e0bff915 	stw	r2,-28(fp)
  82db94:	e0bff917 	ldw	r2,-28(fp)
  82db98:	1004c03a 	cmpne	r2,r2,zero
  82db9c:	103ff71e 	bne	r2,zero,82db7c <t_accept+0x40>
  82dba0:	e0fff917 	ldw	r3,-28(fp)
  82dba4:	e0bffb17 	ldw	r2,-20(fp)
  82dba8:	18800426 	beq	r3,r2,82dbbc <t_accept+0x80>
  82dbac:	082a7c80 	call	82a7c8 <dtrap>
  82dbb0:	00bfffc4 	movi	r2,-1
  82dbb4:	e0bfff15 	stw	r2,-4(fp)
  82dbb8:	00008006 	br	82ddbc <t_accept+0x280>
   DOMAIN_CHECK(so, *addrlen);
  82dbbc:	e0bffe17 	ldw	r2,-8(fp)
  82dbc0:	11400017 	ldw	r5,0(r2)
  82dbc4:	e13ffb17 	ldw	r4,-20(fp)
  82dbc8:	082d8000 	call	82d800 <DOMAIN_CHECK>

   so->so_error = 0;
  82dbcc:	e0bffb17 	ldw	r2,-20(fp)
  82dbd0:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
  82dbd4:	e0bffb17 	ldw	r2,-20(fp)
  82dbd8:	10800417 	ldw	r2,16(r2)
  82dbdc:	1080008c 	andi	r2,r2,2
  82dbe0:	1004c03a 	cmpne	r2,r2,zero
  82dbe4:	1000061e 	bne	r2,zero,82dc00 <t_accept+0xc4>
   {
      so->so_error = EINVAL;
  82dbe8:	e0fffb17 	ldw	r3,-20(fp)
  82dbec:	00800584 	movi	r2,22
  82dbf0:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
  82dbf4:	00bfffc4 	movi	r2,-1
  82dbf8:	e0bfff15 	stw	r2,-4(fp)
  82dbfc:	00006f06 	br	82ddbc <t_accept+0x280>
   }
   if ((so->so_state & SS_NBIO) && so->so_qlen == 0)
  82dc00:	e0bffb17 	ldw	r2,-20(fp)
  82dc04:	1080088b 	ldhu	r2,34(r2)
  82dc08:	10bfffcc 	andi	r2,r2,65535
  82dc0c:	1080400c 	andi	r2,r2,256
  82dc10:	1005003a 	cmpeq	r2,r2,zero
  82dc14:	10000d1e 	bne	r2,zero,82dc4c <t_accept+0x110>
  82dc18:	e0bffb17 	ldw	r2,-20(fp)
  82dc1c:	10801e43 	ldbu	r2,121(r2)
  82dc20:	10803fcc 	andi	r2,r2,255
  82dc24:	1080201c 	xori	r2,r2,128
  82dc28:	10bfe004 	addi	r2,r2,-128
  82dc2c:	1004c03a 	cmpne	r2,r2,zero
  82dc30:	1000061e 	bne	r2,zero,82dc4c <t_accept+0x110>
   {
      so->so_error = EWOULDBLOCK;
  82dc34:	e0fffb17 	ldw	r3,-20(fp)
  82dc38:	008002c4 	movi	r2,11
  82dc3c:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
  82dc40:	00bfffc4 	movi	r2,-1
  82dc44:	e0bfff15 	stw	r2,-4(fp)
  82dc48:	00005c06 	br	82ddbc <t_accept+0x280>
   }
   LOCK_NET_RESOURCE(NET_RESID);
  82dc4c:	0009883a 	mov	r4,zero
  82dc50:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   while (so->so_qlen == 0 && so->so_error == 0)
  82dc54:	00001206 	br	82dca0 <t_accept+0x164>
   {
      if (so->so_state & SS_CANTRCVMORE)
  82dc58:	e0bffb17 	ldw	r2,-20(fp)
  82dc5c:	1080088b 	ldhu	r2,34(r2)
  82dc60:	10bfffcc 	andi	r2,r2,65535
  82dc64:	1080080c 	andi	r2,r2,32
  82dc68:	1005003a 	cmpeq	r2,r2,zero
  82dc6c:	1000081e 	bne	r2,zero,82dc90 <t_accept+0x154>
      {
         so->so_error = ECONNABORTED;
  82dc70:	e0fffb17 	ldw	r3,-20(fp)
  82dc74:	00801c44 	movi	r2,113
  82dc78:	18800615 	stw	r2,24(r3)
         UNLOCK_NET_RESOURCE(NET_RESID);
  82dc7c:	0009883a 	mov	r4,zero
  82dc80:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
  82dc84:	00bfffc4 	movi	r2,-1
  82dc88:	e0bfff15 	stw	r2,-4(fp)
  82dc8c:	00004b06 	br	82ddbc <t_accept+0x280>
      }
      tcp_sleep ((char *)&so->so_timeo);
  82dc90:	e0bffb17 	ldw	r2,-20(fp)
  82dc94:	10800904 	addi	r2,r2,36
  82dc98:	1009883a 	mov	r4,r2
  82dc9c:	082639c0 	call	82639c <tcp_sleep>
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
   while (so->so_qlen == 0 && so->so_error == 0)
  82dca0:	e0bffb17 	ldw	r2,-20(fp)
  82dca4:	10801e43 	ldbu	r2,121(r2)
  82dca8:	10803fcc 	andi	r2,r2,255
  82dcac:	1080201c 	xori	r2,r2,128
  82dcb0:	10bfe004 	addi	r2,r2,-128
  82dcb4:	1004c03a 	cmpne	r2,r2,zero
  82dcb8:	1000041e 	bne	r2,zero,82dccc <t_accept+0x190>
  82dcbc:	e0bffb17 	ldw	r2,-20(fp)
  82dcc0:	10800617 	ldw	r2,24(r2)
  82dcc4:	1005003a 	cmpeq	r2,r2,zero
  82dcc8:	103fe31e 	bne	r2,zero,82dc58 <t_accept+0x11c>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return SOCKET_ERROR;
      }
      tcp_sleep ((char *)&so->so_timeo);
   }
   if (so->so_error)
  82dccc:	e0bffb17 	ldw	r2,-20(fp)
  82dcd0:	10800617 	ldw	r2,24(r2)
  82dcd4:	1005003a 	cmpeq	r2,r2,zero
  82dcd8:	1000051e 	bne	r2,zero,82dcf0 <t_accept+0x1b4>
   {
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
  82dcdc:	0009883a 	mov	r4,zero
  82dce0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
  82dce4:	00bfffc4 	movi	r2,-1
  82dce8:	e0bfff15 	stw	r2,-4(fp)
  82dcec:	00003306 	br	82ddbc <t_accept+0x280>
   }
   nam = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
  82dcf0:	01000244 	movi	r4,9
  82dcf4:	01400404 	movi	r5,16
  82dcf8:	082b5c80 	call	82b5c8 <m_getnbuf>
  82dcfc:	e0bffa15 	stw	r2,-24(fp)
   if (nam == NULL) 
  82dd00:	e0bffa17 	ldw	r2,-24(fp)
  82dd04:	1004c03a 	cmpne	r2,r2,zero
  82dd08:	1000081e 	bne	r2,zero,82dd2c <t_accept+0x1f0>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
  82dd0c:	0009883a 	mov	r4,zero
  82dd10:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      so->so_error = ENOMEM;
  82dd14:	e0fffb17 	ldw	r3,-20(fp)
  82dd18:	00800304 	movi	r2,12
  82dd1c:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
  82dd20:	00bfffc4 	movi	r2,-1
  82dd24:	e0bfff15 	stw	r2,-4(fp)
  82dd28:	00002406 	br	82ddbc <t_accept+0x280>
   }
   { 
      struct socket *aso = so->so_q;
  82dd2c:	e0bffb17 	ldw	r2,-20(fp)
  82dd30:	10801d17 	ldw	r2,116(r2)
  82dd34:	e0bff815 	stw	r2,-32(fp)
      if (soqremque (aso, 1) == 0)
  82dd38:	e13ff817 	ldw	r4,-32(fp)
  82dd3c:	01400044 	movi	r5,1
  82dd40:	08318e80 	call	8318e8 <soqremque>
  82dd44:	1004c03a 	cmpne	r2,r2,zero
  82dd48:	1000031e 	bne	r2,zero,82dd58 <t_accept+0x21c>
         panic("accept");
  82dd4c:	01002174 	movhi	r4,133
  82dd50:	2136d704 	addi	r4,r4,-9380
  82dd54:	0825a2c0 	call	825a2c <panic>
      so = aso;
  82dd58:	e0bff817 	ldw	r2,-32(fp)
  82dd5c:	e0bffb15 	stw	r2,-20(fp)
   }
   (void)soaccept (so, nam);
  82dd60:	e13ffb17 	ldw	r4,-20(fp)
  82dd64:	e17ffa17 	ldw	r5,-24(fp)
  82dd68:	082f7880 	call	82f788 <soaccept>
      INET_TRACE (INETM_SOCKET, ("INET:accept:done so %lx port %d addr %lx\n",
       so, sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_INET */
   /* return the addressing info in the passed structure */
   if (addr != NULL)
  82dd6c:	e0bffd17 	ldw	r2,-12(fp)
  82dd70:	1005003a 	cmpeq	r2,r2,zero
  82dd74:	1000091e 	bne	r2,zero,82dd9c <t_accept+0x260>
      MEMCPY(addr, nam->m_data, *addrlen);
  82dd78:	e0bffa17 	ldw	r2,-24(fp)
  82dd7c:	11400317 	ldw	r5,12(r2)
  82dd80:	e0bffe17 	ldw	r2,-8(fp)
  82dd84:	10800017 	ldw	r2,0(r2)
  82dd88:	1007883a 	mov	r3,r2
  82dd8c:	e0bffd17 	ldw	r2,-12(fp)
  82dd90:	1009883a 	mov	r4,r2
  82dd94:	180d883a 	mov	r6,r3
  82dd98:	08073380 	call	807338 <memcpy>
   m_freem (nam);
  82dd9c:	e13ffa17 	ldw	r4,-24(fp)
  82dda0:	082b8a40 	call	82b8a4 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
  82dda4:	0009883a 	mov	r4,zero
  82dda8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   SOC_RANGE(so);
   return SO2LONG(so);
  82ddac:	e0bffb17 	ldw	r2,-20(fp)
  82ddb0:	1004d0ba 	srli	r2,r2,2
  82ddb4:	10800804 	addi	r2,r2,32
  82ddb8:	e0bfff15 	stw	r2,-4(fp)
  82ddbc:	e0bfff17 	ldw	r2,-4(fp)
}
  82ddc0:	e037883a 	mov	sp,fp
  82ddc4:	dfc00117 	ldw	ra,4(sp)
  82ddc8:	df000017 	ldw	fp,0(sp)
  82ddcc:	dec00204 	addi	sp,sp,8
  82ddd0:	f800283a 	ret

0082ddd4 <t_connect>:

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
  82ddd4:	defff704 	addi	sp,sp,-36
  82ddd8:	dfc00815 	stw	ra,32(sp)
  82dddc:	df000715 	stw	fp,28(sp)
  82dde0:	df000704 	addi	fp,sp,28
  82dde4:	e13ffc15 	stw	r4,-16(fp)
  82dde8:	e17ffd15 	stw	r5,-12(fp)
  82ddec:	e1bffe15 	stw	r6,-8(fp)
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
  82ddf0:	e0bffc17 	ldw	r2,-16(fp)
  82ddf4:	10bff804 	addi	r2,r2,-32
  82ddf8:	1085883a 	add	r2,r2,r2
  82ddfc:	1085883a 	add	r2,r2,r2
  82de00:	e0bffb15 	stw	r2,-20(fp)
   SOC_CHECK(so);
  82de04:	00803934 	movhi	r2,228
  82de08:	10a8d904 	addi	r2,r2,-23708
  82de0c:	e0bff915 	stw	r2,-28(fp)
  82de10:	00000606 	br	82de2c <t_connect+0x58>
  82de14:	e0fff917 	ldw	r3,-28(fp)
  82de18:	e0bffb17 	ldw	r2,-20(fp)
  82de1c:	18800626 	beq	r3,r2,82de38 <t_connect+0x64>
  82de20:	e0bff917 	ldw	r2,-28(fp)
  82de24:	10800017 	ldw	r2,0(r2)
  82de28:	e0bff915 	stw	r2,-28(fp)
  82de2c:	e0bff917 	ldw	r2,-28(fp)
  82de30:	1004c03a 	cmpne	r2,r2,zero
  82de34:	103ff71e 	bne	r2,zero,82de14 <t_connect+0x40>
  82de38:	e0fff917 	ldw	r3,-28(fp)
  82de3c:	e0bffb17 	ldw	r2,-20(fp)
  82de40:	18800426 	beq	r3,r2,82de54 <t_connect+0x80>
  82de44:	082a7c80 	call	82a7c8 <dtrap>
  82de48:	00bfffc4 	movi	r2,-1
  82de4c:	e0bfff15 	stw	r2,-4(fp)
  82de50:	00008406 	br	82e064 <t_connect+0x290>
   DOMAIN_CHECK(so, addrlen);
  82de54:	e13ffb17 	ldw	r4,-20(fp)
  82de58:	e17ffe17 	ldw	r5,-8(fp)
  82de5c:	082d8000 	call	82d800 <DOMAIN_CHECK>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits in case this is a 
      poll of a previous request */
   if (so->so_state & SS_NBIO)
  82de60:	e0bffb17 	ldw	r2,-20(fp)
  82de64:	1080088b 	ldhu	r2,34(r2)
  82de68:	10bfffcc 	andi	r2,r2,65535
  82de6c:	1080400c 	andi	r2,r2,256
  82de70:	1005003a 	cmpeq	r2,r2,zero
  82de74:	10002a1e 	bne	r2,zero,82df20 <t_connect+0x14c>
   {
      if (so->so_state & SS_ISCONNECTING) /* still trying */
  82de78:	e0bffb17 	ldw	r2,-20(fp)
  82de7c:	1080088b 	ldhu	r2,34(r2)
  82de80:	10bfffcc 	andi	r2,r2,65535
  82de84:	1080010c 	andi	r2,r2,4
  82de88:	1005003a 	cmpeq	r2,r2,zero
  82de8c:	1000061e 	bne	r2,zero,82dea8 <t_connect+0xd4>
      {
         so->so_error = EINPROGRESS;
  82de90:	e0fffb17 	ldw	r3,-20(fp)
  82de94:	00801dc4 	movi	r2,119
  82de98:	18800615 	stw	r2,24(r3)
         return SOCKET_ERROR;
  82de9c:	00bfffc4 	movi	r2,-1
  82dea0:	e0bfff15 	stw	r2,-4(fp)
  82dea4:	00006f06 	br	82e064 <t_connect+0x290>
      }
      if (so->so_state & SS_ISCONNECTED)  /* connected OK */
  82dea8:	e0bffb17 	ldw	r2,-20(fp)
  82deac:	1080088b 	ldhu	r2,34(r2)
  82deb0:	10bfffcc 	andi	r2,r2,65535
  82deb4:	1080008c 	andi	r2,r2,2
  82deb8:	1005003a 	cmpeq	r2,r2,zero
  82debc:	1000041e 	bne	r2,zero,82ded0 <t_connect+0xfc>
      {
         so->so_error = 0;
  82dec0:	e0bffb17 	ldw	r2,-20(fp)
  82dec4:	10000615 	stw	zero,24(r2)
         return 0;
  82dec8:	e03fff15 	stw	zero,-4(fp)
  82decc:	00006506 	br	82e064 <t_connect+0x290>
      }
      if (so->so_state & SS_WASCONNECTING)
  82ded0:	e0bffb17 	ldw	r2,-20(fp)
  82ded4:	1080088b 	ldhu	r2,34(r2)
  82ded8:	10bfffcc 	andi	r2,r2,65535
  82dedc:	1088000c 	andi	r2,r2,8192
  82dee0:	1005003a 	cmpeq	r2,r2,zero
  82dee4:	10000e1e 	bne	r2,zero,82df20 <t_connect+0x14c>
      {
         so->so_state &= ~SS_WASCONNECTING;
  82dee8:	e0bffb17 	ldw	r2,-20(fp)
  82deec:	10c0088b 	ldhu	r3,34(r2)
  82def0:	00b7ffc4 	movi	r2,-8193
  82def4:	1884703a 	and	r2,r3,r2
  82def8:	1007883a 	mov	r3,r2
  82defc:	e0bffb17 	ldw	r2,-20(fp)
  82df00:	10c0088d 	sth	r3,34(r2)
         if (so->so_error) /* connect error - maybe timeout */
  82df04:	e0bffb17 	ldw	r2,-20(fp)
  82df08:	10800617 	ldw	r2,24(r2)
  82df0c:	1005003a 	cmpeq	r2,r2,zero
  82df10:	1000031e 	bne	r2,zero,82df20 <t_connect+0x14c>
            return SOCKET_ERROR;
  82df14:	00bfffc4 	movi	r2,-1
  82df18:	e0bfff15 	stw	r2,-4(fp)
  82df1c:	00005106 	br	82e064 <t_connect+0x290>
      }
   }
#endif   /*  NB_CONNECT */

   so->so_error = 0;
  82df20:	e0bffb17 	ldw	r2,-20(fp)
  82df24:	10000615 	stw	zero,24(r2)

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
  82df28:	e13ffd17 	ldw	r4,-12(fp)
  82df2c:	e17ffe17 	ldw	r5,-8(fp)
  82df30:	01800244 	movi	r6,9
  82df34:	082eec80 	call	82eec8 <sockargs>
  82df38:	e0bffa15 	stw	r2,-24(fp)
  82df3c:	e0bffa17 	ldw	r2,-24(fp)
  82df40:	1004c03a 	cmpne	r2,r2,zero
  82df44:	1000061e 	bne	r2,zero,82df60 <t_connect+0x18c>
       == NULL)
   {
      so->so_error = ENOMEM;
  82df48:	e0fffb17 	ldw	r3,-20(fp)
  82df4c:	00800304 	movi	r2,12
  82df50:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82df54:	00bfffc4 	movi	r2,-1
  82df58:	e0bfff15 	stw	r2,-4(fp)
  82df5c:	00004106 	br	82e064 <t_connect+0x290>
      INET_TRACE (INETM_SOCKET, ("INET: connect, port %d addr %lx\n",
       sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_DEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
  82df60:	0009883a 	mov	r4,zero
  82df64:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   if ((so->so_error = soconnect (so, nam)) != 0)
  82df68:	e13ffb17 	ldw	r4,-20(fp)
  82df6c:	e17ffa17 	ldw	r5,-24(fp)
  82df70:	082f8240 	call	82f824 <soconnect>
  82df74:	1007883a 	mov	r3,r2
  82df78:	e0bffb17 	ldw	r2,-20(fp)
  82df7c:	10c00615 	stw	r3,24(r2)
  82df80:	e0bffb17 	ldw	r2,-20(fp)
  82df84:	10800617 	ldw	r2,24(r2)
  82df88:	1004c03a 	cmpne	r2,r2,zero
  82df8c:	10001e1e 	bne	r2,zero,82e008 <t_connect+0x234>
      goto bad;

#ifdef NB_CONNECT
   /* need to test non blocking connect bits after soconnect() call */
   if ((so->so_state & SS_NBIO)&& (so->so_state & SS_ISCONNECTING))
  82df90:	e0bffb17 	ldw	r2,-20(fp)
  82df94:	1080088b 	ldhu	r2,34(r2)
  82df98:	10bfffcc 	andi	r2,r2,65535
  82df9c:	1080400c 	andi	r2,r2,256
  82dfa0:	1005003a 	cmpeq	r2,r2,zero
  82dfa4:	10000e1e 	bne	r2,zero,82dfe0 <t_connect+0x20c>
  82dfa8:	e0bffb17 	ldw	r2,-20(fp)
  82dfac:	1080088b 	ldhu	r2,34(r2)
  82dfb0:	10bfffcc 	andi	r2,r2,65535
  82dfb4:	1080010c 	andi	r2,r2,4
  82dfb8:	1005003a 	cmpeq	r2,r2,zero
  82dfbc:	1000081e 	bne	r2,zero,82dfe0 <t_connect+0x20c>
   {
      so->so_error = EINPROGRESS;
  82dfc0:	e0fffb17 	ldw	r3,-20(fp)
  82dfc4:	00801dc4 	movi	r2,119
  82dfc8:	18800615 	stw	r2,24(r3)
      goto bad;
  82dfcc:	00000e06 	br	82e008 <t_connect+0x234>
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
   {
      tcp_sleep ((char *)&so->so_timeo);
  82dfd0:	e0bffb17 	ldw	r2,-20(fp)
  82dfd4:	10800904 	addi	r2,r2,36
  82dfd8:	1009883a 	mov	r4,r2
  82dfdc:	082639c0 	call	82639c <tcp_sleep>
   }
#endif   /*  NB_CONNECT */
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
  82dfe0:	e0bffb17 	ldw	r2,-20(fp)
  82dfe4:	1080088b 	ldhu	r2,34(r2)
  82dfe8:	10bfffcc 	andi	r2,r2,65535
  82dfec:	1080010c 	andi	r2,r2,4
  82dff0:	1005003a 	cmpeq	r2,r2,zero
  82dff4:	1000041e 	bne	r2,zero,82e008 <t_connect+0x234>
  82dff8:	e0bffb17 	ldw	r2,-20(fp)
  82dffc:	10800617 	ldw	r2,24(r2)
  82e000:	1005003a 	cmpeq	r2,r2,zero
  82e004:	103ff21e 	bne	r2,zero,82dfd0 <t_connect+0x1fc>
   {
      tcp_sleep ((char *)&so->so_timeo);
   }
bad:
   if (so->so_error != EINPROGRESS)
  82e008:	e0bffb17 	ldw	r2,-20(fp)
  82e00c:	10800617 	ldw	r2,24(r2)
  82e010:	10801de0 	cmpeqi	r2,r2,119
  82e014:	1000071e 	bne	r2,zero,82e034 <t_connect+0x260>
      so->so_state &= ~(SS_ISCONNECTING|SS_WASCONNECTING);
  82e018:	e0bffb17 	ldw	r2,-20(fp)
  82e01c:	10c0088b 	ldhu	r3,34(r2)
  82e020:	00b7fec4 	movi	r2,-8197
  82e024:	1884703a 	and	r2,r3,r2
  82e028:	1007883a 	mov	r3,r2
  82e02c:	e0bffb17 	ldw	r2,-20(fp)
  82e030:	10c0088d 	sth	r3,34(r2)
   m_freem (nam);
  82e034:	e13ffa17 	ldw	r4,-24(fp)
  82e038:	082b8a40 	call	82b8a4 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
  82e03c:	0009883a 	mov	r4,zero
  82e040:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   if (so->so_error)
  82e044:	e0bffb17 	ldw	r2,-20(fp)
  82e048:	10800617 	ldw	r2,24(r2)
  82e04c:	1005003a 	cmpeq	r2,r2,zero
  82e050:	1000031e 	bne	r2,zero,82e060 <t_connect+0x28c>
   {
/*      printf("t_connect(): so_error = %d\n", so->so_error);*/
      return SOCKET_ERROR;
  82e054:	00bfffc4 	movi	r2,-1
  82e058:	e0bfff15 	stw	r2,-4(fp)
  82e05c:	00000106 	br	82e064 <t_connect+0x290>

   }
      return 0;
  82e060:	e03fff15 	stw	zero,-4(fp)
  82e064:	e0bfff17 	ldw	r2,-4(fp)
}
  82e068:	e037883a 	mov	sp,fp
  82e06c:	dfc00117 	ldw	ra,4(sp)
  82e070:	df000017 	ldw	fp,0(sp)
  82e074:	dec00204 	addi	sp,sp,8
  82e078:	f800283a 	ret

0082e07c <t_getpeername>:
 * RETURNS: 
 */

int
t_getpeername(long s, struct sockaddr * addr, int * addrlen)
{
  82e07c:	defffb04 	addi	sp,sp,-20
  82e080:	dfc00415 	stw	ra,16(sp)
  82e084:	df000315 	stw	fp,12(sp)
  82e088:	df000304 	addi	fp,sp,12
  82e08c:	e13ffd15 	stw	r4,-12(fp)
  82e090:	e17ffe15 	stw	r5,-8(fp)
  82e094:	e1bfff15 	stw	r6,-4(fp)
   return(t_getname(s, addr, addrlen, PRU_PEERADDR));
  82e098:	e13ffd17 	ldw	r4,-12(fp)
  82e09c:	e17ffe17 	ldw	r5,-8(fp)
  82e0a0:	e1bfff17 	ldw	r6,-4(fp)
  82e0a4:	01c00404 	movi	r7,16
  82e0a8:	082e1040 	call	82e104 <t_getname>
}
  82e0ac:	e037883a 	mov	sp,fp
  82e0b0:	dfc00117 	ldw	ra,4(sp)
  82e0b4:	df000017 	ldw	fp,0(sp)
  82e0b8:	dec00204 	addi	sp,sp,8
  82e0bc:	f800283a 	ret

0082e0c0 <t_getsockname>:
 * RETURNS: 
 */

int 
t_getsockname(long s, struct sockaddr * addr, int * addrlen)
{
  82e0c0:	defffb04 	addi	sp,sp,-20
  82e0c4:	dfc00415 	stw	ra,16(sp)
  82e0c8:	df000315 	stw	fp,12(sp)
  82e0cc:	df000304 	addi	fp,sp,12
  82e0d0:	e13ffd15 	stw	r4,-12(fp)
  82e0d4:	e17ffe15 	stw	r5,-8(fp)
  82e0d8:	e1bfff15 	stw	r6,-4(fp)
   return(t_getname(s, addr, addrlen, PRU_SOCKADDR));
  82e0dc:	e13ffd17 	ldw	r4,-12(fp)
  82e0e0:	e17ffe17 	ldw	r5,-8(fp)
  82e0e4:	e1bfff17 	ldw	r6,-4(fp)
  82e0e8:	01c003c4 	movi	r7,15
  82e0ec:	082e1040 	call	82e104 <t_getname>
}
  82e0f0:	e037883a 	mov	sp,fp
  82e0f4:	dfc00117 	ldw	ra,4(sp)
  82e0f8:	df000017 	ldw	fp,0(sp)
  82e0fc:	dec00204 	addi	sp,sp,8
  82e100:	f800283a 	ret

0082e104 <t_getname>:
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
  82e104:	defff504 	addi	sp,sp,-44
  82e108:	dfc00a15 	stw	ra,40(sp)
  82e10c:	df000915 	stw	fp,36(sp)
  82e110:	df000904 	addi	fp,sp,36
  82e114:	e13ffb15 	stw	r4,-20(fp)
  82e118:	e17ffc15 	stw	r5,-16(fp)
  82e11c:	e1bffd15 	stw	r6,-12(fp)
  82e120:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
  82e124:	e0bffb17 	ldw	r2,-20(fp)
  82e128:	10bff804 	addi	r2,r2,-32
  82e12c:	1085883a 	add	r2,r2,r2
  82e130:	1085883a 	add	r2,r2,r2
  82e134:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
  82e138:	00803934 	movhi	r2,228
  82e13c:	10a8d904 	addi	r2,r2,-23708
  82e140:	e0bff715 	stw	r2,-36(fp)
  82e144:	00000606 	br	82e160 <t_getname+0x5c>
  82e148:	e0fff717 	ldw	r3,-36(fp)
  82e14c:	e0bffa17 	ldw	r2,-24(fp)
  82e150:	18800626 	beq	r3,r2,82e16c <t_getname+0x68>
  82e154:	e0bff717 	ldw	r2,-36(fp)
  82e158:	10800017 	ldw	r2,0(r2)
  82e15c:	e0bff715 	stw	r2,-36(fp)
  82e160:	e0bff717 	ldw	r2,-36(fp)
  82e164:	1004c03a 	cmpne	r2,r2,zero
  82e168:	103ff71e 	bne	r2,zero,82e148 <t_getname+0x44>
  82e16c:	e0fff717 	ldw	r3,-36(fp)
  82e170:	e0bffa17 	ldw	r2,-24(fp)
  82e174:	18800426 	beq	r3,r2,82e188 <t_getname+0x84>
  82e178:	082a7c80 	call	82a7c8 <dtrap>
  82e17c:	00bfffc4 	movi	r2,-1
  82e180:	e0bfff15 	stw	r2,-4(fp)
  82e184:	00005806 	br	82e2e8 <t_getname+0x1e4>

   so->so_error = 0;
  82e188:	e0bffa17 	ldw	r2,-24(fp)
  82e18c:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
  82e190:	e0bffe17 	ldw	r2,-8(fp)
  82e194:	10800418 	cmpnei	r2,r2,16
  82e198:	10000c1e 	bne	r2,zero,82e1cc <t_getname+0xc8>
  82e19c:	e0bffa17 	ldw	r2,-24(fp)
  82e1a0:	1080088b 	ldhu	r2,34(r2)
  82e1a4:	10bfffcc 	andi	r2,r2,65535
  82e1a8:	1080008c 	andi	r2,r2,2
  82e1ac:	1004c03a 	cmpne	r2,r2,zero
  82e1b0:	1000061e 	bne	r2,zero,82e1cc <t_getname+0xc8>
   {
      so->so_error = ENOTCONN;
  82e1b4:	e0fffa17 	ldw	r3,-24(fp)
  82e1b8:	00802004 	movi	r2,128
  82e1bc:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82e1c0:	00bfffc4 	movi	r2,-1
  82e1c4:	e0bfff15 	stw	r2,-4(fp)
  82e1c8:	00004706 	br	82e2e8 <t_getname+0x1e4>
   }
   LOCK_NET_RESOURCE(NET_RESID);
  82e1cc:	0009883a 	mov	r4,zero
  82e1d0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
  82e1d4:	01000244 	movi	r4,9
  82e1d8:	01400404 	movi	r5,16
  82e1dc:	082b5c80 	call	82b5c8 <m_getnbuf>
  82e1e0:	e0bff915 	stw	r2,-28(fp)
   if (m == NULL) 
  82e1e4:	e0bff917 	ldw	r2,-28(fp)
  82e1e8:	1004c03a 	cmpne	r2,r2,zero
  82e1ec:	1000081e 	bne	r2,zero,82e210 <t_getname+0x10c>
   {
      so->so_error = ENOMEM;
  82e1f0:	e0fffa17 	ldw	r3,-24(fp)
  82e1f4:	00800304 	movi	r2,12
  82e1f8:	18800615 	stw	r2,24(r3)
      UNLOCK_NET_RESOURCE(NET_RESID);
  82e1fc:	0009883a 	mov	r4,zero
  82e200:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
  82e204:	00bfffc4 	movi	r2,-1
  82e208:	e0bfff15 	stw	r2,-4(fp)
  82e20c:	00003606 	br	82e2e8 <t_getname+0x1e4>
   }
   so->so_req = opcode;
  82e210:	e0fffa17 	ldw	r3,-24(fp)
  82e214:	e0bffe17 	ldw	r2,-8(fp)
  82e218:	18800715 	stw	r2,28(r3)
   if ((err = (*so->so_proto->pr_usrreq)(so, 0, m)) != 0)
  82e21c:	e0bffa17 	ldw	r2,-24(fp)
  82e220:	10800217 	ldw	r2,8(r2)
  82e224:	10800317 	ldw	r2,12(r2)
  82e228:	e13ffa17 	ldw	r4,-24(fp)
  82e22c:	000b883a 	mov	r5,zero
  82e230:	e1bff917 	ldw	r6,-28(fp)
  82e234:	103ee83a 	callr	r2
  82e238:	e0bff815 	stw	r2,-32(fp)
  82e23c:	e0bff817 	ldw	r2,-32(fp)
  82e240:	1004c03a 	cmpne	r2,r2,zero
  82e244:	10001a1e 	bne	r2,zero,82e2b0 <t_getname+0x1ac>
      goto bad;

#ifdef IP_V4
   if(so->so_domain == AF_INET)
  82e248:	e0bffa17 	ldw	r2,-24(fp)
  82e24c:	10800517 	ldw	r2,20(r2)
  82e250:	10800098 	cmpnei	r2,r2,2
  82e254:	1000161e 	bne	r2,zero,82e2b0 <t_getname+0x1ac>
   {
      if(*addrlen < sizeof(struct sockaddr_in))
  82e258:	e0bffd17 	ldw	r2,-12(fp)
  82e25c:	10800017 	ldw	r2,0(r2)
  82e260:	10800428 	cmpgeui	r2,r2,16
  82e264:	1000081e 	bne	r2,zero,82e288 <t_getname+0x184>
      {
         dtrap();    /* programming error */
  82e268:	082a7c80 	call	82a7c8 <dtrap>
         m_freem(m);
  82e26c:	e13ff917 	ldw	r4,-28(fp)
  82e270:	082b8a40 	call	82b8a4 <m_freem>
         UNLOCK_NET_RESOURCE(NET_RESID);
  82e274:	0009883a 	mov	r4,zero
  82e278:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return EINVAL;
  82e27c:	00800584 	movi	r2,22
  82e280:	e0bfff15 	stw	r2,-4(fp)
  82e284:	00001806 	br	82e2e8 <t_getname+0x1e4>
      }
      MEMCPY(addr, m->m_data, sizeof(struct sockaddr_in));
  82e288:	e0bff917 	ldw	r2,-28(fp)
  82e28c:	10c00317 	ldw	r3,12(r2)
  82e290:	e0bffc17 	ldw	r2,-16(fp)
  82e294:	1009883a 	mov	r4,r2
  82e298:	180b883a 	mov	r5,r3
  82e29c:	01800404 	movi	r6,16
  82e2a0:	08073380 	call	807338 <memcpy>
      *addrlen = sizeof(struct sockaddr_in);
  82e2a4:	e0fffd17 	ldw	r3,-12(fp)
  82e2a8:	00800404 	movi	r2,16
  82e2ac:	18800015 	stw	r2,0(r3)
   }
#endif   /* IP_V6 */


bad:
   m_freem(m);
  82e2b0:	e13ff917 	ldw	r4,-28(fp)
  82e2b4:	082b8a40 	call	82b8a4 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
  82e2b8:	0009883a 	mov	r4,zero
  82e2bc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   if (err) 
  82e2c0:	e0bff817 	ldw	r2,-32(fp)
  82e2c4:	1005003a 	cmpeq	r2,r2,zero
  82e2c8:	1000061e 	bne	r2,zero,82e2e4 <t_getname+0x1e0>
   {
      so->so_error = err;
  82e2cc:	e0fffa17 	ldw	r3,-24(fp)
  82e2d0:	e0bff817 	ldw	r2,-32(fp)
  82e2d4:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82e2d8:	00bfffc4 	movi	r2,-1
  82e2dc:	e0bfff15 	stw	r2,-4(fp)
  82e2e0:	00000106 	br	82e2e8 <t_getname+0x1e4>
   }
   return 0;
  82e2e4:	e03fff15 	stw	zero,-4(fp)
  82e2e8:	e0bfff17 	ldw	r2,-4(fp)
}
  82e2ec:	e037883a 	mov	sp,fp
  82e2f0:	dfc00117 	ldw	ra,4(sp)
  82e2f4:	df000017 	ldw	fp,0(sp)
  82e2f8:	dec00204 	addi	sp,sp,8
  82e2fc:	f800283a 	ret

0082e300 <t_setsockopt>:
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
  82e300:	defff604 	addi	sp,sp,-40
  82e304:	dfc00915 	stw	ra,36(sp)
  82e308:	df000815 	stw	fp,32(sp)
  82e30c:	df000804 	addi	fp,sp,32
  82e310:	e13ffb15 	stw	r4,-20(fp)
  82e314:	e17ffc15 	stw	r5,-16(fp)
  82e318:	e1bffd15 	stw	r6,-12(fp)
  82e31c:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
  82e320:	e0bffb17 	ldw	r2,-20(fp)
  82e324:	10bff804 	addi	r2,r2,-32
  82e328:	1085883a 	add	r2,r2,r2
  82e32c:	1085883a 	add	r2,r2,r2
  82e330:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
  82e334:	00803934 	movhi	r2,228
  82e338:	10a8d904 	addi	r2,r2,-23708
  82e33c:	e0bff815 	stw	r2,-32(fp)
  82e340:	00000606 	br	82e35c <t_setsockopt+0x5c>
  82e344:	e0fff817 	ldw	r3,-32(fp)
  82e348:	e0bffa17 	ldw	r2,-24(fp)
  82e34c:	18800626 	beq	r3,r2,82e368 <t_setsockopt+0x68>
  82e350:	e0bff817 	ldw	r2,-32(fp)
  82e354:	10800017 	ldw	r2,0(r2)
  82e358:	e0bff815 	stw	r2,-32(fp)
  82e35c:	e0bff817 	ldw	r2,-32(fp)
  82e360:	1004c03a 	cmpne	r2,r2,zero
  82e364:	103ff71e 	bne	r2,zero,82e344 <t_setsockopt+0x44>
  82e368:	e0fff817 	ldw	r3,-32(fp)
  82e36c:	e0bffa17 	ldw	r2,-24(fp)
  82e370:	18800426 	beq	r3,r2,82e384 <t_setsockopt+0x84>
  82e374:	082a7c80 	call	82a7c8 <dtrap>
  82e378:	00bfffc4 	movi	r2,-1
  82e37c:	e0bfff15 	stw	r2,-4(fp)
  82e380:	00005006 	br	82e4c4 <t_setsockopt+0x1c4>
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
  82e384:	0009883a 	mov	r4,zero
  82e388:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   so->so_error = 0;
  82e38c:	e0bffa17 	ldw	r2,-24(fp)
  82e390:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
    ("INET: setsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
  82e394:	e0bffc17 	ldw	r2,-16(fp)
  82e398:	10800060 	cmpeqi	r2,r2,1
  82e39c:	1000101e 	bne	r2,zero,82e3e0 <t_setsockopt+0xe0>
   {
      if ((err = sosetopt (so, name, arg)) != 0) 
  82e3a0:	e13ffa17 	ldw	r4,-24(fp)
  82e3a4:	e17ffd17 	ldw	r5,-12(fp)
  82e3a8:	e1bffe17 	ldw	r6,-8(fp)
  82e3ac:	083092c0 	call	83092c <sosetopt>
  82e3b0:	e0bff915 	stw	r2,-28(fp)
  82e3b4:	e0bff917 	ldw	r2,-28(fp)
  82e3b8:	1005003a 	cmpeq	r2,r2,zero
  82e3bc:	10003e1e 	bne	r2,zero,82e4b8 <t_setsockopt+0x1b8>
      {
         so->so_error = err;
  82e3c0:	e0fffa17 	ldw	r3,-24(fp)
  82e3c4:	e0bff917 	ldw	r2,-28(fp)
  82e3c8:	18800615 	stw	r2,24(r3)
         UNLOCK_NET_RESOURCE (NET_RESID);
  82e3cc:	0009883a 	mov	r4,zero
  82e3d0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
  82e3d4:	00bfffc4 	movi	r2,-1
  82e3d8:	e0bfff15 	stw	r2,-4(fp)
  82e3dc:	00003906 	br	82e4c4 <t_setsockopt+0x1c4>
   {
   /* level 1 options are for the IP packet level.
    * the info is carried in the socket CB, then put 
    * into the PACKET.
    */
      if (!so->so_optsPack)
  82e3e0:	e0bffa17 	ldw	r2,-24(fp)
  82e3e4:	10801f17 	ldw	r2,124(r2)
  82e3e8:	1004c03a 	cmpne	r2,r2,zero
  82e3ec:	1000111e 	bne	r2,zero,82e434 <t_setsockopt+0x134>
      {
         so->so_optsPack = (struct ip_socopts *) SOCOPT_ALLOC (sizeof(struct ip_socopts *));
  82e3f0:	01000104 	movi	r4,4
  82e3f4:	082b20c0 	call	82b20c <npalloc>
  82e3f8:	1007883a 	mov	r3,r2
  82e3fc:	e0bffa17 	ldw	r2,-24(fp)
  82e400:	10c01f15 	stw	r3,124(r2)
         if (!so->so_optsPack) 
  82e404:	e0bffa17 	ldw	r2,-24(fp)
  82e408:	10801f17 	ldw	r2,124(r2)
  82e40c:	1004c03a 	cmpne	r2,r2,zero
  82e410:	1000081e 	bne	r2,zero,82e434 <t_setsockopt+0x134>
         {
            so->so_error = ENOMEM;
  82e414:	e0fffa17 	ldw	r3,-24(fp)
  82e418:	00800304 	movi	r2,12
  82e41c:	18800615 	stw	r2,24(r3)
            UNLOCK_NET_RESOURCE (NET_RESID);
  82e420:	0009883a 	mov	r4,zero
  82e424:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            return SOCKET_ERROR;
  82e428:	00bfffc4 	movi	r2,-1
  82e42c:	e0bfff15 	stw	r2,-4(fp)
  82e430:	00002406 	br	82e4c4 <t_setsockopt+0x1c4>
         }
      }
      
      if (name == IP_TTL_OPT)
  82e434:	e0bffd17 	ldw	r2,-12(fp)
  82e438:	10800118 	cmpnei	r2,r2,4
  82e43c:	1000061e 	bne	r2,zero,82e458 <t_setsockopt+0x158>
         so->so_optsPack->ip_ttl = (u_char)(*(int *)arg);
  82e440:	e0bffa17 	ldw	r2,-24(fp)
  82e444:	10c01f17 	ldw	r3,124(r2)
  82e448:	e0bffe17 	ldw	r2,-8(fp)
  82e44c:	10800017 	ldw	r2,0(r2)
  82e450:	18800045 	stb	r2,1(r3)
  82e454:	00001806 	br	82e4b8 <t_setsockopt+0x1b8>
      else
      if (name == IP_TOS)
  82e458:	e0bffd17 	ldw	r2,-12(fp)
  82e45c:	108000d8 	cmpnei	r2,r2,3
  82e460:	1000061e 	bne	r2,zero,82e47c <t_setsockopt+0x17c>
         so->so_optsPack->ip_tos = (u_char)(*(int *)arg);
  82e464:	e0bffa17 	ldw	r2,-24(fp)
  82e468:	10c01f17 	ldw	r3,124(r2)
  82e46c:	e0bffe17 	ldw	r2,-8(fp)
  82e470:	10800017 	ldw	r2,0(r2)
  82e474:	18800005 	stb	r2,0(r3)
  82e478:	00000f06 	br	82e4b8 <t_setsockopt+0x1b8>
	   else
	   if (name == IP_SCOPEID)
  82e47c:	e0bffd17 	ldw	r2,-12(fp)
  82e480:	10800398 	cmpnei	r2,r2,14
  82e484:	1000071e 	bne	r2,zero,82e4a4 <t_setsockopt+0x1a4>
            so->so_optsPack->ip_scopeid = (u_char)(*(u_int *)arg);
  82e488:	e0bffa17 	ldw	r2,-24(fp)
  82e48c:	10c01f17 	ldw	r3,124(r2)
  82e490:	e0bffe17 	ldw	r2,-8(fp)
  82e494:	10800017 	ldw	r2,0(r2)
  82e498:	10803fcc 	andi	r2,r2,255
  82e49c:	18800115 	stw	r2,4(r3)
  82e4a0:	00000506 	br	82e4b8 <t_setsockopt+0x1b8>
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
  82e4a4:	0009883a 	mov	r4,zero
  82e4a8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
  82e4ac:	00bfffc4 	movi	r2,-1
  82e4b0:	e0bfff15 	stw	r2,-4(fp)
  82e4b4:	00000306 	br	82e4c4 <t_setsockopt+0x1c4>
      }   
   }

   UNLOCK_NET_RESOURCE (NET_RESID);
  82e4b8:	0009883a 	mov	r4,zero
  82e4bc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return 0;
  82e4c0:	e03fff15 	stw	zero,-4(fp)
  82e4c4:	e0bfff17 	ldw	r2,-4(fp)
}
  82e4c8:	e037883a 	mov	sp,fp
  82e4cc:	dfc00117 	ldw	ra,4(sp)
  82e4d0:	df000017 	ldw	fp,0(sp)
  82e4d4:	dec00204 	addi	sp,sp,8
  82e4d8:	f800283a 	ret

0082e4dc <t_getsockopt>:
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
  82e4dc:	defff604 	addi	sp,sp,-40
  82e4e0:	dfc00915 	stw	ra,36(sp)
  82e4e4:	df000815 	stw	fp,32(sp)
  82e4e8:	df000804 	addi	fp,sp,32
  82e4ec:	e13ffb15 	stw	r4,-20(fp)
  82e4f0:	e17ffc15 	stw	r5,-16(fp)
  82e4f4:	e1bffd15 	stw	r6,-12(fp)
  82e4f8:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
  82e4fc:	e0bffb17 	ldw	r2,-20(fp)
  82e500:	10bff804 	addi	r2,r2,-32
  82e504:	1085883a 	add	r2,r2,r2
  82e508:	1085883a 	add	r2,r2,r2
  82e50c:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
  82e510:	00803934 	movhi	r2,228
  82e514:	10a8d904 	addi	r2,r2,-23708
  82e518:	e0bff815 	stw	r2,-32(fp)
  82e51c:	00000606 	br	82e538 <t_getsockopt+0x5c>
  82e520:	e0fff817 	ldw	r3,-32(fp)
  82e524:	e0bffa17 	ldw	r2,-24(fp)
  82e528:	18800626 	beq	r3,r2,82e544 <t_getsockopt+0x68>
  82e52c:	e0bff817 	ldw	r2,-32(fp)
  82e530:	10800017 	ldw	r2,0(r2)
  82e534:	e0bff815 	stw	r2,-32(fp)
  82e538:	e0bff817 	ldw	r2,-32(fp)
  82e53c:	1004c03a 	cmpne	r2,r2,zero
  82e540:	103ff71e 	bne	r2,zero,82e520 <t_getsockopt+0x44>
  82e544:	e0fff817 	ldw	r3,-32(fp)
  82e548:	e0bffa17 	ldw	r2,-24(fp)
  82e54c:	18800426 	beq	r3,r2,82e560 <t_getsockopt+0x84>
  82e550:	082a7c80 	call	82a7c8 <dtrap>
  82e554:	00bfffc4 	movi	r2,-1
  82e558:	e0bfff15 	stw	r2,-4(fp)
  82e55c:	00004206 	br	82e668 <t_getsockopt+0x18c>
   USE_ARG(level);
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
  82e560:	0009883a 	mov	r4,zero
  82e564:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   INET_TRACE (INETM_SOCKET,
    ("INET: getsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
  82e568:	e0bffc17 	ldw	r2,-16(fp)
  82e56c:	10800060 	cmpeqi	r2,r2,1
  82e570:	1000101e 	bne	r2,zero,82e5b4 <t_getsockopt+0xd8>
   {
      if ((err = sogetopt (so, name, arg)) != 0) 
  82e574:	e13ffa17 	ldw	r4,-24(fp)
  82e578:	e17ffd17 	ldw	r5,-12(fp)
  82e57c:	e1bffe17 	ldw	r6,-8(fp)
  82e580:	0830dec0 	call	830dec <sogetopt>
  82e584:	e0bff915 	stw	r2,-28(fp)
  82e588:	e0bff917 	ldw	r2,-28(fp)
  82e58c:	1005003a 	cmpeq	r2,r2,zero
  82e590:	1000301e 	bne	r2,zero,82e654 <t_getsockopt+0x178>
      {
         so->so_error = err;
  82e594:	e0fffa17 	ldw	r3,-24(fp)
  82e598:	e0bff917 	ldw	r2,-28(fp)
  82e59c:	18800615 	stw	r2,24(r3)
         UNLOCK_NET_RESOURCE (NET_RESID);
  82e5a0:	0009883a 	mov	r4,zero
  82e5a4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
  82e5a8:	00bfffc4 	movi	r2,-1
  82e5ac:	e0bfff15 	stw	r2,-4(fp)
  82e5b0:	00002d06 	br	82e668 <t_getsockopt+0x18c>
   {
      /* level 1 options are for the IP packet level.
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
  82e5b4:	e0bffd17 	ldw	r2,-12(fp)
  82e5b8:	10800118 	cmpnei	r2,r2,4
  82e5bc:	10000f1e 	bne	r2,zero,82e5fc <t_getsockopt+0x120>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
  82e5c0:	e0bffa17 	ldw	r2,-24(fp)
  82e5c4:	10801f17 	ldw	r2,124(r2)
  82e5c8:	1004c03a 	cmpne	r2,r2,zero
  82e5cc:	1000041e 	bne	r2,zero,82e5e0 <t_getsockopt+0x104>
  82e5d0:	e0fffe17 	ldw	r3,-8(fp)
  82e5d4:	00801004 	movi	r2,64
  82e5d8:	18800015 	stw	r2,0(r3)
  82e5dc:	00001d06 	br	82e654 <t_getsockopt+0x178>
         else *(int *)arg = (int)so->so_optsPack->ip_ttl;
  82e5e0:	e0fffe17 	ldw	r3,-8(fp)
  82e5e4:	e0bffa17 	ldw	r2,-24(fp)
  82e5e8:	10801f17 	ldw	r2,124(r2)
  82e5ec:	10800043 	ldbu	r2,1(r2)
  82e5f0:	10803fcc 	andi	r2,r2,255
  82e5f4:	18800015 	stw	r2,0(r3)
  82e5f8:	00001606 	br	82e654 <t_getsockopt+0x178>
      }
      else if (name == IP_TOS)
  82e5fc:	e0bffd17 	ldw	r2,-12(fp)
  82e600:	108000d8 	cmpnei	r2,r2,3
  82e604:	10000e1e 	bne	r2,zero,82e640 <t_getsockopt+0x164>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
  82e608:	e0bffa17 	ldw	r2,-24(fp)
  82e60c:	10801f17 	ldw	r2,124(r2)
  82e610:	1004c03a 	cmpne	r2,r2,zero
  82e614:	1000031e 	bne	r2,zero,82e624 <t_getsockopt+0x148>
  82e618:	e0bffe17 	ldw	r2,-8(fp)
  82e61c:	10000015 	stw	zero,0(r2)
  82e620:	00000c06 	br	82e654 <t_getsockopt+0x178>
         else *(int *)arg = (int)so->so_optsPack->ip_tos;
  82e624:	e0fffe17 	ldw	r3,-8(fp)
  82e628:	e0bffa17 	ldw	r2,-24(fp)
  82e62c:	10801f17 	ldw	r2,124(r2)
  82e630:	10800003 	ldbu	r2,0(r2)
  82e634:	10803fcc 	andi	r2,r2,255
  82e638:	18800015 	stw	r2,0(r3)
  82e63c:	00000506 	br	82e654 <t_getsockopt+0x178>
      }
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
  82e640:	0009883a 	mov	r4,zero
  82e644:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
  82e648:	00bfffc4 	movi	r2,-1
  82e64c:	e0bfff15 	stw	r2,-4(fp)
  82e650:	00000506 	br	82e668 <t_getsockopt+0x18c>
      }
   }   
   so->so_error = 0;
  82e654:	e0bffa17 	ldw	r2,-24(fp)
  82e658:	10000615 	stw	zero,24(r2)

   UNLOCK_NET_RESOURCE (NET_RESID);
  82e65c:	0009883a 	mov	r4,zero
  82e660:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return 0;
  82e664:	e03fff15 	stw	zero,-4(fp)
  82e668:	e0bfff17 	ldw	r2,-4(fp)
}
  82e66c:	e037883a 	mov	sp,fp
  82e670:	dfc00117 	ldw	ra,4(sp)
  82e674:	df000017 	ldw	fp,0(sp)
  82e678:	dec00204 	addi	sp,sp,8
  82e67c:	f800283a 	ret

0082e680 <t_recv>:
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
  82e680:	defff504 	addi	sp,sp,-44
  82e684:	dfc00a15 	stw	ra,40(sp)
  82e688:	df000915 	stw	fp,36(sp)
  82e68c:	df000904 	addi	fp,sp,36
  82e690:	e13ffb15 	stw	r4,-20(fp)
  82e694:	e17ffc15 	stw	r5,-16(fp)
  82e698:	e1bffd15 	stw	r6,-12(fp)
  82e69c:	e1fffe15 	stw	r7,-8(fp)
#ifdef SOCKDEBUG
   char logbuf[10];
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;
  82e6a0:	e0bffd17 	ldw	r2,-12(fp)
  82e6a4:	e0bff815 	stw	r2,-32(fp)

   so = LONG2SO(s);
  82e6a8:	e0bffb17 	ldw	r2,-20(fp)
  82e6ac:	10bff804 	addi	r2,r2,-32
  82e6b0:	1085883a 	add	r2,r2,r2
  82e6b4:	1085883a 	add	r2,r2,r2
  82e6b8:	e0bffa15 	stw	r2,-24(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
  82e6bc:	e0bffa17 	ldw	r2,-24(fp)
  82e6c0:	1080088b 	ldhu	r2,34(r2)
  82e6c4:	10bfffcc 	andi	r2,r2,65535
  82e6c8:	1080038c 	andi	r2,r2,14
  82e6cc:	108000a0 	cmpeqi	r2,r2,2
  82e6d0:	1000061e 	bne	r2,zero,82e6ec <t_recv+0x6c>
   {
      so->so_error = EPIPE;
  82e6d4:	e0fffa17 	ldw	r3,-24(fp)
  82e6d8:	00800804 	movi	r2,32
  82e6dc:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
  82e6e0:	00bfffc4 	movi	r2,-1
  82e6e4:	e0bfff15 	stw	r2,-4(fp)
  82e6e8:	00001b06 	br	82e758 <t_recv+0xd8>
   }
   so->so_error = 0;
  82e6ec:	e0bffa17 	ldw	r2,-24(fp)
  82e6f0:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
  82e6f4:	0009883a 	mov	r4,zero
  82e6f8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   IN_PROFILER(PF_TCP, PF_ENTRY);        /* measure time in TCP */
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
  82e6fc:	e1fffd04 	addi	r7,fp,-12
  82e700:	e0bffe17 	ldw	r2,-8(fp)
  82e704:	d8800015 	stw	r2,0(sp)
  82e708:	e13ffa17 	ldw	r4,-24(fp)
  82e70c:	000b883a 	mov	r5,zero
  82e710:	e1bffc17 	ldw	r6,-16(fp)
  82e714:	082ffa00 	call	82ffa0 <soreceive>
  82e718:	e0bff915 	stw	r2,-28(fp)
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);
  82e71c:	0009883a 	mov	r4,zero
  82e720:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if(err)
  82e724:	e0bff917 	ldw	r2,-28(fp)
  82e728:	1005003a 	cmpeq	r2,r2,zero
  82e72c:	1000061e 	bne	r2,zero,82e748 <t_recv+0xc8>
   {
      so->so_error = err;
  82e730:	e0fffa17 	ldw	r3,-24(fp)
  82e734:	e0bff917 	ldw	r2,-28(fp)
  82e738:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
  82e73c:	00bfffc4 	movi	r2,-1
  82e740:	e0bfff15 	stw	r2,-4(fp)
  82e744:	00000406 	br	82e758 <t_recv+0xd8>
   }

   /* return bytes we sent - the amount we wanted to send minus
    * the amount left in the buffer.
    */
   return (sendlen - len);
  82e748:	e0fffd17 	ldw	r3,-12(fp)
  82e74c:	e0bff817 	ldw	r2,-32(fp)
  82e750:	10c5c83a 	sub	r2,r2,r3
  82e754:	e0bfff15 	stw	r2,-4(fp)
  82e758:	e0bfff17 	ldw	r2,-4(fp)
}
  82e75c:	e037883a 	mov	sp,fp
  82e760:	dfc00117 	ldw	ra,4(sp)
  82e764:	df000017 	ldw	fp,0(sp)
  82e768:	dec00204 	addi	sp,sp,8
  82e76c:	f800283a 	ret

0082e770 <t_recvfrom>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
  82e770:	defff304 	addi	sp,sp,-52
  82e774:	dfc00c15 	stw	ra,48(sp)
  82e778:	df000b15 	stw	fp,44(sp)
  82e77c:	df000b04 	addi	fp,sp,44
  82e780:	e13ffb15 	stw	r4,-20(fp)
  82e784:	e17ffc15 	stw	r5,-16(fp)
  82e788:	e1bffd15 	stw	r6,-12(fp)
  82e78c:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   struct mbuf *     sender = NULL;
  82e790:	e03ffa15 	stw	zero,-24(fp)
   int   err;
   int   sendlen = len;
  82e794:	e0bffd17 	ldw	r2,-12(fp)
  82e798:	e0bff715 	stw	r2,-36(fp)

   so = LONG2SO(s);
  82e79c:	e0bffb17 	ldw	r2,-20(fp)
  82e7a0:	10bff804 	addi	r2,r2,-32
  82e7a4:	1085883a 	add	r2,r2,r2
  82e7a8:	1085883a 	add	r2,r2,r2
  82e7ac:	e0bff915 	stw	r2,-28(fp)
   SOC_CHECK(so);
  82e7b0:	00803934 	movhi	r2,228
  82e7b4:	10a8d904 	addi	r2,r2,-23708
  82e7b8:	e0bff615 	stw	r2,-40(fp)
  82e7bc:	00000606 	br	82e7d8 <t_recvfrom+0x68>
  82e7c0:	e0fff617 	ldw	r3,-40(fp)
  82e7c4:	e0bff917 	ldw	r2,-28(fp)
  82e7c8:	18800626 	beq	r3,r2,82e7e4 <t_recvfrom+0x74>
  82e7cc:	e0bff617 	ldw	r2,-40(fp)
  82e7d0:	10800017 	ldw	r2,0(r2)
  82e7d4:	e0bff615 	stw	r2,-40(fp)
  82e7d8:	e0bff617 	ldw	r2,-40(fp)
  82e7dc:	1004c03a 	cmpne	r2,r2,zero
  82e7e0:	103ff71e 	bne	r2,zero,82e7c0 <t_recvfrom+0x50>
  82e7e4:	e0fff617 	ldw	r3,-40(fp)
  82e7e8:	e0bff917 	ldw	r2,-28(fp)
  82e7ec:	18800426 	beq	r3,r2,82e800 <t_recvfrom+0x90>
  82e7f0:	082a7c80 	call	82a7c8 <dtrap>
  82e7f4:	00bfffc4 	movi	r2,-1
  82e7f8:	e0bfff15 	stw	r2,-4(fp)
  82e7fc:	00002a06 	br	82e8a8 <t_recvfrom+0x138>
   so->so_error = 0;
  82e800:	e0bff917 	ldw	r2,-28(fp)
  82e804:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
  82e808:	0009883a 	mov	r4,zero
  82e80c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   err = soreceive(so, &sender, buf, &len, flags);
  82e810:	e17ffa04 	addi	r5,fp,-24
  82e814:	e1fffd04 	addi	r7,fp,-12
  82e818:	e0bffe17 	ldw	r2,-8(fp)
  82e81c:	d8800015 	stw	r2,0(sp)
  82e820:	e13ff917 	ldw	r4,-28(fp)
  82e824:	e1bffc17 	ldw	r6,-16(fp)
  82e828:	082ffa00 	call	82ffa0 <soreceive>
  82e82c:	e0bff815 	stw	r2,-32(fp)

   /* copy sender info from mbuf to sockaddr */
   if (sender)
  82e830:	e0bffa17 	ldw	r2,-24(fp)
  82e834:	1005003a 	cmpeq	r2,r2,zero
  82e838:	10000c1e 	bne	r2,zero,82e86c <t_recvfrom+0xfc>
   {
      MEMCPY(from, (mtod(sender, struct sockaddr *)), *fromlen );
  82e83c:	e0bffa17 	ldw	r2,-24(fp)
  82e840:	10800317 	ldw	r2,12(r2)
  82e844:	100b883a 	mov	r5,r2
  82e848:	e0800317 	ldw	r2,12(fp)
  82e84c:	10800017 	ldw	r2,0(r2)
  82e850:	1007883a 	mov	r3,r2
  82e854:	e0800217 	ldw	r2,8(fp)
  82e858:	1009883a 	mov	r4,r2
  82e85c:	180d883a 	mov	r6,r3
  82e860:	08073380 	call	807338 <memcpy>
      m_freem (sender);
  82e864:	e13ffa17 	ldw	r4,-24(fp)
  82e868:	082b8a40 	call	82b8a4 <m_freem>
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
  82e86c:	0009883a 	mov	r4,zero
  82e870:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if(err)
  82e874:	e0bff817 	ldw	r2,-32(fp)
  82e878:	1005003a 	cmpeq	r2,r2,zero
  82e87c:	1000061e 	bne	r2,zero,82e898 <t_recvfrom+0x128>
   {
      so->so_error = err;
  82e880:	e0fff917 	ldw	r3,-28(fp)
  82e884:	e0bff817 	ldw	r2,-32(fp)
  82e888:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82e88c:	00bfffc4 	movi	r2,-1
  82e890:	e0bfff15 	stw	r2,-4(fp)
  82e894:	00000406 	br	82e8a8 <t_recvfrom+0x138>
   }

   /* OK return: amount of data actually sent */
   return (sendlen - len);
  82e898:	e0fffd17 	ldw	r3,-12(fp)
  82e89c:	e0bff717 	ldw	r2,-36(fp)
  82e8a0:	10c5c83a 	sub	r2,r2,r3
  82e8a4:	e0bfff15 	stw	r2,-4(fp)
  82e8a8:	e0bfff17 	ldw	r2,-4(fp)
}
  82e8ac:	e037883a 	mov	sp,fp
  82e8b0:	dfc00117 	ldw	ra,4(sp)
  82e8b4:	df000017 	ldw	fp,0(sp)
  82e8b8:	dec00204 	addi	sp,sp,8
  82e8bc:	f800283a 	ret

0082e8c0 <t_sendto>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
  82e8c0:	defff204 	addi	sp,sp,-56
  82e8c4:	dfc00d15 	stw	ra,52(sp)
  82e8c8:	df000c15 	stw	fp,48(sp)
  82e8cc:	df000c04 	addi	fp,sp,48
  82e8d0:	e13ffa15 	stw	r4,-24(fp)
  82e8d4:	e17ffb15 	stw	r5,-20(fp)
  82e8d8:	e1bffc15 	stw	r6,-16(fp)
  82e8dc:	e1fffd15 	stw	r7,-12(fp)
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
  82e8e0:	e0bffa17 	ldw	r2,-24(fp)
  82e8e4:	10bff804 	addi	r2,r2,-32
  82e8e8:	1085883a 	add	r2,r2,r2
  82e8ec:	1085883a 	add	r2,r2,r2
  82e8f0:	e0bff815 	stw	r2,-32(fp)
   SOC_CHECK(so);
  82e8f4:	00803934 	movhi	r2,228
  82e8f8:	10a8d904 	addi	r2,r2,-23708
  82e8fc:	e0bff515 	stw	r2,-44(fp)
  82e900:	00000606 	br	82e91c <t_sendto+0x5c>
  82e904:	e0fff517 	ldw	r3,-44(fp)
  82e908:	e0bff817 	ldw	r2,-32(fp)
  82e90c:	18800626 	beq	r3,r2,82e928 <t_sendto+0x68>
  82e910:	e0bff517 	ldw	r2,-44(fp)
  82e914:	10800017 	ldw	r2,0(r2)
  82e918:	e0bff515 	stw	r2,-44(fp)
  82e91c:	e0bff517 	ldw	r2,-44(fp)
  82e920:	1004c03a 	cmpne	r2,r2,zero
  82e924:	103ff71e 	bne	r2,zero,82e904 <t_sendto+0x44>
  82e928:	e0fff517 	ldw	r3,-44(fp)
  82e92c:	e0bff817 	ldw	r2,-32(fp)
  82e930:	18800426 	beq	r3,r2,82e944 <t_sendto+0x84>
  82e934:	082a7c80 	call	82a7c8 <dtrap>
  82e938:	00bfffc4 	movi	r2,-1
  82e93c:	e0bfff15 	stw	r2,-4(fp)
  82e940:	00006406 	br	82ead4 <t_sendto+0x214>
   so->so_error = 0;
  82e944:	e0bff817 	ldw	r2,-32(fp)
  82e948:	10000615 	stw	zero,24(r2)

   switch (so->so_type)
  82e94c:	e0bff817 	ldw	r2,-32(fp)
  82e950:	10800983 	ldbu	r2,38(r2)
  82e954:	10803fcc 	andi	r2,r2,255
  82e958:	1080201c 	xori	r2,r2,128
  82e95c:	10bfe004 	addi	r2,r2,-128
  82e960:	e0bffe15 	stw	r2,-8(fp)
  82e964:	e0fffe17 	ldw	r3,-8(fp)
  82e968:	188000a0 	cmpeqi	r2,r3,2
  82e96c:	10000e1e 	bne	r2,zero,82e9a8 <t_sendto+0xe8>
  82e970:	e0fffe17 	ldw	r3,-8(fp)
  82e974:	188000e0 	cmpeqi	r2,r3,3
  82e978:	10000e1e 	bne	r2,zero,82e9b4 <t_sendto+0xf4>
  82e97c:	e0fffe17 	ldw	r3,-8(fp)
  82e980:	18800060 	cmpeqi	r2,r3,1
  82e984:	1000011e 	bne	r2,zero,82e98c <t_sendto+0xcc>
  82e988:	00001006 	br	82e9cc <t_sendto+0x10c>
   {
   case SOCK_STREAM:
      /* this is a stream socket, so pass this request through
       * t_send() for its large-send support.
       */
      return t_send(s, buf, len, flags);
  82e98c:	e13ffa17 	ldw	r4,-24(fp)
  82e990:	e17ffb17 	ldw	r5,-20(fp)
  82e994:	e1bffc17 	ldw	r6,-16(fp)
  82e998:	e1fffd17 	ldw	r7,-12(fp)
  82e99c:	082eaec0 	call	82eaec <t_send>
  82e9a0:	e0bfff15 	stw	r2,-4(fp)
  82e9a4:	00004b06 	br	82ead4 <t_sendto+0x214>
      /*NOTREACHED*/
   case SOCK_DGRAM:
      /* datagram (UDP) socket -- prepare to check length */
      sendlen = udp_maxalloc();
  82e9a8:	0843ecc0 	call	843ecc <udp_maxalloc>
  82e9ac:	e0bff915 	stw	r2,-28(fp)
      break;
  82e9b0:	00000d06 	br	82e9e8 <t_sendto+0x128>
#ifdef IP_RAW
   case SOCK_RAW:
      /* raw socket -- prepare to check length */
      sendlen = ip_raw_maxalloc(so->so_options & SO_HDRINCL);
  82e9b4:	e0bff817 	ldw	r2,-32(fp)
  82e9b8:	10800417 	ldw	r2,16(r2)
  82e9bc:	1108000c 	andi	r4,r2,8192
  82e9c0:	08429b00 	call	8429b0 <ip_raw_maxalloc>
  82e9c4:	e0bff915 	stw	r2,-28(fp)
      break;
  82e9c8:	00000706 	br	82e9e8 <t_sendto+0x128>
#endif /* IP_RAW */
   default:
      /* socket has unknown type */
      dtrap();
  82e9cc:	082a7c80 	call	82a7c8 <dtrap>
      so->so_error = EFAULT;
  82e9d0:	e0fff817 	ldw	r3,-32(fp)
  82e9d4:	00800384 	movi	r2,14
  82e9d8:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82e9dc:	00bfffc4 	movi	r2,-1
  82e9e0:	e0bfff15 	stw	r2,-4(fp)
  82e9e4:	00003b06 	br	82ead4 <t_sendto+0x214>
   /* fall through for non-stream sockets: SOCK_DGRAM (UDP) and
    * SOCK_RAW (raw IP)
    */

   /* check length against underlying stack's maximum */
   if (len > sendlen)
  82e9e8:	e0fff917 	ldw	r3,-28(fp)
  82e9ec:	e0bffc17 	ldw	r2,-16(fp)
  82e9f0:	1880060e 	bge	r3,r2,82ea0c <t_sendto+0x14c>
   {
      so->so_error = EMSGSIZE;
  82e9f4:	e0fff817 	ldw	r3,-32(fp)
  82e9f8:	00801e84 	movi	r2,122
  82e9fc:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82ea00:	00ffffc4 	movi	r3,-1
  82ea04:	e0ffff15 	stw	r3,-4(fp)
  82ea08:	00003206 	br	82ead4 <t_sendto+0x214>
   /* if a sockaddr was passed, wrap it in an mbuf and pas it into the
    * bowels of the BSD code; else assume this is a bound UDP socket
    * and this call came from t_send() below.
    */

   if (to)  /* sockaddr was passed */
  82ea0c:	e0800217 	ldw	r2,8(fp)
  82ea10:	1005003a 	cmpeq	r2,r2,zero
  82ea14:	10000e1e 	bne	r2,zero,82ea50 <t_sendto+0x190>
   {
      name = sockargs(to, tolen, MT_SONAME);
  82ea18:	e1000217 	ldw	r4,8(fp)
  82ea1c:	e1400317 	ldw	r5,12(fp)
  82ea20:	01800244 	movi	r6,9
  82ea24:	082eec80 	call	82eec8 <sockargs>
  82ea28:	e0bff615 	stw	r2,-40(fp)
      if(name == NULL)
  82ea2c:	e0bff617 	ldw	r2,-40(fp)
  82ea30:	1004c03a 	cmpne	r2,r2,zero
  82ea34:	1000071e 	bne	r2,zero,82ea54 <t_sendto+0x194>
      {
         so->so_error = ENOMEM;
  82ea38:	e0fff817 	ldw	r3,-32(fp)
  82ea3c:	00800304 	movi	r2,12
  82ea40:	18800615 	stw	r2,24(r3)
         return SOCKET_ERROR;
  82ea44:	00bfffc4 	movi	r2,-1
  82ea48:	e0bfff15 	stw	r2,-4(fp)
  82ea4c:	00002106 	br	82ead4 <t_sendto+0x214>
      }
   }
   else     /* hope user called bind() first... */
      name = NULL;
  82ea50:	e03ff615 	stw	zero,-40(fp)
   
   sendlen = len;
  82ea54:	e0bffc17 	ldw	r2,-16(fp)
  82ea58:	e0bff915 	stw	r2,-28(fp)

   LOCK_NET_RESOURCE(NET_RESID);
  82ea5c:	0009883a 	mov	r4,zero
  82ea60:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   err = sosend (so, name, buf, &sendlen, flags);
  82ea64:	e1fff904 	addi	r7,fp,-28
  82ea68:	e0bffd17 	ldw	r2,-12(fp)
  82ea6c:	d8800015 	stw	r2,0(sp)
  82ea70:	e13ff817 	ldw	r4,-32(fp)
  82ea74:	e17ff617 	ldw	r5,-40(fp)
  82ea78:	e1bffb17 	ldw	r6,-20(fp)
  82ea7c:	082f9980 	call	82f998 <sosend>
  82ea80:	e0bff715 	stw	r2,-36(fp)

   if (name)
  82ea84:	e0bff617 	ldw	r2,-40(fp)
  82ea88:	1005003a 	cmpeq	r2,r2,zero
  82ea8c:	1000021e 	bne	r2,zero,82ea98 <t_sendto+0x1d8>
      m_freem(name);
  82ea90:	e13ff617 	ldw	r4,-40(fp)
  82ea94:	082b8a40 	call	82b8a4 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
  82ea98:	0009883a 	mov	r4,zero
  82ea9c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (err != 0)
  82eaa0:	e0bff717 	ldw	r2,-36(fp)
  82eaa4:	1005003a 	cmpeq	r2,r2,zero
  82eaa8:	1000061e 	bne	r2,zero,82eac4 <t_sendto+0x204>
   {
      so->so_error = err;
  82eaac:	e0fff817 	ldw	r3,-32(fp)
  82eab0:	e0bff717 	ldw	r2,-36(fp)
  82eab4:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82eab8:	00ffffc4 	movi	r3,-1
  82eabc:	e0ffff15 	stw	r3,-4(fp)
  82eac0:	00000406 	br	82ead4 <t_sendto+0x214>
   }

   return (len - sendlen);
  82eac4:	e0fff917 	ldw	r3,-28(fp)
  82eac8:	e0bffc17 	ldw	r2,-16(fp)
  82eacc:	10c5c83a 	sub	r2,r2,r3
  82ead0:	e0bfff15 	stw	r2,-4(fp)
  82ead4:	e0bfff17 	ldw	r2,-4(fp)
}
  82ead8:	e037883a 	mov	sp,fp
  82eadc:	dfc00117 	ldw	ra,4(sp)
  82eae0:	df000017 	ldw	fp,0(sp)
  82eae4:	dec00204 	addi	sp,sp,8
  82eae8:	f800283a 	ret

0082eaec <t_send>:
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
  82eaec:	defff004 	addi	sp,sp,-64
  82eaf0:	dfc00f15 	stw	ra,60(sp)
  82eaf4:	df000e15 	stw	fp,56(sp)
  82eaf8:	df000e04 	addi	fp,sp,56
  82eafc:	e13ffb15 	stw	r4,-20(fp)
  82eb00:	e17ffc15 	stw	r5,-16(fp)
  82eb04:	e1bffd15 	stw	r6,-12(fp)
  82eb08:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   int   e;       /* error holder */
   int   total_sent  =  0;
  82eb0c:	e03ff715 	stw	zero,-36(fp)
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
  82eb10:	e0bffb17 	ldw	r2,-20(fp)
  82eb14:	10bff804 	addi	r2,r2,-32
  82eb18:	1085883a 	add	r2,r2,r2
  82eb1c:	1085883a 	add	r2,r2,r2
  82eb20:	e0bff915 	stw	r2,-28(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
  82eb24:	e0bff917 	ldw	r2,-28(fp)
  82eb28:	1080088b 	ldhu	r2,34(r2)
  82eb2c:	10bfffcc 	andi	r2,r2,65535
  82eb30:	1080038c 	andi	r2,r2,14
  82eb34:	108000a0 	cmpeqi	r2,r2,2
  82eb38:	1000061e 	bne	r2,zero,82eb54 <t_send+0x68>
   {
      so->so_error = EPIPE;
  82eb3c:	e0fff917 	ldw	r3,-28(fp)
  82eb40:	00800804 	movi	r2,32
  82eb44:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82eb48:	00bfffc4 	movi	r2,-1
  82eb4c:	e0bfff15 	stw	r2,-4(fp)
  82eb50:	00006a06 	br	82ecfc <t_send+0x210>
   }
   so->so_error = 0;
  82eb54:	e0bff917 	ldw	r2,-28(fp)
  82eb58:	10000615 	stw	zero,24(r2)

   /* If this is not a stream socket, assume it is bound and pass to
    * t_sendto() with a null sockaddr
    */
   if (so->so_type != SOCK_STREAM)
  82eb5c:	e0bff917 	ldw	r2,-28(fp)
  82eb60:	10800983 	ldbu	r2,38(r2)
  82eb64:	10803fcc 	andi	r2,r2,255
  82eb68:	1080201c 	xori	r2,r2,128
  82eb6c:	10bfe004 	addi	r2,r2,-128
  82eb70:	10800060 	cmpeqi	r2,r2,1
  82eb74:	1000091e 	bne	r2,zero,82eb9c <t_send+0xb0>
      return(t_sendto(s, buf, len, flags, NULL, 0));
  82eb78:	d8000015 	stw	zero,0(sp)
  82eb7c:	d8000115 	stw	zero,4(sp)
  82eb80:	e13ffb17 	ldw	r4,-20(fp)
  82eb84:	e17ffc17 	ldw	r5,-16(fp)
  82eb88:	e1bffd17 	ldw	r6,-12(fp)
  82eb8c:	e1fffe17 	ldw	r7,-8(fp)
  82eb90:	082e8c00 	call	82e8c0 <t_sendto>
  82eb94:	e0bfff15 	stw	r2,-4(fp)
  82eb98:	00005806 	br	82ecfc <t_send+0x210>

   maxpkt = TCP_MSS;
  82eb9c:	00816d04 	movi	r2,1460
  82eba0:	e0bff615 	stw	r2,-40(fp)
   if(so->so_pcb)
  82eba4:	e0bff917 	ldw	r2,-28(fp)
  82eba8:	10800117 	ldw	r2,4(r2)
  82ebac:	1005003a 	cmpeq	r2,r2,zero
  82ebb0:	10004d1e 	bne	r2,zero,82ece8 <t_send+0x1fc>
   { 
      struct tcpcb * tp;
      tp = intotcpcb(so->so_pcb);   /* get tcp structure with mss */
  82ebb4:	e0bff917 	ldw	r2,-28(fp)
  82ebb8:	10800117 	ldw	r2,4(r2)
  82ebbc:	10800917 	ldw	r2,36(r2)
  82ebc0:	e0bff415 	stw	r2,-48(fp)
      if(tp->t_maxseg)              /* Make sure it's set */
  82ebc4:	e0bff417 	ldw	r2,-48(fp)
  82ebc8:	10800a0b 	ldhu	r2,40(r2)
  82ebcc:	10bfffcc 	andi	r2,r2,65535
  82ebd0:	1005003a 	cmpeq	r2,r2,zero
  82ebd4:	1000441e 	bne	r2,zero,82ece8 <t_send+0x1fc>
         maxpkt = tp->t_maxseg;
  82ebd8:	e0bff417 	ldw	r2,-48(fp)
  82ebdc:	10800a0b 	ldhu	r2,40(r2)
  82ebe0:	10bfffcc 	andi	r2,r2,65535
  82ebe4:	e0bff615 	stw	r2,-40(fp)
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
  82ebe8:	00003f06 	br	82ece8 <t_send+0x1fc>
   {
      if (len > maxpkt)
  82ebec:	e0fffd17 	ldw	r3,-12(fp)
  82ebf0:	e0bff617 	ldw	r2,-40(fp)
  82ebf4:	10c0030e 	bge	r2,r3,82ec04 <t_send+0x118>
         sendlen = maxpkt;  /* take biggest block we can */
  82ebf8:	e0bff617 	ldw	r2,-40(fp)
  82ebfc:	e0bffa15 	stw	r2,-24(fp)
  82ec00:	00000206 	br	82ec0c <t_send+0x120>
      else
         sendlen = len;
  82ec04:	e0bffd17 	ldw	r2,-12(fp)
  82ec08:	e0bffa15 	stw	r2,-24(fp)
      sent = sendlen;
  82ec0c:	e0bffa17 	ldw	r2,-24(fp)
  82ec10:	e0bff515 	stw	r2,-44(fp)

      LOCK_NET_RESOURCE(NET_RESID);
  82ec14:	0009883a 	mov	r4,zero
  82ec18:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      e = sosend (so, NULL, buf, &sendlen, flags);
  82ec1c:	e1fffa04 	addi	r7,fp,-24
  82ec20:	e0bffe17 	ldw	r2,-8(fp)
  82ec24:	d8800015 	stw	r2,0(sp)
  82ec28:	e13ff917 	ldw	r4,-28(fp)
  82ec2c:	000b883a 	mov	r5,zero
  82ec30:	e1bffc17 	ldw	r6,-16(fp)
  82ec34:	082f9980 	call	82f998 <sosend>
  82ec38:	e0bff815 	stw	r2,-32(fp)
      UNLOCK_NET_RESOURCE(NET_RESID);
  82ec3c:	0009883a 	mov	r4,zero
  82ec40:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
 
      if (e != 0)  /* sock_sendit failed? */
  82ec44:	e0bff817 	ldw	r2,-32(fp)
  82ec48:	1005003a 	cmpeq	r2,r2,zero
  82ec4c:	1000121e 	bne	r2,zero,82ec98 <t_send+0x1ac>
      {
         /* if we simply ran out of bufs, report back to caller. */
         if ((e == ENOBUFS) || (e == EWOULDBLOCK))
  82ec50:	e0bff817 	ldw	r2,-32(fp)
  82ec54:	10801a60 	cmpeqi	r2,r2,105
  82ec58:	1000031e 	bne	r2,zero,82ec68 <t_send+0x17c>
  82ec5c:	e0bff817 	ldw	r2,-32(fp)
  82ec60:	108002d8 	cmpnei	r2,r2,11
  82ec64:	1000061e 	bne	r2,zero,82ec80 <t_send+0x194>
            /* if we actually sent something before running out
             * of buffers, report what we sent; 
             * else, report the error and let the application 
             * retry the call later
             */
            if (total_sent != 0)
  82ec68:	e0bff717 	ldw	r2,-36(fp)
  82ec6c:	1005003a 	cmpeq	r2,r2,zero
  82ec70:	1000031e 	bne	r2,zero,82ec80 <t_send+0x194>
            {
               so->so_error = 0;
  82ec74:	e0bff917 	ldw	r2,-28(fp)
  82ec78:	10000615 	stw	zero,24(r2)
               break;      /* break out of while(len) loop */
  82ec7c:	00001d06 	br	82ecf4 <t_send+0x208>
            }
         }
         so->so_error = e;
  82ec80:	e0fff917 	ldw	r3,-28(fp)
  82ec84:	e0bff817 	ldw	r2,-32(fp)
  82ec88:	18800615 	stw	r2,24(r3)
         return SOCKET_ERROR;
  82ec8c:	00bfffc4 	movi	r2,-1
  82ec90:	e0bfff15 	stw	r2,-4(fp)
  82ec94:	00001906 	br	82ecfc <t_send+0x210>
      }
      /* if we can't send anymore, return now */
      if (sendlen != 0)
  82ec98:	e0bffa17 	ldw	r2,-24(fp)
  82ec9c:	1004c03a 	cmpne	r2,r2,zero
  82eca0:	1000141e 	bne	r2,zero,82ecf4 <t_send+0x208>
         break;         /* break out of while(len) loop */

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
  82eca4:	e0fffa17 	ldw	r3,-24(fp)
  82eca8:	e0bff517 	ldw	r2,-44(fp)
  82ecac:	10c5c83a 	sub	r2,r2,r3
  82ecb0:	e0bff515 	stw	r2,-44(fp)
      buf += sent;
  82ecb4:	e0bff517 	ldw	r2,-44(fp)
  82ecb8:	1007883a 	mov	r3,r2
  82ecbc:	e0bffc17 	ldw	r2,-16(fp)
  82ecc0:	10c5883a 	add	r2,r2,r3
  82ecc4:	e0bffc15 	stw	r2,-16(fp)
      len -= sent;
  82ecc8:	e0fffd17 	ldw	r3,-12(fp)
  82eccc:	e0bff517 	ldw	r2,-44(fp)
  82ecd0:	1885c83a 	sub	r2,r3,r2
  82ecd4:	e0bffd15 	stw	r2,-12(fp)
      total_sent += sent;
  82ecd8:	e0fff717 	ldw	r3,-36(fp)
  82ecdc:	e0bff517 	ldw	r2,-44(fp)
  82ece0:	1885883a 	add	r2,r3,r2
  82ece4:	e0bff715 	stw	r2,-36(fp)
         maxpkt = tp->t_maxseg;
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
  82ece8:	e0bffd17 	ldw	r2,-12(fp)
  82ecec:	1004c03a 	cmpne	r2,r2,zero
  82ecf0:	103fbe1e 	bne	r2,zero,82ebec <t_send+0x100>
      len -= sent;
      total_sent += sent;
   }

   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   return total_sent;
  82ecf4:	e0bff717 	ldw	r2,-36(fp)
  82ecf8:	e0bfff15 	stw	r2,-4(fp)
  82ecfc:	e0bfff17 	ldw	r2,-4(fp)
}
  82ed00:	e037883a 	mov	sp,fp
  82ed04:	dfc00117 	ldw	ra,4(sp)
  82ed08:	df000017 	ldw	fp,0(sp)
  82ed0c:	dec00204 	addi	sp,sp,8
  82ed10:	f800283a 	ret

0082ed14 <t_shutdown>:
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
  82ed14:	defff804 	addi	sp,sp,-32
  82ed18:	dfc00715 	stw	ra,28(sp)
  82ed1c:	df000615 	stw	fp,24(sp)
  82ed20:	df000604 	addi	fp,sp,24
  82ed24:	e13ffd15 	stw	r4,-12(fp)
  82ed28:	e17ffe15 	stw	r5,-8(fp)
   struct socket *so;
   int   err;

   so = LONG2SO(s);
  82ed2c:	e0bffd17 	ldw	r2,-12(fp)
  82ed30:	10bff804 	addi	r2,r2,-32
  82ed34:	1085883a 	add	r2,r2,r2
  82ed38:	1085883a 	add	r2,r2,r2
  82ed3c:	e0bffc15 	stw	r2,-16(fp)
   SOC_CHECK(so);
  82ed40:	00803934 	movhi	r2,228
  82ed44:	10a8d904 	addi	r2,r2,-23708
  82ed48:	e0bffa15 	stw	r2,-24(fp)
  82ed4c:	00000606 	br	82ed68 <t_shutdown+0x54>
  82ed50:	e0fffa17 	ldw	r3,-24(fp)
  82ed54:	e0bffc17 	ldw	r2,-16(fp)
  82ed58:	18800626 	beq	r3,r2,82ed74 <t_shutdown+0x60>
  82ed5c:	e0bffa17 	ldw	r2,-24(fp)
  82ed60:	10800017 	ldw	r2,0(r2)
  82ed64:	e0bffa15 	stw	r2,-24(fp)
  82ed68:	e0bffa17 	ldw	r2,-24(fp)
  82ed6c:	1004c03a 	cmpne	r2,r2,zero
  82ed70:	103ff71e 	bne	r2,zero,82ed50 <t_shutdown+0x3c>
  82ed74:	e0fffa17 	ldw	r3,-24(fp)
  82ed78:	e0bffc17 	ldw	r2,-16(fp)
  82ed7c:	18800426 	beq	r3,r2,82ed90 <t_shutdown+0x7c>
  82ed80:	082a7c80 	call	82a7c8 <dtrap>
  82ed84:	00bfffc4 	movi	r2,-1
  82ed88:	e0bfff15 	stw	r2,-4(fp)
  82ed8c:	00001406 	br	82ede0 <t_shutdown+0xcc>
   so->so_error = 0;
  82ed90:	e0bffc17 	ldw	r2,-16(fp)
  82ed94:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:shutdown so %x how %d\n", so, how));

   LOCK_NET_RESOURCE(NET_RESID);
  82ed98:	0009883a 	mov	r4,zero
  82ed9c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   err = soshutdown(so, how);
  82eda0:	e13ffc17 	ldw	r4,-16(fp)
  82eda4:	e17ffe17 	ldw	r5,-8(fp)
  82eda8:	08307840 	call	830784 <soshutdown>
  82edac:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
  82edb0:	0009883a 	mov	r4,zero
  82edb4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (err != 0)
  82edb8:	e0bffb17 	ldw	r2,-20(fp)
  82edbc:	1005003a 	cmpeq	r2,r2,zero
  82edc0:	1000061e 	bne	r2,zero,82eddc <t_shutdown+0xc8>
   {
      so->so_error = err;
  82edc4:	e0fffc17 	ldw	r3,-16(fp)
  82edc8:	e0bffb17 	ldw	r2,-20(fp)
  82edcc:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
  82edd0:	00bfffc4 	movi	r2,-1
  82edd4:	e0bfff15 	stw	r2,-4(fp)
  82edd8:	00000106 	br	82ede0 <t_shutdown+0xcc>
   }
   return 0;
  82eddc:	e03fff15 	stw	zero,-4(fp)
  82ede0:	e0bfff17 	ldw	r2,-4(fp)
}
  82ede4:	e037883a 	mov	sp,fp
  82ede8:	dfc00117 	ldw	ra,4(sp)
  82edec:	df000017 	ldw	fp,0(sp)
  82edf0:	dec00204 	addi	sp,sp,8
  82edf4:	f800283a 	ret

0082edf8 <t_socketclose>:
 * RETURNS: 
 */

int
t_socketclose(long s)
{
  82edf8:	defff904 	addi	sp,sp,-28
  82edfc:	dfc00615 	stw	ra,24(sp)
  82ee00:	df000515 	stw	fp,20(sp)
  82ee04:	df000504 	addi	fp,sp,20
  82ee08:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
  82ee0c:	e0bffe17 	ldw	r2,-8(fp)
  82ee10:	10bff804 	addi	r2,r2,-32
  82ee14:	1085883a 	add	r2,r2,r2
  82ee18:	1085883a 	add	r2,r2,r2
  82ee1c:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
  82ee20:	00803934 	movhi	r2,228
  82ee24:	10a8d904 	addi	r2,r2,-23708
  82ee28:	e0bffb15 	stw	r2,-20(fp)
  82ee2c:	00000606 	br	82ee48 <t_socketclose+0x50>
  82ee30:	e0fffb17 	ldw	r3,-20(fp)
  82ee34:	e0bffd17 	ldw	r2,-12(fp)
  82ee38:	18800626 	beq	r3,r2,82ee54 <t_socketclose+0x5c>
  82ee3c:	e0bffb17 	ldw	r2,-20(fp)
  82ee40:	10800017 	ldw	r2,0(r2)
  82ee44:	e0bffb15 	stw	r2,-20(fp)
  82ee48:	e0bffb17 	ldw	r2,-20(fp)
  82ee4c:	1004c03a 	cmpne	r2,r2,zero
  82ee50:	103ff71e 	bne	r2,zero,82ee30 <t_socketclose+0x38>
  82ee54:	e0fffb17 	ldw	r3,-20(fp)
  82ee58:	e0bffd17 	ldw	r2,-12(fp)
  82ee5c:	18800426 	beq	r3,r2,82ee70 <t_socketclose+0x78>
  82ee60:	082a7c80 	call	82a7c8 <dtrap>
  82ee64:	00bfffc4 	movi	r2,-1
  82ee68:	e0bfff15 	stw	r2,-4(fp)
  82ee6c:	00001006 	br	82eeb0 <t_socketclose+0xb8>
   so->so_error = 0;
  82ee70:	e0bffd17 	ldw	r2,-12(fp)
  82ee74:	10000615 	stw	zero,24(r2)
   INET_TRACE ((INETM_CLOSE|INETM_SOCKET), ("INET:close, so %lx\n",so));

   LOCK_NET_RESOURCE(NET_RESID);
  82ee78:	0009883a 	mov	r4,zero
  82ee7c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   err = soclose(so);
  82ee80:	e13ffd17 	ldw	r4,-12(fp)
  82ee84:	082f4440 	call	82f444 <soclose>
  82ee88:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
  82ee8c:	0009883a 	mov	r4,zero
  82ee90:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
  82ee94:	e0bffc17 	ldw	r2,-16(fp)
  82ee98:	1005003a 	cmpeq	r2,r2,zero
  82ee9c:	1000031e 	bne	r2,zero,82eeac <t_socketclose+0xb4>
   {
      /* do not do the following assignment since the socket structure
         addressed by so has been freed by this point, jharan 12-10-98 */
      /*      so->so_error = err;   */
      return SOCKET_ERROR;
  82eea0:	00bfffc4 	movi	r2,-1
  82eea4:	e0bfff15 	stw	r2,-4(fp)
  82eea8:	00000106 	br	82eeb0 <t_socketclose+0xb8>
   }
   return 0;
  82eeac:	e03fff15 	stw	zero,-4(fp)
  82eeb0:	e0bfff17 	ldw	r2,-4(fp)
}
  82eeb4:	e037883a 	mov	sp,fp
  82eeb8:	dfc00117 	ldw	ra,4(sp)
  82eebc:	df000017 	ldw	fp,0(sp)
  82eec0:	dec00204 	addi	sp,sp,8
  82eec4:	f800283a 	ret

0082eec8 <sockargs>:

static struct mbuf  * 
sockargs (void * arg, 
   int   arglen, 
   int   type)
{
  82eec8:	defff904 	addi	sp,sp,-28
  82eecc:	dfc00615 	stw	ra,24(sp)
  82eed0:	df000515 	stw	fp,20(sp)
  82eed4:	df000504 	addi	fp,sp,20
  82eed8:	e13ffc15 	stw	r4,-16(fp)
  82eedc:	e17ffd15 	stw	r5,-12(fp)
  82eee0:	e1bffe15 	stw	r6,-8(fp)
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
  82eee4:	0009883a 	mov	r4,zero
  82eee8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   m = m_getwithdata (type, arglen);
  82eeec:	e13ffe17 	ldw	r4,-8(fp)
  82eef0:	e17ffd17 	ldw	r5,-12(fp)
  82eef4:	082b5c80 	call	82b5c8 <m_getnbuf>
  82eef8:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
  82eefc:	0009883a 	mov	r4,zero
  82ef00:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   if (m == NULL)
  82ef04:	e0bffb17 	ldw	r2,-20(fp)
  82ef08:	1004c03a 	cmpne	r2,r2,zero
  82ef0c:	1000021e 	bne	r2,zero,82ef18 <sockargs+0x50>
      return NULL;
  82ef10:	e03fff15 	stw	zero,-4(fp)
  82ef14:	00000c06 	br	82ef48 <sockargs+0x80>
   m->m_len = arglen;
  82ef18:	e0fffd17 	ldw	r3,-12(fp)
  82ef1c:	e0bffb17 	ldw	r2,-20(fp)
  82ef20:	10c00215 	stw	r3,8(r2)
   MEMCPY(mtod (m, char *), arg, arglen);
  82ef24:	e0bffb17 	ldw	r2,-20(fp)
  82ef28:	10c00317 	ldw	r3,12(r2)
  82ef2c:	e1bffd17 	ldw	r6,-12(fp)
  82ef30:	e0bffc17 	ldw	r2,-16(fp)
  82ef34:	1809883a 	mov	r4,r3
  82ef38:	100b883a 	mov	r5,r2
  82ef3c:	08073380 	call	807338 <memcpy>
   return m;
  82ef40:	e0bffb17 	ldw	r2,-20(fp)
  82ef44:	e0bfff15 	stw	r2,-4(fp)
  82ef48:	e0bfff17 	ldw	r2,-4(fp)
}
  82ef4c:	e037883a 	mov	sp,fp
  82ef50:	dfc00117 	ldw	ra,4(sp)
  82ef54:	df000017 	ldw	fp,0(sp)
  82ef58:	dec00204 	addi	sp,sp,8
  82ef5c:	f800283a 	ret

0082ef60 <t_errno>:
 *                            ENOTSOCK if socket not found
 */

int
t_errno(long s)
{
  82ef60:	defffa04 	addi	sp,sp,-24
  82ef64:	dfc00515 	stw	ra,20(sp)
  82ef68:	df000415 	stw	fp,16(sp)
  82ef6c:	df000404 	addi	fp,sp,16
  82ef70:	e13fff15 	stw	r4,-4(fp)
   struct socket *so = LONG2SO(s);
  82ef74:	e0bfff17 	ldw	r2,-4(fp)
  82ef78:	10bff804 	addi	r2,r2,-32
  82ef7c:	1085883a 	add	r2,r2,r2
  82ef80:	1085883a 	add	r2,r2,r2
  82ef84:	e0bffe15 	stw	r2,-8(fp)
   struct socket *tmp;
   int errcode = ENOTSOCK;
  82ef88:	00801b04 	movi	r2,108
  82ef8c:	e0bffc15 	stw	r2,-16(fp)

   LOCK_NET_RESOURCE(NET_RESID);    /* protect soq */
  82ef90:	0009883a 	mov	r4,zero
  82ef94:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
  82ef98:	00803934 	movhi	r2,228
  82ef9c:	10a8d904 	addi	r2,r2,-23708
  82efa0:	e0bffd15 	stw	r2,-12(fp)
  82efa4:	00000a06 	br	82efd0 <t_errno+0x70>
   {
      if (tmp == so)  /* found socket, return error */
  82efa8:	e0fffd17 	ldw	r3,-12(fp)
  82efac:	e0bffe17 	ldw	r2,-8(fp)
  82efb0:	1880041e 	bne	r3,r2,82efc4 <t_errno+0x64>
      {
         errcode = so->so_error;
  82efb4:	e0bffe17 	ldw	r2,-8(fp)
  82efb8:	10800617 	ldw	r2,24(r2)
  82efbc:	e0bffc15 	stw	r2,-16(fp)
         break;
  82efc0:	00000606 	br	82efdc <t_errno+0x7c>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
  82efc4:	e0bffd17 	ldw	r2,-12(fp)
  82efc8:	10800017 	ldw	r2,0(r2)
  82efcc:	e0bffd15 	stw	r2,-12(fp)
  82efd0:	e0bffd17 	ldw	r2,-12(fp)
  82efd4:	1004c03a 	cmpne	r2,r2,zero
  82efd8:	103ff31e 	bne	r2,zero,82efa8 <t_errno+0x48>
         errcode = so->so_error;
         break;
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
  82efdc:	0009883a 	mov	r4,zero
  82efe0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   return errcode;
  82efe4:	e0bffc17 	ldw	r2,-16(fp)
}
  82efe8:	e037883a 	mov	sp,fp
  82efec:	dfc00117 	ldw	ra,4(sp)
  82eff0:	df000017 	ldw	fp,0(sp)
  82eff4:	dec00204 	addi	sp,sp,8
  82eff8:	f800283a 	ret

0082effc <socreate>:
 * RETURNS: 
 */

struct socket *   
socreate (int dom, int type, int proto)
{
  82effc:	defff604 	addi	sp,sp,-40
  82f000:	dfc00915 	stw	ra,36(sp)
  82f004:	df000815 	stw	fp,32(sp)
  82f008:	df000804 	addi	fp,sp,32
  82f00c:	e13ffc15 	stw	r4,-16(fp)
  82f010:	e17ffd15 	stw	r5,-12(fp)
  82f014:	e1bffe15 	stw	r6,-8(fp)
   struct protosw *prp;
   struct socket *so;
   int   error;
   int rc;

   if (proto)
  82f018:	e0bffe17 	ldw	r2,-8(fp)
  82f01c:	1005003a 	cmpeq	r2,r2,zero
  82f020:	1000061e 	bne	r2,zero,82f03c <socreate+0x40>
      prp = pffindproto(dom, proto, type);
  82f024:	e13ffc17 	ldw	r4,-16(fp)
  82f028:	e17ffe17 	ldw	r5,-8(fp)
  82f02c:	e1bffd17 	ldw	r6,-12(fp)
  82f030:	082b4f80 	call	82b4f8 <pffindproto>
  82f034:	e0bffb15 	stw	r2,-20(fp)
  82f038:	00000406 	br	82f04c <socreate+0x50>
   else
      prp = pffindtype(dom, type);
  82f03c:	e13ffc17 	ldw	r4,-16(fp)
  82f040:	e17ffd17 	ldw	r5,-12(fp)
  82f044:	082b4580 	call	82b458 <pffindtype>
  82f048:	e0bffb15 	stw	r2,-20(fp)
   if (prp == 0)
  82f04c:	e0bffb17 	ldw	r2,-20(fp)
  82f050:	1004c03a 	cmpne	r2,r2,zero
  82f054:	1000021e 	bne	r2,zero,82f060 <socreate+0x64>
      return NULL;
  82f058:	e03fff15 	stw	zero,-4(fp)
  82f05c:	00005406 	br	82f1b0 <socreate+0x1b4>
   if (prp->pr_type != type)
  82f060:	e0bffb17 	ldw	r2,-20(fp)
  82f064:	1080000b 	ldhu	r2,0(r2)
  82f068:	10ffffcc 	andi	r3,r2,65535
  82f06c:	18e0001c 	xori	r3,r3,32768
  82f070:	18e00004 	addi	r3,r3,-32768
  82f074:	e0bffd17 	ldw	r2,-12(fp)
  82f078:	18800226 	beq	r3,r2,82f084 <socreate+0x88>
      return NULL;
  82f07c:	e03fff15 	stw	zero,-4(fp)
  82f080:	00004b06 	br	82f1b0 <socreate+0x1b4>
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
  82f084:	01002104 	movi	r4,132
  82f088:	082b20c0 	call	82b20c <npalloc>
  82f08c:	e0bffa15 	stw	r2,-24(fp)
  82f090:	e0bffa17 	ldw	r2,-24(fp)
  82f094:	1004c03a 	cmpne	r2,r2,zero
  82f098:	1000021e 	bne	r2,zero,82f0a4 <socreate+0xa8>
      return NULL;
  82f09c:	e03fff15 	stw	zero,-4(fp)
  82f0a0:	00004306 	br	82f1b0 <socreate+0x1b4>
   so->next = NULL;
  82f0a4:	e0bffa17 	ldw	r2,-24(fp)
  82f0a8:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);
  82f0ac:	e17ffa17 	ldw	r5,-24(fp)
  82f0b0:	01003934 	movhi	r4,228
  82f0b4:	2128d904 	addi	r4,r4,-23708
  82f0b8:	082a1580 	call	82a158 <putq>

   so->so_options = socket_defaults;
  82f0bc:	d0a0440b 	ldhu	r2,-32496(gp)
  82f0c0:	10ffffcc 	andi	r3,r2,65535
  82f0c4:	e0bffa17 	ldw	r2,-24(fp)
  82f0c8:	10c00415 	stw	r3,16(r2)
   so->so_domain = dom;
  82f0cc:	e0fffa17 	ldw	r3,-24(fp)
  82f0d0:	e0bffc17 	ldw	r2,-16(fp)
  82f0d4:	18800515 	stw	r2,20(r3)
   so->so_state = 0;
  82f0d8:	e0bffa17 	ldw	r2,-24(fp)
  82f0dc:	1000088d 	sth	zero,34(r2)
   so->so_type = (char)type;
  82f0e0:	e0bffd17 	ldw	r2,-12(fp)
  82f0e4:	1007883a 	mov	r3,r2
  82f0e8:	e0bffa17 	ldw	r2,-24(fp)
  82f0ec:	10c00985 	stb	r3,38(r2)
   so->so_proto = prp;
  82f0f0:	e0fffa17 	ldw	r3,-24(fp)
  82f0f4:	e0bffb17 	ldw	r2,-20(fp)
  82f0f8:	18800215 	stw	r2,8(r3)

#ifdef IP_MULTICAST
   so->inp_moptions = NULL;
  82f0fc:	e0bffa17 	ldw	r2,-24(fp)
  82f100:	10000315 	stw	zero,12(r2)
#endif   /* IP_MULTICAST */

   so->so_req = PRU_ATTACH;
  82f104:	e0bffa17 	ldw	r2,-24(fp)
  82f108:	10000715 	stw	zero,28(r2)
   error = (*prp->pr_usrreq)(so,(struct mbuf *)0, LONG2MBUF((long)proto));
  82f10c:	e0bffb17 	ldw	r2,-20(fp)
  82f110:	10800317 	ldw	r2,12(r2)
  82f114:	e1bffe17 	ldw	r6,-8(fp)
  82f118:	e13ffa17 	ldw	r4,-24(fp)
  82f11c:	000b883a 	mov	r5,zero
  82f120:	103ee83a 	callr	r2
  82f124:	e0bff915 	stw	r2,-28(fp)
   if (error) goto bad;
  82f128:	e0bff917 	ldw	r2,-28(fp)
  82f12c:	1004c03a 	cmpne	r2,r2,zero
  82f130:	10000f1e 	bne	r2,zero,82f170 <socreate+0x174>

   if (so_evtmap)
  82f134:	00802174 	movhi	r2,133
  82f138:	10834904 	addi	r2,r2,3364
  82f13c:	10800003 	ldbu	r2,0(r2)
  82f140:	10803fcc 	andi	r2,r2,255
  82f144:	1005003a 	cmpeq	r2,r2,zero
  82f148:	1000171e 	bne	r2,zero,82f1a8 <socreate+0x1ac>
   {                       
      rc = (*so_evtmap_create) (so);
  82f14c:	00802174 	movhi	r2,133
  82f150:	10834704 	addi	r2,r2,3356
  82f154:	10800017 	ldw	r2,0(r2)
  82f158:	e13ffa17 	ldw	r4,-24(fp)
  82f15c:	103ee83a 	callr	r2
  82f160:	e0bff815 	stw	r2,-32(fp)
      if (rc != 0)
  82f164:	e0bff817 	ldw	r2,-32(fp)
  82f168:	1005003a 	cmpeq	r2,r2,zero
  82f16c:	10000a1e 	bne	r2,zero,82f198 <socreate+0x19c>
      {
bad:   
         so->so_state |= SS_NOFDREF;
  82f170:	e0bffa17 	ldw	r2,-24(fp)
  82f174:	1080088b 	ldhu	r2,34(r2)
  82f178:	10800054 	ori	r2,r2,1
  82f17c:	1007883a 	mov	r3,r2
  82f180:	e0bffa17 	ldw	r2,-24(fp)
  82f184:	10c0088d 	sth	r3,34(r2)
         sofree (so);
  82f188:	e13ffa17 	ldw	r4,-24(fp)
  82f18c:	082f3140 	call	82f314 <sofree>
         return NULL;   
  82f190:	e03fff15 	stw	zero,-4(fp)
  82f194:	00000606 	br	82f1b0 <socreate+0x1b4>
      /*
       * Altera Niche Stack Nios port modification:
       * Remove (void *) cast since -> owner is now TK_OBJECT
       * to fix build warning.
       */
      so->owner = TK_THIS;
  82f198:	08266400 	call	826640 <TK_OSTaskQuery>
  82f19c:	1007883a 	mov	r3,r2
  82f1a0:	e0bffa17 	ldw	r2,-24(fp)
  82f1a4:	10c02005 	stb	r3,128(r2)
   }

   return so;
  82f1a8:	e0bffa17 	ldw	r2,-24(fp)
  82f1ac:	e0bfff15 	stw	r2,-4(fp)
  82f1b0:	e0bfff17 	ldw	r2,-4(fp)
}
  82f1b4:	e037883a 	mov	sp,fp
  82f1b8:	dfc00117 	ldw	ra,4(sp)
  82f1bc:	df000017 	ldw	fp,0(sp)
  82f1c0:	dec00204 	addi	sp,sp,8
  82f1c4:	f800283a 	ret

0082f1c8 <sobind>:
 */

int
sobind(struct socket * so, 
   struct mbuf *  nam)
{
  82f1c8:	defffb04 	addi	sp,sp,-20
  82f1cc:	dfc00415 	stw	ra,16(sp)
  82f1d0:	df000315 	stw	fp,12(sp)
  82f1d4:	df000304 	addi	fp,sp,12
  82f1d8:	e13ffe15 	stw	r4,-8(fp)
  82f1dc:	e17fff15 	stw	r5,-4(fp)
   int   error;

   so->so_req = PRU_BIND;
  82f1e0:	e0fffe17 	ldw	r3,-8(fp)
  82f1e4:	00800084 	movi	r2,2
  82f1e8:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
  82f1ec:	e0bffe17 	ldw	r2,-8(fp)
  82f1f0:	10800217 	ldw	r2,8(r2)
  82f1f4:	10800317 	ldw	r2,12(r2)
  82f1f8:	e13ffe17 	ldw	r4,-8(fp)
  82f1fc:	000b883a 	mov	r5,zero
  82f200:	e1bfff17 	ldw	r6,-4(fp)
  82f204:	103ee83a 	callr	r2
  82f208:	e0bffd15 	stw	r2,-12(fp)
   return (error);
  82f20c:	e0bffd17 	ldw	r2,-12(fp)
}
  82f210:	e037883a 	mov	sp,fp
  82f214:	dfc00117 	ldw	ra,4(sp)
  82f218:	df000017 	ldw	fp,0(sp)
  82f21c:	dec00204 	addi	sp,sp,8
  82f220:	f800283a 	ret

0082f224 <solisten>:
 */

int
solisten(struct socket * so, 
   int   backlog)
{
  82f224:	defff904 	addi	sp,sp,-28
  82f228:	dfc00615 	stw	ra,24(sp)
  82f22c:	df000515 	stw	fp,20(sp)
  82f230:	df000504 	addi	fp,sp,20
  82f234:	e13ffc15 	stw	r4,-16(fp)
  82f238:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   so->so_req = PRU_LISTEN;
  82f23c:	e0fffc17 	ldw	r3,-16(fp)
  82f240:	008000c4 	movi	r2,3
  82f244:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so,
  82f248:	e0bffc17 	ldw	r2,-16(fp)
  82f24c:	10800217 	ldw	r2,8(r2)
  82f250:	10800317 	ldw	r2,12(r2)
  82f254:	e13ffc17 	ldw	r4,-16(fp)
  82f258:	000b883a 	mov	r5,zero
  82f25c:	000d883a 	mov	r6,zero
  82f260:	103ee83a 	callr	r2
  82f264:	e0bffb15 	stw	r2,-20(fp)
    (struct mbuf *)0, (struct mbuf *)0);
   if (error) 
  82f268:	e0bffb17 	ldw	r2,-20(fp)
  82f26c:	1005003a 	cmpeq	r2,r2,zero
  82f270:	1000031e 	bne	r2,zero,82f280 <solisten+0x5c>
   {
      return (error);
  82f274:	e0bffb17 	ldw	r2,-20(fp)
  82f278:	e0bfff15 	stw	r2,-4(fp)
  82f27c:	00001f06 	br	82f2fc <solisten+0xd8>
   }
   if (so->so_q == 0) 
  82f280:	e0bffc17 	ldw	r2,-16(fp)
  82f284:	10801d17 	ldw	r2,116(r2)
  82f288:	1004c03a 	cmpne	r2,r2,zero
  82f28c:	10000b1e 	bne	r2,zero,82f2bc <solisten+0x98>
   {
      so->so_q = so;
  82f290:	e0fffc17 	ldw	r3,-16(fp)
  82f294:	e0bffc17 	ldw	r2,-16(fp)
  82f298:	18801d15 	stw	r2,116(r3)
      so->so_q0 = so;
  82f29c:	e0fffc17 	ldw	r3,-16(fp)
  82f2a0:	e0bffc17 	ldw	r2,-16(fp)
  82f2a4:	18801c15 	stw	r2,112(r3)
      so->so_options |= SO_ACCEPTCONN;
  82f2a8:	e0bffc17 	ldw	r2,-16(fp)
  82f2ac:	10800417 	ldw	r2,16(r2)
  82f2b0:	10c00094 	ori	r3,r2,2
  82f2b4:	e0bffc17 	ldw	r2,-16(fp)
  82f2b8:	10c00415 	stw	r3,16(r2)
   }
   if (backlog < 0)
  82f2bc:	e0bffd17 	ldw	r2,-12(fp)
  82f2c0:	1004403a 	cmpge	r2,r2,zero
  82f2c4:	1000011e 	bne	r2,zero,82f2cc <solisten+0xa8>
      backlog = 0;
  82f2c8:	e03ffd15 	stw	zero,-12(fp)
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
  82f2cc:	e0fffd17 	ldw	r3,-12(fp)
  82f2d0:	e0fffe15 	stw	r3,-8(fp)
  82f2d4:	e0fffe17 	ldw	r3,-8(fp)
  82f2d8:	18800190 	cmplti	r2,r3,6
  82f2dc:	1000021e 	bne	r2,zero,82f2e8 <solisten+0xc4>
  82f2e0:	00800144 	movi	r2,5
  82f2e4:	e0bffe15 	stw	r2,-8(fp)
  82f2e8:	e0bffe17 	ldw	r2,-8(fp)
  82f2ec:	1007883a 	mov	r3,r2
  82f2f0:	e0bffc17 	ldw	r2,-16(fp)
  82f2f4:	10c01e85 	stb	r3,122(r2)
   return 0;
  82f2f8:	e03fff15 	stw	zero,-4(fp)
  82f2fc:	e0bfff17 	ldw	r2,-4(fp)
}
  82f300:	e037883a 	mov	sp,fp
  82f304:	dfc00117 	ldw	ra,4(sp)
  82f308:	df000017 	ldw	fp,0(sp)
  82f30c:	dec00204 	addi	sp,sp,8
  82f310:	f800283a 	ret

0082f314 <sofree>:
 * RETURNS: 
 */

void
sofree(struct socket * so)
{
  82f314:	defffd04 	addi	sp,sp,-12
  82f318:	dfc00215 	stw	ra,8(sp)
  82f31c:	df000115 	stw	fp,4(sp)
  82f320:	df000104 	addi	fp,sp,4
  82f324:	e13fff15 	stw	r4,-4(fp)
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
  82f328:	e0bfff17 	ldw	r2,-4(fp)
  82f32c:	10800117 	ldw	r2,4(r2)
  82f330:	1004c03a 	cmpne	r2,r2,zero
  82f334:	10003e1e 	bne	r2,zero,82f430 <sofree+0x11c>
  82f338:	e0bfff17 	ldw	r2,-4(fp)
  82f33c:	1080088b 	ldhu	r2,34(r2)
  82f340:	10bfffcc 	andi	r2,r2,65535
  82f344:	1080004c 	andi	r2,r2,1
  82f348:	1004c03a 	cmpne	r2,r2,zero
  82f34c:	1000011e 	bne	r2,zero,82f354 <sofree+0x40>
      return;
  82f350:	00003706 	br	82f430 <sofree+0x11c>
   if (so->so_head) 
  82f354:	e0bfff17 	ldw	r2,-4(fp)
  82f358:	10801b17 	ldw	r2,108(r2)
  82f35c:	1005003a 	cmpeq	r2,r2,zero
  82f360:	10000f1e 	bne	r2,zero,82f3a0 <sofree+0x8c>
   {
      if (!soqremque(so, 0) && !soqremque(so, 1))
  82f364:	e13fff17 	ldw	r4,-4(fp)
  82f368:	000b883a 	mov	r5,zero
  82f36c:	08318e80 	call	8318e8 <soqremque>
  82f370:	1004c03a 	cmpne	r2,r2,zero
  82f374:	1000081e 	bne	r2,zero,82f398 <sofree+0x84>
  82f378:	e13fff17 	ldw	r4,-4(fp)
  82f37c:	01400044 	movi	r5,1
  82f380:	08318e80 	call	8318e8 <soqremque>
  82f384:	1004c03a 	cmpne	r2,r2,zero
  82f388:	1000031e 	bne	r2,zero,82f398 <sofree+0x84>
         panic("sofree");
  82f38c:	01002174 	movhi	r4,133
  82f390:	2136d904 	addi	r4,r4,-9372
  82f394:	0825a2c0 	call	825a2c <panic>
      so->so_head = 0;
  82f398:	e0bfff17 	ldw	r2,-4(fp)
  82f39c:	10001b15 	stw	zero,108(r2)
   }
   sbrelease(&so->so_snd);
  82f3a0:	e0bfff17 	ldw	r2,-4(fp)
  82f3a4:	11001204 	addi	r4,r2,72
  82f3a8:	0831cc40 	call	831cc4 <sbrelease>
   sorflush(so);
  82f3ac:	e13fff17 	ldw	r4,-4(fp)
  82f3b0:	083082c0 	call	83082c <sorflush>
      _socket_free_entry (so);
#endif   /* SAVE_SOCK_ENDPOINTS */

#ifdef IP_MULTICAST
   /* multicast opts? */
   if (so->inp_moptions)
  82f3b4:	e0bfff17 	ldw	r2,-4(fp)
  82f3b8:	10800317 	ldw	r2,12(r2)
  82f3bc:	1005003a 	cmpeq	r2,r2,zero
  82f3c0:	1000031e 	bne	r2,zero,82f3d0 <sofree+0xbc>
	   ip_freemoptions(so->inp_moptions);
  82f3c4:	e0bfff17 	ldw	r2,-4(fp)
  82f3c8:	11000317 	ldw	r4,12(r2)
  82f3cc:	08452580 	call	845258 <ip_freemoptions>
#endif   /* IP_MULTICAST */

   /* IP_TOS opts? */
   if (so->so_optsPack)
  82f3d0:	e0bfff17 	ldw	r2,-4(fp)
  82f3d4:	10801f17 	ldw	r2,124(r2)
  82f3d8:	1005003a 	cmpeq	r2,r2,zero
  82f3dc:	1000031e 	bne	r2,zero,82f3ec <sofree+0xd8>
      SOCOPT_FREE(so->so_optsPack);
  82f3e0:	e0bfff17 	ldw	r2,-4(fp)
  82f3e4:	11001f17 	ldw	r4,124(r2)
  82f3e8:	082b3000 	call	82b300 <npfree>
	   
   qdel(&soq, so);   /* Delete the socket entry from the queue */
  82f3ec:	01003934 	movhi	r4,228
  82f3f0:	2128d904 	addi	r4,r4,-23708
  82f3f4:	e17fff17 	ldw	r5,-4(fp)
  82f3f8:	082a2080 	call	82a208 <qdel>
   
   if (so_evtmap)  
  82f3fc:	00802174 	movhi	r2,133
  82f400:	10834904 	addi	r2,r2,3364
  82f404:	10800003 	ldbu	r2,0(r2)
  82f408:	10803fcc 	andi	r2,r2,255
  82f40c:	1005003a 	cmpeq	r2,r2,zero
  82f410:	1000051e 	bne	r2,zero,82f428 <sofree+0x114>
      (*so_evtmap_delete) (so);
  82f414:	00802174 	movhi	r2,133
  82f418:	10834804 	addi	r2,r2,3360
  82f41c:	10800017 	ldw	r2,0(r2)
  82f420:	e13fff17 	ldw	r4,-4(fp)
  82f424:	103ee83a 	callr	r2
   
   SOC_FREE(so);
  82f428:	e13fff17 	ldw	r4,-4(fp)
  82f42c:	082b3000 	call	82b300 <npfree>
}
  82f430:	e037883a 	mov	sp,fp
  82f434:	dfc00117 	ldw	ra,4(sp)
  82f438:	df000017 	ldw	fp,0(sp)
  82f43c:	dec00204 	addi	sp,sp,8
  82f440:	f800283a 	ret

0082f444 <soclose>:
 * RETURNS: 
 */

int
soclose(struct socket * so)
{
  82f444:	defff804 	addi	sp,sp,-32
  82f448:	dfc00715 	stw	ra,28(sp)
  82f44c:	df000615 	stw	fp,24(sp)
  82f450:	df000604 	addi	fp,sp,24
  82f454:	e13ffe15 	stw	r4,-8(fp)
   int   error =  0;
  82f458:	e03ffd15 	stw	zero,-12(fp)
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
  82f45c:	00803934 	movhi	r2,228
  82f460:	10a8d904 	addi	r2,r2,-23708
  82f464:	10800017 	ldw	r2,0(r2)
  82f468:	e0bffc15 	stw	r2,-16(fp)
  82f46c:	00000606 	br	82f488 <soclose+0x44>
   {
      if (so == tmpso)
  82f470:	e0fffe17 	ldw	r3,-8(fp)
  82f474:	e0bffc17 	ldw	r2,-16(fp)
  82f478:	18800626 	beq	r3,r2,82f494 <soclose+0x50>
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
  82f47c:	e0bffc17 	ldw	r2,-16(fp)
  82f480:	10800017 	ldw	r2,0(r2)
  82f484:	e0bffc15 	stw	r2,-16(fp)
  82f488:	e0bffc17 	ldw	r2,-16(fp)
  82f48c:	1004c03a 	cmpne	r2,r2,zero
  82f490:	103ff71e 	bne	r2,zero,82f470 <soclose+0x2c>
   {
      if (so == tmpso)
         break;
   }
   if ( tmpso == NULL)
  82f494:	e0bffc17 	ldw	r2,-16(fp)
  82f498:	1004c03a 	cmpne	r2,r2,zero
  82f49c:	1000031e 	bne	r2,zero,82f4ac <soclose+0x68>
      return EINVAL;
  82f4a0:	00800584 	movi	r2,22
  82f4a4:	e0bfff15 	stw	r2,-4(fp)
  82f4a8:	00009d06 	br	82f720 <soclose+0x2dc>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
  82f4ac:	e0bffe17 	ldw	r2,-8(fp)
  82f4b0:	10800417 	ldw	r2,16(r2)
  82f4b4:	1080008c 	andi	r2,r2,2
  82f4b8:	1005003a 	cmpeq	r2,r2,zero
  82f4bc:	1000101e 	bne	r2,zero,82f500 <soclose+0xbc>
   {
      while (so->so_q0 != so)
  82f4c0:	00000306 	br	82f4d0 <soclose+0x8c>
         (void) soabort(so->so_q0);
  82f4c4:	e0bffe17 	ldw	r2,-8(fp)
  82f4c8:	11001c17 	ldw	r4,112(r2)
  82f4cc:	082f7380 	call	82f738 <soabort>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
  82f4d0:	e0bffe17 	ldw	r2,-8(fp)
  82f4d4:	10c01c17 	ldw	r3,112(r2)
  82f4d8:	e0bffe17 	ldw	r2,-8(fp)
  82f4dc:	18bff91e 	bne	r3,r2,82f4c4 <soclose+0x80>
         (void) soabort(so->so_q0);
      while (so->so_q != so)
  82f4e0:	00000306 	br	82f4f0 <soclose+0xac>
         (void) soabort(so->so_q);
  82f4e4:	e0bffe17 	ldw	r2,-8(fp)
  82f4e8:	11001d17 	ldw	r4,116(r2)
  82f4ec:	082f7380 	call	82f738 <soabort>
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
         (void) soabort(so->so_q0);
      while (so->so_q != so)
  82f4f0:	e0bffe17 	ldw	r2,-8(fp)
  82f4f4:	10c01d17 	ldw	r3,116(r2)
  82f4f8:	e0bffe17 	ldw	r2,-8(fp)
  82f4fc:	18bff91e 	bne	r3,r2,82f4e4 <soclose+0xa0>
         (void) soabort(so->so_q);
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
  82f500:	e0bffe17 	ldw	r2,-8(fp)
  82f504:	10800983 	ldbu	r2,38(r2)
  82f508:	10803fcc 	andi	r2,r2,255
  82f50c:	1080201c 	xori	r2,r2,128
  82f510:	10bfe004 	addi	r2,r2,-128
  82f514:	10800060 	cmpeqi	r2,r2,1
  82f518:	10000c1e 	bne	r2,zero,82f54c <soclose+0x108>
   { 
      so->so_req = PRU_DETACH;
  82f51c:	e0fffe17 	ldw	r3,-8(fp)
  82f520:	00800044 	movi	r2,1
  82f524:	18800715 	stw	r2,28(r3)
      error = (*so->so_proto->pr_usrreq)(so,
  82f528:	e0bffe17 	ldw	r2,-8(fp)
  82f52c:	10800217 	ldw	r2,8(r2)
  82f530:	10800317 	ldw	r2,12(r2)
  82f534:	e13ffe17 	ldw	r4,-8(fp)
  82f538:	000b883a 	mov	r5,zero
  82f53c:	000d883a 	mov	r6,zero
  82f540:	103ee83a 	callr	r2
  82f544:	e0bffd15 	stw	r2,-12(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      goto discard;
  82f548:	00006306 	br	82f6d8 <soclose+0x294>
   }

   if (so->so_pcb == 0)
  82f54c:	e0bffe17 	ldw	r2,-8(fp)
  82f550:	10800117 	ldw	r2,4(r2)
  82f554:	1005003a 	cmpeq	r2,r2,zero
  82f558:	10005f1e 	bne	r2,zero,82f6d8 <soclose+0x294>
      goto discard;
   if (so->so_state & SS_ISCONNECTED) 
  82f55c:	e0bffe17 	ldw	r2,-8(fp)
  82f560:	1080088b 	ldhu	r2,34(r2)
  82f564:	10bfffcc 	andi	r2,r2,65535
  82f568:	1080008c 	andi	r2,r2,2
  82f56c:	1005003a 	cmpeq	r2,r2,zero
  82f570:	1000451e 	bne	r2,zero,82f688 <soclose+0x244>
   {
      if ((so->so_state & SS_ISDISCONNECTING) == 0) 
  82f574:	e0bffe17 	ldw	r2,-8(fp)
  82f578:	1080088b 	ldhu	r2,34(r2)
  82f57c:	10bfffcc 	andi	r2,r2,65535
  82f580:	1080020c 	andi	r2,r2,8
  82f584:	1004c03a 	cmpne	r2,r2,zero
  82f588:	1000061e 	bne	r2,zero,82f5a4 <soclose+0x160>
      {
         error = sodisconnect(so);
  82f58c:	e13ffe17 	ldw	r4,-8(fp)
  82f590:	082f8f80 	call	82f8f8 <sodisconnect>
  82f594:	e0bffd15 	stw	r2,-12(fp)
         if (error)
  82f598:	e0bffd17 	ldw	r2,-12(fp)
  82f59c:	1004c03a 	cmpne	r2,r2,zero
  82f5a0:	1000391e 	bne	r2,zero,82f688 <soclose+0x244>
            goto drop;
      }
      if (so->so_options & SO_LINGER) 
  82f5a4:	e0bffe17 	ldw	r2,-8(fp)
  82f5a8:	10800417 	ldw	r2,16(r2)
  82f5ac:	1080200c 	andi	r2,r2,128
  82f5b0:	1005003a 	cmpeq	r2,r2,zero
  82f5b4:	1000281e 	bne	r2,zero,82f658 <soclose+0x214>
      {
         if ((so->so_state & SS_ISDISCONNECTING) &&
  82f5b8:	e0bffe17 	ldw	r2,-8(fp)
  82f5bc:	1080088b 	ldhu	r2,34(r2)
  82f5c0:	10bfffcc 	andi	r2,r2,65535
  82f5c4:	1080020c 	andi	r2,r2,8
  82f5c8:	1005003a 	cmpeq	r2,r2,zero
  82f5cc:	1000061e 	bne	r2,zero,82f5e8 <soclose+0x1a4>
  82f5d0:	e0bffe17 	ldw	r2,-8(fp)
  82f5d4:	1080088b 	ldhu	r2,34(r2)
  82f5d8:	10bfffcc 	andi	r2,r2,65535
  82f5dc:	1080400c 	andi	r2,r2,256
  82f5e0:	1004c03a 	cmpne	r2,r2,zero
  82f5e4:	1000281e 	bne	r2,zero,82f688 <soclose+0x244>
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
  82f5e8:	e0bffe17 	ldw	r2,-8(fp)
  82f5ec:	1080080b 	ldhu	r2,32(r2)
  82f5f0:	10bfffcc 	andi	r2,r2,65535
  82f5f4:	10a0001c 	xori	r2,r2,32768
  82f5f8:	10a00004 	addi	r2,r2,-32768
  82f5fc:	10c0fa24 	muli	r3,r2,1000
  82f600:	00802174 	movhi	r2,133
  82f604:	10832604 	addi	r2,r2,3224
  82f608:	10800017 	ldw	r2,0(r2)
  82f60c:	1885883a 	add	r2,r3,r2
  82f610:	e0bffb15 	stw	r2,-20(fp)
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
  82f614:	00000406 	br	82f628 <soclose+0x1e4>
         {
            tcp_sleep((char *)&so->so_timeo);
  82f618:	e0bffe17 	ldw	r2,-8(fp)
  82f61c:	10800904 	addi	r2,r2,36
  82f620:	1009883a 	mov	r4,r2
  82f624:	082639c0 	call	82639c <tcp_sleep>
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
  82f628:	e0bffe17 	ldw	r2,-8(fp)
  82f62c:	1080088b 	ldhu	r2,34(r2)
  82f630:	10bfffcc 	andi	r2,r2,65535
  82f634:	1080008c 	andi	r2,r2,2
  82f638:	1005003a 	cmpeq	r2,r2,zero
  82f63c:	1000121e 	bne	r2,zero,82f688 <soclose+0x244>
  82f640:	00802174 	movhi	r2,133
  82f644:	10832604 	addi	r2,r2,3224
  82f648:	10c00017 	ldw	r3,0(r2)
  82f64c:	e0bffb17 	ldw	r2,-20(fp)
  82f650:	18bff136 	bltu	r3,r2,82f618 <soclose+0x1d4>
  82f654:	00000c06 	br	82f688 <soclose+0x244>
      {
         /* If socket still has send data just return now, leaving the 
          * socket intact so the data can be sent. Socket should be cleaned
          * up later by timers.
          */
         if(so->so_snd.sb_cc)
  82f658:	e0bffe17 	ldw	r2,-8(fp)
  82f65c:	10801217 	ldw	r2,72(r2)
  82f660:	1005003a 	cmpeq	r2,r2,zero
  82f664:	1000081e 	bne	r2,zero,82f688 <soclose+0x244>
         {
            so->so_state |= SS_NOFDREF;   /* mark as OK to close */
  82f668:	e0bffe17 	ldw	r2,-8(fp)
  82f66c:	1080088b 	ldhu	r2,34(r2)
  82f670:	10800054 	ori	r2,r2,1
  82f674:	1007883a 	mov	r3,r2
  82f678:	e0bffe17 	ldw	r2,-8(fp)
  82f67c:	10c0088d 	sth	r3,34(r2)
            return 0;
  82f680:	e03fff15 	stw	zero,-4(fp)
  82f684:	00002606 	br	82f720 <soclose+0x2dc>
         }
      }
   }
drop:
   if (so->so_pcb) 
  82f688:	e0bffe17 	ldw	r2,-8(fp)
  82f68c:	10800117 	ldw	r2,4(r2)
  82f690:	1005003a 	cmpeq	r2,r2,zero
  82f694:	1000101e 	bne	r2,zero,82f6d8 <soclose+0x294>
   {
      int   error2;
      so->so_req = PRU_DETACH;
  82f698:	e0fffe17 	ldw	r3,-8(fp)
  82f69c:	00800044 	movi	r2,1
  82f6a0:	18800715 	stw	r2,28(r3)
      error2 = (*so->so_proto->pr_usrreq)(so,
  82f6a4:	e0bffe17 	ldw	r2,-8(fp)
  82f6a8:	10800217 	ldw	r2,8(r2)
  82f6ac:	10800317 	ldw	r2,12(r2)
  82f6b0:	e13ffe17 	ldw	r4,-8(fp)
  82f6b4:	000b883a 	mov	r5,zero
  82f6b8:	000d883a 	mov	r6,zero
  82f6bc:	103ee83a 	callr	r2
  82f6c0:	e0bffa15 	stw	r2,-24(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
  82f6c4:	e0bffd17 	ldw	r2,-12(fp)
  82f6c8:	1004c03a 	cmpne	r2,r2,zero
  82f6cc:	1000021e 	bne	r2,zero,82f6d8 <soclose+0x294>
         error = error2;
  82f6d0:	e0bffa17 	ldw	r2,-24(fp)
  82f6d4:	e0bffd15 	stw	r2,-12(fp)
   }
discard:
   if (so->so_state & SS_NOFDREF)
  82f6d8:	e0bffe17 	ldw	r2,-8(fp)
  82f6dc:	1080088b 	ldhu	r2,34(r2)
  82f6e0:	10bfffcc 	andi	r2,r2,65535
  82f6e4:	1080004c 	andi	r2,r2,1
  82f6e8:	10803fcc 	andi	r2,r2,255
  82f6ec:	1005003a 	cmpeq	r2,r2,zero
  82f6f0:	1000011e 	bne	r2,zero,82f6f8 <soclose+0x2b4>
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
  82f6f4:	082a7c80 	call	82a7c8 <dtrap>
   }
   so->so_state |= SS_NOFDREF;
  82f6f8:	e0bffe17 	ldw	r2,-8(fp)
  82f6fc:	1080088b 	ldhu	r2,34(r2)
  82f700:	10800054 	ori	r2,r2,1
  82f704:	1007883a 	mov	r3,r2
  82f708:	e0bffe17 	ldw	r2,-8(fp)
  82f70c:	10c0088d 	sth	r3,34(r2)
   sofree(so);
  82f710:	e13ffe17 	ldw	r4,-8(fp)
  82f714:	082f3140 	call	82f314 <sofree>
   return (error);
  82f718:	e0bffd17 	ldw	r2,-12(fp)
  82f71c:	e0bfff15 	stw	r2,-4(fp)
  82f720:	e0bfff17 	ldw	r2,-4(fp)
}
  82f724:	e037883a 	mov	sp,fp
  82f728:	dfc00117 	ldw	ra,4(sp)
  82f72c:	df000017 	ldw	fp,0(sp)
  82f730:	dec00204 	addi	sp,sp,8
  82f734:	f800283a 	ret

0082f738 <soabort>:
 * RETURNS: 
 */

int
soabort(struct socket * so)
{
  82f738:	defffd04 	addi	sp,sp,-12
  82f73c:	dfc00215 	stw	ra,8(sp)
  82f740:	df000115 	stw	fp,4(sp)
  82f744:	df000104 	addi	fp,sp,4
  82f748:	e13fff15 	stw	r4,-4(fp)
   so->so_req = PRU_ABORT;
  82f74c:	e0ffff17 	ldw	r3,-4(fp)
  82f750:	00800284 	movi	r2,10
  82f754:	18800715 	stw	r2,28(r3)
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
  82f758:	e0bfff17 	ldw	r2,-4(fp)
  82f75c:	10800217 	ldw	r2,8(r2)
  82f760:	10800317 	ldw	r2,12(r2)
  82f764:	e13fff17 	ldw	r4,-4(fp)
  82f768:	000b883a 	mov	r5,zero
  82f76c:	000d883a 	mov	r6,zero
  82f770:	103ee83a 	callr	r2
}
  82f774:	e037883a 	mov	sp,fp
  82f778:	dfc00117 	ldw	ra,4(sp)
  82f77c:	df000017 	ldw	fp,0(sp)
  82f780:	dec00204 	addi	sp,sp,8
  82f784:	f800283a 	ret

0082f788 <soaccept>:
 */

int
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
  82f788:	defffb04 	addi	sp,sp,-20
  82f78c:	dfc00415 	stw	ra,16(sp)
  82f790:	df000315 	stw	fp,12(sp)
  82f794:	df000304 	addi	fp,sp,12
  82f798:	e13ffe15 	stw	r4,-8(fp)
  82f79c:	e17fff15 	stw	r5,-4(fp)
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
  82f7a0:	e0bffe17 	ldw	r2,-8(fp)
  82f7a4:	1080088b 	ldhu	r2,34(r2)
  82f7a8:	10bfffcc 	andi	r2,r2,65535
  82f7ac:	1080004c 	andi	r2,r2,1
  82f7b0:	1004c03a 	cmpne	r2,r2,zero
  82f7b4:	1000031e 	bne	r2,zero,82f7c4 <soaccept+0x3c>
      panic("soaccept");
  82f7b8:	01002174 	movhi	r4,133
  82f7bc:	2136db04 	addi	r4,r4,-9364
  82f7c0:	0825a2c0 	call	825a2c <panic>
   so->so_state &= ~SS_NOFDREF;
  82f7c4:	e0bffe17 	ldw	r2,-8(fp)
  82f7c8:	10c0088b 	ldhu	r3,34(r2)
  82f7cc:	00bfff84 	movi	r2,-2
  82f7d0:	1884703a 	and	r2,r3,r2
  82f7d4:	1007883a 	mov	r3,r2
  82f7d8:	e0bffe17 	ldw	r2,-8(fp)
  82f7dc:	10c0088d 	sth	r3,34(r2)
   so->so_req = PRU_ACCEPT;
  82f7e0:	e0fffe17 	ldw	r3,-8(fp)
  82f7e4:	00800144 	movi	r2,5
  82f7e8:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
  82f7ec:	e0bffe17 	ldw	r2,-8(fp)
  82f7f0:	10800217 	ldw	r2,8(r2)
  82f7f4:	10800317 	ldw	r2,12(r2)
  82f7f8:	e13ffe17 	ldw	r4,-8(fp)
  82f7fc:	000b883a 	mov	r5,zero
  82f800:	e1bfff17 	ldw	r6,-4(fp)
  82f804:	103ee83a 	callr	r2
  82f808:	e0bffd15 	stw	r2,-12(fp)

   return (error);
  82f80c:	e0bffd17 	ldw	r2,-12(fp)
}
  82f810:	e037883a 	mov	sp,fp
  82f814:	dfc00117 	ldw	ra,4(sp)
  82f818:	df000017 	ldw	fp,0(sp)
  82f81c:	dec00204 	addi	sp,sp,8
  82f820:	f800283a 	ret

0082f824 <soconnect>:
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
  82f824:	defffa04 	addi	sp,sp,-24
  82f828:	dfc00515 	stw	ra,20(sp)
  82f82c:	df000415 	stw	fp,16(sp)
  82f830:	df000404 	addi	fp,sp,16
  82f834:	e13ffd15 	stw	r4,-12(fp)
  82f838:	e17ffe15 	stw	r5,-8(fp)
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
  82f83c:	e0bffd17 	ldw	r2,-12(fp)
  82f840:	10800417 	ldw	r2,16(r2)
  82f844:	1080008c 	andi	r2,r2,2
  82f848:	1005003a 	cmpeq	r2,r2,zero
  82f84c:	1000031e 	bne	r2,zero,82f85c <soconnect+0x38>
      return (EOPNOTSUPP);
  82f850:	008017c4 	movi	r2,95
  82f854:	e0bfff15 	stw	r2,-4(fp)
  82f858:	00002106 	br	82f8e0 <soconnect+0xbc>
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
  82f85c:	e0bffd17 	ldw	r2,-12(fp)
  82f860:	1080088b 	ldhu	r2,34(r2)
  82f864:	10bfffcc 	andi	r2,r2,65535
  82f868:	1080018c 	andi	r2,r2,6
  82f86c:	1005003a 	cmpeq	r2,r2,zero
  82f870:	10000e1e 	bne	r2,zero,82f8ac <soconnect+0x88>
  82f874:	e0bffd17 	ldw	r2,-12(fp)
  82f878:	10800217 	ldw	r2,8(r2)
  82f87c:	1080010b 	ldhu	r2,4(r2)
  82f880:	10bfffcc 	andi	r2,r2,65535
  82f884:	1080010c 	andi	r2,r2,4
  82f888:	1004c03a 	cmpne	r2,r2,zero
  82f88c:	1000041e 	bne	r2,zero,82f8a0 <soconnect+0x7c>
  82f890:	e13ffd17 	ldw	r4,-12(fp)
  82f894:	082f8f80 	call	82f8f8 <sodisconnect>
  82f898:	1005003a 	cmpeq	r2,r2,zero
  82f89c:	1000031e 	bne	r2,zero,82f8ac <soconnect+0x88>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
       (sodisconnect(so) != 0)))
   {
      error = EISCONN;
  82f8a0:	00801fc4 	movi	r2,127
  82f8a4:	e0bffc15 	stw	r2,-16(fp)
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
  82f8a8:	00000b06 	br	82f8d8 <soconnect+0xb4>
   {
      error = EISCONN;
   }
   else
   {
      so->so_req = PRU_CONNECT;
  82f8ac:	e0fffd17 	ldw	r3,-12(fp)
  82f8b0:	00800104 	movi	r2,4
  82f8b4:	18800715 	stw	r2,28(r3)
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
  82f8b8:	e0bffd17 	ldw	r2,-12(fp)
  82f8bc:	10800217 	ldw	r2,8(r2)
  82f8c0:	10800317 	ldw	r2,12(r2)
  82f8c4:	e13ffd17 	ldw	r4,-12(fp)
  82f8c8:	000b883a 	mov	r5,zero
  82f8cc:	e1bffe17 	ldw	r6,-8(fp)
  82f8d0:	103ee83a 	callr	r2
  82f8d4:	e0bffc15 	stw	r2,-16(fp)
   }
   return error;
  82f8d8:	e0bffc17 	ldw	r2,-16(fp)
  82f8dc:	e0bfff15 	stw	r2,-4(fp)
  82f8e0:	e0bfff17 	ldw	r2,-4(fp)
}
  82f8e4:	e037883a 	mov	sp,fp
  82f8e8:	dfc00117 	ldw	ra,4(sp)
  82f8ec:	df000017 	ldw	fp,0(sp)
  82f8f0:	dec00204 	addi	sp,sp,8
  82f8f4:	f800283a 	ret

0082f8f8 <sodisconnect>:
 * RETURNS: 
 */

int
sodisconnect(struct socket * so)
{
  82f8f8:	defffc04 	addi	sp,sp,-16
  82f8fc:	dfc00315 	stw	ra,12(sp)
  82f900:	df000215 	stw	fp,8(sp)
  82f904:	df000204 	addi	fp,sp,8
  82f908:	e13fff15 	stw	r4,-4(fp)
   int   error;

   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sodisconnect, so %lx so_state %x\n", so, so->so_state));

   if ((so->so_state & SS_ISCONNECTED) == 0) 
  82f90c:	e0bfff17 	ldw	r2,-4(fp)
  82f910:	1080088b 	ldhu	r2,34(r2)
  82f914:	10bfffcc 	andi	r2,r2,65535
  82f918:	1080008c 	andi	r2,r2,2
  82f91c:	1004c03a 	cmpne	r2,r2,zero
  82f920:	1000031e 	bne	r2,zero,82f930 <sodisconnect+0x38>
   {
      error = ENOTCONN;
  82f924:	00802004 	movi	r2,128
  82f928:	e0bffe15 	stw	r2,-8(fp)
      goto bad;
  82f92c:	00001406 	br	82f980 <sodisconnect+0x88>
   }
   if (so->so_state & SS_ISDISCONNECTING) 
  82f930:	e0bfff17 	ldw	r2,-4(fp)
  82f934:	1080088b 	ldhu	r2,34(r2)
  82f938:	10bfffcc 	andi	r2,r2,65535
  82f93c:	1080020c 	andi	r2,r2,8
  82f940:	1005003a 	cmpeq	r2,r2,zero
  82f944:	1000031e 	bne	r2,zero,82f954 <sodisconnect+0x5c>
   {
      error = EALREADY;
  82f948:	00801e04 	movi	r2,120
  82f94c:	e0bffe15 	stw	r2,-8(fp)
      goto bad;
  82f950:	00000b06 	br	82f980 <sodisconnect+0x88>
   }
   so->so_req = PRU_DISCONNECT;
  82f954:	e0ffff17 	ldw	r3,-4(fp)
  82f958:	00800184 	movi	r2,6
  82f95c:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
  82f960:	e0bfff17 	ldw	r2,-4(fp)
  82f964:	10800217 	ldw	r2,8(r2)
  82f968:	10800317 	ldw	r2,12(r2)
  82f96c:	e13fff17 	ldw	r4,-4(fp)
  82f970:	000b883a 	mov	r5,zero
  82f974:	000d883a 	mov	r6,zero
  82f978:	103ee83a 	callr	r2
  82f97c:	e0bffe15 	stw	r2,-8(fp)

bad:
   return (error);
  82f980:	e0bffe17 	ldw	r2,-8(fp)
}
  82f984:	e037883a 	mov	sp,fp
  82f988:	dfc00117 	ldw	ra,4(sp)
  82f98c:	df000017 	ldw	fp,0(sp)
  82f990:	dec00204 	addi	sp,sp,8
  82f994:	f800283a 	ret

0082f998 <sosend>:
sosend(struct socket *so, 
       struct mbuf *nam,      /* sockaddr, if UDP socket, NULL if TCP */
       char  *data,           /* data to send */
       int   *data_length,    /* IN/OUT  length of (remaining) data */
       int   flags)
{
  82f998:	deffee04 	addi	sp,sp,-72
  82f99c:	dfc01115 	stw	ra,68(sp)
  82f9a0:	df001015 	stw	fp,64(sp)
  82f9a4:	df001004 	addi	fp,sp,64
  82f9a8:	e13ff815 	stw	r4,-32(fp)
  82f9ac:	e17ff915 	stw	r5,-28(fp)
  82f9b0:	e1bffa15 	stw	r6,-24(fp)
  82f9b4:	e1fffb15 	stw	r7,-20(fp)
   struct mbuf *head = (struct mbuf *)NULL;
  82f9b8:	e03ff715 	stw	zero,-36(fp)
   struct mbuf *m;
   int   space;
   int   resid;
   int   len;
   int   error = 0;
  82f9bc:	e03ff215 	stw	zero,-56(fp)
   int   dontroute;
   int   first = 1;
  82f9c0:	00800044 	movi	r2,1
  82f9c4:	e0bff015 	stw	r2,-64(fp)

   resid = *data_length;
  82f9c8:	e0bffb17 	ldw	r2,-20(fp)
  82f9cc:	10800017 	ldw	r2,0(r2)
  82f9d0:	e0bff415 	stw	r2,-48(fp)
    * However, space must be signed, as it might be less than 0
    * if we over-committed, and we must use a signed comparison
    * of space and resid.  On the other hand, a negative resid
    * causes us to loop sending 0-length segments to the protocol.
    */
   if (resid < 0)
  82f9d4:	e0bff417 	ldw	r2,-48(fp)
  82f9d8:	1004403a 	cmpge	r2,r2,zero
  82f9dc:	1000031e 	bne	r2,zero,82f9ec <sosend+0x54>
      return (EINVAL);
  82f9e0:	00800584 	movi	r2,22
  82f9e4:	e0bfff15 	stw	r2,-4(fp)
  82f9e8:	00016706 	br	82ff88 <sosend+0x5f0>

   INET_TRACE (INETM_IO, ("INET:sosend: so %lx resid %d sb_hiwat %d so_state %x\n",
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
  82f9ec:	e0bff817 	ldw	r2,-32(fp)
  82f9f0:	10800217 	ldw	r2,8(r2)
  82f9f4:	1080010b 	ldhu	r2,4(r2)
  82f9f8:	10bfffcc 	andi	r2,r2,65535
  82f9fc:	1080004c 	andi	r2,r2,1
  82fa00:	10803fcc 	andi	r2,r2,255
  82fa04:	1005003a 	cmpeq	r2,r2,zero
  82fa08:	1000081e 	bne	r2,zero,82fa2c <sosend+0x94>
  82fa0c:	e0bff817 	ldw	r2,-32(fp)
  82fa10:	10801317 	ldw	r2,76(r2)
  82fa14:	1007883a 	mov	r3,r2
  82fa18:	e0bff417 	ldw	r2,-48(fp)
  82fa1c:	1880030e 	bge	r3,r2,82fa2c <sosend+0x94>
      return (EMSGSIZE);
  82fa20:	00c01e84 	movi	r3,122
  82fa24:	e0ffff15 	stw	r3,-4(fp)
  82fa28:	00015706 	br	82ff88 <sosend+0x5f0>

   dontroute = (flags & MSG_DONTROUTE) &&
  82fa2c:	e0800217 	ldw	r2,8(fp)
  82fa30:	1080010c 	andi	r2,r2,4
  82fa34:	1005003a 	cmpeq	r2,r2,zero
  82fa38:	1000111e 	bne	r2,zero,82fa80 <sosend+0xe8>
  82fa3c:	e0bff817 	ldw	r2,-32(fp)
  82fa40:	10800417 	ldw	r2,16(r2)
  82fa44:	1080040c 	andi	r2,r2,16
  82fa48:	1004c03a 	cmpne	r2,r2,zero
  82fa4c:	10000c1e 	bne	r2,zero,82fa80 <sosend+0xe8>
  82fa50:	e0bff817 	ldw	r2,-32(fp)
  82fa54:	10800217 	ldw	r2,8(r2)
  82fa58:	1080010b 	ldhu	r2,4(r2)
  82fa5c:	10bfffcc 	andi	r2,r2,65535
  82fa60:	1080004c 	andi	r2,r2,1
  82fa64:	1080005c 	xori	r2,r2,1
  82fa68:	10803fcc 	andi	r2,r2,255
  82fa6c:	1004c03a 	cmpne	r2,r2,zero
  82fa70:	1000031e 	bne	r2,zero,82fa80 <sosend+0xe8>
  82fa74:	00800044 	movi	r2,1
  82fa78:	e0bffe15 	stw	r2,-8(fp)
  82fa7c:	00000106 	br	82fa84 <sosend+0xec>
  82fa80:	e03ffe15 	stw	zero,-8(fp)
  82fa84:	e0fffe17 	ldw	r3,-8(fp)
  82fa88:	e0fff115 	stw	r3,-60(fp)
               (so->so_proto->pr_flags & PR_ATOMIC);

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
  82fa8c:	00000406 	br	82faa0 <sosend+0x108>
  82fa90:	e0bff817 	ldw	r2,-32(fp)
  82fa94:	10801904 	addi	r2,r2,100
  82fa98:	1009883a 	mov	r4,r2
  82fa9c:	082639c0 	call	82639c <tcp_sleep>
  82faa0:	e0bff817 	ldw	r2,-32(fp)
  82faa4:	1080190b 	ldhu	r2,100(r2)
  82faa8:	10bfffcc 	andi	r2,r2,65535
  82faac:	1080004c 	andi	r2,r2,1
  82fab0:	10803fcc 	andi	r2,r2,255
  82fab4:	1004c03a 	cmpne	r2,r2,zero
  82fab8:	103ff51e 	bne	r2,zero,82fa90 <sosend+0xf8>
  82fabc:	e0bff817 	ldw	r2,-32(fp)
  82fac0:	1080190b 	ldhu	r2,100(r2)
  82fac4:	10800054 	ori	r2,r2,1
  82fac8:	1007883a 	mov	r3,r2
  82facc:	e0bff817 	ldw	r2,-32(fp)
  82fad0:	10c0190d 	sth	r3,100(r2)
   do 
   {
      if (so->so_error) 
  82fad4:	e0bff817 	ldw	r2,-32(fp)
  82fad8:	10800617 	ldw	r2,24(r2)
  82fadc:	1005003a 	cmpeq	r2,r2,zero
  82fae0:	1000061e 	bne	r2,zero,82fafc <sosend+0x164>
      {
         error = so->so_error;
  82fae4:	e0bff817 	ldw	r2,-32(fp)
  82fae8:	10800617 	ldw	r2,24(r2)
  82faec:	e0bff215 	stw	r2,-56(fp)
         so->so_error = 0;          /* ??? */
  82faf0:	e0bff817 	ldw	r2,-32(fp)
  82faf4:	10000615 	stw	zero,24(r2)
         goto release;
  82faf8:	00011106 	br	82ff40 <sosend+0x5a8>
      }
      if (so->so_state & SS_CANTSENDMORE)
  82fafc:	e0bff817 	ldw	r2,-32(fp)
  82fb00:	1080088b 	ldhu	r2,34(r2)
  82fb04:	10bfffcc 	andi	r2,r2,65535
  82fb08:	1080040c 	andi	r2,r2,16
  82fb0c:	1005003a 	cmpeq	r2,r2,zero
  82fb10:	1000031e 	bne	r2,zero,82fb20 <sosend+0x188>
         snderr(EPIPE);
  82fb14:	00800804 	movi	r2,32
  82fb18:	e0bff215 	stw	r2,-56(fp)
  82fb1c:	00010806 	br	82ff40 <sosend+0x5a8>
      if ((so->so_state & SS_ISCONNECTED) == 0) 
  82fb20:	e0bff817 	ldw	r2,-32(fp)
  82fb24:	1080088b 	ldhu	r2,34(r2)
  82fb28:	10bfffcc 	andi	r2,r2,65535
  82fb2c:	1080008c 	andi	r2,r2,2
  82fb30:	1004c03a 	cmpne	r2,r2,zero
  82fb34:	1000101e 	bne	r2,zero,82fb78 <sosend+0x1e0>
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
  82fb38:	e0bff817 	ldw	r2,-32(fp)
  82fb3c:	10800217 	ldw	r2,8(r2)
  82fb40:	1080010b 	ldhu	r2,4(r2)
  82fb44:	10bfffcc 	andi	r2,r2,65535
  82fb48:	1080010c 	andi	r2,r2,4
  82fb4c:	1005003a 	cmpeq	r2,r2,zero
  82fb50:	1000031e 	bne	r2,zero,82fb60 <sosend+0x1c8>
            snderr(ENOTCONN);
  82fb54:	00802004 	movi	r2,128
  82fb58:	e0bff215 	stw	r2,-56(fp)
  82fb5c:	0000f806 	br	82ff40 <sosend+0x5a8>
         if (nam == 0)
  82fb60:	e0bff917 	ldw	r2,-28(fp)
  82fb64:	1004c03a 	cmpne	r2,r2,zero
  82fb68:	1000031e 	bne	r2,zero,82fb78 <sosend+0x1e0>
            snderr(EDESTADDRREQ);
  82fb6c:	00801e44 	movi	r2,121
  82fb70:	e0bff215 	stw	r2,-56(fp)
  82fb74:	0000f206 	br	82ff40 <sosend+0x5a8>
      }
      if (flags & MSG_OOB)
  82fb78:	e0800217 	ldw	r2,8(fp)
  82fb7c:	1080004c 	andi	r2,r2,1
  82fb80:	10803fcc 	andi	r2,r2,255
  82fb84:	1005003a 	cmpeq	r2,r2,zero
  82fb88:	1000031e 	bne	r2,zero,82fb98 <sosend+0x200>
         space = 1024;
  82fb8c:	00810004 	movi	r2,1024
  82fb90:	e0bff515 	stw	r2,-44(fp)
  82fb94:	00005106 	br	82fcdc <sosend+0x344>
      else 
      {
         space = (int)sbspace(&so->so_snd);
  82fb98:	e0bff817 	ldw	r2,-32(fp)
  82fb9c:	10801317 	ldw	r2,76(r2)
  82fba0:	1007883a 	mov	r3,r2
  82fba4:	e0bff817 	ldw	r2,-32(fp)
  82fba8:	10801217 	ldw	r2,72(r2)
  82fbac:	1885c83a 	sub	r2,r3,r2
  82fbb0:	1004803a 	cmplt	r2,r2,zero
  82fbb4:	1000071e 	bne	r2,zero,82fbd4 <sosend+0x23c>
  82fbb8:	e0bff817 	ldw	r2,-32(fp)
  82fbbc:	10c01317 	ldw	r3,76(r2)
  82fbc0:	e0bff817 	ldw	r2,-32(fp)
  82fbc4:	10801217 	ldw	r2,72(r2)
  82fbc8:	1885c83a 	sub	r2,r3,r2
  82fbcc:	e0bffd15 	stw	r2,-12(fp)
  82fbd0:	00000106 	br	82fbd8 <sosend+0x240>
  82fbd4:	e03ffd15 	stw	zero,-12(fp)
  82fbd8:	e0bffd17 	ldw	r2,-12(fp)
  82fbdc:	e0bff515 	stw	r2,-44(fp)
         if ((sosendallatonce(so) && (space < resid)) ||
  82fbe0:	e0bff817 	ldw	r2,-32(fp)
  82fbe4:	10800217 	ldw	r2,8(r2)
  82fbe8:	1080010b 	ldhu	r2,4(r2)
  82fbec:	10bfffcc 	andi	r2,r2,65535
  82fbf0:	1080004c 	andi	r2,r2,1
  82fbf4:	1080005c 	xori	r2,r2,1
  82fbf8:	10803fcc 	andi	r2,r2,255
  82fbfc:	1004c03a 	cmpne	r2,r2,zero
  82fc00:	1000031e 	bne	r2,zero,82fc10 <sosend+0x278>
  82fc04:	e0fff517 	ldw	r3,-44(fp)
  82fc08:	e0bff417 	ldw	r2,-48(fp)
  82fc0c:	18801416 	blt	r3,r2,82fc60 <sosend+0x2c8>
  82fc10:	e0bff417 	ldw	r2,-48(fp)
  82fc14:	10815e10 	cmplti	r2,r2,1400
  82fc18:	1000301e 	bne	r2,zero,82fcdc <sosend+0x344>
  82fc1c:	e0bff517 	ldw	r2,-44(fp)
  82fc20:	10815e08 	cmpgei	r2,r2,1400
  82fc24:	10002d1e 	bne	r2,zero,82fcdc <sosend+0x344>
  82fc28:	e0bff817 	ldw	r2,-32(fp)
  82fc2c:	10801217 	ldw	r2,72(r2)
  82fc30:	10815e30 	cmpltui	r2,r2,1400
  82fc34:	1000291e 	bne	r2,zero,82fcdc <sosend+0x344>
  82fc38:	e0bff817 	ldw	r2,-32(fp)
  82fc3c:	1080088b 	ldhu	r2,34(r2)
  82fc40:	10bfffcc 	andi	r2,r2,65535
  82fc44:	1080400c 	andi	r2,r2,256
  82fc48:	1004c03a 	cmpne	r2,r2,zero
  82fc4c:	1000231e 	bne	r2,zero,82fcdc <sosend+0x344>
  82fc50:	e0800217 	ldw	r2,8(fp)
  82fc54:	1080080c 	andi	r2,r2,32
  82fc58:	1004c03a 	cmpne	r2,r2,zero
  82fc5c:	10001f1e 	bne	r2,zero,82fcdc <sosend+0x344>
             ((resid >= CLBYTES) && (space < CLBYTES) &&
              (so->so_snd.sb_cc >= CLBYTES) &&
              ((so->so_state & SS_NBIO) == 0) &&
              ((flags & MSG_DONTWAIT) == 0)))
         {
            if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
  82fc60:	e0bff817 	ldw	r2,-32(fp)
  82fc64:	1080088b 	ldhu	r2,34(r2)
  82fc68:	10bfffcc 	andi	r2,r2,65535
  82fc6c:	1080400c 	andi	r2,r2,256
  82fc70:	1004c03a 	cmpne	r2,r2,zero
  82fc74:	1000041e 	bne	r2,zero,82fc88 <sosend+0x2f0>
  82fc78:	e0800217 	ldw	r2,8(fp)
  82fc7c:	1080080c 	andi	r2,r2,32
  82fc80:	1005003a 	cmpeq	r2,r2,zero
  82fc84:	1000061e 	bne	r2,zero,82fca0 <sosend+0x308>
            {
               if (first)
  82fc88:	e0bff017 	ldw	r2,-64(fp)
  82fc8c:	1005003a 	cmpeq	r2,r2,zero
  82fc90:	1000ab1e 	bne	r2,zero,82ff40 <sosend+0x5a8>
                  error = EWOULDBLOCK;
  82fc94:	008002c4 	movi	r2,11
  82fc98:	e0bff215 	stw	r2,-56(fp)
               goto release;
  82fc9c:	0000a806 	br	82ff40 <sosend+0x5a8>
            }
            sbunlock(&so->so_snd);
  82fca0:	e0bff817 	ldw	r2,-32(fp)
  82fca4:	10c0190b 	ldhu	r3,100(r2)
  82fca8:	00bfff84 	movi	r2,-2
  82fcac:	1884703a 	and	r2,r3,r2
  82fcb0:	1007883a 	mov	r3,r2
  82fcb4:	e0bff817 	ldw	r2,-32(fp)
  82fcb8:	10c0190d 	sth	r3,100(r2)
  82fcbc:	e0bff817 	ldw	r2,-32(fp)
  82fcc0:	10801904 	addi	r2,r2,100
  82fcc4:	1009883a 	mov	r4,r2
  82fcc8:	082653c0 	call	82653c <tcp_wakeup>
            sbwait(&so->so_snd);
  82fccc:	e0bff817 	ldw	r2,-32(fp)
  82fcd0:	11001204 	addi	r4,r2,72
  82fcd4:	0831ae00 	call	831ae0 <sbwait>
            goto restart;
  82fcd8:	003f7106 	br	82faa0 <sosend+0x108>
         }
      }
      if ( space <= 0 ) 
  82fcdc:	e0bff517 	ldw	r2,-44(fp)
  82fce0:	10800048 	cmpgei	r2,r2,1
  82fce4:	1000651e 	bne	r2,zero,82fe7c <sosend+0x4e4>
      {
         /* no space in socket send buffer - see if we can wait */
         if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
  82fce8:	e0bff817 	ldw	r2,-32(fp)
  82fcec:	1080088b 	ldhu	r2,34(r2)
  82fcf0:	10bfffcc 	andi	r2,r2,65535
  82fcf4:	1080400c 	andi	r2,r2,256
  82fcf8:	1004c03a 	cmpne	r2,r2,zero
  82fcfc:	1000041e 	bne	r2,zero,82fd10 <sosend+0x378>
  82fd00:	e0800217 	ldw	r2,8(fp)
  82fd04:	1080080c 	andi	r2,r2,32
  82fd08:	1005003a 	cmpeq	r2,r2,zero
  82fd0c:	1000061e 	bne	r2,zero,82fd28 <sosend+0x390>
         {
            if (first)     /* report first error */
  82fd10:	e0bff017 	ldw	r2,-64(fp)
  82fd14:	1005003a 	cmpeq	r2,r2,zero
  82fd18:	1000891e 	bne	r2,zero,82ff40 <sosend+0x5a8>
               error = EWOULDBLOCK;
  82fd1c:	008002c4 	movi	r2,11
  82fd20:	e0bff215 	stw	r2,-56(fp)
            goto release;
  82fd24:	00008606 	br	82ff40 <sosend+0x5a8>
         }
         /* If blocking socket, let someone else run */
         sbunlock(&so->so_snd);
  82fd28:	e0bff817 	ldw	r2,-32(fp)
  82fd2c:	10c0190b 	ldhu	r3,100(r2)
  82fd30:	00bfff84 	movi	r2,-2
  82fd34:	1884703a 	and	r2,r3,r2
  82fd38:	1007883a 	mov	r3,r2
  82fd3c:	e0bff817 	ldw	r2,-32(fp)
  82fd40:	10c0190d 	sth	r3,100(r2)
  82fd44:	e0bff817 	ldw	r2,-32(fp)
  82fd48:	10801904 	addi	r2,r2,100
  82fd4c:	1009883a 	mov	r4,r2
  82fd50:	082653c0 	call	82653c <tcp_wakeup>
         sbwait(&so->so_snd);
  82fd54:	e0bff817 	ldw	r2,-32(fp)
  82fd58:	11001204 	addi	r4,r2,72
  82fd5c:	0831ae00 	call	831ae0 <sbwait>
         goto restart;
  82fd60:	003f4f06 	br	82faa0 <sosend+0x108>
      }

      while (space > 0) 
      {
         len = resid;
  82fd64:	e0bff417 	ldw	r2,-48(fp)
  82fd68:	e0bff315 	stw	r2,-52(fp)
         if ( so->so_type == SOCK_STREAM )
  82fd6c:	e0bff817 	ldw	r2,-32(fp)
  82fd70:	10800983 	ldbu	r2,38(r2)
  82fd74:	10803fcc 	andi	r2,r2,255
  82fd78:	1080201c 	xori	r2,r2,128
  82fd7c:	10bfe004 	addi	r2,r2,-128
  82fd80:	10800058 	cmpnei	r2,r2,1
  82fd84:	1000181e 	bne	r2,zero,82fde8 <sosend+0x450>
         {
            m = m_getwithdata(MT_TXDATA, len);
  82fd88:	01000084 	movi	r4,2
  82fd8c:	e17ff317 	ldw	r5,-52(fp)
  82fd90:	082b5c80 	call	82b5c8 <m_getnbuf>
  82fd94:	e0bff615 	stw	r2,-40(fp)
            if (!m)   
  82fd98:	e0bff617 	ldw	r2,-40(fp)
  82fd9c:	1004c03a 	cmpne	r2,r2,zero
  82fda0:	1000031e 	bne	r2,zero,82fdb0 <sosend+0x418>
               snderr(ENOBUFS);
  82fda4:	00801a44 	movi	r2,105
  82fda8:	e0bff215 	stw	r2,-56(fp)
  82fdac:	00006406 	br	82ff40 <sosend+0x5a8>
            MEMCPY(m->m_data, data, len);
  82fdb0:	e0bff617 	ldw	r2,-40(fp)
  82fdb4:	10c00317 	ldw	r3,12(r2)
  82fdb8:	e1bff317 	ldw	r6,-52(fp)
  82fdbc:	e0bffa17 	ldw	r2,-24(fp)
  82fdc0:	1809883a 	mov	r4,r3
  82fdc4:	100b883a 	mov	r5,r2
  82fdc8:	08073380 	call	807338 <memcpy>
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
  82fdcc:	e0bff817 	ldw	r2,-32(fp)
  82fdd0:	1080190b 	ldhu	r2,100(r2)
  82fdd4:	10802014 	ori	r2,r2,128
  82fdd8:	1007883a 	mov	r3,r2
  82fddc:	e0bff817 	ldw	r2,-32(fp)
  82fde0:	10c0190d 	sth	r3,100(r2)
  82fde4:	00000706 	br	82fe04 <sosend+0x46c>
         }
         else
         {
            m = m_get (M_WAIT, MT_TXDATA);
  82fde8:	01000084 	movi	r4,2
  82fdec:	000b883a 	mov	r5,zero
  82fdf0:	082b5c80 	call	82b5c8 <m_getnbuf>
  82fdf4:	e0bff615 	stw	r2,-40(fp)
            m->m_data = data;
  82fdf8:	e0fff617 	ldw	r3,-40(fp)
  82fdfc:	e0bffa17 	ldw	r2,-24(fp)
  82fe00:	18800315 	stw	r2,12(r3)
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
  82fe04:	e0bffb17 	ldw	r2,-20(fp)
  82fe08:	10c00017 	ldw	r3,0(r2)
  82fe0c:	e0bff317 	ldw	r2,-52(fp)
  82fe10:	1887c83a 	sub	r3,r3,r2
  82fe14:	e0bffb17 	ldw	r2,-20(fp)
  82fe18:	10c00015 	stw	r3,0(r2)
         resid -= len;
  82fe1c:	e0fff417 	ldw	r3,-48(fp)
  82fe20:	e0bff317 	ldw	r2,-52(fp)
  82fe24:	1885c83a 	sub	r2,r3,r2
  82fe28:	e0bff415 	stw	r2,-48(fp)
         data += len;
  82fe2c:	e0bff317 	ldw	r2,-52(fp)
  82fe30:	1007883a 	mov	r3,r2
  82fe34:	e0bffa17 	ldw	r2,-24(fp)
  82fe38:	10c5883a 	add	r2,r2,r3
  82fe3c:	e0bffa15 	stw	r2,-24(fp)
         m->m_len = len;
  82fe40:	e0fff317 	ldw	r3,-52(fp)
  82fe44:	e0bff617 	ldw	r2,-40(fp)
  82fe48:	10c00215 	stw	r3,8(r2)
         if (head == (struct mbuf *)NULL)
  82fe4c:	e0bff717 	ldw	r2,-36(fp)
  82fe50:	1004c03a 	cmpne	r2,r2,zero
  82fe54:	1000021e 	bne	r2,zero,82fe60 <sosend+0x4c8>
            head = m;
  82fe58:	e0bff617 	ldw	r2,-40(fp)
  82fe5c:	e0bff715 	stw	r2,-36(fp)
         if (error)
  82fe60:	e0bff217 	ldw	r2,-56(fp)
  82fe64:	1004c03a 	cmpne	r2,r2,zero
  82fe68:	1000351e 	bne	r2,zero,82ff40 <sosend+0x5a8>
            goto release;
         if (*data_length <= 0)
  82fe6c:	e0bffb17 	ldw	r2,-20(fp)
  82fe70:	10800017 	ldw	r2,0(r2)
  82fe74:	10800050 	cmplti	r2,r2,1
  82fe78:	1000031e 	bne	r2,zero,82fe88 <sosend+0x4f0>
         sbunlock(&so->so_snd);
         sbwait(&so->so_snd);
         goto restart;
      }

      while (space > 0) 
  82fe7c:	e0bff517 	ldw	r2,-44(fp)
  82fe80:	10800048 	cmpgei	r2,r2,1
  82fe84:	103fb71e 	bne	r2,zero,82fd64 <sosend+0x3cc>
            goto release;
         if (*data_length <= 0)
            break;
      }

      if (dontroute)
  82fe88:	e0bff117 	ldw	r2,-60(fp)
  82fe8c:	1005003a 	cmpeq	r2,r2,zero
  82fe90:	1000051e 	bne	r2,zero,82fea8 <sosend+0x510>
         so->so_options |= SO_DONTROUTE;
  82fe94:	e0bff817 	ldw	r2,-32(fp)
  82fe98:	10800417 	ldw	r2,16(r2)
  82fe9c:	10c00414 	ori	r3,r2,16
  82fea0:	e0bff817 	ldw	r2,-32(fp)
  82fea4:	10c00415 	stw	r3,16(r2)

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
  82fea8:	e0800217 	ldw	r2,8(fp)
  82feac:	1080004c 	andi	r2,r2,1
  82feb0:	10803fcc 	andi	r2,r2,255
  82feb4:	1005003a 	cmpeq	r2,r2,zero
  82feb8:	1000031e 	bne	r2,zero,82fec8 <sosend+0x530>
  82febc:	00c00384 	movi	r3,14
  82fec0:	e0fffc15 	stw	r3,-16(fp)
  82fec4:	00000206 	br	82fed0 <sosend+0x538>
  82fec8:	00800244 	movi	r2,9
  82fecc:	e0bffc15 	stw	r2,-16(fp)
  82fed0:	e0bff817 	ldw	r2,-32(fp)
  82fed4:	e0fffc17 	ldw	r3,-16(fp)
  82fed8:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so, head, nam);
  82fedc:	e0bff817 	ldw	r2,-32(fp)
  82fee0:	10800217 	ldw	r2,8(r2)
  82fee4:	10800317 	ldw	r2,12(r2)
  82fee8:	e13ff817 	ldw	r4,-32(fp)
  82feec:	e17ff717 	ldw	r5,-36(fp)
  82fef0:	e1bff917 	ldw	r6,-28(fp)
  82fef4:	103ee83a 	callr	r2
  82fef8:	e0bff215 	stw	r2,-56(fp)

      if (dontroute)
  82fefc:	e0bff117 	ldw	r2,-60(fp)
  82ff00:	1005003a 	cmpeq	r2,r2,zero
  82ff04:	1000061e 	bne	r2,zero,82ff20 <sosend+0x588>
         so->so_options &= ~SO_DONTROUTE;
  82ff08:	e0bff817 	ldw	r2,-32(fp)
  82ff0c:	10c00417 	ldw	r3,16(r2)
  82ff10:	00bffbc4 	movi	r2,-17
  82ff14:	1886703a 	and	r3,r3,r2
  82ff18:	e0bff817 	ldw	r2,-32(fp)
  82ff1c:	10c00415 	stw	r3,16(r2)

      head = (struct mbuf *)NULL;
  82ff20:	e03ff715 	stw	zero,-36(fp)
      first = 0;
  82ff24:	e03ff015 	stw	zero,-64(fp)
   } while ((resid != 0) && (error == 0));
  82ff28:	e0bff417 	ldw	r2,-48(fp)
  82ff2c:	1005003a 	cmpeq	r2,r2,zero
  82ff30:	1000031e 	bne	r2,zero,82ff40 <sosend+0x5a8>
  82ff34:	e0bff217 	ldw	r2,-56(fp)
  82ff38:	1005003a 	cmpeq	r2,r2,zero
  82ff3c:	103ee51e 	bne	r2,zero,82fad4 <sosend+0x13c>

release:
   sbunlock(&so->so_snd);  
  82ff40:	e0bff817 	ldw	r2,-32(fp)
  82ff44:	10c0190b 	ldhu	r3,100(r2)
  82ff48:	00bfff84 	movi	r2,-2
  82ff4c:	1884703a 	and	r2,r3,r2
  82ff50:	1007883a 	mov	r3,r2
  82ff54:	e0bff817 	ldw	r2,-32(fp)
  82ff58:	10c0190d 	sth	r3,100(r2)
  82ff5c:	e0bff817 	ldw	r2,-32(fp)
  82ff60:	10801904 	addi	r2,r2,100
  82ff64:	1009883a 	mov	r4,r2
  82ff68:	082653c0 	call	82653c <tcp_wakeup>
   if (head)
  82ff6c:	e0bff717 	ldw	r2,-36(fp)
  82ff70:	1005003a 	cmpeq	r2,r2,zero
  82ff74:	1000021e 	bne	r2,zero,82ff80 <sosend+0x5e8>
      m_freem(head);
  82ff78:	e13ff717 	ldw	r4,-36(fp)
  82ff7c:	082b8a40 	call	82b8a4 <m_freem>
   return error;
  82ff80:	e0bff217 	ldw	r2,-56(fp)
  82ff84:	e0bfff15 	stw	r2,-4(fp)
  82ff88:	e0bfff17 	ldw	r2,-4(fp)
}
  82ff8c:	e037883a 	mov	sp,fp
  82ff90:	dfc00117 	ldw	ra,4(sp)
  82ff94:	df000017 	ldw	fp,0(sp)
  82ff98:	dec00204 	addi	sp,sp,8
  82ff9c:	f800283a 	ret

0082ffa0 <soreceive>:
soreceive(struct socket * so, 
   struct mbuf **aname,
   char * data,
   int * datalen,
   int   flags)
{
  82ffa0:	defff104 	addi	sp,sp,-60
  82ffa4:	dfc00e15 	stw	ra,56(sp)
  82ffa8:	df000d15 	stw	fp,52(sp)
  82ffac:	df000d04 	addi	fp,sp,52
  82ffb0:	e13ffb15 	stw	r4,-20(fp)
  82ffb4:	e17ffc15 	stw	r5,-16(fp)
  82ffb8:	e1bffd15 	stw	r6,-12(fp)
  82ffbc:	e1fffe15 	stw	r7,-8(fp)
   struct mbuf *  m;
   int   len;
   int   error =  0;
  82ffc0:	e03ff815 	stw	zero,-32(fp)
   int   offset;
   struct protosw *  pr =  so->so_proto;
  82ffc4:	e0bffb17 	ldw	r2,-20(fp)
  82ffc8:	10800217 	ldw	r2,8(r2)
  82ffcc:	e0bff615 	stw	r2,-40(fp)
   struct mbuf *  nextrecord;
   int   moff;
   int   lflags;

   if (aname)
  82ffd0:	e0bffc17 	ldw	r2,-16(fp)
  82ffd4:	1005003a 	cmpeq	r2,r2,zero
  82ffd8:	1000021e 	bne	r2,zero,82ffe4 <soreceive+0x44>
      *aname = 0;
  82ffdc:	e0bffc17 	ldw	r2,-16(fp)
  82ffe0:	10000015 	stw	zero,0(r2)
   if (flags & MSG_OOB) 
  82ffe4:	e0800217 	ldw	r2,8(fp)
  82ffe8:	1080004c 	andi	r2,r2,1
  82ffec:	10803fcc 	andi	r2,r2,255
  82fff0:	1005003a 	cmpeq	r2,r2,zero
  82fff4:	10004d1e 	bne	r2,zero,83012c <soreceive+0x18c>
   {
      m = m_get (M_WAIT, MT_RXDATA);
  82fff8:	01000044 	movi	r4,1
  82fffc:	000b883a 	mov	r5,zero
  830000:	082b5c80 	call	82b5c8 <m_getnbuf>
  830004:	e0bffa15 	stw	r2,-24(fp)
      if (m == NULL)
  830008:	e0bffa17 	ldw	r2,-24(fp)
  83000c:	1004c03a 	cmpne	r2,r2,zero
  830010:	1000031e 	bne	r2,zero,830020 <soreceive+0x80>
         return ENOBUFS;
  830014:	00801a44 	movi	r2,105
  830018:	e0bfff15 	stw	r2,-4(fp)
  83001c:	0001d306 	br	83076c <soreceive+0x7cc>
      lflags = flags & MSG_PEEK;
  830020:	e0800217 	ldw	r2,8(fp)
  830024:	1080008c 	andi	r2,r2,2
  830028:	e0bff315 	stw	r2,-52(fp)

      so->so_req = PRU_RCVOOB;
  83002c:	e0fffb17 	ldw	r3,-20(fp)
  830030:	00800344 	movi	r2,13
  830034:	18800715 	stw	r2,28(r3)
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
  830038:	e0bff617 	ldw	r2,-40(fp)
  83003c:	10800317 	ldw	r2,12(r2)
  830040:	e1bff317 	ldw	r6,-52(fp)
  830044:	e13ffb17 	ldw	r4,-20(fp)
  830048:	e17ffa17 	ldw	r5,-24(fp)
  83004c:	103ee83a 	callr	r2
  830050:	e0bff815 	stw	r2,-32(fp)
      if (error == 0)
  830054:	e0bff817 	ldw	r2,-32(fp)
  830058:	1004c03a 	cmpne	r2,r2,zero
  83005c:	1000271e 	bne	r2,zero,8300fc <soreceive+0x15c>
      {
         do 
         {
            len = *datalen;
  830060:	e0bffe17 	ldw	r2,-8(fp)
  830064:	10800017 	ldw	r2,0(r2)
  830068:	e0bff915 	stw	r2,-28(fp)
            if (len > (int)m->m_len)
  83006c:	e0bffa17 	ldw	r2,-24(fp)
  830070:	10800217 	ldw	r2,8(r2)
  830074:	1007883a 	mov	r3,r2
  830078:	e0bff917 	ldw	r2,-28(fp)
  83007c:	1880030e 	bge	r3,r2,83008c <soreceive+0xec>
               len = m->m_len;
  830080:	e0bffa17 	ldw	r2,-24(fp)
  830084:	10800217 	ldw	r2,8(r2)
  830088:	e0bff915 	stw	r2,-28(fp)

            MEMCPY(data, mtod(m, char*), len);
  83008c:	e0bffa17 	ldw	r2,-24(fp)
  830090:	10c00317 	ldw	r3,12(r2)
  830094:	e1bff917 	ldw	r6,-28(fp)
  830098:	e0bffd17 	ldw	r2,-12(fp)
  83009c:	1009883a 	mov	r4,r2
  8300a0:	180b883a 	mov	r5,r3
  8300a4:	08073380 	call	807338 <memcpy>
            data += len;
  8300a8:	e0bff917 	ldw	r2,-28(fp)
  8300ac:	1007883a 	mov	r3,r2
  8300b0:	e0bffd17 	ldw	r2,-12(fp)
  8300b4:	10c5883a 	add	r2,r2,r3
  8300b8:	e0bffd15 	stw	r2,-12(fp)
            *datalen = len;
  8300bc:	e0fffe17 	ldw	r3,-8(fp)
  8300c0:	e0bff917 	ldw	r2,-28(fp)
  8300c4:	18800015 	stw	r2,0(r3)
            m = m_free(m);
  8300c8:	e13ffa17 	ldw	r4,-24(fp)
  8300cc:	082b7700 	call	82b770 <m_free>
  8300d0:	e0bffa15 	stw	r2,-24(fp)
         } while (*datalen && (error == 0) && m);
  8300d4:	e0bffe17 	ldw	r2,-8(fp)
  8300d8:	10800017 	ldw	r2,0(r2)
  8300dc:	1005003a 	cmpeq	r2,r2,zero
  8300e0:	1000061e 	bne	r2,zero,8300fc <soreceive+0x15c>
  8300e4:	e0bff817 	ldw	r2,-32(fp)
  8300e8:	1004c03a 	cmpne	r2,r2,zero
  8300ec:	1000031e 	bne	r2,zero,8300fc <soreceive+0x15c>
  8300f0:	e0bffa17 	ldw	r2,-24(fp)
  8300f4:	1004c03a 	cmpne	r2,r2,zero
  8300f8:	103fd91e 	bne	r2,zero,830060 <soreceive+0xc0>
      }

      if (m)
  8300fc:	e0bffa17 	ldw	r2,-24(fp)
  830100:	1005003a 	cmpeq	r2,r2,zero
  830104:	1000021e 	bne	r2,zero,830110 <soreceive+0x170>
         m_freem(m);
  830108:	e13ffa17 	ldw	r4,-24(fp)
  83010c:	082b8a40 	call	82b8a4 <m_freem>
      return (error);
  830110:	e0bff817 	ldw	r2,-32(fp)
  830114:	e0bfff15 	stw	r2,-4(fp)
  830118:	00019406 	br	83076c <soreceive+0x7cc>
   }

restart:
   sblock (&so->so_rcv);
  83011c:	e0bffb17 	ldw	r2,-20(fp)
  830120:	10801104 	addi	r2,r2,68
  830124:	1009883a 	mov	r4,r2
  830128:	082639c0 	call	82639c <tcp_sleep>
  83012c:	e0bffb17 	ldw	r2,-20(fp)
  830130:	1080110b 	ldhu	r2,68(r2)
  830134:	10bfffcc 	andi	r2,r2,65535
  830138:	1080004c 	andi	r2,r2,1
  83013c:	10803fcc 	andi	r2,r2,255
  830140:	1004c03a 	cmpne	r2,r2,zero
  830144:	103ff51e 	bne	r2,zero,83011c <soreceive+0x17c>
  830148:	e0bffb17 	ldw	r2,-20(fp)
  83014c:	1080110b 	ldhu	r2,68(r2)
  830150:	10800054 	ori	r2,r2,1
  830154:	1007883a 	mov	r3,r2
  830158:	e0bffb17 	ldw	r2,-20(fp)
  83015c:	10c0110d 	sth	r3,68(r2)
   INET_TRACE (INETM_IO,
    ("INET:soreceive sbcc %d soerror %d so_state %d *datalen %d\n",
    so->so_rcv.sb_cc, so->so_error, so->so_state, *datalen));

   /* If no data is ready, see if we should wait or return */
   if (so->so_rcv.sb_cc == 0) 
  830160:	e0bffb17 	ldw	r2,-20(fp)
  830164:	10800a17 	ldw	r2,40(r2)
  830168:	1004c03a 	cmpne	r2,r2,zero
  83016c:	1000401e 	bne	r2,zero,830270 <soreceive+0x2d0>
   {
      if (so->so_error) 
  830170:	e0bffb17 	ldw	r2,-20(fp)
  830174:	10800617 	ldw	r2,24(r2)
  830178:	1005003a 	cmpeq	r2,r2,zero
  83017c:	1000061e 	bne	r2,zero,830198 <soreceive+0x1f8>
      {
         error = so->so_error;
  830180:	e0bffb17 	ldw	r2,-20(fp)
  830184:	10800617 	ldw	r2,24(r2)
  830188:	e0bff815 	stw	r2,-32(fp)
         so->so_error = 0;
  83018c:	e0bffb17 	ldw	r2,-20(fp)
  830190:	10000615 	stw	zero,24(r2)
         goto release;
  830194:	00016806 	br	830738 <soreceive+0x798>
      }
      if (so->so_state & SS_CANTRCVMORE)
  830198:	e0bffb17 	ldw	r2,-20(fp)
  83019c:	1080088b 	ldhu	r2,34(r2)
  8301a0:	10bfffcc 	andi	r2,r2,65535
  8301a4:	1080080c 	andi	r2,r2,32
  8301a8:	1004c03a 	cmpne	r2,r2,zero
  8301ac:	1001621e 	bne	r2,zero,830738 <soreceive+0x798>
         goto release;
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
  8301b0:	e0bffb17 	ldw	r2,-20(fp)
  8301b4:	1080088b 	ldhu	r2,34(r2)
  8301b8:	10bfffcc 	andi	r2,r2,65535
  8301bc:	1080008c 	andi	r2,r2,2
  8301c0:	1004c03a 	cmpne	r2,r2,zero
  8301c4:	10000a1e 	bne	r2,zero,8301f0 <soreceive+0x250>
  8301c8:	e0bffb17 	ldw	r2,-20(fp)
  8301cc:	10800217 	ldw	r2,8(r2)
  8301d0:	1080010b 	ldhu	r2,4(r2)
  8301d4:	10bfffcc 	andi	r2,r2,65535
  8301d8:	1080010c 	andi	r2,r2,4
  8301dc:	1005003a 	cmpeq	r2,r2,zero
  8301e0:	1000031e 	bne	r2,zero,8301f0 <soreceive+0x250>
          (so->so_proto->pr_flags & PR_CONNREQUIRED)) 
      {
         error = ENOTCONN;
  8301e4:	00802004 	movi	r2,128
  8301e8:	e0bff815 	stw	r2,-32(fp)
         goto release;
  8301ec:	00015206 	br	830738 <soreceive+0x798>
      }
      if (*datalen == 0)
  8301f0:	e0bffe17 	ldw	r2,-8(fp)
  8301f4:	10800017 	ldw	r2,0(r2)
  8301f8:	1005003a 	cmpeq	r2,r2,zero
  8301fc:	10014e1e 	bne	r2,zero,830738 <soreceive+0x798>
         goto release;
      if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT)) 
  830200:	e0bffb17 	ldw	r2,-20(fp)
  830204:	1080088b 	ldhu	r2,34(r2)
  830208:	10bfffcc 	andi	r2,r2,65535
  83020c:	1080400c 	andi	r2,r2,256
  830210:	1004c03a 	cmpne	r2,r2,zero
  830214:	1000041e 	bne	r2,zero,830228 <soreceive+0x288>
  830218:	e0800217 	ldw	r2,8(fp)
  83021c:	1080080c 	andi	r2,r2,32
  830220:	1005003a 	cmpeq	r2,r2,zero
  830224:	1000031e 	bne	r2,zero,830234 <soreceive+0x294>
      {
         error = EWOULDBLOCK;
  830228:	008002c4 	movi	r2,11
  83022c:	e0bff815 	stw	r2,-32(fp)
         goto release;
  830230:	00014106 	br	830738 <soreceive+0x798>
      }
      sbunlock(&so->so_rcv);
  830234:	e0bffb17 	ldw	r2,-20(fp)
  830238:	10c0110b 	ldhu	r3,68(r2)
  83023c:	00bfff84 	movi	r2,-2
  830240:	1884703a 	and	r2,r3,r2
  830244:	1007883a 	mov	r3,r2
  830248:	e0bffb17 	ldw	r2,-20(fp)
  83024c:	10c0110d 	sth	r3,68(r2)
  830250:	e0bffb17 	ldw	r2,-20(fp)
  830254:	10801104 	addi	r2,r2,68
  830258:	1009883a 	mov	r4,r2
  83025c:	082653c0 	call	82653c <tcp_wakeup>
      sbwait(&so->so_rcv);
  830260:	e0bffb17 	ldw	r2,-20(fp)
  830264:	11000a04 	addi	r4,r2,40
  830268:	0831ae00 	call	831ae0 <sbwait>
      goto restart;
  83026c:	003faf06 	br	83012c <soreceive+0x18c>
   }
   m = so->so_rcv.sb_mb;
  830270:	e0bffb17 	ldw	r2,-20(fp)
  830274:	10801017 	ldw	r2,64(r2)
  830278:	e0bffa15 	stw	r2,-24(fp)
   if (m == 0)
  83027c:	e0bffa17 	ldw	r2,-24(fp)
  830280:	1004c03a 	cmpne	r2,r2,zero
  830284:	1000031e 	bne	r2,zero,830294 <soreceive+0x2f4>
      panic("sorecv 1");
  830288:	01002174 	movhi	r4,133
  83028c:	2136de04 	addi	r4,r4,-9352
  830290:	0825a2c0 	call	825a2c <panic>
   nextrecord = m->m_act;
  830294:	e0bffa17 	ldw	r2,-24(fp)
  830298:	10800717 	ldw	r2,28(r2)
  83029c:	e0bff515 	stw	r2,-44(fp)
   if (pr->pr_flags & PR_ADDR) 
  8302a0:	e0bff617 	ldw	r2,-40(fp)
  8302a4:	1080010b 	ldhu	r2,4(r2)
  8302a8:	10bfffcc 	andi	r2,r2,65535
  8302ac:	1080008c 	andi	r2,r2,2
  8302b0:	1005003a 	cmpeq	r2,r2,zero
  8302b4:	1000451e 	bne	r2,zero,8303cc <soreceive+0x42c>
   {
      if (m->m_type != MT_SONAME) 
  8302b8:	e0bffa17 	ldw	r2,-24(fp)
  8302bc:	10800817 	ldw	r2,32(r2)
  8302c0:	10800260 	cmpeqi	r2,r2,9
  8302c4:	1000081e 	bne	r2,zero,8302e8 <soreceive+0x348>
      {
         dprintf ("sorecv:type %d not nam", m->m_type);
  8302c8:	e0bffa17 	ldw	r2,-24(fp)
  8302cc:	11400817 	ldw	r5,32(r2)
  8302d0:	01002174 	movhi	r4,133
  8302d4:	2136e104 	addi	r4,r4,-9340
  8302d8:	08076480 	call	807648 <printf>
         panic("sorecv 2");
  8302dc:	01002174 	movhi	r4,133
  8302e0:	2136e704 	addi	r4,r4,-9316
  8302e4:	0825a2c0 	call	825a2c <panic>
      }
      if (flags & MSG_PEEK) 
  8302e8:	e0800217 	ldw	r2,8(fp)
  8302ec:	1080008c 	andi	r2,r2,2
  8302f0:	1005003a 	cmpeq	r2,r2,zero
  8302f4:	1000101e 	bne	r2,zero,830338 <soreceive+0x398>
      {
         if (aname)
  8302f8:	e0bffc17 	ldw	r2,-16(fp)
  8302fc:	1005003a 	cmpeq	r2,r2,zero
  830300:	1000091e 	bne	r2,zero,830328 <soreceive+0x388>
            *aname = m_copy (m, 0, m->m_len);
  830304:	e0bffa17 	ldw	r2,-24(fp)
  830308:	10800217 	ldw	r2,8(r2)
  83030c:	100d883a 	mov	r6,r2
  830310:	e13ffa17 	ldw	r4,-24(fp)
  830314:	000b883a 	mov	r5,zero
  830318:	082b8e80 	call	82b8e8 <m_copy>
  83031c:	1007883a 	mov	r3,r2
  830320:	e0bffc17 	ldw	r2,-16(fp)
  830324:	10c00015 	stw	r3,0(r2)
         m = m->m_next;
  830328:	e0bffa17 	ldw	r2,-24(fp)
  83032c:	10800617 	ldw	r2,24(r2)
  830330:	e0bffa15 	stw	r2,-24(fp)
  830334:	00002506 	br	8303cc <soreceive+0x42c>
      } else 
      {
         sbfree (&so->so_rcv, m);
  830338:	e0bffb17 	ldw	r2,-20(fp)
  83033c:	10c00a17 	ldw	r3,40(r2)
  830340:	e0bffa17 	ldw	r2,-24(fp)
  830344:	10800217 	ldw	r2,8(r2)
  830348:	1887c83a 	sub	r3,r3,r2
  83034c:	e0bffb17 	ldw	r2,-20(fp)
  830350:	10c00a15 	stw	r3,40(r2)
         if (aname) 
  830354:	e0bffc17 	ldw	r2,-16(fp)
  830358:	1005003a 	cmpeq	r2,r2,zero
  83035c:	10000d1e 	bne	r2,zero,830394 <soreceive+0x3f4>
         {
            *aname = m;
  830360:	e0fffc17 	ldw	r3,-16(fp)
  830364:	e0bffa17 	ldw	r2,-24(fp)
  830368:	18800015 	stw	r2,0(r3)
            m = m->m_next;
  83036c:	e0bffa17 	ldw	r2,-24(fp)
  830370:	10800617 	ldw	r2,24(r2)
  830374:	e0bffa15 	stw	r2,-24(fp)
            (*aname)->m_next = 0;
  830378:	e0bffc17 	ldw	r2,-16(fp)
  83037c:	10800017 	ldw	r2,0(r2)
  830380:	10000615 	stw	zero,24(r2)
            so->so_rcv.sb_mb = m;
  830384:	e0fffb17 	ldw	r3,-20(fp)
  830388:	e0bffa17 	ldw	r2,-24(fp)
  83038c:	18801015 	stw	r2,64(r3)
  830390:	00000806 	br	8303b4 <soreceive+0x414>
         } else 
         {
            MFREE(m, so->so_rcv.sb_mb);
  830394:	e13ffa17 	ldw	r4,-24(fp)
  830398:	082b7700 	call	82b770 <m_free>
  83039c:	1007883a 	mov	r3,r2
  8303a0:	e0bffb17 	ldw	r2,-20(fp)
  8303a4:	10c01015 	stw	r3,64(r2)
            m = so->so_rcv.sb_mb;
  8303a8:	e0bffb17 	ldw	r2,-20(fp)
  8303ac:	10801017 	ldw	r2,64(r2)
  8303b0:	e0bffa15 	stw	r2,-24(fp)
         }
         if (m)
  8303b4:	e0bffa17 	ldw	r2,-24(fp)
  8303b8:	1005003a 	cmpeq	r2,r2,zero
  8303bc:	1000031e 	bne	r2,zero,8303cc <soreceive+0x42c>
            m->m_act = nextrecord;
  8303c0:	e0fffa17 	ldw	r3,-24(fp)
  8303c4:	e0bff517 	ldw	r2,-44(fp)
  8303c8:	18800715 	stw	r2,28(r3)
      }
   }
   moff = 0;
  8303cc:	e03ff415 	stw	zero,-48(fp)
   offset = 0;
  8303d0:	e03ff715 	stw	zero,-36(fp)
   while (m && (*datalen > 0) && (error == 0))
  8303d4:	0000a606 	br	830670 <soreceive+0x6d0>
   {
      if (m->m_type != MT_RXDATA && m->m_type != MT_HEADER)
  8303d8:	e0bffa17 	ldw	r2,-24(fp)
  8303dc:	10800817 	ldw	r2,32(r2)
  8303e0:	10800060 	cmpeqi	r2,r2,1
  8303e4:	1000071e 	bne	r2,zero,830404 <soreceive+0x464>
  8303e8:	e0bffa17 	ldw	r2,-24(fp)
  8303ec:	10800817 	ldw	r2,32(r2)
  8303f0:	108000e0 	cmpeqi	r2,r2,3
  8303f4:	1000031e 	bne	r2,zero,830404 <soreceive+0x464>
         panic("sorecv 3");
  8303f8:	01002174 	movhi	r4,133
  8303fc:	2136ea04 	addi	r4,r4,-9304
  830400:	0825a2c0 	call	825a2c <panic>
      len = *datalen;
  830404:	e0bffe17 	ldw	r2,-8(fp)
  830408:	10800017 	ldw	r2,0(r2)
  83040c:	e0bff915 	stw	r2,-28(fp)
      so->so_state &= ~SS_RCVATMARK;
  830410:	e0bffb17 	ldw	r2,-20(fp)
  830414:	10c0088b 	ldhu	r3,34(r2)
  830418:	00bfefc4 	movi	r2,-65
  83041c:	1884703a 	and	r2,r3,r2
  830420:	1007883a 	mov	r3,r2
  830424:	e0bffb17 	ldw	r2,-20(fp)
  830428:	10c0088d 	sth	r3,34(r2)
      if (so->so_oobmark && (len > (int)(so->so_oobmark - offset)))
  83042c:	e0bffb17 	ldw	r2,-20(fp)
  830430:	10801a17 	ldw	r2,104(r2)
  830434:	1005003a 	cmpeq	r2,r2,zero
  830438:	10000c1e 	bne	r2,zero,83046c <soreceive+0x4cc>
  83043c:	e0bffb17 	ldw	r2,-20(fp)
  830440:	10c01a17 	ldw	r3,104(r2)
  830444:	e0bff717 	ldw	r2,-36(fp)
  830448:	1885c83a 	sub	r2,r3,r2
  83044c:	1007883a 	mov	r3,r2
  830450:	e0bff917 	ldw	r2,-28(fp)
  830454:	1880050e 	bge	r3,r2,83046c <soreceive+0x4cc>
         len = (int)(so->so_oobmark - offset);
  830458:	e0bffb17 	ldw	r2,-20(fp)
  83045c:	10c01a17 	ldw	r3,104(r2)
  830460:	e0bff717 	ldw	r2,-36(fp)
  830464:	1885c83a 	sub	r2,r3,r2
  830468:	e0bff915 	stw	r2,-28(fp)
      if (len > (int)(m->m_len - moff))
  83046c:	e0bffa17 	ldw	r2,-24(fp)
  830470:	10c00217 	ldw	r3,8(r2)
  830474:	e0bff417 	ldw	r2,-48(fp)
  830478:	1885c83a 	sub	r2,r3,r2
  83047c:	1007883a 	mov	r3,r2
  830480:	e0bff917 	ldw	r2,-28(fp)
  830484:	1880050e 	bge	r3,r2,83049c <soreceive+0x4fc>
         len = m->m_len - moff;
  830488:	e0bffa17 	ldw	r2,-24(fp)
  83048c:	10c00217 	ldw	r3,8(r2)
  830490:	e0bff417 	ldw	r2,-48(fp)
  830494:	1885c83a 	sub	r2,r3,r2
  830498:	e0bff915 	stw	r2,-28(fp)
       * it points to next record) when we drop priority;
       * we must note any additions to the sockbuf when we
       * block interrupts again.
       */

      MEMCPY(data, (mtod(m, char *) + moff), len);
  83049c:	e0bffa17 	ldw	r2,-24(fp)
  8304a0:	10c00317 	ldw	r3,12(r2)
  8304a4:	e0bff417 	ldw	r2,-48(fp)
  8304a8:	1887883a 	add	r3,r3,r2
  8304ac:	e1bff917 	ldw	r6,-28(fp)
  8304b0:	e0bffd17 	ldw	r2,-12(fp)
  8304b4:	1009883a 	mov	r4,r2
  8304b8:	180b883a 	mov	r5,r3
  8304bc:	08073380 	call	807338 <memcpy>
      data += len;
  8304c0:	e0bff917 	ldw	r2,-28(fp)
  8304c4:	1007883a 	mov	r3,r2
  8304c8:	e0bffd17 	ldw	r2,-12(fp)
  8304cc:	10c5883a 	add	r2,r2,r3
  8304d0:	e0bffd15 	stw	r2,-12(fp)
      *datalen -= len;
  8304d4:	e0bffe17 	ldw	r2,-8(fp)
  8304d8:	10c00017 	ldw	r3,0(r2)
  8304dc:	e0bff917 	ldw	r2,-28(fp)
  8304e0:	1887c83a 	sub	r3,r3,r2
  8304e4:	e0bffe17 	ldw	r2,-8(fp)
  8304e8:	10c00015 	stw	r3,0(r2)

      if (len == (int)(m->m_len - moff))
  8304ec:	e0bffa17 	ldw	r2,-24(fp)
  8304f0:	10c00217 	ldw	r3,8(r2)
  8304f4:	e0bff417 	ldw	r2,-48(fp)
  8304f8:	1885c83a 	sub	r2,r3,r2
  8304fc:	1007883a 	mov	r3,r2
  830500:	e0bff917 	ldw	r2,-28(fp)
  830504:	1880221e 	bne	r3,r2,830590 <soreceive+0x5f0>
      {
         if (flags & MSG_PEEK) 
  830508:	e0800217 	ldw	r2,8(fp)
  83050c:	1080008c 	andi	r2,r2,2
  830510:	1005003a 	cmpeq	r2,r2,zero
  830514:	1000051e 	bne	r2,zero,83052c <soreceive+0x58c>
         {
            m = m->m_next;
  830518:	e0bffa17 	ldw	r2,-24(fp)
  83051c:	10800617 	ldw	r2,24(r2)
  830520:	e0bffa15 	stw	r2,-24(fp)
            moff = 0;
  830524:	e03ff415 	stw	zero,-48(fp)
  830528:	00003406 	br	8305fc <soreceive+0x65c>
         } else 
         {
            nextrecord = m->m_act;
  83052c:	e0bffa17 	ldw	r2,-24(fp)
  830530:	10800717 	ldw	r2,28(r2)
  830534:	e0bff515 	stw	r2,-44(fp)
            sbfree(&so->so_rcv, m);
  830538:	e0bffb17 	ldw	r2,-20(fp)
  83053c:	10c00a17 	ldw	r3,40(r2)
  830540:	e0bffa17 	ldw	r2,-24(fp)
  830544:	10800217 	ldw	r2,8(r2)
  830548:	1887c83a 	sub	r3,r3,r2
  83054c:	e0bffb17 	ldw	r2,-20(fp)
  830550:	10c00a15 	stw	r3,40(r2)
            {
               MFREE(m, so->so_rcv.sb_mb);
  830554:	e13ffa17 	ldw	r4,-24(fp)
  830558:	082b7700 	call	82b770 <m_free>
  83055c:	1007883a 	mov	r3,r2
  830560:	e0bffb17 	ldw	r2,-20(fp)
  830564:	10c01015 	stw	r3,64(r2)
               m = so->so_rcv.sb_mb;
  830568:	e0bffb17 	ldw	r2,-20(fp)
  83056c:	10801017 	ldw	r2,64(r2)
  830570:	e0bffa15 	stw	r2,-24(fp)
            }
            if (m)
  830574:	e0bffa17 	ldw	r2,-24(fp)
  830578:	1005003a 	cmpeq	r2,r2,zero
  83057c:	10001f1e 	bne	r2,zero,8305fc <soreceive+0x65c>
               m->m_act = nextrecord;
  830580:	e0fffa17 	ldw	r3,-24(fp)
  830584:	e0bff517 	ldw	r2,-44(fp)
  830588:	18800715 	stw	r2,28(r3)
  83058c:	00001b06 	br	8305fc <soreceive+0x65c>
         }
      } else 
      {
         if (flags & MSG_PEEK)
  830590:	e0800217 	ldw	r2,8(fp)
  830594:	1080008c 	andi	r2,r2,2
  830598:	1005003a 	cmpeq	r2,r2,zero
  83059c:	1000051e 	bne	r2,zero,8305b4 <soreceive+0x614>
            moff += len;
  8305a0:	e0bff417 	ldw	r2,-48(fp)
  8305a4:	e0fff917 	ldw	r3,-28(fp)
  8305a8:	10c5883a 	add	r2,r2,r3
  8305ac:	e0bff415 	stw	r2,-48(fp)
  8305b0:	00001206 	br	8305fc <soreceive+0x65c>
         else 
         {
            m->m_data += len;
  8305b4:	e0bffa17 	ldw	r2,-24(fp)
  8305b8:	10c00317 	ldw	r3,12(r2)
  8305bc:	e0bff917 	ldw	r2,-28(fp)
  8305c0:	1887883a 	add	r3,r3,r2
  8305c4:	e0bffa17 	ldw	r2,-24(fp)
  8305c8:	10c00315 	stw	r3,12(r2)
            m->m_len -= len;
  8305cc:	e0bffa17 	ldw	r2,-24(fp)
  8305d0:	10c00217 	ldw	r3,8(r2)
  8305d4:	e0bff917 	ldw	r2,-28(fp)
  8305d8:	1887c83a 	sub	r3,r3,r2
  8305dc:	e0bffa17 	ldw	r2,-24(fp)
  8305e0:	10c00215 	stw	r3,8(r2)
            so->so_rcv.sb_cc -= len;
  8305e4:	e0bffb17 	ldw	r2,-20(fp)
  8305e8:	10c00a17 	ldw	r3,40(r2)
  8305ec:	e0bff917 	ldw	r2,-28(fp)
  8305f0:	1887c83a 	sub	r3,r3,r2
  8305f4:	e0bffb17 	ldw	r2,-20(fp)
  8305f8:	10c00a15 	stw	r3,40(r2)
         }
      }
      if (so->so_oobmark) 
  8305fc:	e0bffb17 	ldw	r2,-20(fp)
  830600:	10801a17 	ldw	r2,104(r2)
  830604:	1005003a 	cmpeq	r2,r2,zero
  830608:	1000191e 	bne	r2,zero,830670 <soreceive+0x6d0>
      {
         if ((flags & MSG_PEEK) == 0) 
  83060c:	e0800217 	ldw	r2,8(fp)
  830610:	1080008c 	andi	r2,r2,2
  830614:	1004c03a 	cmpne	r2,r2,zero
  830618:	1000111e 	bne	r2,zero,830660 <soreceive+0x6c0>
         {
            so->so_oobmark -= len;
  83061c:	e0bffb17 	ldw	r2,-20(fp)
  830620:	10c01a17 	ldw	r3,104(r2)
  830624:	e0bff917 	ldw	r2,-28(fp)
  830628:	1887c83a 	sub	r3,r3,r2
  83062c:	e0bffb17 	ldw	r2,-20(fp)
  830630:	10c01a15 	stw	r3,104(r2)
            if (so->so_oobmark == 0) 
  830634:	e0bffb17 	ldw	r2,-20(fp)
  830638:	10801a17 	ldw	r2,104(r2)
  83063c:	1004c03a 	cmpne	r2,r2,zero
  830640:	10000b1e 	bne	r2,zero,830670 <soreceive+0x6d0>
            {
               so->so_state |= SS_RCVATMARK;
  830644:	e0bffb17 	ldw	r2,-20(fp)
  830648:	1080088b 	ldhu	r2,34(r2)
  83064c:	10801014 	ori	r2,r2,64
  830650:	1007883a 	mov	r3,r2
  830654:	e0bffb17 	ldw	r2,-20(fp)
  830658:	10c0088d 	sth	r3,34(r2)
               break;
  83065c:	00000e06 	br	830698 <soreceive+0x6f8>
            }
         } else
            offset += len;
  830660:	e0bff717 	ldw	r2,-36(fp)
  830664:	e0fff917 	ldw	r3,-28(fp)
  830668:	10c5883a 	add	r2,r2,r3
  83066c:	e0bff715 	stw	r2,-36(fp)
            m->m_act = nextrecord;
      }
   }
   moff = 0;
   offset = 0;
   while (m && (*datalen > 0) && (error == 0))
  830670:	e0bffa17 	ldw	r2,-24(fp)
  830674:	1005003a 	cmpeq	r2,r2,zero
  830678:	1000071e 	bne	r2,zero,830698 <soreceive+0x6f8>
  83067c:	e0bffe17 	ldw	r2,-8(fp)
  830680:	10800017 	ldw	r2,0(r2)
  830684:	10800050 	cmplti	r2,r2,1
  830688:	1000031e 	bne	r2,zero,830698 <soreceive+0x6f8>
  83068c:	e0bff817 	ldw	r2,-32(fp)
  830690:	1005003a 	cmpeq	r2,r2,zero
  830694:	103f501e 	bne	r2,zero,8303d8 <soreceive+0x438>
         } else
            offset += len;
      }
   }

   if ((flags & MSG_PEEK) == 0) 
  830698:	e0800217 	ldw	r2,8(fp)
  83069c:	1080008c 	andi	r2,r2,2
  8306a0:	1004c03a 	cmpne	r2,r2,zero
  8306a4:	1000241e 	bne	r2,zero,830738 <soreceive+0x798>
   {
      if (m == 0)
  8306a8:	e0bffa17 	ldw	r2,-24(fp)
  8306ac:	1004c03a 	cmpne	r2,r2,zero
  8306b0:	1000041e 	bne	r2,zero,8306c4 <soreceive+0x724>
         so->so_rcv.sb_mb = nextrecord;
  8306b4:	e0fffb17 	ldw	r3,-20(fp)
  8306b8:	e0bff517 	ldw	r2,-44(fp)
  8306bc:	18801015 	stw	r2,64(r3)
  8306c0:	00000a06 	br	8306ec <soreceive+0x74c>
      else if (pr->pr_flags & PR_ATOMIC)
  8306c4:	e0bff617 	ldw	r2,-40(fp)
  8306c8:	1080010b 	ldhu	r2,4(r2)
  8306cc:	10bfffcc 	andi	r2,r2,65535
  8306d0:	1080004c 	andi	r2,r2,1
  8306d4:	10803fcc 	andi	r2,r2,255
  8306d8:	1005003a 	cmpeq	r2,r2,zero
  8306dc:	1000031e 	bne	r2,zero,8306ec <soreceive+0x74c>
         (void) sbdroprecord(&so->so_rcv);
  8306e0:	e0bffb17 	ldw	r2,-20(fp)
  8306e4:	11000a04 	addi	r4,r2,40
  8306e8:	08325f40 	call	8325f4 <sbdroprecord>
      if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
  8306ec:	e0bff617 	ldw	r2,-40(fp)
  8306f0:	1080010b 	ldhu	r2,4(r2)
  8306f4:	10bfffcc 	andi	r2,r2,65535
  8306f8:	1080020c 	andi	r2,r2,8
  8306fc:	1005003a 	cmpeq	r2,r2,zero
  830700:	10000d1e 	bne	r2,zero,830738 <soreceive+0x798>
  830704:	e0bffb17 	ldw	r2,-20(fp)
  830708:	10800117 	ldw	r2,4(r2)
  83070c:	1005003a 	cmpeq	r2,r2,zero
  830710:	1000091e 	bne	r2,zero,830738 <soreceive+0x798>
      {
         so->so_req = PRU_RCVD;
  830714:	e0fffb17 	ldw	r3,-20(fp)
  830718:	00800204 	movi	r2,8
  83071c:	18800715 	stw	r2,28(r3)
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
  830720:	e0bff617 	ldw	r2,-40(fp)
  830724:	10800317 	ldw	r2,12(r2)
  830728:	e13ffb17 	ldw	r4,-20(fp)
  83072c:	000b883a 	mov	r5,zero
  830730:	000d883a 	mov	r6,zero
  830734:	103ee83a 	callr	r2
          (struct mbuf *)0);
      }
   }
release:
   sbunlock(&so->so_rcv);
  830738:	e0bffb17 	ldw	r2,-20(fp)
  83073c:	10c0110b 	ldhu	r3,68(r2)
  830740:	00bfff84 	movi	r2,-2
  830744:	1884703a 	and	r2,r3,r2
  830748:	1007883a 	mov	r3,r2
  83074c:	e0bffb17 	ldw	r2,-20(fp)
  830750:	10c0110d 	sth	r3,68(r2)
  830754:	e0bffb17 	ldw	r2,-20(fp)
  830758:	10801104 	addi	r2,r2,68
  83075c:	1009883a 	mov	r4,r2
  830760:	082653c0 	call	82653c <tcp_wakeup>
   return (error);
  830764:	e0bff817 	ldw	r2,-32(fp)
  830768:	e0bfff15 	stw	r2,-4(fp)
  83076c:	e0bfff17 	ldw	r2,-4(fp)
}
  830770:	e037883a 	mov	sp,fp
  830774:	dfc00117 	ldw	ra,4(sp)
  830778:	df000017 	ldw	fp,0(sp)
  83077c:	dec00204 	addi	sp,sp,8
  830780:	f800283a 	ret

00830784 <soshutdown>:
 *
 * RETURNS: int               0 if successful, else error code
 */
int
soshutdown(struct socket *so, int how)
{
  830784:	defffb04 	addi	sp,sp,-20
  830788:	dfc00415 	stw	ra,16(sp)
  83078c:	df000315 	stw	fp,12(sp)
  830790:	df000304 	addi	fp,sp,12
  830794:	e13ffd15 	stw	r4,-12(fp)
  830798:	e17ffe15 	stw	r5,-8(fp)
   how++;   /* convert 0,1,2 into 1,2,3 */
  83079c:	e0bffe17 	ldw	r2,-8(fp)
  8307a0:	10800044 	addi	r2,r2,1
  8307a4:	e0bffe15 	stw	r2,-8(fp)
   if (how & 1)   /* caller wanted READ or BOTH */
  8307a8:	e0bffe17 	ldw	r2,-8(fp)
  8307ac:	1080004c 	andi	r2,r2,1
  8307b0:	10803fcc 	andi	r2,r2,255
  8307b4:	1005003a 	cmpeq	r2,r2,zero
  8307b8:	1000021e 	bne	r2,zero,8307c4 <soshutdown+0x40>
      sorflush(so);
  8307bc:	e13ffd17 	ldw	r4,-12(fp)
  8307c0:	083082c0 	call	83082c <sorflush>

   if (how & 2)   /* caller wanted WRITE or BOTH */
  8307c4:	e0bffe17 	ldw	r2,-8(fp)
  8307c8:	1080008c 	andi	r2,r2,2
  8307cc:	1005003a 	cmpeq	r2,r2,zero
  8307d0:	10000f1e 	bne	r2,zero,830810 <soshutdown+0x8c>
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
  8307d4:	e0bffd17 	ldw	r2,-12(fp)
  8307d8:	11001204 	addi	r4,r2,72
  8307dc:	08322840 	call	832284 <sbflush>
      so->so_req = PRU_SHUTDOWN;
  8307e0:	e0fffd17 	ldw	r3,-12(fp)
  8307e4:	008001c4 	movi	r2,7
  8307e8:	18800715 	stw	r2,28(r3)
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
  8307ec:	e0bffd17 	ldw	r2,-12(fp)
  8307f0:	10800217 	ldw	r2,8(r2)
  8307f4:	10800317 	ldw	r2,12(r2)
  8307f8:	e13ffd17 	ldw	r4,-12(fp)
  8307fc:	000b883a 	mov	r5,zero
  830800:	000d883a 	mov	r6,zero
  830804:	103ee83a 	callr	r2
  830808:	e0bfff15 	stw	r2,-4(fp)
  83080c:	00000106 	br	830814 <soshutdown+0x90>
   }

   return 0;
  830810:	e03fff15 	stw	zero,-4(fp)
  830814:	e0bfff17 	ldw	r2,-4(fp)
}
  830818:	e037883a 	mov	sp,fp
  83081c:	dfc00117 	ldw	ra,4(sp)
  830820:	df000017 	ldw	fp,0(sp)
  830824:	dec00204 	addi	sp,sp,8
  830828:	f800283a 	ret

0083082c <sorflush>:
 * socket receive buffer is discarded. Wakeup any processes waiting
 * on the socket.
 */
void
sorflush(struct socket * so)
{
  83082c:	defffb04 	addi	sp,sp,-20
  830830:	dfc00415 	stw	ra,16(sp)
  830834:	df000315 	stw	fp,12(sp)
  830838:	df000304 	addi	fp,sp,12
  83083c:	e13fff15 	stw	r4,-4(fp)
   struct sockbuf *sb =  &so->so_rcv;
  830840:	e0bfff17 	ldw	r2,-4(fp)
  830844:	10800a04 	addi	r2,r2,40
  830848:	e0bffe15 	stw	r2,-8(fp)
   int   s;

   sblock(sb);
  83084c:	00000406 	br	830860 <sorflush+0x34>
  830850:	e0bffe17 	ldw	r2,-8(fp)
  830854:	10800704 	addi	r2,r2,28
  830858:	1009883a 	mov	r4,r2
  83085c:	082639c0 	call	82639c <tcp_sleep>
  830860:	e0bffe17 	ldw	r2,-8(fp)
  830864:	1080070b 	ldhu	r2,28(r2)
  830868:	10bfffcc 	andi	r2,r2,65535
  83086c:	1080004c 	andi	r2,r2,1
  830870:	10803fcc 	andi	r2,r2,255
  830874:	1004c03a 	cmpne	r2,r2,zero
  830878:	103ff51e 	bne	r2,zero,830850 <sorflush+0x24>
  83087c:	e0bffe17 	ldw	r2,-8(fp)
  830880:	1080070b 	ldhu	r2,28(r2)
  830884:	10800054 	ori	r2,r2,1
  830888:	1007883a 	mov	r3,r2
  83088c:	e0bffe17 	ldw	r2,-8(fp)
  830890:	10c0070d 	sth	r3,28(r2)
   socantrcvmore(so);
  830894:	e13fff17 	ldw	r4,-4(fp)
  830898:	0831a580 	call	831a58 <socantrcvmore>
   sbunlock(sb);
  83089c:	e0bffe17 	ldw	r2,-8(fp)
  8308a0:	10c0070b 	ldhu	r3,28(r2)
  8308a4:	00bfff84 	movi	r2,-2
  8308a8:	1884703a 	and	r2,r3,r2
  8308ac:	1007883a 	mov	r3,r2
  8308b0:	e0bffe17 	ldw	r2,-8(fp)
  8308b4:	10c0070d 	sth	r3,28(r2)
  8308b8:	e0bffe17 	ldw	r2,-8(fp)
  8308bc:	10800704 	addi	r2,r2,28
  8308c0:	1009883a 	mov	r4,r2
  8308c4:	082653c0 	call	82653c <tcp_wakeup>
   sbrelease(sb);
  8308c8:	e13ffe17 	ldw	r4,-8(fp)
  8308cc:	0831cc40 	call	831cc4 <sbrelease>
   MEMSET((char *)sb, 0, sizeof (*sb));
  8308d0:	e0bffe17 	ldw	r2,-8(fp)
  8308d4:	1009883a 	mov	r4,r2
  8308d8:	01800804 	movi	r6,32
  8308dc:	000b883a 	mov	r5,zero
  8308e0:	08074b80 	call	8074b8 <memset>
   s = so->so_error;
  8308e4:	e0bfff17 	ldw	r2,-4(fp)
  8308e8:	10800617 	ldw	r2,24(r2)
  8308ec:	e0bffd15 	stw	r2,-12(fp)
   so->so_error = ESHUTDOWN;
  8308f0:	e0ffff17 	ldw	r3,-4(fp)
  8308f4:	00801b84 	movi	r2,110
  8308f8:	18800615 	stw	r2,24(r3)
   sorwakeup(so);
  8308fc:	e0bfff17 	ldw	r2,-4(fp)
  830900:	11400a04 	addi	r5,r2,40
  830904:	e13fff17 	ldw	r4,-4(fp)
  830908:	0831b480 	call	831b48 <sbwakeup>
   so->so_error = s;
  83090c:	e0ffff17 	ldw	r3,-4(fp)
  830910:	e0bffd17 	ldw	r2,-12(fp)
  830914:	18800615 	stw	r2,24(r3)
}
  830918:	e037883a 	mov	sp,fp
  83091c:	dfc00117 	ldw	ra,4(sp)
  830920:	df000017 	ldw	fp,0(sp)
  830924:	dec00204 	addi	sp,sp,8
  830928:	f800283a 	ret

0083092c <sosetopt>:

int
sosetopt(struct socket * so, 
   int   optname,
   void *   arg)
{
  83092c:	defff404 	addi	sp,sp,-48
  830930:	dfc00b15 	stw	ra,44(sp)
  830934:	df000a15 	stw	fp,40(sp)
  830938:	df000a04 	addi	fp,sp,40
  83093c:	e13ffb15 	stw	r4,-20(fp)
  830940:	e17ffc15 	stw	r5,-16(fp)
  830944:	e1bffd15 	stw	r6,-12(fp)
   int   error =  0;
  830948:	e03ffa15 	stw	zero,-24(fp)

   switch (optname) 
  83094c:	e0bffc17 	ldw	r2,-16(fp)
  830950:	e0bfff15 	stw	r2,-4(fp)
  830954:	e0ffff17 	ldw	r3,-4(fp)
  830958:	18808020 	cmpeqi	r2,r3,512
  83095c:	1000521e 	bne	r2,zero,830aa8 <sosetopt+0x17c>
  830960:	e0ffff17 	ldw	r3,-4(fp)
  830964:	18808048 	cmpgei	r2,r3,513
  830968:	1000211e 	bne	r2,zero,8309f0 <sosetopt+0xc4>
  83096c:	e0ffff17 	ldw	r3,-4(fp)
  830970:	18800388 	cmpgei	r2,r3,14
  830974:	10000d1e 	bne	r2,zero,8309ac <sosetopt+0x80>
  830978:	e0ffff17 	ldw	r3,-4(fp)
  83097c:	18800248 	cmpgei	r2,r3,9
  830980:	10009d1e 	bne	r2,zero,830bf8 <sosetopt+0x2cc>
  830984:	e0ffff17 	ldw	r3,-4(fp)
  830988:	18800120 	cmpeqi	r2,r3,4
  83098c:	1000461e 	bne	r2,zero,830aa8 <sosetopt+0x17c>
  830990:	e0ffff17 	ldw	r3,-4(fp)
  830994:	18800220 	cmpeqi	r2,r3,8
  830998:	1000431e 	bne	r2,zero,830aa8 <sosetopt+0x17c>
  83099c:	e0ffff17 	ldw	r3,-4(fp)
  8309a0:	188000a0 	cmpeqi	r2,r3,2
  8309a4:	10009a1e 	bne	r2,zero,830c10 <sosetopt+0x2e4>
  8309a8:	00010806 	br	830dcc <sosetopt+0x4a0>
  8309ac:	e0ffff17 	ldw	r3,-4(fp)
  8309b0:	18800820 	cmpeqi	r2,r3,32
  8309b4:	10003c1e 	bne	r2,zero,830aa8 <sosetopt+0x17c>
  8309b8:	e0ffff17 	ldw	r3,-4(fp)
  8309bc:	18800848 	cmpgei	r2,r3,33
  8309c0:	1000041e 	bne	r2,zero,8309d4 <sosetopt+0xa8>
  8309c4:	e0ffff17 	ldw	r3,-4(fp)
  8309c8:	18800420 	cmpeqi	r2,r3,16
  8309cc:	1000361e 	bne	r2,zero,830aa8 <sosetopt+0x17c>
  8309d0:	0000fe06 	br	830dcc <sosetopt+0x4a0>
  8309d4:	e0ffff17 	ldw	r3,-4(fp)
  8309d8:	18802020 	cmpeqi	r2,r3,128
  8309dc:	10002d1e 	bne	r2,zero,830a94 <sosetopt+0x168>
  8309e0:	e0ffff17 	ldw	r3,-4(fp)
  8309e4:	18804020 	cmpeqi	r2,r3,256
  8309e8:	10002f1e 	bne	r2,zero,830aa8 <sosetopt+0x17c>
  8309ec:	0000f706 	br	830dcc <sosetopt+0x4a0>
  8309f0:	e0ffff17 	ldw	r3,-4(fp)
  8309f4:	18840520 	cmpeqi	r2,r3,4116
  8309f8:	1000571e 	bne	r2,zero,830b58 <sosetopt+0x22c>
  8309fc:	e0ffff17 	ldw	r3,-4(fp)
  830a00:	18840548 	cmpgei	r2,r3,4117
  830a04:	10000f1e 	bne	r2,zero,830a44 <sosetopt+0x118>
  830a08:	e0ffff17 	ldw	r3,-4(fp)
  830a0c:	188401a0 	cmpeqi	r2,r3,4102
  830a10:	10004c1e 	bne	r2,zero,830b44 <sosetopt+0x218>
  830a14:	e0ffff17 	ldw	r3,-4(fp)
  830a18:	188401c8 	cmpgei	r2,r3,4103
  830a1c:	1000051e 	bne	r2,zero,830a34 <sosetopt+0x108>
  830a20:	e0ffff17 	ldw	r3,-4(fp)
  830a24:	18bbffc4 	addi	r2,r3,-4097
  830a28:	108000a8 	cmpgeui	r2,r2,2
  830a2c:	1000e71e 	bne	r2,zero,830dcc <sosetopt+0x4a0>
  830a30:	00003006 	br	830af4 <sosetopt+0x1c8>
  830a34:	e0ffff17 	ldw	r3,-4(fp)
  830a38:	18840420 	cmpeqi	r2,r3,4112
  830a3c:	1000ba1e 	bne	r2,zero,830d28 <sosetopt+0x3fc>
  830a40:	0000e206 	br	830dcc <sosetopt+0x4a0>
  830a44:	e0ffff17 	ldw	r3,-4(fp)
  830a48:	188800e0 	cmpeqi	r2,r3,8195
  830a4c:	1000b61e 	bne	r2,zero,830d28 <sosetopt+0x3fc>
  830a50:	e0ffff17 	ldw	r3,-4(fp)
  830a54:	18880108 	cmpgei	r2,r3,8196
  830a58:	1000071e 	bne	r2,zero,830a78 <sosetopt+0x14c>
  830a5c:	e0ffff17 	ldw	r3,-4(fp)
  830a60:	18840560 	cmpeqi	r2,r3,4117
  830a64:	1000431e 	bne	r2,zero,830b74 <sosetopt+0x248>
  830a68:	e0ffff17 	ldw	r3,-4(fp)
  830a6c:	188405a0 	cmpeqi	r2,r3,4118
  830a70:	1000481e 	bne	r2,zero,830b94 <sosetopt+0x268>
  830a74:	0000d506 	br	830dcc <sosetopt+0x4a0>
  830a78:	e0ffff17 	ldw	r3,-4(fp)
  830a7c:	18880120 	cmpeqi	r2,r3,8196
  830a80:	10007a1e 	bne	r2,zero,830c6c <sosetopt+0x340>
  830a84:	e0ffff17 	ldw	r3,-4(fp)
  830a88:	18900020 	cmpeqi	r2,r3,16384
  830a8c:	1000061e 	bne	r2,zero,830aa8 <sosetopt+0x17c>
  830a90:	0000ce06 	br	830dcc <sosetopt+0x4a0>
   {
   case SO_LINGER:
      so->so_linger = (short)((struct linger *)arg)->l_linger;
  830a94:	e0bffd17 	ldw	r2,-12(fp)
  830a98:	10800117 	ldw	r2,4(r2)
  830a9c:	1007883a 	mov	r3,r2
  830aa0:	e0bffb17 	ldw	r2,-20(fp)
  830aa4:	10c0080d 	sth	r3,32(r2)
   case SO_TCPSACK:
   case SO_NOSLOWSTART:
#ifdef SUPPORT_SO_FULLMSS
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
  830aa8:	e0bffd17 	ldw	r2,-12(fp)
  830aac:	10800017 	ldw	r2,0(r2)
  830ab0:	1005003a 	cmpeq	r2,r2,zero
  830ab4:	1000071e 	bne	r2,zero,830ad4 <sosetopt+0x1a8>
         so->so_options |= optname;
  830ab8:	e0bffb17 	ldw	r2,-20(fp)
  830abc:	10c00417 	ldw	r3,16(r2)
  830ac0:	e0bffc17 	ldw	r2,-16(fp)
  830ac4:	1886b03a 	or	r3,r3,r2
  830ac8:	e0bffb17 	ldw	r2,-20(fp)
  830acc:	10c00415 	stw	r3,16(r2)
  830ad0:	0000c006 	br	830dd4 <sosetopt+0x4a8>
      else
         so->so_options &= ~optname;
  830ad4:	e0bffb17 	ldw	r2,-20(fp)
  830ad8:	10c00417 	ldw	r3,16(r2)
  830adc:	e0bffc17 	ldw	r2,-16(fp)
  830ae0:	0084303a 	nor	r2,zero,r2
  830ae4:	1886703a 	and	r3,r3,r2
  830ae8:	e0bffb17 	ldw	r2,-20(fp)
  830aec:	10c00415 	stw	r3,16(r2)
      break;
  830af0:	0000b806 	br	830dd4 <sosetopt+0x4a8>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
  830af4:	e0bffc17 	ldw	r2,-16(fp)
  830af8:	10840058 	cmpnei	r2,r2,4097
  830afc:	1000041e 	bne	r2,zero,830b10 <sosetopt+0x1e4>
  830b00:	e0bffb17 	ldw	r2,-20(fp)
  830b04:	10801204 	addi	r2,r2,72
  830b08:	e0bffe15 	stw	r2,-8(fp)
  830b0c:	00000306 	br	830b1c <sosetopt+0x1f0>
  830b10:	e0bffb17 	ldw	r2,-20(fp)
  830b14:	10800a04 	addi	r2,r2,40
  830b18:	e0bffe15 	stw	r2,-8(fp)
  830b1c:	e0bffd17 	ldw	r2,-12(fp)
  830b20:	10800017 	ldw	r2,0(r2)
  830b24:	100b883a 	mov	r5,r2
  830b28:	e13ffe17 	ldw	r4,-8(fp)
  830b2c:	0831c640 	call	831c64 <sbreserve>
  830b30:	1004c03a 	cmpne	r2,r2,zero
  830b34:	1000a71e 	bne	r2,zero,830dd4 <sosetopt+0x4a8>
          &so->so_snd : &so->so_rcv,
          (u_long) * (int *)arg) == 0) 
      {
         error = ENOBUFS;
  830b38:	00801a44 	movi	r2,105
  830b3c:	e0bffa15 	stw	r2,-24(fp)
         goto bad;
  830b40:	0000a406 	br	830dd4 <sosetopt+0x4a8>
      }
      break;

   case SO_RCVTIMEO:
      so->so_rcv.sb_timeo = *(short *)arg;
  830b44:	e0bffd17 	ldw	r2,-12(fp)
  830b48:	10c0000b 	ldhu	r3,0(r2)
  830b4c:	e0bffb17 	ldw	r2,-20(fp)
  830b50:	10c0118d 	sth	r3,70(r2)
      break;
  830b54:	00009f06 	br	830dd4 <sosetopt+0x4a8>

   case SO_NBIO:     /* set socket into NON-blocking mode */
      so->so_state |= SS_NBIO;
  830b58:	e0bffb17 	ldw	r2,-20(fp)
  830b5c:	1080088b 	ldhu	r2,34(r2)
  830b60:	10804014 	ori	r2,r2,256
  830b64:	1007883a 	mov	r3,r2
  830b68:	e0bffb17 	ldw	r2,-20(fp)
  830b6c:	10c0088d 	sth	r3,34(r2)
      break;
  830b70:	00009806 	br	830dd4 <sosetopt+0x4a8>

   case SO_BIO:   /* set socket into blocking mode */
      so->so_state &= ~SS_NBIO;
  830b74:	e0bffb17 	ldw	r2,-20(fp)
  830b78:	10c0088b 	ldhu	r3,34(r2)
  830b7c:	00bfbfc4 	movi	r2,-257
  830b80:	1884703a 	and	r2,r3,r2
  830b84:	1007883a 	mov	r3,r2
  830b88:	e0bffb17 	ldw	r2,-20(fp)
  830b8c:	10c0088d 	sth	r3,34(r2)
      break;
  830b90:	00009006 	br	830dd4 <sosetopt+0x4a8>

   case SO_NONBLOCK:    /* set blocking mode according to arg */
      /* sanity check the arg parameter */
      if (!arg)
  830b94:	e0bffd17 	ldw	r2,-12(fp)
  830b98:	1004c03a 	cmpne	r2,r2,zero
  830b9c:	1000031e 	bne	r2,zero,830bac <sosetopt+0x280>
      {
         error = ENP_PARAM;
  830ba0:	00bffd84 	movi	r2,-10
  830ba4:	e0bffa15 	stw	r2,-24(fp)
         break;
  830ba8:	00008a06 	br	830dd4 <sosetopt+0x4a8>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
  830bac:	e0bffd17 	ldw	r2,-12(fp)
  830bb0:	10800017 	ldw	r2,0(r2)
  830bb4:	1005003a 	cmpeq	r2,r2,zero
  830bb8:	1000071e 	bne	r2,zero,830bd8 <sosetopt+0x2ac>
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
  830bbc:	e0bffb17 	ldw	r2,-20(fp)
  830bc0:	1080088b 	ldhu	r2,34(r2)
  830bc4:	10804014 	ori	r2,r2,256
  830bc8:	1007883a 	mov	r3,r2
  830bcc:	e0bffb17 	ldw	r2,-20(fp)
  830bd0:	10c0088d 	sth	r3,34(r2)
  830bd4:	00007f06 	br	830dd4 <sosetopt+0x4a8>
      else
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
  830bd8:	e0bffb17 	ldw	r2,-20(fp)
  830bdc:	10c0088b 	ldhu	r3,34(r2)
  830be0:	00bfbfc4 	movi	r2,-257
  830be4:	1884703a 	and	r2,r3,r2
  830be8:	1007883a 	mov	r3,r2
  830bec:	e0bffb17 	ldw	r2,-20(fp)
  830bf0:	10c0088d 	sth	r3,34(r2)
      break;
  830bf4:	00007706 	br	830dd4 <sosetopt+0x4a8>
   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      error = ip_setmoptions(optname, so, arg);
  830bf8:	e13ffc17 	ldw	r4,-16(fp)
  830bfc:	e17ffb17 	ldw	r5,-20(fp)
  830c00:	e1bffd17 	ldw	r6,-12(fp)
  830c04:	0844b280 	call	844b28 <ip_setmoptions>
  830c08:	e0bffa15 	stw	r2,-24(fp)
      break;
  830c0c:	00007106 	br	830dd4 <sosetopt+0x4a8>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
  830c10:	e0bffd17 	ldw	r2,-12(fp)
  830c14:	1004c03a 	cmpne	r2,r2,zero
  830c18:	1000031e 	bne	r2,zero,830c28 <sosetopt+0x2fc>
      {
         error = ENP_PARAM;
  830c1c:	00bffd84 	movi	r2,-10
  830c20:	e0bffa15 	stw	r2,-24(fp)
         break;
  830c24:	00006b06 	br	830dd4 <sosetopt+0x4a8>
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
  830c28:	e0bffd17 	ldw	r2,-12(fp)
  830c2c:	10800017 	ldw	r2,0(r2)
  830c30:	1005003a 	cmpeq	r2,r2,zero
  830c34:	1000061e 	bne	r2,zero,830c50 <sosetopt+0x324>
         so->so_options |= SO_HDRINCL;
  830c38:	e0bffb17 	ldw	r2,-20(fp)
  830c3c:	10800417 	ldw	r2,16(r2)
  830c40:	10c80014 	ori	r3,r2,8192
  830c44:	e0bffb17 	ldw	r2,-20(fp)
  830c48:	10c00415 	stw	r3,16(r2)
  830c4c:	00006106 	br	830dd4 <sosetopt+0x4a8>
      else
         so->so_options &= ~SO_HDRINCL;
  830c50:	e0bffb17 	ldw	r2,-20(fp)
  830c54:	10c00417 	ldw	r3,16(r2)
  830c58:	00b7ffc4 	movi	r2,-8193
  830c5c:	1886703a 	and	r3,r3,r2
  830c60:	e0bffb17 	ldw	r2,-20(fp)
  830c64:	10c00415 	stw	r3,16(r2)
      break;
  830c68:	00005a06 	br	830dd4 <sosetopt+0x4a8>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
  830c6c:	e0bffb17 	ldw	r2,-20(fp)
  830c70:	10800983 	ldbu	r2,38(r2)
  830c74:	10803fcc 	andi	r2,r2,255
  830c78:	1080201c 	xori	r2,r2,128
  830c7c:	10bfe004 	addi	r2,r2,-128
  830c80:	10800060 	cmpeqi	r2,r2,1
  830c84:	1000031e 	bne	r2,zero,830c94 <sosetopt+0x368>
      {
         error = EINVAL;
  830c88:	00800584 	movi	r2,22
  830c8c:	e0bffa15 	stw	r2,-24(fp)
         break;
  830c90:	00005006 	br	830dd4 <sosetopt+0x4a8>
      }
      inp = (struct inpcb *)(so->so_pcb);
  830c94:	e0bffb17 	ldw	r2,-20(fp)
  830c98:	10800117 	ldw	r2,4(r2)
  830c9c:	e0bff915 	stw	r2,-28(fp)
      tp = intotcpcb(inp);
  830ca0:	e0bff917 	ldw	r2,-28(fp)
  830ca4:	10800917 	ldw	r2,36(r2)
  830ca8:	e0bff815 	stw	r2,-32(fp)
      if(!tp)
  830cac:	e0bff817 	ldw	r2,-32(fp)
  830cb0:	1004c03a 	cmpne	r2,r2,zero
  830cb4:	1000031e 	bne	r2,zero,830cc4 <sosetopt+0x398>
      {
         error = ENOTCONN;
  830cb8:	00802004 	movi	r2,128
  830cbc:	e0bffa15 	stw	r2,-24(fp)
         break;
  830cc0:	00004406 	br	830dd4 <sosetopt+0x4a8>
      }
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
  830cc4:	e0bffd17 	ldw	r2,-12(fp)
  830cc8:	1004c03a 	cmpne	r2,r2,zero
  830ccc:	1000031e 	bne	r2,zero,830cdc <sosetopt+0x3b0>
      {
         error = ENP_PARAM;
  830cd0:	00bffd84 	movi	r2,-10
  830cd4:	e0bffa15 	stw	r2,-24(fp)
         break;
  830cd8:	00003e06 	br	830dd4 <sosetopt+0x4a8>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
  830cdc:	e0bffd17 	ldw	r2,-12(fp)
  830ce0:	10800017 	ldw	r2,0(r2)
  830ce4:	1005003a 	cmpeq	r2,r2,zero
  830ce8:	1000071e 	bne	r2,zero,830d08 <sosetopt+0x3dc>
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
  830cec:	e0bff817 	ldw	r2,-32(fp)
  830cf0:	10800b0b 	ldhu	r2,44(r2)
  830cf4:	10800114 	ori	r2,r2,4
  830cf8:	1007883a 	mov	r3,r2
  830cfc:	e0bff817 	ldw	r2,-32(fp)
  830d00:	10c00b0d 	sth	r3,44(r2)
  830d04:	00003306 	br	830dd4 <sosetopt+0x4a8>
      else
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */
  830d08:	e0bff817 	ldw	r2,-32(fp)
  830d0c:	10c00b0b 	ldhu	r3,44(r2)
  830d10:	00bffec4 	movi	r2,-5
  830d14:	1884703a 	and	r2,r3,r2
  830d18:	1007883a 	mov	r3,r2
  830d1c:	e0bff817 	ldw	r2,-32(fp)
  830d20:	10c00b0d 	sth	r3,44(r2)

      break;
  830d24:	00002b06 	br	830dd4 <sosetopt+0x4a8>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
  830d28:	e0bffb17 	ldw	r2,-20(fp)
  830d2c:	10800983 	ldbu	r2,38(r2)
  830d30:	10803fcc 	andi	r2,r2,255
  830d34:	1080201c 	xori	r2,r2,128
  830d38:	10bfe004 	addi	r2,r2,-128
  830d3c:	10800060 	cmpeqi	r2,r2,1
  830d40:	1000031e 	bne	r2,zero,830d50 <sosetopt+0x424>
      {
         error = EINVAL;
  830d44:	00800584 	movi	r2,22
  830d48:	e0bffa15 	stw	r2,-24(fp)
         break;
  830d4c:	00002106 	br	830dd4 <sosetopt+0x4a8>
      }
      inp = (struct inpcb *)(so->so_pcb);
  830d50:	e0bffb17 	ldw	r2,-20(fp)
  830d54:	10800117 	ldw	r2,4(r2)
  830d58:	e0bff715 	stw	r2,-36(fp)
      tp = intotcpcb(inp);
  830d5c:	e0bff717 	ldw	r2,-36(fp)
  830d60:	10800917 	ldw	r2,36(r2)
  830d64:	e0bff615 	stw	r2,-40(fp)
      if(!tp)
  830d68:	e0bff617 	ldw	r2,-40(fp)
  830d6c:	1004c03a 	cmpne	r2,r2,zero
  830d70:	1000031e 	bne	r2,zero,830d80 <sosetopt+0x454>
      {
         error = ENOTCONN;
  830d74:	00802004 	movi	r2,128
  830d78:	e0bffa15 	stw	r2,-24(fp)
         break;
  830d7c:	00001506 	br	830dd4 <sosetopt+0x4a8>
      }
      if (tp->t_state != TCPS_CLOSED)
  830d80:	e0bff617 	ldw	r2,-40(fp)
  830d84:	10800217 	ldw	r2,8(r2)
  830d88:	1005003a 	cmpeq	r2,r2,zero
  830d8c:	1000031e 	bne	r2,zero,830d9c <sosetopt+0x470>
      {
         error = EINVAL;
  830d90:	00800584 	movi	r2,22
  830d94:	e0bffa15 	stw	r2,-24(fp)
         break;
  830d98:	00000e06 	br	830dd4 <sosetopt+0x4a8>
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
  830d9c:	e0bffd17 	ldw	r2,-12(fp)
  830da0:	10800017 	ldw	r2,0(r2)
  830da4:	1007883a 	mov	r3,r2
  830da8:	e0bff617 	ldw	r2,-40(fp)
  830dac:	10c00a0d 	sth	r3,40(r2)
      tp->t_flags |= TF_MAXSEG;   /* mark as user set max seg */
  830db0:	e0bff617 	ldw	r2,-40(fp)
  830db4:	10800b0b 	ldhu	r2,44(r2)
  830db8:	10810014 	ori	r2,r2,1024
  830dbc:	1007883a 	mov	r3,r2
  830dc0:	e0bff617 	ldw	r2,-40(fp)
  830dc4:	10c00b0d 	sth	r3,44(r2)
      break;
  830dc8:	00000206 	br	830dd4 <sosetopt+0x4a8>
   }
   default:
      error = ENOPROTOOPT;
  830dcc:	00801b44 	movi	r2,109
  830dd0:	e0bffa15 	stw	r2,-24(fp)
      break;
   }
bad:
   return (error);
  830dd4:	e0bffa17 	ldw	r2,-24(fp)
}
  830dd8:	e037883a 	mov	sp,fp
  830ddc:	dfc00117 	ldw	ra,4(sp)
  830de0:	df000017 	ldw	fp,0(sp)
  830de4:	dec00204 	addi	sp,sp,8
  830de8:	f800283a 	ret

00830dec <sogetopt>:

int
sogetopt(struct socket * so, 
   int   optname,
   void *   val)
{
  830dec:	defff304 	addi	sp,sp,-52
  830df0:	dfc00c15 	stw	ra,48(sp)
  830df4:	df000b15 	stw	fp,44(sp)
  830df8:	df000b04 	addi	fp,sp,44
  830dfc:	e13ffb15 	stw	r4,-20(fp)
  830e00:	e17ffc15 	stw	r5,-16(fp)
  830e04:	e1bffd15 	stw	r6,-12(fp)
   int   error =  0;
  830e08:	e03ffa15 	stw	zero,-24(fp)

   /* sanity check the val parameter */
   if (!val)
  830e0c:	e0bffd17 	ldw	r2,-12(fp)
  830e10:	1004c03a 	cmpne	r2,r2,zero
  830e14:	1000031e 	bne	r2,zero,830e24 <sogetopt+0x38>
   {
      return ENP_PARAM;
  830e18:	00bffd84 	movi	r2,-10
  830e1c:	e0bffe15 	stw	r2,-8(fp)
  830e20:	00013c06 	br	831314 <sogetopt+0x528>
   }

   switch (optname) 
  830e24:	e0fffc17 	ldw	r3,-16(fp)
  830e28:	e0ffff15 	stw	r3,-4(fp)
  830e2c:	e0ffff17 	ldw	r3,-4(fp)
  830e30:	188400e0 	cmpeqi	r2,r3,4099
  830e34:	10008f1e 	bne	r2,zero,831074 <sogetopt+0x288>
  830e38:	e0ffff17 	ldw	r3,-4(fp)
  830e3c:	18840108 	cmpgei	r2,r3,4100
  830e40:	10002e1e 	bne	r2,zero,830efc <sogetopt+0x110>
  830e44:	e0ffff17 	ldw	r3,-4(fp)
  830e48:	18800420 	cmpeqi	r2,r3,16
  830e4c:	1000821e 	bne	r2,zero,831058 <sogetopt+0x26c>
  830e50:	e0ffff17 	ldw	r3,-4(fp)
  830e54:	18800448 	cmpgei	r2,r3,17
  830e58:	1000111e 	bne	r2,zero,830ea0 <sogetopt+0xb4>
  830e5c:	e0ffff17 	ldw	r3,-4(fp)
  830e60:	18800220 	cmpeqi	r2,r3,8
  830e64:	10007c1e 	bne	r2,zero,831058 <sogetopt+0x26c>
  830e68:	e0ffff17 	ldw	r3,-4(fp)
  830e6c:	18800248 	cmpgei	r2,r3,9
  830e70:	1000071e 	bne	r2,zero,830e90 <sogetopt+0xa4>
  830e74:	e0ffff17 	ldw	r3,-4(fp)
  830e78:	188000a0 	cmpeqi	r2,r3,2
  830e7c:	1000eb1e 	bne	r2,zero,83122c <sogetopt+0x440>
  830e80:	e0ffff17 	ldw	r3,-4(fp)
  830e84:	18800120 	cmpeqi	r2,r3,4
  830e88:	1000731e 	bne	r2,zero,831058 <sogetopt+0x26c>
  830e8c:	00011c06 	br	831300 <sogetopt+0x514>
  830e90:	e0ffff17 	ldw	r3,-4(fp)
  830e94:	18800308 	cmpgei	r2,r3,12
  830e98:	1001191e 	bne	r2,zero,831300 <sogetopt+0x514>
  830e9c:	0000dd06 	br	831214 <sogetopt+0x428>
  830ea0:	e0ffff17 	ldw	r3,-4(fp)
  830ea4:	18804020 	cmpeqi	r2,r3,256
  830ea8:	10006b1e 	bne	r2,zero,831058 <sogetopt+0x26c>
  830eac:	e0ffff17 	ldw	r3,-4(fp)
  830eb0:	18804048 	cmpgei	r2,r3,257
  830eb4:	1000071e 	bne	r2,zero,830ed4 <sogetopt+0xe8>
  830eb8:	e0ffff17 	ldw	r3,-4(fp)
  830ebc:	18800820 	cmpeqi	r2,r3,32
  830ec0:	1000651e 	bne	r2,zero,831058 <sogetopt+0x26c>
  830ec4:	e0ffff17 	ldw	r3,-4(fp)
  830ec8:	18802020 	cmpeqi	r2,r3,128
  830ecc:	1000531e 	bne	r2,zero,83101c <sogetopt+0x230>
  830ed0:	00010b06 	br	831300 <sogetopt+0x514>
  830ed4:	e0ffff17 	ldw	r3,-4(fp)
  830ed8:	18840060 	cmpeqi	r2,r3,4097
  830edc:	10006f1e 	bne	r2,zero,83109c <sogetopt+0x2b0>
  830ee0:	e0ffff17 	ldw	r3,-4(fp)
  830ee4:	18840088 	cmpgei	r2,r3,4098
  830ee8:	1000711e 	bne	r2,zero,8310b0 <sogetopt+0x2c4>
  830eec:	e0ffff17 	ldw	r3,-4(fp)
  830ef0:	18808020 	cmpeqi	r2,r3,512
  830ef4:	1000581e 	bne	r2,zero,831058 <sogetopt+0x26c>
  830ef8:	00010106 	br	831300 <sogetopt+0x514>
  830efc:	e0ffff17 	ldw	r3,-4(fp)
  830f00:	18840420 	cmpeqi	r2,r3,4112
  830f04:	1000881e 	bne	r2,zero,831128 <sogetopt+0x33c>
  830f08:	e0ffff17 	ldw	r3,-4(fp)
  830f0c:	18840448 	cmpgei	r2,r3,4113
  830f10:	1000171e 	bne	r2,zero,830f70 <sogetopt+0x184>
  830f14:	e0ffff17 	ldw	r3,-4(fp)
  830f18:	188401a0 	cmpeqi	r2,r3,4102
  830f1c:	1000a31e 	bne	r2,zero,8311ac <sogetopt+0x3c0>
  830f20:	e0ffff17 	ldw	r3,-4(fp)
  830f24:	188401c8 	cmpgei	r2,r3,4103
  830f28:	1000071e 	bne	r2,zero,830f48 <sogetopt+0x15c>
  830f2c:	e0ffff17 	ldw	r3,-4(fp)
  830f30:	18840120 	cmpeqi	r2,r3,4100
  830f34:	1000541e 	bne	r2,zero,831088 <sogetopt+0x29c>
  830f38:	e0ffff17 	ldw	r3,-4(fp)
  830f3c:	18840160 	cmpeqi	r2,r3,4101
  830f40:	1000951e 	bne	r2,zero,831198 <sogetopt+0x3ac>
  830f44:	0000ee06 	br	831300 <sogetopt+0x514>
  830f48:	e0ffff17 	ldw	r3,-4(fp)
  830f4c:	18840220 	cmpeqi	r2,r3,4104
  830f50:	1000661e 	bne	r2,zero,8310ec <sogetopt+0x300>
  830f54:	e0ffff17 	ldw	r3,-4(fp)
  830f58:	18840210 	cmplti	r2,r3,4104
  830f5c:	10006b1e 	bne	r2,zero,83110c <sogetopt+0x320>
  830f60:	e0ffff17 	ldw	r3,-4(fp)
  830f64:	18840260 	cmpeqi	r2,r3,4105
  830f68:	1000951e 	bne	r2,zero,8311c0 <sogetopt+0x3d4>
  830f6c:	0000e406 	br	831300 <sogetopt+0x514>
  830f70:	e0ffff17 	ldw	r3,-4(fp)
  830f74:	188404e0 	cmpeqi	r2,r3,4115
  830f78:	1000141e 	bne	r2,zero,830fcc <sogetopt+0x1e0>
  830f7c:	e0ffff17 	ldw	r3,-4(fp)
  830f80:	18840508 	cmpgei	r2,r3,4116
  830f84:	1000071e 	bne	r2,zero,830fa4 <sogetopt+0x1b8>
  830f88:	e0ffff17 	ldw	r3,-4(fp)
  830f8c:	18840460 	cmpeqi	r2,r3,4113
  830f90:	10004c1e 	bne	r2,zero,8310c4 <sogetopt+0x2d8>
  830f94:	e0ffff17 	ldw	r3,-4(fp)
  830f98:	188404a0 	cmpeqi	r2,r3,4114
  830f9c:	10004e1e 	bne	r2,zero,8310d8 <sogetopt+0x2ec>
  830fa0:	0000d706 	br	831300 <sogetopt+0x514>
  830fa4:	e0ffff17 	ldw	r3,-4(fp)
  830fa8:	188800e0 	cmpeqi	r2,r3,8195
  830fac:	10005e1e 	bne	r2,zero,831128 <sogetopt+0x33c>
  830fb0:	e0ffff17 	ldw	r3,-4(fp)
  830fb4:	18880120 	cmpeqi	r2,r3,8196
  830fb8:	1000a81e 	bne	r2,zero,83125c <sogetopt+0x470>
  830fbc:	e0ffff17 	ldw	r3,-4(fp)
  830fc0:	188405a0 	cmpeqi	r2,r3,4118
  830fc4:	1000861e 	bne	r2,zero,8311e0 <sogetopt+0x3f4>
  830fc8:	0000cd06 	br	831300 <sogetopt+0x514>
   {
   case SO_MYADDR:
      /* Get my IP address. */
      if (so->so_state & SS_ISCONNECTED)
  830fcc:	e0bffb17 	ldw	r2,-20(fp)
  830fd0:	1080088b 	ldhu	r2,34(r2)
  830fd4:	10bfffcc 	andi	r2,r2,65535
  830fd8:	1080008c 	andi	r2,r2,2
  830fdc:	1005003a 	cmpeq	r2,r2,zero
  830fe0:	1000071e 	bne	r2,zero,831000 <sogetopt+0x214>
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
  830fe4:	e0fffd17 	ldw	r3,-12(fp)
  830fe8:	e0bffb17 	ldw	r2,-20(fp)
  830fec:	10800117 	ldw	r2,4(r2)
  830ff0:	10800a17 	ldw	r2,40(r2)
  830ff4:	10800a17 	ldw	r2,40(r2)
  830ff8:	18800015 	stw	r2,0(r3)
  830ffc:	0000c306 	br	83130c <sogetopt+0x520>
      }
      else  /* not connected, use first iface */
         *(u_long *)val = nets[0]->n_ipaddr;
  831000:	e0fffd17 	ldw	r3,-12(fp)
  831004:	00803934 	movhi	r2,228
  831008:	10a79c04 	addi	r2,r2,-24976
  83100c:	10800017 	ldw	r2,0(r2)
  831010:	10800a17 	ldw	r2,40(r2)
  831014:	18800015 	stw	r2,0(r3)
      break;
  831018:	0000bc06 	br	83130c <sogetopt+0x520>
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
  83101c:	e0bffd17 	ldw	r2,-12(fp)
  831020:	e0bff915 	stw	r2,-28(fp)
         l->l_onoff = so->so_options & SO_LINGER;
  831024:	e0bffb17 	ldw	r2,-20(fp)
  831028:	10800417 	ldw	r2,16(r2)
  83102c:	10c0200c 	andi	r3,r2,128
  831030:	e0bff917 	ldw	r2,-28(fp)
  831034:	10c00015 	stw	r3,0(r2)
         l->l_linger = so->so_linger;
  831038:	e0bffb17 	ldw	r2,-20(fp)
  83103c:	1080080b 	ldhu	r2,32(r2)
  831040:	10ffffcc 	andi	r3,r2,65535
  831044:	18e0001c 	xori	r3,r3,32768
  831048:	18e00004 	addi	r3,r3,-32768
  83104c:	e0bff917 	ldw	r2,-28(fp)
  831050:	10c00115 	stw	r3,4(r2)
      }
      break;
  831054:	0000ad06 	br	83130c <sogetopt+0x520>
   case SO_OOBINLINE:
   case SO_DONTROUTE:
   case SO_REUSEADDR:
   case SO_BROADCAST:
   case SO_TCPSACK:
      *(int *)val = so->so_options & optname;
  831058:	e13ffd17 	ldw	r4,-12(fp)
  83105c:	e0bffb17 	ldw	r2,-20(fp)
  831060:	10c00417 	ldw	r3,16(r2)
  831064:	e0bffc17 	ldw	r2,-16(fp)
  831068:	1884703a 	and	r2,r3,r2
  83106c:	20800015 	stw	r2,0(r4)
      break;
  831070:	0000a606 	br	83130c <sogetopt+0x520>

   case SO_SNDLOWAT:
      *(int *)val = (int)so->so_snd.sb_lowat;
  831074:	e0fffd17 	ldw	r3,-12(fp)
  831078:	e0bffb17 	ldw	r2,-20(fp)
  83107c:	10801617 	ldw	r2,88(r2)
  831080:	18800015 	stw	r2,0(r3)
      break;
  831084:	0000a106 	br	83130c <sogetopt+0x520>

   case SO_RCVLOWAT:
      *(int *)val = (int)so->so_rcv.sb_lowat;
  831088:	e0fffd17 	ldw	r3,-12(fp)
  83108c:	e0bffb17 	ldw	r2,-20(fp)
  831090:	10800e17 	ldw	r2,56(r2)
  831094:	18800015 	stw	r2,0(r3)
      break;
  831098:	00009c06 	br	83130c <sogetopt+0x520>

   case SO_SNDBUF:
      *(int *)val = (int)so->so_snd.sb_hiwat;
  83109c:	e0fffd17 	ldw	r3,-12(fp)
  8310a0:	e0bffb17 	ldw	r2,-20(fp)
  8310a4:	10801317 	ldw	r2,76(r2)
  8310a8:	18800015 	stw	r2,0(r3)
      break;
  8310ac:	00009706 	br	83130c <sogetopt+0x520>

   case SO_RCVBUF:
      *(int *)val = (int)so->so_rcv.sb_hiwat;
  8310b0:	e0fffd17 	ldw	r3,-12(fp)
  8310b4:	e0bffb17 	ldw	r2,-20(fp)
  8310b8:	10800b17 	ldw	r2,44(r2)
  8310bc:	18800015 	stw	r2,0(r3)
      break;
  8310c0:	00009206 	br	83130c <sogetopt+0x520>

   case SO_RXDATA:   /* added, JB */
      *(int *)val = (int)so->so_rcv.sb_cc;
  8310c4:	e0fffd17 	ldw	r3,-12(fp)
  8310c8:	e0bffb17 	ldw	r2,-20(fp)
  8310cc:	10800a17 	ldw	r2,40(r2)
  8310d0:	18800015 	stw	r2,0(r3)
      break;
  8310d4:	00008d06 	br	83130c <sogetopt+0x520>

   case SO_TXDATA:   /* added for rel 1.8 */
      *(int *)val = (int)so->so_snd.sb_cc;
  8310d8:	e0fffd17 	ldw	r3,-12(fp)
  8310dc:	e0bffb17 	ldw	r2,-20(fp)
  8310e0:	10801217 	ldw	r2,72(r2)
  8310e4:	18800015 	stw	r2,0(r3)
      break;
  8310e8:	00008806 	br	83130c <sogetopt+0x520>

   case SO_TYPE:
      *(int *)val = so->so_type;
  8310ec:	e0fffd17 	ldw	r3,-12(fp)
  8310f0:	e0bffb17 	ldw	r2,-20(fp)
  8310f4:	10800983 	ldbu	r2,38(r2)
  8310f8:	10803fcc 	andi	r2,r2,255
  8310fc:	1080201c 	xori	r2,r2,128
  831100:	10bfe004 	addi	r2,r2,-128
  831104:	18800015 	stw	r2,0(r3)
      break;
  831108:	00008006 	br	83130c <sogetopt+0x520>

   case SO_ERROR:
      *(int *)val = so->so_error;
  83110c:	e0fffd17 	ldw	r3,-12(fp)
  831110:	e0bffb17 	ldw	r2,-20(fp)
  831114:	10800617 	ldw	r2,24(r2)
  831118:	18800015 	stw	r2,0(r3)
      so->so_error = 0;
  83111c:	e0bffb17 	ldw	r2,-20(fp)
  831120:	10000615 	stw	zero,24(r2)
      break;
  831124:	00007906 	br	83130c <sogetopt+0x520>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
  831128:	e0bffb17 	ldw	r2,-20(fp)
  83112c:	10800983 	ldbu	r2,38(r2)
  831130:	10803fcc 	andi	r2,r2,255
  831134:	1080201c 	xori	r2,r2,128
  831138:	10bfe004 	addi	r2,r2,-128
  83113c:	10800060 	cmpeqi	r2,r2,1
  831140:	1000031e 	bne	r2,zero,831150 <sogetopt+0x364>
      {
         error = EINVAL;
  831144:	00800584 	movi	r2,22
  831148:	e0bffa15 	stw	r2,-24(fp)
         break;
  83114c:	00006f06 	br	83130c <sogetopt+0x520>
      }
      inp = (struct inpcb *)(so->so_pcb);
  831150:	e0bffb17 	ldw	r2,-20(fp)
  831154:	10800117 	ldw	r2,4(r2)
  831158:	e0bff815 	stw	r2,-32(fp)
      tp = intotcpcb(inp);
  83115c:	e0bff817 	ldw	r2,-32(fp)
  831160:	10800917 	ldw	r2,36(r2)
  831164:	e0bff715 	stw	r2,-36(fp)
      if(!tp)
  831168:	e0bff717 	ldw	r2,-36(fp)
  83116c:	1004c03a 	cmpne	r2,r2,zero
  831170:	1000031e 	bne	r2,zero,831180 <sogetopt+0x394>
      {
         error = ENOTCONN;
  831174:	00802004 	movi	r2,128
  831178:	e0bffa15 	stw	r2,-24(fp)
         break;
  83117c:	00006306 	br	83130c <sogetopt+0x520>
      }
      *(int *)val = tp->t_maxseg;     /* Fill in TCP MSS for current socket */
  831180:	e0fffd17 	ldw	r3,-12(fp)
  831184:	e0bff717 	ldw	r2,-36(fp)
  831188:	10800a0b 	ldhu	r2,40(r2)
  83118c:	10bfffcc 	andi	r2,r2,65535
  831190:	18800015 	stw	r2,0(r3)
      break;
  831194:	00005d06 	br	83130c <sogetopt+0x520>
   }
 
   case SO_SNDTIMEO:
      *(short*)val = so->so_snd.sb_timeo;
  831198:	e0bffd17 	ldw	r2,-12(fp)
  83119c:	e0fffb17 	ldw	r3,-20(fp)
  8311a0:	18c0198b 	ldhu	r3,102(r3)
  8311a4:	10c0000d 	sth	r3,0(r2)
      break;
  8311a8:	00005806 	br	83130c <sogetopt+0x520>

   case SO_RCVTIMEO:
      *(short*)val = so->so_rcv.sb_timeo;
  8311ac:	e0bffd17 	ldw	r2,-12(fp)
  8311b0:	e0fffb17 	ldw	r3,-20(fp)
  8311b4:	18c0118b 	ldhu	r3,70(r3)
  8311b8:	10c0000d 	sth	r3,0(r2)
      break;
  8311bc:	00005306 	br	83130c <sogetopt+0x520>

   case SO_HOPCNT:
      *(int *)val = so->so_hopcnt;
  8311c0:	e0fffd17 	ldw	r3,-12(fp)
  8311c4:	e0bffb17 	ldw	r2,-20(fp)
  8311c8:	108009c3 	ldbu	r2,39(r2)
  8311cc:	10803fcc 	andi	r2,r2,255
  8311d0:	1080201c 	xori	r2,r2,128
  8311d4:	10bfe004 	addi	r2,r2,-128
  8311d8:	18800015 	stw	r2,0(r3)
      break;
  8311dc:	00004b06 	br	83130c <sogetopt+0x520>

   case SO_NONBLOCK:    /* get blocking mode according to val */
      /* if the non-blocking I/O bit is set in the state */
      if (so->so_state & SS_NBIO)
  8311e0:	e0bffb17 	ldw	r2,-20(fp)
  8311e4:	1080088b 	ldhu	r2,34(r2)
  8311e8:	10bfffcc 	andi	r2,r2,65535
  8311ec:	1080400c 	andi	r2,r2,256
  8311f0:	1005003a 	cmpeq	r2,r2,zero
  8311f4:	1000041e 	bne	r2,zero,831208 <sogetopt+0x41c>
         *(int *)val = 1;   /* return 1 in val */
  8311f8:	e0fffd17 	ldw	r3,-12(fp)
  8311fc:	00800044 	movi	r2,1
  831200:	18800015 	stw	r2,0(r3)
  831204:	00004106 	br	83130c <sogetopt+0x520>
      else
         *(int *)val = 0;     /* return 0 in val */
  831208:	e0bffd17 	ldw	r2,-12(fp)
  83120c:	10000015 	stw	zero,0(r2)
      break;
  831210:	00003e06 	br	83130c <sogetopt+0x520>
#ifdef IP_MULTICAST

   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      error = ip_getmoptions(optname, so, val);
  831214:	e13ffc17 	ldw	r4,-16(fp)
  831218:	e17ffb17 	ldw	r5,-20(fp)
  83121c:	e1bffd17 	ldw	r6,-12(fp)
  831220:	08451180 	call	845118 <ip_getmoptions>
  831224:	e0bffa15 	stw	r2,-24(fp)
      break;
  831228:	00003806 	br	83130c <sogetopt+0x520>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
  83122c:	e0bffb17 	ldw	r2,-20(fp)
  831230:	10800417 	ldw	r2,16(r2)
  831234:	1088000c 	andi	r2,r2,8192
  831238:	1005003a 	cmpeq	r2,r2,zero
  83123c:	1000041e 	bne	r2,zero,831250 <sogetopt+0x464>
         *(int *)val = 1;
  831240:	e0fffd17 	ldw	r3,-12(fp)
  831244:	00800044 	movi	r2,1
  831248:	18800015 	stw	r2,0(r3)
  83124c:	00002f06 	br	83130c <sogetopt+0x520>
      else
         *(int *)val = 0;
  831250:	e0bffd17 	ldw	r2,-12(fp)
  831254:	10000015 	stw	zero,0(r2)
      break;
  831258:	00002c06 	br	83130c <sogetopt+0x520>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
  83125c:	e0bffb17 	ldw	r2,-20(fp)
  831260:	10800983 	ldbu	r2,38(r2)
  831264:	10803fcc 	andi	r2,r2,255
  831268:	1080201c 	xori	r2,r2,128
  83126c:	10bfe004 	addi	r2,r2,-128
  831270:	10800060 	cmpeqi	r2,r2,1
  831274:	1000031e 	bne	r2,zero,831284 <sogetopt+0x498>
      {
         error = EINVAL;
  831278:	00800584 	movi	r2,22
  83127c:	e0bffa15 	stw	r2,-24(fp)
         break;
  831280:	00002206 	br	83130c <sogetopt+0x520>
      }
      inp = (struct inpcb *)(so->so_pcb);
  831284:	e0bffb17 	ldw	r2,-20(fp)
  831288:	10800117 	ldw	r2,4(r2)
  83128c:	e0bff615 	stw	r2,-40(fp)
      tp = intotcpcb(inp);
  831290:	e0bff617 	ldw	r2,-40(fp)
  831294:	10800917 	ldw	r2,36(r2)
  831298:	e0bff515 	stw	r2,-44(fp)
      if (!tp)
  83129c:	e0bff517 	ldw	r2,-44(fp)
  8312a0:	1004c03a 	cmpne	r2,r2,zero
  8312a4:	1000031e 	bne	r2,zero,8312b4 <sogetopt+0x4c8>
      {
         error = ENOTCONN;
  8312a8:	00802004 	movi	r2,128
  8312ac:	e0bffa15 	stw	r2,-24(fp)
         break;
  8312b0:	00001606 	br	83130c <sogetopt+0x520>
      }
      /* try to make sure that the argument pointer is valid */
      if (val == NULL)
  8312b4:	e0bffd17 	ldw	r2,-12(fp)
  8312b8:	1004c03a 	cmpne	r2,r2,zero
  8312bc:	1000031e 	bne	r2,zero,8312cc <sogetopt+0x4e0>
      {
         error = ENP_PARAM;
  8312c0:	00bffd84 	movi	r2,-10
  8312c4:	e0bffa15 	stw	r2,-24(fp)
         break;
  8312c8:	00001006 	br	83130c <sogetopt+0x520>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
  8312cc:	e0bff517 	ldw	r2,-44(fp)
  8312d0:	10800b0b 	ldhu	r2,44(r2)
  8312d4:	10bfffcc 	andi	r2,r2,65535
  8312d8:	1080010c 	andi	r2,r2,4
  8312dc:	1005003a 	cmpeq	r2,r2,zero
  8312e0:	1000041e 	bne	r2,zero,8312f4 <sogetopt+0x508>
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
  8312e4:	e0fffd17 	ldw	r3,-12(fp)
  8312e8:	00800044 	movi	r2,1
  8312ec:	18800015 	stw	r2,0(r3)
  8312f0:	00000606 	br	83130c <sogetopt+0x520>
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */
  8312f4:	e0bffd17 	ldw	r2,-12(fp)
  8312f8:	10000015 	stw	zero,0(r2)

      break;
  8312fc:	00000306 	br	83130c <sogetopt+0x520>
   }

   default:
      return ENOPROTOOPT;
  831300:	00801b44 	movi	r2,109
  831304:	e0bffe15 	stw	r2,-8(fp)
  831308:	00000206 	br	831314 <sogetopt+0x528>
   }
   return error;     /* no error */
  83130c:	e0fffa17 	ldw	r3,-24(fp)
  831310:	e0fffe15 	stw	r3,-8(fp)
  831314:	e0bffe17 	ldw	r2,-8(fp)
}
  831318:	e037883a 	mov	sp,fp
  83131c:	dfc00117 	ldw	ra,4(sp)
  831320:	df000017 	ldw	fp,0(sp)
  831324:	dec00204 	addi	sp,sp,8
  831328:	f800283a 	ret

0083132c <sohasoutofband>:
 * RETURNS: 
 */

void
sohasoutofband(struct socket * so)
{
  83132c:	defffd04 	addi	sp,sp,-12
  831330:	dfc00215 	stw	ra,8(sp)
  831334:	df000115 	stw	fp,4(sp)
  831338:	df000104 	addi	fp,sp,4
  83133c:	e13fff15 	stw	r4,-4(fp)
   so->so_error = EHAVEOOB;   /* WILL be picked up by the socket */
  831340:	e0ffff17 	ldw	r3,-4(fp)
  831344:	00803644 	movi	r2,217
  831348:	18800615 	stw	r2,24(r3)
   sorwakeup (so);
  83134c:	e0bfff17 	ldw	r2,-4(fp)
  831350:	11400a04 	addi	r5,r2,40
  831354:	e13fff17 	ldw	r4,-4(fp)
  831358:	0831b480 	call	831b48 <sbwakeup>
}
  83135c:	e037883a 	mov	sp,fp
  831360:	dfc00117 	ldw	ra,4(sp)
  831364:	df000017 	ldw	fp,0(sp)
  831368:	dec00204 	addi	sp,sp,8
  83136c:	f800283a 	ret

00831370 <soisconnecting>:
 * RETURNS: 
 */

void
soisconnecting(struct socket * so)
{
  831370:	defffd04 	addi	sp,sp,-12
  831374:	dfc00215 	stw	ra,8(sp)
  831378:	df000115 	stw	fp,4(sp)
  83137c:	df000104 	addi	fp,sp,4
  831380:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
  831384:	e0bfff17 	ldw	r2,-4(fp)
  831388:	10c0088b 	ldhu	r3,34(r2)
  83138c:	00bffd44 	movi	r2,-11
  831390:	1884703a 	and	r2,r3,r2
  831394:	1007883a 	mov	r3,r2
  831398:	e0bfff17 	ldw	r2,-4(fp)
  83139c:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTING;
  8313a0:	e0bfff17 	ldw	r2,-4(fp)
  8313a4:	1080088b 	ldhu	r2,34(r2)
  8313a8:	10800114 	ori	r2,r2,4
  8313ac:	1007883a 	mov	r3,r2
  8313b0:	e0bfff17 	ldw	r2,-4(fp)
  8313b4:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
  8313b8:	e0bfff17 	ldw	r2,-4(fp)
  8313bc:	10800904 	addi	r2,r2,36
  8313c0:	1009883a 	mov	r4,r2
  8313c4:	082653c0 	call	82653c <tcp_wakeup>
}
  8313c8:	e037883a 	mov	sp,fp
  8313cc:	dfc00117 	ldw	ra,4(sp)
  8313d0:	df000017 	ldw	fp,0(sp)
  8313d4:	dec00204 	addi	sp,sp,8
  8313d8:	f800283a 	ret

008313dc <soisconnected>:
 * RETURNS: 
 */

void
soisconnected(struct socket * so)
{
  8313dc:	defffc04 	addi	sp,sp,-16
  8313e0:	dfc00315 	stw	ra,12(sp)
  8313e4:	df000215 	stw	fp,8(sp)
  8313e8:	df000204 	addi	fp,sp,8
  8313ec:	e13fff15 	stw	r4,-4(fp)
   struct socket *   head  =  so->so_head;
  8313f0:	e0bfff17 	ldw	r2,-4(fp)
  8313f4:	10801b17 	ldw	r2,108(r2)
  8313f8:	e0bffe15 	stw	r2,-8(fp)

   if (head) 
  8313fc:	e0bffe17 	ldw	r2,-8(fp)
  831400:	1005003a 	cmpeq	r2,r2,zero
  831404:	1000141e 	bne	r2,zero,831458 <soisconnected+0x7c>
   {
      if (soqremque(so, 0) == 0)
  831408:	e13fff17 	ldw	r4,-4(fp)
  83140c:	000b883a 	mov	r5,zero
  831410:	08318e80 	call	8318e8 <soqremque>
  831414:	1004c03a 	cmpne	r2,r2,zero
  831418:	1000031e 	bne	r2,zero,831428 <soisconnected+0x4c>
         panic("soisconnected");
  83141c:	01002174 	movhi	r4,133
  831420:	2136ed04 	addi	r4,r4,-9292
  831424:	0825a2c0 	call	825a2c <panic>
      soqinsque(head, so, 1);
  831428:	e13ffe17 	ldw	r4,-8(fp)
  83142c:	e17fff17 	ldw	r5,-4(fp)
  831430:	01800044 	movi	r6,1
  831434:	083183c0 	call	83183c <soqinsque>
      sorwakeup(head);
  831438:	e0bffe17 	ldw	r2,-8(fp)
  83143c:	11400a04 	addi	r5,r2,40
  831440:	e13ffe17 	ldw	r4,-8(fp)
  831444:	0831b480 	call	831b48 <sbwakeup>
      tcp_wakeup ((char *)&head->so_timeo);
  831448:	e0bffe17 	ldw	r2,-8(fp)
  83144c:	10800904 	addi	r2,r2,36
  831450:	1009883a 	mov	r4,r2
  831454:	082653c0 	call	82653c <tcp_wakeup>
   }

   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
  831458:	e0bfff17 	ldw	r2,-4(fp)
  83145c:	10c0088b 	ldhu	r3,34(r2)
  831460:	00bffcc4 	movi	r2,-13
  831464:	1884703a 	and	r2,r3,r2
  831468:	1007883a 	mov	r3,r2
  83146c:	e0bfff17 	ldw	r2,-4(fp)
  831470:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTED;
  831474:	e0bfff17 	ldw	r2,-4(fp)
  831478:	1080088b 	ldhu	r2,34(r2)
  83147c:	10800094 	ori	r2,r2,2
  831480:	1007883a 	mov	r3,r2
  831484:	e0bfff17 	ldw	r2,-4(fp)
  831488:	10c0088d 	sth	r3,34(r2)
   so->so_error = 0;
  83148c:	e0bfff17 	ldw	r2,-4(fp)
  831490:	10000615 	stw	zero,24(r2)
   tcp_wakeup  ((char *)&so->so_timeo);
  831494:	e0bfff17 	ldw	r2,-4(fp)
  831498:	10800904 	addi	r2,r2,36
  83149c:	1009883a 	mov	r4,r2
  8314a0:	082653c0 	call	82653c <tcp_wakeup>
   sorwakeup (so);
  8314a4:	e0bfff17 	ldw	r2,-4(fp)
  8314a8:	11400a04 	addi	r5,r2,40
  8314ac:	e13fff17 	ldw	r4,-4(fp)
  8314b0:	0831b480 	call	831b48 <sbwakeup>
   sowwakeup (so);
  8314b4:	e0bfff17 	ldw	r2,-4(fp)
  8314b8:	11401204 	addi	r5,r2,72
  8314bc:	e13fff17 	ldw	r4,-4(fp)
  8314c0:	0831b480 	call	831b48 <sbwakeup>
}
  8314c4:	e037883a 	mov	sp,fp
  8314c8:	dfc00117 	ldw	ra,4(sp)
  8314cc:	df000017 	ldw	fp,0(sp)
  8314d0:	dec00204 	addi	sp,sp,8
  8314d4:	f800283a 	ret

008314d8 <soisdisconnecting>:
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
  8314d8:	defffd04 	addi	sp,sp,-12
  8314dc:	dfc00215 	stw	ra,8(sp)
  8314e0:	df000115 	stw	fp,4(sp)
  8314e4:	df000104 	addi	fp,sp,4
  8314e8:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~SS_ISCONNECTING;
  8314ec:	e0bfff17 	ldw	r2,-4(fp)
  8314f0:	10c0088b 	ldhu	r3,34(r2)
  8314f4:	00bffec4 	movi	r2,-5
  8314f8:	1884703a 	and	r2,r3,r2
  8314fc:	1007883a 	mov	r3,r2
  831500:	e0bfff17 	ldw	r2,-4(fp)
  831504:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
  831508:	e0bfff17 	ldw	r2,-4(fp)
  83150c:	1080088b 	ldhu	r2,34(r2)
  831510:	10800e14 	ori	r2,r2,56
  831514:	1007883a 	mov	r3,r2
  831518:	e0bfff17 	ldw	r2,-4(fp)
  83151c:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup  ((char *)&so->so_timeo);   
  831520:	e0bfff17 	ldw	r2,-4(fp)
  831524:	10800904 	addi	r2,r2,36
  831528:	1009883a 	mov	r4,r2
  83152c:	082653c0 	call	82653c <tcp_wakeup>
   sowwakeup (so);
  831530:	e0bfff17 	ldw	r2,-4(fp)
  831534:	11401204 	addi	r5,r2,72
  831538:	e13fff17 	ldw	r4,-4(fp)
  83153c:	0831b480 	call	831b48 <sbwakeup>
   sorwakeup (so);
  831540:	e0bfff17 	ldw	r2,-4(fp)
  831544:	11400a04 	addi	r5,r2,40
  831548:	e13fff17 	ldw	r4,-4(fp)
  83154c:	0831b480 	call	831b48 <sbwakeup>
}
  831550:	e037883a 	mov	sp,fp
  831554:	dfc00117 	ldw	ra,4(sp)
  831558:	df000017 	ldw	fp,0(sp)
  83155c:	dec00204 	addi	sp,sp,8
  831560:	f800283a 	ret

00831564 <soisdisconnected>:
 * RETURNS: 
 */

void
soisdisconnected(struct socket * so)
{
  831564:	defffd04 	addi	sp,sp,-12
  831568:	dfc00215 	stw	ra,8(sp)
  83156c:	df000115 	stw	fp,4(sp)
  831570:	df000104 	addi	fp,sp,4
  831574:	e13fff15 	stw	r4,-4(fp)
   if (so->so_state & SS_ISCONNECTING)
  831578:	e0bfff17 	ldw	r2,-4(fp)
  83157c:	1080088b 	ldhu	r2,34(r2)
  831580:	10bfffcc 	andi	r2,r2,65535
  831584:	1080010c 	andi	r2,r2,4
  831588:	1005003a 	cmpeq	r2,r2,zero
  83158c:	1000061e 	bne	r2,zero,8315a8 <soisdisconnected+0x44>
      so->so_state |= SS_WASCONNECTING;
  831590:	e0bfff17 	ldw	r2,-4(fp)
  831594:	1080088b 	ldhu	r2,34(r2)
  831598:	10880014 	ori	r2,r2,8192
  83159c:	1007883a 	mov	r3,r2
  8315a0:	e0bfff17 	ldw	r2,-4(fp)
  8315a4:	10c0088d 	sth	r3,34(r2)
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
  8315a8:	e0bfff17 	ldw	r2,-4(fp)
  8315ac:	10c0088b 	ldhu	r3,34(r2)
  8315b0:	00bffc44 	movi	r2,-15
  8315b4:	1884703a 	and	r2,r3,r2
  8315b8:	1007883a 	mov	r3,r2
  8315bc:	e0bfff17 	ldw	r2,-4(fp)
  8315c0:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
  8315c4:	e0bfff17 	ldw	r2,-4(fp)
  8315c8:	1080088b 	ldhu	r2,34(r2)
  8315cc:	10800c14 	ori	r2,r2,48
  8315d0:	1007883a 	mov	r3,r2
  8315d4:	e0bfff17 	ldw	r2,-4(fp)
  8315d8:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
  8315dc:	e0bfff17 	ldw	r2,-4(fp)
  8315e0:	10800904 	addi	r2,r2,36
  8315e4:	1009883a 	mov	r4,r2
  8315e8:	082653c0 	call	82653c <tcp_wakeup>
   sowwakeup (so);
  8315ec:	e0bfff17 	ldw	r2,-4(fp)
  8315f0:	11401204 	addi	r5,r2,72
  8315f4:	e13fff17 	ldw	r4,-4(fp)
  8315f8:	0831b480 	call	831b48 <sbwakeup>
   sorwakeup (so);
  8315fc:	e0bfff17 	ldw	r2,-4(fp)
  831600:	11400a04 	addi	r5,r2,40
  831604:	e13fff17 	ldw	r4,-4(fp)
  831608:	0831b480 	call	831b48 <sbwakeup>
}
  83160c:	e037883a 	mov	sp,fp
  831610:	dfc00117 	ldw	ra,4(sp)
  831614:	df000017 	ldw	fp,0(sp)
  831618:	dec00204 	addi	sp,sp,8
  83161c:	f800283a 	ret

00831620 <sonewconn>:
 * RETURNS: 
 */

struct socket *   
sonewconn(struct socket * head)
{
  831620:	defffa04 	addi	sp,sp,-24
  831624:	dfc00515 	stw	ra,20(sp)
  831628:	df000415 	stw	fp,16(sp)
  83162c:	df000404 	addi	fp,sp,16
  831630:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
  831634:	e0bffe17 	ldw	r2,-8(fp)
  831638:	10801e43 	ldbu	r2,121(r2)
  83163c:	10c03fcc 	andi	r3,r2,255
  831640:	18c0201c 	xori	r3,r3,128
  831644:	18ffe004 	addi	r3,r3,-128
  831648:	e0bffe17 	ldw	r2,-8(fp)
  83164c:	10801e03 	ldbu	r2,120(r2)
  831650:	10803fcc 	andi	r2,r2,255
  831654:	1080201c 	xori	r2,r2,128
  831658:	10bfe004 	addi	r2,r2,-128
  83165c:	1889883a 	add	r4,r3,r2
  831660:	e0bffe17 	ldw	r2,-8(fp)
  831664:	10801e83 	ldbu	r2,122(r2)
  831668:	10c03fcc 	andi	r3,r2,255
  83166c:	18c0201c 	xori	r3,r3,128
  831670:	18ffe004 	addi	r3,r3,-128
  831674:	1805883a 	mov	r2,r3
  831678:	1085883a 	add	r2,r2,r2
  83167c:	10c7883a 	add	r3,r2,r3
  831680:	1804d7fa 	srli	r2,r3,31
  831684:	10c5883a 	add	r2,r2,r3
  831688:	1005d07a 	srai	r2,r2,1
  83168c:	11006416 	blt	r2,r4,831820 <sonewconn+0x200>
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
  831690:	01002104 	movi	r4,132
  831694:	082b20c0 	call	82b20c <npalloc>
  831698:	e0bffd15 	stw	r2,-12(fp)
  83169c:	e0bffd17 	ldw	r2,-12(fp)
  8316a0:	1005003a 	cmpeq	r2,r2,zero
  8316a4:	10005e1e 	bne	r2,zero,831820 <sonewconn+0x200>
      goto bad;
   so->next = NULL;
  8316a8:	e0bffd17 	ldw	r2,-12(fp)
  8316ac:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
  8316b0:	e17ffd17 	ldw	r5,-12(fp)
  8316b4:	01003934 	movhi	r4,228
  8316b8:	2128d904 	addi	r4,r4,-23708
  8316bc:	082a1580 	call	82a158 <putq>
   so->so_type = head->so_type;
  8316c0:	e0bffe17 	ldw	r2,-8(fp)
  8316c4:	10c00983 	ldbu	r3,38(r2)
  8316c8:	e0bffd17 	ldw	r2,-12(fp)
  8316cc:	10c00985 	stb	r3,38(r2)
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
  8316d0:	e0bffe17 	ldw	r2,-8(fp)
  8316d4:	10c00417 	ldw	r3,16(r2)
  8316d8:	00bfff44 	movi	r2,-3
  8316dc:	1886703a 	and	r3,r3,r2
  8316e0:	e0bffd17 	ldw	r2,-12(fp)
  8316e4:	10c00415 	stw	r3,16(r2)
   so->so_linger = head->so_linger;
  8316e8:	e0bffe17 	ldw	r2,-8(fp)
  8316ec:	10c0080b 	ldhu	r3,32(r2)
  8316f0:	e0bffd17 	ldw	r2,-12(fp)
  8316f4:	10c0080d 	sth	r3,32(r2)
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
  8316f8:	e0bffe17 	ldw	r2,-8(fp)
  8316fc:	1080088b 	ldhu	r2,34(r2)
  831700:	10800054 	ori	r2,r2,1
  831704:	1007883a 	mov	r3,r2
  831708:	e0bffd17 	ldw	r2,-12(fp)
  83170c:	10c0088d 	sth	r3,34(r2)
   so->so_proto = head->so_proto;
  831710:	e0bffe17 	ldw	r2,-8(fp)
  831714:	10c00217 	ldw	r3,8(r2)
  831718:	e0bffd17 	ldw	r2,-12(fp)
  83171c:	10c00215 	stw	r3,8(r2)
   so->so_timeo = head->so_timeo;
  831720:	e0bffe17 	ldw	r2,-8(fp)
  831724:	10c0090b 	ldhu	r3,36(r2)
  831728:	e0bffd17 	ldw	r2,-12(fp)
  83172c:	10c0090d 	sth	r3,36(r2)
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
  831730:	00802174 	movhi	r2,133
  831734:	1082bf04 	addi	r2,r2,2812
  831738:	10c00017 	ldw	r3,0(r2)
  83173c:	e0bffd17 	ldw	r2,-12(fp)
  831740:	10c00b15 	stw	r3,44(r2)
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
  831744:	00802174 	movhi	r2,133
  831748:	1082be04 	addi	r2,r2,2808
  83174c:	10c00017 	ldw	r3,0(r2)
  831750:	e0bffd17 	ldw	r2,-12(fp)
  831754:	10c01315 	stw	r3,76(r2)
   soqinsque (head, so, 0);
  831758:	e13ffe17 	ldw	r4,-8(fp)
  83175c:	e17ffd17 	ldw	r5,-12(fp)
  831760:	000d883a 	mov	r6,zero
  831764:	083183c0 	call	83183c <soqinsque>
   so->so_req = PRU_ATTACH;
  831768:	e0bffd17 	ldw	r2,-12(fp)
  83176c:	10000715 	stw	zero,28(r2)
   so->so_domain = head->so_domain;
  831770:	e0bffe17 	ldw	r2,-8(fp)
  831774:	10c00517 	ldw	r3,20(r2)
  831778:	e0bffd17 	ldw	r2,-12(fp)
  83177c:	10c00515 	stw	r3,20(r2)

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
  831780:	e0bffd17 	ldw	r2,-12(fp)
  831784:	10800217 	ldw	r2,8(r2)
  831788:	10800317 	ldw	r2,12(r2)
  83178c:	e13ffd17 	ldw	r4,-12(fp)
  831790:	000b883a 	mov	r5,zero
  831794:	000d883a 	mov	r6,zero
  831798:	103ee83a 	callr	r2
  83179c:	1004c03a 	cmpne	r2,r2,zero
  8317a0:	1000161e 	bne	r2,zero,8317fc <sonewconn+0x1dc>
      goto bad2;
   if (so_evtmap)
  8317a4:	00802174 	movhi	r2,133
  8317a8:	10834904 	addi	r2,r2,3364
  8317ac:	10800003 	ldbu	r2,0(r2)
  8317b0:	10803fcc 	andi	r2,r2,255
  8317b4:	1005003a 	cmpeq	r2,r2,zero
  8317b8:	10000d1e 	bne	r2,zero,8317f0 <sonewconn+0x1d0>
   {
      rc = (*so_evtmap_create) (so);                       
  8317bc:	00802174 	movhi	r2,133
  8317c0:	10834704 	addi	r2,r2,3356
  8317c4:	10800017 	ldw	r2,0(r2)
  8317c8:	e13ffd17 	ldw	r4,-12(fp)
  8317cc:	103ee83a 	callr	r2
  8317d0:	e0bffc15 	stw	r2,-16(fp)
      if (rc != 0) goto bad2;
  8317d4:	e0bffc17 	ldw	r2,-16(fp)
  8317d8:	1004c03a 	cmpne	r2,r2,zero
  8317dc:	1000071e 	bne	r2,zero,8317fc <sonewconn+0x1dc>
      so->owner = head->owner;
  8317e0:	e0bffe17 	ldw	r2,-8(fp)
  8317e4:	10c02003 	ldbu	r3,128(r2)
  8317e8:	e0bffd17 	ldw	r2,-12(fp)
  8317ec:	10c02005 	stb	r3,128(r2)
   }
   return (so);
  8317f0:	e0bffd17 	ldw	r2,-12(fp)
  8317f4:	e0bfff15 	stw	r2,-4(fp)
  8317f8:	00000a06 	br	831824 <sonewconn+0x204>
   
bad2:
   (void) soqremque (so, 0);
  8317fc:	e13ffd17 	ldw	r4,-12(fp)
  831800:	000b883a 	mov	r5,zero
  831804:	08318e80 	call	8318e8 <soqremque>
   qdel(&soq, so);   /* Delete the socket entry from the queue */
  831808:	01003934 	movhi	r4,228
  83180c:	2128d904 	addi	r4,r4,-23708
  831810:	e17ffd17 	ldw	r5,-12(fp)
  831814:	082a2080 	call	82a208 <qdel>
   SOC_FREE(so);  /* Free the socket structure */
  831818:	e13ffd17 	ldw	r4,-12(fp)
  83181c:	082b3000 	call	82b300 <npfree>
bad:
   return ((struct socket *)0);
  831820:	e03fff15 	stw	zero,-4(fp)
  831824:	e0bfff17 	ldw	r2,-4(fp)
}
  831828:	e037883a 	mov	sp,fp
  83182c:	dfc00117 	ldw	ra,4(sp)
  831830:	df000017 	ldw	fp,0(sp)
  831834:	dec00204 	addi	sp,sp,8
  831838:	f800283a 	ret

0083183c <soqinsque>:

void
soqinsque(struct socket * head, 
   struct socket *   so,
   int   q)
{
  83183c:	defffc04 	addi	sp,sp,-16
  831840:	df000315 	stw	fp,12(sp)
  831844:	df000304 	addi	fp,sp,12
  831848:	e13ffd15 	stw	r4,-12(fp)
  83184c:	e17ffe15 	stw	r5,-8(fp)
  831850:	e1bfff15 	stw	r6,-4(fp)
   so->so_head = head;
  831854:	e0fffe17 	ldw	r3,-8(fp)
  831858:	e0bffd17 	ldw	r2,-12(fp)
  83185c:	18801b15 	stw	r2,108(r3)
   if (q == 0) 
  831860:	e0bfff17 	ldw	r2,-4(fp)
  831864:	1004c03a 	cmpne	r2,r2,zero
  831868:	10000e1e 	bne	r2,zero,8318a4 <soqinsque+0x68>
   {
      head->so_q0len++;
  83186c:	e0bffd17 	ldw	r2,-12(fp)
  831870:	10801e03 	ldbu	r2,120(r2)
  831874:	10800044 	addi	r2,r2,1
  831878:	1007883a 	mov	r3,r2
  83187c:	e0bffd17 	ldw	r2,-12(fp)
  831880:	10c01e05 	stb	r3,120(r2)
      so->so_q0 = head->so_q0;
  831884:	e0bffd17 	ldw	r2,-12(fp)
  831888:	10c01c17 	ldw	r3,112(r2)
  83188c:	e0bffe17 	ldw	r2,-8(fp)
  831890:	10c01c15 	stw	r3,112(r2)
      head->so_q0 = so;
  831894:	e0fffd17 	ldw	r3,-12(fp)
  831898:	e0bffe17 	ldw	r2,-8(fp)
  83189c:	18801c15 	stw	r2,112(r3)
  8318a0:	00000d06 	br	8318d8 <soqinsque+0x9c>
   } else 
   {
      head->so_qlen++;
  8318a4:	e0bffd17 	ldw	r2,-12(fp)
  8318a8:	10801e43 	ldbu	r2,121(r2)
  8318ac:	10800044 	addi	r2,r2,1
  8318b0:	1007883a 	mov	r3,r2
  8318b4:	e0bffd17 	ldw	r2,-12(fp)
  8318b8:	10c01e45 	stb	r3,121(r2)
      so->so_q = head->so_q;
  8318bc:	e0bffd17 	ldw	r2,-12(fp)
  8318c0:	10c01d17 	ldw	r3,116(r2)
  8318c4:	e0bffe17 	ldw	r2,-8(fp)
  8318c8:	10c01d15 	stw	r3,116(r2)
      head->so_q = so;
  8318cc:	e0fffd17 	ldw	r3,-12(fp)
  8318d0:	e0bffe17 	ldw	r2,-8(fp)
  8318d4:	18801d15 	stw	r2,116(r3)
   }
}
  8318d8:	e037883a 	mov	sp,fp
  8318dc:	df000017 	ldw	fp,0(sp)
  8318e0:	dec00104 	addi	sp,sp,4
  8318e4:	f800283a 	ret

008318e8 <soqremque>:
 * RETURNS: 
 */

int
soqremque(struct socket * so, int q)
{
  8318e8:	defff804 	addi	sp,sp,-32
  8318ec:	df000715 	stw	fp,28(sp)
  8318f0:	df000704 	addi	fp,sp,28
  8318f4:	e13ffc15 	stw	r4,-16(fp)
  8318f8:	e17ffd15 	stw	r5,-12(fp)
   struct socket *   head, *  prev, *  next;

   head = so->so_head;
  8318fc:	e0bffc17 	ldw	r2,-16(fp)
  831900:	10801b17 	ldw	r2,108(r2)
  831904:	e0bffb15 	stw	r2,-20(fp)
   prev = head;
  831908:	e0bffb17 	ldw	r2,-20(fp)
  83190c:	e0bffa15 	stw	r2,-24(fp)
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
  831910:	e0bffd17 	ldw	r2,-12(fp)
  831914:	1005003a 	cmpeq	r2,r2,zero
  831918:	1000041e 	bne	r2,zero,83192c <soqremque+0x44>
  83191c:	e0bffa17 	ldw	r2,-24(fp)
  831920:	10801d17 	ldw	r2,116(r2)
  831924:	e0bfff15 	stw	r2,-4(fp)
  831928:	00000306 	br	831938 <soqremque+0x50>
  83192c:	e0bffa17 	ldw	r2,-24(fp)
  831930:	10801c17 	ldw	r2,112(r2)
  831934:	e0bfff15 	stw	r2,-4(fp)
  831938:	e0bfff17 	ldw	r2,-4(fp)
  83193c:	e0bff915 	stw	r2,-28(fp)
      if (next == so)
  831940:	e0fff917 	ldw	r3,-28(fp)
  831944:	e0bffc17 	ldw	r2,-16(fp)
  831948:	18800826 	beq	r3,r2,83196c <soqremque+0x84>
         break;
      if (next == head)
  83194c:	e0fff917 	ldw	r3,-28(fp)
  831950:	e0bffb17 	ldw	r2,-20(fp)
  831954:	1880021e 	bne	r3,r2,831960 <soqremque+0x78>
         return (0);
  831958:	e03ffe15 	stw	zero,-8(fp)
  83195c:	00002506 	br	8319f4 <soqremque+0x10c>
      prev = next;
  831960:	e0bff917 	ldw	r2,-28(fp)
  831964:	e0bffa15 	stw	r2,-24(fp)
   }
  831968:	003fe906 	br	831910 <soqremque+0x28>
   if (q == 0) 
  83196c:	e0bffd17 	ldw	r2,-12(fp)
  831970:	1004c03a 	cmpne	r2,r2,zero
  831974:	10000b1e 	bne	r2,zero,8319a4 <soqremque+0xbc>
   {
      prev->so_q0 = next->so_q0;
  831978:	e0bff917 	ldw	r2,-28(fp)
  83197c:	10c01c17 	ldw	r3,112(r2)
  831980:	e0bffa17 	ldw	r2,-24(fp)
  831984:	10c01c15 	stw	r3,112(r2)
      head->so_q0len--;
  831988:	e0bffb17 	ldw	r2,-20(fp)
  83198c:	10801e03 	ldbu	r2,120(r2)
  831990:	10bfffc4 	addi	r2,r2,-1
  831994:	1007883a 	mov	r3,r2
  831998:	e0bffb17 	ldw	r2,-20(fp)
  83199c:	10c01e05 	stb	r3,120(r2)
  8319a0:	00000a06 	br	8319cc <soqremque+0xe4>
   } else 
   {
      prev->so_q = next->so_q;
  8319a4:	e0bff917 	ldw	r2,-28(fp)
  8319a8:	10c01d17 	ldw	r3,116(r2)
  8319ac:	e0bffa17 	ldw	r2,-24(fp)
  8319b0:	10c01d15 	stw	r3,116(r2)
      head->so_qlen--;
  8319b4:	e0bffb17 	ldw	r2,-20(fp)
  8319b8:	10801e43 	ldbu	r2,121(r2)
  8319bc:	10bfffc4 	addi	r2,r2,-1
  8319c0:	1007883a 	mov	r3,r2
  8319c4:	e0bffb17 	ldw	r2,-20(fp)
  8319c8:	10c01e45 	stb	r3,121(r2)
   }
   next->so_q0 = next->so_q = 0;
  8319cc:	e0bff917 	ldw	r2,-28(fp)
  8319d0:	10001d15 	stw	zero,116(r2)
  8319d4:	e0bff917 	ldw	r2,-28(fp)
  8319d8:	10c01d17 	ldw	r3,116(r2)
  8319dc:	e0bff917 	ldw	r2,-28(fp)
  8319e0:	10c01c15 	stw	r3,112(r2)
   next->so_head = 0;
  8319e4:	e0bff917 	ldw	r2,-28(fp)
  8319e8:	10001b15 	stw	zero,108(r2)
   return 1;
  8319ec:	00800044 	movi	r2,1
  8319f0:	e0bffe15 	stw	r2,-8(fp)
  8319f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8319f8:	e037883a 	mov	sp,fp
  8319fc:	df000017 	ldw	fp,0(sp)
  831a00:	dec00104 	addi	sp,sp,4
  831a04:	f800283a 	ret

00831a08 <socantsendmore>:
 * RETURNS: 
 */

void
socantsendmore(struct socket * so)
{
  831a08:	defffd04 	addi	sp,sp,-12
  831a0c:	dfc00215 	stw	ra,8(sp)
  831a10:	df000115 	stw	fp,4(sp)
  831a14:	df000104 	addi	fp,sp,4
  831a18:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTSENDMORE;
  831a1c:	e0bfff17 	ldw	r2,-4(fp)
  831a20:	1080088b 	ldhu	r2,34(r2)
  831a24:	10800414 	ori	r2,r2,16
  831a28:	1007883a 	mov	r3,r2
  831a2c:	e0bfff17 	ldw	r2,-4(fp)
  831a30:	10c0088d 	sth	r3,34(r2)
   sowwakeup(so);
  831a34:	e0bfff17 	ldw	r2,-4(fp)
  831a38:	11401204 	addi	r5,r2,72
  831a3c:	e13fff17 	ldw	r4,-4(fp)
  831a40:	0831b480 	call	831b48 <sbwakeup>
}
  831a44:	e037883a 	mov	sp,fp
  831a48:	dfc00117 	ldw	ra,4(sp)
  831a4c:	df000017 	ldw	fp,0(sp)
  831a50:	dec00204 	addi	sp,sp,8
  831a54:	f800283a 	ret

00831a58 <socantrcvmore>:
 * RETURNS: 
 */

void
socantrcvmore(struct socket * so)
{
  831a58:	defffd04 	addi	sp,sp,-12
  831a5c:	dfc00215 	stw	ra,8(sp)
  831a60:	df000115 	stw	fp,4(sp)
  831a64:	df000104 	addi	fp,sp,4
  831a68:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTRCVMORE;
  831a6c:	e0bfff17 	ldw	r2,-4(fp)
  831a70:	1080088b 	ldhu	r2,34(r2)
  831a74:	10800814 	ori	r2,r2,32
  831a78:	1007883a 	mov	r3,r2
  831a7c:	e0bfff17 	ldw	r2,-4(fp)
  831a80:	10c0088d 	sth	r3,34(r2)
   sorwakeup(so);
  831a84:	e0bfff17 	ldw	r2,-4(fp)
  831a88:	11400a04 	addi	r5,r2,40
  831a8c:	e13fff17 	ldw	r4,-4(fp)
  831a90:	0831b480 	call	831b48 <sbwakeup>
}
  831a94:	e037883a 	mov	sp,fp
  831a98:	dfc00117 	ldw	ra,4(sp)
  831a9c:	df000017 	ldw	fp,0(sp)
  831aa0:	dec00204 	addi	sp,sp,8
  831aa4:	f800283a 	ret

00831aa8 <sbselqueue>:
 * RETURNS: 
 */

void
sbselqueue(struct sockbuf * sb)
{
  831aa8:	defffe04 	addi	sp,sp,-8
  831aac:	df000115 	stw	fp,4(sp)
  831ab0:	df000104 	addi	fp,sp,4
  831ab4:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_SEL;
  831ab8:	e0bfff17 	ldw	r2,-4(fp)
  831abc:	1080070b 	ldhu	r2,28(r2)
  831ac0:	10800214 	ori	r2,r2,8
  831ac4:	1007883a 	mov	r3,r2
  831ac8:	e0bfff17 	ldw	r2,-4(fp)
  831acc:	10c0070d 	sth	r3,28(r2)
}
  831ad0:	e037883a 	mov	sp,fp
  831ad4:	df000017 	ldw	fp,0(sp)
  831ad8:	dec00104 	addi	sp,sp,4
  831adc:	f800283a 	ret

00831ae0 <sbwait>:
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
  831ae0:	defffd04 	addi	sp,sp,-12
  831ae4:	dfc00215 	stw	ra,8(sp)
  831ae8:	df000115 	stw	fp,4(sp)
  831aec:	df000104 	addi	fp,sp,4
  831af0:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_WAIT;
  831af4:	e0bfff17 	ldw	r2,-4(fp)
  831af8:	1080070b 	ldhu	r2,28(r2)
  831afc:	10800114 	ori	r2,r2,4
  831b00:	1007883a 	mov	r3,r2
  831b04:	e0bfff17 	ldw	r2,-4(fp)
  831b08:	10c0070d 	sth	r3,28(r2)
   tcp_sleep ((char *)&sb->sb_cc);
  831b0c:	e0bfff17 	ldw	r2,-4(fp)
  831b10:	1009883a 	mov	r4,r2
  831b14:	082639c0 	call	82639c <tcp_sleep>
   sb->sb_flags &= ~SB_WAIT;
  831b18:	e0bfff17 	ldw	r2,-4(fp)
  831b1c:	10c0070b 	ldhu	r3,28(r2)
  831b20:	00bffec4 	movi	r2,-5
  831b24:	1884703a 	and	r2,r3,r2
  831b28:	1007883a 	mov	r3,r2
  831b2c:	e0bfff17 	ldw	r2,-4(fp)
  831b30:	10c0070d 	sth	r3,28(r2)
}
  831b34:	e037883a 	mov	sp,fp
  831b38:	dfc00117 	ldw	ra,4(sp)
  831b3c:	df000017 	ldw	fp,0(sp)
  831b40:	dec00204 	addi	sp,sp,8
  831b44:	f800283a 	ret

00831b48 <sbwakeup>:
 * RETURNS: 
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
  831b48:	defffc04 	addi	sp,sp,-16
  831b4c:	dfc00315 	stw	ra,12(sp)
  831b50:	df000215 	stw	fp,8(sp)
  831b54:	df000204 	addi	fp,sp,8
  831b58:	e13ffe15 	stw	r4,-8(fp)
  831b5c:	e17fff15 	stw	r5,-4(fp)
   if (sb->sb_flags & SB_SEL) 
  831b60:	e0bfff17 	ldw	r2,-4(fp)
  831b64:	1080070b 	ldhu	r2,28(r2)
  831b68:	10bfffcc 	andi	r2,r2,65535
  831b6c:	1080020c 	andi	r2,r2,8
  831b70:	1005003a 	cmpeq	r2,r2,zero
  831b74:	10000d1e 	bne	r2,zero,831bac <sbwakeup+0x64>
   {
      select_wait = 0;
  831b78:	00802174 	movhi	r2,133
  831b7c:	10832e04 	addi	r2,r2,3256
  831b80:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
      tcp_wakeup ((char *)&select_wait);
  831b84:	01002174 	movhi	r4,133
  831b88:	21032e04 	addi	r4,r4,3256
  831b8c:	082653c0 	call	82653c <tcp_wakeup>
#else
      tcp_wakeup2 (so->owner);
#endif      
      sb->sb_flags &= ~SB_SEL;
  831b90:	e0bfff17 	ldw	r2,-4(fp)
  831b94:	10c0070b 	ldhu	r3,28(r2)
  831b98:	00bffdc4 	movi	r2,-9
  831b9c:	1884703a 	and	r2,r3,r2
  831ba0:	1007883a 	mov	r3,r2
  831ba4:	e0bfff17 	ldw	r2,-4(fp)
  831ba8:	10c0070d 	sth	r3,28(r2)
#ifdef SOCK_WAKEALWAYS  /* Always wake the socket? */
   /* Systems Like Green Hills Integrity RTOS, need to process socket
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
  831bac:	e0bfff17 	ldw	r2,-4(fp)
  831bb0:	1080070b 	ldhu	r2,28(r2)
  831bb4:	10bfffcc 	andi	r2,r2,65535
  831bb8:	1080010c 	andi	r2,r2,4
  831bbc:	1005003a 	cmpeq	r2,r2,zero
  831bc0:	1000031e 	bne	r2,zero,831bd0 <sbwakeup+0x88>
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
  831bc4:	e0bfff17 	ldw	r2,-4(fp)
  831bc8:	1009883a 	mov	r4,r2
  831bcc:	082653c0 	call	82653c <tcp_wakeup>
   }
#endif   /* SOCK_WAKEALWAYS */
}
  831bd0:	e037883a 	mov	sp,fp
  831bd4:	dfc00117 	ldw	ra,4(sp)
  831bd8:	df000017 	ldw	fp,0(sp)
  831bdc:	dec00204 	addi	sp,sp,8
  831be0:	f800283a 	ret

00831be4 <soreserve>:

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
  831be4:	defffa04 	addi	sp,sp,-24
  831be8:	dfc00515 	stw	ra,20(sp)
  831bec:	df000415 	stw	fp,16(sp)
  831bf0:	df000404 	addi	fp,sp,16
  831bf4:	e13ffc15 	stw	r4,-16(fp)
  831bf8:	e17ffd15 	stw	r5,-12(fp)
  831bfc:	e1bffe15 	stw	r6,-8(fp)
   if (sbreserve(&so->so_snd, sndcc) == 0)
  831c00:	e0bffc17 	ldw	r2,-16(fp)
  831c04:	11001204 	addi	r4,r2,72
  831c08:	e17ffd17 	ldw	r5,-12(fp)
  831c0c:	0831c640 	call	831c64 <sbreserve>
  831c10:	1005003a 	cmpeq	r2,r2,zero
  831c14:	10000b1e 	bne	r2,zero,831c44 <soreserve+0x60>
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
  831c18:	e0bffc17 	ldw	r2,-16(fp)
  831c1c:	11000a04 	addi	r4,r2,40
  831c20:	e17ffe17 	ldw	r5,-8(fp)
  831c24:	0831c640 	call	831c64 <sbreserve>
  831c28:	1005003a 	cmpeq	r2,r2,zero
  831c2c:	1000021e 	bne	r2,zero,831c38 <soreserve+0x54>
      goto bad2;
   return (0);
  831c30:	e03fff15 	stw	zero,-4(fp)
  831c34:	00000506 	br	831c4c <soreserve+0x68>
bad2:
   sbrelease(&so->so_snd);
  831c38:	e0bffc17 	ldw	r2,-16(fp)
  831c3c:	11001204 	addi	r4,r2,72
  831c40:	0831cc40 	call	831cc4 <sbrelease>
bad:
   return (ENOBUFS);
  831c44:	00801a44 	movi	r2,105
  831c48:	e0bfff15 	stw	r2,-4(fp)
  831c4c:	e0bfff17 	ldw	r2,-4(fp)
}
  831c50:	e037883a 	mov	sp,fp
  831c54:	dfc00117 	ldw	ra,4(sp)
  831c58:	df000017 	ldw	fp,0(sp)
  831c5c:	dec00204 	addi	sp,sp,8
  831c60:	f800283a 	ret

00831c64 <sbreserve>:
 * RETURNS: 
 */

int
sbreserve(struct sockbuf * sb, u_long cc)
{
  831c64:	defffc04 	addi	sp,sp,-16
  831c68:	df000315 	stw	fp,12(sp)
  831c6c:	df000304 	addi	fp,sp,12
  831c70:	e13ffd15 	stw	r4,-12(fp)
  831c74:	e17ffe15 	stw	r5,-8(fp)
#ifdef COMPILER_32BIT
   if (cc > (u_long)SB_MAX * CLBYTES / (2 * MSIZE + CLBYTES))
      return (0);
#endif
   sb->sb_hiwat = cc;
  831c78:	e0fffd17 	ldw	r3,-12(fp)
  831c7c:	e0bffe17 	ldw	r2,-8(fp)
  831c80:	18800115 	stw	r2,4(r3)
   sb->sb_mbmax = MIN(cc * 2, SB_MAX);
  831c84:	e0bffe17 	ldw	r2,-8(fp)
  831c88:	1085883a 	add	r2,r2,r2
  831c8c:	e0bfff15 	stw	r2,-4(fp)
  831c90:	e0ffff17 	ldw	r3,-4(fp)
  831c94:	18900070 	cmpltui	r2,r3,16385
  831c98:	1000021e 	bne	r2,zero,831ca4 <sbreserve+0x40>
  831c9c:	00900004 	movi	r2,16384
  831ca0:	e0bfff15 	stw	r2,-4(fp)
  831ca4:	e0bffd17 	ldw	r2,-12(fp)
  831ca8:	e0ffff17 	ldw	r3,-4(fp)
  831cac:	10c00315 	stw	r3,12(r2)
   return (1);
  831cb0:	00800044 	movi	r2,1
}
  831cb4:	e037883a 	mov	sp,fp
  831cb8:	df000017 	ldw	fp,0(sp)
  831cbc:	dec00104 	addi	sp,sp,4
  831cc0:	f800283a 	ret

00831cc4 <sbrelease>:
 * RETURNS: 
 */

void
sbrelease(struct sockbuf * sb)
{
  831cc4:	defffd04 	addi	sp,sp,-12
  831cc8:	dfc00215 	stw	ra,8(sp)
  831ccc:	df000115 	stw	fp,4(sp)
  831cd0:	df000104 	addi	fp,sp,4
  831cd4:	e13fff15 	stw	r4,-4(fp)
   sbflush(sb);
  831cd8:	e13fff17 	ldw	r4,-4(fp)
  831cdc:	08322840 	call	832284 <sbflush>
   sb->sb_hiwat = sb->sb_mbmax = 0;
  831ce0:	e0bfff17 	ldw	r2,-4(fp)
  831ce4:	10000315 	stw	zero,12(r2)
  831ce8:	e0bfff17 	ldw	r2,-4(fp)
  831cec:	10c00317 	ldw	r3,12(r2)
  831cf0:	e0bfff17 	ldw	r2,-4(fp)
  831cf4:	10c00115 	stw	r3,4(r2)
}
  831cf8:	e037883a 	mov	sp,fp
  831cfc:	dfc00117 	ldw	ra,4(sp)
  831d00:	df000017 	ldw	fp,0(sp)
  831d04:	dec00204 	addi	sp,sp,8
  831d08:	f800283a 	ret

00831d0c <sbappend>:
 * RETURNS: 
 */

void
sbappend(struct sockbuf * sb, struct mbuf * m)
{
  831d0c:	defffb04 	addi	sp,sp,-20
  831d10:	dfc00415 	stw	ra,16(sp)
  831d14:	df000315 	stw	fp,12(sp)
  831d18:	df000304 	addi	fp,sp,12
  831d1c:	e13ffe15 	stw	r4,-8(fp)
  831d20:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  n;

   if (m == 0)
  831d24:	e0bfff17 	ldw	r2,-4(fp)
  831d28:	1005003a 	cmpeq	r2,r2,zero
  831d2c:	10001c1e 	bne	r2,zero,831da0 <sbappend+0x94>
      return;
   ENTER_CRIT_SECTION(sb);
  831d30:	082a9c80 	call	82a9c8 <irq_Mask>
   if ((n = sb->sb_mb) != NULL) 
  831d34:	e0bffe17 	ldw	r2,-8(fp)
  831d38:	10800617 	ldw	r2,24(r2)
  831d3c:	e0bffd15 	stw	r2,-12(fp)
  831d40:	e0bffd17 	ldw	r2,-12(fp)
  831d44:	1005003a 	cmpeq	r2,r2,zero
  831d48:	1000101e 	bne	r2,zero,831d8c <sbappend+0x80>
   {
      while (n->m_act)
  831d4c:	00000306 	br	831d5c <sbappend+0x50>
         n = n->m_act;
  831d50:	e0bffd17 	ldw	r2,-12(fp)
  831d54:	10800717 	ldw	r2,28(r2)
  831d58:	e0bffd15 	stw	r2,-12(fp)
   if (m == 0)
      return;
   ENTER_CRIT_SECTION(sb);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
  831d5c:	e0bffd17 	ldw	r2,-12(fp)
  831d60:	10800717 	ldw	r2,28(r2)
  831d64:	1004c03a 	cmpne	r2,r2,zero
  831d68:	103ff91e 	bne	r2,zero,831d50 <sbappend+0x44>
         n = n->m_act;
      while (n->m_next)
  831d6c:	00000306 	br	831d7c <sbappend+0x70>
         n = n->m_next;
  831d70:	e0bffd17 	ldw	r2,-12(fp)
  831d74:	10800617 	ldw	r2,24(r2)
  831d78:	e0bffd15 	stw	r2,-12(fp)
   ENTER_CRIT_SECTION(sb);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
         n = n->m_act;
      while (n->m_next)
  831d7c:	e0bffd17 	ldw	r2,-12(fp)
  831d80:	10800617 	ldw	r2,24(r2)
  831d84:	1004c03a 	cmpne	r2,r2,zero
  831d88:	103ff91e 	bne	r2,zero,831d70 <sbappend+0x64>
         n = n->m_next;
   }
   sbcompress(sb, m, n);
  831d8c:	e13ffe17 	ldw	r4,-8(fp)
  831d90:	e17fff17 	ldw	r5,-4(fp)
  831d94:	e1bffd17 	ldw	r6,-12(fp)
  831d98:	083209c0 	call	83209c <sbcompress>
   EXIT_CRIT_SECTION(sb);
  831d9c:	082aa240 	call	82aa24 <irq_Unmask>
}
  831da0:	e037883a 	mov	sp,fp
  831da4:	dfc00117 	ldw	ra,4(sp)
  831da8:	df000017 	ldw	fp,0(sp)
  831dac:	dec00204 	addi	sp,sp,8
  831db0:	f800283a 	ret

00831db4 <sbappendrecord>:
 */

void
sbappendrecord(struct sockbuf * sb, 
   struct mbuf *  m0)
{
  831db4:	defffb04 	addi	sp,sp,-20
  831db8:	dfc00415 	stw	ra,16(sp)
  831dbc:	df000315 	stw	fp,12(sp)
  831dc0:	df000304 	addi	fp,sp,12
  831dc4:	e13ffe15 	stw	r4,-8(fp)
  831dc8:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m;

   if (m0 == 0)
  831dcc:	e0bfff17 	ldw	r2,-4(fp)
  831dd0:	1005003a 	cmpeq	r2,r2,zero
  831dd4:	10002a1e 	bne	r2,zero,831e80 <sbappendrecord+0xcc>
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
  831dd8:	082a9c80 	call	82a9c8 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
  831ddc:	e0bffe17 	ldw	r2,-8(fp)
  831de0:	10800617 	ldw	r2,24(r2)
  831de4:	e0bffd15 	stw	r2,-12(fp)
  831de8:	e0bffd17 	ldw	r2,-12(fp)
  831dec:	1005003a 	cmpeq	r2,r2,zero
  831df0:	1000081e 	bne	r2,zero,831e14 <sbappendrecord+0x60>
      while (m->m_act)
  831df4:	00000306 	br	831e04 <sbappendrecord+0x50>
      m = m->m_act;
  831df8:	e0bffd17 	ldw	r2,-12(fp)
  831dfc:	10800717 	ldw	r2,28(r2)
  831e00:	e0bffd15 	stw	r2,-12(fp)

   if (m0 == 0)
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
   if ((m = sb->sb_mb) != NULL)
      while (m->m_act)
  831e04:	e0bffd17 	ldw	r2,-12(fp)
  831e08:	10800717 	ldw	r2,28(r2)
  831e0c:	1004c03a 	cmpne	r2,r2,zero
  831e10:	103ff91e 	bne	r2,zero,831df8 <sbappendrecord+0x44>
      m = m->m_act;
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
  831e14:	e0bffe17 	ldw	r2,-8(fp)
  831e18:	10c00017 	ldw	r3,0(r2)
  831e1c:	e0bfff17 	ldw	r2,-4(fp)
  831e20:	10800217 	ldw	r2,8(r2)
  831e24:	1887883a 	add	r3,r3,r2
  831e28:	e0bffe17 	ldw	r2,-8(fp)
  831e2c:	10c00015 	stw	r3,0(r2)
   if (m)
  831e30:	e0bffd17 	ldw	r2,-12(fp)
  831e34:	1005003a 	cmpeq	r2,r2,zero
  831e38:	1000041e 	bne	r2,zero,831e4c <sbappendrecord+0x98>
      m->m_act = m0;
  831e3c:	e0fffd17 	ldw	r3,-12(fp)
  831e40:	e0bfff17 	ldw	r2,-4(fp)
  831e44:	18800715 	stw	r2,28(r3)
  831e48:	00000306 	br	831e58 <sbappendrecord+0xa4>
   else
      sb->sb_mb = m0;
  831e4c:	e0fffe17 	ldw	r3,-8(fp)
  831e50:	e0bfff17 	ldw	r2,-4(fp)
  831e54:	18800615 	stw	r2,24(r3)
   m = m0->m_next;
  831e58:	e0bfff17 	ldw	r2,-4(fp)
  831e5c:	10800617 	ldw	r2,24(r2)
  831e60:	e0bffd15 	stw	r2,-12(fp)
   m0->m_next = 0;
  831e64:	e0bfff17 	ldw	r2,-4(fp)
  831e68:	10000615 	stw	zero,24(r2)
   sbcompress(sb, m, m0);
  831e6c:	e13ffe17 	ldw	r4,-8(fp)
  831e70:	e17ffd17 	ldw	r5,-12(fp)
  831e74:	e1bfff17 	ldw	r6,-4(fp)
  831e78:	083209c0 	call	83209c <sbcompress>
   EXIT_CRIT_SECTION(sb);
  831e7c:	082aa240 	call	82aa24 <irq_Unmask>
}
  831e80:	e037883a 	mov	sp,fp
  831e84:	dfc00117 	ldw	ra,4(sp)
  831e88:	df000017 	ldw	fp,0(sp)
  831e8c:	dec00204 	addi	sp,sp,8
  831e90:	f800283a 	ret

00831e94 <sbappendaddr>:

int
sbappendaddr(struct sockbuf * sb, 
   struct sockaddr * asa,
   struct mbuf *  m0)
{
  831e94:	defff604 	addi	sp,sp,-40
  831e98:	dfc00915 	stw	ra,36(sp)
  831e9c:	df000815 	stw	fp,32(sp)
  831ea0:	df000804 	addi	fp,sp,32
  831ea4:	e13ffb15 	stw	r4,-20(fp)
  831ea8:	e17ffc15 	stw	r5,-16(fp)
  831eac:	e1bffd15 	stw	r6,-12(fp)
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);
  831eb0:	00800404 	movi	r2,16
  831eb4:	e0bff815 	stw	r2,-32(fp)

   ENTER_CRIT_SECTION(sb);
  831eb8:	082a9c80 	call	82a9c8 <irq_Mask>
   for (m = m0; m; m = m->m_next)
  831ebc:	e0bffd17 	ldw	r2,-12(fp)
  831ec0:	e0bffa15 	stw	r2,-24(fp)
  831ec4:	00000806 	br	831ee8 <sbappendaddr+0x54>
      space += m->m_len;
  831ec8:	e0bffa17 	ldw	r2,-24(fp)
  831ecc:	10c00217 	ldw	r3,8(r2)
  831ed0:	e0bff817 	ldw	r2,-32(fp)
  831ed4:	1885883a 	add	r2,r3,r2
  831ed8:	e0bff815 	stw	r2,-32(fp)
{
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
  831edc:	e0bffa17 	ldw	r2,-24(fp)
  831ee0:	10800617 	ldw	r2,24(r2)
  831ee4:	e0bffa15 	stw	r2,-24(fp)
  831ee8:	e0bffa17 	ldw	r2,-24(fp)
  831eec:	1004c03a 	cmpne	r2,r2,zero
  831ef0:	103ff51e 	bne	r2,zero,831ec8 <sbappendaddr+0x34>
      space += m->m_len;
   if (space > (int)sbspace(sb))
  831ef4:	e0bffb17 	ldw	r2,-20(fp)
  831ef8:	10800117 	ldw	r2,4(r2)
  831efc:	1007883a 	mov	r3,r2
  831f00:	e0bffb17 	ldw	r2,-20(fp)
  831f04:	10800017 	ldw	r2,0(r2)
  831f08:	1885c83a 	sub	r2,r3,r2
  831f0c:	1004803a 	cmplt	r2,r2,zero
  831f10:	1000071e 	bne	r2,zero,831f30 <sbappendaddr+0x9c>
  831f14:	e0bffb17 	ldw	r2,-20(fp)
  831f18:	10c00117 	ldw	r3,4(r2)
  831f1c:	e0bffb17 	ldw	r2,-20(fp)
  831f20:	10800017 	ldw	r2,0(r2)
  831f24:	1885c83a 	sub	r2,r3,r2
  831f28:	e0bfff15 	stw	r2,-4(fp)
  831f2c:	00000106 	br	831f34 <sbappendaddr+0xa0>
  831f30:	e03fff15 	stw	zero,-4(fp)
  831f34:	e0bff817 	ldw	r2,-32(fp)
  831f38:	e0ffff17 	ldw	r3,-4(fp)
  831f3c:	1880030e 	bge	r3,r2,831f4c <sbappendaddr+0xb8>
   {
      EXIT_CRIT_SECTION(sb);
  831f40:	082aa240 	call	82aa24 <irq_Unmask>
      return (0);
  831f44:	e03ffe15 	stw	zero,-8(fp)
  831f48:	00004e06 	br	832084 <sbappendaddr+0x1f0>
   }
   if ((m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr))) == NULL)
  831f4c:	01000244 	movi	r4,9
  831f50:	01400404 	movi	r5,16
  831f54:	082b5c80 	call	82b5c8 <m_getnbuf>
  831f58:	e0bffa15 	stw	r2,-24(fp)
  831f5c:	e0bffa17 	ldw	r2,-24(fp)
  831f60:	1004c03a 	cmpne	r2,r2,zero
  831f64:	1000031e 	bne	r2,zero,831f74 <sbappendaddr+0xe0>
   {
      EXIT_CRIT_SECTION(sb);
  831f68:	082aa240 	call	82aa24 <irq_Unmask>
      return 0;
  831f6c:	e03ffe15 	stw	zero,-8(fp)
  831f70:	00004406 	br	832084 <sbappendaddr+0x1f0>
   }
   *mtod(m, struct sockaddr *) = *asa;
  831f74:	e0bffa17 	ldw	r2,-24(fp)
  831f78:	10800317 	ldw	r2,12(r2)
  831f7c:	1009883a 	mov	r4,r2
  831f80:	e0fffc17 	ldw	r3,-16(fp)
  831f84:	1880000b 	ldhu	r2,0(r3)
  831f88:	2080000d 	sth	r2,0(r4)
  831f8c:	1880008b 	ldhu	r2,2(r3)
  831f90:	2080008d 	sth	r2,2(r4)
  831f94:	1880010b 	ldhu	r2,4(r3)
  831f98:	2080010d 	sth	r2,4(r4)
  831f9c:	1880018b 	ldhu	r2,6(r3)
  831fa0:	2080018d 	sth	r2,6(r4)
  831fa4:	1880020b 	ldhu	r2,8(r3)
  831fa8:	2080020d 	sth	r2,8(r4)
  831fac:	1880028b 	ldhu	r2,10(r3)
  831fb0:	2080028d 	sth	r2,10(r4)
  831fb4:	1880030b 	ldhu	r2,12(r3)
  831fb8:	2080030d 	sth	r2,12(r4)
  831fbc:	1880038b 	ldhu	r2,14(r3)
  831fc0:	2080038d 	sth	r2,14(r4)
   m->m_len = sizeof (*asa);
  831fc4:	e0fffa17 	ldw	r3,-24(fp)
  831fc8:	00800404 	movi	r2,16
  831fcc:	18800215 	stw	r2,8(r3)
   sballoc (sb, m);
  831fd0:	e0bffb17 	ldw	r2,-20(fp)
  831fd4:	10c00017 	ldw	r3,0(r2)
  831fd8:	e0bffa17 	ldw	r2,-24(fp)
  831fdc:	10800217 	ldw	r2,8(r2)
  831fe0:	1887883a 	add	r3,r3,r2
  831fe4:	e0bffb17 	ldw	r2,-20(fp)
  831fe8:	10c00015 	stw	r3,0(r2)
   if ((n = sb->sb_mb) != NULL) 
  831fec:	e0bffb17 	ldw	r2,-20(fp)
  831ff0:	10800617 	ldw	r2,24(r2)
  831ff4:	e0bff915 	stw	r2,-28(fp)
  831ff8:	e0bff917 	ldw	r2,-28(fp)
  831ffc:	1005003a 	cmpeq	r2,r2,zero
  832000:	10000c1e 	bne	r2,zero,832034 <sbappendaddr+0x1a0>
   {
      while (n->m_act)
  832004:	00000306 	br	832014 <sbappendaddr+0x180>
         n = n->m_act;
  832008:	e0bff917 	ldw	r2,-28(fp)
  83200c:	10800717 	ldw	r2,28(r2)
  832010:	e0bff915 	stw	r2,-28(fp)
   *mtod(m, struct sockaddr *) = *asa;
   m->m_len = sizeof (*asa);
   sballoc (sb, m);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
  832014:	e0bff917 	ldw	r2,-28(fp)
  832018:	10800717 	ldw	r2,28(r2)
  83201c:	1004c03a 	cmpne	r2,r2,zero
  832020:	103ff91e 	bne	r2,zero,832008 <sbappendaddr+0x174>
         n = n->m_act;
      n->m_act = m;
  832024:	e0fff917 	ldw	r3,-28(fp)
  832028:	e0bffa17 	ldw	r2,-24(fp)
  83202c:	18800715 	stw	r2,28(r3)
  832030:	00000306 	br	832040 <sbappendaddr+0x1ac>
   } else
      sb->sb_mb = m;
  832034:	e0fffb17 	ldw	r3,-20(fp)
  832038:	e0bffa17 	ldw	r2,-24(fp)
  83203c:	18800615 	stw	r2,24(r3)
   if (m->m_next)
  832040:	e0bffa17 	ldw	r2,-24(fp)
  832044:	10800617 	ldw	r2,24(r2)
  832048:	1005003a 	cmpeq	r2,r2,zero
  83204c:	1000031e 	bne	r2,zero,83205c <sbappendaddr+0x1c8>
      m = m->m_next;
  832050:	e0bffa17 	ldw	r2,-24(fp)
  832054:	10800617 	ldw	r2,24(r2)
  832058:	e0bffa15 	stw	r2,-24(fp)
   if (m0)
  83205c:	e0bffd17 	ldw	r2,-12(fp)
  832060:	1005003a 	cmpeq	r2,r2,zero
  832064:	1000041e 	bne	r2,zero,832078 <sbappendaddr+0x1e4>
      sbcompress(sb, m0, m);
  832068:	e13ffb17 	ldw	r4,-20(fp)
  83206c:	e17ffd17 	ldw	r5,-12(fp)
  832070:	e1bffa17 	ldw	r6,-24(fp)
  832074:	083209c0 	call	83209c <sbcompress>

   EXIT_CRIT_SECTION(sb);
  832078:	082aa240 	call	82aa24 <irq_Unmask>
   return (1);
  83207c:	00800044 	movi	r2,1
  832080:	e0bffe15 	stw	r2,-8(fp)
  832084:	e0bffe17 	ldw	r2,-8(fp)
}
  832088:	e037883a 	mov	sp,fp
  83208c:	dfc00117 	ldw	ra,4(sp)
  832090:	df000017 	ldw	fp,0(sp)
  832094:	dec00204 	addi	sp,sp,8
  832098:	f800283a 	ret

0083209c <sbcompress>:

void
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{
  83209c:	defffb04 	addi	sp,sp,-20
  8320a0:	dfc00415 	stw	ra,16(sp)
  8320a4:	df000315 	stw	fp,12(sp)
  8320a8:	df000304 	addi	fp,sp,12
  8320ac:	e13ffd15 	stw	r4,-12(fp)
  8320b0:	e17ffe15 	stw	r5,-8(fp)
  8320b4:	e1bfff15 	stw	r6,-4(fp)

   while (m) 
  8320b8:	00006a06 	br	832264 <sbcompress+0x1c8>
   {
      if (m->m_len == 0) 
  8320bc:	e0bffe17 	ldw	r2,-8(fp)
  8320c0:	10800217 	ldw	r2,8(r2)
  8320c4:	1004c03a 	cmpne	r2,r2,zero
  8320c8:	1000041e 	bne	r2,zero,8320dc <sbcompress+0x40>
      {
         m = m_free(m);
  8320cc:	e13ffe17 	ldw	r4,-8(fp)
  8320d0:	082b7700 	call	82b770 <m_free>
  8320d4:	e0bffe15 	stw	r2,-8(fp)
         continue;
  8320d8:	00006206 	br	832264 <sbcompress+0x1c8>
      }
      if (m->m_type != MT_RXDATA && 
  8320dc:	e0bffe17 	ldw	r2,-8(fp)
  8320e0:	10800817 	ldw	r2,32(r2)
  8320e4:	10800060 	cmpeqi	r2,r2,1
  8320e8:	1000101e 	bne	r2,zero,83212c <sbcompress+0x90>
  8320ec:	e0bffe17 	ldw	r2,-8(fp)
  8320f0:	10800817 	ldw	r2,32(r2)
  8320f4:	108000a0 	cmpeqi	r2,r2,2
  8320f8:	10000c1e 	bne	r2,zero,83212c <sbcompress+0x90>
  8320fc:	e0bffe17 	ldw	r2,-8(fp)
  832100:	10800817 	ldw	r2,32(r2)
  832104:	10800260 	cmpeqi	r2,r2,9
  832108:	1000081e 	bne	r2,zero,83212c <sbcompress+0x90>
          m->m_type != MT_TXDATA && 
          m->m_type != MT_SONAME) 
      {
         dprintf ("sbcomp:bad type %d\n", m->m_type);
  83210c:	e0bffe17 	ldw	r2,-8(fp)
  832110:	11400817 	ldw	r5,32(r2)
  832114:	01002174 	movhi	r4,133
  832118:	2136f104 	addi	r4,r4,-9276
  83211c:	08076480 	call	807648 <printf>
         panic ("sbcomp:bad");
  832120:	01002174 	movhi	r4,133
  832124:	2136f604 	addi	r4,r4,-9256
  832128:	0825a2c0 	call	825a2c <panic>
      /* If there is room for all the data in M in N, then
       * just copy the data to N.  Note that sbdrop will 
       * increment the n->m_data pointer, so that we must
       * correct n->m_memsz.
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
  83212c:	e0bfff17 	ldw	r2,-4(fp)
  832130:	1005003a 	cmpeq	r2,r2,zero
  832134:	1000331e 	bne	r2,zero,832204 <sbcompress+0x168>
  832138:	e0bffd17 	ldw	r2,-12(fp)
  83213c:	1080070b 	ldhu	r2,28(r2)
  832140:	10bfffcc 	andi	r2,r2,65535
  832144:	1080200c 	andi	r2,r2,128
  832148:	1005003a 	cmpeq	r2,r2,zero
  83214c:	10002d1e 	bne	r2,zero,832204 <sbcompress+0x168>
  832150:	e0bfff17 	ldw	r2,-4(fp)
  832154:	10c00217 	ldw	r3,8(r2)
  832158:	e0bffe17 	ldw	r2,-8(fp)
  83215c:	10800217 	ldw	r2,8(r2)
  832160:	188b883a 	add	r5,r3,r2
  832164:	e0bfff17 	ldw	r2,-4(fp)
  832168:	11000517 	ldw	r4,20(r2)
  83216c:	e0bfff17 	ldw	r2,-4(fp)
  832170:	10800317 	ldw	r2,12(r2)
  832174:	1007883a 	mov	r3,r2
  832178:	e0bfff17 	ldw	r2,-4(fp)
  83217c:	10800417 	ldw	r2,16(r2)
  832180:	1885c83a 	sub	r2,r3,r2
  832184:	2085c83a 	sub	r2,r4,r2
  832188:	28801e2e 	bgeu	r5,r2,832204 <sbcompress+0x168>
          ((n->m_len + m->m_len) <
          n->m_memsz - (n->m_data - n->m_base) ) ) 
      {
         MEMCPY(n->m_data+n->m_len, m->m_data, m->m_len);
  83218c:	e0bfff17 	ldw	r2,-4(fp)
  832190:	10c00317 	ldw	r3,12(r2)
  832194:	e0bfff17 	ldw	r2,-4(fp)
  832198:	10800217 	ldw	r2,8(r2)
  83219c:	1887883a 	add	r3,r3,r2
  8321a0:	e0bffe17 	ldw	r2,-8(fp)
  8321a4:	11400317 	ldw	r5,12(r2)
  8321a8:	e0bffe17 	ldw	r2,-8(fp)
  8321ac:	10800217 	ldw	r2,8(r2)
  8321b0:	1809883a 	mov	r4,r3
  8321b4:	100d883a 	mov	r6,r2
  8321b8:	08073380 	call	807338 <memcpy>
         sballoc(sb, m);
  8321bc:	e0bffd17 	ldw	r2,-12(fp)
  8321c0:	10c00017 	ldw	r3,0(r2)
  8321c4:	e0bffe17 	ldw	r2,-8(fp)
  8321c8:	10800217 	ldw	r2,8(r2)
  8321cc:	1887883a 	add	r3,r3,r2
  8321d0:	e0bffd17 	ldw	r2,-12(fp)
  8321d4:	10c00015 	stw	r3,0(r2)
         n->m_len += m->m_len;
  8321d8:	e0bfff17 	ldw	r2,-4(fp)
  8321dc:	10c00217 	ldw	r3,8(r2)
  8321e0:	e0bffe17 	ldw	r2,-8(fp)
  8321e4:	10800217 	ldw	r2,8(r2)
  8321e8:	1887883a 	add	r3,r3,r2
  8321ec:	e0bfff17 	ldw	r2,-4(fp)
  8321f0:	10c00215 	stw	r3,8(r2)
         m = m_free(m);
  8321f4:	e13ffe17 	ldw	r4,-8(fp)
  8321f8:	082b7700 	call	82b770 <m_free>
  8321fc:	e0bffe15 	stw	r2,-8(fp)
         continue;
  832200:	00001806 	br	832264 <sbcompress+0x1c8>
      }
      sballoc(sb, m);
  832204:	e0bffd17 	ldw	r2,-12(fp)
  832208:	10c00017 	ldw	r3,0(r2)
  83220c:	e0bffe17 	ldw	r2,-8(fp)
  832210:	10800217 	ldw	r2,8(r2)
  832214:	1887883a 	add	r3,r3,r2
  832218:	e0bffd17 	ldw	r2,-12(fp)
  83221c:	10c00015 	stw	r3,0(r2)
      if (n)
  832220:	e0bfff17 	ldw	r2,-4(fp)
  832224:	1005003a 	cmpeq	r2,r2,zero
  832228:	1000041e 	bne	r2,zero,83223c <sbcompress+0x1a0>
         n->m_next = m;
  83222c:	e0ffff17 	ldw	r3,-4(fp)
  832230:	e0bffe17 	ldw	r2,-8(fp)
  832234:	18800615 	stw	r2,24(r3)
  832238:	00000306 	br	832248 <sbcompress+0x1ac>
      else
         sb->sb_mb = m;
  83223c:	e0fffd17 	ldw	r3,-12(fp)
  832240:	e0bffe17 	ldw	r2,-8(fp)
  832244:	18800615 	stw	r2,24(r3)
      n = m;
  832248:	e0bffe17 	ldw	r2,-8(fp)
  83224c:	e0bfff15 	stw	r2,-4(fp)
      m = m->m_next;
  832250:	e0bffe17 	ldw	r2,-8(fp)
  832254:	10800617 	ldw	r2,24(r2)
  832258:	e0bffe15 	stw	r2,-8(fp)
      n->m_next = 0;
  83225c:	e0bfff17 	ldw	r2,-4(fp)
  832260:	10000615 	stw	zero,24(r2)
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{

   while (m) 
  832264:	e0bffe17 	ldw	r2,-8(fp)
  832268:	1004c03a 	cmpne	r2,r2,zero
  83226c:	103f931e 	bne	r2,zero,8320bc <sbcompress+0x20>
         sb->sb_mb = m;
      n = m;
      m = m->m_next;
      n->m_next = 0;
   }
}
  832270:	e037883a 	mov	sp,fp
  832274:	dfc00117 	ldw	ra,4(sp)
  832278:	df000017 	ldw	fp,0(sp)
  83227c:	dec00204 	addi	sp,sp,8
  832280:	f800283a 	ret

00832284 <sbflush>:
 * RETURNS: 
 */

void
sbflush(struct sockbuf * sb)
{
  832284:	defffd04 	addi	sp,sp,-12
  832288:	dfc00215 	stw	ra,8(sp)
  83228c:	df000115 	stw	fp,4(sp)
  832290:	df000104 	addi	fp,sp,4
  832294:	e13fff15 	stw	r4,-4(fp)
   ENTER_CRIT_SECTION(sb);
  832298:	082a9c80 	call	82a9c8 <irq_Mask>
   if (sb->sb_flags & SB_LOCK)
  83229c:	e0bfff17 	ldw	r2,-4(fp)
  8322a0:	1080070b 	ldhu	r2,28(r2)
  8322a4:	10bfffcc 	andi	r2,r2,65535
  8322a8:	1080004c 	andi	r2,r2,1
  8322ac:	10803fcc 	andi	r2,r2,255
  8322b0:	1005003a 	cmpeq	r2,r2,zero
  8322b4:	1000091e 	bne	r2,zero,8322dc <sbflush+0x58>
      panic("sbflush");
  8322b8:	01002174 	movhi	r4,133
  8322bc:	2136f904 	addi	r4,r4,-9244
  8322c0:	0825a2c0 	call	825a2c <panic>
   while ((sb->sb_mbcnt) || (sb->sb_cc))
  8322c4:	00000506 	br	8322dc <sbflush+0x58>
      sbdrop (sb, (int)sb->sb_cc);
  8322c8:	e0bfff17 	ldw	r2,-4(fp)
  8322cc:	10800017 	ldw	r2,0(r2)
  8322d0:	100b883a 	mov	r5,r2
  8322d4:	e13fff17 	ldw	r4,-4(fp)
  8322d8:	08323140 	call	832314 <sbdrop>
sbflush(struct sockbuf * sb)
{
   ENTER_CRIT_SECTION(sb);
   if (sb->sb_flags & SB_LOCK)
      panic("sbflush");
   while ((sb->sb_mbcnt) || (sb->sb_cc))
  8322dc:	e0bfff17 	ldw	r2,-4(fp)
  8322e0:	10800217 	ldw	r2,8(r2)
  8322e4:	1004c03a 	cmpne	r2,r2,zero
  8322e8:	103ff71e 	bne	r2,zero,8322c8 <sbflush+0x44>
  8322ec:	e0bfff17 	ldw	r2,-4(fp)
  8322f0:	10800017 	ldw	r2,0(r2)
  8322f4:	1004c03a 	cmpne	r2,r2,zero
  8322f8:	103ff31e 	bne	r2,zero,8322c8 <sbflush+0x44>
      sbdrop (sb, (int)sb->sb_cc);
   EXIT_CRIT_SECTION(sb);
  8322fc:	082aa240 	call	82aa24 <irq_Unmask>
}
  832300:	e037883a 	mov	sp,fp
  832304:	dfc00117 	ldw	ra,4(sp)
  832308:	df000017 	ldw	fp,0(sp)
  83230c:	dec00204 	addi	sp,sp,8
  832310:	f800283a 	ret

00832314 <sbdrop>:
 * RETURNS: 
 */

void
sbdrop(struct sockbuf * sb, int len)
{
  832314:	defff904 	addi	sp,sp,-28
  832318:	dfc00615 	stw	ra,24(sp)
  83231c:	df000515 	stw	fp,20(sp)
  832320:	df000504 	addi	fp,sp,20
  832324:	e13ffe15 	stw	r4,-8(fp)
  832328:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m, *  mn;
   struct mbuf *  next;

   ENTER_CRIT_SECTION(sb);
  83232c:	082a9c80 	call	82a9c8 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
  832330:	e0bffe17 	ldw	r2,-8(fp)
  832334:	10800617 	ldw	r2,24(r2)
  832338:	e0bffd15 	stw	r2,-12(fp)
  83233c:	e0bffd17 	ldw	r2,-12(fp)
  832340:	1005003a 	cmpeq	r2,r2,zero
  832344:	1000041e 	bne	r2,zero,832358 <sbdrop+0x44>
      next = m->m_act;
  832348:	e0bffd17 	ldw	r2,-12(fp)
  83234c:	10800717 	ldw	r2,28(r2)
  832350:	e0bffb15 	stw	r2,-20(fp)
  832354:	00003906 	br	83243c <sbdrop+0x128>
   else
      next = NULL;
  832358:	e03ffb15 	stw	zero,-20(fp)
   while (len > 0) 
  83235c:	00003706 	br	83243c <sbdrop+0x128>
   {
      if (m == 0) 
  832360:	e0bffd17 	ldw	r2,-12(fp)
  832364:	1004c03a 	cmpne	r2,r2,zero
  832368:	10000c1e 	bne	r2,zero,83239c <sbdrop+0x88>
      {
         if (next == 0)
  83236c:	e0bffb17 	ldw	r2,-20(fp)
  832370:	1004c03a 	cmpne	r2,r2,zero
  832374:	1000031e 	bne	r2,zero,832384 <sbdrop+0x70>
            panic("sbdrop");
  832378:	01002174 	movhi	r4,133
  83237c:	2136fb04 	addi	r4,r4,-9236
  832380:	0825a2c0 	call	825a2c <panic>
         m = next;
  832384:	e0bffb17 	ldw	r2,-20(fp)
  832388:	e0bffd15 	stw	r2,-12(fp)
         next = m->m_act;
  83238c:	e0bffd17 	ldw	r2,-12(fp)
  832390:	10800717 	ldw	r2,28(r2)
  832394:	e0bffb15 	stw	r2,-20(fp)
         continue;
  832398:	00002806 	br	83243c <sbdrop+0x128>
      }
      if (m->m_len > (unsigned)len) 
  83239c:	e0bffd17 	ldw	r2,-12(fp)
  8323a0:	10c00217 	ldw	r3,8(r2)
  8323a4:	e0bfff17 	ldw	r2,-4(fp)
  8323a8:	10c0132e 	bgeu	r2,r3,8323f8 <sbdrop+0xe4>
      {
         m->m_len -= len;
  8323ac:	e0bffd17 	ldw	r2,-12(fp)
  8323b0:	10c00217 	ldw	r3,8(r2)
  8323b4:	e0bfff17 	ldw	r2,-4(fp)
  8323b8:	1887c83a 	sub	r3,r3,r2
  8323bc:	e0bffd17 	ldw	r2,-12(fp)
  8323c0:	10c00215 	stw	r3,8(r2)
         m->m_data += len;
  8323c4:	e0bffd17 	ldw	r2,-12(fp)
  8323c8:	10c00317 	ldw	r3,12(r2)
  8323cc:	e0bfff17 	ldw	r2,-4(fp)
  8323d0:	1887883a 	add	r3,r3,r2
  8323d4:	e0bffd17 	ldw	r2,-12(fp)
  8323d8:	10c00315 	stw	r3,12(r2)
         sb->sb_cc -= len;
  8323dc:	e0bffe17 	ldw	r2,-8(fp)
  8323e0:	10c00017 	ldw	r3,0(r2)
  8323e4:	e0bfff17 	ldw	r2,-4(fp)
  8323e8:	1887c83a 	sub	r3,r3,r2
  8323ec:	e0bffe17 	ldw	r2,-8(fp)
  8323f0:	10c00015 	stw	r3,0(r2)
         break;
  8323f4:	00002106 	br	83247c <sbdrop+0x168>
      }
      len -= m->m_len;
  8323f8:	e0ffff17 	ldw	r3,-4(fp)
  8323fc:	e0bffd17 	ldw	r2,-12(fp)
  832400:	10800217 	ldw	r2,8(r2)
  832404:	1885c83a 	sub	r2,r3,r2
  832408:	e0bfff15 	stw	r2,-4(fp)
      sbfree (sb, m);
  83240c:	e0bffe17 	ldw	r2,-8(fp)
  832410:	10c00017 	ldw	r3,0(r2)
  832414:	e0bffd17 	ldw	r2,-12(fp)
  832418:	10800217 	ldw	r2,8(r2)
  83241c:	1887c83a 	sub	r3,r3,r2
  832420:	e0bffe17 	ldw	r2,-8(fp)
  832424:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
  832428:	e13ffd17 	ldw	r4,-12(fp)
  83242c:	082b7700 	call	82b770 <m_free>
  832430:	e0bffc15 	stw	r2,-16(fp)
      m = mn;
  832434:	e0bffc17 	ldw	r2,-16(fp)
  832438:	e0bffd15 	stw	r2,-12(fp)
   ENTER_CRIT_SECTION(sb);
   if ((m = sb->sb_mb) != NULL)
      next = m->m_act;
   else
      next = NULL;
   while (len > 0) 
  83243c:	e0bfff17 	ldw	r2,-4(fp)
  832440:	10800048 	cmpgei	r2,r2,1
  832444:	103fc61e 	bne	r2,zero,832360 <sbdrop+0x4c>
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
  832448:	00000c06 	br	83247c <sbdrop+0x168>
   {
      sbfree(sb, m);
  83244c:	e0bffe17 	ldw	r2,-8(fp)
  832450:	10c00017 	ldw	r3,0(r2)
  832454:	e0bffd17 	ldw	r2,-12(fp)
  832458:	10800217 	ldw	r2,8(r2)
  83245c:	1887c83a 	sub	r3,r3,r2
  832460:	e0bffe17 	ldw	r2,-8(fp)
  832464:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
  832468:	e13ffd17 	ldw	r4,-12(fp)
  83246c:	082b7700 	call	82b770 <m_free>
  832470:	e0bffc15 	stw	r2,-16(fp)
      m = mn;
  832474:	e0bffc17 	ldw	r2,-16(fp)
  832478:	e0bffd15 	stw	r2,-12(fp)
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
  83247c:	e0bffd17 	ldw	r2,-12(fp)
  832480:	1005003a 	cmpeq	r2,r2,zero
  832484:	1000041e 	bne	r2,zero,832498 <sbdrop+0x184>
  832488:	e0bffd17 	ldw	r2,-12(fp)
  83248c:	10800217 	ldw	r2,8(r2)
  832490:	1005003a 	cmpeq	r2,r2,zero
  832494:	103fed1e 	bne	r2,zero,83244c <sbdrop+0x138>
   {
      sbfree(sb, m);
      MFREE(m, mn);
      m = mn;
   }
   if (m) 
  832498:	e0bffd17 	ldw	r2,-12(fp)
  83249c:	1005003a 	cmpeq	r2,r2,zero
  8324a0:	1000071e 	bne	r2,zero,8324c0 <sbdrop+0x1ac>
   {
      sb->sb_mb = m;
  8324a4:	e0fffe17 	ldw	r3,-8(fp)
  8324a8:	e0bffd17 	ldw	r2,-12(fp)
  8324ac:	18800615 	stw	r2,24(r3)
      m->m_act = next;
  8324b0:	e0fffd17 	ldw	r3,-12(fp)
  8324b4:	e0bffb17 	ldw	r2,-20(fp)
  8324b8:	18800715 	stw	r2,28(r3)
  8324bc:	00000306 	br	8324cc <sbdrop+0x1b8>
   } else
      sb->sb_mb = next;
  8324c0:	e0fffe17 	ldw	r3,-8(fp)
  8324c4:	e0bffb17 	ldw	r2,-20(fp)
  8324c8:	18800615 	stw	r2,24(r3)
   EXIT_CRIT_SECTION(sb);
  8324cc:	082aa240 	call	82aa24 <irq_Unmask>
}
  8324d0:	e037883a 	mov	sp,fp
  8324d4:	dfc00117 	ldw	ra,4(sp)
  8324d8:	df000017 	ldw	fp,0(sp)
  8324dc:	dec00204 	addi	sp,sp,8
  8324e0:	f800283a 	ret

008324e4 <sbdropend>:
 * RETURNS: 
 */

void
sbdropend(struct sockbuf * sb, struct mbuf * m)
{
  8324e4:	defff904 	addi	sp,sp,-28
  8324e8:	dfc00615 	stw	ra,24(sp)
  8324ec:	df000515 	stw	fp,20(sp)
  8324f0:	df000504 	addi	fp,sp,20
  8324f4:	e13ffe15 	stw	r4,-8(fp)
  8324f8:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  nmb, *   pmb;
   int   len;
   ENTER_CRIT_SECTION(sb);
  8324fc:	082a9c80 	call	82a9c8 <irq_Mask>
   len = mbuf_len(m);
  832500:	e13fff17 	ldw	r4,-4(fp)
  832504:	082bddc0 	call	82bddc <mbuf_len>
  832508:	e0bffb15 	stw	r2,-20(fp)
   if (len > 0)
  83250c:	e0bffb17 	ldw	r2,-20(fp)
  832510:	10800050 	cmplti	r2,r2,1
  832514:	1000051e 	bne	r2,zero,83252c <sbdropend+0x48>
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
  832518:	e0bffe17 	ldw	r2,-8(fp)
  83251c:	11000617 	ldw	r4,24(r2)
  832520:	e0bffb17 	ldw	r2,-20(fp)
  832524:	008bc83a 	sub	r5,zero,r2
  832528:	082bc0c0 	call	82bc0c <m_adj>
   nmb = sb->sb_mb;
  83252c:	e0bffe17 	ldw	r2,-8(fp)
  832530:	10800617 	ldw	r2,24(r2)
  832534:	e0bffd15 	stw	r2,-12(fp)
   pmb = NULL;
  832538:	e03ffc15 	stw	zero,-16(fp)
   if (sb->sb_mb->m_len == 0)
  83253c:	e0bffe17 	ldw	r2,-8(fp)
  832540:	10800617 	ldw	r2,24(r2)
  832544:	10800217 	ldw	r2,8(r2)
  832548:	1004c03a 	cmpne	r2,r2,zero
  83254c:	1000081e 	bne	r2,zero,832570 <sbdropend+0x8c>
      sb->sb_mb = NULL;
  832550:	e0bffe17 	ldw	r2,-8(fp)
  832554:	10000615 	stw	zero,24(r2)
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
  832558:	00000506 	br	832570 <sbdropend+0x8c>
   {
      pmb = nmb;  /* Remember previous */
  83255c:	e0bffd17 	ldw	r2,-12(fp)
  832560:	e0bffc15 	stw	r2,-16(fp)
      nmb = nmb->m_next;    
  832564:	e0bffd17 	ldw	r2,-12(fp)
  832568:	10800617 	ldw	r2,24(r2)
  83256c:	e0bffd15 	stw	r2,-12(fp)
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
   nmb = sb->sb_mb;
   pmb = NULL;
   if (sb->sb_mb->m_len == 0)
      sb->sb_mb = NULL;
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
  832570:	e0bffd17 	ldw	r2,-12(fp)
  832574:	1005003a 	cmpeq	r2,r2,zero
  832578:	1000041e 	bne	r2,zero,83258c <sbdropend+0xa8>
  83257c:	e0bffd17 	ldw	r2,-12(fp)
  832580:	10800217 	ldw	r2,8(r2)
  832584:	1004c03a 	cmpne	r2,r2,zero
  832588:	103ff41e 	bne	r2,zero,83255c <sbdropend+0x78>
   {
      pmb = nmb;  /* Remember previous */
      nmb = nmb->m_next;    
   }
   if (nmb && (nmb->m_len == 0)) /* Assume once 0 len found, all the rest */
  83258c:	e0bffd17 	ldw	r2,-12(fp)
  832590:	1005003a 	cmpeq	r2,r2,zero
  832594:	10000b1e 	bne	r2,zero,8325c4 <sbdropend+0xe0>
  832598:	e0bffd17 	ldw	r2,-12(fp)
  83259c:	10800217 	ldw	r2,8(r2)
  8325a0:	1004c03a 	cmpne	r2,r2,zero
  8325a4:	1000071e 	bne	r2,zero,8325c4 <sbdropend+0xe0>
   {                             /* are zeroes */ 
      if (pmb != NULL)
  8325a8:	e0bffc17 	ldw	r2,-16(fp)
  8325ac:	1005003a 	cmpeq	r2,r2,zero
  8325b0:	1000021e 	bne	r2,zero,8325bc <sbdropend+0xd8>
         pmb->m_next = NULL;
  8325b4:	e0bffc17 	ldw	r2,-16(fp)
  8325b8:	10000615 	stw	zero,24(r2)
      m_freem(nmb);            
  8325bc:	e13ffd17 	ldw	r4,-12(fp)
  8325c0:	082b8a40 	call	82b8a4 <m_freem>
   }
   sb->sb_cc -= len;       /* Do a sbfree using the len */
  8325c4:	e0bffe17 	ldw	r2,-8(fp)
  8325c8:	10c00017 	ldw	r3,0(r2)
  8325cc:	e0bffb17 	ldw	r2,-20(fp)
  8325d0:	1887c83a 	sub	r3,r3,r2
  8325d4:	e0bffe17 	ldw	r2,-8(fp)
  8325d8:	10c00015 	stw	r3,0(r2)
   EXIT_CRIT_SECTION(sb);
  8325dc:	082aa240 	call	82aa24 <irq_Unmask>
}
  8325e0:	e037883a 	mov	sp,fp
  8325e4:	dfc00117 	ldw	ra,4(sp)
  8325e8:	df000017 	ldw	fp,0(sp)
  8325ec:	dec00204 	addi	sp,sp,8
  8325f0:	f800283a 	ret

008325f4 <sbdroprecord>:
 * RETURNS: 
 */

void
sbdroprecord(struct sockbuf * sb)
{
  8325f4:	defffb04 	addi	sp,sp,-20
  8325f8:	dfc00415 	stw	ra,16(sp)
  8325fc:	df000315 	stw	fp,12(sp)
  832600:	df000304 	addi	fp,sp,12
  832604:	e13fff15 	stw	r4,-4(fp)
   struct mbuf *  m, *  mn;

   ENTER_CRIT_SECTION(sb);
  832608:	082a9c80 	call	82a9c8 <irq_Mask>
   m = sb->sb_mb;
  83260c:	e0bfff17 	ldw	r2,-4(fp)
  832610:	10800617 	ldw	r2,24(r2)
  832614:	e0bffe15 	stw	r2,-8(fp)
   if (m)
  832618:	e0bffe17 	ldw	r2,-8(fp)
  83261c:	1005003a 	cmpeq	r2,r2,zero
  832620:	1000131e 	bne	r2,zero,832670 <sbdroprecord+0x7c>
   {  sb->sb_mb = m->m_act;
  832624:	e0bffe17 	ldw	r2,-8(fp)
  832628:	10c00717 	ldw	r3,28(r2)
  83262c:	e0bfff17 	ldw	r2,-4(fp)
  832630:	10c00615 	stw	r3,24(r2)
      do 
      {  sbfree(sb, m);
  832634:	e0bfff17 	ldw	r2,-4(fp)
  832638:	10c00017 	ldw	r3,0(r2)
  83263c:	e0bffe17 	ldw	r2,-8(fp)
  832640:	10800217 	ldw	r2,8(r2)
  832644:	1887c83a 	sub	r3,r3,r2
  832648:	e0bfff17 	ldw	r2,-4(fp)
  83264c:	10c00015 	stw	r3,0(r2)
         MFREE(m, mn);
  832650:	e13ffe17 	ldw	r4,-8(fp)
  832654:	082b7700 	call	82b770 <m_free>
  832658:	e0bffd15 	stw	r2,-12(fp)
      } while ((m = mn) != NULL);
  83265c:	e0bffd17 	ldw	r2,-12(fp)
  832660:	e0bffe15 	stw	r2,-8(fp)
  832664:	e0bffe17 	ldw	r2,-8(fp)
  832668:	1004c03a 	cmpne	r2,r2,zero
  83266c:	103ff11e 	bne	r2,zero,832634 <sbdroprecord+0x40>
         }
   EXIT_CRIT_SECTION(sb);
  832670:	082aa240 	call	82aa24 <irq_Unmask>
}
  832674:	e037883a 	mov	sp,fp
  832678:	dfc00117 	ldw	ra,4(sp)
  83267c:	df000017 	ldw	fp,0(sp)
  832680:	dec00204 	addi	sp,sp,8
  832684:	f800283a 	ret

00832688 <t_select>:
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
  832688:	defe7204 	addi	sp,sp,-1592
  83268c:	dfc18d15 	stw	ra,1588(sp)
  832690:	df018c15 	stw	fp,1584(sp)
  832694:	df018c04 	addi	fp,sp,1584
  832698:	e13ffc15 	stw	r4,-16(fp)
  83269c:	e17ffd15 	stw	r5,-12(fp)
  8326a0:	e1bffe15 	stw	r6,-8(fp)
  8326a4:	e1ffff15 	stw	r7,-4(fp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;
  8326a8:	e03e7415 	stw	zero,-1584(fp)

   MEMSET(&obits, 0, sizeof(obits));
  8326ac:	e0be7604 	addi	r2,fp,-1576
  8326b0:	1009883a 	mov	r4,r2
  8326b4:	0180c304 	movi	r6,780
  8326b8:	000b883a 	mov	r5,zero
  8326bc:	08074b80 	call	8074b8 <memset>
   MEMSET(&ibits, 0, sizeof(ibits));
  8326c0:	e0bf3904 	addi	r2,fp,-796
  8326c4:	1009883a 	mov	r4,r2
  8326c8:	0180c304 	movi	r6,780
  8326cc:	000b883a 	mov	r5,zero
  8326d0:	08074b80 	call	8074b8 <memset>

   if (in)
  8326d4:	e0bffc17 	ldw	r2,-16(fp)
  8326d8:	1005003a 	cmpeq	r2,r2,zero
  8326dc:	1000061e 	bne	r2,zero,8326f8 <t_select+0x70>
      MEMCPY(&ibits[0], in, sizeof(fd_set));
  8326e0:	e0bf3904 	addi	r2,fp,-796
  8326e4:	e0fffc17 	ldw	r3,-16(fp)
  8326e8:	1009883a 	mov	r4,r2
  8326ec:	180b883a 	mov	r5,r3
  8326f0:	01804104 	movi	r6,260
  8326f4:	08073380 	call	807338 <memcpy>
   if (out)
  8326f8:	e0bffd17 	ldw	r2,-12(fp)
  8326fc:	1005003a 	cmpeq	r2,r2,zero
  832700:	1000071e 	bne	r2,zero,832720 <t_select+0x98>
      MEMCPY(&ibits[1], out, sizeof(fd_set));
  832704:	e0bf3904 	addi	r2,fp,-796
  832708:	10804104 	addi	r2,r2,260
  83270c:	e0fffd17 	ldw	r3,-12(fp)
  832710:	1009883a 	mov	r4,r2
  832714:	180b883a 	mov	r5,r3
  832718:	01804104 	movi	r6,260
  83271c:	08073380 	call	807338 <memcpy>
   if (ex)
  832720:	e0bffe17 	ldw	r2,-8(fp)
  832724:	1005003a 	cmpeq	r2,r2,zero
  832728:	1000071e 	bne	r2,zero,832748 <t_select+0xc0>
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
  83272c:	e0bf3904 	addi	r2,fp,-796
  832730:	10808204 	addi	r2,r2,520
  832734:	e0fffe17 	ldw	r3,-8(fp)
  832738:	1009883a 	mov	r4,r2
  83273c:	180b883a 	mov	r5,r3
  832740:	01804104 	movi	r6,260
  832744:	08073380 	call	807338 <memcpy>
   tmo = cticks + tv;
  832748:	00802174 	movhi	r2,133
  83274c:	10832604 	addi	r2,r2,3224
  832750:	10c00017 	ldw	r3,0(r2)
  832754:	e0bfff17 	ldw	r2,-4(fp)
  832758:	1885883a 	add	r2,r3,r2
  83275c:	e0be7515 	stw	r2,-1580(fp)

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
  832760:	e0bf3917 	ldw	r2,-796(fp)
  832764:	1004c03a 	cmpne	r2,r2,zero
  832768:	10000e1e 	bne	r2,zero,8327a4 <t_select+0x11c>
  83276c:	e0bf7a17 	ldw	r2,-536(fp)
  832770:	1004c03a 	cmpne	r2,r2,zero
  832774:	10000b1e 	bne	r2,zero,8327a4 <t_select+0x11c>
  832778:	e0bfbb17 	ldw	r2,-276(fp)
  83277c:	1004c03a 	cmpne	r2,r2,zero
  832780:	1000081e 	bne	r2,zero,8327a4 <t_select+0x11c>
       (ibits[2].fd_count == 0))
   {
      if (tv > 0)      /* make sure we don't block on nothing forever */
  832784:	e0bfff17 	ldw	r2,-4(fp)
  832788:	10800050 	cmplti	r2,r2,1
  83278c:	1000201e 	bne	r2,zero,832810 <t_select+0x188>
         while (tmo > cticks)
         {
            tk_yield();
         }
#else
         TK_SLEEP(tv);
  832790:	e0bfff17 	ldw	r2,-4(fp)
  832794:	10800044 	addi	r2,r2,1
  832798:	113fffcc 	andi	r4,r2,65535
  83279c:	081fc800 	call	81fc80 <OSTimeDly>
   if (ex)
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
   tmo = cticks + tv;

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
  8327a0:	00001b06 	br	832810 <t_select+0x188>

      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
  8327a4:	0009883a 	mov	r4,zero
  8327a8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      while ((retval = sock_selscan(ibits, obits)) == 0)
  8327ac:	00000f06 	br	8327ec <t_select+0x164>
      {
         if (tv != -1L) 
  8327b0:	e0bfff17 	ldw	r2,-4(fp)
  8327b4:	10bfffe0 	cmpeqi	r2,r2,-1
  8327b8:	1000051e 	bne	r2,zero,8327d0 <t_select+0x148>
         {
            if (tmo <= cticks)
  8327bc:	00802174 	movhi	r2,133
  8327c0:	10832604 	addi	r2,r2,3224
  8327c4:	10c00017 	ldw	r3,0(r2)
  8327c8:	e0be7517 	ldw	r2,-1580(fp)
  8327cc:	18800e2e 	bgeu	r3,r2,832808 <t_select+0x180>
               break;
         }
         select_wait = 1;
  8327d0:	00c02174 	movhi	r3,133
  8327d4:	18c32e04 	addi	r3,r3,3256
  8327d8:	00800044 	movi	r2,1
  8327dc:	1880000d 	sth	r2,0(r3)
         tcp_sleep (&select_wait);
  8327e0:	01002174 	movhi	r4,133
  8327e4:	21032e04 	addi	r4,r4,3256
  8327e8:	082639c0 	call	82639c <tcp_sleep>
      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
      while ((retval = sock_selscan(ibits, obits)) == 0)
  8327ec:	e13f3904 	addi	r4,fp,-796
  8327f0:	e17e7604 	addi	r5,fp,-1576
  8327f4:	08328a80 	call	8328a8 <sock_selscan>
  8327f8:	e0be7415 	stw	r2,-1584(fp)
  8327fc:	e0be7417 	ldw	r2,-1584(fp)
  832800:	1005003a 	cmpeq	r2,r2,zero
  832804:	103fea1e 	bne	r2,zero,8327b0 <t_select+0x128>
               break;
         }
         select_wait = 1;
         tcp_sleep (&select_wait);
      }
      UNLOCK_NET_RESOURCE(NET_RESID);
  832808:	0009883a 	mov	r4,zero
  83280c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   }

   if (retval >= 0)
  832810:	e0be7417 	ldw	r2,-1584(fp)
  832814:	1004803a 	cmplt	r2,r2,zero
  832818:	10001d1e 	bne	r2,zero,832890 <t_select+0x208>
   {
      if (in)
  83281c:	e0bffc17 	ldw	r2,-16(fp)
  832820:	1005003a 	cmpeq	r2,r2,zero
  832824:	1000061e 	bne	r2,zero,832840 <t_select+0x1b8>
         MEMCPY(in, &obits[0], sizeof(fd_set));
  832828:	e0bffc17 	ldw	r2,-16(fp)
  83282c:	e0fe7604 	addi	r3,fp,-1576
  832830:	1009883a 	mov	r4,r2
  832834:	180b883a 	mov	r5,r3
  832838:	01804104 	movi	r6,260
  83283c:	08073380 	call	807338 <memcpy>
      if (out)
  832840:	e0bffd17 	ldw	r2,-12(fp)
  832844:	1005003a 	cmpeq	r2,r2,zero
  832848:	1000071e 	bne	r2,zero,832868 <t_select+0x1e0>
         MEMCPY(out, &obits[1], sizeof(fd_set));
  83284c:	e0be7604 	addi	r2,fp,-1576
  832850:	10c04104 	addi	r3,r2,260
  832854:	e0bffd17 	ldw	r2,-12(fp)
  832858:	1009883a 	mov	r4,r2
  83285c:	180b883a 	mov	r5,r3
  832860:	01804104 	movi	r6,260
  832864:	08073380 	call	807338 <memcpy>
      if (ex)
  832868:	e0bffe17 	ldw	r2,-8(fp)
  83286c:	1005003a 	cmpeq	r2,r2,zero
  832870:	1000071e 	bne	r2,zero,832890 <t_select+0x208>
         MEMCPY(ex, &obits[2], sizeof(fd_set));
  832874:	e0be7604 	addi	r2,fp,-1576
  832878:	10c08204 	addi	r3,r2,520
  83287c:	e0bffe17 	ldw	r2,-8(fp)
  832880:	1009883a 	mov	r4,r2
  832884:	180b883a 	mov	r5,r3
  832888:	01804104 	movi	r6,260
  83288c:	08073380 	call	807338 <memcpy>
   }
   return retval;
  832890:	e0be7417 	ldw	r2,-1584(fp)
}
  832894:	e037883a 	mov	sp,fp
  832898:	dfc00117 	ldw	ra,4(sp)
  83289c:	df000017 	ldw	fp,0(sp)
  8328a0:	dec00204 	addi	sp,sp,8
  8328a4:	f800283a 	ret

008328a8 <sock_selscan>:
 * RETURNS: 
 */

int
sock_selscan(fd_set * ibits, fd_set * obits)
{
  8328a8:	defff504 	addi	sp,sp,-44
  8328ac:	dfc00a15 	stw	ra,40(sp)
  8328b0:	df000915 	stw	fp,36(sp)
  8328b4:	df000904 	addi	fp,sp,36
  8328b8:	e13ffd15 	stw	r4,-12(fp)
  8328bc:	e17ffe15 	stw	r5,-8(fp)
   fd_set *in, *out;
   int   which;
   int   sock;
   int   flag  =  0;
  8328c0:	e03ff815 	stw	zero,-32(fp)
   int   num_sel  =  0;
  8328c4:	e03ff715 	stw	zero,-36(fp)

   for (which = 0; which < 3; which++)
  8328c8:	e03ffa15 	stw	zero,-24(fp)
  8328cc:	00004306 	br	8329dc <sock_selscan+0x134>
   {
      switch (which)
  8328d0:	e0bffa17 	ldw	r2,-24(fp)
  8328d4:	e0bfff15 	stw	r2,-4(fp)
  8328d8:	e0ffff17 	ldw	r3,-4(fp)
  8328dc:	18800060 	cmpeqi	r2,r3,1
  8328e0:	10000a1e 	bne	r2,zero,83290c <sock_selscan+0x64>
  8328e4:	e0ffff17 	ldw	r3,-4(fp)
  8328e8:	188000a0 	cmpeqi	r2,r3,2
  8328ec:	10000a1e 	bne	r2,zero,832918 <sock_selscan+0x70>
  8328f0:	e0ffff17 	ldw	r3,-4(fp)
  8328f4:	1805003a 	cmpeq	r2,r3,zero
  8328f8:	1000011e 	bne	r2,zero,832900 <sock_selscan+0x58>
  8328fc:	00000706 	br	83291c <sock_selscan+0x74>
      {
      case 0:
         flag = SOREAD; break;
  832900:	00800044 	movi	r2,1
  832904:	e0bff815 	stw	r2,-32(fp)
  832908:	00000406 	br	83291c <sock_selscan+0x74>

      case 1:
         flag = SOWRITE; break;
  83290c:	00800084 	movi	r2,2
  832910:	e0bff815 	stw	r2,-32(fp)
  832914:	00000106 	br	83291c <sock_selscan+0x74>

      case 2:
         flag = 0; break;
  832918:	e03ff815 	stw	zero,-32(fp)
      }
      in = &ibits [which];
  83291c:	e0bffa17 	ldw	r2,-24(fp)
  832920:	10804124 	muli	r2,r2,260
  832924:	1007883a 	mov	r3,r2
  832928:	e0bffd17 	ldw	r2,-12(fp)
  83292c:	1885883a 	add	r2,r3,r2
  832930:	e0bffc15 	stw	r2,-16(fp)
      out = &obits [which];
  832934:	e0bffa17 	ldw	r2,-24(fp)
  832938:	10804124 	muli	r2,r2,260
  83293c:	1007883a 	mov	r3,r2
  832940:	e0bffe17 	ldw	r2,-8(fp)
  832944:	1885883a 	add	r2,r3,r2
  832948:	e0bffb15 	stw	r2,-20(fp)
      for (sock = 0; sock < (int)in->fd_count; sock++)
  83294c:	e03ff915 	stw	zero,-28(fp)
  832950:	00001a06 	br	8329bc <sock_selscan+0x114>
      {
         if (sock_select (in->fd_array[sock], flag))
  832954:	e0bff917 	ldw	r2,-28(fp)
  832958:	e0fffc17 	ldw	r3,-16(fp)
  83295c:	1085883a 	add	r2,r2,r2
  832960:	1085883a 	add	r2,r2,r2
  832964:	10c5883a 	add	r2,r2,r3
  832968:	10800104 	addi	r2,r2,4
  83296c:	11000017 	ldw	r4,0(r2)
  832970:	e17ff817 	ldw	r5,-32(fp)
  832974:	0832a000 	call	832a00 <sock_select>
  832978:	1005003a 	cmpeq	r2,r2,zero
  83297c:	10000c1e 	bne	r2,zero,8329b0 <sock_selscan+0x108>
         {
            FD_SET(in->fd_array[sock], out);
  832980:	e0bff917 	ldw	r2,-28(fp)
  832984:	e0fffc17 	ldw	r3,-16(fp)
  832988:	1085883a 	add	r2,r2,r2
  83298c:	1085883a 	add	r2,r2,r2
  832990:	10c5883a 	add	r2,r2,r3
  832994:	10800104 	addi	r2,r2,4
  832998:	11000017 	ldw	r4,0(r2)
  83299c:	e17ffb17 	ldw	r5,-20(fp)
  8329a0:	0832e380 	call	832e38 <ifd_set>
            num_sel++;
  8329a4:	e0bff717 	ldw	r2,-36(fp)
  8329a8:	10800044 	addi	r2,r2,1
  8329ac:	e0bff715 	stw	r2,-36(fp)
      case 2:
         flag = 0; break;
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
  8329b0:	e0bff917 	ldw	r2,-28(fp)
  8329b4:	10800044 	addi	r2,r2,1
  8329b8:	e0bff915 	stw	r2,-28(fp)
  8329bc:	e0bffc17 	ldw	r2,-16(fp)
  8329c0:	10800017 	ldw	r2,0(r2)
  8329c4:	1007883a 	mov	r3,r2
  8329c8:	e0bff917 	ldw	r2,-28(fp)
  8329cc:	10ffe116 	blt	r2,r3,832954 <sock_selscan+0xac>
   int   which;
   int   sock;
   int   flag  =  0;
   int   num_sel  =  0;

   for (which = 0; which < 3; which++)
  8329d0:	e0bffa17 	ldw	r2,-24(fp)
  8329d4:	10800044 	addi	r2,r2,1
  8329d8:	e0bffa15 	stw	r2,-24(fp)
  8329dc:	e0bffa17 	ldw	r2,-24(fp)
  8329e0:	108000d0 	cmplti	r2,r2,3
  8329e4:	103fba1e 	bne	r2,zero,8328d0 <sock_selscan+0x28>
            FD_SET(in->fd_array[sock], out);
            num_sel++;
         }
      }
   }
   return num_sel;
  8329e8:	e0bff717 	ldw	r2,-36(fp)
}
  8329ec:	e037883a 	mov	sp,fp
  8329f0:	dfc00117 	ldw	ra,4(sp)
  8329f4:	df000017 	ldw	fp,0(sp)
  8329f8:	dec00204 	addi	sp,sp,8
  8329fc:	f800283a 	ret

00832a00 <sock_select>:
 * RETURNS: 
 */

int
sock_select(long sock, int flag)
{
  832a00:	defff904 	addi	sp,sp,-28
  832a04:	dfc00615 	stw	ra,24(sp)
  832a08:	df000515 	stw	fp,20(sp)
  832a0c:	df000504 	addi	fp,sp,20
  832a10:	e13ffd15 	stw	r4,-12(fp)
  832a14:	e17ffe15 	stw	r5,-8(fp)
   struct socket *   so;
   int   ready =  0;
  832a18:	e03ffb15 	stw	zero,-20(fp)

   so = LONG2SO(sock);
  832a1c:	e0bffd17 	ldw	r2,-12(fp)
  832a20:	10bff804 	addi	r2,r2,-32
  832a24:	1085883a 	add	r2,r2,r2
  832a28:	1085883a 	add	r2,r2,r2
  832a2c:	e0bffc15 	stw	r2,-16(fp)

   switch (flag) 
  832a30:	e0bffe17 	ldw	r2,-8(fp)
  832a34:	e0bfff15 	stw	r2,-4(fp)
  832a38:	e0ffff17 	ldw	r3,-4(fp)
  832a3c:	18800060 	cmpeqi	r2,r3,1
  832a40:	1000071e 	bne	r2,zero,832a60 <sock_select+0x60>
  832a44:	e0ffff17 	ldw	r3,-4(fp)
  832a48:	188000a0 	cmpeqi	r2,r3,2
  832a4c:	1000251e 	bne	r2,zero,832ae4 <sock_select+0xe4>
  832a50:	e0ffff17 	ldw	r3,-4(fp)
  832a54:	1805003a 	cmpeq	r2,r3,zero
  832a58:	1000491e 	bne	r2,zero,832b80 <sock_select+0x180>
  832a5c:	00006706 	br	832bfc <sock_select+0x1fc>
   {
   case SOREAD:
      /* can we read something from so? */
      if (so->so_rcv.sb_cc)
  832a60:	e0bffc17 	ldw	r2,-16(fp)
  832a64:	10800a17 	ldw	r2,40(r2)
  832a68:	1005003a 	cmpeq	r2,r2,zero
  832a6c:	1000031e 	bne	r2,zero,832a7c <sock_select+0x7c>
      {
         ready = 1;
  832a70:	00800044 	movi	r2,1
  832a74:	e0bffb15 	stw	r2,-20(fp)
         break;
  832a78:	00006006 	br	832bfc <sock_select+0x1fc>
      }
      if (so->so_state & SS_CANTRCVMORE)
  832a7c:	e0bffc17 	ldw	r2,-16(fp)
  832a80:	1080088b 	ldhu	r2,34(r2)
  832a84:	10bfffcc 	andi	r2,r2,65535
  832a88:	1080080c 	andi	r2,r2,32
  832a8c:	1005003a 	cmpeq	r2,r2,zero
  832a90:	1000031e 	bne	r2,zero,832aa0 <sock_select+0xa0>
      {  ready = 1;
  832a94:	00800044 	movi	r2,1
  832a98:	e0bffb15 	stw	r2,-20(fp)
         break;
  832a9c:	00005706 	br	832bfc <sock_select+0x1fc>
      }
      if (so->so_qlen)  /* attach is ready */
  832aa0:	e0bffc17 	ldw	r2,-16(fp)
  832aa4:	10801e43 	ldbu	r2,121(r2)
  832aa8:	10803fcc 	andi	r2,r2,255
  832aac:	1080201c 	xori	r2,r2,128
  832ab0:	10bfe004 	addi	r2,r2,-128
  832ab4:	1005003a 	cmpeq	r2,r2,zero
  832ab8:	1000031e 	bne	r2,zero,832ac8 <sock_select+0xc8>
      {
         ready = 1;
  832abc:	00800044 	movi	r2,1
  832ac0:	e0bffb15 	stw	r2,-20(fp)
         break;
  832ac4:	00004d06 	br	832bfc <sock_select+0x1fc>
         }
      }
#endif   /* TCP_ZEROCOPY */

      /* fall to here if so is not ready to read */
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
  832ac8:	e0bffc17 	ldw	r2,-16(fp)
  832acc:	1080110b 	ldhu	r2,68(r2)
  832ad0:	10800214 	ori	r2,r2,8
  832ad4:	1007883a 	mov	r3,r2
  832ad8:	e0bffc17 	ldw	r2,-16(fp)
  832adc:	10c0110d 	sth	r3,68(r2)
      break;
  832ae0:	00004606 	br	832bfc <sock_select+0x1fc>

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
  832ae4:	e0bffc17 	ldw	r2,-16(fp)
  832ae8:	10801317 	ldw	r2,76(r2)
  832aec:	1007883a 	mov	r3,r2
  832af0:	e0bffc17 	ldw	r2,-16(fp)
  832af4:	10801217 	ldw	r2,72(r2)
  832af8:	1885c83a 	sub	r2,r3,r2
  832afc:	1004803a 	cmplt	r2,r2,zero
  832b00:	10001b1e 	bne	r2,zero,832b70 <sock_select+0x170>
  832b04:	e0bffc17 	ldw	r2,-16(fp)
  832b08:	10c01317 	ldw	r3,76(r2)
  832b0c:	e0bffc17 	ldw	r2,-16(fp)
  832b10:	10801217 	ldw	r2,72(r2)
  832b14:	18801626 	beq	r3,r2,832b70 <sock_select+0x170>
  832b18:	e0bffc17 	ldw	r2,-16(fp)
  832b1c:	1080088b 	ldhu	r2,34(r2)
  832b20:	10bfffcc 	andi	r2,r2,65535
  832b24:	1080008c 	andi	r2,r2,2
  832b28:	1004c03a 	cmpne	r2,r2,zero
  832b2c:	10000d1e 	bne	r2,zero,832b64 <sock_select+0x164>
  832b30:	e0bffc17 	ldw	r2,-16(fp)
  832b34:	10800217 	ldw	r2,8(r2)
  832b38:	1080010b 	ldhu	r2,4(r2)
  832b3c:	10bfffcc 	andi	r2,r2,65535
  832b40:	1080010c 	andi	r2,r2,4
  832b44:	1005003a 	cmpeq	r2,r2,zero
  832b48:	1000061e 	bne	r2,zero,832b64 <sock_select+0x164>
  832b4c:	e0bffc17 	ldw	r2,-16(fp)
  832b50:	1080088b 	ldhu	r2,34(r2)
  832b54:	10bfffcc 	andi	r2,r2,65535
  832b58:	1080040c 	andi	r2,r2,16
  832b5c:	1005003a 	cmpeq	r2,r2,zero
  832b60:	1000031e 	bne	r2,zero,832b70 <sock_select+0x170>
          ((((so)->so_state&SS_ISCONNECTED) || 
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
           ((so)->so_state & SS_CANTSENDMORE)))
      {
         ready = 1;
  832b64:	00800044 	movi	r2,1
  832b68:	e0bffb15 	stw	r2,-20(fp)
         break;
  832b6c:	00002306 	br	832bfc <sock_select+0x1fc>
      }
      sbselqueue (&so->so_snd);
  832b70:	e0bffc17 	ldw	r2,-16(fp)
  832b74:	11001204 	addi	r4,r2,72
  832b78:	0831aa80 	call	831aa8 <sbselqueue>
      break;
  832b7c:	00001f06 	br	832bfc <sock_select+0x1fc>

   case 0:
      if (so->so_oobmark || (so->so_state & SS_RCVATMARK))
  832b80:	e0bffc17 	ldw	r2,-16(fp)
  832b84:	10801a17 	ldw	r2,104(r2)
  832b88:	1004c03a 	cmpne	r2,r2,zero
  832b8c:	1000061e 	bne	r2,zero,832ba8 <sock_select+0x1a8>
  832b90:	e0bffc17 	ldw	r2,-16(fp)
  832b94:	1080088b 	ldhu	r2,34(r2)
  832b98:	10bfffcc 	andi	r2,r2,65535
  832b9c:	1080100c 	andi	r2,r2,64
  832ba0:	1005003a 	cmpeq	r2,r2,zero
  832ba4:	1000031e 	bne	r2,zero,832bb4 <sock_select+0x1b4>
      {
         ready = 1;
  832ba8:	00800044 	movi	r2,1
  832bac:	e0bffb15 	stw	r2,-20(fp)
         break;
  832bb0:	00001206 	br	832bfc <sock_select+0x1fc>
      }
      if (so->so_error &&
  832bb4:	e0bffc17 	ldw	r2,-16(fp)
  832bb8:	10800617 	ldw	r2,24(r2)
  832bbc:	1005003a 	cmpeq	r2,r2,zero
  832bc0:	10000b1e 	bne	r2,zero,832bf0 <sock_select+0x1f0>
  832bc4:	e0bffc17 	ldw	r2,-16(fp)
  832bc8:	10800617 	ldw	r2,24(r2)
  832bcc:	10801de0 	cmpeqi	r2,r2,119
  832bd0:	1000071e 	bne	r2,zero,832bf0 <sock_select+0x1f0>
  832bd4:	e0bffc17 	ldw	r2,-16(fp)
  832bd8:	10800617 	ldw	r2,24(r2)
  832bdc:	108002e0 	cmpeqi	r2,r2,11
  832be0:	1000031e 	bne	r2,zero,832bf0 <sock_select+0x1f0>
          (so->so_error != EINPROGRESS) &&
          (so->so_error != EWOULDBLOCK))
      {
         ready = 1;
  832be4:	00800044 	movi	r2,1
  832be8:	e0bffb15 	stw	r2,-20(fp)
         break;
  832bec:	00000306 	br	832bfc <sock_select+0x1fc>
      }
      sbselqueue(&so->so_rcv);
  832bf0:	e0bffc17 	ldw	r2,-16(fp)
  832bf4:	11000a04 	addi	r4,r2,40
  832bf8:	0831aa80 	call	831aa8 <sbselqueue>
      break;
   }

   return ready;
  832bfc:	e0bffb17 	ldw	r2,-20(fp)
}
  832c00:	e037883a 	mov	sp,fp
  832c04:	dfc00117 	ldw	ra,4(sp)
  832c08:	df000017 	ldw	fp,0(sp)
  832c0c:	dec00204 	addi	sp,sp,8
  832c10:	f800283a 	ret

00832c14 <in_pcbnotify>:
void
in_pcbnotify(struct inpcb * head, 
   struct in_addr *  dst,
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
  832c14:	defff804 	addi	sp,sp,-32
  832c18:	dfc00715 	stw	ra,28(sp)
  832c1c:	df000615 	stw	fp,24(sp)
  832c20:	df000604 	addi	fp,sp,24
  832c24:	e13ffc15 	stw	r4,-16(fp)
  832c28:	e17ffd15 	stw	r5,-12(fp)
  832c2c:	e1bffe15 	stw	r6,-8(fp)
  832c30:	e1ffff15 	stw	r7,-4(fp)
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
  832c34:	e0bffc17 	ldw	r2,-16(fp)
  832c38:	10800017 	ldw	r2,0(r2)
  832c3c:	e0bffb15 	stw	r2,-20(fp)
  832c40:	00001f06 	br	832cc0 <in_pcbnotify+0xac>
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
  832c44:	e0bffb17 	ldw	r2,-20(fp)
  832c48:	10c00317 	ldw	r3,12(r2)
  832c4c:	e0bffd17 	ldw	r2,-12(fp)
  832c50:	10800017 	ldw	r2,0(r2)
  832c54:	1880041e 	bne	r3,r2,832c68 <in_pcbnotify+0x54>
  832c58:	e0bffb17 	ldw	r2,-20(fp)
  832c5c:	10800817 	ldw	r2,32(r2)
  832c60:	1004c03a 	cmpne	r2,r2,zero
  832c64:	1000041e 	bne	r2,zero,832c78 <in_pcbnotify+0x64>
          inp->inp_socket == 0) 
      {
         inp = inp->inp_next;
  832c68:	e0bffb17 	ldw	r2,-20(fp)
  832c6c:	10800017 	ldw	r2,0(r2)
  832c70:	e0bffb15 	stw	r2,-20(fp)
         continue;
  832c74:	00001206 	br	832cc0 <in_pcbnotify+0xac>
      }
      if (errnum) 
  832c78:	e0bffe17 	ldw	r2,-8(fp)
  832c7c:	1005003a 	cmpeq	r2,r2,zero
  832c80:	1000041e 	bne	r2,zero,832c94 <in_pcbnotify+0x80>
         inp->inp_socket->so_error = errnum;
  832c84:	e0bffb17 	ldw	r2,-20(fp)
  832c88:	10c00817 	ldw	r3,32(r2)
  832c8c:	e0bffe17 	ldw	r2,-8(fp)
  832c90:	18800615 	stw	r2,24(r3)
      oinp = inp;
  832c94:	e0bffb17 	ldw	r2,-20(fp)
  832c98:	e0bffa15 	stw	r2,-24(fp)
      inp = inp->inp_next;
  832c9c:	e0bffb17 	ldw	r2,-20(fp)
  832ca0:	10800017 	ldw	r2,0(r2)
  832ca4:	e0bffb15 	stw	r2,-20(fp)
      if (notify)
  832ca8:	e0bfff17 	ldw	r2,-4(fp)
  832cac:	1005003a 	cmpeq	r2,r2,zero
  832cb0:	1000031e 	bne	r2,zero,832cc0 <in_pcbnotify+0xac>
         (*notify)(oinp);
  832cb4:	e0bfff17 	ldw	r2,-4(fp)
  832cb8:	e13ffa17 	ldw	r4,-24(fp)
  832cbc:	103ee83a 	callr	r2
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
  832cc0:	e0fffb17 	ldw	r3,-20(fp)
  832cc4:	e0bffc17 	ldw	r2,-16(fp)
  832cc8:	18bfde1e 	bne	r3,r2,832c44 <in_pcbnotify+0x30>
      oinp = inp;
      inp = inp->inp_next;
      if (notify)
         (*notify)(oinp);
   }
}
  832ccc:	e037883a 	mov	sp,fp
  832cd0:	dfc00117 	ldw	ra,4(sp)
  832cd4:	df000017 	ldw	fp,0(sp)
  832cd8:	dec00204 	addi	sp,sp,8
  832cdc:	f800283a 	ret

00832ce0 <tcp_notify>:
 * RETURNS: 
 */

void
tcp_notify(struct inpcb * inp)
{
  832ce0:	defffd04 	addi	sp,sp,-12
  832ce4:	dfc00215 	stw	ra,8(sp)
  832ce8:	df000115 	stw	fp,4(sp)
  832cec:	df000104 	addi	fp,sp,4
  832cf0:	e13fff15 	stw	r4,-4(fp)
   tcp_wakeup(&inp->inp_socket->so_timeo);
  832cf4:	e0bfff17 	ldw	r2,-4(fp)
  832cf8:	10800817 	ldw	r2,32(r2)
  832cfc:	11000904 	addi	r4,r2,36
  832d00:	082653c0 	call	82653c <tcp_wakeup>
   sorwakeup(inp->inp_socket);
  832d04:	e0bfff17 	ldw	r2,-4(fp)
  832d08:	11000817 	ldw	r4,32(r2)
  832d0c:	e0bfff17 	ldw	r2,-4(fp)
  832d10:	10800817 	ldw	r2,32(r2)
  832d14:	11400a04 	addi	r5,r2,40
  832d18:	0831b480 	call	831b48 <sbwakeup>
   sowwakeup(inp->inp_socket);
  832d1c:	e0bfff17 	ldw	r2,-4(fp)
  832d20:	11000817 	ldw	r4,32(r2)
  832d24:	e0bfff17 	ldw	r2,-4(fp)
  832d28:	10800817 	ldw	r2,32(r2)
  832d2c:	11401204 	addi	r5,r2,72
  832d30:	0831b480 	call	831b48 <sbwakeup>
}
  832d34:	e037883a 	mov	sp,fp
  832d38:	dfc00117 	ldw	ra,4(sp)
  832d3c:	df000017 	ldw	fp,0(sp)
  832d40:	dec00204 	addi	sp,sp,8
  832d44:	f800283a 	ret

00832d48 <ifd_clr>:
 * compacts the fd_set.
 */

void
ifd_clr(long sock, fd_set *set)
{
  832d48:	defffb04 	addi	sp,sp,-20
  832d4c:	dfc00415 	stw	ra,16(sp)
  832d50:	df000315 	stw	fp,12(sp)
  832d54:	df000304 	addi	fp,sp,12
  832d58:	e13ffe15 	stw	r4,-8(fp)
  832d5c:	e17fff15 	stw	r5,-4(fp)
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
  832d60:	e03ffd15 	stw	zero,-12(fp)
  832d64:	00002a06 	br	832e10 <ifd_clr+0xc8>
   {
      if (set->fd_array[i] == sock)
  832d68:	e0bffd17 	ldw	r2,-12(fp)
  832d6c:	e0ffff17 	ldw	r3,-4(fp)
  832d70:	1085883a 	add	r2,r2,r2
  832d74:	1085883a 	add	r2,r2,r2
  832d78:	10c5883a 	add	r2,r2,r3
  832d7c:	10800104 	addi	r2,r2,4
  832d80:	10c00017 	ldw	r3,0(r2)
  832d84:	e0bffe17 	ldw	r2,-8(fp)
  832d88:	18801e1e 	bne	r3,r2,832e04 <ifd_clr+0xbc>
      {
         while (i + 1 < set->fd_count)
  832d8c:	00001206 	br	832dd8 <ifd_clr+0x90>
         {
            set->fd_array[i] = set->fd_array[i + 1];
  832d90:	e13ffd17 	ldw	r4,-12(fp)
  832d94:	e0bffd17 	ldw	r2,-12(fp)
  832d98:	10800044 	addi	r2,r2,1
  832d9c:	e0ffff17 	ldw	r3,-4(fp)
  832da0:	1085883a 	add	r2,r2,r2
  832da4:	1085883a 	add	r2,r2,r2
  832da8:	10c5883a 	add	r2,r2,r3
  832dac:	10800104 	addi	r2,r2,4
  832db0:	11400017 	ldw	r5,0(r2)
  832db4:	e0ffff17 	ldw	r3,-4(fp)
  832db8:	2105883a 	add	r2,r4,r4
  832dbc:	1085883a 	add	r2,r2,r2
  832dc0:	10c5883a 	add	r2,r2,r3
  832dc4:	10800104 	addi	r2,r2,4
  832dc8:	11400015 	stw	r5,0(r2)
            i++;
  832dcc:	e0bffd17 	ldw	r2,-12(fp)
  832dd0:	10800044 	addi	r2,r2,1
  832dd4:	e0bffd15 	stw	r2,-12(fp)

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
      {
         while (i + 1 < set->fd_count)
  832dd8:	e0bffd17 	ldw	r2,-12(fp)
  832ddc:	10c00044 	addi	r3,r2,1
  832de0:	e0bfff17 	ldw	r2,-4(fp)
  832de4:	10800017 	ldw	r2,0(r2)
  832de8:	18bfe936 	bltu	r3,r2,832d90 <ifd_clr+0x48>
         {
            set->fd_array[i] = set->fd_array[i + 1];
            i++;
         }
         set->fd_count--;
  832dec:	e0bfff17 	ldw	r2,-4(fp)
  832df0:	10800017 	ldw	r2,0(r2)
  832df4:	10ffffc4 	addi	r3,r2,-1
  832df8:	e0bfff17 	ldw	r2,-4(fp)
  832dfc:	10c00015 	stw	r3,0(r2)
         return;
  832e00:	00000806 	br	832e24 <ifd_clr+0xdc>
void
ifd_clr(long sock, fd_set *set)
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
  832e04:	e0bffd17 	ldw	r2,-12(fp)
  832e08:	10800044 	addi	r2,r2,1
  832e0c:	e0bffd15 	stw	r2,-12(fp)
  832e10:	e0bfff17 	ldw	r2,-4(fp)
  832e14:	10c00017 	ldw	r3,0(r2)
  832e18:	e0bffd17 	ldw	r2,-12(fp)
  832e1c:	10ffd236 	bltu	r2,r3,832d68 <ifd_clr+0x20>
         return;
      }
   }

#ifdef NPDEBUG
   dtrap(); /* socket wasn't found in array */
  832e20:	082a7c80 	call	82a7c8 <dtrap>
#endif
}
  832e24:	e037883a 	mov	sp,fp
  832e28:	dfc00117 	ldw	ra,4(sp)
  832e2c:	df000017 	ldw	fp,0(sp)
  832e30:	dec00204 	addi	sp,sp,8
  832e34:	f800283a 	ret

00832e38 <ifd_set>:
 * called if the fd_set structure is already full.
 */

void
ifd_set(long sock, fd_set *set)
{
  832e38:	defffc04 	addi	sp,sp,-16
  832e3c:	dfc00315 	stw	ra,12(sp)
  832e40:	df000215 	stw	fp,8(sp)
  832e44:	df000204 	addi	fp,sp,8
  832e48:	e13ffe15 	stw	r4,-8(fp)
  832e4c:	e17fff15 	stw	r5,-4(fp)
   if (set->fd_count < FD_SETSIZE)
  832e50:	e0bfff17 	ldw	r2,-4(fp)
  832e54:	10800017 	ldw	r2,0(r2)
  832e58:	10801028 	cmpgeui	r2,r2,64
  832e5c:	10000d1e 	bne	r2,zero,832e94 <ifd_set+0x5c>
      set->fd_array[set->fd_count++] = sock;
  832e60:	e0bfff17 	ldw	r2,-4(fp)
  832e64:	10c00017 	ldw	r3,0(r2)
  832e68:	e13fff17 	ldw	r4,-4(fp)
  832e6c:	18c5883a 	add	r2,r3,r3
  832e70:	1085883a 	add	r2,r2,r2
  832e74:	1105883a 	add	r2,r2,r4
  832e78:	11000104 	addi	r4,r2,4
  832e7c:	e0bffe17 	ldw	r2,-8(fp)
  832e80:	20800015 	stw	r2,0(r4)
  832e84:	18c00044 	addi	r3,r3,1
  832e88:	e0bfff17 	ldw	r2,-4(fp)
  832e8c:	10c00015 	stw	r3,0(r2)
  832e90:	00000106 	br	832e98 <ifd_set+0x60>
#ifdef NPDEBUG
   else
      dtrap();
  832e94:	082a7c80 	call	82a7c8 <dtrap>
#endif
}
  832e98:	e037883a 	mov	sp,fp
  832e9c:	dfc00117 	ldw	ra,4(sp)
  832ea0:	df000017 	ldw	fp,0(sp)
  832ea4:	dec00204 	addi	sp,sp,8
  832ea8:	f800283a 	ret

00832eac <ifd_isset>:
 * Tests if a socket is a member of a file descriptor set.
 */

int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
  832eac:	defffb04 	addi	sp,sp,-20
  832eb0:	df000415 	stw	fp,16(sp)
  832eb4:	df000404 	addi	fp,sp,16
  832eb8:	e13ffd15 	stw	r4,-12(fp)
  832ebc:	e17ffe15 	stw	r5,-8(fp)
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
  832ec0:	e03ffc15 	stw	zero,-16(fp)
  832ec4:	00000f06 	br	832f04 <ifd_isset+0x58>
   {
      if (set->fd_array[i] == sock)
  832ec8:	e0bffc17 	ldw	r2,-16(fp)
  832ecc:	e0fffe17 	ldw	r3,-8(fp)
  832ed0:	1085883a 	add	r2,r2,r2
  832ed4:	1085883a 	add	r2,r2,r2
  832ed8:	10c5883a 	add	r2,r2,r3
  832edc:	10800104 	addi	r2,r2,4
  832ee0:	10c00017 	ldw	r3,0(r2)
  832ee4:	e0bffd17 	ldw	r2,-12(fp)
  832ee8:	1880031e 	bne	r3,r2,832ef8 <ifd_isset+0x4c>
         return TRUE;
  832eec:	00800044 	movi	r2,1
  832ef0:	e0bfff15 	stw	r2,-4(fp)
  832ef4:	00000806 	br	832f18 <ifd_isset+0x6c>
int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
  832ef8:	e0bffc17 	ldw	r2,-16(fp)
  832efc:	10800044 	addi	r2,r2,1
  832f00:	e0bffc15 	stw	r2,-16(fp)
  832f04:	e0bffe17 	ldw	r2,-8(fp)
  832f08:	10c00017 	ldw	r3,0(r2)
  832f0c:	e0bffc17 	ldw	r2,-16(fp)
  832f10:	10ffed36 	bltu	r2,r3,832ec8 <ifd_isset+0x1c>
   {
      if (set->fd_array[i] == sock)
         return TRUE;
   }
   return FALSE;
  832f14:	e03fff15 	stw	zero,-4(fp)
  832f18:	e0bfff17 	ldw	r2,-4(fp)
}
  832f1c:	e037883a 	mov	sp,fp
  832f20:	df000017 	ldw	fp,0(sp)
  832f24:	dec00104 	addi	sp,sp,4
  832f28:	f800283a 	ret

00832f2c <ifd_get>:
 * NOTE: This is not part of the original FD_XXX() functionality.
 */

long
ifd_get(unsigned i, fd_set *set)
{
  832f2c:	defffb04 	addi	sp,sp,-20
  832f30:	dfc00415 	stw	ra,16(sp)
  832f34:	df000315 	stw	fp,12(sp)
  832f38:	df000304 	addi	fp,sp,12
  832f3c:	e13ffd15 	stw	r4,-12(fp)
  832f40:	e17ffe15 	stw	r5,-8(fp)
   if (i < set->fd_count)
  832f44:	e0bffe17 	ldw	r2,-8(fp)
  832f48:	10c00017 	ldw	r3,0(r2)
  832f4c:	e0bffd17 	ldw	r2,-12(fp)
  832f50:	10c0092e 	bgeu	r2,r3,832f78 <ifd_get+0x4c>
      return set->fd_array[i];
  832f54:	e0bffd17 	ldw	r2,-12(fp)
  832f58:	e0fffe17 	ldw	r3,-8(fp)
  832f5c:	1085883a 	add	r2,r2,r2
  832f60:	1085883a 	add	r2,r2,r2
  832f64:	10c5883a 	add	r2,r2,r3
  832f68:	10800104 	addi	r2,r2,4
  832f6c:	10800017 	ldw	r2,0(r2)
  832f70:	e0bfff15 	stw	r2,-4(fp)
  832f74:	00000306 	br	832f84 <ifd_get+0x58>
   else
   {
#ifdef NPDEBUG
      dtrap();
  832f78:	082a7c80 	call	82a7c8 <dtrap>
#endif
      return INVALID_SOCKET;
  832f7c:	00bfffc4 	movi	r2,-1
  832f80:	e0bfff15 	stw	r2,-4(fp)
  832f84:	e0bfff17 	ldw	r2,-4(fp)
   }
}
  832f88:	e037883a 	mov	sp,fp
  832f8c:	dfc00117 	ldw	ra,4(sp)
  832f90:	df000017 	ldw	fp,0(sp)
  832f94:	dec00204 	addi	sp,sp,8
  832f98:	f800283a 	ret

00832f9c <tcp_reass>:

int
tcp_reass(struct tcpcb * tp, 
   struct tcpiphdr * ti,
   struct mbuf *  ti_mbuf)
{
  832f9c:	defff404 	addi	sp,sp,-48
  832fa0:	dfc00b15 	stw	ra,44(sp)
  832fa4:	df000a15 	stw	fp,40(sp)
  832fa8:	df000a04 	addi	fp,sp,40
  832fac:	e13ffc15 	stw	r4,-16(fp)
  832fb0:	e17ffd15 	stw	r5,-12(fp)
  832fb4:	e1bffe15 	stw	r6,-8(fp)
   struct tcpiphdr * q;
   struct socket *   so =  tp->t_inpcb->inp_socket;
  832fb8:	e0bffc17 	ldw	r2,-16(fp)
  832fbc:	10800d17 	ldw	r2,52(r2)
  832fc0:	10800817 	ldw	r2,32(r2)
  832fc4:	e0bffa15 	stw	r2,-24(fp)

   /*
    * Call with ti==0 after become established to
    * force pre-ESTABLISHED data up to user socket.
    */
   if (ti == 0)
  832fc8:	e0bffd17 	ldw	r2,-12(fp)
  832fcc:	1005003a 	cmpeq	r2,r2,zero
  832fd0:	10009c1e 	bne	r2,zero,833244 <tcp_reass+0x2a8>
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
  832fd4:	e0bffc17 	ldw	r2,-16(fp)
  832fd8:	10800017 	ldw	r2,0(r2)
  832fdc:	e0bffb15 	stw	r2,-20(fp)
  832fe0:	00000a06 	br	83300c <tcp_reass+0x70>
       q = (struct tcpiphdr *)q->ti_next)
   {
      if (SEQ_GT(q->ti_seq, ti->ti_seq))
  832fe4:	e0bffb17 	ldw	r2,-20(fp)
  832fe8:	10c00617 	ldw	r3,24(r2)
  832fec:	e0bffd17 	ldw	r2,-12(fp)
  832ff0:	10800617 	ldw	r2,24(r2)
  832ff4:	1885c83a 	sub	r2,r3,r2
  832ff8:	10800048 	cmpgei	r2,r2,1
  832ffc:	1000061e 	bne	r2,zero,833018 <tcp_reass+0x7c>

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
       q = (struct tcpiphdr *)q->ti_next)
  833000:	e0bffb17 	ldw	r2,-20(fp)
  833004:	10800017 	ldw	r2,0(r2)
  833008:	e0bffb15 	stw	r2,-20(fp)
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
  83300c:	e0fffc17 	ldw	r3,-16(fp)
  833010:	e0bffb17 	ldw	r2,-20(fp)
  833014:	10fff31e 	bne	r2,r3,832fe4 <tcp_reass+0x48>
   /*
    * If there is a preceding segment, it may provide some of
    * our data already.  If so, drop the data from the incoming
    * segment.  If it provides all of our data, drop us.
    */
   if ((struct tcpiphdr *)q->ti_prev != (struct tcpiphdr *)tp) 
  833018:	e0bffb17 	ldw	r2,-20(fp)
  83301c:	10800117 	ldw	r2,4(r2)
  833020:	1007883a 	mov	r3,r2
  833024:	e0bffc17 	ldw	r2,-16(fp)
  833028:	18803c26 	beq	r3,r2,83311c <tcp_reass+0x180>
   {
      long  i;
      q = (struct tcpiphdr *)q->ti_prev;
  83302c:	e0bffb17 	ldw	r2,-20(fp)
  833030:	10800117 	ldw	r2,4(r2)
  833034:	e0bffb15 	stw	r2,-20(fp)
      /* conversion to int (in i) handles seq wraparound */
      i = q->ti_seq + q->ti_len - ti->ti_seq;
  833038:	e0bffb17 	ldw	r2,-20(fp)
  83303c:	10c00617 	ldw	r3,24(r2)
  833040:	e0bffb17 	ldw	r2,-20(fp)
  833044:	1080028b 	ldhu	r2,10(r2)
  833048:	10bfffcc 	andi	r2,r2,65535
  83304c:	1887883a 	add	r3,r3,r2
  833050:	e0bffd17 	ldw	r2,-12(fp)
  833054:	10800617 	ldw	r2,24(r2)
  833058:	1885c83a 	sub	r2,r3,r2
  83305c:	e0bff715 	stw	r2,-36(fp)
      if (i > 0) 
  833060:	e0bff717 	ldw	r2,-36(fp)
  833064:	10800050 	cmplti	r2,r2,1
  833068:	1000291e 	bne	r2,zero,833110 <tcp_reass+0x174>
      {
         if (i >= (long)ti->ti_len) 
  83306c:	e0bffd17 	ldw	r2,-12(fp)
  833070:	1080028b 	ldhu	r2,10(r2)
  833074:	10ffffcc 	andi	r3,r2,65535
  833078:	e0bff717 	ldw	r2,-36(fp)
  83307c:	10c01416 	blt	r2,r3,8330d0 <tcp_reass+0x134>
         {
            tcpstat.tcps_rcvduppack++;
  833080:	00803934 	movhi	r2,228
  833084:	10a90c04 	addi	r2,r2,-23504
  833088:	10801f17 	ldw	r2,124(r2)
  83308c:	10c00044 	addi	r3,r2,1
  833090:	00803934 	movhi	r2,228
  833094:	10a90c04 	addi	r2,r2,-23504
  833098:	10c01f15 	stw	r3,124(r2)
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
  83309c:	00803934 	movhi	r2,228
  8330a0:	10a90c04 	addi	r2,r2,-23504
  8330a4:	10c02017 	ldw	r3,128(r2)
  8330a8:	e0bffd17 	ldw	r2,-12(fp)
  8330ac:	1080028b 	ldhu	r2,10(r2)
  8330b0:	10bfffcc 	andi	r2,r2,65535
  8330b4:	1887883a 	add	r3,r3,r2
  8330b8:	00803934 	movhi	r2,228
  8330bc:	10a90c04 	addi	r2,r2,-23504
  8330c0:	10c02015 	stw	r3,128(r2)
            GOTO_DROP;
  8330c4:	008025c4 	movi	r2,151
  8330c8:	d0a0ba15 	stw	r2,-32024(gp)
  8330cc:	0000ac06 	br	833380 <tcp_reass+0x3e4>
         }
         m_adj (ti_mbuf, (int)i);
  8330d0:	e13ffe17 	ldw	r4,-8(fp)
  8330d4:	e17ff717 	ldw	r5,-36(fp)
  8330d8:	082bc0c0 	call	82bc0c <m_adj>
         ti->ti_len -= (short)i;
  8330dc:	e0bffd17 	ldw	r2,-12(fp)
  8330e0:	10c0028b 	ldhu	r3,10(r2)
  8330e4:	e0bff717 	ldw	r2,-36(fp)
  8330e8:	1885c83a 	sub	r2,r3,r2
  8330ec:	1007883a 	mov	r3,r2
  8330f0:	e0bffd17 	ldw	r2,-12(fp)
  8330f4:	10c0028d 	sth	r3,10(r2)
         ti->ti_seq += (tcp_seq)i;
  8330f8:	e0bffd17 	ldw	r2,-12(fp)
  8330fc:	10c00617 	ldw	r3,24(r2)
  833100:	e0bff717 	ldw	r2,-36(fp)
  833104:	1887883a 	add	r3,r3,r2
  833108:	e0bffd17 	ldw	r2,-12(fp)
  83310c:	10c00615 	stw	r3,24(r2)
      }
      q = (struct tcpiphdr *)(q->ti_next);
  833110:	e0bffb17 	ldw	r2,-20(fp)
  833114:	10800017 	ldw	r2,0(r2)
  833118:	e0bffb15 	stw	r2,-20(fp)
   }
   tcpstat.tcps_rcvoopack++;
  83311c:	00803934 	movhi	r2,228
  833120:	10a90c04 	addi	r2,r2,-23504
  833124:	10802317 	ldw	r2,140(r2)
  833128:	10c00044 	addi	r3,r2,1
  83312c:	00803934 	movhi	r2,228
  833130:	10a90c04 	addi	r2,r2,-23504
  833134:	10c02315 	stw	r3,140(r2)
   tcpstat.tcps_rcvoobyte += ti->ti_len;
  833138:	00803934 	movhi	r2,228
  83313c:	10a90c04 	addi	r2,r2,-23504
  833140:	10c02417 	ldw	r3,144(r2)
  833144:	e0bffd17 	ldw	r2,-12(fp)
  833148:	1080028b 	ldhu	r2,10(r2)
  83314c:	10bfffcc 	andi	r2,r2,65535
  833150:	1887883a 	add	r3,r3,r2
  833154:	00803934 	movhi	r2,228
  833158:	10a90c04 	addi	r2,r2,-23504
  83315c:	10c02415 	stw	r3,144(r2)

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
  833160:	00003106 	br	833228 <tcp_reass+0x28c>
   {
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
  833164:	e0bffd17 	ldw	r2,-12(fp)
  833168:	10c00617 	ldw	r3,24(r2)
  83316c:	e0bffd17 	ldw	r2,-12(fp)
  833170:	1080028b 	ldhu	r2,10(r2)
  833174:	10bfffcc 	andi	r2,r2,65535
  833178:	1887883a 	add	r3,r3,r2
  83317c:	e0bffb17 	ldw	r2,-20(fp)
  833180:	10800617 	ldw	r2,24(r2)
  833184:	1885c83a 	sub	r2,r3,r2
  833188:	e0bff615 	stw	r2,-40(fp)
      if (i <= 0)
  83318c:	e0bff617 	ldw	r2,-40(fp)
  833190:	10800050 	cmplti	r2,r2,1
  833194:	1000271e 	bne	r2,zero,833234 <tcp_reass+0x298>
         break;
      if (i < (int)(q->ti_len))
  833198:	e0bffb17 	ldw	r2,-20(fp)
  83319c:	1080028b 	ldhu	r2,10(r2)
  8331a0:	10ffffcc 	andi	r3,r2,65535
  8331a4:	e0bff617 	ldw	r2,-40(fp)
  8331a8:	10c0130e 	bge	r2,r3,8331f8 <tcp_reass+0x25c>
      {
         q->ti_seq += i;
  8331ac:	e0bffb17 	ldw	r2,-20(fp)
  8331b0:	10c00617 	ldw	r3,24(r2)
  8331b4:	e0bff617 	ldw	r2,-40(fp)
  8331b8:	1887883a 	add	r3,r3,r2
  8331bc:	e0bffb17 	ldw	r2,-20(fp)
  8331c0:	10c00615 	stw	r3,24(r2)
         q->ti_len -= (u_short)i;
  8331c4:	e0bffb17 	ldw	r2,-20(fp)
  8331c8:	10c0028b 	ldhu	r3,10(r2)
  8331cc:	e0bff617 	ldw	r2,-40(fp)
  8331d0:	1885c83a 	sub	r2,r3,r2
  8331d4:	1007883a 	mov	r3,r2
  8331d8:	e0bffb17 	ldw	r2,-20(fp)
  8331dc:	10c0028d 	sth	r3,10(r2)
         m_adj (dtom(q), (int)i);
  8331e0:	e13ffb17 	ldw	r4,-20(fp)
  8331e4:	082be340 	call	82be34 <dtom>
  8331e8:	1009883a 	mov	r4,r2
  8331ec:	e17ff617 	ldw	r5,-40(fp)
  8331f0:	082bc0c0 	call	82bc0c <m_adj>
         break;
  8331f4:	00000f06 	br	833234 <tcp_reass+0x298>
      }
      q = (struct tcpiphdr *)q->ti_next;
  8331f8:	e0bffb17 	ldw	r2,-20(fp)
  8331fc:	10800017 	ldw	r2,0(r2)
  833200:	e0bffb15 	stw	r2,-20(fp)
      m = dtom(q->ti_prev);
  833204:	e0bffb17 	ldw	r2,-20(fp)
  833208:	11000117 	ldw	r4,4(r2)
  83320c:	082be340 	call	82be34 <dtom>
  833210:	e0bff915 	stw	r2,-28(fp)
      remque (q->ti_prev);
  833214:	e0bffb17 	ldw	r2,-20(fp)
  833218:	11000117 	ldw	r4,4(r2)
  83321c:	082bedc0 	call	82bedc <remque>
      m_freem (m);
  833220:	e13ff917 	ldw	r4,-28(fp)
  833224:	082b8a40 	call	82b8a4 <m_freem>

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
  833228:	e0fffc17 	ldw	r3,-16(fp)
  83322c:	e0bffb17 	ldw	r2,-20(fp)
  833230:	10ffcc1e 	bne	r2,r3,833164 <tcp_reass+0x1c8>
   }

   /*
    * Stick new segment in its place.
    */
   insque(ti, q->ti_prev);
  833234:	e0bffb17 	ldw	r2,-20(fp)
  833238:	11400117 	ldw	r5,4(r2)
  83323c:	e13ffd17 	ldw	r4,-12(fp)
  833240:	082bf4c0 	call	82bf4c <insque>
present:
   /*
    * Present data to user, advancing rcv_nxt through
    * completed sequence space.
    */
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
  833244:	e0bffc17 	ldw	r2,-16(fp)
  833248:	10800217 	ldw	r2,8(r2)
  83324c:	108000c8 	cmpgei	r2,r2,3
  833250:	1000021e 	bne	r2,zero,83325c <tcp_reass+0x2c0>
      return (0);
  833254:	e03fff15 	stw	zero,-4(fp)
  833258:	00004c06 	br	83338c <tcp_reass+0x3f0>
   ti = tp->seg_next;
  83325c:	e0bffc17 	ldw	r2,-16(fp)
  833260:	10800017 	ldw	r2,0(r2)
  833264:	e0bffd15 	stw	r2,-12(fp)
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
  833268:	e0fffc17 	ldw	r3,-16(fp)
  83326c:	e0bffd17 	ldw	r2,-12(fp)
  833270:	10c00526 	beq	r2,r3,833288 <tcp_reass+0x2ec>
  833274:	e0bffd17 	ldw	r2,-12(fp)
  833278:	10c00617 	ldw	r3,24(r2)
  83327c:	e0bffc17 	ldw	r2,-16(fp)
  833280:	10801617 	ldw	r2,88(r2)
  833284:	18800226 	beq	r3,r2,833290 <tcp_reass+0x2f4>
      return (0);
  833288:	e03fff15 	stw	zero,-4(fp)
  83328c:	00003f06 	br	83338c <tcp_reass+0x3f0>
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
  833290:	e0bffc17 	ldw	r2,-16(fp)
  833294:	10800217 	ldw	r2,8(r2)
  833298:	108000d8 	cmpnei	r2,r2,3
  83329c:	1000071e 	bne	r2,zero,8332bc <tcp_reass+0x320>
  8332a0:	e0bffd17 	ldw	r2,-12(fp)
  8332a4:	1080028b 	ldhu	r2,10(r2)
  8332a8:	10bfffcc 	andi	r2,r2,65535
  8332ac:	1005003a 	cmpeq	r2,r2,zero
  8332b0:	1000021e 	bne	r2,zero,8332bc <tcp_reass+0x320>
      return (0);
  8332b4:	e03fff15 	stw	zero,-4(fp)
  8332b8:	00003406 	br	83338c <tcp_reass+0x3f0>
   do 
   {
      tp->rcv_nxt += ti->ti_len;
  8332bc:	e0bffc17 	ldw	r2,-16(fp)
  8332c0:	10c01617 	ldw	r3,88(r2)
  8332c4:	e0bffd17 	ldw	r2,-12(fp)
  8332c8:	1080028b 	ldhu	r2,10(r2)
  8332cc:	10bfffcc 	andi	r2,r2,65535
  8332d0:	1887883a 	add	r3,r3,r2
  8332d4:	e0bffc17 	ldw	r2,-16(fp)
  8332d8:	10c01615 	stw	r3,88(r2)
      flags = ti->ti_flags & TH_FIN;
  8332dc:	e0bffd17 	ldw	r2,-12(fp)
  8332e0:	10800843 	ldbu	r2,33(r2)
  8332e4:	10803fcc 	andi	r2,r2,255
  8332e8:	1080004c 	andi	r2,r2,1
  8332ec:	e0bff815 	stw	r2,-32(fp)
      remque(ti);
  8332f0:	e13ffd17 	ldw	r4,-12(fp)
  8332f4:	082bedc0 	call	82bedc <remque>
      m = dtom(ti);
  8332f8:	e13ffd17 	ldw	r4,-12(fp)
  8332fc:	082be340 	call	82be34 <dtom>
  833300:	e0bff915 	stw	r2,-28(fp)
      ti = (struct tcpiphdr *)ti->ti_next;
  833304:	e0bffd17 	ldw	r2,-12(fp)
  833308:	10800017 	ldw	r2,0(r2)
  83330c:	e0bffd15 	stw	r2,-12(fp)
      if (so->so_state & SS_CANTRCVMORE)
  833310:	e0bffa17 	ldw	r2,-24(fp)
  833314:	1080088b 	ldhu	r2,34(r2)
  833318:	10bfffcc 	andi	r2,r2,65535
  83331c:	1080080c 	andi	r2,r2,32
  833320:	1005003a 	cmpeq	r2,r2,zero
  833324:	1000031e 	bne	r2,zero,833334 <tcp_reass+0x398>
         m_freem (m);
  833328:	e13ff917 	ldw	r4,-28(fp)
  83332c:	082b8a40 	call	82b8a4 <m_freem>
  833330:	00000406 	br	833344 <tcp_reass+0x3a8>
      else
         sbappend (&so->so_rcv, m);
  833334:	e0bffa17 	ldw	r2,-24(fp)
  833338:	11000a04 	addi	r4,r2,40
  83333c:	e17ff917 	ldw	r5,-28(fp)
  833340:	0831d0c0 	call	831d0c <sbappend>
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
  833344:	e0fffc17 	ldw	r3,-16(fp)
  833348:	e0bffd17 	ldw	r2,-12(fp)
  83334c:	10c00526 	beq	r2,r3,833364 <tcp_reass+0x3c8>
  833350:	e0bffd17 	ldw	r2,-12(fp)
  833354:	10c00617 	ldw	r3,24(r2)
  833358:	e0bffc17 	ldw	r2,-16(fp)
  83335c:	10801617 	ldw	r2,88(r2)
  833360:	18bfd626 	beq	r3,r2,8332bc <tcp_reass+0x320>
      sorwakeup(so);
  833364:	e0bffa17 	ldw	r2,-24(fp)
  833368:	11400a04 	addi	r5,r2,40
  83336c:	e13ffa17 	ldw	r4,-24(fp)
  833370:	0831b480 	call	831b48 <sbwakeup>
   return (flags);
  833374:	e0bff817 	ldw	r2,-32(fp)
  833378:	e0bfff15 	stw	r2,-4(fp)
  83337c:	00000306 	br	83338c <tcp_reass+0x3f0>
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
  833380:	e13ffe17 	ldw	r4,-8(fp)
  833384:	082b8a40 	call	82b8a4 <m_freem>
   return (0);
  833388:	e03fff15 	stw	zero,-4(fp)
  83338c:	e0bfff17 	ldw	r2,-4(fp)
}
  833390:	e037883a 	mov	sp,fp
  833394:	dfc00117 	ldw	ra,4(sp)
  833398:	df000017 	ldw	fp,0(sp)
  83339c:	dec00204 	addi	sp,sp,8
  8333a0:	f800283a 	ret

008333a4 <tcp_input>:
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
  8333a4:	deffd004 	addi	sp,sp,-192
  8333a8:	dfc02f15 	stw	ra,188(sp)
  8333ac:	df002e15 	stw	fp,184(sp)
  8333b0:	df002e04 	addi	fp,sp,184
  8333b4:	e13ff015 	stw	r4,-64(fp)
  8333b8:	e17ff115 	stw	r5,-60(fp)
   ip6_addr    ip6_src;
   ip6_addr    ip6_dst;
#endif   /* IP_V6 */
   struct tcpiphdr * ti;
   struct inpcb * inp;
   struct mbuf *  om =  0;
  8333bc:	e03feb15 	stw	zero,-84(fp)
   int   len,  tlen, off;
   struct tcpcb * tp =  0;
  8333c0:	e03fe715 	stw	zero,-100(fp)
   int   tiflags;
   struct socket *   so =  NULL;
  8333c4:	e03fe515 	stw	zero,-108(fp)
   int   todrop,  acked,   ourfinisacked, needoutput  =  0;
  8333c8:	e03fe115 	stw	zero,-124(fp)
   int   dropsocket  =  0;
  8333cc:	e03fe015 	stw	zero,-128(fp)
   long  iss   =  0;
  8333d0:	e03fdf15 	stw	zero,-132(fp)
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
  8333d4:	00803934 	movhi	r2,228
  8333d8:	10a90c04 	addi	r2,r2,-23504
  8333dc:	10801917 	ldw	r2,100(r2)
  8333e0:	10c00044 	addi	r3,r2,1
  8333e4:	00803934 	movhi	r2,228
  8333e8:	10a90c04 	addi	r2,r2,-23504
  8333ec:	10c01915 	stw	r3,100(r2)
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
  8333f0:	00803934 	movhi	r2,228
  8333f4:	10a8de04 	addi	r2,r2,-23688
  8333f8:	10800917 	ldw	r2,36(r2)
  8333fc:	10c00044 	addi	r3,r2,1
  833400:	00803934 	movhi	r2,228
  833404:	10a8de04 	addi	r2,r2,-23688
  833408:	10c00915 	stw	r3,36(r2)
   {
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
  83340c:	e0bff017 	ldw	r2,-64(fp)
  833410:	10800317 	ldw	r2,12(r2)
  833414:	e0bfee15 	stw	r2,-72(fp)
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
  833418:	e0bfee17 	ldw	r2,-72(fp)
  83341c:	10800003 	ldbu	r2,0(r2)
  833420:	10803fcc 	andi	r2,r2,255
  833424:	108011b0 	cmpltui	r2,r2,70
  833428:	1000061e 	bne	r2,zero,833444 <tcp_input+0xa0>
      {
         np_stripoptions(pip, (struct mbuf *)m);
  83342c:	e13fee17 	ldw	r4,-72(fp)
  833430:	e17ff017 	ldw	r5,-64(fp)
  833434:	082c9100 	call	82c910 <np_stripoptions>
         pip = mtod(m, struct ip *);
  833438:	e0bff017 	ldw	r2,-64(fp)
  83343c:	10800317 	ldw	r2,12(r2)
  833440:	e0bfee15 	stw	r2,-72(fp)
      }
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
  833444:	e0bff017 	ldw	r2,-64(fp)
  833448:	10800217 	ldw	r2,8(r2)
  83344c:	10800a28 	cmpgeui	r2,r2,40
  833450:	1000081e 	bne	r2,zero,833474 <tcp_input+0xd0>
      {
         tcpstat.tcps_rcvshort++;
  833454:	00803934 	movhi	r2,228
  833458:	10a90c04 	addi	r2,r2,-23504
  83345c:	10801e17 	ldw	r2,120(r2)
  833460:	10c00044 	addi	r3,r2,1
  833464:	00803934 	movhi	r2,228
  833468:	10a90c04 	addi	r2,r2,-23504
  83346c:	10c01e15 	stw	r3,120(r2)
         return;
  833470:	00091c06 	br	8358e4 <tcp_input+0x2540>
      }
      tlen = pip->ip_len;     /* this was fudged by IP layer */
  833474:	e0bfee17 	ldw	r2,-72(fp)
  833478:	1080008b 	ldhu	r2,2(r2)
  83347c:	10bfffcc 	andi	r2,r2,65535
  833480:	e0bfe915 	stw	r2,-92(fp)
      /* The following is needed in the cases where the size of the
       * overlay structure is larger than the size of the ip header.
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
  833484:	e0bff017 	ldw	r2,-64(fp)
  833488:	10800317 	ldw	r2,12(r2)
  83348c:	e0bfed15 	stw	r2,-76(fp)
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
  833490:	e0bff017 	ldw	r2,-64(fp)
  833494:	10800117 	ldw	r2,4(r2)
  833498:	10c00117 	ldw	r3,4(r2)
  83349c:	e0bfed17 	ldw	r2,-76(fp)
  8334a0:	10c0032e 	bgeu	r2,r3,8334b0 <tcp_input+0x10c>
      {
         panic("tcp_input");
  8334a4:	01002174 	movhi	r4,133
  8334a8:	2136fd04 	addi	r4,r4,-9228
  8334ac:	0825a2c0 	call	825a2c <panic>
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
  8334b0:	e0bfed17 	ldw	r2,-76(fp)
  8334b4:	10800803 	ldbu	r2,32(r2)
  8334b8:	10803fcc 	andi	r2,r2,255
  8334bc:	1004d13a 	srli	r2,r2,4
  8334c0:	10803fcc 	andi	r2,r2,255
  8334c4:	1085883a 	add	r2,r2,r2
  8334c8:	1085883a 	add	r2,r2,r2
  8334cc:	e0bfe815 	stw	r2,-96(fp)
   if (off < sizeof (struct tcphdr) || off > tlen) 
  8334d0:	e0bfe817 	ldw	r2,-96(fp)
  8334d4:	10800530 	cmpltui	r2,r2,20
  8334d8:	1000031e 	bne	r2,zero,8334e8 <tcp_input+0x144>
  8334dc:	e0ffe817 	ldw	r3,-96(fp)
  8334e0:	e0bfe917 	ldw	r2,-92(fp)
  8334e4:	10c0110e 	bge	r2,r3,83352c <tcp_input+0x188>
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
  8334e8:	00803934 	movhi	r2,228
  8334ec:	10a90c04 	addi	r2,r2,-23504
  8334f0:	10801d17 	ldw	r2,116(r2)
  8334f4:	10c00044 	addi	r3,r2,1
  8334f8:	00803934 	movhi	r2,228
  8334fc:	10a90c04 	addi	r2,r2,-23504
  833500:	10c01d15 	stw	r3,116(r2)
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
  833504:	00803934 	movhi	r2,228
  833508:	10a8de04 	addi	r2,r2,-23688
  83350c:	10800d17 	ldw	r2,52(r2)
  833510:	10c00044 	addi	r3,r2,1
  833514:	00803934 	movhi	r2,228
  833518:	10a8de04 	addi	r2,r2,-23688
  83351c:	10c00d15 	stw	r3,52(r2)
      GOTO_DROP;
  833520:	00805784 	movi	r2,350
  833524:	d0a0ba15 	stw	r2,-32024(gp)
  833528:	0008e206 	br	8358b4 <tcp_input+0x2510>
   }
   tlen -= (int)off;
  83352c:	e0ffe917 	ldw	r3,-92(fp)
  833530:	e0bfe817 	ldw	r2,-96(fp)
  833534:	1885c83a 	sub	r2,r3,r2
  833538:	e0bfe915 	stw	r2,-92(fp)
   ti->ti_len = (u_short)tlen;
  83353c:	e0bfe917 	ldw	r2,-92(fp)
  833540:	1007883a 	mov	r3,r2
  833544:	e0bfed17 	ldw	r2,-76(fp)
  833548:	10c0028d 	sth	r3,10(r2)
   if (off > sizeof (struct tcphdr)) 
  83354c:	e0bfe817 	ldw	r2,-96(fp)
  833550:	10800570 	cmpltui	r2,r2,21
  833554:	1000341e 	bne	r2,zero,833628 <tcp_input+0x284>
   {
      int olen;      /* length of options field */
      u_char * op;   /* scratch option pointer */

      olen = off - sizeof (struct tcphdr);   /* get options length */
  833558:	e0bfe817 	ldw	r2,-96(fp)
  83355c:	10bffb04 	addi	r2,r2,-20
  833560:	e0bfdd15 	stw	r2,-140(fp)
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
  833564:	01000044 	movi	r4,1
  833568:	e17fdd17 	ldw	r5,-140(fp)
  83356c:	082b5c80 	call	82b5c8 <m_getnbuf>
  833570:	e0bfeb15 	stw	r2,-84(fp)
      if (om == 0)
  833574:	e0bfeb17 	ldw	r2,-84(fp)
  833578:	1004c03a 	cmpne	r2,r2,zero
  83357c:	1000031e 	bne	r2,zero,83358c <tcp_input+0x1e8>
         GOTO_DROP;
  833580:	00805a84 	movi	r2,362
  833584:	d0a0ba15 	stw	r2,-32024(gp)
  833588:	0008ca06 	br	8358b4 <tcp_input+0x2510>
      om->m_len = olen;       /* set mbuf length */
  83358c:	e0ffdd17 	ldw	r3,-140(fp)
  833590:	e0bfeb17 	ldw	r2,-84(fp)
  833594:	10c00215 	stw	r3,8(r2)
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
  833598:	e0bff017 	ldw	r2,-64(fp)
  83359c:	10800117 	ldw	r2,4(r2)
  8335a0:	1080080b 	ldhu	r2,32(r2)
  8335a4:	10ffffcc 	andi	r3,r2,65535
  8335a8:	00b76194 	movui	r2,56710
  8335ac:	1880051e 	bne	r3,r2,8335c4 <tcp_input+0x220>
         op = (u_char*)(m->m_data + 20);  /* past TCP header */
  8335b0:	e0bff017 	ldw	r2,-64(fp)
  8335b4:	10800317 	ldw	r2,12(r2)
  8335b8:	10800504 	addi	r2,r2,20
  8335bc:	e0bfdc15 	stw	r2,-144(fp)
  8335c0:	00000406 	br	8335d4 <tcp_input+0x230>
      else
         op = (u_char*)(m->m_data + 40);  /* past IP + TCP */
  8335c4:	e0bff017 	ldw	r2,-64(fp)
  8335c8:	10800317 	ldw	r2,12(r2)
  8335cc:	10800a04 	addi	r2,r2,40
  8335d0:	e0bfdc15 	stw	r2,-144(fp)
      MEMCPY(om->m_data, op, olen); /* copy to new mbuf */
  8335d4:	e0bfeb17 	ldw	r2,-84(fp)
  8335d8:	10c00317 	ldw	r3,12(r2)
  8335dc:	e1bfdd17 	ldw	r6,-140(fp)
  8335e0:	e0bfdc17 	ldw	r2,-144(fp)
  8335e4:	1809883a 	mov	r4,r3
  8335e8:	100b883a 	mov	r5,r2
  8335ec:	08073380 	call	807338 <memcpy>

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
  8335f0:	e0bff017 	ldw	r2,-64(fp)
  8335f4:	10c00317 	ldw	r3,12(r2)
  8335f8:	e0bfeb17 	ldw	r2,-84(fp)
  8335fc:	10800217 	ldw	r2,8(r2)
  833600:	1887883a 	add	r3,r3,r2
  833604:	e0bff017 	ldw	r2,-64(fp)
  833608:	10c00315 	stw	r3,12(r2)
      m->m_len -= om->m_len;
  83360c:	e0bff017 	ldw	r2,-64(fp)
  833610:	10c00217 	ldw	r3,8(r2)
  833614:	e0bfeb17 	ldw	r2,-84(fp)
  833618:	10800217 	ldw	r2,8(r2)
  83361c:	1887c83a 	sub	r3,r3,r2
  833620:	e0bff017 	ldw	r2,-64(fp)
  833624:	10c00215 	stw	r3,8(r2)
   }
   tiflags = ti->ti_flags;
  833628:	e0bfed17 	ldw	r2,-76(fp)
  83362c:	10800843 	ldbu	r2,33(r2)
  833630:	10803fcc 	andi	r2,r2,255
  833634:	e0bfe615 	stw	r2,-104(fp)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
  833638:	e0bfed17 	ldw	r2,-76(fp)
  83363c:	10800617 	ldw	r2,24(r2)
  833640:	1004d63a 	srli	r2,r2,24
  833644:	10c03fcc 	andi	r3,r2,255
  833648:	e0bfed17 	ldw	r2,-76(fp)
  83364c:	10800617 	ldw	r2,24(r2)
  833650:	1004d23a 	srli	r2,r2,8
  833654:	10bfc00c 	andi	r2,r2,65280
  833658:	1886b03a 	or	r3,r3,r2
  83365c:	e0bfed17 	ldw	r2,-76(fp)
  833660:	10800617 	ldw	r2,24(r2)
  833664:	10bfc00c 	andi	r2,r2,65280
  833668:	1004923a 	slli	r2,r2,8
  83366c:	1886b03a 	or	r3,r3,r2
  833670:	e0bfed17 	ldw	r2,-76(fp)
  833674:	10800617 	ldw	r2,24(r2)
  833678:	10803fcc 	andi	r2,r2,255
  83367c:	1004963a 	slli	r2,r2,24
  833680:	1886b03a 	or	r3,r3,r2
  833684:	e0bfed17 	ldw	r2,-76(fp)
  833688:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = ntohl(ti->ti_ack);
  83368c:	e0bfed17 	ldw	r2,-76(fp)
  833690:	10800717 	ldw	r2,28(r2)
  833694:	1004d63a 	srli	r2,r2,24
  833698:	10c03fcc 	andi	r3,r2,255
  83369c:	e0bfed17 	ldw	r2,-76(fp)
  8336a0:	10800717 	ldw	r2,28(r2)
  8336a4:	1004d23a 	srli	r2,r2,8
  8336a8:	10bfc00c 	andi	r2,r2,65280
  8336ac:	1886b03a 	or	r3,r3,r2
  8336b0:	e0bfed17 	ldw	r2,-76(fp)
  8336b4:	10800717 	ldw	r2,28(r2)
  8336b8:	10bfc00c 	andi	r2,r2,65280
  8336bc:	1004923a 	slli	r2,r2,8
  8336c0:	1886b03a 	or	r3,r3,r2
  8336c4:	e0bfed17 	ldw	r2,-76(fp)
  8336c8:	10800717 	ldw	r2,28(r2)
  8336cc:	10803fcc 	andi	r2,r2,255
  8336d0:	1004963a 	slli	r2,r2,24
  8336d4:	1886b03a 	or	r3,r3,r2
  8336d8:	e0bfed17 	ldw	r2,-76(fp)
  8336dc:	10c00715 	stw	r3,28(r2)
   ti->ti_urp = ntohs(ti->ti_urp);
  8336e0:	e0bfed17 	ldw	r2,-76(fp)
  8336e4:	1080098b 	ldhu	r2,38(r2)
  8336e8:	10bfffcc 	andi	r2,r2,65535
  8336ec:	1004d23a 	srli	r2,r2,8
  8336f0:	10803fcc 	andi	r2,r2,255
  8336f4:	1009883a 	mov	r4,r2
  8336f8:	e0bfed17 	ldw	r2,-76(fp)
  8336fc:	1080098b 	ldhu	r2,38(r2)
  833700:	10bfffcc 	andi	r2,r2,65535
  833704:	1004923a 	slli	r2,r2,8
  833708:	1007883a 	mov	r3,r2
  83370c:	00bfc004 	movi	r2,-256
  833710:	1884703a 	and	r2,r3,r2
  833714:	2084b03a 	or	r2,r4,r2
  833718:	1007883a 	mov	r3,r2
  83371c:	e0bfed17 	ldw	r2,-76(fp)
  833720:	10c0098d 	sth	r3,38(r2)
   /*
    * Locate pcb for segment.
    */
findpcb:

   switch(m->pkt->type)
  833724:	e0bff017 	ldw	r2,-64(fp)
  833728:	10800117 	ldw	r2,4(r2)
  83372c:	1080080b 	ldhu	r2,32(r2)
  833730:	10bfffcc 	andi	r2,r2,65535
  833734:	10800220 	cmpeqi	r2,r2,8
  833738:	1000011e 	bne	r2,zero,833740 <tcp_input+0x39c>
  83373c:	00001f06 	br	8337bc <tcp_input+0x418>
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
  833740:	e0bff017 	ldw	r2,-64(fp)
  833744:	10800317 	ldw	r2,12(r2)
  833748:	10c00a04 	addi	r3,r2,40
  83374c:	e0bff017 	ldw	r2,-64(fp)
  833750:	10c00315 	stw	r3,12(r2)
      m->m_len -= 40;
  833754:	e0bff017 	ldw	r2,-64(fp)
  833758:	10800217 	ldw	r2,8(r2)
  83375c:	10fff604 	addi	r3,r2,-40
  833760:	e0bff017 	ldw	r2,-64(fp)
  833764:	10c00215 	stw	r3,8(r2)

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
  833768:	e0bfed17 	ldw	r2,-76(fp)
  83376c:	11400317 	ldw	r5,12(r2)
  833770:	e0bfed17 	ldw	r2,-76(fp)
  833774:	1080050b 	ldhu	r2,20(r2)
  833778:	11bfffcc 	andi	r6,r2,65535
  83377c:	e0bfed17 	ldw	r2,-76(fp)
  833780:	11c00417 	ldw	r7,16(r2)
  833784:	e0bfed17 	ldw	r2,-76(fp)
  833788:	1080058b 	ldhu	r2,22(r2)
  83378c:	10bfffcc 	andi	r2,r2,65535
  833790:	d8800015 	stw	r2,0(sp)
  833794:	00800044 	movi	r2,1
  833798:	d8800115 	stw	r2,4(sp)
  83379c:	01003934 	movhi	r4,228
  8337a0:	21290104 	addi	r4,r4,-23548
  8337a4:	08471a00 	call	8471a0 <in_pcblookup>
  8337a8:	e0bfec15 	stw	r2,-80(fp)
    * If the state is CLOSED (i.e., TCB does not exist) then
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
  8337ac:	e0bfec17 	ldw	r2,-80(fp)
  8337b0:	1005003a 	cmpeq	r2,r2,zero
  8337b4:	1000031e 	bne	r2,zero,8337c4 <tcp_input+0x420>
  8337b8:	00000506 	br	8337d0 <tcp_input+0x42c>
      inp = ip6_pcblookup(&tcb, &ip6_src, ti->ti_sport, 
         &ip6_dst, ti->ti_dport, INPLOOKUP_WILDCARD);
      break;
#endif   /* IP_V6 */
   default:
      dtrap();
  8337bc:	082a7c80 	call	82a7c8 <dtrap>
      return;
  8337c0:	00084806 	br	8358e4 <tcp_input+0x2540>
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
      GOTO_DROPWITHRESET;
  8337c4:	00806b04 	movi	r2,428
  8337c8:	d0a0ba15 	stw	r2,-32024(gp)
  8337cc:	0007f506 	br	8357a4 <tcp_input+0x2400>
   tp = intotcpcb (inp);
  8337d0:	e0bfec17 	ldw	r2,-80(fp)
  8337d4:	10800917 	ldw	r2,36(r2)
  8337d8:	e0bfe715 	stw	r2,-100(fp)
   if (tp == 0)
  8337dc:	e0bfe717 	ldw	r2,-100(fp)
  8337e0:	1004c03a 	cmpne	r2,r2,zero
  8337e4:	1000031e 	bne	r2,zero,8337f4 <tcp_input+0x450>
      GOTO_DROPWITHRESET;
  8337e8:	00806bc4 	movi	r2,431
  8337ec:	d0a0ba15 	stw	r2,-32024(gp)
  8337f0:	0007ec06 	br	8357a4 <tcp_input+0x2400>
   if (tp->t_state == TCPS_CLOSED)
  8337f4:	e0bfe717 	ldw	r2,-100(fp)
  8337f8:	10800217 	ldw	r2,8(r2)
  8337fc:	1004c03a 	cmpne	r2,r2,zero
  833800:	1000031e 	bne	r2,zero,833810 <tcp_input+0x46c>
      GOTO_DROP;
  833804:	00806c44 	movi	r2,433
  833808:	d0a0ba15 	stw	r2,-32024(gp)
  83380c:	00082906 	br	8358b4 <tcp_input+0x2510>
   so = inp->inp_socket;
  833810:	e0bfec17 	ldw	r2,-80(fp)
  833814:	10800817 	ldw	r2,32(r2)
  833818:	e0bfe515 	stw	r2,-108(fp)
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
  83381c:	e0bfed17 	ldw	r2,-76(fp)
  833820:	1080088b 	ldhu	r2,34(r2)
  833824:	10bfffcc 	andi	r2,r2,65535
  833828:	1004d23a 	srli	r2,r2,8
  83382c:	10bfffcc 	andi	r2,r2,65535
  833830:	10c03fcc 	andi	r3,r2,255
  833834:	e0bfed17 	ldw	r2,-76(fp)
  833838:	1080088b 	ldhu	r2,34(r2)
  83383c:	10bfffcc 	andi	r2,r2,65535
  833840:	1004923a 	slli	r2,r2,8
  833844:	10bfc00c 	andi	r2,r2,65280
  833848:	1884b03a 	or	r2,r3,r2
  83384c:	e0bfde15 	stw	r2,-136(fp)
   {
      rx_win <<= tp->snd_wind_scale;         /* apply scale */
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
  833850:	e0bfe517 	ldw	r2,-108(fp)
  833854:	10800417 	ldw	r2,16(r2)
  833858:	1080008c 	andi	r2,r2,2
  83385c:	1005003a 	cmpeq	r2,r2,zero
  833860:	10002d1e 	bne	r2,zero,833918 <tcp_input+0x574>
   {
      so = sonewconn(so);
  833864:	e13fe517 	ldw	r4,-108(fp)
  833868:	08316200 	call	831620 <sonewconn>
  83386c:	e0bfe515 	stw	r2,-108(fp)
      if (so == 0)
  833870:	e0bfe517 	ldw	r2,-108(fp)
  833874:	1004c03a 	cmpne	r2,r2,zero
  833878:	1000031e 	bne	r2,zero,833888 <tcp_input+0x4e4>
         GOTO_DROP;
  83387c:	00807344 	movi	r2,461
  833880:	d0a0ba15 	stw	r2,-32024(gp)
  833884:	00080b06 	br	8358b4 <tcp_input+0x2510>
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
  833888:	e0bfe017 	ldw	r2,-128(fp)
  83388c:	10800044 	addi	r2,r2,1
  833890:	e0bfe015 	stw	r2,-128(fp)

      inp = (struct inpcb *)so->so_pcb;
  833894:	e0bfe517 	ldw	r2,-108(fp)
  833898:	10800117 	ldw	r2,4(r2)
  83389c:	e0bfec15 	stw	r2,-80(fp)
      inp->ifp = ifp;      /* save iface to peer */
  8338a0:	e0ffec17 	ldw	r3,-80(fp)
  8338a4:	e0bff117 	ldw	r2,-60(fp)
  8338a8:	18800a15 	stw	r2,40(r3)

      switch(so->so_domain)
  8338ac:	e0bfe517 	ldw	r2,-108(fp)
  8338b0:	10800517 	ldw	r2,20(r2)
  8338b4:	108000a0 	cmpeqi	r2,r2,2
  8338b8:	1000011e 	bne	r2,zero,8338c0 <tcp_input+0x51c>
  8338bc:	00000c06 	br	8338f0 <tcp_input+0x54c>
      {
#ifdef IP_V4
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
  8338c0:	e0bfed17 	ldw	r2,-76(fp)
  8338c4:	10c00417 	ldw	r3,16(r2)
  8338c8:	e0bfec17 	ldw	r2,-80(fp)
  8338cc:	10c00415 	stw	r3,16(r2)
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
  8338d0:	e0bff117 	ldw	r2,-60(fp)
  8338d4:	10c00917 	ldw	r3,36(r2)
  8338d8:	e0bff117 	ldw	r2,-60(fp)
  8338dc:	10800817 	ldw	r2,32(r2)
  8338e0:	1885c83a 	sub	r2,r3,r2
  8338e4:	10fff604 	addi	r3,r2,-40
  8338e8:	e0bfec17 	ldw	r2,-80(fp)
  8338ec:	10c00615 	stw	r3,24(r2)
         inp->inp_pmtu = ip6_pmtulookup(&ip6_src, ifp);
         break;
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
  8338f0:	e0bfed17 	ldw	r2,-76(fp)
  8338f4:	10c0058b 	ldhu	r3,22(r2)
  8338f8:	e0bfec17 	ldw	r2,-80(fp)
  8338fc:	10c0078d 	sth	r3,30(r2)
      tp = intotcpcb(inp);
  833900:	e0bfec17 	ldw	r2,-80(fp)
  833904:	10800917 	ldw	r2,36(r2)
  833908:	e0bfe715 	stw	r2,-100(fp)
      tp->t_state = TCPS_LISTEN;
  83390c:	e0ffe717 	ldw	r3,-100(fp)
  833910:	00800044 	movi	r2,1
  833914:	18800215 	stw	r2,8(r3)

   /*
    * Segment received on connection.
    * Reset idle time and keep-alive timer.
    */
   tp->t_idle = 0;
  833918:	e0bfe717 	ldw	r2,-100(fp)
  83391c:	10001d15 	stw	zero,116(r2)
   tp->t_timer[TCPT_KEEP] = tcp_keepidle;
  833920:	00802174 	movhi	r2,133
  833924:	1082bc04 	addi	r2,r2,2800
  833928:	10c00017 	ldw	r3,0(r2)
  83392c:	e0bfe717 	ldw	r2,-100(fp)
  833930:	10c00515 	stw	r3,20(r2)

   /*
    * Process options if not in LISTEN state,
    * else do it below (after getting remote address).
    */
   if (om && tp->t_state != TCPS_LISTEN) 
  833934:	e0bfeb17 	ldw	r2,-84(fp)
  833938:	1005003a 	cmpeq	r2,r2,zero
  83393c:	1000091e 	bne	r2,zero,833964 <tcp_input+0x5c0>
  833940:	e0bfe717 	ldw	r2,-100(fp)
  833944:	10800217 	ldw	r2,8(r2)
  833948:	10800060 	cmpeqi	r2,r2,1
  83394c:	1000051e 	bne	r2,zero,833964 <tcp_input+0x5c0>
   {
      tcp_dooptions(tp, om, ti);
  833950:	e13fe717 	ldw	r4,-100(fp)
  833954:	e17feb17 	ldw	r5,-84(fp)
  833958:	e1bfed17 	ldw	r6,-76(fp)
  83395c:	08358f80 	call	8358f8 <tcp_dooptions>
      om = 0;
  833960:	e03feb15 	stw	zero,-84(fp)
   }

   acked = (int)(ti->ti_ack - tp->snd_una);
  833964:	e0bfed17 	ldw	r2,-76(fp)
  833968:	10c00717 	ldw	r3,28(r2)
  83396c:	e0bfe717 	ldw	r2,-100(fp)
  833970:	10800e17 	ldw	r2,56(r2)
  833974:	1885c83a 	sub	r2,r3,r2
  833978:	e0bfe315 	stw	r2,-116(fp)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
  83397c:	e0bfe517 	ldw	r2,-108(fp)
  833980:	10800b17 	ldw	r2,44(r2)
  833984:	1007883a 	mov	r3,r2
  833988:	e0bfe517 	ldw	r2,-108(fp)
  83398c:	10800a17 	ldw	r2,40(r2)
  833990:	1885c83a 	sub	r2,r3,r2
  833994:	1004803a 	cmplt	r2,r2,zero
  833998:	1000071e 	bne	r2,zero,8339b8 <tcp_input+0x614>
  83399c:	e0bfe517 	ldw	r2,-108(fp)
  8339a0:	10c00b17 	ldw	r3,44(r2)
  8339a4:	e0bfe517 	ldw	r2,-108(fp)
  8339a8:	10800a17 	ldw	r2,40(r2)
  8339ac:	1885c83a 	sub	r2,r3,r2
  8339b0:	e0bffd15 	stw	r2,-12(fp)
  8339b4:	00000106 	br	8339bc <tcp_input+0x618>
  8339b8:	e03ffd15 	stw	zero,-12(fp)
  8339bc:	e0bffd17 	ldw	r2,-12(fp)
  8339c0:	e0bfdb15 	stw	r2,-148(fp)
      if (win < 0)
  8339c4:	e0bfdb17 	ldw	r2,-148(fp)
  8339c8:	1004403a 	cmpge	r2,r2,zero
  8339cc:	1000011e 	bne	r2,zero,8339d4 <tcp_input+0x630>
         win = 0;
  8339d0:	e03fdb15 	stw	zero,-148(fp)
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
  8339d4:	e0bfe717 	ldw	r2,-100(fp)
  8339d8:	10c01917 	ldw	r3,100(r2)
  8339dc:	e0bfe717 	ldw	r2,-100(fp)
  8339e0:	10801617 	ldw	r2,88(r2)
  8339e4:	1885c83a 	sub	r2,r3,r2
  8339e8:	e0ffdb17 	ldw	r3,-148(fp)
  8339ec:	e0fffc15 	stw	r3,-16(fp)
  8339f0:	e0bffb15 	stw	r2,-20(fp)
  8339f4:	e13ffb17 	ldw	r4,-20(fp)
  8339f8:	e0bffc17 	ldw	r2,-16(fp)
  8339fc:	2080022e 	bgeu	r4,r2,833a08 <tcp_input+0x664>
  833a00:	e0fffc17 	ldw	r3,-16(fp)
  833a04:	e0fffb15 	stw	r3,-20(fp)
  833a08:	e0bfe717 	ldw	r2,-100(fp)
  833a0c:	e13ffb17 	ldw	r4,-20(fp)
  833a10:	11001515 	stw	r4,84(r2)
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
  833a14:	e0bfe717 	ldw	r2,-100(fp)
  833a18:	10800217 	ldw	r2,8(r2)
  833a1c:	10800118 	cmpnei	r2,r2,4
  833a20:	10010f1e 	bne	r2,zero,833e60 <tcp_input+0xabc>
  833a24:	e0bfe617 	ldw	r2,-104(fp)
  833a28:	10800dcc 	andi	r2,r2,55
  833a2c:	10800418 	cmpnei	r2,r2,16
  833a30:	10010b1e 	bne	r2,zero,833e60 <tcp_input+0xabc>
  833a34:	e0bfed17 	ldw	r2,-76(fp)
  833a38:	10c00617 	ldw	r3,24(r2)
  833a3c:	e0bfe717 	ldw	r2,-100(fp)
  833a40:	10801617 	ldw	r2,88(r2)
  833a44:	1881061e 	bne	r3,r2,833e60 <tcp_input+0xabc>
  833a48:	e0bfde17 	ldw	r2,-136(fp)
  833a4c:	1005003a 	cmpeq	r2,r2,zero
  833a50:	1001031e 	bne	r2,zero,833e60 <tcp_input+0xabc>
  833a54:	e0bfe717 	ldw	r2,-100(fp)
  833a58:	10c01417 	ldw	r3,80(r2)
  833a5c:	e0bfde17 	ldw	r2,-136(fp)
  833a60:	1880ff1e 	bne	r3,r2,833e60 <tcp_input+0xabc>
  833a64:	e0bfe717 	ldw	r2,-100(fp)
  833a68:	10c00f17 	ldw	r3,60(r2)
  833a6c:	e0bfe717 	ldw	r2,-100(fp)
  833a70:	10801a17 	ldw	r2,104(r2)
  833a74:	1880fa1e 	bne	r3,r2,833e60 <tcp_input+0xabc>
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
       (ti->ti_seq == tp->rcv_nxt) &&
       (rx_win && rx_win == tp->snd_wnd) &&
       (tp->snd_nxt == tp->snd_max))
   {
      if (ti->ti_len == 0)
  833a78:	e0bfed17 	ldw	r2,-76(fp)
  833a7c:	1080028b 	ldhu	r2,10(r2)
  833a80:	10bfffcc 	andi	r2,r2,65535
  833a84:	1004c03a 	cmpne	r2,r2,zero
  833a88:	1000651e 	bne	r2,zero,833c20 <tcp_input+0x87c>
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
  833a8c:	e0bfed17 	ldw	r2,-76(fp)
  833a90:	10c00717 	ldw	r3,28(r2)
  833a94:	e0bfe717 	ldw	r2,-100(fp)
  833a98:	10800e17 	ldw	r2,56(r2)
  833a9c:	1885c83a 	sub	r2,r3,r2
  833aa0:	10800050 	cmplti	r2,r2,1
  833aa4:	1000ee1e 	bne	r2,zero,833e60 <tcp_input+0xabc>
  833aa8:	e0bfed17 	ldw	r2,-76(fp)
  833aac:	10c00717 	ldw	r3,28(r2)
  833ab0:	e0bfe717 	ldw	r2,-100(fp)
  833ab4:	10801a17 	ldw	r2,104(r2)
  833ab8:	1885c83a 	sub	r2,r3,r2
  833abc:	10800048 	cmpgei	r2,r2,1
  833ac0:	1000e71e 	bne	r2,zero,833e60 <tcp_input+0xabc>
  833ac4:	e0bfe717 	ldw	r2,-100(fp)
  833ac8:	10c01b17 	ldw	r3,108(r2)
  833acc:	e0bfe717 	ldw	r2,-100(fp)
  833ad0:	10801417 	ldw	r2,80(r2)
  833ad4:	1880e236 	bltu	r3,r2,833e60 <tcp_input+0xabc>
             tp->snd_cwnd >= tp->snd_wnd) 
         {
            /*
             * this is a pure ack for outstanding data.
             */
            ++tcpstat.tcps_predack;
  833ad8:	00803934 	movhi	r2,228
  833adc:	10a90c04 	addi	r2,r2,-23504
  833ae0:	10803517 	ldw	r2,212(r2)
  833ae4:	10c00044 	addi	r3,r2,1
  833ae8:	00803934 	movhi	r2,228
  833aec:	10a90c04 	addi	r2,r2,-23504
  833af0:	10c03515 	stw	r3,212(r2)
            if (tp->t_rttick && 
  833af4:	e0bfe717 	ldw	r2,-100(fp)
  833af8:	10801e17 	ldw	r2,120(r2)
  833afc:	1005003a 	cmpeq	r2,r2,zero
  833b00:	1000091e 	bne	r2,zero,833b28 <tcp_input+0x784>
  833b04:	e0bfed17 	ldw	r2,-76(fp)
  833b08:	10c00717 	ldw	r3,28(r2)
  833b0c:	e0bfe717 	ldw	r2,-100(fp)
  833b10:	10801f17 	ldw	r2,124(r2)
  833b14:	1885c83a 	sub	r2,r3,r2
  833b18:	10800050 	cmplti	r2,r2,1
  833b1c:	1000021e 	bne	r2,zero,833b28 <tcp_input+0x784>
#ifdef TCP_TIMESTAMP
               ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
            {
               tcp_xmit_timer(tp);
  833b20:	e13fe717 	ldw	r4,-100(fp)
  833b24:	0835bb40 	call	835bb4 <tcp_xmit_timer>
            }

            tcpstat.tcps_rcvackpack++;
  833b28:	00803934 	movhi	r2,228
  833b2c:	10a90c04 	addi	r2,r2,-23504
  833b30:	10802b17 	ldw	r2,172(r2)
  833b34:	10c00044 	addi	r3,r2,1
  833b38:	00803934 	movhi	r2,228
  833b3c:	10a90c04 	addi	r2,r2,-23504
  833b40:	10c02b15 	stw	r3,172(r2)
            tcpstat.tcps_rcvackbyte += acked;
  833b44:	00803934 	movhi	r2,228
  833b48:	10a90c04 	addi	r2,r2,-23504
  833b4c:	10c02c17 	ldw	r3,176(r2)
  833b50:	e0bfe317 	ldw	r2,-116(fp)
  833b54:	1887883a 	add	r3,r3,r2
  833b58:	00803934 	movhi	r2,228
  833b5c:	10a90c04 	addi	r2,r2,-23504
  833b60:	10c02c15 	stw	r3,176(r2)
            sbdrop(&so->so_snd, acked);
  833b64:	e0bfe517 	ldw	r2,-108(fp)
  833b68:	11001204 	addi	r4,r2,72
  833b6c:	e17fe317 	ldw	r5,-116(fp)
  833b70:	08323140 	call	832314 <sbdrop>
            tp->snd_una = ti->ti_ack;
  833b74:	e0bfed17 	ldw	r2,-76(fp)
  833b78:	10c00717 	ldw	r3,28(r2)
  833b7c:	e0bfe717 	ldw	r2,-100(fp)
  833b80:	10c00e15 	stw	r3,56(r2)
            m_freem(m);
  833b84:	e13ff017 	ldw	r4,-64(fp)
  833b88:	082b8a40 	call	82b8a4 <m_freem>
             * If process is waiting for space,
             * wakeup/selwakeup/signal.  If data
             * are ready to send, let tcp_output
             * decide between more output or persist.
             */
            if (tp->snd_una == tp->snd_max)
  833b8c:	e0bfe717 	ldw	r2,-100(fp)
  833b90:	10c00e17 	ldw	r3,56(r2)
  833b94:	e0bfe717 	ldw	r2,-100(fp)
  833b98:	10801a17 	ldw	r2,104(r2)
  833b9c:	1880031e 	bne	r3,r2,833bac <tcp_input+0x808>
               tp->t_timer[TCPT_REXMT] = 0;
  833ba0:	e0bfe717 	ldw	r2,-100(fp)
  833ba4:	10000315 	stw	zero,12(r2)
  833ba8:	00000806 	br	833bcc <tcp_input+0x828>
            else if (tp->t_timer[TCPT_PERSIST] == 0)
  833bac:	e0bfe717 	ldw	r2,-100(fp)
  833bb0:	10800417 	ldw	r2,16(r2)
  833bb4:	1004c03a 	cmpne	r2,r2,zero
  833bb8:	1000041e 	bne	r2,zero,833bcc <tcp_input+0x828>
               tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
  833bbc:	e0bfe717 	ldw	r2,-100(fp)
  833bc0:	10c00817 	ldw	r3,32(r2)
  833bc4:	e0bfe717 	ldw	r2,-100(fp)
  833bc8:	10c00315 	stw	r3,12(r2)

            if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
  833bcc:	e0bfe517 	ldw	r2,-108(fp)
  833bd0:	1080190b 	ldhu	r2,100(r2)
  833bd4:	10bfffcc 	andi	r2,r2,65535
  833bd8:	1080030c 	andi	r2,r2,12
  833bdc:	1005003a 	cmpeq	r2,r2,zero
  833be0:	1000041e 	bne	r2,zero,833bf4 <tcp_input+0x850>
               sowwakeup(so);
  833be4:	e0bfe517 	ldw	r2,-108(fp)
  833be8:	11401204 	addi	r5,r2,72
  833bec:	e13fe517 	ldw	r4,-108(fp)
  833bf0:	0831b480 	call	831b48 <sbwakeup>

            /* If there is more data in the send buffer, and some is
             * still unsent, then call tcp_output() to try to send it
             */
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
  833bf4:	e0bfe517 	ldw	r2,-108(fp)
  833bf8:	11001217 	ldw	r4,72(r2)
  833bfc:	e0bfe717 	ldw	r2,-100(fp)
  833c00:	10c00f17 	ldw	r3,60(r2)
  833c04:	e0bfe717 	ldw	r2,-100(fp)
  833c08:	10800e17 	ldw	r2,56(r2)
  833c0c:	1885c83a 	sub	r2,r3,r2
  833c10:	1107342e 	bgeu	r2,r4,8358e4 <tcp_input+0x2540>
               (void) tcp_output(tp);
  833c14:	e13fe717 	ldw	r4,-100(fp)
  833c18:	0835f840 	call	835f84 <tcp_output>
            return;
  833c1c:	00073106 	br	8358e4 <tcp_input+0x2540>
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
  833c20:	e0bfed17 	ldw	r2,-76(fp)
  833c24:	10c00717 	ldw	r3,28(r2)
  833c28:	e0bfe717 	ldw	r2,-100(fp)
  833c2c:	10800e17 	ldw	r2,56(r2)
  833c30:	18808b1e 	bne	r3,r2,833e60 <tcp_input+0xabc>
  833c34:	e0bfe717 	ldw	r2,-100(fp)
  833c38:	10c00017 	ldw	r3,0(r2)
  833c3c:	e0bfe717 	ldw	r2,-100(fp)
  833c40:	1880871e 	bne	r3,r2,833e60 <tcp_input+0xabc>
  833c44:	e0bfed17 	ldw	r2,-76(fp)
  833c48:	1080028b 	ldhu	r2,10(r2)
  833c4c:	10bfffcc 	andi	r2,r2,65535
  833c50:	e0bffa15 	stw	r2,-24(fp)
  833c54:	e0bfe517 	ldw	r2,-108(fp)
  833c58:	10800b17 	ldw	r2,44(r2)
  833c5c:	1007883a 	mov	r3,r2
  833c60:	e0bfe517 	ldw	r2,-108(fp)
  833c64:	10800a17 	ldw	r2,40(r2)
  833c68:	1885c83a 	sub	r2,r3,r2
  833c6c:	1004803a 	cmplt	r2,r2,zero
  833c70:	1000071e 	bne	r2,zero,833c90 <tcp_input+0x8ec>
  833c74:	e0bfe517 	ldw	r2,-108(fp)
  833c78:	10c00b17 	ldw	r3,44(r2)
  833c7c:	e0bfe517 	ldw	r2,-108(fp)
  833c80:	10800a17 	ldw	r2,40(r2)
  833c84:	1887c83a 	sub	r3,r3,r2
  833c88:	e0fff915 	stw	r3,-28(fp)
  833c8c:	00000106 	br	833c94 <tcp_input+0x8f0>
  833c90:	e03ff915 	stw	zero,-28(fp)
  833c94:	e0bff917 	ldw	r2,-28(fp)
  833c98:	e0fffa17 	ldw	r3,-24(fp)
  833c9c:	10c07036 	bltu	r2,r3,833e60 <tcp_input+0xabc>
#endif   /* TCP_ZEROCOPY */

         /* this may also be a garden-variety probe received because
          * the socket sendbuf was full.
          */
         if(tp->rcv_wnd == 0)
  833ca0:	e0bfe717 	ldw	r2,-100(fp)
  833ca4:	10801517 	ldw	r2,84(r2)
  833ca8:	1004c03a 	cmpne	r2,r2,zero
  833cac:	10000c1e 	bne	r2,zero,833ce0 <tcp_input+0x93c>
             * info in this seg, but Windows NT 4.0 has a nasty bug where it
             * will hammer us mericilessly with these probes (one customer
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
  833cb0:	00803934 	movhi	r2,228
  833cb4:	10a90c04 	addi	r2,r2,-23504
  833cb8:	10802817 	ldw	r2,160(r2)
  833cbc:	10c00044 	addi	r3,r2,1
  833cc0:	00803934 	movhi	r2,228
  833cc4:	10a90c04 	addi	r2,r2,-23504
  833cc8:	10c02815 	stw	r3,160(r2)
            m_freem (m);      /* free the received mbuf */
  833ccc:	e13ff017 	ldw	r4,-64(fp)
  833cd0:	082b8a40 	call	82b8a4 <m_freem>
            tcp_output(tp);   /* send the ack now... */
  833cd4:	e13fe717 	ldw	r4,-100(fp)
  833cd8:	0835f840 	call	835f84 <tcp_output>
            return;
  833cdc:	00070106 	br	8358e4 <tcp_input+0x2540>
         /*
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
  833ce0:	00803934 	movhi	r2,228
  833ce4:	10a90c04 	addi	r2,r2,-23504
  833ce8:	10803617 	ldw	r2,216(r2)
  833cec:	10c00044 	addi	r3,r2,1
  833cf0:	00803934 	movhi	r2,228
  833cf4:	10a90c04 	addi	r2,r2,-23504
  833cf8:	10c03615 	stw	r3,216(r2)
         tp->rcv_nxt += ti->ti_len;
  833cfc:	e0bfe717 	ldw	r2,-100(fp)
  833d00:	10c01617 	ldw	r3,88(r2)
  833d04:	e0bfed17 	ldw	r2,-76(fp)
  833d08:	1080028b 	ldhu	r2,10(r2)
  833d0c:	10bfffcc 	andi	r2,r2,65535
  833d10:	1887883a 	add	r3,r3,r2
  833d14:	e0bfe717 	ldw	r2,-100(fp)
  833d18:	10c01615 	stw	r3,88(r2)
         tcpstat.tcps_rcvpack++;
  833d1c:	00803934 	movhi	r2,228
  833d20:	10a90c04 	addi	r2,r2,-23504
  833d24:	10801a17 	ldw	r2,104(r2)
  833d28:	10c00044 	addi	r3,r2,1
  833d2c:	00803934 	movhi	r2,228
  833d30:	10a90c04 	addi	r2,r2,-23504
  833d34:	10c01a15 	stw	r3,104(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
  833d38:	00803934 	movhi	r2,228
  833d3c:	10a90c04 	addi	r2,r2,-23504
  833d40:	10c01b17 	ldw	r3,108(r2)
  833d44:	e0bfed17 	ldw	r2,-76(fp)
  833d48:	1080028b 	ldhu	r2,10(r2)
  833d4c:	10bfffcc 	andi	r2,r2,65535
  833d50:	1887883a 	add	r3,r3,r2
  833d54:	00803934 	movhi	r2,228
  833d58:	10a90c04 	addi	r2,r2,-23504
  833d5c:	10c01b15 	stw	r3,108(r2)
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
  833d60:	e0bfe517 	ldw	r2,-108(fp)
  833d64:	11000a04 	addi	r4,r2,40
  833d68:	e17ff017 	ldw	r5,-64(fp)
  833d6c:	0831d0c0 	call	831d0c <sbappend>
         sorwakeup(so);
  833d70:	e0bfe517 	ldw	r2,-108(fp)
  833d74:	11400a04 	addi	r5,r2,40
  833d78:	e13fe517 	ldw	r4,-108(fp)
  833d7c:	0831b480 	call	831b48 <sbwakeup>
         /*
          * If this is a short packet, then ACK now - with Nagel
          *   congestion avoidance sender won't send more until
          *   he gets an ACK.
          */
         if (tiflags & TH_PUSH)
  833d80:	e0bfe617 	ldw	r2,-104(fp)
  833d84:	1080020c 	andi	r2,r2,8
  833d88:	1005003a 	cmpeq	r2,r2,zero
  833d8c:	1000071e 	bne	r2,zero,833dac <tcp_input+0xa08>
            tp->t_flags |= TF_ACKNOW;
  833d90:	e0bfe717 	ldw	r2,-100(fp)
  833d94:	10800b0b 	ldhu	r2,44(r2)
  833d98:	10800054 	ori	r2,r2,1
  833d9c:	1007883a 	mov	r3,r2
  833da0:	e0bfe717 	ldw	r2,-100(fp)
  833da4:	10c00b0d 	sth	r3,44(r2)
  833da8:	00000606 	br	833dc4 <tcp_input+0xa20>
         else
            tp->t_flags |= TF_DELACK;
  833dac:	e0bfe717 	ldw	r2,-100(fp)
  833db0:	10800b0b 	ldhu	r2,44(r2)
  833db4:	10800094 	ori	r2,r2,2
  833db8:	1007883a 	mov	r3,r2
  833dbc:	e0bfe717 	ldw	r2,-100(fp)
  833dc0:	10c00b0d 	sth	r3,44(r2)

         /* see if we need to send an ack */
         adv = (int)(tp->rcv_wnd - (tcp_win)(tp->rcv_adv - tp->rcv_nxt));
  833dc4:	e0bfe717 	ldw	r2,-100(fp)
  833dc8:	11001517 	ldw	r4,84(r2)
  833dcc:	e0bfe717 	ldw	r2,-100(fp)
  833dd0:	10c01917 	ldw	r3,100(r2)
  833dd4:	e0bfe717 	ldw	r2,-100(fp)
  833dd8:	10801617 	ldw	r2,88(r2)
  833ddc:	1885c83a 	sub	r2,r3,r2
  833de0:	2085c83a 	sub	r2,r4,r2
  833de4:	e0bfda15 	stw	r2,-152(fp)

         if ((adv >= (int)(tp->t_maxseg * 2)) ||
  833de8:	e0bfe717 	ldw	r2,-100(fp)
  833dec:	10800a0b 	ldhu	r2,40(r2)
  833df0:	10bfffcc 	andi	r2,r2,65535
  833df4:	1085883a 	add	r2,r2,r2
  833df8:	1007883a 	mov	r3,r2
  833dfc:	e0bfda17 	ldw	r2,-152(fp)
  833e00:	10c0070e 	bge	r2,r3,833e20 <tcp_input+0xa7c>
  833e04:	e0bfe717 	ldw	r2,-100(fp)
  833e08:	10800b0b 	ldhu	r2,44(r2)
  833e0c:	10bfffcc 	andi	r2,r2,65535
  833e10:	1080004c 	andi	r2,r2,1
  833e14:	10803fcc 	andi	r2,r2,255
  833e18:	1005003a 	cmpeq	r2,r2,zero
  833e1c:	1006b11e 	bne	r2,zero,8358e4 <tcp_input+0x2540>
               tp->t_flags &= ~TF_ACKNOW;
               return;
            }
#endif   /* DO_DELAY_ACKS */

            tp->t_flags |= TF_ACKNOW;
  833e20:	e0bfe717 	ldw	r2,-100(fp)
  833e24:	10800b0b 	ldhu	r2,44(r2)
  833e28:	10800054 	ori	r2,r2,1
  833e2c:	1007883a 	mov	r3,r2
  833e30:	e0bfe717 	ldw	r2,-100(fp)
  833e34:	10c00b0d 	sth	r3,44(r2)
            tp->t_flags &= ~TF_DELACK;
  833e38:	e0bfe717 	ldw	r2,-100(fp)
  833e3c:	10c00b0b 	ldhu	r3,44(r2)
  833e40:	00bfff44 	movi	r2,-3
  833e44:	1884703a 	and	r2,r3,r2
  833e48:	1007883a 	mov	r3,r2
  833e4c:	e0bfe717 	ldw	r2,-100(fp)
  833e50:	10c00b0d 	sth	r3,44(r2)
            tcp_output(tp);   /* send the ack now... */
  833e54:	e13fe717 	ldw	r4,-100(fp)
  833e58:	0835f840 	call	835f84 <tcp_output>
         }

         return;
  833e5c:	0006a106 	br	8358e4 <tcp_input+0x2540>
      }
   }

   switch (tp->t_state) 
  833e60:	e0bfe717 	ldw	r2,-100(fp)
  833e64:	10800217 	ldw	r2,8(r2)
  833e68:	e0bff815 	stw	r2,-32(fp)
  833e6c:	e13ff817 	ldw	r4,-32(fp)
  833e70:	20800060 	cmpeqi	r2,r4,1
  833e74:	1000041e 	bne	r2,zero,833e88 <tcp_input+0xae4>
  833e78:	e0fff817 	ldw	r3,-32(fp)
  833e7c:	188000a0 	cmpeqi	r2,r3,2
  833e80:	1000b91e 	bne	r2,zero,834168 <tcp_input+0xdc4>
  833e84:	00019806 	br	8344e8 <tcp_input+0x1144>
    */
   case TCPS_LISTEN: 
   {
         struct mbuf *  am;

         if (tiflags & TH_RST)
  833e88:	e0bfe617 	ldw	r2,-104(fp)
  833e8c:	1080010c 	andi	r2,r2,4
  833e90:	1005003a 	cmpeq	r2,r2,zero
  833e94:	1000031e 	bne	r2,zero,833ea4 <tcp_input+0xb00>
            GOTO_DROP;
  833e98:	0080bec4 	movi	r2,763
  833e9c:	d0a0ba15 	stw	r2,-32024(gp)
  833ea0:	00068406 	br	8358b4 <tcp_input+0x2510>
         if (tiflags & TH_ACK)
  833ea4:	e0bfe617 	ldw	r2,-104(fp)
  833ea8:	1080040c 	andi	r2,r2,16
  833eac:	1005003a 	cmpeq	r2,r2,zero
  833eb0:	1000031e 	bne	r2,zero,833ec0 <tcp_input+0xb1c>
            GOTO_DROPWITHRESET;
  833eb4:	0080bf44 	movi	r2,765
  833eb8:	d0a0ba15 	stw	r2,-32024(gp)
  833ebc:	00063906 	br	8357a4 <tcp_input+0x2400>
         if ((tiflags & TH_SYN) == 0)
  833ec0:	e0bfe617 	ldw	r2,-104(fp)
  833ec4:	1080008c 	andi	r2,r2,2
  833ec8:	1004c03a 	cmpne	r2,r2,zero
  833ecc:	1000031e 	bne	r2,zero,833edc <tcp_input+0xb38>
            GOTO_DROP;
  833ed0:	0080bfc4 	movi	r2,767
  833ed4:	d0a0ba15 	stw	r2,-32024(gp)
  833ed8:	00067606 	br	8358b4 <tcp_input+0x2510>
         if(in_broadcast(ti->ti_dst.s_addr))
  833edc:	e0bfed17 	ldw	r2,-76(fp)
  833ee0:	11000417 	ldw	r4,16(r2)
  833ee4:	082c8d00 	call	82c8d0 <in_broadcast>
  833ee8:	1005003a 	cmpeq	r2,r2,zero
  833eec:	1000031e 	bne	r2,zero,833efc <tcp_input+0xb58>
            GOTO_DROP;
  833ef0:	0080c044 	movi	r2,769
  833ef4:	d0a0ba15 	stw	r2,-32024(gp)
  833ef8:	00066e06 	br	8358b4 <tcp_input+0x2510>
         am = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
  833efc:	01000244 	movi	r4,9
  833f00:	01400404 	movi	r5,16
  833f04:	082b5c80 	call	82b5c8 <m_getnbuf>
  833f08:	e0bfd915 	stw	r2,-156(fp)
         if (am == NULL)
  833f0c:	e0bfd917 	ldw	r2,-156(fp)
  833f10:	1004c03a 	cmpne	r2,r2,zero
  833f14:	1000031e 	bne	r2,zero,833f24 <tcp_input+0xb80>
            GOTO_DROP;
  833f18:	0080c104 	movi	r2,772
  833f1c:	d0a0ba15 	stw	r2,-32024(gp)
  833f20:	00066406 	br	8358b4 <tcp_input+0x2510>

#ifdef IP_V4
         if(inp->inp_socket->so_domain == AF_INET)
  833f24:	e0bfec17 	ldw	r2,-80(fp)
  833f28:	10800817 	ldw	r2,32(r2)
  833f2c:	10800517 	ldw	r2,20(r2)
  833f30:	10800098 	cmpnei	r2,r2,2
  833f34:	10002e1e 	bne	r2,zero,833ff0 <tcp_input+0xc4c>
         {
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
  833f38:	e0ffd917 	ldw	r3,-156(fp)
  833f3c:	00800404 	movi	r2,16
  833f40:	18800215 	stw	r2,8(r3)
         sin = mtod(am, struct sockaddr_in *);
  833f44:	e0bfd917 	ldw	r2,-156(fp)
  833f48:	10800317 	ldw	r2,12(r2)
  833f4c:	e0bfd815 	stw	r2,-160(fp)
         sin->sin_family = AF_INET;
  833f50:	e0ffd817 	ldw	r3,-160(fp)
  833f54:	00800084 	movi	r2,2
  833f58:	1880000d 	sth	r2,0(r3)
         sin->sin_addr = ti->ti_src;
  833f5c:	e0bfed17 	ldw	r2,-76(fp)
  833f60:	10c00317 	ldw	r3,12(r2)
  833f64:	e0bfd817 	ldw	r2,-160(fp)
  833f68:	10c00115 	stw	r3,4(r2)
         sin->sin_port = ti->ti_sport;
  833f6c:	e0bfed17 	ldw	r2,-76(fp)
  833f70:	10c0050b 	ldhu	r3,20(r2)
  833f74:	e0bfd817 	ldw	r2,-160(fp)
  833f78:	10c0008d 	sth	r3,2(r2)
         /* Assuming pcbconnect will work, we put the sender's address in 
          * the inp_laddr (after saving a local laddr copy). If the connect
          * fails we restore the inpcb before going to drop:
          */
         laddr = inp->inp_laddr;    /* save tmp laddr */
  833f7c:	e0bfec17 	ldw	r2,-80(fp)
  833f80:	10800417 	ldw	r2,16(r2)
  833f84:	e0bfef15 	stw	r2,-68(fp)
         if (inp->inp_laddr.s_addr == INADDR_ANY)
  833f88:	e0bfec17 	ldw	r2,-80(fp)
  833f8c:	10800417 	ldw	r2,16(r2)
  833f90:	1004c03a 	cmpne	r2,r2,zero
  833f94:	1000041e 	bne	r2,zero,833fa8 <tcp_input+0xc04>
            inp->inp_laddr = ti->ti_dst;
  833f98:	e0bfed17 	ldw	r2,-76(fp)
  833f9c:	10c00417 	ldw	r3,16(r2)
  833fa0:	e0bfec17 	ldw	r2,-80(fp)
  833fa4:	10c00415 	stw	r3,16(r2)
         if (in_pcbconnect (inp, am)) 
  833fa8:	e13fec17 	ldw	r4,-80(fp)
  833fac:	e17fd917 	ldw	r5,-156(fp)
  833fb0:	0846e380 	call	846e38 <in_pcbconnect>
  833fb4:	1005003a 	cmpeq	r2,r2,zero
  833fb8:	1000081e 	bne	r2,zero,833fdc <tcp_input+0xc38>
         {
            inp->inp_laddr = laddr;
  833fbc:	e0bfec17 	ldw	r2,-80(fp)
  833fc0:	e0ffef17 	ldw	r3,-68(fp)
  833fc4:	10c00415 	stw	r3,16(r2)
            (void) m_free(am);
  833fc8:	e13fd917 	ldw	r4,-156(fp)
  833fcc:	082b7700 	call	82b770 <m_free>
            GOTO_DROP;
  833fd0:	0080c684 	movi	r2,794
  833fd4:	d0a0ba15 	stw	r2,-32024(gp)
  833fd8:	00063606 	br	8358b4 <tcp_input+0x2510>
         }
         
         inp->ifp = ifp;      /* set interface for conn.*/
  833fdc:	e0ffec17 	ldw	r3,-80(fp)
  833fe0:	e0bff117 	ldw	r2,-60(fp)
  833fe4:	18800a15 	stw	r2,40(r3)
         
         (void) m_free (am);
  833fe8:	e13fd917 	ldw	r4,-156(fp)
  833fec:	082b7700 	call	82b770 <m_free>
            }
            (void) m_free(am);
         }
#endif   /* end v6 */

         tp->t_template = tcp_template(tp);
  833ff0:	e13fe717 	ldw	r4,-100(fp)
  833ff4:	083733c0 	call	83733c <tcp_template>
  833ff8:	1007883a 	mov	r3,r2
  833ffc:	e0bfe717 	ldw	r2,-100(fp)
  834000:	10c00c15 	stw	r3,48(r2)
         if (tp->t_template == 0) 
  834004:	e0bfe717 	ldw	r2,-100(fp)
  834008:	10800c17 	ldw	r2,48(r2)
  83400c:	1004c03a 	cmpne	r2,r2,zero
  834010:	1000071e 	bne	r2,zero,834030 <tcp_input+0xc8c>
         {
            SETTP(tp, tcp_drop(tp, ENOBUFS));
  834014:	e13fe717 	ldw	r4,-100(fp)
  834018:	01401a44 	movi	r5,105
  83401c:	08379f40 	call	8379f4 <tcp_drop>
            dropsocket = 0;      /* socket is already gone */
  834020:	e03fe015 	stw	zero,-128(fp)
            GOTO_DROP;
  834024:	0080d1c4 	movi	r2,839
  834028:	d0a0ba15 	stw	r2,-32024(gp)
  83402c:	00062106 	br	8358b4 <tcp_input+0x2510>
         }
         if (om) 
  834030:	e0bfeb17 	ldw	r2,-84(fp)
  834034:	1005003a 	cmpeq	r2,r2,zero
  834038:	1000051e 	bne	r2,zero,834050 <tcp_input+0xcac>
         {
            tcp_dooptions(tp, om, ti);
  83403c:	e13fe717 	ldw	r4,-100(fp)
  834040:	e17feb17 	ldw	r5,-84(fp)
  834044:	e1bfed17 	ldw	r6,-76(fp)
  834048:	08358f80 	call	8358f8 <tcp_dooptions>
            om = 0;
  83404c:	e03feb15 	stw	zero,-84(fp)
         }
         if (iss)
  834050:	e0bfdf17 	ldw	r2,-132(fp)
  834054:	1005003a 	cmpeq	r2,r2,zero
  834058:	1000041e 	bne	r2,zero,83406c <tcp_input+0xcc8>
            tp->iss = iss;
  83405c:	e0ffdf17 	ldw	r3,-132(fp)
  834060:	e0bfe717 	ldw	r2,-100(fp)
  834064:	10c01315 	stw	r3,76(r2)
  834068:	00000506 	br	834080 <tcp_input+0xcdc>
         else
            tp->iss = tcp_iss;
  83406c:	00802174 	movhi	r2,133
  834070:	10833304 	addi	r2,r2,3276
  834074:	10c00017 	ldw	r3,0(r2)
  834078:	e0bfe717 	ldw	r2,-100(fp)
  83407c:	10c01315 	stw	r3,76(r2)
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
  834080:	00802174 	movhi	r2,133
  834084:	10833304 	addi	r2,r2,3276
  834088:	10c00017 	ldw	r3,0(r2)
  83408c:	00be9fd4 	movui	r2,64127
  834090:	1887883a 	add	r3,r3,r2
  834094:	00802174 	movhi	r2,133
  834098:	10833304 	addi	r2,r2,3276
  83409c:	10c00015 	stw	r3,0(r2)
         tp->irs = ti->ti_seq;
  8340a0:	e0bfed17 	ldw	r2,-76(fp)
  8340a4:	10c00617 	ldw	r3,24(r2)
  8340a8:	e0bfe717 	ldw	r2,-100(fp)
  8340ac:	10c01815 	stw	r3,96(r2)
         tcp_sendseqinit(tp);
  8340b0:	e0bfe717 	ldw	r2,-100(fp)
  8340b4:	10c01317 	ldw	r3,76(r2)
  8340b8:	e0bfe717 	ldw	r2,-100(fp)
  8340bc:	10c01015 	stw	r3,64(r2)
  8340c0:	e0bfe717 	ldw	r2,-100(fp)
  8340c4:	10c01017 	ldw	r3,64(r2)
  8340c8:	e0bfe717 	ldw	r2,-100(fp)
  8340cc:	10c01a15 	stw	r3,104(r2)
  8340d0:	e0bfe717 	ldw	r2,-100(fp)
  8340d4:	10c01a17 	ldw	r3,104(r2)
  8340d8:	e0bfe717 	ldw	r2,-100(fp)
  8340dc:	10c00f15 	stw	r3,60(r2)
  8340e0:	e0bfe717 	ldw	r2,-100(fp)
  8340e4:	10c00f17 	ldw	r3,60(r2)
  8340e8:	e0bfe717 	ldw	r2,-100(fp)
  8340ec:	10c00e15 	stw	r3,56(r2)
         tcp_rcvseqinit(tp);
  8340f0:	e0bfe717 	ldw	r2,-100(fp)
  8340f4:	10801817 	ldw	r2,96(r2)
  8340f8:	10c00044 	addi	r3,r2,1
  8340fc:	e0bfe717 	ldw	r2,-100(fp)
  834100:	10c01615 	stw	r3,88(r2)
  834104:	e0bfe717 	ldw	r2,-100(fp)
  834108:	10c01617 	ldw	r3,88(r2)
  83410c:	e0bfe717 	ldw	r2,-100(fp)
  834110:	10c01915 	stw	r3,100(r2)
         tp->t_flags |= TF_ACKNOW;
  834114:	e0bfe717 	ldw	r2,-100(fp)
  834118:	10800b0b 	ldhu	r2,44(r2)
  83411c:	10800054 	ori	r2,r2,1
  834120:	1007883a 	mov	r3,r2
  834124:	e0bfe717 	ldw	r2,-100(fp)
  834128:	10c00b0d 	sth	r3,44(r2)
         tp->t_state = TCPS_SYN_RECEIVED;
  83412c:	e0ffe717 	ldw	r3,-100(fp)
  834130:	008000c4 	movi	r2,3
  834134:	18800215 	stw	r2,8(r3)
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
  834138:	e0ffe717 	ldw	r3,-100(fp)
  83413c:	00802584 	movi	r2,150
  834140:	18800515 	stw	r2,20(r3)
         dropsocket = 0;      /* committed to socket */
  834144:	e03fe015 	stw	zero,-128(fp)
         tcpstat.tcps_accepts++;
  834148:	00803934 	movhi	r2,228
  83414c:	10a90c04 	addi	r2,r2,-23504
  834150:	10800117 	ldw	r2,4(r2)
  834154:	10c00044 	addi	r3,r2,1
  834158:	00803934 	movhi	r2,228
  83415c:	10a90c04 	addi	r2,r2,-23504
  834160:	10c00115 	stw	r3,4(r2)
         goto trimthenstep6;
  834164:	00009d06 	br	8343dc <tcp_input+0x1038>
    *   if SYN has been acked change to ESTABLISHED else SYN_RCVD state
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
  834168:	e0ffec17 	ldw	r3,-80(fp)
  83416c:	e0bff117 	ldw	r2,-60(fp)
  834170:	18800a15 	stw	r2,40(r3)
      if ((tiflags & TH_ACK) &&
  834174:	e0bfe617 	ldw	r2,-104(fp)
  834178:	1080040c 	andi	r2,r2,16
  83417c:	1005003a 	cmpeq	r2,r2,zero
  834180:	1000111e 	bne	r2,zero,8341c8 <tcp_input+0xe24>
  834184:	e0bfed17 	ldw	r2,-76(fp)
  834188:	10c00717 	ldw	r3,28(r2)
  83418c:	e0bfe717 	ldw	r2,-100(fp)
  834190:	10801317 	ldw	r2,76(r2)
  834194:	1885c83a 	sub	r2,r3,r2
  834198:	10800050 	cmplti	r2,r2,1
  83419c:	1000071e 	bne	r2,zero,8341bc <tcp_input+0xe18>
  8341a0:	e0bfed17 	ldw	r2,-76(fp)
  8341a4:	10c00717 	ldw	r3,28(r2)
  8341a8:	e0bfe717 	ldw	r2,-100(fp)
  8341ac:	10801a17 	ldw	r2,104(r2)
  8341b0:	1885c83a 	sub	r2,r3,r2
  8341b4:	10800050 	cmplti	r2,r2,1
  8341b8:	1000031e 	bne	r2,zero,8341c8 <tcp_input+0xe24>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
          SEQ_GT(ti->ti_ack, tp->snd_max)))
      {
         GOTO_DROPWITHRESET;
  8341bc:	0080dc04 	movi	r2,880
  8341c0:	d0a0ba15 	stw	r2,-32024(gp)
  8341c4:	00057706 	br	8357a4 <tcp_input+0x2400>
      }
      if (tiflags & TH_RST) 
  8341c8:	e0bfe617 	ldw	r2,-104(fp)
  8341cc:	1080010c 	andi	r2,r2,4
  8341d0:	1005003a 	cmpeq	r2,r2,zero
  8341d4:	10000a1e 	bne	r2,zero,834200 <tcp_input+0xe5c>
      {
         if (tiflags & TH_ACK)
  8341d8:	e0bfe617 	ldw	r2,-104(fp)
  8341dc:	1080040c 	andi	r2,r2,16
  8341e0:	1005003a 	cmpeq	r2,r2,zero
  8341e4:	1000031e 	bne	r2,zero,8341f4 <tcp_input+0xe50>
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
  8341e8:	e13fe717 	ldw	r4,-100(fp)
  8341ec:	01401bc4 	movi	r5,111
  8341f0:	08379f40 	call	8379f4 <tcp_drop>
         GOTO_DROP;
  8341f4:	0080dd84 	movi	r2,886
  8341f8:	d0a0ba15 	stw	r2,-32024(gp)
  8341fc:	0005ad06 	br	8358b4 <tcp_input+0x2510>
      }
      if ((tiflags & TH_SYN) == 0)
  834200:	e0bfe617 	ldw	r2,-104(fp)
  834204:	1080008c 	andi	r2,r2,2
  834208:	1004c03a 	cmpne	r2,r2,zero
  83420c:	1000031e 	bne	r2,zero,83421c <tcp_input+0xe78>
         GOTO_DROP;
  834210:	0080de44 	movi	r2,889
  834214:	d0a0ba15 	stw	r2,-32024(gp)
  834218:	0005a606 	br	8358b4 <tcp_input+0x2510>
      if (tiflags & TH_ACK) 
  83421c:	e0bfe617 	ldw	r2,-104(fp)
  834220:	1080040c 	andi	r2,r2,16
  834224:	1005003a 	cmpeq	r2,r2,zero
  834228:	10000f1e 	bne	r2,zero,834268 <tcp_input+0xec4>
      {
         tp->snd_una = ti->ti_ack;
  83422c:	e0bfed17 	ldw	r2,-76(fp)
  834230:	10c00717 	ldw	r3,28(r2)
  834234:	e0bfe717 	ldw	r2,-100(fp)
  834238:	10c00e15 	stw	r3,56(r2)
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
  83423c:	e0bfe717 	ldw	r2,-100(fp)
  834240:	10c00f17 	ldw	r3,60(r2)
  834244:	e0bfe717 	ldw	r2,-100(fp)
  834248:	10800e17 	ldw	r2,56(r2)
  83424c:	1885c83a 	sub	r2,r3,r2
  834250:	1004403a 	cmpge	r2,r2,zero
  834254:	1000041e 	bne	r2,zero,834268 <tcp_input+0xec4>
            tp->snd_nxt = tp->snd_una;
  834258:	e0bfe717 	ldw	r2,-100(fp)
  83425c:	10c00e17 	ldw	r3,56(r2)
  834260:	e0bfe717 	ldw	r2,-100(fp)
  834264:	10c00f15 	stw	r3,60(r2)
      }
      tp->t_timer[TCPT_REXMT] = 0;
  834268:	e0bfe717 	ldw	r2,-100(fp)
  83426c:	10000315 	stw	zero,12(r2)
      tp->irs = ti->ti_seq;
  834270:	e0bfed17 	ldw	r2,-76(fp)
  834274:	10c00617 	ldw	r3,24(r2)
  834278:	e0bfe717 	ldw	r2,-100(fp)
  83427c:	10c01815 	stw	r3,96(r2)
      tcp_rcvseqinit(tp);
  834280:	e0bfe717 	ldw	r2,-100(fp)
  834284:	10801817 	ldw	r2,96(r2)
  834288:	10c00044 	addi	r3,r2,1
  83428c:	e0bfe717 	ldw	r2,-100(fp)
  834290:	10c01615 	stw	r3,88(r2)
  834294:	e0bfe717 	ldw	r2,-100(fp)
  834298:	10c01617 	ldw	r3,88(r2)
  83429c:	e0bfe717 	ldw	r2,-100(fp)
  8342a0:	10c01915 	stw	r3,100(r2)
      if (inp->inp_laddr.s_addr != ti->ti_dst.s_addr) 
  8342a4:	e0bfec17 	ldw	r2,-80(fp)
  8342a8:	10c00417 	ldw	r3,16(r2)
  8342ac:	e0bfed17 	ldw	r2,-76(fp)
  8342b0:	10800417 	ldw	r2,16(r2)
  8342b4:	18801926 	beq	r3,r2,83431c <tcp_input+0xf78>
          * the IP interface may have changed address since we sent our SYN
          * (e.g. PPP brings link up as a result of said SYN and gets new
          * address via IPCP); if so we need to update the inpcb and the
          * TCP header template with the new address.
          */
         if ((m->pkt->net != NULL)
  8342b8:	e0bff017 	ldw	r2,-64(fp)
  8342bc:	10800117 	ldw	r2,4(r2)
  8342c0:	10800617 	ldw	r2,24(r2)
  8342c4:	1005003a 	cmpeq	r2,r2,zero
  8342c8:	1000141e 	bne	r2,zero,83431c <tcp_input+0xf78>
  8342cc:	e0bff017 	ldw	r2,-64(fp)
  8342d0:	10800117 	ldw	r2,4(r2)
  8342d4:	10800617 	ldw	r2,24(r2)
  8342d8:	10c00a17 	ldw	r3,40(r2)
  8342dc:	e0bfed17 	ldw	r2,-76(fp)
  8342e0:	10800417 	ldw	r2,16(r2)
  8342e4:	18800d1e 	bne	r3,r2,83431c <tcp_input+0xf78>
             && (m->pkt->net->n_ipaddr == ti->ti_dst.s_addr)) 
      /* send an ack */
         {
            inp->inp_laddr = ti->ti_dst;
  8342e8:	e0bfed17 	ldw	r2,-76(fp)
  8342ec:	10c00417 	ldw	r3,16(r2)
  8342f0:	e0bfec17 	ldw	r2,-80(fp)
  8342f4:	10c00415 	stw	r3,16(r2)
            if (tp->t_template != NULL)
  8342f8:	e0bfe717 	ldw	r2,-100(fp)
  8342fc:	10800c17 	ldw	r2,48(r2)
  834300:	1005003a 	cmpeq	r2,r2,zero
  834304:	1000051e 	bne	r2,zero,83431c <tcp_input+0xf78>
               tp->t_template->ti_src = ti->ti_dst;
  834308:	e0bfe717 	ldw	r2,-100(fp)
  83430c:	10c00c17 	ldw	r3,48(r2)
  834310:	e0bfed17 	ldw	r2,-76(fp)
  834314:	10800417 	ldw	r2,16(r2)
  834318:	18800315 	stw	r2,12(r3)
         }
      }
      tp->t_flags |= TF_ACKNOW;
  83431c:	e0bfe717 	ldw	r2,-100(fp)
  834320:	10800b0b 	ldhu	r2,44(r2)
  834324:	10800054 	ori	r2,r2,1
  834328:	1007883a 	mov	r3,r2
  83432c:	e0bfe717 	ldw	r2,-100(fp)
  834330:	10c00b0d 	sth	r3,44(r2)
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
  834334:	e0bfe617 	ldw	r2,-104(fp)
  834338:	1080040c 	andi	r2,r2,16
  83433c:	1005003a 	cmpeq	r2,r2,zero
  834340:	1000231e 	bne	r2,zero,8343d0 <tcp_input+0x102c>
  834344:	e0bfe717 	ldw	r2,-100(fp)
  834348:	10c00e17 	ldw	r3,56(r2)
  83434c:	e0bfe717 	ldw	r2,-100(fp)
  834350:	10801317 	ldw	r2,76(r2)
  834354:	1885c83a 	sub	r2,r3,r2
  834358:	10800050 	cmplti	r2,r2,1
  83435c:	10001c1e 	bne	r2,zero,8343d0 <tcp_input+0x102c>
      {
         tcpstat.tcps_connects++;
  834360:	00803934 	movhi	r2,228
  834364:	10a90c04 	addi	r2,r2,-23504
  834368:	10800217 	ldw	r2,8(r2)
  83436c:	10c00044 	addi	r3,r2,1
  834370:	00803934 	movhi	r2,228
  834374:	10a90c04 	addi	r2,r2,-23504
  834378:	10c00215 	stw	r3,8(r2)
         tp->t_state = TCPS_ESTABLISHED;
  83437c:	e0ffe717 	ldw	r3,-100(fp)
  834380:	00800104 	movi	r2,4
  834384:	18800215 	stw	r2,8(r3)
         soisconnected (so);
  834388:	e13fe517 	ldw	r4,-108(fp)
  83438c:	08313dc0 	call	8313dc <soisconnected>
         tp->t_maxseg = tcp_mss(so);
  834390:	e13fe517 	ldw	r4,-108(fp)
  834394:	0835e680 	call	835e68 <tcp_mss>
  834398:	1007883a 	mov	r3,r2
  83439c:	e0bfe717 	ldw	r2,-100(fp)
  8343a0:	10c00a0d 	sth	r3,40(r2)
         (void) tcp_reass (tp, (struct tcpiphdr *)0, m);
  8343a4:	e13fe717 	ldw	r4,-100(fp)
  8343a8:	000b883a 	mov	r5,zero
  8343ac:	e1bff017 	ldw	r6,-64(fp)
  8343b0:	0832f9c0 	call	832f9c <tcp_reass>
         /*
          * if we didn't have to retransmit the SYN,
          * use its rtt as our initial srtt & rtt var.
          */
         if (tp->t_rttick) 
  8343b4:	e0bfe717 	ldw	r2,-100(fp)
  8343b8:	10801e17 	ldw	r2,120(r2)
  8343bc:	1005003a 	cmpeq	r2,r2,zero
  8343c0:	1000061e 	bne	r2,zero,8343dc <tcp_input+0x1038>
         {
            tcp_xmit_timer(tp);
  8343c4:	e13fe717 	ldw	r4,-100(fp)
  8343c8:	0835bb40 	call	835bb4 <tcp_xmit_timer>
            if (tp->t_template != NULL)
               tp->t_template->ti_src = ti->ti_dst;
         }
      }
      tp->t_flags |= TF_ACKNOW;
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
  8343cc:	00000306 	br	8343dc <tcp_input+0x1038>
         if (tp->t_rttick) 
         {
            tcp_xmit_timer(tp);
         }
      } else
         tp->t_state = TCPS_SYN_RECEIVED;
  8343d0:	e0ffe717 	ldw	r3,-100(fp)
  8343d4:	008000c4 	movi	r2,3
  8343d8:	18800215 	stw	r2,8(r3)
      /*
       * Advance ti->ti_seq to correspond to first data byte.
       * If data, trim to stay within window,
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
  8343dc:	e0bfed17 	ldw	r2,-76(fp)
  8343e0:	10800617 	ldw	r2,24(r2)
  8343e4:	10c00044 	addi	r3,r2,1
  8343e8:	e0bfed17 	ldw	r2,-76(fp)
  8343ec:	10c00615 	stw	r3,24(r2)
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
  8343f0:	e0bfed17 	ldw	r2,-76(fp)
  8343f4:	1080028b 	ldhu	r2,10(r2)
  8343f8:	10ffffcc 	andi	r3,r2,65535
  8343fc:	e0bfe717 	ldw	r2,-100(fp)
  834400:	10801517 	ldw	r2,84(r2)
  834404:	10c02e2e 	bgeu	r2,r3,8344c0 <tcp_input+0x111c>
      {
         todrop = ti->ti_len - (u_short)tp->rcv_wnd;
  834408:	e0bfed17 	ldw	r2,-76(fp)
  83440c:	1080028b 	ldhu	r2,10(r2)
  834410:	10ffffcc 	andi	r3,r2,65535
  834414:	e0bfe717 	ldw	r2,-100(fp)
  834418:	10801517 	ldw	r2,84(r2)
  83441c:	10bfffcc 	andi	r2,r2,65535
  834420:	1885c83a 	sub	r2,r3,r2
  834424:	e0bfe415 	stw	r2,-112(fp)
         /* XXX work around 4.2 m_adj bug */
         if (m->m_len) 
  834428:	e0bff017 	ldw	r2,-64(fp)
  83442c:	10800217 	ldw	r2,8(r2)
  834430:	1005003a 	cmpeq	r2,r2,zero
  834434:	1000051e 	bne	r2,zero,83444c <tcp_input+0x10a8>
         {
            m_adj(m, -todrop);
  834438:	e0bfe417 	ldw	r2,-112(fp)
  83443c:	008bc83a 	sub	r5,zero,r2
  834440:	e13ff017 	ldw	r4,-64(fp)
  834444:	082bc0c0 	call	82bc0c <m_adj>
  834448:	00000506 	br	834460 <tcp_input+0x10bc>
         }
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
  83444c:	e0bff017 	ldw	r2,-64(fp)
  834450:	11000617 	ldw	r4,24(r2)
  834454:	e0bfe417 	ldw	r2,-112(fp)
  834458:	008bc83a 	sub	r5,zero,r2
  83445c:	082bc0c0 	call	82bc0c <m_adj>
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
  834460:	e0bfe717 	ldw	r2,-100(fp)
  834464:	10801517 	ldw	r2,84(r2)
  834468:	1007883a 	mov	r3,r2
  83446c:	e0bfed17 	ldw	r2,-76(fp)
  834470:	10c0028d 	sth	r3,10(r2)
         tiflags &= ~TH_FIN;
  834474:	e0ffe617 	ldw	r3,-104(fp)
  834478:	00bfff84 	movi	r2,-2
  83447c:	1884703a 	and	r2,r3,r2
  834480:	e0bfe615 	stw	r2,-104(fp)
         tcpstat.tcps_rcvpackafterwin++;
  834484:	00803934 	movhi	r2,228
  834488:	10a90c04 	addi	r2,r2,-23504
  83448c:	10802517 	ldw	r2,148(r2)
  834490:	10c00044 	addi	r3,r2,1
  834494:	00803934 	movhi	r2,228
  834498:	10a90c04 	addi	r2,r2,-23504
  83449c:	10c02515 	stw	r3,148(r2)
         tcpstat.tcps_rcvbyteafterwin += todrop;
  8344a0:	00803934 	movhi	r2,228
  8344a4:	10a90c04 	addi	r2,r2,-23504
  8344a8:	10c02617 	ldw	r3,152(r2)
  8344ac:	e0bfe417 	ldw	r2,-112(fp)
  8344b0:	1887883a 	add	r3,r3,r2
  8344b4:	00803934 	movhi	r2,228
  8344b8:	10a90c04 	addi	r2,r2,-23504
  8344bc:	10c02615 	stw	r3,152(r2)
      }
      tp->snd_wl1 = ti->ti_seq - 1;
  8344c0:	e0bfed17 	ldw	r2,-76(fp)
  8344c4:	10800617 	ldw	r2,24(r2)
  8344c8:	10ffffc4 	addi	r3,r2,-1
  8344cc:	e0bfe717 	ldw	r2,-100(fp)
  8344d0:	10c01115 	stw	r3,68(r2)
      tp->rcv_up = ti->ti_seq;
  8344d4:	e0bfed17 	ldw	r2,-76(fp)
  8344d8:	10c00617 	ldw	r3,24(r2)
  8344dc:	e0bfe717 	ldw	r2,-100(fp)
  8344e0:	10c01715 	stw	r3,92(r2)
      goto step6;
  8344e4:	00032406 	br	835178 <tcp_input+0x1dd4>
    * States other than LISTEN or SYN_SENT.
    * First check that at least some bytes of segment are within 
    * receive window.  If segment begins before rcv_nxt,
    * drop leading data (and SYN); if nothing left, just ack.
    */
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
  8344e8:	e0bfe717 	ldw	r2,-100(fp)
  8344ec:	10c01617 	ldw	r3,88(r2)
  8344f0:	e0bfed17 	ldw	r2,-76(fp)
  8344f4:	10800617 	ldw	r2,24(r2)
  8344f8:	1885c83a 	sub	r2,r3,r2
  8344fc:	e0bfe415 	stw	r2,-112(fp)
   if (todrop > 0) 
  834500:	e0bfe417 	ldw	r2,-112(fp)
  834504:	10800050 	cmplti	r2,r2,1
  834508:	1000971e 	bne	r2,zero,834768 <tcp_input+0x13c4>
   {
      if (tiflags & TH_SYN) 
  83450c:	e0bfe617 	ldw	r2,-104(fp)
  834510:	1080008c 	andi	r2,r2,2
  834514:	1005003a 	cmpeq	r2,r2,zero
  834518:	10001c1e 	bne	r2,zero,83458c <tcp_input+0x11e8>
      {
         tiflags &= ~TH_SYN;
  83451c:	e0ffe617 	ldw	r3,-104(fp)
  834520:	00bfff44 	movi	r2,-3
  834524:	1884703a 	and	r2,r3,r2
  834528:	e0bfe615 	stw	r2,-104(fp)
         ti->ti_seq++;
  83452c:	e0bfed17 	ldw	r2,-76(fp)
  834530:	10800617 	ldw	r2,24(r2)
  834534:	10c00044 	addi	r3,r2,1
  834538:	e0bfed17 	ldw	r2,-76(fp)
  83453c:	10c00615 	stw	r3,24(r2)
         if (ti->ti_urp > 1) 
  834540:	e0bfed17 	ldw	r2,-76(fp)
  834544:	1080098b 	ldhu	r2,38(r2)
  834548:	10bfffcc 	andi	r2,r2,65535
  83454c:	108000b0 	cmpltui	r2,r2,2
  834550:	1000071e 	bne	r2,zero,834570 <tcp_input+0x11cc>
            ti->ti_urp--;
  834554:	e0bfed17 	ldw	r2,-76(fp)
  834558:	1080098b 	ldhu	r2,38(r2)
  83455c:	10bfffc4 	addi	r2,r2,-1
  834560:	1007883a 	mov	r3,r2
  834564:	e0bfed17 	ldw	r2,-76(fp)
  834568:	10c0098d 	sth	r3,38(r2)
  83456c:	00000406 	br	834580 <tcp_input+0x11dc>
         else
            tiflags &= ~TH_URG;
  834570:	e0bfe617 	ldw	r2,-104(fp)
  834574:	00fff7c4 	movi	r3,-33
  834578:	10c4703a 	and	r2,r2,r3
  83457c:	e0bfe615 	stw	r2,-104(fp)
         todrop--;
  834580:	e0bfe417 	ldw	r2,-112(fp)
  834584:	10bfffc4 	addi	r2,r2,-1
  834588:	e0bfe415 	stw	r2,-112(fp)
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
  83458c:	e0bfed17 	ldw	r2,-76(fp)
  834590:	1080028b 	ldhu	r2,10(r2)
  834594:	10ffffcc 	andi	r3,r2,65535
  834598:	e0bfe417 	ldw	r2,-112(fp)
  83459c:	18800916 	blt	r3,r2,8345c4 <tcp_input+0x1220>
  8345a0:	e0bfed17 	ldw	r2,-76(fp)
  8345a4:	1080028b 	ldhu	r2,10(r2)
  8345a8:	10ffffcc 	andi	r3,r2,65535
  8345ac:	e0bfe417 	ldw	r2,-112(fp)
  8345b0:	18803a1e 	bne	r3,r2,83469c <tcp_input+0x12f8>
  8345b4:	e0bfe617 	ldw	r2,-104(fp)
  8345b8:	1080004c 	andi	r2,r2,1
  8345bc:	1004c03a 	cmpne	r2,r2,zero
  8345c0:	1000361e 	bne	r2,zero,83469c <tcp_input+0x12f8>
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
  8345c4:	00803934 	movhi	r2,228
  8345c8:	10a90c04 	addi	r2,r2,-23504
  8345cc:	10801f17 	ldw	r2,124(r2)
  8345d0:	10c00044 	addi	r3,r2,1
  8345d4:	00803934 	movhi	r2,228
  8345d8:	10a90c04 	addi	r2,r2,-23504
  8345dc:	10c01f15 	stw	r3,124(r2)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
  8345e0:	00803934 	movhi	r2,228
  8345e4:	10a90c04 	addi	r2,r2,-23504
  8345e8:	10c02017 	ldw	r3,128(r2)
  8345ec:	e0bfed17 	ldw	r2,-76(fp)
  8345f0:	1080028b 	ldhu	r2,10(r2)
  8345f4:	10bfffcc 	andi	r2,r2,65535
  8345f8:	1887883a 	add	r3,r3,r2
  8345fc:	00803934 	movhi	r2,228
  834600:	10a90c04 	addi	r2,r2,-23504
  834604:	10c02015 	stw	r3,128(r2)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
  834608:	e0bfe617 	ldw	r2,-104(fp)
  83460c:	1080004c 	andi	r2,r2,1
  834610:	1080005c 	xori	r2,r2,1
  834614:	10803fcc 	andi	r2,r2,255
  834618:	1004c03a 	cmpne	r2,r2,zero
  83461c:	1000061e 	bne	r2,zero,834638 <tcp_input+0x1294>
  834620:	e0bfed17 	ldw	r2,-76(fp)
  834624:	1080028b 	ldhu	r2,10(r2)
  834628:	10bfffcc 	andi	r2,r2,65535
  83462c:	10c00044 	addi	r3,r2,1
  834630:	e0bfe417 	ldw	r2,-112(fp)
  834634:	18800a26 	beq	r3,r2,834660 <tcp_input+0x12bc>
  834638:	e0bfe617 	ldw	r2,-104(fp)
  83463c:	1080010c 	andi	r2,r2,4
  834640:	1005003a 	cmpeq	r2,r2,zero
  834644:	1004451e 	bne	r2,zero,83575c <tcp_input+0x23b8>
  834648:	e0bfed17 	ldw	r2,-76(fp)
  83464c:	10c00617 	ldw	r3,24(r2)
  834650:	e0bfe717 	ldw	r2,-100(fp)
  834654:	10801617 	ldw	r2,88(r2)
  834658:	10bfffc4 	addi	r2,r2,-1
  83465c:	18843f1e 	bne	r3,r2,83575c <tcp_input+0x23b8>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
         {
            todrop = ti->ti_len;
  834660:	e0bfed17 	ldw	r2,-76(fp)
  834664:	1080028b 	ldhu	r2,10(r2)
  834668:	10bfffcc 	andi	r2,r2,65535
  83466c:	e0bfe415 	stw	r2,-112(fp)
            tiflags &= ~TH_FIN;
  834670:	e0ffe617 	ldw	r3,-104(fp)
  834674:	00bfff84 	movi	r2,-2
  834678:	1884703a 	and	r2,r3,r2
  83467c:	e0bfe615 	stw	r2,-104(fp)
            tp->t_flags |= TF_ACKNOW;
  834680:	e0bfe717 	ldw	r2,-100(fp)
  834684:	10800b0b 	ldhu	r2,44(r2)
  834688:	10800054 	ori	r2,r2,1
  83468c:	1007883a 	mov	r3,r2
  834690:	e0bfe717 	ldw	r2,-100(fp)
  834694:	10c00b0d 	sth	r3,44(r2)
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
  834698:	00000f06 	br	8346d8 <tcp_input+0x1334>
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
  83469c:	00803934 	movhi	r2,228
  8346a0:	10a90c04 	addi	r2,r2,-23504
  8346a4:	10802117 	ldw	r2,132(r2)
  8346a8:	10c00044 	addi	r3,r2,1
  8346ac:	00803934 	movhi	r2,228
  8346b0:	10a90c04 	addi	r2,r2,-23504
  8346b4:	10c02115 	stw	r3,132(r2)
         tcpstat.tcps_rcvpartdupbyte += todrop;
  8346b8:	00803934 	movhi	r2,228
  8346bc:	10a90c04 	addi	r2,r2,-23504
  8346c0:	10c02217 	ldw	r3,136(r2)
  8346c4:	e0bfe417 	ldw	r2,-112(fp)
  8346c8:	1887883a 	add	r3,r3,r2
  8346cc:	00803934 	movhi	r2,228
  8346d0:	10a90c04 	addi	r2,r2,-23504
  8346d4:	10c02215 	stw	r3,136(r2)
      }
      m_adj(m, todrop);
  8346d8:	e13ff017 	ldw	r4,-64(fp)
  8346dc:	e17fe417 	ldw	r5,-112(fp)
  8346e0:	082bc0c0 	call	82bc0c <m_adj>
      ti->ti_seq += todrop;
  8346e4:	e0bfed17 	ldw	r2,-76(fp)
  8346e8:	10c00617 	ldw	r3,24(r2)
  8346ec:	e0bfe417 	ldw	r2,-112(fp)
  8346f0:	1887883a 	add	r3,r3,r2
  8346f4:	e0bfed17 	ldw	r2,-76(fp)
  8346f8:	10c00615 	stw	r3,24(r2)
      ti->ti_len -= (u_short)todrop;
  8346fc:	e0bfed17 	ldw	r2,-76(fp)
  834700:	10c0028b 	ldhu	r3,10(r2)
  834704:	e0bfe417 	ldw	r2,-112(fp)
  834708:	1885c83a 	sub	r2,r3,r2
  83470c:	1007883a 	mov	r3,r2
  834710:	e0bfed17 	ldw	r2,-76(fp)
  834714:	10c0028d 	sth	r3,10(r2)
      if (ti->ti_urp > (u_short)todrop)
  834718:	e0bfed17 	ldw	r2,-76(fp)
  83471c:	10c0098b 	ldhu	r3,38(r2)
  834720:	e0bfe417 	ldw	r2,-112(fp)
  834724:	18ffffcc 	andi	r3,r3,65535
  834728:	10bfffcc 	andi	r2,r2,65535
  83472c:	10c0082e 	bgeu	r2,r3,834750 <tcp_input+0x13ac>
         ti->ti_urp -= (u_short)todrop;
  834730:	e0bfed17 	ldw	r2,-76(fp)
  834734:	10c0098b 	ldhu	r3,38(r2)
  834738:	e0bfe417 	ldw	r2,-112(fp)
  83473c:	1885c83a 	sub	r2,r3,r2
  834740:	1007883a 	mov	r3,r2
  834744:	e0bfed17 	ldw	r2,-76(fp)
  834748:	10c0098d 	sth	r3,38(r2)
  83474c:	00000606 	br	834768 <tcp_input+0x13c4>
      else 
      {
         tiflags &= ~TH_URG;
  834750:	e0ffe617 	ldw	r3,-104(fp)
  834754:	00bff7c4 	movi	r2,-33
  834758:	1884703a 	and	r2,r3,r2
  83475c:	e0bfe615 	stw	r2,-104(fp)
         ti->ti_urp = 0;
  834760:	e0bfed17 	ldw	r2,-76(fp)
  834764:	1000098d 	sth	zero,38(r2)

   /*
    * If new data are received on a connection after the
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
  834768:	e0bfe517 	ldw	r2,-108(fp)
  83476c:	1080088b 	ldhu	r2,34(r2)
  834770:	10bfffcc 	andi	r2,r2,65535
  834774:	1080004c 	andi	r2,r2,1
  834778:	10803fcc 	andi	r2,r2,255
  83477c:	1005003a 	cmpeq	r2,r2,zero
  834780:	1000161e 	bne	r2,zero,8347dc <tcp_input+0x1438>
  834784:	e0bfe717 	ldw	r2,-100(fp)
  834788:	10800217 	ldw	r2,8(r2)
  83478c:	10800190 	cmplti	r2,r2,6
  834790:	1000121e 	bne	r2,zero,8347dc <tcp_input+0x1438>
  834794:	e0bfed17 	ldw	r2,-76(fp)
  834798:	1080028b 	ldhu	r2,10(r2)
  83479c:	10bfffcc 	andi	r2,r2,65535
  8347a0:	1005003a 	cmpeq	r2,r2,zero
  8347a4:	10000d1e 	bne	r2,zero,8347dc <tcp_input+0x1438>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
   {
      tp = tcp_close(tp);
  8347a8:	e13fe717 	ldw	r4,-100(fp)
  8347ac:	0837aa00 	call	837aa0 <tcp_close>
  8347b0:	e0bfe715 	stw	r2,-100(fp)
      tcpstat.tcps_rcvafterclose++;
  8347b4:	00803934 	movhi	r2,228
  8347b8:	10a90c04 	addi	r2,r2,-23504
  8347bc:	10802717 	ldw	r2,156(r2)
  8347c0:	10c00044 	addi	r3,r2,1
  8347c4:	00803934 	movhi	r2,228
  8347c8:	10a90c04 	addi	r2,r2,-23504
  8347cc:	10c02715 	stw	r3,156(r2)
      GOTO_DROPWITHRESET;
  8347d0:	00810444 	movi	r2,1041
  8347d4:	d0a0ba15 	stw	r2,-32024(gp)
  8347d8:	0003f206 	br	8357a4 <tcp_input+0x2400>

   /*
    * If segment ends after window, drop trailing data
    * (and PUSH and FIN); if nothing left, just ACK.
    */
   todrop = (int)((ti->ti_seq + (short)ti->ti_len) - (tp->rcv_nxt+tp->rcv_wnd));
  8347dc:	e0bfed17 	ldw	r2,-76(fp)
  8347e0:	10c00617 	ldw	r3,24(r2)
  8347e4:	e0bfed17 	ldw	r2,-76(fp)
  8347e8:	1080028b 	ldhu	r2,10(r2)
  8347ec:	10bfffcc 	andi	r2,r2,65535
  8347f0:	10a0001c 	xori	r2,r2,32768
  8347f4:	10a00004 	addi	r2,r2,-32768
  8347f8:	1889883a 	add	r4,r3,r2
  8347fc:	e0bfe717 	ldw	r2,-100(fp)
  834800:	10c01617 	ldw	r3,88(r2)
  834804:	e0bfe717 	ldw	r2,-100(fp)
  834808:	10801517 	ldw	r2,84(r2)
  83480c:	1885883a 	add	r2,r3,r2
  834810:	2085c83a 	sub	r2,r4,r2
  834814:	e0bfe415 	stw	r2,-112(fp)
   if (todrop > 0) 
  834818:	e0bfe417 	ldw	r2,-112(fp)
  83481c:	10800050 	cmplti	r2,r2,1
  834820:	10006b1e 	bne	r2,zero,8349d0 <tcp_input+0x162c>
   {
      tcpstat.tcps_rcvpackafterwin++;
  834824:	00803934 	movhi	r2,228
  834828:	10a90c04 	addi	r2,r2,-23504
  83482c:	10802517 	ldw	r2,148(r2)
  834830:	10c00044 	addi	r3,r2,1
  834834:	00803934 	movhi	r2,228
  834838:	10a90c04 	addi	r2,r2,-23504
  83483c:	10c02515 	stw	r3,148(r2)
      if (todrop >= (int)ti->ti_len) 
  834840:	e0bfed17 	ldw	r2,-76(fp)
  834844:	1080028b 	ldhu	r2,10(r2)
  834848:	10ffffcc 	andi	r3,r2,65535
  83484c:	e0bfe417 	ldw	r2,-112(fp)
  834850:	10c03e16 	blt	r2,r3,83494c <tcp_input+0x15a8>
      {
         tcpstat.tcps_rcvbyteafterwin += ti->ti_len;
  834854:	00803934 	movhi	r2,228
  834858:	10a90c04 	addi	r2,r2,-23504
  83485c:	10c02617 	ldw	r3,152(r2)
  834860:	e0bfed17 	ldw	r2,-76(fp)
  834864:	1080028b 	ldhu	r2,10(r2)
  834868:	10bfffcc 	andi	r2,r2,65535
  83486c:	1887883a 	add	r3,r3,r2
  834870:	00803934 	movhi	r2,228
  834874:	10a90c04 	addi	r2,r2,-23504
  834878:	10c02615 	stw	r3,152(r2)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
  83487c:	e0bfe617 	ldw	r2,-104(fp)
  834880:	1080008c 	andi	r2,r2,2
  834884:	1005003a 	cmpeq	r2,r2,zero
  834888:	1000191e 	bne	r2,zero,8348f0 <tcp_input+0x154c>
  83488c:	e0bfe717 	ldw	r2,-100(fp)
  834890:	10800217 	ldw	r2,8(r2)
  834894:	10800298 	cmpnei	r2,r2,10
  834898:	1000151e 	bne	r2,zero,8348f0 <tcp_input+0x154c>
  83489c:	e0bfed17 	ldw	r2,-76(fp)
  8348a0:	10c00617 	ldw	r3,24(r2)
  8348a4:	e0bfe717 	ldw	r2,-100(fp)
  8348a8:	10801617 	ldw	r2,88(r2)
  8348ac:	1885c83a 	sub	r2,r3,r2
  8348b0:	10800050 	cmplti	r2,r2,1
  8348b4:	10000e1e 	bne	r2,zero,8348f0 <tcp_input+0x154c>
             tp->t_state == TCPS_TIME_WAIT &&
             SEQ_GT(ti->ti_seq, tp->rcv_nxt)) 
         {
            iss = (tcp_seq)(tp->rcv_nxt + (TCP_ISSINCR));
  8348b8:	e0bfe717 	ldw	r2,-100(fp)
  8348bc:	10c01617 	ldw	r3,88(r2)
  8348c0:	008000b4 	movhi	r2,2
  8348c4:	10bd3fc4 	addi	r2,r2,-2817
  8348c8:	1885883a 	add	r2,r3,r2
  8348cc:	e0bfdf15 	stw	r2,-132(fp)
            if (iss & 0xff000000)
  8348d0:	e0bfdf17 	ldw	r2,-132(fp)
  8348d4:	10bfc02c 	andhi	r2,r2,65280
  8348d8:	1005003a 	cmpeq	r2,r2,zero
  8348dc:	1000011e 	bne	r2,zero,8348e4 <tcp_input+0x1540>
            {
               iss = 0L;
  8348e0:	e03fdf15 	stw	zero,-132(fp)
            }
            (void) tcp_close(tp);
  8348e4:	e13fe717 	ldw	r4,-100(fp)
  8348e8:	0837aa00 	call	837aa0 <tcp_close>
            goto findpcb;
  8348ec:	003b8d06 	br	833724 <tcp_input+0x380>
          * window edge, and have to drop data and PUSH from
          * incoming segments.  Continue processing, but
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
  8348f0:	e0bfe717 	ldw	r2,-100(fp)
  8348f4:	10801517 	ldw	r2,84(r2)
  8348f8:	1004c03a 	cmpne	r2,r2,zero
  8348fc:	1003971e 	bne	r2,zero,83575c <tcp_input+0x23b8>
  834900:	e0bfed17 	ldw	r2,-76(fp)
  834904:	10c00617 	ldw	r3,24(r2)
  834908:	e0bfe717 	ldw	r2,-100(fp)
  83490c:	10801617 	ldw	r2,88(r2)
  834910:	1883921e 	bne	r3,r2,83575c <tcp_input+0x23b8>
         {
            tp->t_flags |= TF_ACKNOW;
  834914:	e0bfe717 	ldw	r2,-100(fp)
  834918:	10800b0b 	ldhu	r2,44(r2)
  83491c:	10800054 	ori	r2,r2,1
  834920:	1007883a 	mov	r3,r2
  834924:	e0bfe717 	ldw	r2,-100(fp)
  834928:	10c00b0d 	sth	r3,44(r2)
            tcpstat.tcps_rcvwinprobe++;
  83492c:	00803934 	movhi	r2,228
  834930:	10a90c04 	addi	r2,r2,-23504
  834934:	10802817 	ldw	r2,160(r2)
  834938:	10c00044 	addi	r3,r2,1
  83493c:	00803934 	movhi	r2,228
  834940:	10a90c04 	addi	r2,r2,-23504
  834944:	10c02815 	stw	r3,160(r2)
  834948:	00000806 	br	83496c <tcp_input+0x15c8>
         } else
            goto dropafterack;
      } else
         tcpstat.tcps_rcvbyteafterwin += todrop;
  83494c:	00803934 	movhi	r2,228
  834950:	10a90c04 	addi	r2,r2,-23504
  834954:	10c02617 	ldw	r3,152(r2)
  834958:	e0bfe417 	ldw	r2,-112(fp)
  83495c:	1887883a 	add	r3,r3,r2
  834960:	00803934 	movhi	r2,228
  834964:	10a90c04 	addi	r2,r2,-23504
  834968:	10c02615 	stw	r3,152(r2)
      /* XXX work around m_adj bug */
      if (m->m_len) 
  83496c:	e0bff017 	ldw	r2,-64(fp)
  834970:	10800217 	ldw	r2,8(r2)
  834974:	1005003a 	cmpeq	r2,r2,zero
  834978:	1000051e 	bne	r2,zero,834990 <tcp_input+0x15ec>
      {
         m_adj(m, -todrop);
  83497c:	e0bfe417 	ldw	r2,-112(fp)
  834980:	008bc83a 	sub	r5,zero,r2
  834984:	e13ff017 	ldw	r4,-64(fp)
  834988:	082bc0c0 	call	82bc0c <m_adj>
  83498c:	00000506 	br	8349a4 <tcp_input+0x1600>
      }
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
  834990:	e0bff017 	ldw	r2,-64(fp)
  834994:	11000617 	ldw	r4,24(r2)
  834998:	e0bfe417 	ldw	r2,-112(fp)
  83499c:	008bc83a 	sub	r5,zero,r2
  8349a0:	082bc0c0 	call	82bc0c <m_adj>
      }
      ti->ti_len -= (u_short)todrop;
  8349a4:	e0bfed17 	ldw	r2,-76(fp)
  8349a8:	10c0028b 	ldhu	r3,10(r2)
  8349ac:	e0bfe417 	ldw	r2,-112(fp)
  8349b0:	1885c83a 	sub	r2,r3,r2
  8349b4:	1007883a 	mov	r3,r2
  8349b8:	e0bfed17 	ldw	r2,-76(fp)
  8349bc:	10c0028d 	sth	r3,10(r2)
      tiflags &= ~(TH_PUSH|TH_FIN);
  8349c0:	e0ffe617 	ldw	r3,-104(fp)
  8349c4:	00bffd84 	movi	r2,-10
  8349c8:	1884703a 	and	r2,r3,r2
  8349cc:	e0bfe615 	stw	r2,-104(fp)
      tiflags &= ~TH_RST;  /* clear reset flag */
      goto dropafterack;   /* send an ack and drop current packet */
   }
#endif /* DOS_RST */

   if (tiflags&TH_RST) 
  8349d0:	e0bfe617 	ldw	r2,-104(fp)
  8349d4:	1080010c 	andi	r2,r2,4
  8349d8:	1005003a 	cmpeq	r2,r2,zero
  8349dc:	1000391e 	bne	r2,zero,834ac4 <tcp_input+0x1720>
   {
      switch (tp->t_state) 
  8349e0:	e0bfe717 	ldw	r2,-100(fp)
  8349e4:	10800217 	ldw	r2,8(r2)
  8349e8:	10bfff44 	addi	r2,r2,-3
  8349ec:	e0bffe15 	stw	r2,-8(fp)
  8349f0:	e13ffe17 	ldw	r4,-8(fp)
  8349f4:	20800228 	cmpgeui	r2,r4,8
  8349f8:	1000321e 	bne	r2,zero,834ac4 <tcp_input+0x1720>
  8349fc:	e0fffe17 	ldw	r3,-8(fp)
  834a00:	e0fffe17 	ldw	r3,-8(fp)
  834a04:	18c5883a 	add	r2,r3,r3
  834a08:	1087883a 	add	r3,r2,r2
  834a0c:	008020f4 	movhi	r2,131
  834a10:	10928804 	addi	r2,r2,18976
  834a14:	1885883a 	add	r2,r3,r2
  834a18:	10800017 	ldw	r2,0(r2)
  834a1c:	1000683a 	jmp	r2
  834a20:	00834a40 	call	834a4 <OSCtxSw_SWITCH_PC+0x83464>
  834a24:	00834a50 	cmplti	r2,zero,3369
  834a28:	00834a6c 	andhi	r2,zero,3369
  834a2c:	00834a6c 	andhi	r2,zero,3369
  834a30:	00834ab0 	cmpltui	r2,zero,3370
  834a34:	00834ab0 	cmpltui	r2,zero,3370
  834a38:	00834a6c 	andhi	r2,zero,3369
  834a3c:	00834ab0 	cmpltui	r2,zero,3370
      {
   
      case TCPS_SYN_RECEIVED:
         so->so_error = ECONNREFUSED;
  834a40:	e0ffe517 	ldw	r3,-108(fp)
  834a44:	00801bc4 	movi	r2,111
  834a48:	18800615 	stw	r2,24(r3)
         goto close;
  834a4c:	00000a06 	br	834a78 <tcp_input+0x16d4>
   
      case TCPS_ESTABLISHED:
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
  834a50:	00803934 	movhi	r2,228
  834a54:	10a8de04 	addi	r2,r2,-23688
  834a58:	10800717 	ldw	r2,28(r2)
  834a5c:	10c00044 	addi	r3,r2,1
  834a60:	00803934 	movhi	r2,228
  834a64:	10a8de04 	addi	r2,r2,-23688
  834a68:	10c00715 	stw	r3,28(r2)
      case TCPS_FIN_WAIT_1:
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
  834a6c:	e0ffe517 	ldw	r3,-108(fp)
  834a70:	00801a04 	movi	r2,104
  834a74:	18800615 	stw	r2,24(r3)
         close:
         tp->t_state = TCPS_CLOSED;
  834a78:	e0bfe717 	ldw	r2,-100(fp)
  834a7c:	10000215 	stw	zero,8(r2)
         tcpstat.tcps_drops++;
  834a80:	00803934 	movhi	r2,228
  834a84:	10a90c04 	addi	r2,r2,-23504
  834a88:	10800317 	ldw	r2,12(r2)
  834a8c:	10c00044 	addi	r3,r2,1
  834a90:	00803934 	movhi	r2,228
  834a94:	10a90c04 	addi	r2,r2,-23504
  834a98:	10c00315 	stw	r3,12(r2)
         SETTP(tp, tcp_close(tp));
  834a9c:	e13fe717 	ldw	r4,-100(fp)
  834aa0:	0837aa00 	call	837aa0 <tcp_close>
#ifdef TCP_ZEROCOPY
         if (so->rx_upcall)
            so->rx_upcall(so, NULL, ECONNRESET);
#endif   /* TCP_ZEROCOPY */
         GOTO_DROP;
  834aa4:	00812204 	movi	r2,1160
  834aa8:	d0a0ba15 	stw	r2,-32024(gp)
  834aac:	00038106 	br	8358b4 <tcp_input+0x2510>
   
      case TCPS_CLOSING:
      case TCPS_LAST_ACK:
      case TCPS_TIME_WAIT:
         SETTP(tp, tcp_close(tp));
  834ab0:	e13fe717 	ldw	r4,-100(fp)
  834ab4:	0837aa00 	call	837aa0 <tcp_close>
         GOTO_DROP;
  834ab8:	00812384 	movi	r2,1166
  834abc:	d0a0ba15 	stw	r2,-32024(gp)
  834ac0:	00037c06 	br	8358b4 <tcp_input+0x2510>
     tcp_trace("rcvd SYN in established state - ignoring SYN.\n");
#endif
      GOTO_DROP;
   }
#else
   if (tiflags & TH_SYN) 
  834ac4:	e0bfe617 	ldw	r2,-104(fp)
  834ac8:	1080008c 	andi	r2,r2,2
  834acc:	1005003a 	cmpeq	r2,r2,zero
  834ad0:	1000071e 	bne	r2,zero,834af0 <tcp_input+0x174c>
   {
      tp = tcp_drop(tp, ECONNRESET);
  834ad4:	e13fe717 	ldw	r4,-100(fp)
  834ad8:	01401a04 	movi	r5,104
  834adc:	08379f40 	call	8379f4 <tcp_drop>
  834ae0:	e0bfe715 	stw	r2,-100(fp)
      GOTO_DROPWITHRESET;
  834ae4:	00812b04 	movi	r2,1196
  834ae8:	d0a0ba15 	stw	r2,-32024(gp)
  834aec:	00032d06 	br	8357a4 <tcp_input+0x2400>
#endif /* end of else of DOS_SYN */

   /*
    * If the ACK bit is off we drop the segment and return.
    */
   if ((tiflags & TH_ACK) == 0)
  834af0:	e0bfe617 	ldw	r2,-104(fp)
  834af4:	1080040c 	andi	r2,r2,16
  834af8:	1004c03a 	cmpne	r2,r2,zero
  834afc:	1000031e 	bne	r2,zero,834b0c <tcp_input+0x1768>
      GOTO_DROP;
  834b00:	00812d04 	movi	r2,1204
  834b04:	d0a0ba15 	stw	r2,-32024(gp)
  834b08:	00036a06 	br	8358b4 <tcp_input+0x2510>

   /*
    * Ack processing.
    */
   switch (tp->t_state) 
  834b0c:	e0bfe717 	ldw	r2,-100(fp)
  834b10:	10800217 	ldw	r2,8(r2)
  834b14:	e0bff715 	stw	r2,-36(fp)
  834b18:	e13ff717 	ldw	r4,-36(fp)
  834b1c:	208000e0 	cmpeqi	r2,r4,3
  834b20:	1000071e 	bne	r2,zero,834b40 <tcp_input+0x179c>
  834b24:	e0fff717 	ldw	r3,-36(fp)
  834b28:	188000d0 	cmplti	r2,r3,3
  834b2c:	1001921e 	bne	r2,zero,835178 <tcp_input+0x1dd4>
  834b30:	e13ff717 	ldw	r4,-36(fp)
  834b34:	208002c8 	cmpgei	r2,r4,11
  834b38:	10018f1e 	bne	r2,zero,835178 <tcp_input+0x1dd4>
  834b3c:	00003206 	br	834c08 <tcp_input+0x1864>
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
  834b40:	e0bfe717 	ldw	r2,-100(fp)
  834b44:	10c00e17 	ldw	r3,56(r2)
  834b48:	e0bfed17 	ldw	r2,-76(fp)
  834b4c:	10800717 	ldw	r2,28(r2)
  834b50:	1885c83a 	sub	r2,r3,r2
  834b54:	10800048 	cmpgei	r2,r2,1
  834b58:	1000071e 	bne	r2,zero,834b78 <tcp_input+0x17d4>
  834b5c:	e0bfed17 	ldw	r2,-76(fp)
  834b60:	10c00717 	ldw	r3,28(r2)
  834b64:	e0bfe717 	ldw	r2,-100(fp)
  834b68:	10801a17 	ldw	r2,104(r2)
  834b6c:	1885c83a 	sub	r2,r3,r2
  834b70:	10800050 	cmplti	r2,r2,1
  834b74:	10000a1e 	bne	r2,zero,834ba0 <tcp_input+0x17fc>
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
  834b78:	00803934 	movhi	r2,228
  834b7c:	10a8de04 	addi	r2,r2,-23688
  834b80:	10800717 	ldw	r2,28(r2)
  834b84:	10c00044 	addi	r3,r2,1
  834b88:	00803934 	movhi	r2,228
  834b8c:	10a8de04 	addi	r2,r2,-23688
  834b90:	10c00715 	stw	r3,28(r2)
         GOTO_DROPWITHRESET;
  834b94:	00813184 	movi	r2,1222
  834b98:	d0a0ba15 	stw	r2,-32024(gp)
  834b9c:	00030106 	br	8357a4 <tcp_input+0x2400>
      }
      tcpstat.tcps_connects++;
  834ba0:	00803934 	movhi	r2,228
  834ba4:	10a90c04 	addi	r2,r2,-23504
  834ba8:	10800217 	ldw	r2,8(r2)
  834bac:	10c00044 	addi	r3,r2,1
  834bb0:	00803934 	movhi	r2,228
  834bb4:	10a90c04 	addi	r2,r2,-23504
  834bb8:	10c00215 	stw	r3,8(r2)
      tp->t_state = TCPS_ESTABLISHED;
  834bbc:	e0ffe717 	ldw	r3,-100(fp)
  834bc0:	00800104 	movi	r2,4
  834bc4:	18800215 	stw	r2,8(r3)
      soisconnected(so);
  834bc8:	e13fe517 	ldw	r4,-108(fp)
  834bcc:	08313dc0 	call	8313dc <soisconnected>
      tp->t_maxseg = tcp_mss(so);
  834bd0:	e13fe517 	ldw	r4,-108(fp)
  834bd4:	0835e680 	call	835e68 <tcp_mss>
  834bd8:	1007883a 	mov	r3,r2
  834bdc:	e0bfe717 	ldw	r2,-100(fp)
  834be0:	10c00a0d 	sth	r3,40(r2)
      (void) tcp_reass(tp, (struct tcpiphdr *)0, m);
  834be4:	e13fe717 	ldw	r4,-100(fp)
  834be8:	000b883a 	mov	r5,zero
  834bec:	e1bff017 	ldw	r6,-64(fp)
  834bf0:	0832f9c0 	call	832f9c <tcp_reass>
      tp->snd_wl1 = ti->ti_seq - 1;
  834bf4:	e0bfed17 	ldw	r2,-76(fp)
  834bf8:	10800617 	ldw	r2,24(r2)
  834bfc:	10ffffc4 	addi	r3,r2,-1
  834c00:	e0bfe717 	ldw	r2,-100(fp)
  834c04:	10c01115 	stw	r3,68(r2)
   case TCPS_CLOSE_WAIT:
   case TCPS_CLOSING:
   case TCPS_LAST_ACK:
   case TCPS_TIME_WAIT:

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
  834c08:	e0bfed17 	ldw	r2,-76(fp)
  834c0c:	10c00717 	ldw	r3,28(r2)
  834c10:	e0bfe717 	ldw	r2,-100(fp)
  834c14:	10800e17 	ldw	r2,56(r2)
  834c18:	1885c83a 	sub	r2,r3,r2
  834c1c:	10800048 	cmpgei	r2,r2,1
  834c20:	1000671e 	bne	r2,zero,834dc0 <tcp_input+0x1a1c>
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
  834c24:	e0bfed17 	ldw	r2,-76(fp)
  834c28:	1080028b 	ldhu	r2,10(r2)
  834c2c:	10bfffcc 	andi	r2,r2,65535
  834c30:	1004c03a 	cmpne	r2,r2,zero
  834c34:	10005f1e 	bne	r2,zero,834db4 <tcp_input+0x1a10>
  834c38:	e0bfe717 	ldw	r2,-100(fp)
  834c3c:	10c01417 	ldw	r3,80(r2)
  834c40:	e0bfde17 	ldw	r2,-136(fp)
  834c44:	18805b1e 	bne	r3,r2,834db4 <tcp_input+0x1a10>
         {
            tcpstat.tcps_rcvdupack++;
  834c48:	00803934 	movhi	r2,228
  834c4c:	10a90c04 	addi	r2,r2,-23504
  834c50:	10802917 	ldw	r2,164(r2)
  834c54:	10c00044 	addi	r3,r2,1
  834c58:	00803934 	movhi	r2,228
  834c5c:	10a90c04 	addi	r2,r2,-23504
  834c60:	10c02915 	stw	r3,164(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
  834c64:	e0bfe717 	ldw	r2,-100(fp)
  834c68:	10800317 	ldw	r2,12(r2)
  834c6c:	1005003a 	cmpeq	r2,r2,zero
  834c70:	1000051e 	bne	r2,zero,834c88 <tcp_input+0x18e4>
  834c74:	e0bfed17 	ldw	r2,-76(fp)
  834c78:	10c00717 	ldw	r3,28(r2)
  834c7c:	e0bfe717 	ldw	r2,-100(fp)
  834c80:	10800e17 	ldw	r2,56(r2)
  834c84:	18800326 	beq	r3,r2,834c94 <tcp_input+0x18f0>
                ti->ti_ack != tp->snd_una)
            {
               tp->t_dupacks = 0;
  834c88:	e0bfe717 	ldw	r2,-100(fp)
  834c8c:	10000915 	stw	zero,36(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
  834c90:	00013906 	br	835178 <tcp_input+0x1dd4>
                ti->ti_ack != tp->snd_una)
            {
               tp->t_dupacks = 0;
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
  834c94:	e0bfe717 	ldw	r2,-100(fp)
  834c98:	10800917 	ldw	r2,36(r2)
  834c9c:	10c00044 	addi	r3,r2,1
  834ca0:	e0bfe717 	ldw	r2,-100(fp)
  834ca4:	10c00915 	stw	r3,36(r2)
  834ca8:	e0bfe717 	ldw	r2,-100(fp)
  834cac:	10c00917 	ldw	r3,36(r2)
  834cb0:	d0a04483 	ldbu	r2,-32494(gp)
  834cb4:	10803fcc 	andi	r2,r2,255
  834cb8:	1080201c 	xori	r2,r2,128
  834cbc:	10bfe004 	addi	r2,r2,-128
  834cc0:	18812d1e 	bne	r3,r2,835178 <tcp_input+0x1dd4>
            {
               tcp_seq onxt = tp->snd_nxt;
  834cc4:	e0bfe717 	ldw	r2,-100(fp)
  834cc8:	10800f17 	ldw	r2,60(r2)
  834ccc:	e0bfd715 	stw	r2,-164(fp)
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
               tp->t_maxseg;
  834cd0:	e0bfe717 	ldw	r2,-100(fp)
  834cd4:	10c01417 	ldw	r3,80(r2)
  834cd8:	e0bfe717 	ldw	r2,-100(fp)
  834cdc:	10801b17 	ldw	r2,108(r2)
  834ce0:	e0bff615 	stw	r2,-40(fp)
  834ce4:	e0fff515 	stw	r3,-44(fp)
  834ce8:	e0bff617 	ldw	r2,-40(fp)
  834cec:	e0fff517 	ldw	r3,-44(fp)
  834cf0:	10c0022e 	bgeu	r2,r3,834cfc <tcp_input+0x1958>
  834cf4:	e13ff617 	ldw	r4,-40(fp)
  834cf8:	e13ff515 	stw	r4,-44(fp)
  834cfc:	e0bff517 	ldw	r2,-44(fp)
  834d00:	1008d07a 	srli	r4,r2,1
  834d04:	e0bfe717 	ldw	r2,-100(fp)
  834d08:	10800a0b 	ldhu	r2,40(r2)
  834d0c:	117fffcc 	andi	r5,r2,65535
  834d10:	08053b80 	call	8053b8 <__udivsi3>
  834d14:	e0bfd60d 	sth	r2,-168(fp)

               if (win < 2)
  834d18:	e0bfd60b 	ldhu	r2,-168(fp)
  834d1c:	108000a8 	cmpgeui	r2,r2,2
  834d20:	1000021e 	bne	r2,zero,834d2c <tcp_input+0x1988>
                  win = 2;
  834d24:	00800084 	movi	r2,2
  834d28:	e0bfd60d 	sth	r2,-168(fp)
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);
  834d2c:	e0bfe717 	ldw	r2,-100(fp)
  834d30:	10c00a0b 	ldhu	r3,40(r2)
  834d34:	e0bfd60b 	ldhu	r2,-168(fp)
  834d38:	1885383a 	mul	r2,r3,r2
  834d3c:	10ffffcc 	andi	r3,r2,65535
  834d40:	e0bfe717 	ldw	r2,-100(fp)
  834d44:	10c01c15 	stw	r3,112(r2)

               tp->t_timer[TCPT_REXMT] = 0;
  834d48:	e0bfe717 	ldw	r2,-100(fp)
  834d4c:	10000315 	stw	zero,12(r2)
               tp->t_rttick = 0;
  834d50:	e0bfe717 	ldw	r2,-100(fp)
  834d54:	10001e15 	stw	zero,120(r2)
               tp->snd_nxt = ti->ti_ack;
  834d58:	e0bfed17 	ldw	r2,-76(fp)
  834d5c:	10c00717 	ldw	r3,28(r2)
  834d60:	e0bfe717 	ldw	r2,-100(fp)
  834d64:	10c00f15 	stw	r3,60(r2)
               tp->snd_cwnd = tp->t_maxseg;
  834d68:	e0bfe717 	ldw	r2,-100(fp)
  834d6c:	10800a0b 	ldhu	r2,40(r2)
  834d70:	10ffffcc 	andi	r3,r2,65535
  834d74:	e0bfe717 	ldw	r2,-100(fp)
  834d78:	10c01b15 	stw	r3,108(r2)
               (void) tcp_output(tp);
  834d7c:	e13fe717 	ldw	r4,-100(fp)
  834d80:	0835f840 	call	835f84 <tcp_output>

               if (SEQ_GT(onxt, tp->snd_nxt))
  834d84:	e0bfe717 	ldw	r2,-100(fp)
  834d88:	10c00f17 	ldw	r3,60(r2)
  834d8c:	e0bfd717 	ldw	r2,-164(fp)
  834d90:	10c5c83a 	sub	r2,r2,r3
  834d94:	10800050 	cmplti	r2,r2,1
  834d98:	1000031e 	bne	r2,zero,834da8 <tcp_input+0x1a04>
                  tp->snd_nxt = onxt;
  834d9c:	e0ffe717 	ldw	r3,-100(fp)
  834da0:	e0bfd717 	ldw	r2,-164(fp)
  834da4:	18800f15 	stw	r2,60(r3)
               GOTO_DROP;
  834da8:	00814544 	movi	r2,1301
  834dac:	d0a0ba15 	stw	r2,-32024(gp)
  834db0:	0002c006 	br	8358b4 <tcp_input+0x2510>
            }
         } else
            tp->t_dupacks = 0;
  834db4:	e0bfe717 	ldw	r2,-100(fp)
  834db8:	10000915 	stw	zero,36(r2)
         break;
  834dbc:	0000ee06 	br	835178 <tcp_input+0x1dd4>
      }
      tp->t_dupacks = 0;
  834dc0:	e0bfe717 	ldw	r2,-100(fp)
  834dc4:	10000915 	stw	zero,36(r2)
      if (SEQ_GT(ti->ti_ack, tp->snd_max)) 
  834dc8:	e0bfed17 	ldw	r2,-76(fp)
  834dcc:	10c00717 	ldw	r3,28(r2)
  834dd0:	e0bfe717 	ldw	r2,-100(fp)
  834dd4:	10801a17 	ldw	r2,104(r2)
  834dd8:	1885c83a 	sub	r2,r3,r2
  834ddc:	10800050 	cmplti	r2,r2,1
  834de0:	1000081e 	bne	r2,zero,834e04 <tcp_input+0x1a60>
      {
         tcpstat.tcps_rcvacktoomuch++;
  834de4:	00803934 	movhi	r2,228
  834de8:	10a90c04 	addi	r2,r2,-23504
  834dec:	10802a17 	ldw	r2,168(r2)
  834df0:	10c00044 	addi	r3,r2,1
  834df4:	00803934 	movhi	r2,228
  834df8:	10a90c04 	addi	r2,r2,-23504
  834dfc:	10c02a15 	stw	r3,168(r2)
         goto dropafterack;
  834e00:	00025606 	br	83575c <tcp_input+0x23b8>
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
  834e04:	e0bfed17 	ldw	r2,-76(fp)
  834e08:	10c00717 	ldw	r3,28(r2)
  834e0c:	e0bfe717 	ldw	r2,-100(fp)
  834e10:	10800e17 	ldw	r2,56(r2)
  834e14:	1885c83a 	sub	r2,r3,r2
  834e18:	e0bfe315 	stw	r2,-116(fp)
      tcpstat.tcps_rcvackpack++;
  834e1c:	00803934 	movhi	r2,228
  834e20:	10a90c04 	addi	r2,r2,-23504
  834e24:	10802b17 	ldw	r2,172(r2)
  834e28:	10c00044 	addi	r3,r2,1
  834e2c:	00803934 	movhi	r2,228
  834e30:	10a90c04 	addi	r2,r2,-23504
  834e34:	10c02b15 	stw	r3,172(r2)
      tcpstat.tcps_rcvackbyte += acked;
  834e38:	00803934 	movhi	r2,228
  834e3c:	10a90c04 	addi	r2,r2,-23504
  834e40:	10c02c17 	ldw	r3,176(r2)
  834e44:	e0bfe317 	ldw	r2,-116(fp)
  834e48:	1887883a 	add	r3,r3,r2
  834e4c:	00803934 	movhi	r2,228
  834e50:	10a90c04 	addi	r2,r2,-23504
  834e54:	10c02c15 	stw	r3,176(r2)
       * number was acked, update smoothed round trip time.
       * Since we now have an rtt measurement, cancel the
       * timer backoff (cf., Phil Karn's retransmit alg.).
       * Recompute the initial retransmit timer.
       */
      if((tp->t_rttick) && 
  834e58:	e0bfe717 	ldw	r2,-100(fp)
  834e5c:	10801e17 	ldw	r2,120(r2)
  834e60:	1005003a 	cmpeq	r2,r2,zero
  834e64:	1000091e 	bne	r2,zero,834e8c <tcp_input+0x1ae8>
  834e68:	e0bfed17 	ldw	r2,-76(fp)
  834e6c:	10c00717 	ldw	r3,28(r2)
  834e70:	e0bfe717 	ldw	r2,-100(fp)
  834e74:	10801f17 	ldw	r2,124(r2)
  834e78:	1885c83a 	sub	r2,r3,r2
  834e7c:	10800050 	cmplti	r2,r2,1
  834e80:	1000021e 	bne	r2,zero,834e8c <tcp_input+0x1ae8>
#ifdef TCP_TIMESTAMP
         ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
         (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
         tcp_xmit_timer(tp);
  834e84:	e13fe717 	ldw	r4,-100(fp)
  834e88:	0835bb40 	call	835bb4 <tcp_xmit_timer>
       * If all outstanding data is acked, stop retransmit
       * timer and remember to restart (more output or persist).
       * If there is more data to be acked, restart retransmit
       * timer, using current (possibly backed-off) value.
       */
      if (ti->ti_ack == tp->snd_max) 
  834e8c:	e0bfed17 	ldw	r2,-76(fp)
  834e90:	10c00717 	ldw	r3,28(r2)
  834e94:	e0bfe717 	ldw	r2,-100(fp)
  834e98:	10801a17 	ldw	r2,104(r2)
  834e9c:	1880051e 	bne	r3,r2,834eb4 <tcp_input+0x1b10>
      {
         tp->t_timer[TCPT_REXMT] = 0;
  834ea0:	e0bfe717 	ldw	r2,-100(fp)
  834ea4:	10000315 	stw	zero,12(r2)
         needoutput = 1;
  834ea8:	00800044 	movi	r2,1
  834eac:	e0bfe115 	stw	r2,-124(fp)
  834eb0:	00000806 	br	834ed4 <tcp_input+0x1b30>
      } else if (tp->t_timer[TCPT_PERSIST] == 0)
  834eb4:	e0bfe717 	ldw	r2,-100(fp)
  834eb8:	10800417 	ldw	r2,16(r2)
  834ebc:	1004c03a 	cmpne	r2,r2,zero
  834ec0:	1000041e 	bne	r2,zero,834ed4 <tcp_input+0x1b30>
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
  834ec4:	e0bfe717 	ldw	r2,-100(fp)
  834ec8:	10c00817 	ldw	r3,32(r2)
  834ecc:	e0bfe717 	ldw	r2,-100(fp)
  834ed0:	10c00315 	stw	r3,12(r2)
       * in flight, open exponentially (maxseg per packet).
       * Otherwise open linearly (maxseg per window,
       * or maxseg^2 / cwnd per packet).
       */
      {
         tcp_win  cw =  tp->snd_cwnd;
  834ed4:	e0bfe717 	ldw	r2,-100(fp)
  834ed8:	10801b17 	ldw	r2,108(r2)
  834edc:	e0bfd515 	stw	r2,-172(fp)
         u_short  incr  =  tp->t_maxseg;
  834ee0:	e0bfe717 	ldw	r2,-100(fp)
  834ee4:	10800a0b 	ldhu	r2,40(r2)
  834ee8:	e0bfd40d 	sth	r2,-176(fp)

         if (cw > tp->snd_ssthresh)
  834eec:	e0bfe717 	ldw	r2,-100(fp)
  834ef0:	10c01c17 	ldw	r3,112(r2)
  834ef4:	e0bfd517 	ldw	r2,-172(fp)
  834ef8:	18800e2e 	bgeu	r3,r2,834f34 <tcp_input+0x1b90>
            incr = MAX( (incr * incr / cw), (ALIGN_TYPE << 2) );
  834efc:	e0ffd40b 	ldhu	r3,-176(fp)
  834f00:	e0bfd40b 	ldhu	r2,-176(fp)
  834f04:	1885383a 	mul	r2,r3,r2
  834f08:	1009883a 	mov	r4,r2
  834f0c:	e17fd517 	ldw	r5,-172(fp)
  834f10:	08053b80 	call	8053b8 <__udivsi3>
  834f14:	e0bff415 	stw	r2,-48(fp)
  834f18:	e0fff417 	ldw	r3,-48(fp)
  834f1c:	18800428 	cmpgeui	r2,r3,16
  834f20:	1000021e 	bne	r2,zero,834f2c <tcp_input+0x1b88>
  834f24:	01000404 	movi	r4,16
  834f28:	e13ff415 	stw	r4,-48(fp)
  834f2c:	e0bff417 	ldw	r2,-48(fp)
  834f30:	e0bfd40d 	sth	r2,-176(fp)

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
  834f34:	e0ffd40b 	ldhu	r3,-176(fp)
  834f38:	e0bfd517 	ldw	r2,-172(fp)
  834f3c:	1885883a 	add	r2,r3,r2
  834f40:	e0bff315 	stw	r2,-52(fp)
  834f44:	e0fff317 	ldw	r3,-52(fp)
  834f48:	18980070 	cmpltui	r2,r3,24577
  834f4c:	1000021e 	bne	r2,zero,834f58 <tcp_input+0x1bb4>
  834f50:	01180004 	movi	r4,24576
  834f54:	e13ff315 	stw	r4,-52(fp)
  834f58:	e0bfe717 	ldw	r2,-100(fp)
  834f5c:	e0fff317 	ldw	r3,-52(fp)
  834f60:	10c01b15 	stw	r3,108(r2)
      }
      if (acked > (int)so->so_snd.sb_cc) 
  834f64:	e0bfe517 	ldw	r2,-108(fp)
  834f68:	10801217 	ldw	r2,72(r2)
  834f6c:	1007883a 	mov	r3,r2
  834f70:	e0bfe317 	ldw	r2,-116(fp)
  834f74:	1880110e 	bge	r3,r2,834fbc <tcp_input+0x1c18>
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
  834f78:	e0bfe717 	ldw	r2,-100(fp)
  834f7c:	10c01417 	ldw	r3,80(r2)
  834f80:	e0bfe517 	ldw	r2,-108(fp)
  834f84:	10801217 	ldw	r2,72(r2)
  834f88:	10bfffcc 	andi	r2,r2,65535
  834f8c:	1887c83a 	sub	r3,r3,r2
  834f90:	e0bfe717 	ldw	r2,-100(fp)
  834f94:	10c01415 	stw	r3,80(r2)
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
  834f98:	e0bfe517 	ldw	r2,-108(fp)
  834f9c:	11001204 	addi	r4,r2,72
  834fa0:	e0bfe517 	ldw	r2,-108(fp)
  834fa4:	10801217 	ldw	r2,72(r2)
  834fa8:	100b883a 	mov	r5,r2
  834fac:	08323140 	call	832314 <sbdrop>
         ourfinisacked = 1;
  834fb0:	00800044 	movi	r2,1
  834fb4:	e0bfe215 	stw	r2,-120(fp)
  834fb8:	00000c06 	br	834fec <tcp_input+0x1c48>
      } 
      else 
      {
         sbdrop(&so->so_snd, acked);
  834fbc:	e0bfe517 	ldw	r2,-108(fp)
  834fc0:	11001204 	addi	r4,r2,72
  834fc4:	e17fe317 	ldw	r5,-116(fp)
  834fc8:	08323140 	call	832314 <sbdrop>
         tp->snd_wnd -= (u_short)acked;
  834fcc:	e0bfe717 	ldw	r2,-100(fp)
  834fd0:	10c01417 	ldw	r3,80(r2)
  834fd4:	e0bfe317 	ldw	r2,-116(fp)
  834fd8:	10bfffcc 	andi	r2,r2,65535
  834fdc:	1887c83a 	sub	r3,r3,r2
  834fe0:	e0bfe717 	ldw	r2,-100(fp)
  834fe4:	10c01415 	stw	r3,80(r2)
         ourfinisacked = 0;
  834fe8:	e03fe215 	stw	zero,-120(fp)
      }

      if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
  834fec:	e0bfe517 	ldw	r2,-108(fp)
  834ff0:	1080190b 	ldhu	r2,100(r2)
  834ff4:	10bfffcc 	andi	r2,r2,65535
  834ff8:	1080030c 	andi	r2,r2,12
  834ffc:	1005003a 	cmpeq	r2,r2,zero
  835000:	1000041e 	bne	r2,zero,835014 <tcp_input+0x1c70>
         sowwakeup(so);
  835004:	e0bfe517 	ldw	r2,-108(fp)
  835008:	11401204 	addi	r5,r2,72
  83500c:	e13fe517 	ldw	r4,-108(fp)
  835010:	0831b480 	call	831b48 <sbwakeup>

      tp->snd_una = ti->ti_ack;
  835014:	e0bfed17 	ldw	r2,-76(fp)
  835018:	10c00717 	ldw	r3,28(r2)
  83501c:	e0bfe717 	ldw	r2,-100(fp)
  835020:	10c00e15 	stw	r3,56(r2)
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
  835024:	e0bfe717 	ldw	r2,-100(fp)
  835028:	10c00f17 	ldw	r3,60(r2)
  83502c:	e0bfe717 	ldw	r2,-100(fp)
  835030:	10800e17 	ldw	r2,56(r2)
  835034:	1885c83a 	sub	r2,r3,r2
  835038:	1004403a 	cmpge	r2,r2,zero
  83503c:	1000041e 	bne	r2,zero,835050 <tcp_input+0x1cac>
         tp->snd_nxt = tp->snd_una;
  835040:	e0bfe717 	ldw	r2,-100(fp)
  835044:	10c00e17 	ldw	r3,56(r2)
  835048:	e0bfe717 	ldw	r2,-100(fp)
  83504c:	10c00f15 	stw	r3,60(r2)


      switch (tp->t_state) 
  835050:	e0bfe717 	ldw	r2,-100(fp)
  835054:	10800217 	ldw	r2,8(r2)
  835058:	e0bff215 	stw	r2,-56(fp)
  83505c:	e13ff217 	ldw	r4,-56(fp)
  835060:	208001e0 	cmpeqi	r2,r4,7
  835064:	1000221e 	bne	r2,zero,8350f0 <tcp_input+0x1d4c>
  835068:	e0fff217 	ldw	r3,-56(fp)
  83506c:	18800208 	cmpgei	r2,r3,8
  835070:	1000041e 	bne	r2,zero,835084 <tcp_input+0x1ce0>
  835074:	e13ff217 	ldw	r4,-56(fp)
  835078:	208001a0 	cmpeqi	r2,r4,6
  83507c:	1000081e 	bne	r2,zero,8350a0 <tcp_input+0x1cfc>
  835080:	00003d06 	br	835178 <tcp_input+0x1dd4>
  835084:	e0fff217 	ldw	r3,-56(fp)
  835088:	18800220 	cmpeqi	r2,r3,8
  83508c:	10002a1e 	bne	r2,zero,835138 <tcp_input+0x1d94>
  835090:	e13ff217 	ldw	r4,-56(fp)
  835094:	208002a0 	cmpeqi	r2,r4,10
  835098:	10002f1e 	bne	r2,zero,835158 <tcp_input+0x1db4>
  83509c:	00003606 	br	835178 <tcp_input+0x1dd4>
       * In FIN_WAIT_1 STATE in addition to the processing
       * for the ESTABLISHED state if our FIN is now acknowledged
       * then enter FIN_WAIT_2.
       */
      case TCPS_FIN_WAIT_1:
         if (ourfinisacked) 
  8350a0:	e0bfe217 	ldw	r2,-120(fp)
  8350a4:	1005003a 	cmpeq	r2,r2,zero
  8350a8:	1000331e 	bne	r2,zero,835178 <tcp_input+0x1dd4>
             * data, then closing user can proceed.
             * Starting the timer is contrary to the
             * specification, but if we don't get a FIN
             * we'll hang forever.
             */
            if (so->so_state & SS_CANTRCVMORE) 
  8350ac:	e0bfe517 	ldw	r2,-108(fp)
  8350b0:	1080088b 	ldhu	r2,34(r2)
  8350b4:	10bfffcc 	andi	r2,r2,65535
  8350b8:	1080080c 	andi	r2,r2,32
  8350bc:	1005003a 	cmpeq	r2,r2,zero
  8350c0:	1000071e 	bne	r2,zero,8350e0 <tcp_input+0x1d3c>
            {
               soisdisconnected(so);
  8350c4:	e13fe517 	ldw	r4,-108(fp)
  8350c8:	08315640 	call	831564 <soisdisconnected>
               tp->t_timer[TCPT_2MSL] = tcp_maxidle;
  8350cc:	00802174 	movhi	r2,133
  8350d0:	10833204 	addi	r2,r2,3272
  8350d4:	10c00017 	ldw	r3,0(r2)
  8350d8:	e0bfe717 	ldw	r2,-100(fp)
  8350dc:	10c00615 	stw	r3,24(r2)
            }
            tp->t_state = TCPS_FIN_WAIT_2;
  8350e0:	e0ffe717 	ldw	r3,-100(fp)
  8350e4:	00800244 	movi	r2,9
  8350e8:	18800215 	stw	r2,8(r3)
         }
         break;
  8350ec:	00002206 	br	835178 <tcp_input+0x1dd4>
       * the ESTABLISHED state if the ACK acknowledges our FIN
       * then enter the TIME-WAIT state, otherwise ignore
       * the segment.
       */
      case TCPS_CLOSING:
         if (ourfinisacked) 
  8350f0:	e0bfe217 	ldw	r2,-120(fp)
  8350f4:	1005003a 	cmpeq	r2,r2,zero
  8350f8:	10001f1e 	bne	r2,zero,835178 <tcp_input+0x1dd4>
         {
            tp->t_state = TCPS_TIME_WAIT;
  8350fc:	e0ffe717 	ldw	r3,-100(fp)
  835100:	00800284 	movi	r2,10
  835104:	18800215 	stw	r2,8(r3)
            tcp_canceltimers(tp);
  835108:	e13fe717 	ldw	r4,-100(fp)
  83510c:	0837f6c0 	call	837f6c <tcp_canceltimers>
            tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
  835110:	00802174 	movhi	r2,133
  835114:	1082b904 	addi	r2,r2,2788
  835118:	10800017 	ldw	r2,0(r2)
  83511c:	1085883a 	add	r2,r2,r2
  835120:	1007883a 	mov	r3,r2
  835124:	e0bfe717 	ldw	r2,-100(fp)
  835128:	10c00615 	stw	r3,24(r2)
            soisdisconnected(so);
  83512c:	e13fe517 	ldw	r4,-108(fp)
  835130:	08315640 	call	831564 <soisdisconnected>
         }
         break;
  835134:	00001006 	br	835178 <tcp_input+0x1dd4>
       * and/or to be acked, as well as for the ack of our FIN.
       * If our FIN is now acknowledged, delete the TCB,
       * enter the closed state and return.
       */
      case TCPS_LAST_ACK:
         if (ourfinisacked) 
  835138:	e0bfe217 	ldw	r2,-120(fp)
  83513c:	1005003a 	cmpeq	r2,r2,zero
  835140:	10000d1e 	bne	r2,zero,835178 <tcp_input+0x1dd4>
         {
            SETTP(tp, tcp_close(tp));
  835144:	e13fe717 	ldw	r4,-100(fp)
  835148:	0837aa00 	call	837aa0 <tcp_close>
            GOTO_DROP;
  83514c:	00816644 	movi	r2,1433
  835150:	d0a0ba15 	stw	r2,-32024(gp)
  835154:	0001d706 	br	8358b4 <tcp_input+0x2510>
       * In TIME_WAIT state the only thing that should arrive
       * is a retransmission of the remote FIN.  Acknowledge
       * it and restart the finack timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
  835158:	00802174 	movhi	r2,133
  83515c:	1082b904 	addi	r2,r2,2788
  835160:	10800017 	ldw	r2,0(r2)
  835164:	1085883a 	add	r2,r2,r2
  835168:	1007883a 	mov	r3,r2
  83516c:	e0bfe717 	ldw	r2,-100(fp)
  835170:	10c00615 	stw	r3,24(r2)
         goto dropafterack;
  835174:	00017906 	br	83575c <tcp_input+0x23b8>
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
  835178:	e0bfe617 	ldw	r2,-104(fp)
  83517c:	1080040c 	andi	r2,r2,16
  835180:	1005003a 	cmpeq	r2,r2,zero
  835184:	1000471e 	bne	r2,zero,8352a4 <tcp_input+0x1f00>
  835188:	e0bfe717 	ldw	r2,-100(fp)
  83518c:	10c01117 	ldw	r3,68(r2)
  835190:	e0bfed17 	ldw	r2,-76(fp)
  835194:	10800617 	ldw	r2,24(r2)
  835198:	1885c83a 	sub	r2,r3,r2
  83519c:	1004803a 	cmplt	r2,r2,zero
  8351a0:	1000151e 	bne	r2,zero,8351f8 <tcp_input+0x1e54>
  8351a4:	e0bfe717 	ldw	r2,-100(fp)
  8351a8:	10c01117 	ldw	r3,68(r2)
  8351ac:	e0bfed17 	ldw	r2,-76(fp)
  8351b0:	10800617 	ldw	r2,24(r2)
  8351b4:	18803b1e 	bne	r3,r2,8352a4 <tcp_input+0x1f00>
  8351b8:	e0bfe717 	ldw	r2,-100(fp)
  8351bc:	10c01217 	ldw	r3,72(r2)
  8351c0:	e0bfed17 	ldw	r2,-76(fp)
  8351c4:	10800717 	ldw	r2,28(r2)
  8351c8:	1885c83a 	sub	r2,r3,r2
  8351cc:	1004803a 	cmplt	r2,r2,zero
  8351d0:	1000091e 	bne	r2,zero,8351f8 <tcp_input+0x1e54>
  8351d4:	e0bfe717 	ldw	r2,-100(fp)
  8351d8:	10c01217 	ldw	r3,72(r2)
  8351dc:	e0bfed17 	ldw	r2,-76(fp)
  8351e0:	10800717 	ldw	r2,28(r2)
  8351e4:	18802f1e 	bne	r3,r2,8352a4 <tcp_input+0x1f00>
  8351e8:	e0bfe717 	ldw	r2,-100(fp)
  8351ec:	10c01417 	ldw	r3,80(r2)
  8351f0:	e0bfde17 	ldw	r2,-136(fp)
  8351f4:	18802b2e 	bgeu	r3,r2,8352a4 <tcp_input+0x1f00>
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
  8351f8:	e0bfed17 	ldw	r2,-76(fp)
  8351fc:	1080028b 	ldhu	r2,10(r2)
  835200:	10bfffcc 	andi	r2,r2,65535
  835204:	1004c03a 	cmpne	r2,r2,zero
  835208:	1000101e 	bne	r2,zero,83524c <tcp_input+0x1ea8>
  83520c:	e0bfe717 	ldw	r2,-100(fp)
  835210:	10c01217 	ldw	r3,72(r2)
  835214:	e0bfed17 	ldw	r2,-76(fp)
  835218:	10800717 	ldw	r2,28(r2)
  83521c:	18800b1e 	bne	r3,r2,83524c <tcp_input+0x1ea8>
  835220:	e0bfe717 	ldw	r2,-100(fp)
  835224:	10c01417 	ldw	r3,80(r2)
  835228:	e0bfde17 	ldw	r2,-136(fp)
  83522c:	1880072e 	bgeu	r3,r2,83524c <tcp_input+0x1ea8>
          (tp->snd_wl2 == ti->ti_ack) &&
          (rx_win > tp->snd_wnd))
      {
         tcpstat.tcps_rcvwinupd++;
  835230:	00803934 	movhi	r2,228
  835234:	10a90c04 	addi	r2,r2,-23504
  835238:	10802d17 	ldw	r2,180(r2)
  83523c:	10c00044 	addi	r3,r2,1
  835240:	00803934 	movhi	r2,228
  835244:	10a90c04 	addi	r2,r2,-23504
  835248:	10c02d15 	stw	r3,180(r2)
      }
      tp->snd_wnd = rx_win;
  83524c:	e0ffe717 	ldw	r3,-100(fp)
  835250:	e0bfde17 	ldw	r2,-136(fp)
  835254:	18801415 	stw	r2,80(r3)
      tp->snd_wl1 = ti->ti_seq;
  835258:	e0bfed17 	ldw	r2,-76(fp)
  83525c:	10c00617 	ldw	r3,24(r2)
  835260:	e0bfe717 	ldw	r2,-100(fp)
  835264:	10c01115 	stw	r3,68(r2)
      tp->snd_wl2 = ti->ti_ack;
  835268:	e0bfed17 	ldw	r2,-76(fp)
  83526c:	10c00717 	ldw	r3,28(r2)
  835270:	e0bfe717 	ldw	r2,-100(fp)
  835274:	10c01215 	stw	r3,72(r2)
      if (tp->snd_wnd > tp->max_sndwnd)
  835278:	e0bfe717 	ldw	r2,-100(fp)
  83527c:	10c01417 	ldw	r3,80(r2)
  835280:	e0bfe717 	ldw	r2,-100(fp)
  835284:	10802317 	ldw	r2,140(r2)
  835288:	10c0042e 	bgeu	r2,r3,83529c <tcp_input+0x1ef8>
         tp->max_sndwnd = tp->snd_wnd;
  83528c:	e0bfe717 	ldw	r2,-100(fp)
  835290:	10c01417 	ldw	r3,80(r2)
  835294:	e0bfe717 	ldw	r2,-100(fp)
  835298:	10c02315 	stw	r3,140(r2)
      needoutput = 1;
  83529c:	00800044 	movi	r2,1
  8352a0:	e0bfe115 	stw	r2,-124(fp)
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
  8352a4:	e0bfe617 	ldw	r2,-104(fp)
  8352a8:	1080080c 	andi	r2,r2,32
  8352ac:	1005003a 	cmpeq	r2,r2,zero
  8352b0:	10005a1e 	bne	r2,zero,83541c <tcp_input+0x2078>
  8352b4:	e0bfed17 	ldw	r2,-76(fp)
  8352b8:	1080098b 	ldhu	r2,38(r2)
  8352bc:	10bfffcc 	andi	r2,r2,65535
  8352c0:	1005003a 	cmpeq	r2,r2,zero
  8352c4:	1000551e 	bne	r2,zero,83541c <tcp_input+0x2078>
  8352c8:	e0bfe717 	ldw	r2,-100(fp)
  8352cc:	10800217 	ldw	r2,8(r2)
  8352d0:	10800288 	cmpgei	r2,r2,10
  8352d4:	1000511e 	bne	r2,zero,83541c <tcp_input+0x2078>
       * This is a kludge, but if we receive and accept
       * random urgent pointers, we'll crash in
       * soreceive.  It's hard to imagine someone
       * actually wanting to send this much urgent data.
       */
      if (ti->ti_urp + so->so_rcv.sb_cc > SB_MAX) 
  8352d8:	e0bfed17 	ldw	r2,-76(fp)
  8352dc:	1080098b 	ldhu	r2,38(r2)
  8352e0:	10ffffcc 	andi	r3,r2,65535
  8352e4:	e0bfe517 	ldw	r2,-108(fp)
  8352e8:	10800a17 	ldw	r2,40(r2)
  8352ec:	1885883a 	add	r2,r3,r2
  8352f0:	10900070 	cmpltui	r2,r2,16385
  8352f4:	1000071e 	bne	r2,zero,835314 <tcp_input+0x1f70>
      {
         ti->ti_urp = 0;         /* XXX */
  8352f8:	e0bfed17 	ldw	r2,-76(fp)
  8352fc:	1000098d 	sth	zero,38(r2)
         tiflags &= ~TH_URG;     /* XXX */
  835300:	e0ffe617 	ldw	r3,-104(fp)
  835304:	00bff7c4 	movi	r2,-33
  835308:	1884703a 	and	r2,r3,r2
  83530c:	e0bfe615 	stw	r2,-104(fp)
         goto dodata;         /* XXX */
  835310:	00004d06 	br	835448 <tcp_input+0x20a4>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
  835314:	e0bfed17 	ldw	r2,-76(fp)
  835318:	10c00617 	ldw	r3,24(r2)
  83531c:	e0bfed17 	ldw	r2,-76(fp)
  835320:	1080098b 	ldhu	r2,38(r2)
  835324:	10bfffcc 	andi	r2,r2,65535
  835328:	1887883a 	add	r3,r3,r2
  83532c:	e0bfe717 	ldw	r2,-100(fp)
  835330:	10801717 	ldw	r2,92(r2)
  835334:	1885c83a 	sub	r2,r3,r2
  835338:	10800050 	cmplti	r2,r2,1
  83533c:	1000261e 	bne	r2,zero,8353d8 <tcp_input+0x2034>
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
  835340:	e0bfed17 	ldw	r2,-76(fp)
  835344:	10c00617 	ldw	r3,24(r2)
  835348:	e0bfed17 	ldw	r2,-76(fp)
  83534c:	1080098b 	ldhu	r2,38(r2)
  835350:	10bfffcc 	andi	r2,r2,65535
  835354:	1887883a 	add	r3,r3,r2
  835358:	e0bfe717 	ldw	r2,-100(fp)
  83535c:	10c01715 	stw	r3,92(r2)
         so->so_oobmark = so->so_rcv.sb_cc +
  835360:	e0bfe517 	ldw	r2,-108(fp)
  835364:	11000a17 	ldw	r4,40(r2)
  835368:	e0bfe717 	ldw	r2,-100(fp)
  83536c:	10c01717 	ldw	r3,92(r2)
  835370:	e0bfe717 	ldw	r2,-100(fp)
  835374:	10801617 	ldw	r2,88(r2)
  835378:	1885c83a 	sub	r2,r3,r2
  83537c:	2085883a 	add	r2,r4,r2
  835380:	10ffffc4 	addi	r3,r2,-1
  835384:	e0bfe517 	ldw	r2,-108(fp)
  835388:	10c01a15 	stw	r3,104(r2)
         (tp->rcv_up - tp->rcv_nxt) - 1;
         if (so->so_oobmark == 0)
  83538c:	e0bfe517 	ldw	r2,-108(fp)
  835390:	10801a17 	ldw	r2,104(r2)
  835394:	1004c03a 	cmpne	r2,r2,zero
  835398:	1000061e 	bne	r2,zero,8353b4 <tcp_input+0x2010>
            so->so_state |= SS_RCVATMARK;
  83539c:	e0bfe517 	ldw	r2,-108(fp)
  8353a0:	1080088b 	ldhu	r2,34(r2)
  8353a4:	10801014 	ori	r2,r2,64
  8353a8:	1007883a 	mov	r3,r2
  8353ac:	e0bfe517 	ldw	r2,-108(fp)
  8353b0:	10c0088d 	sth	r3,34(r2)
         sohasoutofband(so);
  8353b4:	e13fe517 	ldw	r4,-108(fp)
  8353b8:	083132c0 	call	83132c <sohasoutofband>
         tp->t_oobflags &= ~(TCPOOB_HAVEDATA | TCPOOB_HADDATA);
  8353bc:	e0bfe717 	ldw	r2,-100(fp)
  8353c0:	10c02403 	ldbu	r3,144(r2)
  8353c4:	00bfff04 	movi	r2,-4
  8353c8:	1884703a 	and	r2,r3,r2
  8353cc:	1007883a 	mov	r3,r2
  8353d0:	e0bfe717 	ldw	r2,-100(fp)
  8353d4:	10c02405 	stb	r3,144(r2)
       * Remove out of band data so doesn't get presented to user.
       * This can happen independent of advancing the URG pointer,
       * but if two URG's are pending at once, some out-of-band
       * data may creep in... ick.
       */
      if ( (ti->ti_urp <= ti->ti_len)
  8353d8:	e0bfed17 	ldw	r2,-76(fp)
  8353dc:	10c0098b 	ldhu	r3,38(r2)
  8353e0:	e0bfed17 	ldw	r2,-76(fp)
  8353e4:	1080028b 	ldhu	r2,10(r2)
  8353e8:	18ffffcc 	andi	r3,r3,65535
  8353ec:	10bfffcc 	andi	r2,r2,65535
  8353f0:	10c01536 	bltu	r2,r3,835448 <tcp_input+0x20a4>
  8353f4:	e0bfe517 	ldw	r2,-108(fp)
  8353f8:	10800417 	ldw	r2,16(r2)
  8353fc:	1080400c 	andi	r2,r2,256
  835400:	1004c03a 	cmpne	r2,r2,zero
  835404:	1000101e 	bne	r2,zero,835448 <tcp_input+0x20a4>
#ifdef SO_OOBINLINE
       && (so->so_options & SO_OOBINLINE) == 0
#endif
       )
      {
         tcp_pulloutofband(so, ti, m);
  835408:	e13fe517 	ldw	r4,-108(fp)
  83540c:	e17fed17 	ldw	r5,-76(fp)
  835410:	e1bff017 	ldw	r6,-64(fp)
  835414:	0835a880 	call	835a88 <tcp_pulloutofband>
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
  835418:	00000b06 	br	835448 <tcp_input+0x20a4>
      /*
       * If no out of band data is expected,
       * pull receive urgent pointer along
       * with the receive window.
       */
   if (SEQ_GT(tp->rcv_nxt, tp->rcv_up))
  83541c:	e0bfe717 	ldw	r2,-100(fp)
  835420:	10c01617 	ldw	r3,88(r2)
  835424:	e0bfe717 	ldw	r2,-100(fp)
  835428:	10801717 	ldw	r2,92(r2)
  83542c:	1885c83a 	sub	r2,r3,r2
  835430:	10800050 	cmplti	r2,r2,1
  835434:	1000041e 	bne	r2,zero,835448 <tcp_input+0x20a4>
      tp->rcv_up = tp->rcv_nxt;
  835438:	e0bfe717 	ldw	r2,-100(fp)
  83543c:	10c01617 	ldw	r3,88(r2)
  835440:	e0bfe717 	ldw	r2,-100(fp)
  835444:	10c01715 	stw	r3,92(r2)
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
  835448:	e0bfed17 	ldw	r2,-76(fp)
  83544c:	1080028b 	ldhu	r2,10(r2)
  835450:	10bfffcc 	andi	r2,r2,65535
  835454:	1004c03a 	cmpne	r2,r2,zero
  835458:	1000051e 	bne	r2,zero,835470 <tcp_input+0x20cc>
  83545c:	e0bfe617 	ldw	r2,-104(fp)
  835460:	1080004c 	andi	r2,r2,1
  835464:	10803fcc 	andi	r2,r2,255
  835468:	1005003a 	cmpeq	r2,r2,zero
  83546c:	10005c1e 	bne	r2,zero,8355e0 <tcp_input+0x223c>
  835470:	e0bfe717 	ldw	r2,-100(fp)
  835474:	10800217 	ldw	r2,8(r2)
  835478:	10800288 	cmpgei	r2,r2,10
  83547c:	1000581e 	bne	r2,zero,8355e0 <tcp_input+0x223c>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
  835480:	e0bfed17 	ldw	r2,-76(fp)
  835484:	10c00617 	ldw	r3,24(r2)
  835488:	e0bfe717 	ldw	r2,-100(fp)
  83548c:	10801617 	ldw	r2,88(r2)
  835490:	1880351e 	bne	r3,r2,835568 <tcp_input+0x21c4>
  835494:	e0bfe717 	ldw	r2,-100(fp)
  835498:	10c00017 	ldw	r3,0(r2)
  83549c:	e0bfe717 	ldw	r2,-100(fp)
  8354a0:	1880311e 	bne	r3,r2,835568 <tcp_input+0x21c4>
  8354a4:	e0bfe717 	ldw	r2,-100(fp)
  8354a8:	10800217 	ldw	r2,8(r2)
  8354ac:	10800118 	cmpnei	r2,r2,4
  8354b0:	10002d1e 	bne	r2,zero,835568 <tcp_input+0x21c4>
         else
         {
            tp->t_flags |= TF_ACKNOW;
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
  8354b4:	e0bfe717 	ldw	r2,-100(fp)
  8354b8:	10800b0b 	ldhu	r2,44(r2)
  8354bc:	10800054 	ori	r2,r2,1
  8354c0:	1007883a 	mov	r3,r2
  8354c4:	e0bfe717 	ldw	r2,-100(fp)
  8354c8:	10c00b0d 	sth	r3,44(r2)
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
  8354cc:	e0bfe717 	ldw	r2,-100(fp)
  8354d0:	10c01617 	ldw	r3,88(r2)
  8354d4:	e0bfed17 	ldw	r2,-76(fp)
  8354d8:	1080028b 	ldhu	r2,10(r2)
  8354dc:	10bfffcc 	andi	r2,r2,65535
  8354e0:	1887883a 	add	r3,r3,r2
  8354e4:	e0bfe717 	ldw	r2,-100(fp)
  8354e8:	10c01615 	stw	r3,88(r2)
         tiflags = ti->ti_flags & TH_FIN;
  8354ec:	e0bfed17 	ldw	r2,-76(fp)
  8354f0:	10800843 	ldbu	r2,33(r2)
  8354f4:	10803fcc 	andi	r2,r2,255
  8354f8:	1080004c 	andi	r2,r2,1
  8354fc:	e0bfe615 	stw	r2,-104(fp)
         tcpstat.tcps_rcvpack++;
  835500:	00803934 	movhi	r2,228
  835504:	10a90c04 	addi	r2,r2,-23504
  835508:	10801a17 	ldw	r2,104(r2)
  83550c:	10c00044 	addi	r3,r2,1
  835510:	00803934 	movhi	r2,228
  835514:	10a90c04 	addi	r2,r2,-23504
  835518:	10c01a15 	stw	r3,104(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
  83551c:	00803934 	movhi	r2,228
  835520:	10a90c04 	addi	r2,r2,-23504
  835524:	10c01b17 	ldw	r3,108(r2)
  835528:	e0bfed17 	ldw	r2,-76(fp)
  83552c:	1080028b 	ldhu	r2,10(r2)
  835530:	10bfffcc 	andi	r2,r2,65535
  835534:	1887883a 	add	r3,r3,r2
  835538:	00803934 	movhi	r2,228
  83553c:	10a90c04 	addi	r2,r2,-23504
  835540:	10c01b15 	stw	r3,108(r2)
         sbappend(&so->so_rcv, (m));
  835544:	e0bfe517 	ldw	r2,-108(fp)
  835548:	11000a04 	addi	r4,r2,40
  83554c:	e17ff017 	ldw	r5,-64(fp)
  835550:	0831d0c0 	call	831d0c <sbappend>
         sorwakeup(so);
  835554:	e0bfe517 	ldw	r2,-108(fp)
  835558:	11400a04 	addi	r5,r2,40
  83555c:	e13fe517 	ldw	r4,-108(fp)
  835560:	0831b480 	call	831b48 <sbwakeup>
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
  835564:	00000b06 	br	835594 <tcp_input+0x21f0>
#endif /* TCP_SACK */
      }
      else     /* received out of sequence segment */
      {
         /* Drop it in the reassmbly queue */
         tiflags = tcp_reass(tp, ti, m);
  835568:	e13fe717 	ldw	r4,-100(fp)
  83556c:	e17fed17 	ldw	r5,-76(fp)
  835570:	e1bff017 	ldw	r6,-64(fp)
  835574:	0832f9c0 	call	832f9c <tcp_reass>
  835578:	e0bfe615 	stw	r2,-104(fp)
         tp->t_flags |= TF_ACKNOW;
  83557c:	e0bfe717 	ldw	r2,-100(fp)
  835580:	10800b0b 	ldhu	r2,44(r2)
  835584:	10800054 	ori	r2,r2,1
  835588:	1007883a 	mov	r3,r2
  83558c:	e0bfe717 	ldw	r2,-100(fp)
  835590:	10c00b0d 	sth	r3,44(r2)
      /*
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
  835594:	e0bfe517 	ldw	r2,-108(fp)
  835598:	11000b17 	ldw	r4,44(r2)
  83559c:	e0bfe717 	ldw	r2,-100(fp)
  8355a0:	10c01917 	ldw	r3,100(r2)
  8355a4:	e0bfe717 	ldw	r2,-100(fp)
  8355a8:	10801617 	ldw	r2,88(r2)
  8355ac:	1885c83a 	sub	r2,r3,r2
  8355b0:	2085c83a 	sub	r2,r4,r2
  8355b4:	e0bfea15 	stw	r2,-88(fp)
      if (len > (int)tp->max_rcvd)
  8355b8:	e0bfe717 	ldw	r2,-100(fp)
  8355bc:	10802217 	ldw	r2,136(r2)
  8355c0:	1007883a 	mov	r3,r2
  8355c4:	e0bfea17 	ldw	r2,-88(fp)
  8355c8:	18800b0e 	bge	r3,r2,8355f8 <tcp_input+0x2254>
         tp->max_rcvd = (u_short)len;
  8355cc:	e0bfea17 	ldw	r2,-88(fp)
  8355d0:	10ffffcc 	andi	r3,r2,65535
  8355d4:	e0bfe717 	ldw	r2,-100(fp)
  8355d8:	10c02215 	stw	r3,136(r2)
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
  8355dc:	00000606 	br	8355f8 <tcp_input+0x2254>
      }
#endif   /* TCP_ZEROCOPY */
   } 
   else
   {
      m_freem(m);
  8355e0:	e13ff017 	ldw	r4,-64(fp)
  8355e4:	082b8a40 	call	82b8a4 <m_freem>
      tiflags &= ~TH_FIN;
  8355e8:	e0bfe617 	ldw	r2,-104(fp)
  8355ec:	00ffff84 	movi	r3,-2
  8355f0:	10c4703a 	and	r2,r2,r3
  8355f4:	e0bfe615 	stw	r2,-104(fp)

   /*
    * If FIN is received ACK the FIN and let the user know
    * that the connection is closing.
    */
   if (tiflags & TH_FIN) 
  8355f8:	e0bfe617 	ldw	r2,-104(fp)
  8355fc:	1080004c 	andi	r2,r2,1
  835600:	10803fcc 	andi	r2,r2,255
  835604:	1005003a 	cmpeq	r2,r2,zero
  835608:	1000471e 	bne	r2,zero,835728 <tcp_input+0x2384>
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
  83560c:	e0bfe717 	ldw	r2,-100(fp)
  835610:	10800217 	ldw	r2,8(r2)
  835614:	10800288 	cmpgei	r2,r2,10
  835618:	10000d1e 	bne	r2,zero,835650 <tcp_input+0x22ac>
      {
         socantrcvmore(so);
  83561c:	e13fe517 	ldw	r4,-108(fp)
  835620:	0831a580 	call	831a58 <socantrcvmore>
         tp->t_flags |= TF_ACKNOW;
  835624:	e0bfe717 	ldw	r2,-100(fp)
  835628:	10800b0b 	ldhu	r2,44(r2)
  83562c:	10800054 	ori	r2,r2,1
  835630:	1007883a 	mov	r3,r2
  835634:	e0bfe717 	ldw	r2,-100(fp)
  835638:	10c00b0d 	sth	r3,44(r2)
         tp->rcv_nxt++;
  83563c:	e0bfe717 	ldw	r2,-100(fp)
  835640:	10801617 	ldw	r2,88(r2)
  835644:	10c00044 	addi	r3,r2,1
  835648:	e0bfe717 	ldw	r2,-100(fp)
  83564c:	10c01615 	stw	r3,88(r2)
      }
      switch (tp->t_state) 
  835650:	e0bfe717 	ldw	r2,-100(fp)
  835654:	10800217 	ldw	r2,8(r2)
  835658:	10bfff44 	addi	r2,r2,-3
  83565c:	e0bfff15 	stw	r2,-4(fp)
  835660:	e0ffff17 	ldw	r3,-4(fp)
  835664:	18800228 	cmpgeui	r2,r3,8
  835668:	10002f1e 	bne	r2,zero,835728 <tcp_input+0x2384>
  83566c:	e13fff17 	ldw	r4,-4(fp)
  835670:	e13fff17 	ldw	r4,-4(fp)
  835674:	2105883a 	add	r2,r4,r4
  835678:	1087883a 	add	r3,r2,r2
  83567c:	008020f4 	movhi	r2,131
  835680:	1095a404 	addi	r2,r2,22160
  835684:	1885883a 	add	r2,r3,r2
  835688:	10800017 	ldw	r2,0(r2)
  83568c:	1000683a 	jmp	r2
  835690:	008356b0 	cmpltui	r2,zero,3418
  835694:	008356b0 	cmpltui	r2,zero,3418
  835698:	00835728 	cmpgeui	r2,zero,3420
  83569c:	008356c0 	call	8356c <OSCtxSw_SWITCH_PC+0x8352c>
  8356a0:	00835728 	cmpgeui	r2,zero,3420
  8356a4:	00835728 	cmpgeui	r2,zero,3420
  8356a8:	008356d0 	cmplti	r2,zero,3419
  8356ac:	0083570c 	andi	r2,zero,3420
       * In SYN_RECEIVED and ESTABLISHED STATES
       * enter the CLOSE_WAIT state.
       */
      case TCPS_SYN_RECEIVED:
      case TCPS_ESTABLISHED:
         tp->t_state = TCPS_CLOSE_WAIT;
  8356b0:	e0ffe717 	ldw	r3,-100(fp)
  8356b4:	00800144 	movi	r2,5
  8356b8:	18800215 	stw	r2,8(r3)
         break;
  8356bc:	00001a06 	br	835728 <tcp_input+0x2384>
       /*
       * If still in FIN_WAIT_1 STATE FIN has not been acked so
       * enter the CLOSING state.
       */
      case TCPS_FIN_WAIT_1:
         tp->t_state = TCPS_CLOSING;
  8356c0:	e0ffe717 	ldw	r3,-100(fp)
  8356c4:	008001c4 	movi	r2,7
  8356c8:	18800215 	stw	r2,8(r3)
         break;
  8356cc:	00001606 	br	835728 <tcp_input+0x2384>
       * In FIN_WAIT_2 state enter the TIME_WAIT state,
       * starting the time-wait timer, turning off the other 
       * standard timers.
       */
      case TCPS_FIN_WAIT_2:
         tp->t_state = TCPS_TIME_WAIT;
  8356d0:	e0ffe717 	ldw	r3,-100(fp)
  8356d4:	00800284 	movi	r2,10
  8356d8:	18800215 	stw	r2,8(r3)
         tcp_canceltimers(tp);
  8356dc:	e13fe717 	ldw	r4,-100(fp)
  8356e0:	0837f6c0 	call	837f6c <tcp_canceltimers>
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
  8356e4:	00802174 	movhi	r2,133
  8356e8:	1082b904 	addi	r2,r2,2788
  8356ec:	10800017 	ldw	r2,0(r2)
  8356f0:	1085883a 	add	r2,r2,r2
  8356f4:	1007883a 	mov	r3,r2
  8356f8:	e0bfe717 	ldw	r2,-100(fp)
  8356fc:	10c00615 	stw	r3,24(r2)
         soisdisconnected(so);
  835700:	e13fe517 	ldw	r4,-108(fp)
  835704:	08315640 	call	831564 <soisdisconnected>
         break;
  835708:	00000706 	br	835728 <tcp_input+0x2384>

      /*
       * In TIME_WAIT state restart the 2 MSL time_wait timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
  83570c:	00802174 	movhi	r2,133
  835710:	1082b904 	addi	r2,r2,2788
  835714:	10800017 	ldw	r2,0(r2)
  835718:	1085883a 	add	r2,r2,r2
  83571c:	1007883a 	mov	r3,r2
  835720:	e0bfe717 	ldw	r2,-100(fp)
  835724:	10c00615 	stw	r3,24(r2)
    ostate, tp, &tcp_saveti);
#endif
   /*
    * Return any desired output.
    */
   if (needoutput || (tp->t_flags & TF_ACKNOW))
  835728:	e0bfe117 	ldw	r2,-124(fp)
  83572c:	1004c03a 	cmpne	r2,r2,zero
  835730:	1000071e 	bne	r2,zero,835750 <tcp_input+0x23ac>
  835734:	e0bfe717 	ldw	r2,-100(fp)
  835738:	10800b0b 	ldhu	r2,44(r2)
  83573c:	10bfffcc 	andi	r2,r2,65535
  835740:	1080004c 	andi	r2,r2,1
  835744:	10803fcc 	andi	r2,r2,255
  835748:	1005003a 	cmpeq	r2,r2,zero
  83574c:	1000651e 	bne	r2,zero,8358e4 <tcp_input+0x2540>
      (void) tcp_output(tp);
  835750:	e13fe717 	ldw	r4,-100(fp)
  835754:	0835f840 	call	835f84 <tcp_output>
   return;
  835758:	00006206 	br	8358e4 <tcp_input+0x2540>
dropafterack:
   /*
    * Generate an ACK dropping incoming segment if it occupies
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
  83575c:	e0bfe617 	ldw	r2,-104(fp)
  835760:	1080010c 	andi	r2,r2,4
  835764:	1005003a 	cmpeq	r2,r2,zero
  835768:	1000031e 	bne	r2,zero,835778 <tcp_input+0x23d4>
      GOTO_DROP;
  83576c:	0081a904 	movi	r2,1700
  835770:	d0a0ba15 	stw	r2,-32024(gp)
  835774:	00004f06 	br	8358b4 <tcp_input+0x2510>
   m_freem (m);
  835778:	e13ff017 	ldw	r4,-64(fp)
  83577c:	082b8a40 	call	82b8a4 <m_freem>
   tp->t_flags |= TF_ACKNOW;
  835780:	e0bfe717 	ldw	r2,-100(fp)
  835784:	10800b0b 	ldhu	r2,44(r2)
  835788:	10800054 	ori	r2,r2,1
  83578c:	1007883a 	mov	r3,r2
  835790:	e0bfe717 	ldw	r2,-100(fp)
  835794:	10c00b0d 	sth	r3,44(r2)
   (void) tcp_output (tp);
  835798:	e13fe717 	ldw	r4,-100(fp)
  83579c:	0835f840 	call	835f84 <tcp_output>
   return;
  8357a0:	00005006 	br	8358e4 <tcp_input+0x2540>

dropwithreset:
   TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
  8357a4:	00803934 	movhi	r2,228
  8357a8:	10a8de04 	addi	r2,r2,-23688
  8357ac:	10800d17 	ldw	r2,52(r2)
  8357b0:	10c00044 	addi	r3,r2,1
  8357b4:	00803934 	movhi	r2,228
  8357b8:	10a8de04 	addi	r2,r2,-23688
  8357bc:	10c00d15 	stw	r3,52(r2)
   if (om) 
  8357c0:	e0bfeb17 	ldw	r2,-84(fp)
  8357c4:	1005003a 	cmpeq	r2,r2,zero
  8357c8:	1000031e 	bne	r2,zero,8357d8 <tcp_input+0x2434>
   {
      (void) m_free(om);
  8357cc:	e13feb17 	ldw	r4,-84(fp)
  8357d0:	082b7700 	call	82b770 <m_free>
      om = 0;
  8357d4:	e03feb15 	stw	zero,-84(fp)
   }

   /* Don't reset resets */
   if (tiflags & TH_RST)
  8357d8:	e0bfe617 	ldw	r2,-104(fp)
  8357dc:	1080010c 	andi	r2,r2,4
  8357e0:	1005003a 	cmpeq	r2,r2,zero
  8357e4:	1000031e 	bne	r2,zero,8357f4 <tcp_input+0x2450>
      GOTO_DROP;
  8357e8:	0081ad04 	movi	r2,1716
  8357ec:	d0a0ba15 	stw	r2,-32024(gp)
  8357f0:	00003006 	br	8358b4 <tcp_input+0x2510>
    * Generate a RST, dropping incoming segment.
    * Make ACK acceptable to originator of segment.
    * Don't bother to respond if destination was broadcast.
    */
#ifdef IP_V4
   if (in_broadcast(ti->ti_dst.s_addr))
  8357f4:	e0bfed17 	ldw	r2,-76(fp)
  8357f8:	11000417 	ldw	r4,16(r2)
  8357fc:	082c8d00 	call	82c8d0 <in_broadcast>
  835800:	1005003a 	cmpeq	r2,r2,zero
  835804:	1000031e 	bne	r2,zero,835814 <tcp_input+0x2470>
      GOTO_DROP;
  835808:	0081af44 	movi	r2,1725
  83580c:	d0a0ba15 	stw	r2,-32024(gp)
  835810:	00002806 	br	8358b4 <tcp_input+0x2510>
      IP6CPY(&(m->pkt->ip6_hdr->ip_src), &ip6_src);
      IP6CPY(&(m->pkt->ip6_hdr->ip_dest), &ip6_dst);
   }
#endif   /* IP_V6 */

   if (tiflags & TH_ACK)
  835814:	e0bfe617 	ldw	r2,-104(fp)
  835818:	1080040c 	andi	r2,r2,16
  83581c:	1005003a 	cmpeq	r2,r2,zero
  835820:	10000b1e 	bne	r2,zero,835850 <tcp_input+0x24ac>
      tcp_respond (tp, ti, (tcp_seq)0, ti->ti_ack, TH_RST, m);
  835824:	e0bfed17 	ldw	r2,-76(fp)
  835828:	11c00717 	ldw	r7,28(r2)
  83582c:	00800104 	movi	r2,4
  835830:	d8800015 	stw	r2,0(sp)
  835834:	e0bff017 	ldw	r2,-64(fp)
  835838:	d8800115 	stw	r2,4(sp)
  83583c:	e13fe717 	ldw	r4,-100(fp)
  835840:	e17fed17 	ldw	r5,-76(fp)
  835844:	000d883a 	mov	r6,zero
  835848:	08374540 	call	837454 <tcp_respond>
  83584c:	00001306 	br	83589c <tcp_input+0x24f8>
   else
   {
      if (tiflags & TH_SYN)
  835850:	e0bfe617 	ldw	r2,-104(fp)
  835854:	1080008c 	andi	r2,r2,2
  835858:	1005003a 	cmpeq	r2,r2,zero
  83585c:	1000051e 	bne	r2,zero,835874 <tcp_input+0x24d0>
         ti->ti_seq++;
  835860:	e0bfed17 	ldw	r2,-76(fp)
  835864:	10800617 	ldw	r2,24(r2)
  835868:	10c00044 	addi	r3,r2,1
  83586c:	e0bfed17 	ldw	r2,-76(fp)
  835870:	10c00615 	stw	r3,24(r2)
      tcp_respond(tp, ti, ti->ti_seq, (tcp_seq)0, TH_RST|TH_ACK, m);
  835874:	e0bfed17 	ldw	r2,-76(fp)
  835878:	11800617 	ldw	r6,24(r2)
  83587c:	00800504 	movi	r2,20
  835880:	d8800015 	stw	r2,0(sp)
  835884:	e0bff017 	ldw	r2,-64(fp)
  835888:	d8800115 	stw	r2,4(sp)
  83588c:	e13fe717 	ldw	r4,-100(fp)
  835890:	e17fed17 	ldw	r5,-76(fp)
  835894:	000f883a 	mov	r7,zero
  835898:	08374540 	call	837454 <tcp_respond>
   }
   /* destroy temporarily created socket */
   if (dropsocket)
  83589c:	e0bfe017 	ldw	r2,-128(fp)
  8358a0:	1005003a 	cmpeq	r2,r2,zero
  8358a4:	10000f1e 	bne	r2,zero,8358e4 <tcp_input+0x2540>
      (void) soabort(so);
  8358a8:	e13fe517 	ldw	r4,-108(fp)
  8358ac:	082f7380 	call	82f738 <soabort>
   return;
  8358b0:	00000c06 	br	8358e4 <tcp_input+0x2540>

drop:
   if (om)
  8358b4:	e0bfeb17 	ldw	r2,-84(fp)
  8358b8:	1005003a 	cmpeq	r2,r2,zero
  8358bc:	1000021e 	bne	r2,zero,8358c8 <tcp_input+0x2524>
      (void) m_free(om);
  8358c0:	e13feb17 	ldw	r4,-84(fp)
  8358c4:	082b7700 	call	82b770 <m_free>
#ifdef DO_TCPTRACE
   if (tp && (tp->t_inpcb->inp_socket->so_options & SO_DEBUG))
      tcp_trace("drop: state %d, tcpcb: %x, saveti: %x",
    ostate, tp, &tcp_saveti);
#endif
   m_freem(m);
  8358c8:	e13ff017 	ldw	r4,-64(fp)
  8358cc:	082b8a40 	call	82b8a4 <m_freem>
   /* destroy temporarily created socket */
   if (dropsocket)
  8358d0:	e0bfe017 	ldw	r2,-128(fp)
  8358d4:	1005003a 	cmpeq	r2,r2,zero
  8358d8:	1000021e 	bne	r2,zero,8358e4 <tcp_input+0x2540>
      (void) soabort(so);
  8358dc:	e13fe517 	ldw	r4,-108(fp)
  8358e0:	082f7380 	call	82f738 <soabort>
   return;
}
  8358e4:	e037883a 	mov	sp,fp
  8358e8:	dfc00117 	ldw	ra,4(sp)
  8358ec:	df000017 	ldw	fp,0(sp)
  8358f0:	dec00204 	addi	sp,sp,8
  8358f4:	f800283a 	ret

008358f8 <tcp_dooptions>:

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
  8358f8:	defff404 	addi	sp,sp,-48
  8358fc:	dfc00b15 	stw	ra,44(sp)
  835900:	df000a15 	stw	fp,40(sp)
  835904:	df000a04 	addi	fp,sp,40
  835908:	e13ffc15 	stw	r4,-16(fp)
  83590c:	e17ffd15 	stw	r5,-12(fp)
  835910:	e1bffe15 	stw	r6,-8(fp)
   u_char * cp;   /* pointer into option buffer */
   int   opt;     /* current option code */
   int   optlen;  /* length of current option */
   int   cnt;     /* byte count left in header */
   struct socket * so = tp->t_inpcb->inp_socket;
  835914:	e0bffc17 	ldw	r2,-16(fp)
  835918:	10800d17 	ldw	r2,52(r2)
  83591c:	10800817 	ldw	r2,32(r2)
  835920:	e0bff715 	stw	r2,-36(fp)
#ifdef TCP_TIMESTAMP
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
  835924:	e0bffd17 	ldw	r2,-12(fp)
  835928:	10800317 	ldw	r2,12(r2)
  83592c:	e0bffb15 	stw	r2,-20(fp)
   cnt = om->m_len;
  835930:	e0bffd17 	ldw	r2,-12(fp)
  835934:	10800217 	ldw	r2,8(r2)
  835938:	e0bff815 	stw	r2,-32(fp)
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
  83593c:	00004806 	br	835a60 <tcp_dooptions+0x168>
   {
      opt = cp[0];
  835940:	e0bffb17 	ldw	r2,-20(fp)
  835944:	10800003 	ldbu	r2,0(r2)
  835948:	10803fcc 	andi	r2,r2,255
  83594c:	e0bffa15 	stw	r2,-24(fp)
      if (opt == TCPOPT_EOL)
  835950:	e0bffa17 	ldw	r2,-24(fp)
  835954:	1005003a 	cmpeq	r2,r2,zero
  835958:	1000441e 	bne	r2,zero,835a6c <tcp_dooptions+0x174>
         break;
      if (opt == TCPOPT_NOP)
  83595c:	e0bffa17 	ldw	r2,-24(fp)
  835960:	10800058 	cmpnei	r2,r2,1
  835964:	1000031e 	bne	r2,zero,835974 <tcp_dooptions+0x7c>
         optlen = 1;
  835968:	00800044 	movi	r2,1
  83596c:	e0bff915 	stw	r2,-28(fp)
  835970:	00000806 	br	835994 <tcp_dooptions+0x9c>
      else 
      {
         optlen = cp[1];
  835974:	e0bffb17 	ldw	r2,-20(fp)
  835978:	10800044 	addi	r2,r2,1
  83597c:	10800003 	ldbu	r2,0(r2)
  835980:	10803fcc 	andi	r2,r2,255
  835984:	e0bff915 	stw	r2,-28(fp)
         if (optlen <= 0)
  835988:	e0bff917 	ldw	r2,-28(fp)
  83598c:	10800050 	cmplti	r2,r2,1
  835990:	1000361e 	bne	r2,zero,835a6c <tcp_dooptions+0x174>
            break;
      }

      switch (opt) 
  835994:	e0bffa17 	ldw	r2,-24(fp)
  835998:	108000a0 	cmpeqi	r2,r2,2
  83599c:	1000011e 	bne	r2,zero,8359a4 <tcp_dooptions+0xac>
  8359a0:	00002606 	br	835a3c <tcp_dooptions+0x144>
      {
      case TCPOPT_MAXSEG:
      {
         u_short mssval;
         if (optlen != 4)
  8359a4:	e0bff917 	ldw	r2,-28(fp)
  8359a8:	10800118 	cmpnei	r2,r2,4
  8359ac:	1000231e 	bne	r2,zero,835a3c <tcp_dooptions+0x144>
            continue;
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
  8359b0:	e0bffe17 	ldw	r2,-8(fp)
  8359b4:	10800843 	ldbu	r2,33(r2)
  8359b8:	10803fcc 	andi	r2,r2,255
  8359bc:	1080008c 	andi	r2,r2,2
  8359c0:	1005003a 	cmpeq	r2,r2,zero
  8359c4:	10001d1e 	bne	r2,zero,835a3c <tcp_dooptions+0x144>
            continue;
         mssval = *(u_short *)(cp + 2);
  8359c8:	e0bffb17 	ldw	r2,-20(fp)
  8359cc:	10800084 	addi	r2,r2,2
  8359d0:	1080000b 	ldhu	r2,0(r2)
  8359d4:	e0bff60d 	sth	r2,-40(fp)
         mssval = ntohs(mssval);
  8359d8:	e0bff60b 	ldhu	r2,-40(fp)
  8359dc:	1004d23a 	srli	r2,r2,8
  8359e0:	10803fcc 	andi	r2,r2,255
  8359e4:	1009883a 	mov	r4,r2
  8359e8:	e0bff60b 	ldhu	r2,-40(fp)
  8359ec:	1004923a 	slli	r2,r2,8
  8359f0:	1007883a 	mov	r3,r2
  8359f4:	00bfc004 	movi	r2,-256
  8359f8:	1884703a 	and	r2,r3,r2
  8359fc:	2084b03a 	or	r2,r4,r2
  835a00:	e0bff60d 	sth	r2,-40(fp)
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
  835a04:	e13ff717 	ldw	r4,-36(fp)
  835a08:	0835e680 	call	835e68 <tcp_mss>
  835a0c:	10ffffcc 	andi	r3,r2,65535
  835a10:	e0bff60b 	ldhu	r2,-40(fp)
  835a14:	1880042e 	bgeu	r3,r2,835a28 <tcp_dooptions+0x130>
  835a18:	e13ff717 	ldw	r4,-36(fp)
  835a1c:	0835e680 	call	835e68 <tcp_mss>
  835a20:	e0bfff0d 	sth	r2,-4(fp)
  835a24:	00000206 	br	835a30 <tcp_dooptions+0x138>
  835a28:	e0bff60b 	ldhu	r2,-40(fp)
  835a2c:	e0bfff0d 	sth	r2,-4(fp)
  835a30:	e0bffc17 	ldw	r2,-16(fp)
  835a34:	e0ffff0b 	ldhu	r3,-4(fp)
  835a38:	10c00a0d 	sth	r3,40(r2)
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
   cnt = om->m_len;
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
  835a3c:	e0fff817 	ldw	r3,-32(fp)
  835a40:	e0bff917 	ldw	r2,-28(fp)
  835a44:	1885c83a 	sub	r2,r3,r2
  835a48:	e0bff815 	stw	r2,-32(fp)
  835a4c:	e0bff917 	ldw	r2,-28(fp)
  835a50:	1007883a 	mov	r3,r2
  835a54:	e0bffb17 	ldw	r2,-20(fp)
  835a58:	10c5883a 	add	r2,r2,r3
  835a5c:	e0bffb15 	stw	r2,-20(fp)
  835a60:	e0bff817 	ldw	r2,-32(fp)
  835a64:	10800048 	cmpgei	r2,r2,1
  835a68:	103fb51e 	bne	r2,zero,835940 <tcp_dooptions+0x48>

      default:
         break;
      }
   }
   (void) m_free(om);
  835a6c:	e13ffd17 	ldw	r4,-12(fp)
  835a70:	082b7700 	call	82b770 <m_free>
         tp->t_flags &= ~TF_TIMESTAMP;
   }
#endif /* TCP_TIMESTAMP */

   return;
}
  835a74:	e037883a 	mov	sp,fp
  835a78:	dfc00117 	ldw	ra,4(sp)
  835a7c:	df000017 	ldw	fp,0(sp)
  835a80:	dec00204 	addi	sp,sp,8
  835a84:	f800283a 	ret

00835a88 <tcp_pulloutofband>:

void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
  835a88:	defff804 	addi	sp,sp,-32
  835a8c:	dfc00715 	stw	ra,28(sp)
  835a90:	df000615 	stw	fp,24(sp)
  835a94:	df000604 	addi	fp,sp,24
  835a98:	e13ffd15 	stw	r4,-12(fp)
  835a9c:	e17ffe15 	stw	r5,-8(fp)
  835aa0:	e1bfff15 	stw	r6,-4(fp)
   int   cnt   =  ti->ti_urp  -  1;
  835aa4:	e0bffe17 	ldw	r2,-8(fp)
  835aa8:	1080098b 	ldhu	r2,38(r2)
  835aac:	10bfffcc 	andi	r2,r2,65535
  835ab0:	10bfffc4 	addi	r2,r2,-1
  835ab4:	e0bffc15 	stw	r2,-16(fp)

   /**m = dtom(ti);**/
   while (cnt >= 0) 
  835ab8:	00003306 	br	835b88 <tcp_pulloutofband+0x100>
   {
      if (m->m_len > (unsigned)cnt) 
  835abc:	e0bfff17 	ldw	r2,-4(fp)
  835ac0:	10c00217 	ldw	r3,8(r2)
  835ac4:	e0bffc17 	ldw	r2,-16(fp)
  835ac8:	10c0242e 	bgeu	r2,r3,835b5c <tcp_pulloutofband+0xd4>
      {
         char *   cp =  mtod(m,  char *) +  cnt;
  835acc:	e0bfff17 	ldw	r2,-4(fp)
  835ad0:	10c00317 	ldw	r3,12(r2)
  835ad4:	e0bffc17 	ldw	r2,-16(fp)
  835ad8:	1885883a 	add	r2,r3,r2
  835adc:	e0bffb15 	stw	r2,-20(fp)
         struct tcpcb * tp =  sototcpcb(so);
  835ae0:	e0bffd17 	ldw	r2,-12(fp)
  835ae4:	10800117 	ldw	r2,4(r2)
  835ae8:	10800917 	ldw	r2,36(r2)
  835aec:	e0bffa15 	stw	r2,-24(fp)

         tp->t_iobc = *cp;
  835af0:	e0bffb17 	ldw	r2,-20(fp)
  835af4:	10c00003 	ldbu	r3,0(r2)
  835af8:	e0bffa17 	ldw	r2,-24(fp)
  835afc:	10c02445 	stb	r3,145(r2)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
  835b00:	e0bffa17 	ldw	r2,-24(fp)
  835b04:	10802403 	ldbu	r2,144(r2)
  835b08:	10800054 	ori	r2,r2,1
  835b0c:	1007883a 	mov	r3,r2
  835b10:	e0bffa17 	ldw	r2,-24(fp)
  835b14:	10c02405 	stb	r3,144(r2)
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
  835b18:	e0bffb17 	ldw	r2,-20(fp)
  835b1c:	11400044 	addi	r5,r2,1
  835b20:	e0bfff17 	ldw	r2,-4(fp)
  835b24:	10c00217 	ldw	r3,8(r2)
  835b28:	e0bffc17 	ldw	r2,-16(fp)
  835b2c:	1885c83a 	sub	r2,r3,r2
  835b30:	10ffffc4 	addi	r3,r2,-1
  835b34:	e0bffb17 	ldw	r2,-20(fp)
  835b38:	1009883a 	mov	r4,r2
  835b3c:	180d883a 	mov	r6,r3
  835b40:	08073380 	call	807338 <memcpy>
         m->m_len--;
  835b44:	e0bfff17 	ldw	r2,-4(fp)
  835b48:	10800217 	ldw	r2,8(r2)
  835b4c:	10ffffc4 	addi	r3,r2,-1
  835b50:	e0bfff17 	ldw	r2,-4(fp)
  835b54:	10c00215 	stw	r3,8(r2)
         return;
  835b58:	00001106 	br	835ba0 <tcp_pulloutofband+0x118>
      }
      cnt -= m->m_len;
  835b5c:	e0fffc17 	ldw	r3,-16(fp)
  835b60:	e0bfff17 	ldw	r2,-4(fp)
  835b64:	10800217 	ldw	r2,8(r2)
  835b68:	1885c83a 	sub	r2,r3,r2
  835b6c:	e0bffc15 	stw	r2,-16(fp)
      m = m->m_next;
  835b70:	e0bfff17 	ldw	r2,-4(fp)
  835b74:	10800617 	ldw	r2,24(r2)
  835b78:	e0bfff15 	stw	r2,-4(fp)
      if (m == 0)
  835b7c:	e0bfff17 	ldw	r2,-4(fp)
  835b80:	1005003a 	cmpeq	r2,r2,zero
  835b84:	1000031e 	bne	r2,zero,835b94 <tcp_pulloutofband+0x10c>
   struct mbuf *  m)
{
   int   cnt   =  ti->ti_urp  -  1;

   /**m = dtom(ti);**/
   while (cnt >= 0) 
  835b88:	e0bffc17 	ldw	r2,-16(fp)
  835b8c:	1004403a 	cmpge	r2,r2,zero
  835b90:	103fca1e 	bne	r2,zero,835abc <tcp_pulloutofband+0x34>
      cnt -= m->m_len;
      m = m->m_next;
      if (m == 0)
         break;
   }
   panic("tcp_pulloutofband");
  835b94:	01002174 	movhi	r4,133
  835b98:	21370004 	addi	r4,r4,-9216
  835b9c:	0825a2c0 	call	825a2c <panic>
}
  835ba0:	e037883a 	mov	sp,fp
  835ba4:	dfc00117 	ldw	ra,4(sp)
  835ba8:	df000017 	ldw	fp,0(sp)
  835bac:	dec00204 	addi	sp,sp,8
  835bb0:	f800283a 	ret

00835bb4 <tcp_xmit_timer>:
 * RETURNS: 
 */

void
tcp_xmit_timer(struct tcpcb * tp)
{
  835bb4:	defffb04 	addi	sp,sp,-20
  835bb8:	dfc00415 	stw	ra,16(sp)
  835bbc:	df000315 	stw	fp,12(sp)
  835bc0:	df000304 	addi	fp,sp,12
  835bc4:	e13fff15 	stw	r4,-4(fp)
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
  835bc8:	e0bfff17 	ldw	r2,-4(fp)
  835bcc:	10801e17 	ldw	r2,120(r2)
  835bd0:	1004c03a 	cmpne	r2,r2,zero
  835bd4:	1000021e 	bne	r2,zero,835be0 <tcp_xmit_timer+0x2c>
  835bd8:	082a7c80 	call	82a7c8 <dtrap>
  835bdc:	00008b06 	br	835e0c <tcp_xmit_timer+0x258>
#endif

   tcpstat.tcps_rttupdated++;
  835be0:	00803934 	movhi	r2,228
  835be4:	10a90c04 	addi	r2,r2,-23504
  835be8:	10800717 	ldw	r2,28(r2)
  835bec:	10c00044 	addi	r3,r2,1
  835bf0:	00803934 	movhi	r2,228
  835bf4:	10a90c04 	addi	r2,r2,-23504
  835bf8:	10c00715 	stw	r3,28(r2)

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
  835bfc:	00802174 	movhi	r2,133
  835c00:	10832604 	addi	r2,r2,3224
  835c04:	10c00017 	ldw	r3,0(r2)
  835c08:	e0bfff17 	ldw	r2,-4(fp)
  835c0c:	10801e17 	ldw	r2,120(r2)
  835c10:	1889c83a 	sub	r4,r3,r2
  835c14:	01407d04 	movi	r5,500
  835c18:	08053b80 	call	8053b8 <__udivsi3>
  835c1c:	e0bffd15 	stw	r2,-12(fp)
   if(tp->t_srtt != 0)
  835c20:	e0bfff17 	ldw	r2,-4(fp)
  835c24:	10802017 	ldw	r2,128(r2)
  835c28:	1005003a 	cmpeq	r2,r2,zero
  835c2c:	10004a1e 	bne	r2,zero,835d58 <tcp_xmit_timer+0x1a4>
   {
      if(rtt == 0)      /* fast path for small round trip */
  835c30:	e0bffd17 	ldw	r2,-12(fp)
  835c34:	1004c03a 	cmpne	r2,r2,zero
  835c38:	1000131e 	bne	r2,zero,835c88 <tcp_xmit_timer+0xd4>
      {
         /* if either the rtt or varience is over 1, reduce it. */
         if(tp->t_srtt > 1)
  835c3c:	e0bfff17 	ldw	r2,-4(fp)
  835c40:	10802017 	ldw	r2,128(r2)
  835c44:	10800090 	cmplti	r2,r2,2
  835c48:	1000051e 	bne	r2,zero,835c60 <tcp_xmit_timer+0xac>
            tp->t_srtt--;
  835c4c:	e0bfff17 	ldw	r2,-4(fp)
  835c50:	10802017 	ldw	r2,128(r2)
  835c54:	10ffffc4 	addi	r3,r2,-1
  835c58:	e0bfff17 	ldw	r2,-4(fp)
  835c5c:	10c02015 	stw	r3,128(r2)
         if(tp->t_rttvar > 1)
  835c60:	e0bfff17 	ldw	r2,-4(fp)
  835c64:	10802117 	ldw	r2,132(r2)
  835c68:	10800090 	cmplti	r2,r2,2
  835c6c:	1000481e 	bne	r2,zero,835d90 <tcp_xmit_timer+0x1dc>
            tp->t_rttvar--;
  835c70:	e0bfff17 	ldw	r2,-4(fp)
  835c74:	10802117 	ldw	r2,132(r2)
  835c78:	10ffffc4 	addi	r3,r2,-1
  835c7c:	e0bfff17 	ldw	r2,-4(fp)
  835c80:	10c02115 	stw	r3,132(r2)
  835c84:	00004206 	br	835d90 <tcp_xmit_timer+0x1dc>
       * The following magic is equivalent
       * to the smoothing algorithm in rfc793
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
  835c88:	e0bffd17 	ldw	r2,-12(fp)
  835c8c:	10bfffc4 	addi	r2,r2,-1
  835c90:	1085883a 	add	r2,r2,r2
  835c94:	1085883a 	add	r2,r2,r2
  835c98:	1007883a 	mov	r3,r2
  835c9c:	e0bfff17 	ldw	r2,-4(fp)
  835ca0:	10802017 	ldw	r2,128(r2)
  835ca4:	1005d0fa 	srai	r2,r2,3
  835ca8:	1885c83a 	sub	r2,r3,r2
  835cac:	e0bffe15 	stw	r2,-8(fp)
      if ((tp->t_srtt += delta) <= 0)
  835cb0:	e0bfff17 	ldw	r2,-4(fp)
  835cb4:	10c02017 	ldw	r3,128(r2)
  835cb8:	e0bffe17 	ldw	r2,-8(fp)
  835cbc:	1887883a 	add	r3,r3,r2
  835cc0:	e0bfff17 	ldw	r2,-4(fp)
  835cc4:	10c02015 	stw	r3,128(r2)
  835cc8:	e0bfff17 	ldw	r2,-4(fp)
  835ccc:	10802017 	ldw	r2,128(r2)
  835cd0:	10800048 	cmpgei	r2,r2,1
  835cd4:	1000031e 	bne	r2,zero,835ce4 <tcp_xmit_timer+0x130>
         tp->t_srtt = 1;
  835cd8:	e0ffff17 	ldw	r3,-4(fp)
  835cdc:	00800044 	movi	r2,1
  835ce0:	18802015 	stw	r2,128(r3)
       * (scaled by 4).  The following is equivalent
       * to rfc793 smoothing with an alpha of .75
       * (rttvar = rttvar*3/4 + |delta| / 4).
       * This replaces rfc793's wired-in beta.
       */
      if (delta < 0)
  835ce4:	e0bffe17 	ldw	r2,-8(fp)
  835ce8:	1004403a 	cmpge	r2,r2,zero
  835cec:	1000031e 	bne	r2,zero,835cfc <tcp_xmit_timer+0x148>
         delta = -delta;
  835cf0:	e0bffe17 	ldw	r2,-8(fp)
  835cf4:	0085c83a 	sub	r2,zero,r2
  835cf8:	e0bffe15 	stw	r2,-8(fp)
      delta -= (short)(tp->t_rttvar >> 1);
  835cfc:	e0bfff17 	ldw	r2,-4(fp)
  835d00:	10802117 	ldw	r2,132(r2)
  835d04:	1005d07a 	srai	r2,r2,1
  835d08:	10ffffcc 	andi	r3,r2,65535
  835d0c:	18e0001c 	xori	r3,r3,32768
  835d10:	18e00004 	addi	r3,r3,-32768
  835d14:	e0bffe17 	ldw	r2,-8(fp)
  835d18:	10c5c83a 	sub	r2,r2,r3
  835d1c:	e0bffe15 	stw	r2,-8(fp)
      if ((tp->t_rttvar += delta) <= 0)
  835d20:	e0bfff17 	ldw	r2,-4(fp)
  835d24:	10c02117 	ldw	r3,132(r2)
  835d28:	e0bffe17 	ldw	r2,-8(fp)
  835d2c:	1887883a 	add	r3,r3,r2
  835d30:	e0bfff17 	ldw	r2,-4(fp)
  835d34:	10c02115 	stw	r3,132(r2)
  835d38:	e0bfff17 	ldw	r2,-4(fp)
  835d3c:	10802117 	ldw	r2,132(r2)
  835d40:	10800048 	cmpgei	r2,r2,1
  835d44:	1000121e 	bne	r2,zero,835d90 <tcp_xmit_timer+0x1dc>
         tp->t_rttvar = 1;
  835d48:	e0ffff17 	ldw	r3,-4(fp)
  835d4c:	00800044 	movi	r2,1
  835d50:	18802115 	stw	r2,132(r3)
  835d54:	00000e06 	br	835d90 <tcp_xmit_timer+0x1dc>
       * No rtt measurement yet - use the
       * unsmoothed rtt.  Set the variance
       * to half the rtt (so our first
       * retransmit happens at 2*rtt)
       */
      if(rtt < 1)
  835d58:	e0bffd17 	ldw	r2,-12(fp)
  835d5c:	10800048 	cmpgei	r2,r2,1
  835d60:	1000021e 	bne	r2,zero,835d6c <tcp_xmit_timer+0x1b8>
         rtt = 1;
  835d64:	00800044 	movi	r2,1
  835d68:	e0bffd15 	stw	r2,-12(fp)
      tp->t_srtt = rtt << 3;
  835d6c:	e0bffd17 	ldw	r2,-12(fp)
  835d70:	100690fa 	slli	r3,r2,3
  835d74:	e0bfff17 	ldw	r2,-4(fp)
  835d78:	10c02015 	stw	r3,128(r2)
      tp->t_rttvar = rtt << 1;
  835d7c:	e0bffd17 	ldw	r2,-12(fp)
  835d80:	1085883a 	add	r2,r2,r2
  835d84:	1007883a 	mov	r3,r2
  835d88:	e0bfff17 	ldw	r2,-4(fp)
  835d8c:	10c02115 	stw	r3,132(r2)
   }
   tp->t_rttick = 0;       /* clear RT timer */
  835d90:	e0bfff17 	ldw	r2,-4(fp)
  835d94:	10001e15 	stw	zero,120(r2)
   tp->t_rxtshift = 0;
  835d98:	e0bfff17 	ldw	r2,-4(fp)
  835d9c:	10000715 	stw	zero,28(r2)
   TCPT_RANGESET(tp->t_rxtcur, 
  835da0:	e0bfff17 	ldw	r2,-4(fp)
  835da4:	10802017 	ldw	r2,128(r2)
  835da8:	1007d0ba 	srai	r3,r2,2
  835dac:	e0bfff17 	ldw	r2,-4(fp)
  835db0:	10802117 	ldw	r2,132(r2)
  835db4:	1885883a 	add	r2,r3,r2
  835db8:	1005d07a 	srai	r2,r2,1
  835dbc:	10ffffcc 	andi	r3,r2,65535
  835dc0:	18e0001c 	xori	r3,r3,32768
  835dc4:	18e00004 	addi	r3,r3,-32768
  835dc8:	e0bfff17 	ldw	r2,-4(fp)
  835dcc:	10c00815 	stw	r3,32(r2)
  835dd0:	e0bfff17 	ldw	r2,-4(fp)
  835dd4:	10800817 	ldw	r2,32(r2)
  835dd8:	10800088 	cmpgei	r2,r2,2
  835ddc:	1000041e 	bne	r2,zero,835df0 <tcp_xmit_timer+0x23c>
  835de0:	e0ffff17 	ldw	r3,-4(fp)
  835de4:	00800084 	movi	r2,2
  835de8:	18800815 	stw	r2,32(r3)
  835dec:	00000706 	br	835e0c <tcp_xmit_timer+0x258>
  835df0:	e0bfff17 	ldw	r2,-4(fp)
  835df4:	10800817 	ldw	r2,32(r2)
  835df8:	10802050 	cmplti	r2,r2,129
  835dfc:	1000031e 	bne	r2,zero,835e0c <tcp_xmit_timer+0x258>
  835e00:	e0ffff17 	ldw	r3,-4(fp)
  835e04:	00802004 	movi	r2,128
  835e08:	18800815 	stw	r2,32(r3)
    ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1,
    TCPTV_MIN, TCPTV_REXMTMAX);
}
  835e0c:	e037883a 	mov	sp,fp
  835e10:	dfc00117 	ldw	ra,4(sp)
  835e14:	df000017 	ldw	fp,0(sp)
  835e18:	dec00204 	addi	sp,sp,8
  835e1c:	f800283a 	ret

00835e20 <ip4_tcpmss>:


#ifdef IP_V4
int
ip4_tcpmss(struct socket * so)
{
  835e20:	defffd04 	addi	sp,sp,-12
  835e24:	df000215 	stw	fp,8(sp)
  835e28:	df000204 	addi	fp,sp,8
  835e2c:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   ifp = so->so_pcb->ifp;
  835e30:	e0bfff17 	ldw	r2,-4(fp)
  835e34:	10800117 	ldw	r2,4(r2)
  835e38:	10800a17 	ldw	r2,40(r2)
  835e3c:	e0bffe15 	stw	r2,-8(fp)
   return(ifp->n_mtu - (40 + ifp->n_lnh));
  835e40:	e0bffe17 	ldw	r2,-8(fp)
  835e44:	10c00917 	ldw	r3,36(r2)
  835e48:	e0bffe17 	ldw	r2,-8(fp)
  835e4c:	10800817 	ldw	r2,32(r2)
  835e50:	1885c83a 	sub	r2,r3,r2
  835e54:	10bff604 	addi	r2,r2,-40
}
  835e58:	e037883a 	mov	sp,fp
  835e5c:	df000017 	ldw	fp,0(sp)
  835e60:	dec00104 	addi	sp,sp,4
  835e64:	f800283a 	ret

00835e68 <tcp_mss>:
 */


int
tcp_mss(struct socket * so)
{
  835e68:	defff904 	addi	sp,sp,-28
  835e6c:	dfc00615 	stw	ra,24(sp)
  835e70:	df000515 	stw	fp,20(sp)
  835e74:	df000504 	addi	fp,sp,20
  835e78:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
  835e7c:	e0bffe17 	ldw	r2,-8(fp)
  835e80:	1005003a 	cmpeq	r2,r2,zero
  835e84:	1000091e 	bne	r2,zero,835eac <tcp_mss+0x44>
  835e88:	e0bffe17 	ldw	r2,-8(fp)
  835e8c:	10800117 	ldw	r2,4(r2)
  835e90:	1005003a 	cmpeq	r2,r2,zero
  835e94:	1000051e 	bne	r2,zero,835eac <tcp_mss+0x44>
  835e98:	e0bffe17 	ldw	r2,-8(fp)
  835e9c:	10800117 	ldw	r2,4(r2)
  835ea0:	10800a17 	ldw	r2,40(r2)
  835ea4:	1004c03a 	cmpne	r2,r2,zero
  835ea8:	1000071e 	bne	r2,zero,835ec8 <tcp_mss+0x60>
       (so->so_pcb == NULL) ||
       (so->so_pcb->ifp == NULL))
   {
      if (so->so_domain == AF_INET)  /* IPv4 */
  835eac:	e0bffe17 	ldw	r2,-8(fp)
  835eb0:	10800517 	ldw	r2,20(r2)
  835eb4:	10800098 	cmpnei	r2,r2,2
  835eb8:	1000031e 	bne	r2,zero,835ec8 <tcp_mss+0x60>
         return TCP_MSS;            /* user defined */
  835ebc:	00816d04 	movi	r2,1460
  835ec0:	e0bfff15 	stw	r2,-4(fp)
  835ec4:	00002906 	br	835f6c <tcp_mss+0x104>
#endif   /* IP_V6 */


#ifdef IP_V4   /* Begin messy domain defines */
#ifndef IP_V6  /* V4 only version */
   mss = ip4_tcpmss(so);
  835ec8:	e13ffe17 	ldw	r4,-8(fp)
  835ecc:	0835e200 	call	835e20 <ip4_tcpmss>
  835ed0:	e0bffd15 	stw	r2,-12(fp)
#endif         /* end of dual mode */
#else          /* no IP_v4, assume V6 only */
      mss = ip6_tcpmss(so, ifp);
#endif         /* end messy domain defines */

   if (mss > TCP_MSS)    /* check upper limit from compile */
  835ed4:	e0bffd17 	ldw	r2,-12(fp)
  835ed8:	10816d50 	cmplti	r2,r2,1461
  835edc:	1000021e 	bne	r2,zero,835ee8 <tcp_mss+0x80>
      mss = TCP_MSS;
  835ee0:	00816d04 	movi	r2,1460
  835ee4:	e0bffd15 	stw	r2,-12(fp)

   /* check upper limit which may be set by setsockopt() */
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
  835ee8:	e0bffe17 	ldw	r2,-8(fp)
  835eec:	10800117 	ldw	r2,4(r2)
  835ef0:	e0bffc15 	stw	r2,-16(fp)
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
  835ef4:	e0bffc17 	ldw	r2,-16(fp)
  835ef8:	10800917 	ldw	r2,36(r2)
  835efc:	e0bffb15 	stw	r2,-20(fp)
   
   /* has user set max seg? */
   if (tp->t_flags & TF_MAXSEG)
  835f00:	e0bffb17 	ldw	r2,-20(fp)
  835f04:	10800b0b 	ldhu	r2,44(r2)
  835f08:	10bfffcc 	andi	r2,r2,65535
  835f0c:	1081000c 	andi	r2,r2,1024
  835f10:	1005003a 	cmpeq	r2,r2,zero
  835f14:	1000051e 	bne	r2,zero,835f2c <tcp_mss+0xc4>
      return tp->t_maxseg;    /* yup */
  835f18:	e0bffb17 	ldw	r2,-20(fp)
  835f1c:	10800a0b 	ldhu	r2,40(r2)
  835f20:	10bfffcc 	andi	r2,r2,65535
  835f24:	e0bfff15 	stw	r2,-4(fp)
  835f28:	00001006 	br	835f6c <tcp_mss+0x104>
      
   if (tp->t_maxseg && (mss > tp->t_maxseg))  /* check tcp's mss */
  835f2c:	e0bffb17 	ldw	r2,-20(fp)
  835f30:	10800a0b 	ldhu	r2,40(r2)
  835f34:	10bfffcc 	andi	r2,r2,65535
  835f38:	1005003a 	cmpeq	r2,r2,zero
  835f3c:	1000091e 	bne	r2,zero,835f64 <tcp_mss+0xfc>
  835f40:	e0bffb17 	ldw	r2,-20(fp)
  835f44:	10800a0b 	ldhu	r2,40(r2)
  835f48:	10ffffcc 	andi	r3,r2,65535
  835f4c:	e0bffd17 	ldw	r2,-12(fp)
  835f50:	1880040e 	bge	r3,r2,835f64 <tcp_mss+0xfc>
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
  835f54:	e0bffb17 	ldw	r2,-20(fp)
  835f58:	10800a0b 	ldhu	r2,40(r2)
  835f5c:	10bfffcc 	andi	r2,r2,65535
  835f60:	e0bffd15 	stw	r2,-12(fp)
   }

   return mss;
  835f64:	e0bffd17 	ldw	r2,-12(fp)
  835f68:	e0bfff15 	stw	r2,-4(fp)
  835f6c:	e0bfff17 	ldw	r2,-4(fp)
}
  835f70:	e037883a 	mov	sp,fp
  835f74:	dfc00117 	ldw	ra,4(sp)
  835f78:	df000017 	ldw	fp,0(sp)
  835f7c:	dec00204 	addi	sp,sp,8
  835f80:	f800283a 	ret

00835f84 <tcp_output>:
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
  835f84:	deffe004 	addi	sp,sp,-128
  835f88:	dfc01f15 	stw	ra,124(sp)
  835f8c:	df001e15 	stw	fp,120(sp)
  835f90:	df001e04 	addi	fp,sp,120
  835f94:	e13ff715 	stw	r4,-36(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
  835f98:	e0bff717 	ldw	r2,-36(fp)
  835f9c:	10800d17 	ldw	r2,52(r2)
  835fa0:	10800817 	ldw	r2,32(r2)
  835fa4:	e0bff515 	stw	r2,-44(fp)
   int   len;
   long  win;
   int   off,  flags,   error;
   struct mbuf *  m;
   struct tcpiphdr * ti;
   unsigned optlen = 0;
  835fa8:	e03fed15 	stw	zero,-76(fp)
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
  835fac:	e0bff717 	ldw	r2,-36(fp)
  835fb0:	10c01a17 	ldw	r3,104(r2)
  835fb4:	e0bff717 	ldw	r2,-36(fp)
  835fb8:	10800e17 	ldw	r2,56(r2)
  835fbc:	1885003a 	cmpeq	r2,r3,r2
  835fc0:	e0bfec15 	stw	r2,-80(fp)

again:
   sendalot = 0;
  835fc4:	e03feb15 	stw	zero,-84(fp)
   off = (int)(tp->snd_nxt - tp->snd_una);
  835fc8:	e0bff717 	ldw	r2,-36(fp)
  835fcc:	10c00f17 	ldw	r3,60(r2)
  835fd0:	e0bff717 	ldw	r2,-36(fp)
  835fd4:	10800e17 	ldw	r2,56(r2)
  835fd8:	1885c83a 	sub	r2,r3,r2
  835fdc:	e0bff215 	stw	r2,-56(fp)
   win = (long)tp->snd_wnd;   /* set basic send window */
  835fe0:	e0bff717 	ldw	r2,-36(fp)
  835fe4:	10801417 	ldw	r2,80(r2)
  835fe8:	e0bff315 	stw	r2,-52(fp)
   if (win > (long)tp->snd_cwnd) /* see if we need congestion control */
  835fec:	e0bff717 	ldw	r2,-36(fp)
  835ff0:	10801b17 	ldw	r2,108(r2)
  835ff4:	1007883a 	mov	r3,r2
  835ff8:	e0bff317 	ldw	r2,-52(fp)
  835ffc:	1880060e 	bge	r3,r2,836018 <tcp_output+0x94>
   {
      win = (int)(tp->snd_cwnd & ~(ALIGN_TYPE-1)); /* keep data aligned */
  836000:	e0bff717 	ldw	r2,-36(fp)
  836004:	10801b17 	ldw	r2,108(r2)
  836008:	1007883a 	mov	r3,r2
  83600c:	00bfff04 	movi	r2,-4
  836010:	1884703a 	and	r2,r3,r2
  836014:	e0bff315 	stw	r2,-52(fp)
    * If in persist timeout with window of 0, send 1 byte.
    * Otherwise, if window is small but nonzero
    * and timer expired, we will send what we can
    * and go to transmit state.
    */
   if (tp->t_force) 
  836018:	e0bff717 	ldw	r2,-36(fp)
  83601c:	10800a83 	ldbu	r2,42(r2)
  836020:	10803fcc 	andi	r2,r2,255
  836024:	1080201c 	xori	r2,r2,128
  836028:	10bfe004 	addi	r2,r2,-128
  83602c:	1005003a 	cmpeq	r2,r2,zero
  836030:	10000a1e 	bne	r2,zero,83605c <tcp_output+0xd8>
   {
      if (win == 0)
  836034:	e0bff317 	ldw	r2,-52(fp)
  836038:	1004c03a 	cmpne	r2,r2,zero
  83603c:	1000031e 	bne	r2,zero,83604c <tcp_output+0xc8>
         win = 1;
  836040:	00800044 	movi	r2,1
  836044:	e0bff315 	stw	r2,-52(fp)
  836048:	00000406 	br	83605c <tcp_output+0xd8>
      else 
      {
         tp->t_timer[TCPT_PERSIST] = 0;
  83604c:	e0bff717 	ldw	r2,-36(fp)
  836050:	10000415 	stw	zero,16(r2)
         tp->t_rxtshift = 0;
  836054:	e0bff717 	ldw	r2,-36(fp)
  836058:	10000715 	stw	zero,28(r2)
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
  83605c:	e0bff517 	ldw	r2,-44(fp)
  836060:	10801217 	ldw	r2,72(r2)
  836064:	e0fff317 	ldw	r3,-52(fp)
  836068:	e0fffb15 	stw	r3,-20(fp)
  83606c:	e0bffa15 	stw	r2,-24(fp)
  836070:	e0bffb17 	ldw	r2,-20(fp)
  836074:	e0fffa17 	ldw	r3,-24(fp)
  836078:	10c0022e 	bgeu	r2,r3,836084 <tcp_output+0x100>
  83607c:	e0bffb17 	ldw	r2,-20(fp)
  836080:	e0bffa15 	stw	r2,-24(fp)
  836084:	e0fffa17 	ldw	r3,-24(fp)
  836088:	e0bff217 	ldw	r2,-56(fp)
  83608c:	1885c83a 	sub	r2,r3,r2
  836090:	e0bff415 	stw	r2,-48(fp)
   }

   flags = tcp_outflags[tp->t_state];
  836094:	e0bff717 	ldw	r2,-36(fp)
  836098:	10c00217 	ldw	r3,8(r2)
  83609c:	00802174 	movhi	r2,133
  8360a0:	1081a204 	addi	r2,r2,1672
  8360a4:	10c5883a 	add	r2,r2,r3
  8360a8:	10800003 	ldbu	r2,0(r2)
  8360ac:	10803fcc 	andi	r2,r2,255
  8360b0:	e0bff115 	stw	r2,-60(fp)
   }
#else
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
  8360b4:	e0bff117 	ldw	r2,-60(fp)
  8360b8:	1080008c 	andi	r2,r2,2
  8360bc:	1005003a 	cmpeq	r2,r2,zero
  8360c0:	1000081e 	bne	r2,zero,8360e4 <tcp_output+0x160>
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
  8360c4:	e0ffed17 	ldw	r3,-76(fp)
  8360c8:	d0a0bb04 	addi	r2,gp,-32020
  8360cc:	188b883a 	add	r5,r3,r2
  8360d0:	e13ff717 	ldw	r4,-36(fp)
  8360d4:	e1bff117 	ldw	r6,-60(fp)
  8360d8:	e1fff517 	ldw	r7,-44(fp)
  8360dc:	08371fc0 	call	8371fc <bld_options>
  8360e0:	e0bfed15 	stw	r2,-76(fp)
   }
#endif

   if (len < 0)
  8360e4:	e0bff417 	ldw	r2,-48(fp)
  8360e8:	1004403a 	cmpge	r2,r2,zero
  8360ec:	10000a1e 	bne	r2,zero,836118 <tcp_output+0x194>
       * cancel pending retransmit and pull snd_nxt
       * back to (closed) window.  We will enter persist
       * state below.  If the window didn't close completely,
       * just wait for an ACK.
       */
      len = 0;
  8360f0:	e03ff415 	stw	zero,-48(fp)
      if (win == 0) 
  8360f4:	e0bff317 	ldw	r2,-52(fp)
  8360f8:	1004c03a 	cmpne	r2,r2,zero
  8360fc:	1000061e 	bne	r2,zero,836118 <tcp_output+0x194>
      {
         tp->t_timer[TCPT_REXMT] = 0;
  836100:	e0bff717 	ldw	r2,-36(fp)
  836104:	10000315 	stw	zero,12(r2)
         tp->snd_nxt = tp->snd_una;
  836108:	e0bff717 	ldw	r2,-36(fp)
  83610c:	10c00e17 	ldw	r3,56(r2)
  836110:	e0bff717 	ldw	r2,-36(fp)
  836114:	10c00f15 	stw	r3,60(r2)
      }
   }

   if (len > (int)tp->t_maxseg)
  836118:	e0bff717 	ldw	r2,-36(fp)
  83611c:	10800a0b 	ldhu	r2,40(r2)
  836120:	10ffffcc 	andi	r3,r2,65535
  836124:	e0bff417 	ldw	r2,-48(fp)
  836128:	1880060e 	bge	r3,r2,836144 <tcp_output+0x1c0>
   {
      len = tp->t_maxseg;
  83612c:	e0bff717 	ldw	r2,-36(fp)
  836130:	10800a0b 	ldhu	r2,40(r2)
  836134:	10bfffcc 	andi	r2,r2,65535
  836138:	e0bff415 	stw	r2,-48(fp)
      sendalot = 1;
  83613c:	00800044 	movi	r2,1
  836140:	e0bfeb15 	stw	r2,-84(fp)
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
  836144:	e0bff717 	ldw	r2,-36(fp)
  836148:	10c00f17 	ldw	r3,60(r2)
  83614c:	e0bff417 	ldw	r2,-48(fp)
  836150:	1889883a 	add	r4,r3,r2
  836154:	e0bff717 	ldw	r2,-36(fp)
  836158:	10c00e17 	ldw	r3,56(r2)
  83615c:	e0bff517 	ldw	r2,-44(fp)
  836160:	10801217 	ldw	r2,72(r2)
  836164:	1885883a 	add	r2,r3,r2
  836168:	2085c83a 	sub	r2,r4,r2
  83616c:	1004403a 	cmpge	r2,r2,zero
  836170:	1000041e 	bne	r2,zero,836184 <tcp_output+0x200>
      flags &= ~TH_FIN;
  836174:	e0bff117 	ldw	r2,-60(fp)
  836178:	00ffff84 	movi	r3,-2
  83617c:	10c4703a 	and	r2,r2,r3
  836180:	e0bff115 	stw	r2,-60(fp)
   win = (long)(sbspace(&so->so_rcv));
  836184:	e0bff517 	ldw	r2,-44(fp)
  836188:	10800b17 	ldw	r2,44(r2)
  83618c:	1007883a 	mov	r3,r2
  836190:	e0bff517 	ldw	r2,-44(fp)
  836194:	10800a17 	ldw	r2,40(r2)
  836198:	1885c83a 	sub	r2,r3,r2
  83619c:	1004803a 	cmplt	r2,r2,zero
  8361a0:	1000071e 	bne	r2,zero,8361c0 <tcp_output+0x23c>
  8361a4:	e0bff517 	ldw	r2,-44(fp)
  8361a8:	10c00b17 	ldw	r3,44(r2)
  8361ac:	e0bff517 	ldw	r2,-44(fp)
  8361b0:	10800a17 	ldw	r2,40(r2)
  8361b4:	1885c83a 	sub	r2,r3,r2
  8361b8:	e0bff915 	stw	r2,-28(fp)
  8361bc:	00000106 	br	8361c4 <tcp_output+0x240>
  8361c0:	e03ff915 	stw	zero,-28(fp)
  8361c4:	e0fff917 	ldw	r3,-28(fp)
  8361c8:	e0fff315 	stw	r3,-52(fp)
   /*
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
  8361cc:	e0bff117 	ldw	r2,-60(fp)
  8361d0:	1080004c 	andi	r2,r2,1
  8361d4:	10803fcc 	andi	r2,r2,255
  8361d8:	1005003a 	cmpeq	r2,r2,zero
  8361dc:	10000f1e 	bne	r2,zero,83621c <tcp_output+0x298>
  8361e0:	e0bff517 	ldw	r2,-44(fp)
  8361e4:	10801217 	ldw	r2,72(r2)
  8361e8:	1004c03a 	cmpne	r2,r2,zero
  8361ec:	10000b1e 	bne	r2,zero,83621c <tcp_output+0x298>
  8361f0:	e0bff717 	ldw	r2,-36(fp)
  8361f4:	10800b0b 	ldhu	r2,44(r2)
  8361f8:	10bfffcc 	andi	r2,r2,65535
  8361fc:	1080040c 	andi	r2,r2,16
  836200:	1005003a 	cmpeq	r2,r2,zero
  836204:	1000721e 	bne	r2,zero,8363d0 <tcp_output+0x44c>
  836208:	e0bff717 	ldw	r2,-36(fp)
  83620c:	10c00f17 	ldw	r3,60(r2)
  836210:	e0bff717 	ldw	r2,-36(fp)
  836214:	10800e17 	ldw	r2,56(r2)
  836218:	18806d26 	beq	r3,r2,8363d0 <tcp_output+0x44c>
      goto send;
   }
   /*
    * Send if we owe peer an ACK.
    */
   if (tp->t_flags & TF_ACKNOW)
  83621c:	e0bff717 	ldw	r2,-36(fp)
  836220:	10800b0b 	ldhu	r2,44(r2)
  836224:	10bfffcc 	andi	r2,r2,65535
  836228:	1080004c 	andi	r2,r2,1
  83622c:	10803fcc 	andi	r2,r2,255
  836230:	1004c03a 	cmpne	r2,r2,zero
  836234:	1000661e 	bne	r2,zero,8363d0 <tcp_output+0x44c>
      goto send;
   if (flags & (TH_SYN|TH_RST))
  836238:	e0bff117 	ldw	r2,-60(fp)
  83623c:	1080018c 	andi	r2,r2,6
  836240:	1004c03a 	cmpne	r2,r2,zero
  836244:	1000621e 	bne	r2,zero,8363d0 <tcp_output+0x44c>
      goto send;
   if (SEQ_GT(tp->snd_up, tp->snd_una))
  836248:	e0bff717 	ldw	r2,-36(fp)
  83624c:	10c01017 	ldw	r3,64(r2)
  836250:	e0bff717 	ldw	r2,-36(fp)
  836254:	10800e17 	ldw	r2,56(r2)
  836258:	1885c83a 	sub	r2,r3,r2
  83625c:	10800048 	cmpgei	r2,r2,1
  836260:	10005b1e 	bne	r2,zero,8363d0 <tcp_output+0x44c>
    * If peer's buffer is tiny, then send
    * when window is at least half open.
    * If retransmitting (possibly after persist timer forced us
    * to send into a small window), then must resend.
    */
   if (len)
  836264:	e0bff417 	ldw	r2,-48(fp)
  836268:	1005003a 	cmpeq	r2,r2,zero
  83626c:	1000281e 	bne	r2,zero,836310 <tcp_output+0x38c>
   {
      if (len == (int)tp->t_maxseg)
  836270:	e0bff717 	ldw	r2,-36(fp)
  836274:	10800a0b 	ldhu	r2,40(r2)
  836278:	10ffffcc 	andi	r3,r2,65535
  83627c:	e0bff417 	ldw	r2,-48(fp)
  836280:	18805326 	beq	r3,r2,8363d0 <tcp_output+0x44c>
         goto send;
      if ((idle || tp->t_flags & TF_NODELAY) &&
  836284:	e0bfec17 	ldw	r2,-80(fp)
  836288:	1004c03a 	cmpne	r2,r2,zero
  83628c:	1000061e 	bne	r2,zero,8362a8 <tcp_output+0x324>
  836290:	e0bff717 	ldw	r2,-36(fp)
  836294:	10800b0b 	ldhu	r2,44(r2)
  836298:	10bfffcc 	andi	r2,r2,65535
  83629c:	1080010c 	andi	r2,r2,4
  8362a0:	1005003a 	cmpeq	r2,r2,zero
  8362a4:	1000061e 	bne	r2,zero,8362c0 <tcp_output+0x33c>
  8362a8:	e0fff417 	ldw	r3,-48(fp)
  8362ac:	e0bff217 	ldw	r2,-56(fp)
  8362b0:	1887883a 	add	r3,r3,r2
  8362b4:	e0bff517 	ldw	r2,-44(fp)
  8362b8:	10801217 	ldw	r2,72(r2)
  8362bc:	1880440e 	bge	r3,r2,8363d0 <tcp_output+0x44c>
          len + off >= (int)so->so_snd.sb_cc)
      {
         goto send;
      }
      if (tp->t_force)
  8362c0:	e0bff717 	ldw	r2,-36(fp)
  8362c4:	10800a83 	ldbu	r2,42(r2)
  8362c8:	10803fcc 	andi	r2,r2,255
  8362cc:	1080201c 	xori	r2,r2,128
  8362d0:	10bfe004 	addi	r2,r2,-128
  8362d4:	1004c03a 	cmpne	r2,r2,zero
  8362d8:	10003d1e 	bne	r2,zero,8363d0 <tcp_output+0x44c>
         goto send;
      if (len >= (int)(tp->max_sndwnd / 2))
  8362dc:	e0bff717 	ldw	r2,-36(fp)
  8362e0:	10802317 	ldw	r2,140(r2)
  8362e4:	1004d07a 	srli	r2,r2,1
  8362e8:	1007883a 	mov	r3,r2
  8362ec:	e0bff417 	ldw	r2,-48(fp)
  8362f0:	10c0370e 	bge	r2,r3,8363d0 <tcp_output+0x44c>
         goto send;
      if (SEQ_LT(tp->snd_nxt, tp->snd_max))
  8362f4:	e0bff717 	ldw	r2,-36(fp)
  8362f8:	10c00f17 	ldw	r3,60(r2)
  8362fc:	e0bff717 	ldw	r2,-36(fp)
  836300:	10801a17 	ldw	r2,104(r2)
  836304:	1885c83a 	sub	r2,r3,r2
  836308:	1004803a 	cmplt	r2,r2,zero
  83630c:	1000301e 	bne	r2,zero,8363d0 <tcp_output+0x44c>
    * known to peer (as advertised window less
    * next expected input).  If the difference is at least two
    * max size segments or at least 35% of the maximum possible
    * window, then want to send a window update to peer.
    */
   if (win > 0)
  836310:	e0bff317 	ldw	r2,-52(fp)
  836314:	10800050 	cmplti	r2,r2,1
  836318:	10001b1e 	bne	r2,zero,836388 <tcp_output+0x404>
   {
      int   adv   =  (int)win -  (int)(tp->rcv_adv -  tp->rcv_nxt);
  83631c:	e0bff717 	ldw	r2,-36(fp)
  836320:	10c01917 	ldw	r3,100(r2)
  836324:	e0bff717 	ldw	r2,-36(fp)
  836328:	10801617 	ldw	r2,88(r2)
  83632c:	1885c83a 	sub	r2,r3,r2
  836330:	1007883a 	mov	r3,r2
  836334:	e0bff317 	ldw	r2,-52(fp)
  836338:	10c5c83a 	sub	r2,r2,r3
  83633c:	e0bfe715 	stw	r2,-100(fp)

      if (so->so_rcv.sb_cc == 0 && adv >= (int)(tp->t_maxseg * 2))
  836340:	e0bff517 	ldw	r2,-44(fp)
  836344:	10800a17 	ldw	r2,40(r2)
  836348:	1004c03a 	cmpne	r2,r2,zero
  83634c:	1000071e 	bne	r2,zero,83636c <tcp_output+0x3e8>
  836350:	e0bff717 	ldw	r2,-36(fp)
  836354:	10800a0b 	ldhu	r2,40(r2)
  836358:	10bfffcc 	andi	r2,r2,65535
  83635c:	1085883a 	add	r2,r2,r2
  836360:	1007883a 	mov	r3,r2
  836364:	e0bfe717 	ldw	r2,-100(fp)
  836368:	10c0190e 	bge	r2,r3,8363d0 <tcp_output+0x44c>
         goto send;
      if (100 * (u_int)adv / so->so_rcv.sb_hiwat >= 35)
  83636c:	e0bfe717 	ldw	r2,-100(fp)
  836370:	11001924 	muli	r4,r2,100
  836374:	e0bff517 	ldw	r2,-44(fp)
  836378:	11400b17 	ldw	r5,44(r2)
  83637c:	08053b80 	call	8053b8 <__udivsi3>
  836380:	108008e8 	cmpgeui	r2,r2,35
  836384:	1000121e 	bne	r2,zero,8363d0 <tcp_output+0x44c>
    * retransmit or persist is pending, then go to persist state.
    * If nothing happens soon, send when timer expires:
    * if window is nonzero, transmit what we can,
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
  836388:	e0bff517 	ldw	r2,-44(fp)
  83638c:	10801217 	ldw	r2,72(r2)
  836390:	1005003a 	cmpeq	r2,r2,zero
  836394:	10000c1e 	bne	r2,zero,8363c8 <tcp_output+0x444>
  836398:	e0bff717 	ldw	r2,-36(fp)
  83639c:	10800317 	ldw	r2,12(r2)
  8363a0:	1004c03a 	cmpne	r2,r2,zero
  8363a4:	1000081e 	bne	r2,zero,8363c8 <tcp_output+0x444>
  8363a8:	e0bff717 	ldw	r2,-36(fp)
  8363ac:	10800417 	ldw	r2,16(r2)
  8363b0:	1004c03a 	cmpne	r2,r2,zero
  8363b4:	1000041e 	bne	r2,zero,8363c8 <tcp_output+0x444>
       tp->t_timer[TCPT_PERSIST] == 0) 
   {
      tp->t_rxtshift = 0;
  8363b8:	e0bff717 	ldw	r2,-36(fp)
  8363bc:	10000715 	stw	zero,28(r2)
      tcp_setpersist(tp);
  8363c0:	e13ff717 	ldw	r4,-36(fp)
  8363c4:	08371000 	call	837100 <tcp_setpersist>
   }

   /*
    * No reason to send a segment, just return.
    */
   return (0);
  8363c8:	e03ff815 	stw	zero,-32(fp)
  8363cc:	00034606 	br	8370e8 <tcp_output+0x1164>

send:
   ENTER_CRIT_SECTION(tp);
  8363d0:	082a9c80 	call	82a9c8 <irq_Mask>

   /* Limit send length to the current buffer so as to
    * avoid doing the "mbuf shuffle" in m_copy().
    */
   bufoff = off;
  8363d4:	e0bff217 	ldw	r2,-56(fp)
  8363d8:	e0bfe815 	stw	r2,-96(fp)
   sendm = so->so_snd.sb_mb;
  8363dc:	e0bff517 	ldw	r2,-44(fp)
  8363e0:	10801817 	ldw	r2,96(r2)
  8363e4:	e0bfea15 	stw	r2,-88(fp)
   if (len)
  8363e8:	e0bff417 	ldw	r2,-48(fp)
  8363ec:	1005003a 	cmpeq	r2,r2,zero
  8363f0:	10006b1e 	bne	r2,zero,8365a0 <tcp_output+0x61c>
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
  8363f4:	00000b06 	br	836424 <tcp_output+0x4a0>
      {
         bufoff -= sendm->m_len;
  8363f8:	e0ffe817 	ldw	r3,-96(fp)
  8363fc:	e0bfea17 	ldw	r2,-88(fp)
  836400:	10800217 	ldw	r2,8(r2)
  836404:	1885c83a 	sub	r2,r3,r2
  836408:	e0bfe815 	stw	r2,-96(fp)
         if (bufoff < 0)   /* if off is in this buffer, break */
  83640c:	e0bfe817 	ldw	r2,-96(fp)
  836410:	1004803a 	cmplt	r2,r2,zero
  836414:	1000061e 	bne	r2,zero,836430 <tcp_output+0x4ac>
            break;
         sendm = sendm->m_next;
  836418:	e0bfea17 	ldw	r2,-88(fp)
  83641c:	10800617 	ldw	r2,24(r2)
  836420:	e0bfea15 	stw	r2,-88(fp)
   bufoff = off;
   sendm = so->so_snd.sb_mb;
   if (len)
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
  836424:	e0bfea17 	ldw	r2,-88(fp)
  836428:	1004c03a 	cmpne	r2,r2,zero
  83642c:	103ff21e 	bne	r2,zero,8363f8 <tcp_output+0x474>
         bufoff -= sendm->m_len;
         if (bufoff < 0)   /* if off is in this buffer, break */
            break;
         sendm = sendm->m_next;
      }
      if (!sendm) { dtrap();  /* shouldn't happen */ }
  836430:	e0bfea17 	ldw	r2,-88(fp)
  836434:	1004c03a 	cmpne	r2,r2,zero
  836438:	1000011e 	bne	r2,zero,836440 <tcp_output+0x4bc>
  83643c:	082a7c80 	call	82a7c8 <dtrap>
      bufoff += sendm->m_len; /* index to next data to send in msend */
  836440:	e0bfea17 	ldw	r2,-88(fp)
  836444:	10c00217 	ldw	r3,8(r2)
  836448:	e0bfe817 	ldw	r2,-96(fp)
  83644c:	1885883a 	add	r2,r3,r2
  836450:	e0bfe815 	stw	r2,-96(fp)

      /* if socket has multiple unsent mbufs, set flag for send to loop */
      if ((sendm->m_next) && (len > (int)sendm->m_len))
  836454:	e0bfea17 	ldw	r2,-88(fp)
  836458:	10800617 	ldw	r2,24(r2)
  83645c:	1005003a 	cmpeq	r2,r2,zero
  836460:	10000b1e 	bne	r2,zero,836490 <tcp_output+0x50c>
  836464:	e0bfea17 	ldw	r2,-88(fp)
  836468:	10800217 	ldw	r2,8(r2)
  83646c:	1007883a 	mov	r3,r2
  836470:	e0bff417 	ldw	r2,-48(fp)
  836474:	1880060e 	bge	r3,r2,836490 <tcp_output+0x50c>
      {
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
  836478:	e0fff117 	ldw	r3,-60(fp)
  83647c:	00bfff84 	movi	r2,-2
  836480:	1884703a 	and	r2,r3,r2
  836484:	e0bff115 	stw	r2,-60(fp)
         sendalot = 1;     /* set to send more segments */
  836488:	00800044 	movi	r2,1
  83648c:	e0bfeb15 	stw	r2,-84(fp)
      }
      if((flags & TH_FIN) && (so->so_snd.sb_cc > (unsigned)len))
  836490:	e0bff117 	ldw	r2,-60(fp)
  836494:	1080004c 	andi	r2,r2,1
  836498:	10803fcc 	andi	r2,r2,255
  83649c:	1005003a 	cmpeq	r2,r2,zero
  8364a0:	1000081e 	bne	r2,zero,8364c4 <tcp_output+0x540>
  8364a4:	e0bff517 	ldw	r2,-44(fp)
  8364a8:	10c01217 	ldw	r3,72(r2)
  8364ac:	e0bff417 	ldw	r2,-48(fp)
  8364b0:	10c0042e 	bgeu	r2,r3,8364c4 <tcp_output+0x540>
      {
         /* This can happen on slow links (PPP) which retry the last 
          * segment - the one with the FIN bit attached to data.
          */
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
  8364b4:	e0bff117 	ldw	r2,-60(fp)
  8364b8:	00ffff84 	movi	r3,-2
  8364bc:	10c4703a 	and	r2,r2,r3
  8364c0:	e0bff115 	stw	r2,-60(fp)
      }

      /* only send the rest of msend */
      len = min(len, (int)sendm->m_len);
  8364c4:	e0bfea17 	ldw	r2,-88(fp)
  8364c8:	10800217 	ldw	r2,8(r2)
  8364cc:	e0fff417 	ldw	r3,-48(fp)
  8364d0:	e0fffd15 	stw	r3,-12(fp)
  8364d4:	e0bffc15 	stw	r2,-16(fp)
  8364d8:	e0bffd17 	ldw	r2,-12(fp)
  8364dc:	e0fffc17 	ldw	r3,-16(fp)
  8364e0:	10c0020e 	bge	r2,r3,8364ec <tcp_output+0x568>
  8364e4:	e0bffd17 	ldw	r2,-12(fp)
  8364e8:	e0bffc15 	stw	r2,-16(fp)
  8364ec:	e0fffc17 	ldw	r3,-16(fp)
  8364f0:	e0fff415 	stw	r3,-48(fp)
       * Similarly, if sendm->m_data is not aligned with respect to 
       * sendm->m_base and ALIGN_TYPE, we will copy the data to 
       * ensure that it (and the then-prepended IP/TCP headers) will 
       * be aligned according to ALIGN_TYPE. 
       */
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
  8364f4:	e0bfe817 	ldw	r2,-96(fp)
  8364f8:	1004c03a 	cmpne	r2,r2,zero
  8364fc:	1000091e 	bne	r2,zero,836524 <tcp_output+0x5a0>
  836500:	e0bfea17 	ldw	r2,-88(fp)
  836504:	10800317 	ldw	r2,12(r2)
  836508:	1007883a 	mov	r3,r2
  83650c:	e0bfea17 	ldw	r2,-88(fp)
  836510:	10800417 	ldw	r2,16(r2)
  836514:	1885c83a 	sub	r2,r3,r2
  836518:	108000cc 	andi	r2,r2,3
  83651c:	1005003a 	cmpeq	r2,r2,zero
  836520:	10001f1e 	bne	r2,zero,8365a0 <tcp_output+0x61c>
          (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) != 0))
      {
         len = min(len, (int)(sendm->m_len - bufoff));   /* limit len again */
  836524:	e0bfea17 	ldw	r2,-88(fp)
  836528:	10c00217 	ldw	r3,8(r2)
  83652c:	e0bfe817 	ldw	r2,-96(fp)
  836530:	1885c83a 	sub	r2,r3,r2
  836534:	e0fff417 	ldw	r3,-48(fp)
  836538:	e0ffff15 	stw	r3,-4(fp)
  83653c:	e0bffe15 	stw	r2,-8(fp)
  836540:	e0bfff17 	ldw	r2,-4(fp)
  836544:	e0fffe17 	ldw	r3,-8(fp)
  836548:	10c0020e 	bge	r2,r3,836554 <tcp_output+0x5d0>
  83654c:	e0bfff17 	ldw	r2,-4(fp)
  836550:	e0bffe15 	stw	r2,-8(fp)
  836554:	e0fffe17 	ldw	r3,-8(fp)
  836558:	e0fff415 	stw	r3,-48(fp)
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
  83655c:	00802174 	movhi	r2,133
  836560:	1082b504 	addi	r2,r2,2772
  836564:	10800017 	ldw	r2,0(r2)
  836568:	10bff204 	addi	r2,r2,-56
  83656c:	1007883a 	mov	r3,r2
  836570:	e0bff417 	ldw	r2,-48(fp)
  836574:	18800a0e 	bge	r3,r2,8365a0 <tcp_output+0x61c>
  836578:	00803934 	movhi	r2,228
  83657c:	10a84304 	addi	r2,r2,-24308
  836580:	10800217 	ldw	r2,8(r2)
  836584:	10800088 	cmpgei	r2,r2,2
  836588:	1000051e 	bne	r2,zero,8365a0 <tcp_output+0x61c>
             (bigfreeq.q_len < 2))      /* and we are low on big buffers */
         {
            len = lilbufsiz - HDRSLEN;
  83658c:	00802174 	movhi	r2,133
  836590:	1082b504 	addi	r2,r2,2772
  836594:	10800017 	ldw	r2,0(r2)
  836598:	10bff204 	addi	r2,r2,-56
  83659c:	e0bff415 	stw	r2,-48(fp)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
  8365a0:	e0bff417 	ldw	r2,-48(fp)
  8365a4:	1005003a 	cmpeq	r2,r2,zero
  8365a8:	10003b1e 	bne	r2,zero,836698 <tcp_output+0x714>
  8365ac:	e0bfe817 	ldw	r2,-96(fp)
  8365b0:	1004c03a 	cmpne	r2,r2,zero
  8365b4:	1000381e 	bne	r2,zero,836698 <tcp_output+0x714>
  8365b8:	e0bfea17 	ldw	r2,-88(fp)
  8365bc:	10800117 	ldw	r2,4(r2)
  8365c0:	10800917 	ldw	r2,36(r2)
  8365c4:	10800058 	cmpnei	r2,r2,1
  8365c8:	1000331e 	bne	r2,zero,836698 <tcp_output+0x714>
  8365cc:	e0bfea17 	ldw	r2,-88(fp)
  8365d0:	10800317 	ldw	r2,12(r2)
  8365d4:	1007883a 	mov	r3,r2
  8365d8:	e0bfea17 	ldw	r2,-88(fp)
  8365dc:	10800417 	ldw	r2,16(r2)
  8365e0:	1885c83a 	sub	r2,r3,r2
  8365e4:	108000cc 	andi	r2,r2,3
  8365e8:	1004c03a 	cmpne	r2,r2,zero
  8365ec:	10002a1e 	bne	r2,zero,836698 <tcp_output+0x714>
  8365f0:	e0bfed17 	ldw	r2,-76(fp)
  8365f4:	1004c03a 	cmpne	r2,r2,zero
  8365f8:	1000271e 	bne	r2,zero,836698 <tcp_output+0x714>
       (sendm->pkt->inuse == 1) &&
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
       (optlen == 0))
   {
      /* get an empty mbuf to "clone" the data */
      m = m_getnbuf(MT_TXDATA, 0);
  8365fc:	01000084 	movi	r4,2
  836600:	000b883a 	mov	r5,zero
  836604:	082b5c80 	call	82b5c8 <m_getnbuf>
  836608:	e0bfef15 	stw	r2,-68(fp)
      if (!m)
  83660c:	e0bfef17 	ldw	r2,-68(fp)
  836610:	1004c03a 	cmpne	r2,r2,zero
  836614:	1000041e 	bne	r2,zero,836628 <tcp_output+0x6a4>
      {
         EXIT_CRIT_SECTION(tp);
  836618:	082aa240 	call	82aa24 <irq_Unmask>
         return (ENOBUFS);
  83661c:	00801a44 	movi	r2,105
  836620:	e0bff815 	stw	r2,-32(fp)
  836624:	0002b006 	br	8370e8 <tcp_output+0x1164>
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
  836628:	e0bfea17 	ldw	r2,-88(fp)
  83662c:	10c00117 	ldw	r3,4(r2)
  836630:	e0bfef17 	ldw	r2,-68(fp)
  836634:	10c00115 	stw	r3,4(r2)
      m->pkt->inuse++;     /* bump packet's use count */
  836638:	e0bfef17 	ldw	r2,-68(fp)
  83663c:	10c00117 	ldw	r3,4(r2)
  836640:	18800917 	ldw	r2,36(r3)
  836644:	10800044 	addi	r2,r2,1
  836648:	18800915 	stw	r2,36(r3)
      m->m_base = sendm->m_base; /* clone mbuf members */
  83664c:	e0bfea17 	ldw	r2,-88(fp)
  836650:	10c00417 	ldw	r3,16(r2)
  836654:	e0bfef17 	ldw	r2,-68(fp)
  836658:	10c00415 	stw	r3,16(r2)
      m->m_memsz = sendm->m_memsz;
  83665c:	e0bfea17 	ldw	r2,-88(fp)
  836660:	10c00517 	ldw	r3,20(r2)
  836664:	e0bfef17 	ldw	r2,-68(fp)
  836668:	10c00515 	stw	r3,20(r2)
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
  83666c:	e0bff417 	ldw	r2,-48(fp)
  836670:	10800a04 	addi	r2,r2,40
  836674:	1007883a 	mov	r3,r2
  836678:	e0bfef17 	ldw	r2,-68(fp)
  83667c:	10c00215 	stw	r3,8(r2)
      m->m_data = sendm->m_data - TCPIPHDRSZ;
  836680:	e0bfea17 	ldw	r2,-88(fp)
  836684:	10800317 	ldw	r2,12(r2)
  836688:	10fff604 	addi	r3,r2,-40
  83668c:	e0bfef17 	ldw	r2,-68(fp)
  836690:	10c00315 	stw	r3,12(r2)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
  836694:	00002e06 	br	836750 <tcp_output+0x7cc>
   {
      /* Grab a header mbuf, attaching a copy of data to be 
       * transmitted, and initialize the header from 
       * the template for sends on this connection.
       */
      m = m_getwithdata (MT_HEADER, IFNETHDR_SIZE + TCPIPHDRSZ);
  836698:	00802174 	movhi	r2,133
  83669c:	1082ff04 	addi	r2,r2,3068
  8366a0:	10800017 	ldw	r2,0(r2)
  8366a4:	11400a04 	addi	r5,r2,40
  8366a8:	010000c4 	movi	r4,3
  8366ac:	082b5c80 	call	82b5c8 <m_getnbuf>
  8366b0:	e0bfef15 	stw	r2,-68(fp)
      if (m ==(struct mbuf *)NULL)
  8366b4:	e0bfef17 	ldw	r2,-68(fp)
  8366b8:	1004c03a 	cmpne	r2,r2,zero
  8366bc:	1000041e 	bne	r2,zero,8366d0 <tcp_output+0x74c>
      {
         EXIT_CRIT_SECTION(tp);
  8366c0:	082aa240 	call	82aa24 <irq_Unmask>
         return ENOBUFS;
  8366c4:	00c01a44 	movi	r3,105
  8366c8:	e0fff815 	stw	r3,-32(fp)
  8366cc:	00028606 	br	8370e8 <tcp_output+0x1164>
      }

      m->m_len = TCPIPHDRSZ;
  8366d0:	e0ffef17 	ldw	r3,-68(fp)
  8366d4:	00800a04 	movi	r2,40
  8366d8:	18800215 	stw	r2,8(r3)
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
  8366dc:	e0bfef17 	ldw	r2,-68(fp)
  8366e0:	10c00317 	ldw	r3,12(r2)
  8366e4:	00802174 	movhi	r2,133
  8366e8:	1082ff04 	addi	r2,r2,3068
  8366ec:	10800017 	ldw	r2,0(r2)
  8366f0:	1887883a 	add	r3,r3,r2
  8366f4:	e0bfef17 	ldw	r2,-68(fp)
  8366f8:	10c00315 	stw	r3,12(r2)
      /* 14 bytes for ethernet header      */

      if (len) /* attach any data to send */
  8366fc:	e0bff417 	ldw	r2,-48(fp)
  836700:	1005003a 	cmpeq	r2,r2,zero
  836704:	1000121e 	bne	r2,zero,836750 <tcp_output+0x7cc>
      {
         m->m_next = m_copy(so->so_snd.sb_mb, off, (int) len);
  836708:	e0bff517 	ldw	r2,-44(fp)
  83670c:	11001817 	ldw	r4,96(r2)
  836710:	e17ff217 	ldw	r5,-56(fp)
  836714:	e1bff417 	ldw	r6,-48(fp)
  836718:	082b8e80 	call	82b8e8 <m_copy>
  83671c:	1007883a 	mov	r3,r2
  836720:	e0bfef17 	ldw	r2,-68(fp)
  836724:	10c00615 	stw	r3,24(r2)
         if (m->m_next == 0)
  836728:	e0bfef17 	ldw	r2,-68(fp)
  83672c:	10800617 	ldw	r2,24(r2)
  836730:	1004c03a 	cmpne	r2,r2,zero
  836734:	1000061e 	bne	r2,zero,836750 <tcp_output+0x7cc>
         {
            m_freem(m);
  836738:	e13fef17 	ldw	r4,-68(fp)
  83673c:	082b8a40 	call	82b8a4 <m_freem>
            EXIT_CRIT_SECTION(tp);
  836740:	082aa240 	call	82aa24 <irq_Unmask>
            return ENOBUFS;
  836744:	00801a44 	movi	r2,105
  836748:	e0bff815 	stw	r2,-32(fp)
  83674c:	00026606 	br	8370e8 <tcp_output+0x1164>
         }
      }
   }
   EXIT_CRIT_SECTION(tp);
  836750:	082aa240 	call	82aa24 <irq_Unmask>

   if (len) 
  836754:	e0bff417 	ldw	r2,-48(fp)
  836758:	1005003a 	cmpeq	r2,r2,zero
  83675c:	1000391e 	bne	r2,zero,836844 <tcp_output+0x8c0>
   {
      if (tp->t_force && len == 1)
  836760:	e0bff717 	ldw	r2,-36(fp)
  836764:	10800a83 	ldbu	r2,42(r2)
  836768:	10803fcc 	andi	r2,r2,255
  83676c:	1080201c 	xori	r2,r2,128
  836770:	10bfe004 	addi	r2,r2,-128
  836774:	1005003a 	cmpeq	r2,r2,zero
  836778:	10000b1e 	bne	r2,zero,8367a8 <tcp_output+0x824>
  83677c:	e0bff417 	ldw	r2,-48(fp)
  836780:	10800058 	cmpnei	r2,r2,1
  836784:	1000081e 	bne	r2,zero,8367a8 <tcp_output+0x824>
         tcpstat.tcps_sndprobe++;
  836788:	00803934 	movhi	r2,228
  83678c:	10a90c04 	addi	r2,r2,-23504
  836790:	10801517 	ldw	r2,84(r2)
  836794:	10c00044 	addi	r3,r2,1
  836798:	00803934 	movhi	r2,228
  83679c:	10a90c04 	addi	r2,r2,-23504
  8367a0:	10c01515 	stw	r3,84(r2)
   }
   EXIT_CRIT_SECTION(tp);

   if (len) 
   {
      if (tp->t_force && len == 1)
  8367a4:	00005806 	br	836908 <tcp_output+0x984>
         tcpstat.tcps_sndprobe++;
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
  8367a8:	e0bff717 	ldw	r2,-36(fp)
  8367ac:	10c00f17 	ldw	r3,60(r2)
  8367b0:	e0bff717 	ldw	r2,-36(fp)
  8367b4:	10801a17 	ldw	r2,104(r2)
  8367b8:	1885c83a 	sub	r2,r3,r2
  8367bc:	1004403a 	cmpge	r2,r2,zero
  8367c0:	1000101e 	bne	r2,zero,836804 <tcp_output+0x880>
      {
         tcpstat.tcps_sndrexmitpack++;
  8367c4:	00803934 	movhi	r2,228
  8367c8:	10a90c04 	addi	r2,r2,-23504
  8367cc:	10801217 	ldw	r2,72(r2)
  8367d0:	10c00044 	addi	r3,r2,1
  8367d4:	00803934 	movhi	r2,228
  8367d8:	10a90c04 	addi	r2,r2,-23504
  8367dc:	10c01215 	stw	r3,72(r2)
         tcpstat.tcps_sndrexmitbyte += len;
  8367e0:	00803934 	movhi	r2,228
  8367e4:	10a90c04 	addi	r2,r2,-23504
  8367e8:	10c01317 	ldw	r3,76(r2)
  8367ec:	e0bff417 	ldw	r2,-48(fp)
  8367f0:	1887883a 	add	r3,r3,r2
  8367f4:	00803934 	movhi	r2,228
  8367f8:	10a90c04 	addi	r2,r2,-23504
  8367fc:	10c01315 	stw	r3,76(r2)
  836800:	00004106 	br	836908 <tcp_output+0x984>
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
  836804:	00803934 	movhi	r2,228
  836808:	10a90c04 	addi	r2,r2,-23504
  83680c:	10801017 	ldw	r2,64(r2)
  836810:	10c00044 	addi	r3,r2,1
  836814:	00803934 	movhi	r2,228
  836818:	10a90c04 	addi	r2,r2,-23504
  83681c:	10c01015 	stw	r3,64(r2)
         tcpstat.tcps_sndbyte += len;
  836820:	00803934 	movhi	r2,228
  836824:	10a90c04 	addi	r2,r2,-23504
  836828:	10c01117 	ldw	r3,68(r2)
  83682c:	e0bff417 	ldw	r2,-48(fp)
  836830:	1887883a 	add	r3,r3,r2
  836834:	00803934 	movhi	r2,228
  836838:	10a90c04 	addi	r2,r2,-23504
  83683c:	10c01115 	stw	r3,68(r2)
  836840:	00003106 	br	836908 <tcp_output+0x984>
      }
   }
   else if (tp->t_flags & TF_ACKNOW)
  836844:	e0bff717 	ldw	r2,-36(fp)
  836848:	10800b0b 	ldhu	r2,44(r2)
  83684c:	10bfffcc 	andi	r2,r2,65535
  836850:	1080004c 	andi	r2,r2,1
  836854:	10803fcc 	andi	r2,r2,255
  836858:	1005003a 	cmpeq	r2,r2,zero
  83685c:	1000081e 	bne	r2,zero,836880 <tcp_output+0x8fc>
   {
      tcpstat.tcps_sndacks++;
  836860:	00803934 	movhi	r2,228
  836864:	10a90c04 	addi	r2,r2,-23504
  836868:	10801417 	ldw	r2,80(r2)
  83686c:	10c00044 	addi	r3,r2,1
  836870:	00803934 	movhi	r2,228
  836874:	10a90c04 	addi	r2,r2,-23504
  836878:	10c01415 	stw	r3,80(r2)
  83687c:	00002206 	br	836908 <tcp_output+0x984>
   }
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
  836880:	e0bff117 	ldw	r2,-60(fp)
  836884:	108001cc 	andi	r2,r2,7
  836888:	1005003a 	cmpeq	r2,r2,zero
  83688c:	1000081e 	bne	r2,zero,8368b0 <tcp_output+0x92c>
      tcpstat.tcps_sndctrl++;
  836890:	00803934 	movhi	r2,228
  836894:	10a90c04 	addi	r2,r2,-23504
  836898:	10801817 	ldw	r2,96(r2)
  83689c:	10c00044 	addi	r3,r2,1
  8368a0:	00803934 	movhi	r2,228
  8368a4:	10a90c04 	addi	r2,r2,-23504
  8368a8:	10c01815 	stw	r3,96(r2)
  8368ac:	00001606 	br	836908 <tcp_output+0x984>
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
  8368b0:	e0bff717 	ldw	r2,-36(fp)
  8368b4:	10c01017 	ldw	r3,64(r2)
  8368b8:	e0bff717 	ldw	r2,-36(fp)
  8368bc:	10800e17 	ldw	r2,56(r2)
  8368c0:	1885c83a 	sub	r2,r3,r2
  8368c4:	10800050 	cmplti	r2,r2,1
  8368c8:	1000081e 	bne	r2,zero,8368ec <tcp_output+0x968>
      tcpstat.tcps_sndurg++;
  8368cc:	00803934 	movhi	r2,228
  8368d0:	10a90c04 	addi	r2,r2,-23504
  8368d4:	10801617 	ldw	r2,88(r2)
  8368d8:	10c00044 	addi	r3,r2,1
  8368dc:	00803934 	movhi	r2,228
  8368e0:	10a90c04 	addi	r2,r2,-23504
  8368e4:	10c01615 	stw	r3,88(r2)
  8368e8:	00000706 	br	836908 <tcp_output+0x984>
   else
      tcpstat.tcps_sndwinup++;
  8368ec:	00803934 	movhi	r2,228
  8368f0:	10a90c04 	addi	r2,r2,-23504
  8368f4:	10801717 	ldw	r2,92(r2)
  8368f8:	10c00044 	addi	r3,r2,1
  8368fc:	00803934 	movhi	r2,228
  836900:	10a90c04 	addi	r2,r2,-23504
  836904:	10c01715 	stw	r3,92(r2)

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
  836908:	e0bfef17 	ldw	r2,-68(fp)
  83690c:	10800317 	ldw	r2,12(r2)
  836910:	e0bfee15 	stw	r2,-72(fp)
   if ((char *)ti < m->pkt->nb_buff)
  836914:	e0bfef17 	ldw	r2,-68(fp)
  836918:	10800117 	ldw	r2,4(r2)
  83691c:	10c00117 	ldw	r3,4(r2)
  836920:	e0bfee17 	ldw	r2,-72(fp)
  836924:	10c0032e 	bgeu	r2,r3,836934 <tcp_output+0x9b0>
   {
      panic("tcp_out- packet ptr underflow\n");
  836928:	01002174 	movhi	r4,133
  83692c:	21370504 	addi	r4,r4,-9196
  836930:	0825a2c0 	call	825a2c <panic>
   }
   tcp_mbuf = m;        /* flag TCP header mbuf */
  836934:	e0bfef17 	ldw	r2,-68(fp)
  836938:	e0bfe915 	stw	r2,-92(fp)
      tcp_mbuf->m_data += sizeof(struct ipovly);
      tcp_mbuf->m_len -= sizeof(struct ipovly);
   }
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
  83693c:	e0bff717 	ldw	r2,-36(fp)
  836940:	10800c17 	ldw	r2,48(r2)
  836944:	1004c03a 	cmpne	r2,r2,zero
  836948:	1000031e 	bne	r2,zero,836958 <tcp_output+0x9d4>
      panic("tcp_output");
  83694c:	01002174 	movhi	r4,133
  836950:	21370d04 	addi	r4,r4,-9164
  836954:	0825a2c0 	call	825a2c <panic>

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
  836958:	e0ffee17 	ldw	r3,-72(fp)
  83695c:	e0bff717 	ldw	r2,-36(fp)
  836960:	10800c17 	ldw	r2,48(r2)
  836964:	1809883a 	mov	r4,r3
  836968:	100b883a 	mov	r5,r2
  83696c:	01800a04 	movi	r6,40
  836970:	08073380 	call	807338 <memcpy>
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
  836974:	e0bff117 	ldw	r2,-60(fp)
  836978:	1080004c 	andi	r2,r2,1
  83697c:	10803fcc 	andi	r2,r2,255
  836980:	1005003a 	cmpeq	r2,r2,zero
  836984:	1000101e 	bne	r2,zero,8369c8 <tcp_output+0xa44>
  836988:	e0bff717 	ldw	r2,-36(fp)
  83698c:	10800b0b 	ldhu	r2,44(r2)
  836990:	10bfffcc 	andi	r2,r2,65535
  836994:	1080040c 	andi	r2,r2,16
  836998:	1005003a 	cmpeq	r2,r2,zero
  83699c:	10000a1e 	bne	r2,zero,8369c8 <tcp_output+0xa44>
  8369a0:	e0bff717 	ldw	r2,-36(fp)
  8369a4:	10c00f17 	ldw	r3,60(r2)
  8369a8:	e0bff717 	ldw	r2,-36(fp)
  8369ac:	10801a17 	ldw	r2,104(r2)
  8369b0:	1880051e 	bne	r3,r2,8369c8 <tcp_output+0xa44>
       tp->snd_nxt == tp->snd_max)
   {
      tp->snd_nxt--;
  8369b4:	e0bff717 	ldw	r2,-36(fp)
  8369b8:	10800f17 	ldw	r2,60(r2)
  8369bc:	10ffffc4 	addi	r3,r2,-1
  8369c0:	e0bff717 	ldw	r2,-36(fp)
  8369c4:	10c00f15 	stw	r3,60(r2)
   }

   ti->ti_seq = htonl(tp->snd_nxt);
  8369c8:	e0bff717 	ldw	r2,-36(fp)
  8369cc:	10800f17 	ldw	r2,60(r2)
  8369d0:	1004d63a 	srli	r2,r2,24
  8369d4:	10c03fcc 	andi	r3,r2,255
  8369d8:	e0bff717 	ldw	r2,-36(fp)
  8369dc:	10800f17 	ldw	r2,60(r2)
  8369e0:	1004d23a 	srli	r2,r2,8
  8369e4:	10bfc00c 	andi	r2,r2,65280
  8369e8:	1886b03a 	or	r3,r3,r2
  8369ec:	e0bff717 	ldw	r2,-36(fp)
  8369f0:	10800f17 	ldw	r2,60(r2)
  8369f4:	10bfc00c 	andi	r2,r2,65280
  8369f8:	1004923a 	slli	r2,r2,8
  8369fc:	1886b03a 	or	r3,r3,r2
  836a00:	e0bff717 	ldw	r2,-36(fp)
  836a04:	10800f17 	ldw	r2,60(r2)
  836a08:	10803fcc 	andi	r2,r2,255
  836a0c:	1004963a 	slli	r2,r2,24
  836a10:	1886b03a 	or	r3,r3,r2
  836a14:	e0bfee17 	ldw	r2,-72(fp)
  836a18:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(tp->rcv_nxt);
  836a1c:	e0bff717 	ldw	r2,-36(fp)
  836a20:	10801617 	ldw	r2,88(r2)
  836a24:	1004d63a 	srli	r2,r2,24
  836a28:	10c03fcc 	andi	r3,r2,255
  836a2c:	e0bff717 	ldw	r2,-36(fp)
  836a30:	10801617 	ldw	r2,88(r2)
  836a34:	1004d23a 	srli	r2,r2,8
  836a38:	10bfc00c 	andi	r2,r2,65280
  836a3c:	1886b03a 	or	r3,r3,r2
  836a40:	e0bff717 	ldw	r2,-36(fp)
  836a44:	10801617 	ldw	r2,88(r2)
  836a48:	10bfc00c 	andi	r2,r2,65280
  836a4c:	1004923a 	slli	r2,r2,8
  836a50:	1886b03a 	or	r3,r3,r2
  836a54:	e0bff717 	ldw	r2,-36(fp)
  836a58:	10801617 	ldw	r2,88(r2)
  836a5c:	10803fcc 	andi	r2,r2,255
  836a60:	1004963a 	slli	r2,r2,24
  836a64:	1886b03a 	or	r3,r3,r2
  836a68:	e0bfee17 	ldw	r2,-72(fp)
  836a6c:	10c00715 	stw	r3,28(r2)
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
  836a70:	e0bff117 	ldw	r2,-60(fp)
  836a74:	1080008c 	andi	r2,r2,2
  836a78:	1005003a 	cmpeq	r2,r2,zero
  836a7c:	1000221e 	bne	r2,zero,836b08 <tcp_output+0xb84>
   {
      struct inpcb * inp;
      inp = (struct inpcb *)so->so_pcb;
  836a80:	e0bff517 	ldw	r2,-44(fp)
  836a84:	10800117 	ldw	r2,4(r2)
  836a88:	e0bfe615 	stw	r2,-104(fp)

      switch(so->so_domain)
  836a8c:	e0bff517 	ldw	r2,-44(fp)
  836a90:	10800517 	ldw	r2,20(r2)
  836a94:	108000a0 	cmpeqi	r2,r2,2
  836a98:	1000011e 	bne	r2,zero,836aa0 <tcp_output+0xb1c>
  836a9c:	00001906 	br	836b04 <tcp_output+0xb80>
         }
         }
#endif   /* INCLUDE_PPP */

         /* If this is a SYN (not a SYN/ACK) then set the pmtu */
         if((flags & TH_ACK) == 0)
  836aa0:	e0bff117 	ldw	r2,-60(fp)
  836aa4:	1080040c 	andi	r2,r2,16
  836aa8:	1004c03a 	cmpne	r2,r2,zero
  836aac:	1000161e 	bne	r2,zero,836b08 <tcp_output+0xb84>
            inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
            {
               NET ifp;
               /* find iface for route. Pass "src" as nexthop return */
               ifp = iproute(ti->ti_dst.s_addr, &src);
  836ab0:	e0bfee17 	ldw	r2,-72(fp)
  836ab4:	11000417 	ldw	r4,16(r2)
  836ab8:	e17ff604 	addi	r5,fp,-40
  836abc:	083f16c0 	call	83f16c <iproute>
  836ac0:	e0bfe515 	stw	r2,-108(fp)
               if(ifp)
  836ac4:	e0bfe517 	ldw	r2,-108(fp)
  836ac8:	1005003a 	cmpeq	r2,r2,zero
  836acc:	1000091e 	bne	r2,zero,836af4 <tcp_output+0xb70>
                  inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
  836ad0:	e0bfe517 	ldw	r2,-108(fp)
  836ad4:	10c00917 	ldw	r3,36(r2)
  836ad8:	e0bfe517 	ldw	r2,-108(fp)
  836adc:	10800817 	ldw	r2,32(r2)
  836ae0:	1885c83a 	sub	r2,r3,r2
  836ae4:	10fff604 	addi	r3,r2,-40
  836ae8:	e0bfe617 	ldw	r2,-104(fp)
  836aec:	10c00615 	stw	r3,24(r2)
  836af0:	00000506 	br	836b08 <tcp_output+0xb84>
               else
                  inp->inp_pmtu = 580;  /* Ugh. */
  836af4:	e0ffe617 	ldw	r3,-104(fp)
  836af8:	00809104 	movi	r2,580
  836afc:	18800615 	stw	r2,24(r3)
            }
#endif   /* IP_PMTU */
         }
         break;
  836b00:	00000106 	br	836b08 <tcp_output+0xb84>
         }
         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();    /* bad domain setting */
  836b04:	082a7c80 	call	82a7c8 <dtrap>
      }
   }

   /* fill in options if any are set */
   if (optlen)
  836b08:	e0bfed17 	ldw	r2,-76(fp)
  836b0c:	1005003a 	cmpeq	r2,r2,zero
  836b10:	10002f1e 	bne	r2,zero,836bd0 <tcp_output+0xc4c>
   {
      struct mbuf * mopt;

      mopt = m_getwithdata(MT_TXDATA, MAXOPTLEN);
  836b14:	01000084 	movi	r4,2
  836b18:	01404004 	movi	r5,256
  836b1c:	082b5c80 	call	82b5c8 <m_getnbuf>
  836b20:	e0bfe415 	stw	r2,-112(fp)
      if (mopt == NULL) 
  836b24:	e0bfe417 	ldw	r2,-112(fp)
  836b28:	1004c03a 	cmpne	r2,r2,zero
  836b2c:	1000051e 	bne	r2,zero,836b44 <tcp_output+0xbc0>
      {
         m_freem(m);
  836b30:	e13fef17 	ldw	r4,-68(fp)
  836b34:	082b8a40 	call	82b8a4 <m_freem>
         return (ENOBUFS);
  836b38:	00c01a44 	movi	r3,105
  836b3c:	e0fff815 	stw	r3,-32(fp)
  836b40:	00016906 	br	8370e8 <tcp_output+0x1164>
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
  836b44:	e0bfe917 	ldw	r2,-92(fp)
  836b48:	10c00617 	ldw	r3,24(r2)
  836b4c:	e0bfe417 	ldw	r2,-112(fp)
  836b50:	10c00615 	stw	r3,24(r2)
      tcp_mbuf->m_next = mopt;
  836b54:	e0ffe917 	ldw	r3,-92(fp)
  836b58:	e0bfe417 	ldw	r2,-112(fp)
  836b5c:	18800615 	stw	r2,24(r3)

      /* extend options to aligned address */
      while(optlen & 0x03)
  836b60:	00000706 	br	836b80 <tcp_output+0xbfc>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;
  836b64:	e0ffed17 	ldw	r3,-76(fp)
  836b68:	d0a0bb04 	addi	r2,gp,-32020
  836b6c:	1885883a 	add	r2,r3,r2
  836b70:	10000005 	stb	zero,0(r2)
  836b74:	e0bfed17 	ldw	r2,-76(fp)
  836b78:	10800044 	addi	r2,r2,1
  836b7c:	e0bfed15 	stw	r2,-76(fp)
      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
      tcp_mbuf->m_next = mopt;

      /* extend options to aligned address */
      while(optlen & 0x03)
  836b80:	e0bfed17 	ldw	r2,-76(fp)
  836b84:	108000cc 	andi	r2,r2,3
  836b88:	1004c03a 	cmpne	r2,r2,zero
  836b8c:	103ff51e 	bne	r2,zero,836b64 <tcp_output+0xbe0>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;

      MEMCPY(mtod(mopt, char *), tcp_optionbuf, optlen);
  836b90:	e0bfe417 	ldw	r2,-112(fp)
  836b94:	10800317 	ldw	r2,12(r2)
  836b98:	1009883a 	mov	r4,r2
  836b9c:	d160bb04 	addi	r5,gp,-32020
  836ba0:	e1bfed17 	ldw	r6,-76(fp)
  836ba4:	08073380 	call	807338 <memcpy>
      mopt->m_len = optlen;
  836ba8:	e0ffe417 	ldw	r3,-112(fp)
  836bac:	e0bfed17 	ldw	r2,-76(fp)
  836bb0:	18800215 	stw	r2,8(r3)
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
  836bb4:	e0bfed17 	ldw	r2,-76(fp)
  836bb8:	10800504 	addi	r2,r2,20
  836bbc:	1004d0ba 	srli	r2,r2,2
  836bc0:	1004913a 	slli	r2,r2,4
  836bc4:	1007883a 	mov	r3,r2
  836bc8:	e0bfee17 	ldw	r2,-72(fp)
  836bcc:	10c00805 	stb	r3,32(r2)
   }

   ti->ti_flags = (u_char)flags;
  836bd0:	e0bff117 	ldw	r2,-60(fp)
  836bd4:	1007883a 	mov	r3,r2
  836bd8:	e0bfee17 	ldw	r2,-72(fp)
  836bdc:	10c00845 	stb	r3,33(r2)
   /*
    * Calculate receive window. Don't shrink window,
    * but avoid silly window syndrome.
    */
   if (win < (long)(so->so_rcv.sb_hiwat / 4) && win < (long)tp->t_maxseg)
  836be0:	e0bff517 	ldw	r2,-44(fp)
  836be4:	10800b17 	ldw	r2,44(r2)
  836be8:	1004d0ba 	srli	r2,r2,2
  836bec:	1007883a 	mov	r3,r2
  836bf0:	e0bff317 	ldw	r2,-52(fp)
  836bf4:	10c0060e 	bge	r2,r3,836c10 <tcp_output+0xc8c>
  836bf8:	e0bff717 	ldw	r2,-36(fp)
  836bfc:	10800a0b 	ldhu	r2,40(r2)
  836c00:	10ffffcc 	andi	r3,r2,65535
  836c04:	e0bff317 	ldw	r2,-52(fp)
  836c08:	10c0010e 	bge	r2,r3,836c10 <tcp_output+0xc8c>
      win = 0;
  836c0c:	e03ff315 	stw	zero,-52(fp)
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
  836c10:	e0bff717 	ldw	r2,-36(fp)
  836c14:	10c01917 	ldw	r3,100(r2)
  836c18:	e0bff717 	ldw	r2,-36(fp)
  836c1c:	10801617 	ldw	r2,88(r2)
  836c20:	1885c83a 	sub	r2,r3,r2
  836c24:	1007883a 	mov	r3,r2
  836c28:	e0bff317 	ldw	r2,-52(fp)
  836c2c:	10c0060e 	bge	r2,r3,836c48 <tcp_output+0xcc4>
      win = (long)(tp->rcv_adv - tp->rcv_nxt);
  836c30:	e0bff717 	ldw	r2,-36(fp)
  836c34:	10c01917 	ldw	r3,100(r2)
  836c38:	e0bff717 	ldw	r2,-36(fp)
  836c3c:	10801617 	ldw	r2,88(r2)
  836c40:	1885c83a 	sub	r2,r3,r2
  836c44:	e0bff315 	stw	r2,-52(fp)

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
  836c48:	00803934 	movhi	r2,228
  836c4c:	10a84304 	addi	r2,r2,-24308
  836c50:	10800217 	ldw	r2,8(r2)
  836c54:	1004c03a 	cmpne	r2,r2,zero
  836c58:	1000021e 	bne	r2,zero,836c64 <tcp_output+0xce0>
   {
      win = 0;
  836c5c:	e03ff315 	stw	zero,-52(fp)
  836c60:	00001406 	br	836cb4 <tcp_output+0xd30>
   }
   else if(win > (((long)bigfreeq.q_len - 1) * (long)bigbufsiz))
  836c64:	00803934 	movhi	r2,228
  836c68:	10a84304 	addi	r2,r2,-24308
  836c6c:	10800217 	ldw	r2,8(r2)
  836c70:	10ffffc4 	addi	r3,r2,-1
  836c74:	00802174 	movhi	r2,133
  836c78:	1082b704 	addi	r2,r2,2780
  836c7c:	10800017 	ldw	r2,0(r2)
  836c80:	1887383a 	mul	r3,r3,r2
  836c84:	e0bff317 	ldw	r2,-52(fp)
  836c88:	18800a0e 	bge	r3,r2,836cb4 <tcp_output+0xd30>
   {
      win = ((long)bigfreeq.q_len - 1) * bigbufsiz;
  836c8c:	00803934 	movhi	r2,228
  836c90:	10a84304 	addi	r2,r2,-24308
  836c94:	10800217 	ldw	r2,8(r2)
  836c98:	10bfffc4 	addi	r2,r2,-1
  836c9c:	1007883a 	mov	r3,r2
  836ca0:	00802174 	movhi	r2,133
  836ca4:	1082b704 	addi	r2,r2,2780
  836ca8:	10800017 	ldw	r2,0(r2)
  836cac:	1885383a 	mul	r2,r3,r2
  836cb0:	e0bff315 	stw	r2,-52(fp)
      ti->ti_win = htons((u_short)(win >> tp->rcv_wind_scale)); /* apply scale */
   }
   else
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
  836cb4:	e0bff317 	ldw	r2,-52(fp)
  836cb8:	10bfffcc 	andi	r2,r2,65535
  836cbc:	1004d23a 	srli	r2,r2,8
  836cc0:	10803fcc 	andi	r2,r2,255
  836cc4:	1009883a 	mov	r4,r2
  836cc8:	e0bff317 	ldw	r2,-52(fp)
  836ccc:	10bfffcc 	andi	r2,r2,65535
  836cd0:	1004923a 	slli	r2,r2,8
  836cd4:	1007883a 	mov	r3,r2
  836cd8:	00bfc004 	movi	r2,-256
  836cdc:	1884703a 	and	r2,r3,r2
  836ce0:	2084b03a 	or	r2,r4,r2
  836ce4:	1007883a 	mov	r3,r2
  836ce8:	e0bfee17 	ldw	r2,-72(fp)
  836cec:	10c0088d 	sth	r3,34(r2)
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
  836cf0:	e0bff717 	ldw	r2,-36(fp)
  836cf4:	10c01017 	ldw	r3,64(r2)
  836cf8:	e0bff717 	ldw	r2,-36(fp)
  836cfc:	10800f17 	ldw	r2,60(r2)
  836d00:	1885c83a 	sub	r2,r3,r2
  836d04:	10800050 	cmplti	r2,r2,1
  836d08:	1000201e 	bne	r2,zero,836d8c <tcp_output+0xe08>
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
  836d0c:	e0bff717 	ldw	r2,-36(fp)
  836d10:	10801017 	ldw	r2,64(r2)
  836d14:	1007883a 	mov	r3,r2
  836d18:	e0bff717 	ldw	r2,-36(fp)
  836d1c:	10800f17 	ldw	r2,60(r2)
  836d20:	1885c83a 	sub	r2,r3,r2
  836d24:	10bfffcc 	andi	r2,r2,65535
  836d28:	1004d23a 	srli	r2,r2,8
  836d2c:	10803fcc 	andi	r2,r2,255
  836d30:	1009883a 	mov	r4,r2
  836d34:	e0bff717 	ldw	r2,-36(fp)
  836d38:	10801017 	ldw	r2,64(r2)
  836d3c:	1007883a 	mov	r3,r2
  836d40:	e0bff717 	ldw	r2,-36(fp)
  836d44:	10800f17 	ldw	r2,60(r2)
  836d48:	1885c83a 	sub	r2,r3,r2
  836d4c:	10bfffcc 	andi	r2,r2,65535
  836d50:	1004923a 	slli	r2,r2,8
  836d54:	1007883a 	mov	r3,r2
  836d58:	00bfc004 	movi	r2,-256
  836d5c:	1884703a 	and	r2,r3,r2
  836d60:	2084b03a 	or	r2,r4,r2
  836d64:	1007883a 	mov	r3,r2
  836d68:	e0bfee17 	ldw	r2,-72(fp)
  836d6c:	10c0098d 	sth	r3,38(r2)
      ti->ti_flags |= TH_URG;
  836d70:	e0bfee17 	ldw	r2,-72(fp)
  836d74:	10800843 	ldbu	r2,33(r2)
  836d78:	10800814 	ori	r2,r2,32
  836d7c:	1007883a 	mov	r3,r2
  836d80:	e0bfee17 	ldw	r2,-72(fp)
  836d84:	10c00845 	stb	r3,33(r2)
  836d88:	00000406 	br	836d9c <tcp_output+0xe18>
       * If no urgent pointer to send, then we pull
       * the urgent pointer to the left edge of the send window
       * so that it doesn't drift into the send window on sequence
       * number wraparound.
       */
      tp->snd_up = tp->snd_una;        /* drag it along */
  836d8c:	e0bff717 	ldw	r2,-36(fp)
  836d90:	10c00e17 	ldw	r3,56(r2)
  836d94:	e0bff717 	ldw	r2,-36(fp)
  836d98:	10c01015 	stw	r3,64(r2)
   /*
    * If anything to send and we can send it all, set PUSH.
    * (This will keep happy those implementations which only
    * give data to the user when a buffer fills or a PUSH comes in.)
    */
   if (len && off+len == (int)so->so_snd.sb_cc)
  836d9c:	e0bff417 	ldw	r2,-48(fp)
  836da0:	1005003a 	cmpeq	r2,r2,zero
  836da4:	10000c1e 	bne	r2,zero,836dd8 <tcp_output+0xe54>
  836da8:	e0fff217 	ldw	r3,-56(fp)
  836dac:	e0bff417 	ldw	r2,-48(fp)
  836db0:	1887883a 	add	r3,r3,r2
  836db4:	e0bff517 	ldw	r2,-44(fp)
  836db8:	10801217 	ldw	r2,72(r2)
  836dbc:	1880061e 	bne	r3,r2,836dd8 <tcp_output+0xe54>
      ti->ti_flags |= TH_PUSH;
  836dc0:	e0bfee17 	ldw	r2,-72(fp)
  836dc4:	10800843 	ldbu	r2,33(r2)
  836dc8:	10800214 	ori	r2,r2,8
  836dcc:	1007883a 	mov	r3,r2
  836dd0:	e0bfee17 	ldw	r2,-72(fp)
  836dd4:	10c00845 	stb	r3,33(r2)

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
  836dd8:	e0bff717 	ldw	r2,-36(fp)
  836ddc:	10800a83 	ldbu	r2,42(r2)
  836de0:	10803fcc 	andi	r2,r2,255
  836de4:	1080201c 	xori	r2,r2,128
  836de8:	10bfe004 	addi	r2,r2,-128
  836dec:	1005003a 	cmpeq	r2,r2,zero
  836df0:	1000041e 	bne	r2,zero,836e04 <tcp_output+0xe80>
  836df4:	e0bff717 	ldw	r2,-36(fp)
  836df8:	10800417 	ldw	r2,16(r2)
  836dfc:	1004c03a 	cmpne	r2,r2,zero
  836e00:	1000561e 	bne	r2,zero,836f5c <tcp_output+0xfd8>
   {
      tcp_seq startseq = tp->snd_nxt;
  836e04:	e0bff717 	ldw	r2,-36(fp)
  836e08:	10800f17 	ldw	r2,60(r2)
  836e0c:	e0bfe315 	stw	r2,-116(fp)

      /*
       * Advance snd_nxt over sequence space of this segment.
       */
      if (flags & TH_SYN)
  836e10:	e0bff117 	ldw	r2,-60(fp)
  836e14:	1080008c 	andi	r2,r2,2
  836e18:	1005003a 	cmpeq	r2,r2,zero
  836e1c:	1000051e 	bne	r2,zero,836e34 <tcp_output+0xeb0>
         tp->snd_nxt++;
  836e20:	e0bff717 	ldw	r2,-36(fp)
  836e24:	10800f17 	ldw	r2,60(r2)
  836e28:	10c00044 	addi	r3,r2,1
  836e2c:	e0bff717 	ldw	r2,-36(fp)
  836e30:	10c00f15 	stw	r3,60(r2)

      if (flags & TH_FIN)
  836e34:	e0bff117 	ldw	r2,-60(fp)
  836e38:	1080004c 	andi	r2,r2,1
  836e3c:	10803fcc 	andi	r2,r2,255
  836e40:	1005003a 	cmpeq	r2,r2,zero
  836e44:	10000b1e 	bne	r2,zero,836e74 <tcp_output+0xef0>
      {
         tp->snd_nxt++;
  836e48:	e0bff717 	ldw	r2,-36(fp)
  836e4c:	10800f17 	ldw	r2,60(r2)
  836e50:	10c00044 	addi	r3,r2,1
  836e54:	e0bff717 	ldw	r2,-36(fp)
  836e58:	10c00f15 	stw	r3,60(r2)
         tp->t_flags |= TF_SENTFIN;
  836e5c:	e0bff717 	ldw	r2,-36(fp)
  836e60:	10800b0b 	ldhu	r2,44(r2)
  836e64:	10800414 	ori	r2,r2,16
  836e68:	1007883a 	mov	r3,r2
  836e6c:	e0bff717 	ldw	r2,-36(fp)
  836e70:	10c00b0d 	sth	r3,44(r2)
      }
      tp->snd_nxt += len;
  836e74:	e0bff717 	ldw	r2,-36(fp)
  836e78:	10c00f17 	ldw	r3,60(r2)
  836e7c:	e0bff417 	ldw	r2,-48(fp)
  836e80:	1887883a 	add	r3,r3,r2
  836e84:	e0bff717 	ldw	r2,-36(fp)
  836e88:	10c00f15 	stw	r3,60(r2)
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
  836e8c:	e0bff717 	ldw	r2,-36(fp)
  836e90:	10c00f17 	ldw	r3,60(r2)
  836e94:	e0bff717 	ldw	r2,-36(fp)
  836e98:	10801a17 	ldw	r2,104(r2)
  836e9c:	1885c83a 	sub	r2,r3,r2
  836ea0:	10800050 	cmplti	r2,r2,1
  836ea4:	1000171e 	bne	r2,zero,836f04 <tcp_output+0xf80>
      {
         tp->snd_max = tp->snd_nxt;
  836ea8:	e0bff717 	ldw	r2,-36(fp)
  836eac:	10c00f17 	ldw	r3,60(r2)
  836eb0:	e0bff717 	ldw	r2,-36(fp)
  836eb4:	10c01a15 	stw	r3,104(r2)
         /*
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
  836eb8:	e0bff717 	ldw	r2,-36(fp)
  836ebc:	10801e17 	ldw	r2,120(r2)
  836ec0:	1004c03a 	cmpne	r2,r2,zero
  836ec4:	10000f1e 	bne	r2,zero,836f04 <tcp_output+0xf80>
         {
            tp->t_rttick = cticks;
  836ec8:	00802174 	movhi	r2,133
  836ecc:	10832604 	addi	r2,r2,3224
  836ed0:	10c00017 	ldw	r3,0(r2)
  836ed4:	e0bff717 	ldw	r2,-36(fp)
  836ed8:	10c01e15 	stw	r3,120(r2)
            tp->t_rtseq = startseq;
  836edc:	e0fff717 	ldw	r3,-36(fp)
  836ee0:	e0bfe317 	ldw	r2,-116(fp)
  836ee4:	18801f15 	stw	r2,124(r3)
            tcpstat.tcps_segstimed++;
  836ee8:	00803934 	movhi	r2,228
  836eec:	10a90c04 	addi	r2,r2,-23504
  836ef0:	10800617 	ldw	r2,24(r2)
  836ef4:	10c00044 	addi	r3,r2,1
  836ef8:	00803934 	movhi	r2,228
  836efc:	10a90c04 	addi	r2,r2,-23504
  836f00:	10c00615 	stw	r3,24(r2)
       * Initial value for retransmit timer is smoothed
       * round-trip time + 2 * round-trip time variance.
       * Initialize shift counter which is used for backoff
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
  836f04:	e0bff717 	ldw	r2,-36(fp)
  836f08:	10800317 	ldw	r2,12(r2)
  836f0c:	1004c03a 	cmpne	r2,r2,zero
  836f10:	1000211e 	bne	r2,zero,836f98 <tcp_output+0x1014>
  836f14:	e0bff717 	ldw	r2,-36(fp)
  836f18:	10c00f17 	ldw	r3,60(r2)
  836f1c:	e0bff717 	ldw	r2,-36(fp)
  836f20:	10800e17 	ldw	r2,56(r2)
  836f24:	18801c26 	beq	r3,r2,836f98 <tcp_output+0x1014>
          tp->snd_nxt != tp->snd_una) 
      {
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
  836f28:	e0bff717 	ldw	r2,-36(fp)
  836f2c:	10c00817 	ldw	r3,32(r2)
  836f30:	e0bff717 	ldw	r2,-36(fp)
  836f34:	10c00315 	stw	r3,12(r2)
         if (tp->t_timer[TCPT_PERSIST]) 
  836f38:	e0bff717 	ldw	r2,-36(fp)
  836f3c:	10800417 	ldw	r2,16(r2)
  836f40:	1005003a 	cmpeq	r2,r2,zero
  836f44:	1000141e 	bne	r2,zero,836f98 <tcp_output+0x1014>
         {
            tp->t_timer[TCPT_PERSIST] = 0;
  836f48:	e0bff717 	ldw	r2,-36(fp)
  836f4c:	10000415 	stw	zero,16(r2)
            tp->t_rxtshift = 0;
  836f50:	e0bff717 	ldw	r2,-36(fp)
  836f54:	10000715 	stw	zero,28(r2)

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
  836f58:	00000f06 	br	836f98 <tcp_output+0x1014>
         }
      }
   }
   else
   {
      if (SEQ_GT(tp->snd_nxt + len, tp->snd_max))
  836f5c:	e0bff717 	ldw	r2,-36(fp)
  836f60:	10c00f17 	ldw	r3,60(r2)
  836f64:	e0bff417 	ldw	r2,-48(fp)
  836f68:	1887883a 	add	r3,r3,r2
  836f6c:	e0bff717 	ldw	r2,-36(fp)
  836f70:	10801a17 	ldw	r2,104(r2)
  836f74:	1885c83a 	sub	r2,r3,r2
  836f78:	10800050 	cmplti	r2,r2,1
  836f7c:	1000061e 	bne	r2,zero,836f98 <tcp_output+0x1014>
         tp->snd_max = tp->snd_nxt + len;
  836f80:	e0bff717 	ldw	r2,-36(fp)
  836f84:	10c00f17 	ldw	r3,60(r2)
  836f88:	e0bff417 	ldw	r2,-48(fp)
  836f8c:	1887883a 	add	r3,r3,r2
  836f90:	e0bff717 	ldw	r2,-36(fp)
  836f94:	10c01a15 	stw	r3,104(r2)
   tcp_trace("tcp_output: sending, state %d, tcpcb: %x",
    tp->t_state, tp );
#endif

#ifdef MUTE_WARNS
   error = 0;
  836f98:	e03ff015 	stw	zero,-64(fp)
   if(so->so_domain != AF_INET6)
#endif   /* IP_V6 */
   {
      struct ip * pip;
   
      pip = mtod(m, struct ip *);
  836f9c:	e0bfef17 	ldw	r2,-68(fp)
  836fa0:	10800317 	ldw	r2,12(r2)
  836fa4:	e0bfe215 	stw	r2,-120(fp)
      /* Fill in IP length and send to IP level. */
      pip->ip_len = (u_short)(TCPIPHDRSZ + optlen + len);
  836fa8:	e0bfed17 	ldw	r2,-76(fp)
  836fac:	1007883a 	mov	r3,r2
  836fb0:	e0bff417 	ldw	r2,-48(fp)
  836fb4:	1885883a 	add	r2,r3,r2
  836fb8:	10800a04 	addi	r2,r2,40
  836fbc:	1007883a 	mov	r3,r2
  836fc0:	e0bfe217 	ldw	r2,-120(fp)
  836fc4:	10c0008d 	sth	r3,2(r2)
      error = ip_output(m, so->so_optsPack);
  836fc8:	e0bff517 	ldw	r2,-44(fp)
  836fcc:	11401f17 	ldw	r5,124(r2)
  836fd0:	e13fef17 	ldw	r4,-68(fp)
  836fd4:	082c2d80 	call	82c2d8 <ip_output>
  836fd8:	e0bff015 	stw	r2,-64(fp)
                    (sizeof(struct ipv6) + sizeof(struct tcphdr) + optlen + len),
                    (struct   ip_socopts *)0);          
   }
#endif   /* IP_V6 */

   if (error)
  836fdc:	e0bff017 	ldw	r2,-64(fp)
  836fe0:	1005003a 	cmpeq	r2,r2,zero
  836fe4:	1000151e 	bne	r2,zero,83703c <tcp_output+0x10b8>
   {
      if (error == ENOBUFS)   /* ip_output needed a copy buffer it couldn't get */
  836fe8:	e0bff017 	ldw	r2,-64(fp)
  836fec:	10801a58 	cmpnei	r2,r2,105
  836ff0:	10000f1e 	bne	r2,zero,837030 <tcp_output+0x10ac>
      {
         if (m->m_type == MT_FREE)  /* ip_output() probably freed first mbuf */
  836ff4:	e0bfef17 	ldw	r2,-68(fp)
  836ff8:	10800817 	ldw	r2,32(r2)
  836ffc:	1004c03a 	cmpne	r2,r2,zero
  837000:	1000031e 	bne	r2,zero,837010 <tcp_output+0x108c>
            m = m->m_next;
  837004:	e0bfef17 	ldw	r2,-68(fp)
  837008:	10800617 	ldw	r2,24(r2)
  83700c:	e0bfef15 	stw	r2,-68(fp)
         m_freem(m); /* free the mbuf chain */
  837010:	e13fef17 	ldw	r4,-68(fp)
  837014:	082b8a40 	call	82b8a4 <m_freem>
         tcp_quench(tp->t_inpcb);
  837018:	e0bff717 	ldw	r2,-36(fp)
  83701c:	11000d17 	ldw	r4,52(r2)
  837020:	0837b880 	call	837b88 <tcp_quench>
         return (error);
  837024:	e0bff017 	ldw	r2,-64(fp)
  837028:	e0bff815 	stw	r2,-32(fp)
  83702c:	00002e06 	br	8370e8 <tcp_output+0x1164>
      }
      return (error);
  837030:	e0fff017 	ldw	r3,-64(fp)
  837034:	e0fff815 	stw	r3,-32(fp)
  837038:	00002b06 	br	8370e8 <tcp_output+0x1164>

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
  83703c:	00803934 	movhi	r2,228
  837040:	10a8de04 	addi	r2,r2,-23688
  837044:	10800a17 	ldw	r2,40(r2)
  837048:	10c00044 	addi	r3,r2,1
  83704c:	00803934 	movhi	r2,228
  837050:	10a8de04 	addi	r2,r2,-23688
  837054:	10c00a15 	stw	r3,40(r2)
   tcpstat.tcps_sndtotal++;
  837058:	00803934 	movhi	r2,228
  83705c:	10a90c04 	addi	r2,r2,-23504
  837060:	10800f17 	ldw	r2,60(r2)
  837064:	10c00044 	addi	r3,r2,1
  837068:	00803934 	movhi	r2,228
  83706c:	10a90c04 	addi	r2,r2,-23504
  837070:	10c00f15 	stw	r3,60(r2)
   /*
    * If this advertises a larger window than any other segment,
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
  837074:	e0bff317 	ldw	r2,-52(fp)
  837078:	10800050 	cmplti	r2,r2,1
  83707c:	10000f1e 	bne	r2,zero,8370bc <tcp_output+0x1138>
  837080:	e0bff717 	ldw	r2,-36(fp)
  837084:	10c01617 	ldw	r3,88(r2)
  837088:	e0bff317 	ldw	r2,-52(fp)
  83708c:	1887883a 	add	r3,r3,r2
  837090:	e0bff717 	ldw	r2,-36(fp)
  837094:	10801917 	ldw	r2,100(r2)
  837098:	1885c83a 	sub	r2,r3,r2
  83709c:	10800050 	cmplti	r2,r2,1
  8370a0:	1000061e 	bne	r2,zero,8370bc <tcp_output+0x1138>
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
  8370a4:	e0bff717 	ldw	r2,-36(fp)
  8370a8:	10c01617 	ldw	r3,88(r2)
  8370ac:	e0bff317 	ldw	r2,-52(fp)
  8370b0:	1887883a 	add	r3,r3,r2
  8370b4:	e0bff717 	ldw	r2,-36(fp)
  8370b8:	10c01915 	stw	r3,100(r2)
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
  8370bc:	e0bff717 	ldw	r2,-36(fp)
  8370c0:	10c00b0b 	ldhu	r3,44(r2)
  8370c4:	00bfef04 	movi	r2,-68
  8370c8:	1884703a 	and	r2,r3,r2
  8370cc:	1007883a 	mov	r3,r2
  8370d0:	e0bff717 	ldw	r2,-36(fp)
  8370d4:	10c00b0d 	sth	r3,44(r2)
   if (sendalot)
  8370d8:	e0bfeb17 	ldw	r2,-84(fp)
  8370dc:	1004c03a 	cmpne	r2,r2,zero
  8370e0:	103bb81e 	bne	r2,zero,835fc4 <tcp_output+0x40>
      goto again;
   return (0);
  8370e4:	e03ff815 	stw	zero,-32(fp)
  8370e8:	e0bff817 	ldw	r2,-32(fp)
}
  8370ec:	e037883a 	mov	sp,fp
  8370f0:	dfc00117 	ldw	ra,4(sp)
  8370f4:	df000017 	ldw	fp,0(sp)
  8370f8:	dec00204 	addi	sp,sp,8
  8370fc:	f800283a 	ret

00837100 <tcp_setpersist>:
 * RETURNS: NA
 */

void
tcp_setpersist(struct tcpcb * tp)
{
  837100:	defffc04 	addi	sp,sp,-16
  837104:	dfc00315 	stw	ra,12(sp)
  837108:	df000215 	stw	fp,8(sp)
  83710c:	df000204 	addi	fp,sp,8
  837110:	e13fff15 	stw	r4,-4(fp)
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
  837114:	e0bfff17 	ldw	r2,-4(fp)
  837118:	10802017 	ldw	r2,128(r2)
  83711c:	1007d0ba 	srai	r3,r2,2
  837120:	e0bfff17 	ldw	r2,-4(fp)
  837124:	10802117 	ldw	r2,132(r2)
  837128:	1885883a 	add	r2,r3,r2
  83712c:	1005d07a 	srai	r2,r2,1
  837130:	e0bffe15 	stw	r2,-8(fp)

   if (tp->t_timer[TCPT_REXMT])
  837134:	e0bfff17 	ldw	r2,-4(fp)
  837138:	10800317 	ldw	r2,12(r2)
  83713c:	1005003a 	cmpeq	r2,r2,zero
  837140:	1000031e 	bne	r2,zero,837150 <tcp_setpersist+0x50>
      panic("tcp_output REXMT");
  837144:	01002174 	movhi	r4,133
  837148:	21371004 	addi	r4,r4,-9152
  83714c:	0825a2c0 	call	825a2c <panic>
   /*
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
  837150:	e0bfff17 	ldw	r2,-4(fp)
  837154:	10c00717 	ldw	r3,28(r2)
  837158:	00802174 	movhi	r2,133
  83715c:	1081a4c4 	addi	r2,r2,1683
  837160:	10c5883a 	add	r2,r2,r3
  837164:	10800003 	ldbu	r2,0(r2)
  837168:	10c03fcc 	andi	r3,r2,255
  83716c:	e0bffe17 	ldw	r2,-8(fp)
  837170:	1885383a 	mul	r2,r3,r2
  837174:	10ffffcc 	andi	r3,r2,65535
  837178:	18e0001c 	xori	r3,r3,32768
  83717c:	18e00004 	addi	r3,r3,-32768
  837180:	e0bfff17 	ldw	r2,-4(fp)
  837184:	10c00415 	stw	r3,16(r2)
  837188:	e0bfff17 	ldw	r2,-4(fp)
  83718c:	10800417 	ldw	r2,16(r2)
  837190:	10800288 	cmpgei	r2,r2,10
  837194:	1000041e 	bne	r2,zero,8371a8 <tcp_setpersist+0xa8>
  837198:	e0ffff17 	ldw	r3,-4(fp)
  83719c:	00800284 	movi	r2,10
  8371a0:	18800415 	stw	r2,16(r3)
  8371a4:	00000706 	br	8371c4 <tcp_setpersist+0xc4>
  8371a8:	e0bfff17 	ldw	r2,-4(fp)
  8371ac:	10800417 	ldw	r2,16(r2)
  8371b0:	10801e50 	cmplti	r2,r2,121
  8371b4:	1000031e 	bne	r2,zero,8371c4 <tcp_setpersist+0xc4>
  8371b8:	e0ffff17 	ldw	r3,-4(fp)
  8371bc:	00801e04 	movi	r2,120
  8371c0:	18800415 	stw	r2,16(r3)
    t * tcp_backoff[tp->t_rxtshift],
    TCPTV_PERSMIN, TCPTV_PERSMAX);
   if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
  8371c4:	e0bfff17 	ldw	r2,-4(fp)
  8371c8:	10800717 	ldw	r2,28(r2)
  8371cc:	10800308 	cmpgei	r2,r2,12
  8371d0:	1000051e 	bne	r2,zero,8371e8 <tcp_setpersist+0xe8>
      tp->t_rxtshift++;
  8371d4:	e0bfff17 	ldw	r2,-4(fp)
  8371d8:	10800717 	ldw	r2,28(r2)
  8371dc:	10c00044 	addi	r3,r2,1
  8371e0:	e0bfff17 	ldw	r2,-4(fp)
  8371e4:	10c00715 	stw	r3,28(r2)

}
  8371e8:	e037883a 	mov	sp,fp
  8371ec:	dfc00117 	ldw	ra,4(sp)
  8371f0:	df000017 	ldw	fp,0(sp)
  8371f4:	dec00204 	addi	sp,sp,8
  8371f8:	f800283a 	ret

008371fc <bld_options>:
 * RETURNS: length of option data added to buffer
 */

static int
bld_options(struct tcpcb * tp, u_char * cp, int flags, struct socket * so)
{
  8371fc:	defff704 	addi	sp,sp,-36
  837200:	dfc00815 	stw	ra,32(sp)
  837204:	df000715 	stw	fp,28(sp)
  837208:	df000704 	addi	fp,sp,28
  83720c:	e13ffb15 	stw	r4,-20(fp)
  837210:	e17ffc15 	stw	r5,-16(fp)
  837214:	e1bffd15 	stw	r6,-12(fp)
  837218:	e1fffe15 	stw	r7,-8(fp)
   int      len;
   u_short  mss;

   if(tp->t_flags & TF_NOOPT)    /* no options allowed? */
  83721c:	e0bffb17 	ldw	r2,-20(fp)
  837220:	10800b0b 	ldhu	r2,44(r2)
  837224:	10bfffcc 	andi	r2,r2,65535
  837228:	1080020c 	andi	r2,r2,8
  83722c:	1005003a 	cmpeq	r2,r2,zero
  837230:	1000021e 	bne	r2,zero,83723c <bld_options+0x40>
      return 0;
  837234:	e03fff15 	stw	zero,-4(fp)
  837238:	00002406 	br	8372cc <bld_options+0xd0>

   /* Alway put MSS option on SYN packets */
   if (flags & TH_SYN)
  83723c:	e0bffd17 	ldw	r2,-12(fp)
  837240:	1080008c 	andi	r2,r2,2
  837244:	1005003a 	cmpeq	r2,r2,zero
  837248:	10001d1e 	bne	r2,zero,8372c0 <bld_options+0xc4>
   {
      mss   =  (u_short)tcp_mss(so);
  83724c:	e13ffe17 	ldw	r4,-8(fp)
  837250:	0835e680 	call	835e68 <tcp_mss>
  837254:	e0bff90d 	sth	r2,-28(fp)

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
  837258:	e0fffc17 	ldw	r3,-16(fp)
  83725c:	00800084 	movi	r2,2
  837260:	18800005 	stb	r2,0(r3)
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
  837264:	e0bffc17 	ldw	r2,-16(fp)
  837268:	10c00044 	addi	r3,r2,1
  83726c:	00800104 	movi	r2,4
  837270:	18800005 	stb	r2,0(r3)
      *(cp + 2)  = (u_char) ((mss & 0xff00) >> 8);
  837274:	e0bffc17 	ldw	r2,-16(fp)
  837278:	10c00084 	addi	r3,r2,2
  83727c:	e0bff90b 	ldhu	r2,-28(fp)
  837280:	10bfc00c 	andi	r2,r2,65280
  837284:	1005d23a 	srai	r2,r2,8
  837288:	18800005 	stb	r2,0(r3)
      *(cp + 3)  = (u_char) (mss & 0xff);
  83728c:	e0bffc17 	ldw	r2,-16(fp)
  837290:	110000c4 	addi	r4,r2,3
  837294:	e0bff90b 	ldhu	r2,-28(fp)
  837298:	1007883a 	mov	r3,r2
  83729c:	00bfffc4 	movi	r2,-1
  8372a0:	1884703a 	and	r2,r3,r2
  8372a4:	20800005 	stb	r2,0(r4)
      len = 4;
  8372a8:	00800104 	movi	r2,4
  8372ac:	e0bffa15 	stw	r2,-24(fp)
      cp += 4;
  8372b0:	e0bffc17 	ldw	r2,-16(fp)
  8372b4:	10800104 	addi	r2,r2,4
  8372b8:	e0bffc15 	stw	r2,-16(fp)
  8372bc:	00000106 	br	8372c4 <bld_options+0xc8>
   }
   else
      len = 0;
  8372c0:	e03ffa15 	stw	zero,-24(fp)
      len += 10;
   }
#endif   /* TCP_TIMESTAMP */

   USE_ARG(so);
   return len;
  8372c4:	e0bffa17 	ldw	r2,-24(fp)
  8372c8:	e0bfff15 	stw	r2,-4(fp)
  8372cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8372d0:	e037883a 	mov	sp,fp
  8372d4:	dfc00117 	ldw	ra,4(sp)
  8372d8:	df000017 	ldw	fp,0(sp)
  8372dc:	dec00204 	addi	sp,sp,8
  8372e0:	f800283a 	ret

008372e4 <tcp_init>:
 * RETURNS: 
 */

void
tcp_init()
{
  8372e4:	deffff04 	addi	sp,sp,-4
  8372e8:	df000015 	stw	fp,0(sp)
  8372ec:	d839883a 	mov	fp,sp
   tcp_iss = 1;      /* wrong */
  8372f0:	00c02174 	movhi	r3,133
  8372f4:	18c33304 	addi	r3,r3,3276
  8372f8:	00800044 	movi	r2,1
  8372fc:	18800015 	stw	r2,0(r3)
   tcb.inp_next = tcb.inp_prev = &tcb;
  837300:	00c03934 	movhi	r3,228
  837304:	18e90104 	addi	r3,r3,-23548
  837308:	00803934 	movhi	r2,228
  83730c:	10a90104 	addi	r2,r2,-23548
  837310:	18800115 	stw	r2,4(r3)
  837314:	00803934 	movhi	r2,228
  837318:	10a90104 	addi	r2,r2,-23548
  83731c:	10c00117 	ldw	r3,4(r2)
  837320:	00803934 	movhi	r2,228
  837324:	10a90104 	addi	r2,r2,-23548
  837328:	10c00015 	stw	r3,0(r2)
}
  83732c:	e037883a 	mov	sp,fp
  837330:	df000017 	ldw	fp,0(sp)
  837334:	dec00104 	addi	sp,sp,4
  837338:	f800283a 	ret

0083733c <tcp_template>:
 * RETURNS: 
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
  83733c:	defffa04 	addi	sp,sp,-24
  837340:	dfc00515 	stw	ra,20(sp)
  837344:	df000415 	stw	fp,16(sp)
  837348:	df000404 	addi	fp,sp,16
  83734c:	e13ffe15 	stw	r4,-8(fp)
   struct inpcb * inp   =  tp->t_inpcb;
  837350:	e0bffe17 	ldw	r2,-8(fp)
  837354:	10800d17 	ldw	r2,52(r2)
  837358:	e0bffd15 	stw	r2,-12(fp)
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
  83735c:	e0bffe17 	ldw	r2,-8(fp)
  837360:	10800c17 	ldw	r2,48(r2)
  837364:	e0bffc15 	stw	r2,-16(fp)
  837368:	e0bffc17 	ldw	r2,-16(fp)
  83736c:	1004c03a 	cmpne	r2,r2,zero
  837370:	1000081e 	bne	r2,zero,837394 <tcp_template+0x58>
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
  837374:	01000a04 	movi	r4,40
  837378:	082b20c0 	call	82b20c <npalloc>
  83737c:	e0bffc15 	stw	r2,-16(fp)
      if (n == NULL)
  837380:	e0bffc17 	ldw	r2,-16(fp)
  837384:	1004c03a 	cmpne	r2,r2,zero
  837388:	1000021e 	bne	r2,zero,837394 <tcp_template+0x58>
         return (0);
  83738c:	e03fff15 	stw	zero,-4(fp)
  837390:	00002a06 	br	83743c <tcp_template+0x100>
   }
   n->ti_next = n->ti_prev = 0;
  837394:	e0bffc17 	ldw	r2,-16(fp)
  837398:	10000115 	stw	zero,4(r2)
  83739c:	e0bffc17 	ldw	r2,-16(fp)
  8373a0:	10c00117 	ldw	r3,4(r2)
  8373a4:	e0bffc17 	ldw	r2,-16(fp)
  8373a8:	10c00015 	stw	r3,0(r2)
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
  8373ac:	e0fffc17 	ldw	r3,-16(fp)
  8373b0:	00850004 	movi	r2,5120
  8373b4:	1880028d 	sth	r2,10(r3)
   n->ti_src = inp->inp_laddr;
  8373b8:	e0bffd17 	ldw	r2,-12(fp)
  8373bc:	10c00417 	ldw	r3,16(r2)
  8373c0:	e0bffc17 	ldw	r2,-16(fp)
  8373c4:	10c00315 	stw	r3,12(r2)
   n->ti_dst = inp->inp_faddr;
  8373c8:	e0bffd17 	ldw	r2,-12(fp)
  8373cc:	10c00317 	ldw	r3,12(r2)
  8373d0:	e0bffc17 	ldw	r2,-16(fp)
  8373d4:	10c00415 	stw	r3,16(r2)
   n->ti_sport = inp->inp_lport;
  8373d8:	e0bffd17 	ldw	r2,-12(fp)
  8373dc:	10c0078b 	ldhu	r3,30(r2)
  8373e0:	e0bffc17 	ldw	r2,-16(fp)
  8373e4:	10c0050d 	sth	r3,20(r2)
   n->ti_dport = inp->inp_fport;
  8373e8:	e0bffd17 	ldw	r2,-12(fp)
  8373ec:	10c0070b 	ldhu	r3,28(r2)
  8373f0:	e0bffc17 	ldw	r2,-16(fp)
  8373f4:	10c0058d 	sth	r3,22(r2)
   n->ti_seq = 0;
  8373f8:	e0bffc17 	ldw	r2,-16(fp)
  8373fc:	10000615 	stw	zero,24(r2)
   n->ti_ack = 0;
  837400:	e0bffc17 	ldw	r2,-16(fp)
  837404:	10000715 	stw	zero,28(r2)
   n->ti_t.th_doff = (5 << 4);   /* NetPort */
  837408:	e0fffc17 	ldw	r3,-16(fp)
  83740c:	00801404 	movi	r2,80
  837410:	18800805 	stb	r2,32(r3)
   n->ti_flags = 0;
  837414:	e0bffc17 	ldw	r2,-16(fp)
  837418:	10000845 	stb	zero,33(r2)
   n->ti_win = 0;
  83741c:	e0bffc17 	ldw	r2,-16(fp)
  837420:	1000088d 	sth	zero,34(r2)
   n->ti_sum = 0;
  837424:	e0bffc17 	ldw	r2,-16(fp)
  837428:	1000090d 	sth	zero,36(r2)
   n->ti_urp = 0;
  83742c:	e0bffc17 	ldw	r2,-16(fp)
  837430:	1000098d 	sth	zero,38(r2)
   return (n);
  837434:	e0bffc17 	ldw	r2,-16(fp)
  837438:	e0bfff15 	stw	r2,-4(fp)
  83743c:	e0bfff17 	ldw	r2,-4(fp)
}
  837440:	e037883a 	mov	sp,fp
  837444:	dfc00117 	ldw	ra,4(sp)
  837448:	df000017 	ldw	fp,0(sp)
  83744c:	dec00204 	addi	sp,sp,8
  837450:	f800283a 	ret

00837454 <tcp_respond>:
   struct tcpiphdr * ti,
   tcp_seq  ack,
   tcp_seq  seq,
   int   flags,
   struct mbuf *  ti_mbuf)
{
  837454:	defff104 	addi	sp,sp,-60
  837458:	dfc00e15 	stw	ra,56(sp)
  83745c:	df000d15 	stw	fp,52(sp)
  837460:	df000d04 	addi	fp,sp,52
  837464:	e13ffb15 	stw	r4,-20(fp)
  837468:	e17ffc15 	stw	r5,-16(fp)
  83746c:	e1bffd15 	stw	r6,-12(fp)
  837470:	e1fffe15 	stw	r7,-8(fp)
   int      tlen;       /* tcp data len - 0 or 1 */
   int      domain;     /* AF_INET or AF_INET6 */
   int      win = 0;    /* window to use in sent packet */
  837474:	e03ff815 	stw	zero,-32(fp)
   struct mbuf *  m;    /* mbuf to send */
   struct tcpiphdr * tmp_thdr;   /* scratch */

   if (tp)
  837478:	e0bffb17 	ldw	r2,-20(fp)
  83747c:	1005003a 	cmpeq	r2,r2,zero
  837480:	10001a1e 	bne	r2,zero,8374ec <tcp_respond+0x98>
      win = (int)sbspace(&tp->t_inpcb->inp_socket->so_rcv);
  837484:	e0bffb17 	ldw	r2,-20(fp)
  837488:	10800d17 	ldw	r2,52(r2)
  83748c:	10800817 	ldw	r2,32(r2)
  837490:	10800b17 	ldw	r2,44(r2)
  837494:	1007883a 	mov	r3,r2
  837498:	e0bffb17 	ldw	r2,-20(fp)
  83749c:	10800d17 	ldw	r2,52(r2)
  8374a0:	10800817 	ldw	r2,32(r2)
  8374a4:	10800a17 	ldw	r2,40(r2)
  8374a8:	1885c83a 	sub	r2,r3,r2
  8374ac:	1004803a 	cmplt	r2,r2,zero
  8374b0:	10000b1e 	bne	r2,zero,8374e0 <tcp_respond+0x8c>
  8374b4:	e0bffb17 	ldw	r2,-20(fp)
  8374b8:	10800d17 	ldw	r2,52(r2)
  8374bc:	10800817 	ldw	r2,32(r2)
  8374c0:	10c00b17 	ldw	r3,44(r2)
  8374c4:	e0bffb17 	ldw	r2,-20(fp)
  8374c8:	10800d17 	ldw	r2,52(r2)
  8374cc:	10800817 	ldw	r2,32(r2)
  8374d0:	10800a17 	ldw	r2,40(r2)
  8374d4:	1885c83a 	sub	r2,r3,r2
  8374d8:	e0bfff15 	stw	r2,-4(fp)
  8374dc:	00000106 	br	8374e4 <tcp_respond+0x90>
  8374e0:	e03fff15 	stw	zero,-4(fp)
  8374e4:	e0bfff17 	ldw	r2,-4(fp)
  8374e8:	e0bff815 	stw	r2,-32(fp)

   /* Figure out of we can recycle the passed buffer or if we need a 
    * new one. Construct the easy parts of the the TCP and IP headers.
    */
   if (flags == 0)   /* sending keepalive from timer */
  8374ec:	e0800217 	ldw	r2,8(fp)
  8374f0:	1004c03a 	cmpne	r2,r2,zero
  8374f4:	1000391e 	bne	r2,zero,8375dc <tcp_respond+0x188>
   {
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
  8374f8:	010000c4 	movi	r4,3
  8374fc:	01401004 	movi	r5,64
  837500:	082b5c80 	call	82b5c8 <m_getnbuf>
  837504:	e0bff715 	stw	r2,-36(fp)
      if (m == NULL)
  837508:	e0bff717 	ldw	r2,-36(fp)
  83750c:	1005003a 	cmpeq	r2,r2,zero
  837510:	1000ed1e 	bne	r2,zero,8378c8 <tcp_respond+0x474>
         return;
      tlen = 1;   /* Keepalives have one byte of data */
  837514:	00800044 	movi	r2,1
  837518:	e0bffa15 	stw	r2,-24(fp)
      m->m_len = TCPIPHDRSZ + tlen;
  83751c:	e0bffa17 	ldw	r2,-24(fp)
  837520:	10800a04 	addi	r2,r2,40
  837524:	1007883a 	mov	r3,r2
  837528:	e0bff717 	ldw	r2,-36(fp)
  83752c:	10c00215 	stw	r3,8(r2)
      /*
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
  837530:	e0bff717 	ldw	r2,-36(fp)
  837534:	10800317 	ldw	r2,12(r2)
  837538:	e0bff615 	stw	r2,-40(fp)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
  83753c:	e0bff717 	ldw	r2,-36(fp)
  837540:	10800117 	ldw	r2,4(r2)
  837544:	10c00117 	ldw	r3,4(r2)
  837548:	e0bff617 	ldw	r2,-40(fp)
  83754c:	10c0032e 	bgeu	r2,r3,83755c <tcp_respond+0x108>
      {
         panic("tcp_respond- packet ptr underflow\n");
  837550:	01002174 	movhi	r4,133
  837554:	21371504 	addi	r4,r4,-9132
  837558:	0825a2c0 	call	825a2c <panic>
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
  83755c:	e13ff617 	ldw	r4,-40(fp)
  837560:	e0fffc17 	ldw	r3,-16(fp)
  837564:	18800017 	ldw	r2,0(r3)
  837568:	20800015 	stw	r2,0(r4)
  83756c:	18800117 	ldw	r2,4(r3)
  837570:	20800115 	stw	r2,4(r4)
  837574:	18800217 	ldw	r2,8(r3)
  837578:	20800215 	stw	r2,8(r4)
  83757c:	18800317 	ldw	r2,12(r3)
  837580:	20800315 	stw	r2,12(r4)
  837584:	18800417 	ldw	r2,16(r3)
  837588:	20800415 	stw	r2,16(r4)
  83758c:	18800517 	ldw	r2,20(r3)
  837590:	20800515 	stw	r2,20(r4)
  837594:	18800617 	ldw	r2,24(r3)
  837598:	20800615 	stw	r2,24(r4)
  83759c:	18800717 	ldw	r2,28(r3)
  8375a0:	20800715 	stw	r2,28(r4)
  8375a4:	18800817 	ldw	r2,32(r3)
  8375a8:	20800815 	stw	r2,32(r4)
  8375ac:	18800917 	ldw	r2,36(r3)
  8375b0:	20800915 	stw	r2,36(r4)
      ti = tmp_thdr;
  8375b4:	e0bff617 	ldw	r2,-40(fp)
  8375b8:	e0bffc15 	stw	r2,-16(fp)
      flags = TH_ACK;
  8375bc:	00800404 	movi	r2,16
  8375c0:	e0800215 	stw	r2,8(fp)
      domain = tp->t_inpcb->inp_socket->so_domain;
  8375c4:	e0bffb17 	ldw	r2,-20(fp)
  8375c8:	10800d17 	ldw	r2,52(r2)
  8375cc:	10800817 	ldw	r2,32(r2)
  8375d0:	10800517 	ldw	r2,20(r2)
  8375d4:	e0bff915 	stw	r2,-28(fp)
  8375d8:	00003b06 	br	8376c8 <tcp_respond+0x274>
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
  8375dc:	e0800317 	ldw	r2,12(fp)
  8375e0:	e0bff715 	stw	r2,-36(fp)
      if(m->pkt->type == IPTP)   /* IPv4 packet */
  8375e4:	e0bff717 	ldw	r2,-36(fp)
  8375e8:	10800117 	ldw	r2,4(r2)
  8375ec:	1080080b 	ldhu	r2,32(r2)
  8375f0:	10bfffcc 	andi	r2,r2,65535
  8375f4:	10800218 	cmpnei	r2,r2,8
  8375f8:	1000031e 	bne	r2,zero,837608 <tcp_respond+0x1b4>
         domain = AF_INET;
  8375fc:	00800084 	movi	r2,2
  837600:	e0bff915 	stw	r2,-28(fp)
  837604:	00000206 	br	837610 <tcp_respond+0x1bc>
      else
         domain = AF_INET6;
  837608:	008000c4 	movi	r2,3
  83760c:	e0bff915 	stw	r2,-28(fp)

      m_freem(m->m_next);
  837610:	e0bff717 	ldw	r2,-36(fp)
  837614:	11000617 	ldw	r4,24(r2)
  837618:	082b8a40 	call	82b8a4 <m_freem>
      m->m_next = 0;
  83761c:	e0bff717 	ldw	r2,-36(fp)
  837620:	10000615 	stw	zero,24(r2)
      tlen = 0;         /* NO data */
  837624:	e03ffa15 	stw	zero,-24(fp)
      m->m_len = TCPIPHDRSZ;
  837628:	e0fff717 	ldw	r3,-36(fp)
  83762c:	00800a04 	movi	r2,40
  837630:	18800215 	stw	r2,8(r3)
      xchg(ti->ti_dport, ti->ti_sport, u_short);
  837634:	e0bffc17 	ldw	r2,-16(fp)
  837638:	1080058b 	ldhu	r2,22(r2)
  83763c:	e0bff50d 	sth	r2,-44(fp)
  837640:	e0bffc17 	ldw	r2,-16(fp)
  837644:	10c0050b 	ldhu	r3,20(r2)
  837648:	e0bffc17 	ldw	r2,-16(fp)
  83764c:	10c0058d 	sth	r3,22(r2)
  837650:	e0fffc17 	ldw	r3,-16(fp)
  837654:	e0bff50b 	ldhu	r2,-44(fp)
  837658:	1880050d 	sth	r2,20(r3)
      if(m->pkt->type == IPTP)
  83765c:	e0bff717 	ldw	r2,-36(fp)
  837660:	10800117 	ldw	r2,4(r2)
  837664:	1080080b 	ldhu	r2,32(r2)
  837668:	10bfffcc 	andi	r2,r2,65535
  83766c:	10800218 	cmpnei	r2,r2,8
  837670:	10000a1e 	bne	r2,zero,83769c <tcp_respond+0x248>
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
  837674:	e0bffc17 	ldw	r2,-16(fp)
  837678:	10800417 	ldw	r2,16(r2)
  83767c:	e0bff415 	stw	r2,-48(fp)
  837680:	e0bffc17 	ldw	r2,-16(fp)
  837684:	10c00317 	ldw	r3,12(r2)
  837688:	e0bffc17 	ldw	r2,-16(fp)
  83768c:	10c00415 	stw	r3,16(r2)
  837690:	e0fffc17 	ldw	r3,-16(fp)
  837694:	e0bff417 	ldw	r2,-48(fp)
  837698:	18800315 	stw	r2,12(r3)
      if (flags & TH_RST)  /* count resets in MIB */
  83769c:	e0800217 	ldw	r2,8(fp)
  8376a0:	1080010c 	andi	r2,r2,4
  8376a4:	1005003a 	cmpeq	r2,r2,zero
  8376a8:	1000071e 	bne	r2,zero,8376c8 <tcp_respond+0x274>
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
  8376ac:	00803934 	movhi	r2,228
  8376b0:	10a8de04 	addi	r2,r2,-23688
  8376b4:	10800e17 	ldw	r2,56(r2)
  8376b8:	10c00044 	addi	r3,r2,1
  8376bc:	00803934 	movhi	r2,228
  8376c0:	10a8de04 	addi	r2,r2,-23688
  8376c4:	10c00e15 	stw	r3,56(r2)
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
  8376c8:	e0bffe17 	ldw	r2,-8(fp)
  8376cc:	1004d63a 	srli	r2,r2,24
  8376d0:	10c03fcc 	andi	r3,r2,255
  8376d4:	e0bffe17 	ldw	r2,-8(fp)
  8376d8:	1004d23a 	srli	r2,r2,8
  8376dc:	10bfc00c 	andi	r2,r2,65280
  8376e0:	1886b03a 	or	r3,r3,r2
  8376e4:	e0bffe17 	ldw	r2,-8(fp)
  8376e8:	10bfc00c 	andi	r2,r2,65280
  8376ec:	1004923a 	slli	r2,r2,8
  8376f0:	1886b03a 	or	r3,r3,r2
  8376f4:	e0bffe17 	ldw	r2,-8(fp)
  8376f8:	10803fcc 	andi	r2,r2,255
  8376fc:	1004963a 	slli	r2,r2,24
  837700:	1886b03a 	or	r3,r3,r2
  837704:	e0bffc17 	ldw	r2,-16(fp)
  837708:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(ack);
  83770c:	e0bffd17 	ldw	r2,-12(fp)
  837710:	1004d63a 	srli	r2,r2,24
  837714:	10c03fcc 	andi	r3,r2,255
  837718:	e0bffd17 	ldw	r2,-12(fp)
  83771c:	1004d23a 	srli	r2,r2,8
  837720:	10bfc00c 	andi	r2,r2,65280
  837724:	1886b03a 	or	r3,r3,r2
  837728:	e0bffd17 	ldw	r2,-12(fp)
  83772c:	10bfc00c 	andi	r2,r2,65280
  837730:	1004923a 	slli	r2,r2,8
  837734:	1886b03a 	or	r3,r3,r2
  837738:	e0bffd17 	ldw	r2,-12(fp)
  83773c:	10803fcc 	andi	r2,r2,255
  837740:	1004963a 	slli	r2,r2,24
  837744:	1886b03a 	or	r3,r3,r2
  837748:	e0bffc17 	ldw	r2,-16(fp)
  83774c:	10c00715 	stw	r3,28(r2)
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
  837750:	e0fffc17 	ldw	r3,-16(fp)
  837754:	00801404 	movi	r2,80
  837758:	18800805 	stb	r2,32(r3)
   ti->ti_flags = (u_char)flags;
  83775c:	e0800217 	ldw	r2,8(fp)
  837760:	1007883a 	mov	r3,r2
  837764:	e0bffc17 	ldw	r2,-16(fp)
  837768:	10c00845 	stb	r3,33(r2)
   ti->ti_win = htons((u_short)win);
  83776c:	e0bff817 	ldw	r2,-32(fp)
  837770:	10bfffcc 	andi	r2,r2,65535
  837774:	1004d23a 	srli	r2,r2,8
  837778:	10803fcc 	andi	r2,r2,255
  83777c:	1009883a 	mov	r4,r2
  837780:	e0bff817 	ldw	r2,-32(fp)
  837784:	10bfffcc 	andi	r2,r2,65535
  837788:	1004923a 	slli	r2,r2,8
  83778c:	1007883a 	mov	r3,r2
  837790:	00bfc004 	movi	r2,-256
  837794:	1884703a 	and	r2,r3,r2
  837798:	2084b03a 	or	r2,r4,r2
  83779c:	1007883a 	mov	r3,r2
  8377a0:	e0bffc17 	ldw	r2,-16(fp)
  8377a4:	10c0088d 	sth	r3,34(r2)
   ti->ti_urp = 0;
  8377a8:	e0bffc17 	ldw	r2,-16(fp)
  8377ac:	1000098d 	sth	zero,38(r2)

   /* Finish constructing IP header and send, based on IP type in use */
   switch(domain)
  8377b0:	e0bff917 	ldw	r2,-28(fp)
  8377b4:	108000a0 	cmpeqi	r2,r2,2
  8377b8:	1000011e 	bne	r2,zero,8377c0 <tcp_respond+0x36c>
  8377bc:	00004106 	br	8378c4 <tcp_respond+0x470>
#ifdef IP_V4
      case AF_INET:
      {
         struct ip * pip;

         pip = (struct ip *)((char*)ti+sizeof(struct ipovly)-sizeof(struct ip));
  8377c0:	e0bffc17 	ldw	r2,-16(fp)
  8377c4:	e0bff315 	stw	r2,-52(fp)

         pip->ip_len = (unshort)(TCPIPHDRSZ + tlen);
  8377c8:	e0bffa17 	ldw	r2,-24(fp)
  8377cc:	10800a04 	addi	r2,r2,40
  8377d0:	1007883a 	mov	r3,r2
  8377d4:	e0bff317 	ldw	r2,-52(fp)
  8377d8:	10c0008d 	sth	r3,2(r2)
         /* If our system's max. MAC header size is geater than the size 
          * of the MAC header in the received packet then we need to 
          * adjust the IP header offset to allow for this. Since the packets 
          * are only headers they should always fit.
          */
         if(pip >= (struct ip *)(m->pkt->nb_buff + MaxLnh))
  8377dc:	e0bff717 	ldw	r2,-36(fp)
  8377e0:	10800117 	ldw	r2,4(r2)
  8377e4:	10c00117 	ldw	r3,4(r2)
  8377e8:	00802174 	movhi	r2,133
  8377ec:	1082ff04 	addi	r2,r2,3068
  8377f0:	10800017 	ldw	r2,0(r2)
  8377f4:	1885883a 	add	r2,r3,r2
  8377f8:	1007883a 	mov	r3,r2
  8377fc:	e0bff317 	ldw	r2,-52(fp)
  837800:	10c00436 	bltu	r2,r3,837814 <tcp_respond+0x3c0>
         {
            m->m_data = (char*)pip; /* headers will fit, just set pointer */
  837804:	e0fff317 	ldw	r3,-52(fp)
  837808:	e0bff717 	ldw	r2,-36(fp)
  83780c:	10c00315 	stw	r3,12(r2)
  837810:	00001206 	br	83785c <tcp_respond+0x408>
         }
         else     /* MAC may not fit, adjust pointer and move headers back */
         {
            m->m_data = m->pkt->nb_prot = m->pkt->nb_buff + MaxLnh;  /* new ptr */
  837814:	e0bff717 	ldw	r2,-36(fp)
  837818:	11000117 	ldw	r4,4(r2)
  83781c:	e0bff717 	ldw	r2,-36(fp)
  837820:	10800117 	ldw	r2,4(r2)
  837824:	10c00117 	ldw	r3,4(r2)
  837828:	00802174 	movhi	r2,133
  83782c:	1082ff04 	addi	r2,r2,3068
  837830:	10800017 	ldw	r2,0(r2)
  837834:	1885883a 	add	r2,r3,r2
  837838:	20800315 	stw	r2,12(r4)
  83783c:	20c00317 	ldw	r3,12(r4)
  837840:	e0bff717 	ldw	r2,-36(fp)
  837844:	10c00315 	stw	r3,12(r2)
            MEMMOVE(m->m_data, pip, TCPIPHDRSZ);  /* move back tcp/ip headers */
  837848:	e0bff717 	ldw	r2,-36(fp)
  83784c:	11000317 	ldw	r4,12(r2)
  837850:	e17ff317 	ldw	r5,-52(fp)
  837854:	01800a04 	movi	r6,40
  837858:	08073d80 	call	8073d8 <memmove>

         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
  83785c:	e0bffb17 	ldw	r2,-20(fp)
  837860:	1004c03a 	cmpne	r2,r2,zero
  837864:	1000031e 	bne	r2,zero,837874 <tcp_respond+0x420>
              m_freem(m);
  837868:	e13ff717 	ldw	r4,-36(fp)
  83786c:	082b8a40 	call	82b8a4 <m_freem>
  837870:	00001506 	br	8378c8 <tcp_respond+0x474>
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
  837874:	e0bffb17 	ldw	r2,-20(fp)
  837878:	10800d17 	ldw	r2,52(r2)
  83787c:	1005003a 	cmpeq	r2,r2,zero
  837880:	10000c1e 	bne	r2,zero,8378b4 <tcp_respond+0x460>
  837884:	e0bffb17 	ldw	r2,-20(fp)
  837888:	10800d17 	ldw	r2,52(r2)
  83788c:	10800817 	ldw	r2,32(r2)
  837890:	1005003a 	cmpeq	r2,r2,zero
  837894:	1000071e 	bne	r2,zero,8378b4 <tcp_respond+0x460>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
  837898:	e0bffb17 	ldw	r2,-20(fp)
  83789c:	10800d17 	ldw	r2,52(r2)
  8378a0:	10800817 	ldw	r2,32(r2)
  8378a4:	11401f17 	ldw	r5,124(r2)
  8378a8:	e13ff717 	ldw	r4,-36(fp)
  8378ac:	082c2d80 	call	82c2d8 <ip_output>
          */
         if (!tp)
              m_freem(m);
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
  8378b0:	00000506 	br	8378c8 <tcp_respond+0x474>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
			 else
				ip_output(m, (struct   ip_socopts *)NULL);
  8378b4:	e13ff717 	ldw	r4,-36(fp)
  8378b8:	000b883a 	mov	r5,zero
  8378bc:	082c2d80 	call	82c2d8 <ip_output>
		 }

         break;
  8378c0:	00000106 	br	8378c8 <tcp_respond+0x474>

         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();
  8378c4:	082a7c80 	call	82a7c8 <dtrap>
         break;
   }
   return;
}
  8378c8:	e037883a 	mov	sp,fp
  8378cc:	dfc00117 	ldw	ra,4(sp)
  8378d0:	df000017 	ldw	fp,0(sp)
  8378d4:	dec00204 	addi	sp,sp,8
  8378d8:	f800283a 	ret

008378dc <tcp_newtcpcb>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_newtcpcb(struct inpcb * inp)
{
  8378dc:	defffa04 	addi	sp,sp,-24
  8378e0:	dfc00515 	stw	ra,20(sp)
  8378e4:	df000415 	stw	fp,16(sp)
  8378e8:	df000404 	addi	fp,sp,16
  8378ec:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
  8378f0:	01002504 	movi	r4,148
  8378f4:	082b20c0 	call	82b20c <npalloc>
  8378f8:	e0bffd15 	stw	r2,-12(fp)
   if (tp == NULL)
  8378fc:	e0bffd17 	ldw	r2,-12(fp)
  837900:	1004c03a 	cmpne	r2,r2,zero
  837904:	1000021e 	bne	r2,zero,837910 <tcp_newtcpcb+0x34>
      return (struct tcpcb *)NULL;
  837908:	e03fff15 	stw	zero,-4(fp)
  83790c:	00003306 	br	8379dc <tcp_newtcpcb+0x100>
   tp->seg_next = tp->seg_prev = (struct tcpiphdr *)tp;
  837910:	e0fffd17 	ldw	r3,-12(fp)
  837914:	e0bffd17 	ldw	r2,-12(fp)
  837918:	10c00115 	stw	r3,4(r2)
  83791c:	e0bffd17 	ldw	r2,-12(fp)
  837920:	10c00117 	ldw	r3,4(r2)
  837924:	e0bffd17 	ldw	r2,-12(fp)
  837928:	10c00015 	stw	r3,0(r2)
   tp->t_maxseg = TCP_MSS;
  83792c:	e0fffd17 	ldw	r3,-12(fp)
  837930:	00816d04 	movi	r2,1460
  837934:	18800a0d 	sth	r2,40(r3)
   tp->t_flags = 0;        /* sends options! */
  837938:	e0bffd17 	ldw	r2,-12(fp)
  83793c:	10000b0d 	sth	zero,44(r2)
   tp->t_inpcb = inp;
  837940:	e0fffd17 	ldw	r3,-12(fp)
  837944:	e0bffe17 	ldw	r2,-8(fp)
  837948:	18800d15 	stw	r2,52(r3)
   /*
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
  83794c:	e0bffd17 	ldw	r2,-12(fp)
  837950:	10002015 	stw	zero,128(r2)
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;
  837954:	e0fffd17 	ldw	r3,-12(fp)
  837958:	00800604 	movi	r2,24
  83795c:	18802115 	stw	r2,132(r3)

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
  837960:	00800304 	movi	r2,12
  837964:	e0bffc0d 	sth	r2,-16(fp)
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);
  837968:	e0fffc0f 	ldh	r3,-16(fp)
  83796c:	e0bffd17 	ldw	r2,-12(fp)
  837970:	10c00815 	stw	r3,32(r2)
  837974:	e0bffd17 	ldw	r2,-12(fp)
  837978:	10800817 	ldw	r2,32(r2)
  83797c:	10800088 	cmpgei	r2,r2,2
  837980:	1000041e 	bne	r2,zero,837994 <tcp_newtcpcb+0xb8>
  837984:	e0fffd17 	ldw	r3,-12(fp)
  837988:	00800084 	movi	r2,2
  83798c:	18800815 	stw	r2,32(r3)
  837990:	00000706 	br	8379b0 <tcp_newtcpcb+0xd4>
  837994:	e0bffd17 	ldw	r2,-12(fp)
  837998:	10800817 	ldw	r2,32(r2)
  83799c:	10802050 	cmplti	r2,r2,129
  8379a0:	1000031e 	bne	r2,zero,8379b0 <tcp_newtcpcb+0xd4>
  8379a4:	e0fffd17 	ldw	r3,-12(fp)
  8379a8:	00802004 	movi	r2,128
  8379ac:	18800815 	stw	r2,32(r3)

   /* Set initial congestion window - RFC-2581, pg 4. */
   tp->snd_cwnd = 2 * TCP_MSS;
  8379b0:	e0fffd17 	ldw	r3,-12(fp)
  8379b4:	0082da04 	movi	r2,2920
  8379b8:	18801b15 	stw	r2,108(r3)

#ifdef DO_DELAY_ACKS
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */
  8379bc:	e0fffd17 	ldw	r3,-12(fp)
  8379c0:	00bfffd4 	movui	r2,65535
  8379c4:	18801c15 	stw	r2,112(r3)

   inp->inp_ppcb = (char *)tp;
  8379c8:	e0fffd17 	ldw	r3,-12(fp)
  8379cc:	e0bffe17 	ldw	r2,-8(fp)
  8379d0:	10c00915 	stw	r3,36(r2)
   return (tp);
  8379d4:	e0bffd17 	ldw	r2,-12(fp)
  8379d8:	e0bfff15 	stw	r2,-4(fp)
  8379dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8379e0:	e037883a 	mov	sp,fp
  8379e4:	dfc00117 	ldw	ra,4(sp)
  8379e8:	df000017 	ldw	fp,0(sp)
  8379ec:	dec00204 	addi	sp,sp,8
  8379f0:	f800283a 	ret

008379f4 <tcp_drop>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
  8379f4:	defffb04 	addi	sp,sp,-20
  8379f8:	dfc00415 	stw	ra,16(sp)
  8379fc:	df000315 	stw	fp,12(sp)
  837a00:	df000304 	addi	fp,sp,12
  837a04:	e13ffe15 	stw	r4,-8(fp)
  837a08:	e17fff15 	stw	r5,-4(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
  837a0c:	e0bffe17 	ldw	r2,-8(fp)
  837a10:	10800d17 	ldw	r2,52(r2)
  837a14:	10800817 	ldw	r2,32(r2)
  837a18:	e0bffd15 	stw	r2,-12(fp)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
  837a1c:	e0bffe17 	ldw	r2,-8(fp)
  837a20:	10800217 	ldw	r2,8(r2)
  837a24:	108000d0 	cmplti	r2,r2,3
  837a28:	10000c1e 	bne	r2,zero,837a5c <tcp_drop+0x68>
   {
      tp->t_state = TCPS_CLOSED;
  837a2c:	e0bffe17 	ldw	r2,-8(fp)
  837a30:	10000215 	stw	zero,8(r2)
      (void) tcp_output(tp);
  837a34:	e13ffe17 	ldw	r4,-8(fp)
  837a38:	0835f840 	call	835f84 <tcp_output>
      tcpstat.tcps_drops++;
  837a3c:	00803934 	movhi	r2,228
  837a40:	10a90c04 	addi	r2,r2,-23504
  837a44:	10800317 	ldw	r2,12(r2)
  837a48:	10c00044 	addi	r3,r2,1
  837a4c:	00803934 	movhi	r2,228
  837a50:	10a90c04 	addi	r2,r2,-23504
  837a54:	10c00315 	stw	r3,12(r2)
  837a58:	00000706 	br	837a78 <tcp_drop+0x84>
   }
   else
      tcpstat.tcps_conndrops++;
  837a5c:	00803934 	movhi	r2,228
  837a60:	10a90c04 	addi	r2,r2,-23504
  837a64:	10800417 	ldw	r2,16(r2)
  837a68:	10c00044 	addi	r3,r2,1
  837a6c:	00803934 	movhi	r2,228
  837a70:	10a90c04 	addi	r2,r2,-23504
  837a74:	10c00415 	stw	r3,16(r2)
   so->so_error = err;
  837a78:	e0fffd17 	ldw	r3,-12(fp)
  837a7c:	e0bfff17 	ldw	r2,-4(fp)
  837a80:	18800615 	stw	r2,24(r3)
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
  837a84:	e13ffe17 	ldw	r4,-8(fp)
  837a88:	0837aa00 	call	837aa0 <tcp_close>
}
  837a8c:	e037883a 	mov	sp,fp
  837a90:	dfc00117 	ldw	ra,4(sp)
  837a94:	df000017 	ldw	fp,0(sp)
  837a98:	dec00204 	addi	sp,sp,8
  837a9c:	f800283a 	ret

00837aa0 <tcp_close>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_close(struct tcpcb * tp)
{
  837aa0:	defff904 	addi	sp,sp,-28
  837aa4:	dfc00615 	stw	ra,24(sp)
  837aa8:	df000515 	stw	fp,20(sp)
  837aac:	df000504 	addi	fp,sp,20
  837ab0:	e13fff15 	stw	r4,-4(fp)
   struct tcpiphdr * t;
   struct inpcb * inp   =  tp->t_inpcb;
  837ab4:	e0bfff17 	ldw	r2,-4(fp)
  837ab8:	10800d17 	ldw	r2,52(r2)
  837abc:	e0bffd15 	stw	r2,-12(fp)
   struct socket *   so =  inp->inp_socket;
  837ac0:	e0bffd17 	ldw	r2,-12(fp)
  837ac4:	10800817 	ldw	r2,32(r2)
  837ac8:	e0bffc15 	stw	r2,-16(fp)
   struct mbuf *  m;

   t = tp->seg_next;
  837acc:	e0bfff17 	ldw	r2,-4(fp)
  837ad0:	10800017 	ldw	r2,0(r2)
  837ad4:	e0bffe15 	stw	r2,-8(fp)
   while (t != (struct tcpiphdr *)tp) 
  837ad8:	00000c06 	br	837b0c <tcp_close+0x6c>
   {
      t = (struct tcpiphdr *)t->ti_next;
  837adc:	e0bffe17 	ldw	r2,-8(fp)
  837ae0:	10800017 	ldw	r2,0(r2)
  837ae4:	e0bffe15 	stw	r2,-8(fp)
      m = dtom(t->ti_prev);
  837ae8:	e0bffe17 	ldw	r2,-8(fp)
  837aec:	11000117 	ldw	r4,4(r2)
  837af0:	082be340 	call	82be34 <dtom>
  837af4:	e0bffb15 	stw	r2,-20(fp)
      remque(t->ti_prev);
  837af8:	e0bffe17 	ldw	r2,-8(fp)
  837afc:	11000117 	ldw	r4,4(r2)
  837b00:	082bedc0 	call	82bedc <remque>
      m_freem (m);
  837b04:	e13ffb17 	ldw	r4,-20(fp)
  837b08:	082b8a40 	call	82b8a4 <m_freem>
   struct inpcb * inp   =  tp->t_inpcb;
   struct socket *   so =  inp->inp_socket;
   struct mbuf *  m;

   t = tp->seg_next;
   while (t != (struct tcpiphdr *)tp) 
  837b0c:	e0ffff17 	ldw	r3,-4(fp)
  837b10:	e0bffe17 	ldw	r2,-8(fp)
  837b14:	10fff11e 	bne	r2,r3,837adc <tcp_close+0x3c>
      t = (struct tcpiphdr *)t->ti_next;
      m = dtom(t->ti_prev);
      remque(t->ti_prev);
      m_freem (m);
   }
   if (tp->t_template)
  837b18:	e0bfff17 	ldw	r2,-4(fp)
  837b1c:	10800c17 	ldw	r2,48(r2)
  837b20:	1005003a 	cmpeq	r2,r2,zero
  837b24:	1000031e 	bne	r2,zero,837b34 <tcp_close+0x94>
      TPH_FREE (tp->t_template);
  837b28:	e0bfff17 	ldw	r2,-4(fp)
  837b2c:	11000c17 	ldw	r4,48(r2)
  837b30:	082b3000 	call	82b300 <npfree>
   TCB_FREE (tp);
  837b34:	e13fff17 	ldw	r4,-4(fp)
  837b38:	082b3000 	call	82b300 <npfree>
   inp->inp_ppcb = 0;
  837b3c:	e0bffd17 	ldw	r2,-12(fp)
  837b40:	10000915 	stw	zero,36(r2)
   soisdisconnected(so);
  837b44:	e13ffc17 	ldw	r4,-16(fp)
  837b48:	08315640 	call	831564 <soisdisconnected>
   in_pcbdetach(inp);
  837b4c:	e13ffd17 	ldw	r4,-12(fp)
  837b50:	0846b900 	call	846b90 <in_pcbdetach>
   tcpstat.tcps_closed++;
  837b54:	00803934 	movhi	r2,228
  837b58:	10a90c04 	addi	r2,r2,-23504
  837b5c:	10800517 	ldw	r2,20(r2)
  837b60:	10c00044 	addi	r3,r2,1
  837b64:	00803934 	movhi	r2,228
  837b68:	10a90c04 	addi	r2,r2,-23504
  837b6c:	10c00515 	stw	r3,20(r2)
   return ((struct tcpcb *)0);
  837b70:	0005883a 	mov	r2,zero
}
  837b74:	e037883a 	mov	sp,fp
  837b78:	dfc00117 	ldw	ra,4(sp)
  837b7c:	df000017 	ldw	fp,0(sp)
  837b80:	dec00204 	addi	sp,sp,8
  837b84:	f800283a 	ret

00837b88 <tcp_quench>:
 * RETURNS: 
 */

void
tcp_quench(struct inpcb * inp)
{
  837b88:	defffd04 	addi	sp,sp,-12
  837b8c:	df000215 	stw	fp,8(sp)
  837b90:	df000204 	addi	fp,sp,8
  837b94:	e13fff15 	stw	r4,-4(fp)
   struct tcpcb * tp =  intotcpcb(inp);
  837b98:	e0bfff17 	ldw	r2,-4(fp)
  837b9c:	10800917 	ldw	r2,36(r2)
  837ba0:	e0bffe15 	stw	r2,-8(fp)

   if (tp)
  837ba4:	e0bffe17 	ldw	r2,-8(fp)
  837ba8:	1005003a 	cmpeq	r2,r2,zero
  837bac:	1000051e 	bne	r2,zero,837bc4 <tcp_quench+0x3c>
      tp->snd_cwnd = tp->t_maxseg;
  837bb0:	e0bffe17 	ldw	r2,-8(fp)
  837bb4:	10800a0b 	ldhu	r2,40(r2)
  837bb8:	10ffffcc 	andi	r3,r2,65535
  837bbc:	e0bffe17 	ldw	r2,-8(fp)
  837bc0:	10c01b15 	stw	r3,108(r2)
}
  837bc4:	e037883a 	mov	sp,fp
  837bc8:	df000017 	ldw	fp,0(sp)
  837bcc:	dec00104 	addi	sp,sp,4
  837bd0:	f800283a 	ret

00837bd4 <tcp_putseq>:

/* tcp_putseq()  */

u_char *
tcp_putseq(u_char * cp, tcp_seq seq)
{
  837bd4:	defffc04 	addi	sp,sp,-16
  837bd8:	df000315 	stw	fp,12(sp)
  837bdc:	df000304 	addi	fp,sp,12
  837be0:	e13ffe15 	stw	r4,-8(fp)
  837be4:	e17fff15 	stw	r5,-4(fp)
   int   i;

   cp += 3;                /* do low byte first */
  837be8:	e0bffe17 	ldw	r2,-8(fp)
  837bec:	108000c4 	addi	r2,r2,3
  837bf0:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
  837bf4:	e03ffd15 	stw	zero,-12(fp)
  837bf8:	00000d06 	br	837c30 <tcp_putseq+0x5c>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
  837bfc:	e0bfff17 	ldw	r2,-4(fp)
  837c00:	1007883a 	mov	r3,r2
  837c04:	e0bffe17 	ldw	r2,-8(fp)
  837c08:	10c00005 	stb	r3,0(r2)
  837c0c:	e0bffe17 	ldw	r2,-8(fp)
  837c10:	10bfffc4 	addi	r2,r2,-1
  837c14:	e0bffe15 	stw	r2,-8(fp)
      seq >>= 8;
  837c18:	e0bfff17 	ldw	r2,-4(fp)
  837c1c:	1004d23a 	srli	r2,r2,8
  837c20:	e0bfff15 	stw	r2,-4(fp)
tcp_putseq(u_char * cp, tcp_seq seq)
{
   int   i;

   cp += 3;                /* do low byte first */
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
  837c24:	e0bffd17 	ldw	r2,-12(fp)
  837c28:	10800044 	addi	r2,r2,1
  837c2c:	e0bffd15 	stw	r2,-12(fp)
  837c30:	e0bffd17 	ldw	r2,-12(fp)
  837c34:	10800110 	cmplti	r2,r2,4
  837c38:	103ff01e 	bne	r2,zero,837bfc <tcp_putseq+0x28>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
      seq >>= 8;
   }
   return (cp + 5);
  837c3c:	e0bffe17 	ldw	r2,-8(fp)
  837c40:	10800144 	addi	r2,r2,5
}
  837c44:	e037883a 	mov	sp,fp
  837c48:	df000017 	ldw	fp,0(sp)
  837c4c:	dec00104 	addi	sp,sp,4
  837c50:	f800283a 	ret

00837c54 <tcp_getseq>:
 * RETURNS: a long in local endian
 */

u_long
tcp_getseq(u_char * cp)
{
  837c54:	defffc04 	addi	sp,sp,-16
  837c58:	df000315 	stw	fp,12(sp)
  837c5c:	df000304 	addi	fp,sp,12
  837c60:	e13fff15 	stw	r4,-4(fp)
   int i;
   ulong seq = 0;
  837c64:	e03ffd15 	stw	zero,-12(fp)

   for(i = 0; i < 4; i++)
  837c68:	e03ffe15 	stw	zero,-8(fp)
  837c6c:	00000f06 	br	837cac <tcp_getseq+0x58>
   {
      seq <<= 8;
  837c70:	e0bffd17 	ldw	r2,-12(fp)
  837c74:	1004923a 	slli	r2,r2,8
  837c78:	e0bffd15 	stw	r2,-12(fp)
      seq += (u_long)*(cp++);
  837c7c:	e0bfff17 	ldw	r2,-4(fp)
  837c80:	10800003 	ldbu	r2,0(r2)
  837c84:	10c03fcc 	andi	r3,r2,255
  837c88:	e0bffd17 	ldw	r2,-12(fp)
  837c8c:	10c5883a 	add	r2,r2,r3
  837c90:	e0bffd15 	stw	r2,-12(fp)
  837c94:	e0bfff17 	ldw	r2,-4(fp)
  837c98:	10800044 	addi	r2,r2,1
  837c9c:	e0bfff15 	stw	r2,-4(fp)
tcp_getseq(u_char * cp)
{
   int i;
   ulong seq = 0;

   for(i = 0; i < 4; i++)
  837ca0:	e0bffe17 	ldw	r2,-8(fp)
  837ca4:	10800044 	addi	r2,r2,1
  837ca8:	e0bffe15 	stw	r2,-8(fp)
  837cac:	e0bffe17 	ldw	r2,-8(fp)
  837cb0:	10800110 	cmplti	r2,r2,4
  837cb4:	103fee1e 	bne	r2,zero,837c70 <tcp_getseq+0x1c>
   {
      seq <<= 8;
      seq += (u_long)*(cp++);
   }
   return seq;
  837cb8:	e0bffd17 	ldw	r2,-12(fp)
}
  837cbc:	e037883a 	mov	sp,fp
  837cc0:	df000017 	ldw	fp,0(sp)
  837cc4:	dec00104 	addi	sp,sp,4
  837cc8:	f800283a 	ret

00837ccc <tcp_slowtimo>:
 * RETURNS: 
 */

void
tcp_slowtimo(void)
{
  837ccc:	defff704 	addi	sp,sp,-36
  837cd0:	dfc00815 	stw	ra,32(sp)
  837cd4:	df000715 	stw	fp,28(sp)
  837cd8:	df000704 	addi	fp,sp,28
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
  837cdc:	d0a04717 	ldw	r2,-32484(gp)
  837ce0:	100490fa 	slli	r2,r2,3
  837ce4:	d0a0bc15 	stw	r2,-32016(gp)

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
  837ce8:	00803934 	movhi	r2,228
  837cec:	10a8d904 	addi	r2,r2,-23708
  837cf0:	10800017 	ldw	r2,0(r2)
  837cf4:	e0bffb15 	stw	r2,-20(fp)
  837cf8:	00008306 	br	837f08 <tcp_slowtimo+0x23c>
   {
      sonext = so->next;
  837cfc:	e0bffb17 	ldw	r2,-20(fp)
  837d00:	10800017 	ldw	r2,0(r2)
  837d04:	e0bffa15 	stw	r2,-24(fp)

      /* for SOCK_STREAM (TCP) sockets, we must do slow-timeout 
       * processing and (optionally) processing of pending 
       * zero-copy socket upcalls.
       */
      if (so->so_type == SOCK_STREAM)
  837d08:	e0bffb17 	ldw	r2,-20(fp)
  837d0c:	10800983 	ldbu	r2,38(r2)
  837d10:	10803fcc 	andi	r2,r2,255
  837d14:	1080201c 	xori	r2,r2,128
  837d18:	10bfe004 	addi	r2,r2,-128
  837d1c:	10800058 	cmpnei	r2,r2,1
  837d20:	1000471e 	bne	r2,zero,837e40 <tcp_slowtimo+0x174>
      {
         ip = so->so_pcb;
  837d24:	e0bffb17 	ldw	r2,-20(fp)
  837d28:	10800117 	ldw	r2,4(r2)
  837d2c:	e0bfff15 	stw	r2,-4(fp)
         if (!ip)
  837d30:	e0bfff17 	ldw	r2,-4(fp)
  837d34:	1005003a 	cmpeq	r2,r2,zero
  837d38:	1000711e 	bne	r2,zero,837f00 <tcp_slowtimo+0x234>
            continue;
         ipnxt = ip->inp_next;
  837d3c:	e0bfff17 	ldw	r2,-4(fp)
  837d40:	10800017 	ldw	r2,0(r2)
  837d44:	e0bffe15 	stw	r2,-8(fp)

         tp = intotcpcb(so->so_pcb);
  837d48:	e0bffb17 	ldw	r2,-20(fp)
  837d4c:	10800117 	ldw	r2,4(r2)
  837d50:	10800917 	ldw	r2,36(r2)
  837d54:	e0bffd15 	stw	r2,-12(fp)
         if (!tp)
  837d58:	e0bffd17 	ldw	r2,-12(fp)
  837d5c:	1005003a 	cmpeq	r2,r2,zero
  837d60:	1000671e 	bne	r2,zero,837f00 <tcp_slowtimo+0x234>
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
  837d64:	e03ffc15 	stw	zero,-16(fp)
  837d68:	00002d06 	br	837e20 <tcp_slowtimo+0x154>
         {
            if (tp->t_timer[i] && --tp->t_timer[i] == 0) 
  837d6c:	e0bffc17 	ldw	r2,-16(fp)
  837d70:	e0fffd17 	ldw	r3,-12(fp)
  837d74:	1085883a 	add	r2,r2,r2
  837d78:	1085883a 	add	r2,r2,r2
  837d7c:	10c5883a 	add	r2,r2,r3
  837d80:	10800304 	addi	r2,r2,12
  837d84:	10800017 	ldw	r2,0(r2)
  837d88:	1005003a 	cmpeq	r2,r2,zero
  837d8c:	1000211e 	bne	r2,zero,837e14 <tcp_slowtimo+0x148>
  837d90:	e0fffc17 	ldw	r3,-16(fp)
  837d94:	e13ffd17 	ldw	r4,-12(fp)
  837d98:	18c5883a 	add	r2,r3,r3
  837d9c:	1085883a 	add	r2,r2,r2
  837da0:	1105883a 	add	r2,r2,r4
  837da4:	10800304 	addi	r2,r2,12
  837da8:	10800017 	ldw	r2,0(r2)
  837dac:	117fffc4 	addi	r5,r2,-1
  837db0:	e13ffd17 	ldw	r4,-12(fp)
  837db4:	18c5883a 	add	r2,r3,r3
  837db8:	1085883a 	add	r2,r2,r2
  837dbc:	1105883a 	add	r2,r2,r4
  837dc0:	10800304 	addi	r2,r2,12
  837dc4:	11400015 	stw	r5,0(r2)
  837dc8:	e13ffd17 	ldw	r4,-12(fp)
  837dcc:	18c5883a 	add	r2,r3,r3
  837dd0:	1085883a 	add	r2,r2,r2
  837dd4:	1105883a 	add	r2,r2,r4
  837dd8:	10800304 	addi	r2,r2,12
  837ddc:	10800017 	ldw	r2,0(r2)
  837de0:	1004c03a 	cmpne	r2,r2,zero
  837de4:	10000b1e 	bne	r2,zero,837e14 <tcp_slowtimo+0x148>
            {
               /* call usrreq to do actual work */
               so->so_req = PRU_SLOWTIMO;
  837de8:	e0fffb17 	ldw	r3,-20(fp)
  837dec:	008004c4 	movi	r2,19
  837df0:	18800715 	stw	r2,28(r3)
               (void) tcp_usrreq(so, (struct mbuf *)0, 
  837df4:	e1bffc17 	ldw	r6,-16(fp)
  837df8:	e13ffb17 	ldw	r4,-20(fp)
  837dfc:	000b883a 	mov	r5,zero
  837e00:	08384640 	call	838464 <tcp_usrreq>
                                 LONG2MBUF((long)i));

               /* If ip disappeared on us, handle it */
               if (ipnxt->inp_prev != ip)
  837e04:	e0bffe17 	ldw	r2,-8(fp)
  837e08:	10c00117 	ldw	r3,4(r2)
  837e0c:	e0bfff17 	ldw	r2,-4(fp)
  837e10:	18803b1e 	bne	r3,r2,837f00 <tcp_slowtimo+0x234>

         tp = intotcpcb(so->so_pcb);
         if (!tp)
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
  837e14:	e0bffc17 	ldw	r2,-16(fp)
  837e18:	10800044 	addi	r2,r2,1
  837e1c:	e0bffc15 	stw	r2,-16(fp)
  837e20:	e0bffc17 	ldw	r2,-16(fp)
  837e24:	10800110 	cmplti	r2,r2,4
  837e28:	103fd01e 	bne	r2,zero,837d6c <tcp_slowtimo+0xa0>
               }
            }
         }
#endif   /* TCP_ZEROCOPY */

         tp->t_idle++;
  837e2c:	e0bffd17 	ldw	r2,-12(fp)
  837e30:	10801d17 	ldw	r2,116(r2)
  837e34:	10c00044 	addi	r3,r2,1
  837e38:	e0bffd17 	ldw	r2,-12(fp)
  837e3c:	10c01d15 	stw	r3,116(r2)
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
  837e40:	e0bffb17 	ldw	r2,-20(fp)
  837e44:	10800a04 	addi	r2,r2,40
  837e48:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
  837e4c:	e0bff917 	ldw	r2,-28(fp)
  837e50:	1080070b 	ldhu	r2,28(r2)
  837e54:	10bfffcc 	andi	r2,r2,65535
  837e58:	1080020c 	andi	r2,r2,8
  837e5c:	1005003a 	cmpeq	r2,r2,zero
  837e60:	10000d1e 	bne	r2,zero,837e98 <tcp_slowtimo+0x1cc>
      {
         select_wait = 0;
  837e64:	00802174 	movhi	r2,133
  837e68:	10832e04 	addi	r2,r2,3256
  837e6c:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
  837e70:	01002174 	movhi	r4,133
  837e74:	21032e04 	addi	r4,r4,3256
  837e78:	082653c0 	call	82653c <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
  837e7c:	e0bff917 	ldw	r2,-28(fp)
  837e80:	10c0070b 	ldhu	r3,28(r2)
  837e84:	00bffdc4 	movi	r2,-9
  837e88:	1884703a 	and	r2,r3,r2
  837e8c:	1007883a 	mov	r3,r2
  837e90:	e0bff917 	ldw	r2,-28(fp)
  837e94:	10c0070d 	sth	r3,28(r2)
      }
      sb = &so->so_snd;
  837e98:	e0bffb17 	ldw	r2,-20(fp)
  837e9c:	10801204 	addi	r2,r2,72
  837ea0:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
  837ea4:	e0bff917 	ldw	r2,-28(fp)
  837ea8:	1080070b 	ldhu	r2,28(r2)
  837eac:	10bfffcc 	andi	r2,r2,65535
  837eb0:	1080020c 	andi	r2,r2,8
  837eb4:	1005003a 	cmpeq	r2,r2,zero
  837eb8:	10000d1e 	bne	r2,zero,837ef0 <tcp_slowtimo+0x224>
      {
         select_wait = 0;         
  837ebc:	00802174 	movhi	r2,133
  837ec0:	10832e04 	addi	r2,r2,3256
  837ec4:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
  837ec8:	01002174 	movhi	r4,133
  837ecc:	21032e04 	addi	r4,r4,3256
  837ed0:	082653c0 	call	82653c <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
  837ed4:	e0bff917 	ldw	r2,-28(fp)
  837ed8:	10c0070b 	ldhu	r3,28(r2)
  837edc:	00bffdc4 	movi	r2,-9
  837ee0:	1884703a 	and	r2,r3,r2
  837ee4:	1007883a 	mov	r3,r2
  837ee8:	e0bff917 	ldw	r2,-28(fp)
  837eec:	10c0070d 	sth	r3,28(r2)
      }

      /* wake any thread with a timer going for a connection state change */     
      tcp_wakeup((char*)&so->so_timeo);
  837ef0:	e0bffb17 	ldw	r2,-20(fp)
  837ef4:	10800904 	addi	r2,r2,36
  837ef8:	1009883a 	mov	r4,r2
  837efc:	082653c0 	call	82653c <tcp_wakeup>
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
  837f00:	e0bffa17 	ldw	r2,-24(fp)
  837f04:	e0bffb15 	stw	r2,-20(fp)
  837f08:	e0bffb17 	ldw	r2,-20(fp)
  837f0c:	1004c03a 	cmpne	r2,r2,zero
  837f10:	103f7a1e 	bne	r2,zero,837cfc <tcp_slowtimo+0x30>

tpgone:
      ;
   }

   tcp_iss += (unsigned)(TCP_ISSINCR/PR_SLOWHZ);      /* increment iss */
  837f14:	00802174 	movhi	r2,133
  837f18:	10833304 	addi	r2,r2,3276
  837f1c:	10c00017 	ldw	r3,0(r2)
  837f20:	00be9fd4 	movui	r2,64127
  837f24:	1887883a 	add	r3,r3,r2
  837f28:	00802174 	movhi	r2,133
  837f2c:	10833304 	addi	r2,r2,3276
  837f30:	10c00015 	stw	r3,0(r2)

   if (tcp_iss & 0xff000000)
  837f34:	00802174 	movhi	r2,133
  837f38:	10833304 	addi	r2,r2,3276
  837f3c:	10800017 	ldw	r2,0(r2)
  837f40:	10bfc02c 	andhi	r2,r2,65280
  837f44:	1005003a 	cmpeq	r2,r2,zero
  837f48:	1000031e 	bne	r2,zero,837f58 <tcp_slowtimo+0x28c>
      tcp_iss = 0L;
  837f4c:	00802174 	movhi	r2,133
  837f50:	10833304 	addi	r2,r2,3276
  837f54:	10000015 	stw	zero,0(r2)
}
  837f58:	e037883a 	mov	sp,fp
  837f5c:	dfc00117 	ldw	ra,4(sp)
  837f60:	df000017 	ldw	fp,0(sp)
  837f64:	dec00204 	addi	sp,sp,8
  837f68:	f800283a 	ret

00837f6c <tcp_canceltimers>:
 * RETURNS: 
 */

void
tcp_canceltimers(struct tcpcb * tp)
{
  837f6c:	defffd04 	addi	sp,sp,-12
  837f70:	df000215 	stw	fp,8(sp)
  837f74:	df000204 	addi	fp,sp,8
  837f78:	e13fff15 	stw	r4,-4(fp)
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
  837f7c:	e03ffe15 	stw	zero,-8(fp)
  837f80:	00000a06 	br	837fac <tcp_canceltimers+0x40>
      tp->t_timer[i] = 0;
  837f84:	e0bffe17 	ldw	r2,-8(fp)
  837f88:	e0ffff17 	ldw	r3,-4(fp)
  837f8c:	1085883a 	add	r2,r2,r2
  837f90:	1085883a 	add	r2,r2,r2
  837f94:	10c5883a 	add	r2,r2,r3
  837f98:	10800304 	addi	r2,r2,12
  837f9c:	10000015 	stw	zero,0(r2)
void
tcp_canceltimers(struct tcpcb * tp)
{
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
  837fa0:	e0bffe17 	ldw	r2,-8(fp)
  837fa4:	10800044 	addi	r2,r2,1
  837fa8:	e0bffe15 	stw	r2,-8(fp)
  837fac:	e0bffe17 	ldw	r2,-8(fp)
  837fb0:	10800110 	cmplti	r2,r2,4
  837fb4:	103ff31e 	bne	r2,zero,837f84 <tcp_canceltimers+0x18>
      tp->t_timer[i] = 0;
}
  837fb8:	e037883a 	mov	sp,fp
  837fbc:	df000017 	ldw	fp,0(sp)
  837fc0:	dec00104 	addi	sp,sp,4
  837fc4:	f800283a 	ret

00837fc8 <tcp_timers>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
  837fc8:	defff504 	addi	sp,sp,-44
  837fcc:	dfc00a15 	stw	ra,40(sp)
  837fd0:	df000915 	stw	fp,36(sp)
  837fd4:	df000904 	addi	fp,sp,36
  837fd8:	e13ffb15 	stw	r4,-20(fp)
  837fdc:	e17ffc15 	stw	r5,-16(fp)
   int   rexmt;

   switch (timer) 
  837fe0:	e0bffc17 	ldw	r2,-16(fp)
  837fe4:	e0bffe15 	stw	r2,-8(fp)
  837fe8:	e0fffe17 	ldw	r3,-8(fp)
  837fec:	18800060 	cmpeqi	r2,r3,1
  837ff0:	1000bd1e 	bne	r2,zero,8382e8 <tcp_timers+0x320>
  837ff4:	e0fffe17 	ldw	r3,-8(fp)
  837ff8:	18800088 	cmpgei	r2,r3,2
  837ffc:	1000041e 	bne	r2,zero,838010 <tcp_timers+0x48>
  838000:	e0fffe17 	ldw	r3,-8(fp)
  838004:	1805003a 	cmpeq	r2,r3,zero
  838008:	10001b1e 	bne	r2,zero,838078 <tcp_timers+0xb0>
  83800c:	00010f06 	br	83844c <tcp_timers+0x484>
  838010:	e0fffe17 	ldw	r3,-8(fp)
  838014:	188000a0 	cmpeqi	r2,r3,2
  838018:	1000c41e 	bne	r2,zero,83832c <tcp_timers+0x364>
  83801c:	e0fffe17 	ldw	r3,-8(fp)
  838020:	188000e0 	cmpeqi	r2,r3,3
  838024:	1000011e 	bne	r2,zero,83802c <tcp_timers+0x64>
  838028:	00010806 	br	83844c <tcp_timers+0x484>
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
  83802c:	e0bffb17 	ldw	r2,-20(fp)
  838030:	10800217 	ldw	r2,8(r2)
  838034:	108002a0 	cmpeqi	r2,r2,10
  838038:	10000b1e 	bne	r2,zero,838068 <tcp_timers+0xa0>
  83803c:	e0bffb17 	ldw	r2,-20(fp)
  838040:	10c01d17 	ldw	r3,116(r2)
  838044:	d0a0bc17 	ldw	r2,-32016(gp)
  838048:	10c00716 	blt	r2,r3,838068 <tcp_timers+0xa0>
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
  83804c:	d0a04717 	ldw	r2,-32484(gp)
  838050:	10ffffcc 	andi	r3,r2,65535
  838054:	18e0001c 	xori	r3,r3,32768
  838058:	18e00004 	addi	r3,r3,-32768
  83805c:	e0bffb17 	ldw	r2,-20(fp)
  838060:	10c00615 	stw	r3,24(r2)
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
  838064:	0000f906 	br	83844c <tcp_timers+0x484>
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
      }
      else
         tp = tcp_close(tp);
  838068:	e13ffb17 	ldw	r4,-20(fp)
  83806c:	0837aa00 	call	837aa0 <tcp_close>
  838070:	e0bffb15 	stw	r2,-20(fp)
      break;
  838074:	0000f506 	br	83844c <tcp_timers+0x484>
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
  838078:	00803934 	movhi	r2,228
  83807c:	10a8de04 	addi	r2,r2,-23688
  838080:	10800b17 	ldw	r2,44(r2)
  838084:	10c00044 	addi	r3,r2,1
  838088:	00803934 	movhi	r2,228
  83808c:	10a8de04 	addi	r2,r2,-23688
  838090:	10c00b15 	stw	r3,44(r2)
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
  838094:	e0bffb17 	ldw	r2,-20(fp)
  838098:	10800717 	ldw	r2,28(r2)
  83809c:	10c00044 	addi	r3,r2,1
  8380a0:	e0bffb17 	ldw	r2,-20(fp)
  8380a4:	10c00715 	stw	r3,28(r2)
  8380a8:	e0bffb17 	ldw	r2,-20(fp)
  8380ac:	10800717 	ldw	r2,28(r2)
  8380b0:	10800350 	cmplti	r2,r2,13
  8380b4:	10000f1e 	bne	r2,zero,8380f4 <tcp_timers+0x12c>
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
  8380b8:	e0fffb17 	ldw	r3,-20(fp)
  8380bc:	00800304 	movi	r2,12
  8380c0:	18800715 	stw	r2,28(r3)
         tcpstat.tcps_timeoutdrop++;
  8380c4:	00803934 	movhi	r2,228
  8380c8:	10a90c04 	addi	r2,r2,-23504
  8380cc:	10800917 	ldw	r2,36(r2)
  8380d0:	10c00044 	addi	r3,r2,1
  8380d4:	00803934 	movhi	r2,228
  8380d8:	10a90c04 	addi	r2,r2,-23504
  8380dc:	10c00915 	stw	r3,36(r2)
         tp = tcp_drop(tp, ETIMEDOUT);
  8380e0:	e13ffb17 	ldw	r4,-20(fp)
  8380e4:	01401d04 	movi	r5,116
  8380e8:	08379f40 	call	8379f4 <tcp_drop>
  8380ec:	e0bffb15 	stw	r2,-20(fp)
         break;
  8380f0:	0000d606 	br	83844c <tcp_timers+0x484>
      }
      tcpstat.tcps_rexmttimeo++;
  8380f4:	00803934 	movhi	r2,228
  8380f8:	10a90c04 	addi	r2,r2,-23504
  8380fc:	10800a17 	ldw	r2,40(r2)
  838100:	10c00044 	addi	r3,r2,1
  838104:	00803934 	movhi	r2,228
  838108:	10a90c04 	addi	r2,r2,-23504
  83810c:	10c00a15 	stw	r3,40(r2)
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
  838110:	e0bffb17 	ldw	r2,-20(fp)
  838114:	10802017 	ldw	r2,128(r2)
  838118:	1007d0ba 	srai	r3,r2,2
  83811c:	e0bffb17 	ldw	r2,-20(fp)
  838120:	10802117 	ldw	r2,132(r2)
  838124:	1885883a 	add	r2,r3,r2
  838128:	1005d07a 	srai	r2,r2,1
  83812c:	e0bffa15 	stw	r2,-24(fp)
      rexmt *= tcp_backoff[tp->t_rxtshift];
  838130:	e0bffb17 	ldw	r2,-20(fp)
  838134:	10c00717 	ldw	r3,28(r2)
  838138:	00802174 	movhi	r2,133
  83813c:	1081a4c4 	addi	r2,r2,1683
  838140:	10c5883a 	add	r2,r2,r3
  838144:	10800003 	ldbu	r2,0(r2)
  838148:	10c03fcc 	andi	r3,r2,255
  83814c:	e0bffa17 	ldw	r2,-24(fp)
  838150:	10c5383a 	mul	r2,r2,r3
  838154:	e0bffa15 	stw	r2,-24(fp)
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
  838158:	e0bffa17 	ldw	r2,-24(fp)
  83815c:	10ffffcc 	andi	r3,r2,65535
  838160:	18e0001c 	xori	r3,r3,32768
  838164:	18e00004 	addi	r3,r3,-32768
  838168:	e0bffb17 	ldw	r2,-20(fp)
  83816c:	10c00815 	stw	r3,32(r2)
  838170:	e0bffb17 	ldw	r2,-20(fp)
  838174:	10800817 	ldw	r2,32(r2)
  838178:	10800088 	cmpgei	r2,r2,2
  83817c:	1000041e 	bne	r2,zero,838190 <tcp_timers+0x1c8>
  838180:	e0fffb17 	ldw	r3,-20(fp)
  838184:	00800084 	movi	r2,2
  838188:	18800815 	stw	r2,32(r3)
  83818c:	00000706 	br	8381ac <tcp_timers+0x1e4>
  838190:	e0bffb17 	ldw	r2,-20(fp)
  838194:	10800817 	ldw	r2,32(r2)
  838198:	10802050 	cmplti	r2,r2,129
  83819c:	1000031e 	bne	r2,zero,8381ac <tcp_timers+0x1e4>
  8381a0:	e0fffb17 	ldw	r3,-20(fp)
  8381a4:	00802004 	movi	r2,128
  8381a8:	18800815 	stw	r2,32(r3)
      tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
  8381ac:	e0bffb17 	ldw	r2,-20(fp)
  8381b0:	10c00817 	ldw	r3,32(r2)
  8381b4:	e0bffb17 	ldw	r2,-20(fp)
  8381b8:	10c00315 	stw	r3,12(r2)
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
  8381bc:	e0bffb17 	ldw	r2,-20(fp)
  8381c0:	10800717 	ldw	r2,28(r2)
  8381c4:	10800110 	cmplti	r2,r2,4
  8381c8:	1000101e 	bne	r2,zero,83820c <tcp_timers+0x244>
  8381cc:	e0bffb17 	ldw	r2,-20(fp)
  8381d0:	10800b0b 	ldhu	r2,44(r2)
  8381d4:	10bfffcc 	andi	r2,r2,65535
  8381d8:	1080400c 	andi	r2,r2,256
  8381dc:	1004c03a 	cmpne	r2,r2,zero
  8381e0:	10000a1e 	bne	r2,zero,83820c <tcp_timers+0x244>
         ((tp->t_flags & TF_TIMESTAMP) == 0))
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
  8381e4:	e0bffb17 	ldw	r2,-20(fp)
  8381e8:	10c02117 	ldw	r3,132(r2)
  8381ec:	e0bffb17 	ldw	r2,-20(fp)
  8381f0:	10802017 	ldw	r2,128(r2)
  8381f4:	1005d0ba 	srai	r2,r2,2
  8381f8:	1887883a 	add	r3,r3,r2
  8381fc:	e0bffb17 	ldw	r2,-20(fp)
  838200:	10c02115 	stw	r3,132(r2)
         tp->t_srtt = 0;
  838204:	e0bffb17 	ldw	r2,-20(fp)
  838208:	10002015 	stw	zero,128(r2)
      }
      tp->snd_nxt = tp->snd_una;
  83820c:	e0bffb17 	ldw	r2,-20(fp)
  838210:	10c00e17 	ldw	r3,56(r2)
  838214:	e0bffb17 	ldw	r2,-20(fp)
  838218:	10c00f15 	stw	r3,60(r2)
      /*
       * If timing a segment in this window, stop the timer.
       */
      tp->t_rttick = 0;
  83821c:	e0bffb17 	ldw	r2,-20(fp)
  838220:	10001e15 	stw	zero,120(r2)
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
  838224:	e0bffb17 	ldw	r2,-20(fp)
  838228:	10800d17 	ldw	r2,52(r2)
  83822c:	10800817 	ldw	r2,32(r2)
  838230:	10800417 	ldw	r2,16(r2)
  838234:	1090000c 	andi	r2,r2,16384
  838238:	1004c03a 	cmpne	r2,r2,zero
  83823c:	1000271e 	bne	r2,zero,8382dc <tcp_timers+0x314>
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
  838240:	e0bffb17 	ldw	r2,-20(fp)
  838244:	10c01417 	ldw	r3,80(r2)
  838248:	e0bffb17 	ldw	r2,-20(fp)
  83824c:	10801b17 	ldw	r2,108(r2)
  838250:	e0bffd15 	stw	r2,-12(fp)
  838254:	e0ffff15 	stw	r3,-4(fp)
  838258:	e0bffd17 	ldw	r2,-12(fp)
  83825c:	e0ffff17 	ldw	r3,-4(fp)
  838260:	10c0022e 	bgeu	r2,r3,83826c <tcp_timers+0x2a4>
  838264:	e0bffd17 	ldw	r2,-12(fp)
  838268:	e0bfff15 	stw	r2,-4(fp)
  83826c:	e0ffff17 	ldw	r3,-4(fp)
  838270:	e0fff915 	stw	r3,-28(fp)
         win = win / 2 / tp->t_maxseg;
  838274:	e0bff917 	ldw	r2,-28(fp)
  838278:	1008d07a 	srli	r4,r2,1
  83827c:	e0bffb17 	ldw	r2,-20(fp)
  838280:	10800a0b 	ldhu	r2,40(r2)
  838284:	117fffcc 	andi	r5,r2,65535
  838288:	08053b80 	call	8053b8 <__udivsi3>
  83828c:	e0bff915 	stw	r2,-28(fp)
         if (win < 2)
  838290:	e0bff917 	ldw	r2,-28(fp)
  838294:	108000a8 	cmpgeui	r2,r2,2
  838298:	1000021e 	bne	r2,zero,8382a4 <tcp_timers+0x2dc>
            win = 2;
  83829c:	00800084 	movi	r2,2
  8382a0:	e0bff915 	stw	r2,-28(fp)
         tp->snd_cwnd = tp->t_maxseg;
  8382a4:	e0bffb17 	ldw	r2,-20(fp)
  8382a8:	10800a0b 	ldhu	r2,40(r2)
  8382ac:	10ffffcc 	andi	r3,r2,65535
  8382b0:	e0bffb17 	ldw	r2,-20(fp)
  8382b4:	10c01b15 	stw	r3,108(r2)
         tp->snd_ssthresh = (u_short)win * tp->t_maxseg;
  8382b8:	e0bff917 	ldw	r2,-28(fp)
  8382bc:	10ffffcc 	andi	r3,r2,65535
  8382c0:	e0bffb17 	ldw	r2,-20(fp)
  8382c4:	10800a0b 	ldhu	r2,40(r2)
  8382c8:	10bfffcc 	andi	r2,r2,65535
  8382cc:	1885383a 	mul	r2,r3,r2
  8382d0:	1007883a 	mov	r3,r2
  8382d4:	e0bffb17 	ldw	r2,-20(fp)
  8382d8:	10c01c15 	stw	r3,112(r2)
      }
      (void) tcp_output(tp);
  8382dc:	e13ffb17 	ldw	r4,-20(fp)
  8382e0:	0835f840 	call	835f84 <tcp_output>
      break;
  8382e4:	00005906 	br	83844c <tcp_timers+0x484>
   /*
    * Persistance timer into zero window.
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
  8382e8:	00803934 	movhi	r2,228
  8382ec:	10a90c04 	addi	r2,r2,-23504
  8382f0:	10800b17 	ldw	r2,44(r2)
  8382f4:	10c00044 	addi	r3,r2,1
  8382f8:	00803934 	movhi	r2,228
  8382fc:	10a90c04 	addi	r2,r2,-23504
  838300:	10c00b15 	stw	r3,44(r2)
      tcp_setpersist(tp);
  838304:	e13ffb17 	ldw	r4,-20(fp)
  838308:	08371000 	call	837100 <tcp_setpersist>
      tp->t_force = 1;
  83830c:	e0fffb17 	ldw	r3,-20(fp)
  838310:	00800044 	movi	r2,1
  838314:	18800a85 	stb	r2,42(r3)
      (void) tcp_output(tp);
  838318:	e13ffb17 	ldw	r4,-20(fp)
  83831c:	0835f840 	call	835f84 <tcp_output>
      tp->t_force = 0;
  838320:	e0bffb17 	ldw	r2,-20(fp)
  838324:	10000a85 	stb	zero,42(r2)
      break;
  838328:	00004806 	br	83844c <tcp_timers+0x484>
   /*
    * Keep-alive timer went off; send something
    * or drop connection if idle for too long.
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
  83832c:	00803934 	movhi	r2,228
  838330:	10a90c04 	addi	r2,r2,-23504
  838334:	10800c17 	ldw	r2,48(r2)
  838338:	10c00044 	addi	r3,r2,1
  83833c:	00803934 	movhi	r2,228
  838340:	10a90c04 	addi	r2,r2,-23504
  838344:	10c00c15 	stw	r3,48(r2)
      if (tp->t_state < TCPS_ESTABLISHED)
  838348:	e0bffb17 	ldw	r2,-20(fp)
  83834c:	10800217 	ldw	r2,8(r2)
  838350:	10800110 	cmplti	r2,r2,4
  838354:	1000321e 	bne	r2,zero,838420 <tcp_timers+0x458>
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
  838358:	e0bffb17 	ldw	r2,-20(fp)
  83835c:	10800d17 	ldw	r2,52(r2)
  838360:	10800817 	ldw	r2,32(r2)
  838364:	10800417 	ldw	r2,16(r2)
  838368:	1080020c 	andi	r2,r2,8
  83836c:	1005003a 	cmpeq	r2,r2,zero
  838370:	1000241e 	bne	r2,zero,838404 <tcp_timers+0x43c>
  838374:	e0bffb17 	ldw	r2,-20(fp)
  838378:	10800217 	ldw	r2,8(r2)
  83837c:	10800188 	cmpgei	r2,r2,6
  838380:	1000201e 	bne	r2,zero,838404 <tcp_timers+0x43c>
          tp->t_state <= TCPS_CLOSE_WAIT) 
      {
         if (tp->t_idle >= tcp_keepidle + tcp_maxidle)
  838384:	e0bffb17 	ldw	r2,-20(fp)
  838388:	11001d17 	ldw	r4,116(r2)
  83838c:	d0e04617 	ldw	r3,-32488(gp)
  838390:	d0a0bc17 	ldw	r2,-32016(gp)
  838394:	1885883a 	add	r2,r3,r2
  838398:	2080210e 	bge	r4,r2,838420 <tcp_timers+0x458>
          * causes the transmitted zero-length segment
          * to lie outside the receive window;
          * by the protocol spec, this requires the
          * correspondent TCP to respond.
          */
         tcpstat.tcps_keepprobe++;
  83839c:	00803934 	movhi	r2,228
  8383a0:	10a90c04 	addi	r2,r2,-23504
  8383a4:	10800d17 	ldw	r2,52(r2)
  8383a8:	10c00044 	addi	r3,r2,1
  8383ac:	00803934 	movhi	r2,228
  8383b0:	10a90c04 	addi	r2,r2,-23504
  8383b4:	10c00d15 	stw	r3,52(r2)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
  8383b8:	e0bffb17 	ldw	r2,-20(fp)
  8383bc:	11400c17 	ldw	r5,48(r2)
  8383c0:	e0bffb17 	ldw	r2,-20(fp)
  8383c4:	10801617 	ldw	r2,88(r2)
  8383c8:	11bfffc4 	addi	r6,r2,-1
  8383cc:	e0bffb17 	ldw	r2,-20(fp)
  8383d0:	10800e17 	ldw	r2,56(r2)
  8383d4:	11ffffc4 	addi	r7,r2,-1
  8383d8:	d8000015 	stw	zero,0(sp)
  8383dc:	d8000115 	stw	zero,4(sp)
  8383e0:	e13ffb17 	ldw	r4,-20(fp)
  8383e4:	08374540 	call	837454 <tcp_respond>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
  8383e8:	d0a04717 	ldw	r2,-32484(gp)
  8383ec:	10ffffcc 	andi	r3,r2,65535
  8383f0:	18e0001c 	xori	r3,r3,32768
  8383f4:	18e00004 	addi	r3,r3,-32768
  8383f8:	e0bffb17 	ldw	r2,-20(fp)
  8383fc:	10c00515 	stw	r3,20(r2)
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
      if (tp->t_state < TCPS_ESTABLISHED)
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
  838400:	00001206 	br	83844c <tcp_timers+0x484>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
  838404:	d0a04617 	ldw	r2,-32488(gp)
  838408:	10ffffcc 	andi	r3,r2,65535
  83840c:	18e0001c 	xori	r3,r3,32768
  838410:	18e00004 	addi	r3,r3,-32768
  838414:	e0bffb17 	ldw	r2,-20(fp)
  838418:	10c00515 	stw	r3,20(r2)
      break;
  83841c:	00000b06 	br	83844c <tcp_timers+0x484>
      dropit:
      tcpstat.tcps_keepdrops++;
  838420:	00803934 	movhi	r2,228
  838424:	10a90c04 	addi	r2,r2,-23504
  838428:	10800e17 	ldw	r2,56(r2)
  83842c:	10c00044 	addi	r3,r2,1
  838430:	00803934 	movhi	r2,228
  838434:	10a90c04 	addi	r2,r2,-23504
  838438:	10c00e15 	stw	r3,56(r2)
      tp = tcp_drop (tp, ETIMEDOUT);
  83843c:	e13ffb17 	ldw	r4,-20(fp)
  838440:	01401d04 	movi	r5,116
  838444:	08379f40 	call	8379f4 <tcp_drop>
  838448:	e0bffb15 	stw	r2,-20(fp)
      break;
   }
   return tp;
  83844c:	e0bffb17 	ldw	r2,-20(fp)
}
  838450:	e037883a 	mov	sp,fp
  838454:	dfc00117 	ldw	ra,4(sp)
  838458:	df000017 	ldw	fp,0(sp)
  83845c:	dec00204 	addi	sp,sp,8
  838460:	f800283a 	ret

00838464 <tcp_usrreq>:

int
tcp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
  838464:	defff504 	addi	sp,sp,-44
  838468:	dfc00a15 	stw	ra,40(sp)
  83846c:	df000915 	stw	fp,36(sp)
  838470:	df000904 	addi	fp,sp,36
  838474:	e13ffc15 	stw	r4,-16(fp)
  838478:	e17ffd15 	stw	r5,-12(fp)
  83847c:	e1bffe15 	stw	r6,-8(fp)
   struct inpcb * inp;
   struct tcpcb * tp;
   int   error =  0;
  838480:	e03ff915 	stw	zero,-28(fp)

#ifdef DO_TCPTRACE
   int   ostate;
#endif

   req = so->so_req;    /* get request from socket struct */
  838484:	e0bffc17 	ldw	r2,-16(fp)
  838488:	10800717 	ldw	r2,28(r2)
  83848c:	e0bff815 	stw	r2,-32(fp)
   inp = sotoinpcb(so);
  838490:	e0bffc17 	ldw	r2,-16(fp)
  838494:	10800117 	ldw	r2,4(r2)
  838498:	e0bffb15 	stw	r2,-20(fp)
   /*
    * When a TCP is attached to a socket, then there will be
    * a (struct inpcb) pointed at by the socket, and this
    * structure will point at a subsidary (struct tcpcb).
    */
   if (inp == 0 && req != PRU_ATTACH) 
  83849c:	e0bffb17 	ldw	r2,-20(fp)
  8384a0:	1004c03a 	cmpne	r2,r2,zero
  8384a4:	1000061e 	bne	r2,zero,8384c0 <tcp_usrreq+0x5c>
  8384a8:	e0bff817 	ldw	r2,-32(fp)
  8384ac:	1005003a 	cmpeq	r2,r2,zero
  8384b0:	1000031e 	bne	r2,zero,8384c0 <tcp_usrreq+0x5c>
   {
      return (EINVAL);
  8384b4:	00800584 	movi	r2,22
  8384b8:	e0bfff15 	stw	r2,-4(fp)
  8384bc:	0001a406 	br	838b50 <tcp_usrreq+0x6ec>
   }

   if (inp)
  8384c0:	e0bffb17 	ldw	r2,-20(fp)
  8384c4:	1005003a 	cmpeq	r2,r2,zero
  8384c8:	1000041e 	bne	r2,zero,8384dc <tcp_usrreq+0x78>
      tp = intotcpcb(inp);
  8384cc:	e0bffb17 	ldw	r2,-20(fp)
  8384d0:	10800917 	ldw	r2,36(r2)
  8384d4:	e0bffa15 	stw	r2,-24(fp)
  8384d8:	00000906 	br	838500 <tcp_usrreq+0x9c>
   else  /* inp and tp not set, make sure this is OK: */
   { 
      if (req == PRU_ATTACH)
  8384dc:	e0bff817 	ldw	r2,-32(fp)
  8384e0:	1004c03a 	cmpne	r2,r2,zero
  8384e4:	1000021e 	bne	r2,zero,8384f0 <tcp_usrreq+0x8c>
         tp = NULL;  /* stifle compiler warnings about using unassigned tp*/
  8384e8:	e03ffa15 	stw	zero,-24(fp)
  8384ec:	00000406 	br	838500 <tcp_usrreq+0x9c>
      else
      {
         dtrap(); /* programming error? */
  8384f0:	082a7c80 	call	82a7c8 <dtrap>
         return EINVAL;
  8384f4:	00800584 	movi	r2,22
  8384f8:	e0bfff15 	stw	r2,-4(fp)
  8384fc:	00019406 	br	838b50 <tcp_usrreq+0x6ec>
      }
   }

   switch (req) 
  838500:	e0bff817 	ldw	r2,-32(fp)
  838504:	10800528 	cmpgeui	r2,r2,20
  838508:	10018c1e 	bne	r2,zero,838b3c <tcp_usrreq+0x6d8>
  83850c:	e0bff817 	ldw	r2,-32(fp)
  838510:	1085883a 	add	r2,r2,r2
  838514:	1087883a 	add	r3,r2,r2
  838518:	00802134 	movhi	r2,132
  83851c:	10a14b04 	addi	r2,r2,-31444
  838520:	1885883a 	add	r2,r3,r2
  838524:	10800017 	ldw	r2,0(r2)
  838528:	1000683a 	jmp	r2
  83852c:	0083857c 	xorhi	r2,zero,3605
  838530:	008385ec 	andhi	r2,zero,3607
  838534:	00838614 	movui	r2,3608
  838538:	0083864c 	andi	r2,zero,3609
  83853c:	0083868c 	andi	r2,zero,3610
  838540:	00838810 	cmplti	r2,zero,3616
  838544:	00838804 	movi	r2,3616
  838548:	008388bc 	xorhi	r2,zero,3618
  83854c:	008388ec 	andhi	r2,zero,3619
  838550:	008388f8 	rdprs	r2,zero,3619
  838554:	00838950 	cmplti	r2,zero,3621
  838558:	00838b3c 	xorhi	r2,zero,3628
  83855c:	00838960 	cmpeqi	r2,zero,3621
  838560:	0083896c 	andhi	r2,zero,3621
  838564:	00838a3c 	xorhi	r2,zero,3624
  838568:	00838b0c 	andi	r2,zero,3628
  83856c:	00838b1c 	xori	r2,zero,3628
  838570:	008387f8 	rdprs	r2,zero,3615
  838574:	00838b3c 	xorhi	r2,zero,3628
  838578:	00838b2c 	andhi	r2,zero,3628
   /*
    * TCP attaches to socket via PRU_ATTACH, reserving space,
    * and an internet control block.
    */
   case PRU_ATTACH:
      if (inp) 
  83857c:	e0bffb17 	ldw	r2,-20(fp)
  838580:	1005003a 	cmpeq	r2,r2,zero
  838584:	1000031e 	bne	r2,zero,838594 <tcp_usrreq+0x130>
      {
         error = EISCONN;
  838588:	00801fc4 	movi	r2,127
  83858c:	e0bff915 	stw	r2,-28(fp)
         break;
  838590:	00016d06 	br	838b48 <tcp_usrreq+0x6e4>
      }
      error = tcp_attach(so);
  838594:	e13ffc17 	ldw	r4,-16(fp)
  838598:	0838b680 	call	838b68 <tcp_attach>
  83859c:	e0bff915 	stw	r2,-28(fp)
      if (error)
  8385a0:	e0bff917 	ldw	r2,-28(fp)
  8385a4:	1004c03a 	cmpne	r2,r2,zero
  8385a8:	1001671e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         break;
      if ((so->so_options & SO_LINGER) && so->so_linger == 0)
  8385ac:	e0bffc17 	ldw	r2,-16(fp)
  8385b0:	10800417 	ldw	r2,16(r2)
  8385b4:	1080200c 	andi	r2,r2,128
  8385b8:	1005003a 	cmpeq	r2,r2,zero
  8385bc:	1001621e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
  8385c0:	e0bffc17 	ldw	r2,-16(fp)
  8385c4:	1080080b 	ldhu	r2,32(r2)
  8385c8:	10bfffcc 	andi	r2,r2,65535
  8385cc:	10a0001c 	xori	r2,r2,32768
  8385d0:	10a00004 	addi	r2,r2,-32768
  8385d4:	1004c03a 	cmpne	r2,r2,zero
  8385d8:	10015b1e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         so->so_linger = TCP_LINGERTIME;
  8385dc:	e0fffc17 	ldw	r3,-16(fp)
  8385e0:	00801e04 	movi	r2,120
  8385e4:	1880080d 	sth	r2,32(r3)
#ifdef   DO_TCPTRACE
      SETTP(tp, sototcpcb(so));
#endif
      break;
  8385e8:	00015706 	br	838b48 <tcp_usrreq+0x6e4>
    * do this directly: have to initiate a PRU_DISCONNECT,
    * which may finish later; embryonic TCB's can just
    * be discarded here.
    */
   case PRU_DETACH:
      if (tp->t_state > TCPS_LISTEN)
  8385ec:	e0bffa17 	ldw	r2,-24(fp)
  8385f0:	10800217 	ldw	r2,8(r2)
  8385f4:	10800090 	cmplti	r2,r2,2
  8385f8:	1000031e 	bne	r2,zero,838608 <tcp_usrreq+0x1a4>
         SETTP(tp, tcp_disconnect(tp));
  8385fc:	e13ffa17 	ldw	r4,-24(fp)
  838600:	0838c9c0 	call	838c9c <tcp_disconnect>
  838604:	00015006 	br	838b48 <tcp_usrreq+0x6e4>
      else
         SETTP(tp, tcp_close(tp));
  838608:	e13ffa17 	ldw	r4,-24(fp)
  83860c:	0837aa00 	call	837aa0 <tcp_close>
      break;
  838610:	00014d06 	br	838b48 <tcp_usrreq+0x6e4>
      /* bind is quite different for IPv4 and v6, so we use two 
       * seperate pcbbind routines. so_domain was checked for 
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
  838614:	e0bffb17 	ldw	r2,-20(fp)
  838618:	10800817 	ldw	r2,32(r2)
  83861c:	10800517 	ldw	r2,20(r2)
  838620:	10800098 	cmpnei	r2,r2,2
  838624:	1000051e 	bne	r2,zero,83863c <tcp_usrreq+0x1d8>
      {
         error = in_pcbbind(inp, nam);
  838628:	e13ffb17 	ldw	r4,-20(fp)
  83862c:	e17ffe17 	ldw	r5,-8(fp)
  838630:	0846be40 	call	846be4 <in_pcbbind>
  838634:	e0bff915 	stw	r2,-28(fp)
         break;
  838638:	00014306 	br	838b48 <tcp_usrreq+0x6e4>
      {
         error = ip6_pcbbind(inp, nam);
         break;
      }
#endif /* IP_V6 */
      dtrap();    /* not v4 or v6? */
  83863c:	082a7c80 	call	82a7c8 <dtrap>
      error = EINVAL;
  838640:	00800584 	movi	r2,22
  838644:	e0bff915 	stw	r2,-28(fp)
      break;
  838648:	00013f06 	br	838b48 <tcp_usrreq+0x6e4>
   /*
    * Prepare to accept connections.
    */
   case PRU_LISTEN:
      if (inp->inp_lport == 0)
  83864c:	e0bffb17 	ldw	r2,-20(fp)
  838650:	1080078b 	ldhu	r2,30(r2)
  838654:	10bfffcc 	andi	r2,r2,65535
  838658:	1004c03a 	cmpne	r2,r2,zero
  83865c:	1000041e 	bne	r2,zero,838670 <tcp_usrreq+0x20c>
         error = in_pcbbind(inp, (struct mbuf *)0);
  838660:	e13ffb17 	ldw	r4,-20(fp)
  838664:	000b883a 	mov	r5,zero
  838668:	0846be40 	call	846be4 <in_pcbbind>
  83866c:	e0bff915 	stw	r2,-28(fp)
      if (error == 0)
  838670:	e0bff917 	ldw	r2,-28(fp)
  838674:	1004c03a 	cmpne	r2,r2,zero
  838678:	1001331e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         tp->t_state = TCPS_LISTEN;
  83867c:	e0fffa17 	ldw	r3,-24(fp)
  838680:	00800044 	movi	r2,1
  838684:	18800215 	stw	r2,8(r3)
      break;
  838688:	00012f06 	br	838b48 <tcp_usrreq+0x6e4>
    * Enter SYN_SENT state, and mark socket as connecting.
    * Start keep-alive timer, and seed output sequence space.
    * Send initial segment on connection.
    */
   case PRU_CONNECT:
      if (inp->inp_lport == 0) 
  83868c:	e0bffb17 	ldw	r2,-20(fp)
  838690:	1080078b 	ldhu	r2,30(r2)
  838694:	10bfffcc 	andi	r2,r2,65535
  838698:	1004c03a 	cmpne	r2,r2,zero
  83869c:	1000071e 	bne	r2,zero,8386bc <tcp_usrreq+0x258>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbbind(inp, (struct mbuf *)0);
  8386a0:	e13ffb17 	ldw	r4,-20(fp)
  8386a4:	000b883a 	mov	r5,zero
  8386a8:	0846be40 	call	846be4 <in_pcbbind>
  8386ac:	e0bff915 	stw	r2,-28(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbbind(inp, (struct mbuf *)0);
#endif   /* end v6 only */

         if (error)
  8386b0:	e0bff917 	ldw	r2,-28(fp)
  8386b4:	1004c03a 	cmpne	r2,r2,zero
  8386b8:	1001231e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
            break;
      }

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbconnect(inp, nam);
  8386bc:	e13ffb17 	ldw	r4,-20(fp)
  8386c0:	e17ffe17 	ldw	r5,-8(fp)
  8386c4:	0846e380 	call	846e38 <in_pcbconnect>
  8386c8:	e0bff915 	stw	r2,-28(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbconnect(inp, nam);
#endif   /* end v6 only */

      if (error)
  8386cc:	e0bff917 	ldw	r2,-28(fp)
  8386d0:	1004c03a 	cmpne	r2,r2,zero
  8386d4:	10011c1e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         break;
      tp->t_template = tcp_template(tp);
  8386d8:	e13ffa17 	ldw	r4,-24(fp)
  8386dc:	083733c0 	call	83733c <tcp_template>
  8386e0:	1007883a 	mov	r3,r2
  8386e4:	e0bffa17 	ldw	r2,-24(fp)
  8386e8:	10c00c15 	stw	r3,48(r2)
      if (tp->t_template == 0) 
  8386ec:	e0bffa17 	ldw	r2,-24(fp)
  8386f0:	10800c17 	ldw	r2,48(r2)
  8386f4:	1004c03a 	cmpne	r2,r2,zero
  8386f8:	1000051e 	bne	r2,zero,838710 <tcp_usrreq+0x2ac>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
         in_pcbdisconnect(inp);
  8386fc:	e13ffb17 	ldw	r4,-20(fp)
  838700:	08470480 	call	847048 <in_pcbdisconnect>
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
         ip6_pcbdisconnect(inp);
#endif   /* end v6 only */

         error = ENOBUFS;
  838704:	00801a44 	movi	r2,105
  838708:	e0bff915 	stw	r2,-28(fp)
         break;
  83870c:	00010e06 	br	838b48 <tcp_usrreq+0x6e4>
      }

      soisconnecting(so);
  838710:	e13ffc17 	ldw	r4,-16(fp)
  838714:	08313700 	call	831370 <soisconnecting>
      tcpstat.tcps_connattempt++;
  838718:	00803934 	movhi	r2,228
  83871c:	10a90c04 	addi	r2,r2,-23504
  838720:	10800017 	ldw	r2,0(r2)
  838724:	10c00044 	addi	r3,r2,1
  838728:	00803934 	movhi	r2,228
  83872c:	10a90c04 	addi	r2,r2,-23504
  838730:	10c00015 	stw	r3,0(r2)
      tp->t_state = TCPS_SYN_SENT;
  838734:	e0fffa17 	ldw	r3,-24(fp)
  838738:	00800084 	movi	r2,2
  83873c:	18800215 	stw	r2,8(r3)
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
  838740:	e0fffa17 	ldw	r3,-24(fp)
  838744:	00802584 	movi	r2,150
  838748:	18800515 	stw	r2,20(r3)
      tp->iss = tcp_iss; 
  83874c:	00802174 	movhi	r2,133
  838750:	10833304 	addi	r2,r2,3276
  838754:	10c00017 	ldw	r3,0(r2)
  838758:	e0bffa17 	ldw	r2,-24(fp)
  83875c:	10c01315 	stw	r3,76(r2)
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
  838760:	00802174 	movhi	r2,133
  838764:	10833304 	addi	r2,r2,3276
  838768:	10c00017 	ldw	r3,0(r2)
  83876c:	00be9fd4 	movui	r2,64127
  838770:	1887883a 	add	r3,r3,r2
  838774:	00802174 	movhi	r2,133
  838778:	10833304 	addi	r2,r2,3276
  83877c:	10c00015 	stw	r3,0(r2)
      tcp_sendseqinit(tp);
  838780:	e0bffa17 	ldw	r2,-24(fp)
  838784:	10c01317 	ldw	r3,76(r2)
  838788:	e0bffa17 	ldw	r2,-24(fp)
  83878c:	10c01015 	stw	r3,64(r2)
  838790:	e0bffa17 	ldw	r2,-24(fp)
  838794:	10c01017 	ldw	r3,64(r2)
  838798:	e0bffa17 	ldw	r2,-24(fp)
  83879c:	10c01a15 	stw	r3,104(r2)
  8387a0:	e0bffa17 	ldw	r2,-24(fp)
  8387a4:	10c01a17 	ldw	r3,104(r2)
  8387a8:	e0bffa17 	ldw	r2,-24(fp)
  8387ac:	10c00f15 	stw	r3,60(r2)
  8387b0:	e0bffa17 	ldw	r2,-24(fp)
  8387b4:	10c00f17 	ldw	r3,60(r2)
  8387b8:	e0bffa17 	ldw	r2,-24(fp)
  8387bc:	10c00e15 	stw	r3,56(r2)
      error = tcp_output(tp);
  8387c0:	e13ffa17 	ldw	r4,-24(fp)
  8387c4:	0835f840 	call	835f84 <tcp_output>
  8387c8:	e0bff915 	stw	r2,-28(fp)
      if (!error)
  8387cc:	e0bff917 	ldw	r2,-28(fp)
  8387d0:	1004c03a 	cmpne	r2,r2,zero
  8387d4:	1000dc1e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         TCP_MIB_INC(tcpActiveOpens);     /* keep MIB stats */
  8387d8:	00803934 	movhi	r2,228
  8387dc:	10a8de04 	addi	r2,r2,-23688
  8387e0:	10800417 	ldw	r2,16(r2)
  8387e4:	10c00044 	addi	r3,r2,1
  8387e8:	00803934 	movhi	r2,228
  8387ec:	10a8de04 	addi	r2,r2,-23688
  8387f0:	10c00415 	stw	r3,16(r2)
      break;
  8387f4:	0000d406 	br	838b48 <tcp_usrreq+0x6e4>

   /*
    * Create a TCP connection between two sockets.
    */
   case PRU_CONNECT2:
      error = EOPNOTSUPP;
  8387f8:	008017c4 	movi	r2,95
  8387fc:	e0bff915 	stw	r2,-28(fp)
      break;
  838800:	0000d106 	br	838b48 <tcp_usrreq+0x6e4>
    * when peer sends FIN and acks ours.
    *
    * SHOULD IMPLEMENT LATER PRU_CONNECT VIA REALLOC TCPCB.
    */
   case PRU_DISCONNECT:
      SETTP(tp, tcp_disconnect(tp));
  838804:	e13ffa17 	ldw	r4,-24(fp)
  838808:	0838c9c0 	call	838c9c <tcp_disconnect>
      break;
  83880c:	0000ce06 	br	838b48 <tcp_usrreq+0x6e4>
    * done at higher levels; just return the address
    * of the peer, storing through addr.
    */
   case PRU_ACCEPT: 
   {
         struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
  838810:	e0bffe17 	ldw	r2,-8(fp)
  838814:	10800317 	ldw	r2,12(r2)
  838818:	e0bff715 	stw	r2,-36(fp)
            IP6CPY(&sin6->sin6_addr, &inp->ip6_faddr);
         }
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
  83881c:	e0bffc17 	ldw	r2,-16(fp)
  838820:	10800517 	ldw	r2,20(r2)
  838824:	10800098 	cmpnei	r2,r2,2
  838828:	10000e1e 	bne	r2,zero,838864 <tcp_usrreq+0x400>
         {
            nam->m_len = sizeof (struct sockaddr_in);
  83882c:	e0fffe17 	ldw	r3,-8(fp)
  838830:	00800404 	movi	r2,16
  838834:	18800215 	stw	r2,8(r3)
            sin->sin_family = AF_INET;
  838838:	e0fff717 	ldw	r3,-36(fp)
  83883c:	00800084 	movi	r2,2
  838840:	1880000d 	sth	r2,0(r3)
            sin->sin_port = inp->inp_fport;
  838844:	e0bffb17 	ldw	r2,-20(fp)
  838848:	10c0070b 	ldhu	r3,28(r2)
  83884c:	e0bff717 	ldw	r2,-36(fp)
  838850:	10c0008d 	sth	r3,2(r2)
            sin->sin_addr = inp->inp_faddr;
  838854:	e0bffb17 	ldw	r2,-20(fp)
  838858:	10c00317 	ldw	r3,12(r2)
  83885c:	e0bff717 	ldw	r2,-36(fp)
  838860:	10c00115 	stw	r3,4(r2)
         }
#endif
         if ( !(so->so_domain == AF_INET) &&
  838864:	e0bffc17 	ldw	r2,-16(fp)
  838868:	10800517 	ldw	r2,20(r2)
  83886c:	108000a0 	cmpeqi	r2,r2,2
  838870:	10000a1e 	bne	r2,zero,83889c <tcp_usrreq+0x438>
  838874:	e0bffc17 	ldw	r2,-16(fp)
  838878:	10800517 	ldw	r2,20(r2)
  83887c:	108000e0 	cmpeqi	r2,r2,3
  838880:	1000061e 	bne	r2,zero,83889c <tcp_usrreq+0x438>
              !(so->so_domain == AF_INET6)
             )
         {
            dprintf("*** PRU_ACCEPT bad domain = %d\n", so->so_domain);
  838884:	e0bffc17 	ldw	r2,-16(fp)
  838888:	11400517 	ldw	r5,20(r2)
  83888c:	01002174 	movhi	r4,133
  838890:	21371e04 	addi	r4,r4,-9096
  838894:	08076480 	call	807648 <printf>
            dtrap();
  838898:	082a7c80 	call	82a7c8 <dtrap>
         } 
         TCP_MIB_INC(tcpPassiveOpens);    /* keep MIB stats */
  83889c:	00803934 	movhi	r2,228
  8388a0:	10a8de04 	addi	r2,r2,-23688
  8388a4:	10800517 	ldw	r2,20(r2)
  8388a8:	10c00044 	addi	r3,r2,1
  8388ac:	00803934 	movhi	r2,228
  8388b0:	10a8de04 	addi	r2,r2,-23688
  8388b4:	10c00515 	stw	r3,20(r2)
         break;
  8388b8:	0000a306 	br	838b48 <tcp_usrreq+0x6e4>

   /*
    * Mark the connection as being incapable of further output.
    */
   case PRU_SHUTDOWN:
      socantsendmore(so);
  8388bc:	e13ffc17 	ldw	r4,-16(fp)
  8388c0:	0831a080 	call	831a08 <socantsendmore>
      tp = tcp_usrclosed(tp);
  8388c4:	e13ffa17 	ldw	r4,-24(fp)
  8388c8:	0838d700 	call	838d70 <tcp_usrclosed>
  8388cc:	e0bffa15 	stw	r2,-24(fp)
      if (tp)
  8388d0:	e0bffa17 	ldw	r2,-24(fp)
  8388d4:	1005003a 	cmpeq	r2,r2,zero
  8388d8:	10009b1e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         error = tcp_output(tp);
  8388dc:	e13ffa17 	ldw	r4,-24(fp)
  8388e0:	0835f840 	call	835f84 <tcp_output>
  8388e4:	e0bff915 	stw	r2,-28(fp)
      break;
  8388e8:	00009706 	br	838b48 <tcp_usrreq+0x6e4>

   /*
    * After a receive, possibly send window update to peer.
    */
   case PRU_RCVD:
      (void) tcp_output(tp);
  8388ec:	e13ffa17 	ldw	r4,-24(fp)
  8388f0:	0835f840 	call	835f84 <tcp_output>
      break;
  8388f4:	00009406 	br	838b48 <tcp_usrreq+0x6e4>
   /*
    * Do a send by putting data in output queue and updating urgent
    * marker if URG set.  Possibly send more data.
    */
   case PRU_SEND:
      if (so->so_pcb == NULL)
  8388f8:	e0bffc17 	ldw	r2,-16(fp)
  8388fc:	10800117 	ldw	r2,4(r2)
  838900:	1004c03a 	cmpne	r2,r2,zero
  838904:	1000031e 	bne	r2,zero,838914 <tcp_usrreq+0x4b0>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
  838908:	00800804 	movi	r2,32
  83890c:	e0bff915 	stw	r2,-28(fp)
         break;
  838910:	00008d06 	br	838b48 <tcp_usrreq+0x6e4>
      }
      sbappend(&so->so_snd, m);
  838914:	e0bffc17 	ldw	r2,-16(fp)
  838918:	11001204 	addi	r4,r2,72
  83891c:	e17ffd17 	ldw	r5,-12(fp)
  838920:	0831d0c0 	call	831d0c <sbappend>
      error = tcp_output(tp);
  838924:	e13ffa17 	ldw	r4,-24(fp)
  838928:	0835f840 	call	835f84 <tcp_output>
  83892c:	e0bff915 	stw	r2,-28(fp)
      if (error == ENOBUFS)
  838930:	e0bff917 	ldw	r2,-28(fp)
  838934:	10801a58 	cmpnei	r2,r2,105
  838938:	1000831e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
  83893c:	e0bffc17 	ldw	r2,-16(fp)
  838940:	11001204 	addi	r4,r2,72
  838944:	e17ffd17 	ldw	r5,-12(fp)
  838948:	08324e40 	call	8324e4 <sbdropend>
      break;
  83894c:	00007e06 	br	838b48 <tcp_usrreq+0x6e4>

   /*
    * Abort the TCP.
    */
   case PRU_ABORT:
      SETTP(tp, tcp_drop(tp, ECONNABORTED));
  838950:	e13ffa17 	ldw	r4,-24(fp)
  838954:	01401c44 	movi	r5,113
  838958:	08379f40 	call	8379f4 <tcp_drop>
      break;
  83895c:	00007a06 	br	838b48 <tcp_usrreq+0x6e4>

   case PRU_SENSE:
      /*      ((struct stat *) m)->st_blksize = so->so_snd.sb_hiwat; */
      dtrap();    /* does this ever happen? */
  838960:	082a7c80 	call	82a7c8 <dtrap>
      return (0);
  838964:	e03fff15 	stw	zero,-4(fp)
  838968:	00007906 	br	838b50 <tcp_usrreq+0x6ec>

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
  83896c:	e0bffc17 	ldw	r2,-16(fp)
  838970:	10801a17 	ldw	r2,104(r2)
  838974:	1004c03a 	cmpne	r2,r2,zero
  838978:	1000061e 	bne	r2,zero,838994 <tcp_usrreq+0x530>
  83897c:	e0bffc17 	ldw	r2,-16(fp)
  838980:	1080088b 	ldhu	r2,34(r2)
  838984:	10bfffcc 	andi	r2,r2,65535
  838988:	1080100c 	andi	r2,r2,64
  83898c:	1005003a 	cmpeq	r2,r2,zero
  838990:	10000b1e 	bne	r2,zero,8389c0 <tcp_usrreq+0x55c>
  838994:	e0bffc17 	ldw	r2,-16(fp)
  838998:	10800417 	ldw	r2,16(r2)
  83899c:	1080400c 	andi	r2,r2,256
  8389a0:	1004c03a 	cmpne	r2,r2,zero
  8389a4:	1000061e 	bne	r2,zero,8389c0 <tcp_usrreq+0x55c>
  8389a8:	e0bffa17 	ldw	r2,-24(fp)
  8389ac:	10802403 	ldbu	r2,144(r2)
  8389b0:	10803fcc 	andi	r2,r2,255
  8389b4:	1080008c 	andi	r2,r2,2
  8389b8:	1005003a 	cmpeq	r2,r2,zero
  8389bc:	1000031e 	bne	r2,zero,8389cc <tcp_usrreq+0x568>
#ifdef SO_OOBINLINE
       so->so_options & SO_OOBINLINE ||
#endif
       tp->t_oobflags & TCPOOB_HADDATA) 
       {
         error = EINVAL;
  8389c0:	00800584 	movi	r2,22
  8389c4:	e0bff915 	stw	r2,-28(fp)
         break;
  8389c8:	00005f06 	br	838b48 <tcp_usrreq+0x6e4>
      }
      if ((tp->t_oobflags & TCPOOB_HAVEDATA) == 0) 
  8389cc:	e0bffa17 	ldw	r2,-24(fp)
  8389d0:	10802403 	ldbu	r2,144(r2)
  8389d4:	10803fcc 	andi	r2,r2,255
  8389d8:	1080004c 	andi	r2,r2,1
  8389dc:	1004c03a 	cmpne	r2,r2,zero
  8389e0:	1000031e 	bne	r2,zero,8389f0 <tcp_usrreq+0x58c>
      {
         error = EWOULDBLOCK;
  8389e4:	008002c4 	movi	r2,11
  8389e8:	e0bff915 	stw	r2,-28(fp)
         break;
  8389ec:	00005606 	br	838b48 <tcp_usrreq+0x6e4>
      }
      m->m_len = 1;
  8389f0:	e0fffd17 	ldw	r3,-12(fp)
  8389f4:	00800044 	movi	r2,1
  8389f8:	18800215 	stw	r2,8(r3)
      *mtod(m, char *) = tp->t_iobc;
  8389fc:	e0bffd17 	ldw	r2,-12(fp)
  838a00:	10c00317 	ldw	r3,12(r2)
  838a04:	e0bffa17 	ldw	r2,-24(fp)
  838a08:	10802443 	ldbu	r2,145(r2)
  838a0c:	18800005 	stb	r2,0(r3)
      if ((MBUF2LONG(nam) & MSG_PEEK) == 0)
  838a10:	e0bffe17 	ldw	r2,-8(fp)
  838a14:	1080008c 	andi	r2,r2,2
  838a18:	1004c03a 	cmpne	r2,r2,zero
  838a1c:	10004a1e 	bne	r2,zero,838b48 <tcp_usrreq+0x6e4>
         tp->t_oobflags ^= (TCPOOB_HAVEDATA | TCPOOB_HADDATA);
  838a20:	e0bffa17 	ldw	r2,-24(fp)
  838a24:	10802403 	ldbu	r2,144(r2)
  838a28:	108000dc 	xori	r2,r2,3
  838a2c:	1007883a 	mov	r3,r2
  838a30:	e0bffa17 	ldw	r2,-24(fp)
  838a34:	10c02405 	stb	r3,144(r2)
      break;
  838a38:	00004306 	br	838b48 <tcp_usrreq+0x6e4>

   case PRU_SENDOOB:
      if (so->so_pcb == NULL)
  838a3c:	e0bffc17 	ldw	r2,-16(fp)
  838a40:	10800117 	ldw	r2,4(r2)
  838a44:	1004c03a 	cmpne	r2,r2,zero
  838a48:	1000031e 	bne	r2,zero,838a58 <tcp_usrreq+0x5f4>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
  838a4c:	00800804 	movi	r2,32
  838a50:	e0bff915 	stw	r2,-28(fp)
         break;
  838a54:	00003c06 	br	838b48 <tcp_usrreq+0x6e4>
      }
      if (sbspace(&so->so_snd) == 0) 
  838a58:	e0bffc17 	ldw	r2,-16(fp)
  838a5c:	10801317 	ldw	r2,76(r2)
  838a60:	1007883a 	mov	r3,r2
  838a64:	e0bffc17 	ldw	r2,-16(fp)
  838a68:	10801217 	ldw	r2,72(r2)
  838a6c:	1885c83a 	sub	r2,r3,r2
  838a70:	1004803a 	cmplt	r2,r2,zero
  838a74:	1000051e 	bne	r2,zero,838a8c <tcp_usrreq+0x628>
  838a78:	e0bffc17 	ldw	r2,-16(fp)
  838a7c:	10c01317 	ldw	r3,76(r2)
  838a80:	e0bffc17 	ldw	r2,-16(fp)
  838a84:	10801217 	ldw	r2,72(r2)
  838a88:	1880051e 	bne	r3,r2,838aa0 <tcp_usrreq+0x63c>
      {
         m_freem(m);
  838a8c:	e13ffd17 	ldw	r4,-12(fp)
  838a90:	082b8a40 	call	82b8a4 <m_freem>
         error = ENOBUFS;
  838a94:	00801a44 	movi	r2,105
  838a98:	e0bff915 	stw	r2,-28(fp)
         break;
  838a9c:	00002a06 	br	838b48 <tcp_usrreq+0x6e4>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section.
       * Otherwise, snd_up should be one lower.
       */
      sbappend(&so->so_snd, m);
  838aa0:	e0bffc17 	ldw	r2,-16(fp)
  838aa4:	11001204 	addi	r4,r2,72
  838aa8:	e17ffd17 	ldw	r5,-12(fp)
  838aac:	0831d0c0 	call	831d0c <sbappend>
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
  838ab0:	e0bffa17 	ldw	r2,-24(fp)
  838ab4:	10c00e17 	ldw	r3,56(r2)
  838ab8:	e0bffc17 	ldw	r2,-16(fp)
  838abc:	10801217 	ldw	r2,72(r2)
  838ac0:	1887883a 	add	r3,r3,r2
  838ac4:	e0bffa17 	ldw	r2,-24(fp)
  838ac8:	10c01015 	stw	r3,64(r2)
      tp->t_force = 1;
  838acc:	e0fffa17 	ldw	r3,-24(fp)
  838ad0:	00800044 	movi	r2,1
  838ad4:	18800a85 	stb	r2,42(r3)
      error = tcp_output(tp);
  838ad8:	e13ffa17 	ldw	r4,-24(fp)
  838adc:	0835f840 	call	835f84 <tcp_output>
  838ae0:	e0bff915 	stw	r2,-28(fp)
      if (error == ENOBUFS)
  838ae4:	e0bff917 	ldw	r2,-28(fp)
  838ae8:	10801a58 	cmpnei	r2,r2,105
  838aec:	1000041e 	bne	r2,zero,838b00 <tcp_usrreq+0x69c>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
  838af0:	e0bffc17 	ldw	r2,-16(fp)
  838af4:	11001204 	addi	r4,r2,72
  838af8:	e17ffd17 	ldw	r5,-12(fp)
  838afc:	08324e40 	call	8324e4 <sbdropend>
      tp->t_force = 0;
  838b00:	e0bffa17 	ldw	r2,-24(fp)
  838b04:	10000a85 	stb	zero,42(r2)
      break;
  838b08:	00000f06 	br	838b48 <tcp_usrreq+0x6e4>
   case PRU_SOCKADDR:

   /* sockaddr and peeraddr have to switch based on IP type */
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setsockaddr(inp, nam);
  838b0c:	e13ffb17 	ldw	r4,-20(fp)
  838b10:	e17ffe17 	ldw	r5,-8(fp)
  838b14:	08470a80 	call	8470a8 <in_setsockaddr>
         in_setsockaddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setsockaddr(inp, nam);
#endif
      break;         
  838b18:	00000b06 	br	838b48 <tcp_usrreq+0x6e4>

   case PRU_PEERADDR:
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setpeeraddr(inp, nam);
  838b1c:	e13ffb17 	ldw	r4,-20(fp)
  838b20:	e17ffe17 	ldw	r5,-8(fp)
  838b24:	08471240 	call	847124 <in_setpeeraddr>
         in_setpeeraddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setpeeraddr(inp, nam);
#endif
      break;
  838b28:	00000706 	br	838b48 <tcp_usrreq+0x6e4>

   case PRU_SLOWTIMO:
      SETTP(tp, tcp_timers(tp, (int)MBUF2LONG(nam)));
  838b2c:	e17ffe17 	ldw	r5,-8(fp)
  838b30:	e13ffa17 	ldw	r4,-24(fp)
  838b34:	0837fc80 	call	837fc8 <tcp_timers>
#ifdef DO_TCPTRACE
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;
  838b38:	00000306 	br	838b48 <tcp_usrreq+0x6e4>

      default:
      panic("tcp_usrreq");
  838b3c:	01002174 	movhi	r4,133
  838b40:	21372604 	addi	r4,r4,-9064
  838b44:	0825a2c0 	call	825a2c <panic>
#ifdef DO_TCPTRACE
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
  838b48:	e0bff917 	ldw	r2,-28(fp)
  838b4c:	e0bfff15 	stw	r2,-4(fp)
  838b50:	e0bfff17 	ldw	r2,-4(fp)
}
  838b54:	e037883a 	mov	sp,fp
  838b58:	dfc00117 	ldw	ra,4(sp)
  838b5c:	df000017 	ldw	fp,0(sp)
  838b60:	dec00204 	addi	sp,sp,8
  838b64:	f800283a 	ret

00838b68 <tcp_attach>:
 * RETURNS: 0 if OK, or nonzero error code.
 */

int
tcp_attach(struct socket * so)
{
  838b68:	defff804 	addi	sp,sp,-32
  838b6c:	dfc00715 	stw	ra,28(sp)
  838b70:	df000615 	stw	fp,24(sp)
  838b74:	df000604 	addi	fp,sp,24
  838b78:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp;
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
  838b7c:	e0bffe17 	ldw	r2,-8(fp)
  838b80:	10801317 	ldw	r2,76(r2)
  838b84:	1005003a 	cmpeq	r2,r2,zero
  838b88:	1000041e 	bne	r2,zero,838b9c <tcp_attach+0x34>
  838b8c:	e0bffe17 	ldw	r2,-8(fp)
  838b90:	10800b17 	ldw	r2,44(r2)
  838b94:	1004c03a 	cmpne	r2,r2,zero
  838b98:	10000b1e 	bne	r2,zero,838bc8 <tcp_attach+0x60>
   {
      error = soreserve(so, tcp_sendspace, tcp_recvspace);
  838b9c:	d1604817 	ldw	r5,-32480(gp)
  838ba0:	d1a04917 	ldw	r6,-32476(gp)
  838ba4:	e13ffe17 	ldw	r4,-8(fp)
  838ba8:	0831be40 	call	831be4 <soreserve>
  838bac:	e0bffb15 	stw	r2,-20(fp)
      if (error)
  838bb0:	e0bffb17 	ldw	r2,-20(fp)
  838bb4:	1005003a 	cmpeq	r2,r2,zero
  838bb8:	1000031e 	bne	r2,zero,838bc8 <tcp_attach+0x60>
         return (error);
  838bbc:	e0bffb17 	ldw	r2,-20(fp)
  838bc0:	e0bfff15 	stw	r2,-4(fp)
  838bc4:	00002f06 	br	838c84 <tcp_attach+0x11c>
   }
   error = in_pcballoc(so, &tcb);
  838bc8:	e13ffe17 	ldw	r4,-8(fp)
  838bcc:	01403934 	movhi	r5,228
  838bd0:	29690104 	addi	r5,r5,-23548
  838bd4:	0846afc0 	call	846afc <in_pcballoc>
  838bd8:	e0bffb15 	stw	r2,-20(fp)
   if (error)
  838bdc:	e0bffb17 	ldw	r2,-20(fp)
  838be0:	1005003a 	cmpeq	r2,r2,zero
  838be4:	1000031e 	bne	r2,zero,838bf4 <tcp_attach+0x8c>
      return (error);
  838be8:	e0bffb17 	ldw	r2,-20(fp)
  838bec:	e0bfff15 	stw	r2,-4(fp)
  838bf0:	00002406 	br	838c84 <tcp_attach+0x11c>
   inp = sotoinpcb(so);
  838bf4:	e0bffe17 	ldw	r2,-8(fp)
  838bf8:	10800117 	ldw	r2,4(r2)
  838bfc:	e0bffc15 	stw	r2,-16(fp)
   tp = tcp_newtcpcb(inp);
  838c00:	e13ffc17 	ldw	r4,-16(fp)
  838c04:	08378dc0 	call	8378dc <tcp_newtcpcb>
  838c08:	e0bffd15 	stw	r2,-12(fp)
   if (tp == 0) 
  838c0c:	e0bffd17 	ldw	r2,-12(fp)
  838c10:	1004c03a 	cmpne	r2,r2,zero
  838c14:	1000181e 	bne	r2,zero,838c78 <tcp_attach+0x110>
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */
  838c18:	e0bffe17 	ldw	r2,-8(fp)
  838c1c:	1080088b 	ldhu	r2,34(r2)
  838c20:	10bfffcc 	andi	r2,r2,65535
  838c24:	1080004c 	andi	r2,r2,1
  838c28:	e0bffa15 	stw	r2,-24(fp)

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
  838c2c:	e0bffe17 	ldw	r2,-8(fp)
  838c30:	10c0088b 	ldhu	r3,34(r2)
  838c34:	00bfff84 	movi	r2,-2
  838c38:	1884703a 	and	r2,r3,r2
  838c3c:	1007883a 	mov	r3,r2
  838c40:	e0bffe17 	ldw	r2,-8(fp)
  838c44:	10c0088d 	sth	r3,34(r2)
      in_pcbdetach(inp);
  838c48:	e13ffc17 	ldw	r4,-16(fp)
  838c4c:	0846b900 	call	846b90 <in_pcbdetach>
      so->so_state |= nofd;
  838c50:	e0bffe17 	ldw	r2,-8(fp)
  838c54:	10c0088b 	ldhu	r3,34(r2)
  838c58:	e0bffa17 	ldw	r2,-24(fp)
  838c5c:	1884b03a 	or	r2,r3,r2
  838c60:	1007883a 	mov	r3,r2
  838c64:	e0bffe17 	ldw	r2,-8(fp)
  838c68:	10c0088d 	sth	r3,34(r2)
      return (ENOBUFS);
  838c6c:	00801a44 	movi	r2,105
  838c70:	e0bfff15 	stw	r2,-4(fp)
  838c74:	00000306 	br	838c84 <tcp_attach+0x11c>
   }
   tp->t_state = TCPS_CLOSED;
  838c78:	e0bffd17 	ldw	r2,-12(fp)
  838c7c:	10000215 	stw	zero,8(r2)
   return (0);
  838c80:	e03fff15 	stw	zero,-4(fp)
  838c84:	e0bfff17 	ldw	r2,-4(fp)
}
  838c88:	e037883a 	mov	sp,fp
  838c8c:	dfc00117 	ldw	ra,4(sp)
  838c90:	df000017 	ldw	fp,0(sp)
  838c94:	dec00204 	addi	sp,sp,8
  838c98:	f800283a 	ret

00838c9c <tcp_disconnect>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
  838c9c:	defffc04 	addi	sp,sp,-16
  838ca0:	dfc00315 	stw	ra,12(sp)
  838ca4:	df000215 	stw	fp,8(sp)
  838ca8:	df000204 	addi	fp,sp,8
  838cac:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
  838cb0:	e0bfff17 	ldw	r2,-4(fp)
  838cb4:	10800d17 	ldw	r2,52(r2)
  838cb8:	10800817 	ldw	r2,32(r2)
  838cbc:	e0bffe15 	stw	r2,-8(fp)

   if (tp->t_state < TCPS_ESTABLISHED)
  838cc0:	e0bfff17 	ldw	r2,-4(fp)
  838cc4:	10800217 	ldw	r2,8(r2)
  838cc8:	10800108 	cmpgei	r2,r2,4
  838ccc:	1000041e 	bne	r2,zero,838ce0 <tcp_disconnect+0x44>
      tp = tcp_close(tp);
  838cd0:	e13fff17 	ldw	r4,-4(fp)
  838cd4:	0837aa00 	call	837aa0 <tcp_close>
  838cd8:	e0bfff15 	stw	r2,-4(fp)
  838cdc:	00001e06 	br	838d58 <tcp_disconnect+0xbc>
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
  838ce0:	e0bffe17 	ldw	r2,-8(fp)
  838ce4:	10800417 	ldw	r2,16(r2)
  838ce8:	1080200c 	andi	r2,r2,128
  838cec:	1005003a 	cmpeq	r2,r2,zero
  838cf0:	10000c1e 	bne	r2,zero,838d24 <tcp_disconnect+0x88>
  838cf4:	e0bffe17 	ldw	r2,-8(fp)
  838cf8:	1080080b 	ldhu	r2,32(r2)
  838cfc:	10bfffcc 	andi	r2,r2,65535
  838d00:	10a0001c 	xori	r2,r2,32768
  838d04:	10a00004 	addi	r2,r2,-32768
  838d08:	1004c03a 	cmpne	r2,r2,zero
  838d0c:	1000051e 	bne	r2,zero,838d24 <tcp_disconnect+0x88>
      tp = tcp_drop(tp, 0);
  838d10:	e13fff17 	ldw	r4,-4(fp)
  838d14:	000b883a 	mov	r5,zero
  838d18:	08379f40 	call	8379f4 <tcp_drop>
  838d1c:	e0bfff15 	stw	r2,-4(fp)
{
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (tp->t_state < TCPS_ESTABLISHED)
      tp = tcp_close(tp);
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
  838d20:	00000d06 	br	838d58 <tcp_disconnect+0xbc>
      tp = tcp_drop(tp, 0);
   else 
   {
      soisdisconnecting(so);
  838d24:	e13ffe17 	ldw	r4,-8(fp)
  838d28:	08314d80 	call	8314d8 <soisdisconnecting>
      sbflush(&so->so_rcv);
  838d2c:	e0bffe17 	ldw	r2,-8(fp)
  838d30:	11000a04 	addi	r4,r2,40
  838d34:	08322840 	call	832284 <sbflush>
      tp = tcp_usrclosed(tp);
  838d38:	e13fff17 	ldw	r4,-4(fp)
  838d3c:	0838d700 	call	838d70 <tcp_usrclosed>
  838d40:	e0bfff15 	stw	r2,-4(fp)
      if (tp)
  838d44:	e0bfff17 	ldw	r2,-4(fp)
  838d48:	1005003a 	cmpeq	r2,r2,zero
  838d4c:	1000021e 	bne	r2,zero,838d58 <tcp_disconnect+0xbc>
         (void) tcp_output(tp);
  838d50:	e13fff17 	ldw	r4,-4(fp)
  838d54:	0835f840 	call	835f84 <tcp_output>
   }
   return (tp);
  838d58:	e0bfff17 	ldw	r2,-4(fp)
}
  838d5c:	e037883a 	mov	sp,fp
  838d60:	dfc00117 	ldw	ra,4(sp)
  838d64:	df000017 	ldw	fp,0(sp)
  838d68:	dec00204 	addi	sp,sp,8
  838d6c:	f800283a 	ret

00838d70 <tcp_usrclosed>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{
  838d70:	defffc04 	addi	sp,sp,-16
  838d74:	dfc00315 	stw	ra,12(sp)
  838d78:	df000215 	stw	fp,8(sp)
  838d7c:	df000204 	addi	fp,sp,8
  838d80:	e13ffe15 	stw	r4,-8(fp)

   switch (tp->t_state) 
  838d84:	e0bffe17 	ldw	r2,-8(fp)
  838d88:	10800217 	ldw	r2,8(r2)
  838d8c:	e0bfff15 	stw	r2,-4(fp)
  838d90:	e0ffff17 	ldw	r3,-4(fp)
  838d94:	188001a8 	cmpgeui	r2,r3,6
  838d98:	10001c1e 	bne	r2,zero,838e0c <tcp_usrclosed+0x9c>
  838d9c:	e13fff17 	ldw	r4,-4(fp)
  838da0:	e13fff17 	ldw	r4,-4(fp)
  838da4:	2105883a 	add	r2,r4,r4
  838da8:	1087883a 	add	r3,r2,r2
  838dac:	00802134 	movhi	r2,132
  838db0:	10a37004 	addi	r2,r2,-29248
  838db4:	1885883a 	add	r2,r3,r2
  838db8:	10800017 	ldw	r2,0(r2)
  838dbc:	1000683a 	jmp	r2
  838dc0:	00838dd8 	cmpnei	r2,zero,3639
  838dc4:	00838dd8 	cmpnei	r2,zero,3639
  838dc8:	00838dd8 	cmpnei	r2,zero,3639
  838dcc:	00838df0 	cmpltui	r2,zero,3639
  838dd0:	00838df0 	cmpltui	r2,zero,3639
  838dd4:	00838e00 	call	838e0 <OSCtxSw_SWITCH_PC+0x838a0>
   {
   case TCPS_CLOSED:
   case TCPS_LISTEN:
   case TCPS_SYN_SENT:
      tp->t_state = TCPS_CLOSED;
  838dd8:	e0bffe17 	ldw	r2,-8(fp)
  838ddc:	10000215 	stw	zero,8(r2)
      tp = tcp_close(tp);
  838de0:	e13ffe17 	ldw	r4,-8(fp)
  838de4:	0837aa00 	call	837aa0 <tcp_close>
  838de8:	e0bffe15 	stw	r2,-8(fp)
      break;
  838dec:	00000706 	br	838e0c <tcp_usrclosed+0x9c>

   case TCPS_SYN_RECEIVED:
   case TCPS_ESTABLISHED:
      tp->t_state = TCPS_FIN_WAIT_1;
  838df0:	e0fffe17 	ldw	r3,-8(fp)
  838df4:	00800184 	movi	r2,6
  838df8:	18800215 	stw	r2,8(r3)
      break;
  838dfc:	00000306 	br	838e0c <tcp_usrclosed+0x9c>

   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
  838e00:	e0fffe17 	ldw	r3,-8(fp)
  838e04:	00800204 	movi	r2,8
  838e08:	18800215 	stw	r2,8(r3)
      break;
   }
   if (tp && tp->t_state >= TCPS_FIN_WAIT_2)
  838e0c:	e0bffe17 	ldw	r2,-8(fp)
  838e10:	1005003a 	cmpeq	r2,r2,zero
  838e14:	1000081e 	bne	r2,zero,838e38 <tcp_usrclosed+0xc8>
  838e18:	e0bffe17 	ldw	r2,-8(fp)
  838e1c:	10800217 	ldw	r2,8(r2)
  838e20:	10800250 	cmplti	r2,r2,9
  838e24:	1000041e 	bne	r2,zero,838e38 <tcp_usrclosed+0xc8>
      soisdisconnected(tp->t_inpcb->inp_socket);
  838e28:	e0bffe17 	ldw	r2,-8(fp)
  838e2c:	10800d17 	ldw	r2,52(r2)
  838e30:	11000817 	ldw	r4,32(r2)
  838e34:	08315640 	call	831564 <soisdisconnected>
   return (tp);
  838e38:	e0bffe17 	ldw	r2,-8(fp)
}
  838e3c:	e037883a 	mov	sp,fp
  838e40:	dfc00117 	ldw	ra,4(sp)
  838e44:	df000017 	ldw	fp,0(sp)
  838e48:	dec00204 	addi	sp,sp,8
  838e4c:	f800283a 	ret

00838e50 <tcpinit>:
 * RETURNS: 0 if OK, else one of the ENP_ error codes
 */

int
tcpinit(void)
{
  838e50:	defffc04 	addi	sp,sp,-16
  838e54:	dfc00315 	stw	ra,12(sp)
  838e58:	df000215 	stw	fp,8(sp)
  838e5c:	df000204 	addi	fp,sp,8
   tcp_sendspace = (TCP_MSS) * 2;
   tcp_recvspace = (TCP_MSS) * 2;
   TCPTV_MSL =    (4 * PR_SLOWHZ);     /* max seg lifetime default */
#endif

   e = nptcp_init();    /* call the NetPort init in nptcp.c */
  838e60:	082bfc80 	call	82bfc8 <nptcp_init>
  838e64:	e0bffe15 	stw	r2,-8(fp)
   if (e)
  838e68:	e0bffe17 	ldw	r2,-8(fp)
  838e6c:	1005003a 	cmpeq	r2,r2,zero
  838e70:	1000031e 	bne	r2,zero,838e80 <tcpinit+0x30>
      return e;
  838e74:	e0bffe17 	ldw	r2,-8(fp)
  838e78:	e0bfff15 	stw	r2,-4(fp)
  838e7c:	00000106 	br	838e84 <tcpinit+0x34>

   return 0;   /* good return */
  838e80:	e03fff15 	stw	zero,-4(fp)
  838e84:	e0bfff17 	ldw	r2,-4(fp)
}
  838e88:	e037883a 	mov	sp,fp
  838e8c:	dfc00117 	ldw	ra,4(sp)
  838e90:	df000017 	ldw	fp,0(sp)
  838e94:	dec00204 	addi	sp,sp,8
  838e98:	f800283a 	ret

00838e9c <udp_lookup>:
 * RETURNS: 
 */

UDPCONN
udp_lookup(struct socket * so)
{
  838e9c:	defffc04 	addi	sp,sp,-16
  838ea0:	df000315 	stw	fp,12(sp)
  838ea4:	df000304 	addi	fp,sp,12
  838ea8:	e13ffe15 	stw	r4,-8(fp)
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
  838eac:	00802174 	movhi	r2,133
  838eb0:	10831a04 	addi	r2,r2,3176
  838eb4:	10800017 	ldw	r2,0(r2)
  838eb8:	e0bffd15 	stw	r2,-12(fp)
  838ebc:	00000a06 	br	838ee8 <udp_lookup+0x4c>
      if (tmp->u_data == (void*)so)
  838ec0:	e0bffd17 	ldw	r2,-12(fp)
  838ec4:	10c00617 	ldw	r3,24(r2)
  838ec8:	e0bffe17 	ldw	r2,-8(fp)
  838ecc:	1880031e 	bne	r3,r2,838edc <udp_lookup+0x40>
      return (tmp);
  838ed0:	e0bffd17 	ldw	r2,-12(fp)
  838ed4:	e0bfff15 	stw	r2,-4(fp)
  838ed8:	00000706 	br	838ef8 <udp_lookup+0x5c>
UDPCONN
udp_lookup(struct socket * so)
{
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
  838edc:	e0bffd17 	ldw	r2,-12(fp)
  838ee0:	10800017 	ldw	r2,0(r2)
  838ee4:	e0bffd15 	stw	r2,-12(fp)
  838ee8:	e0bffd17 	ldw	r2,-12(fp)
  838eec:	1004c03a 	cmpne	r2,r2,zero
  838ef0:	103ff31e 	bne	r2,zero,838ec0 <udp_lookup+0x24>
      if (tmp->u_data == (void*)so)
      return (tmp);

   return NULL;   /* didn't find it */
  838ef4:	e03fff15 	stw	zero,-4(fp)
  838ef8:	e0bfff17 	ldw	r2,-4(fp)
}
  838efc:	e037883a 	mov	sp,fp
  838f00:	df000017 	ldw	fp,0(sp)
  838f04:	dec00104 	addi	sp,sp,4
  838f08:	f800283a 	ret

00838f0c <udp_soinput>:
 * RETURNS: 
 */

int
udp_soinput(PACKET pkt, void * so_ptr)
{
  838f0c:	defff404 	addi	sp,sp,-48
  838f10:	dfc00b15 	stw	ra,44(sp)
  838f14:	df000a15 	stw	fp,40(sp)
  838f18:	df000a04 	addi	fp,sp,40
  838f1c:	e13ffd15 	stw	r4,-12(fp)
  838f20:	e17ffe15 	stw	r5,-8(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
  838f24:	e0bffe17 	ldw	r2,-8(fp)
  838f28:	e0bff715 	stw	r2,-36(fp)
   struct sockaddr_in   sin;
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 
  838f2c:	0009883a 	mov	r4,zero
  838f30:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
  838f34:	e0bff717 	ldw	r2,-36(fp)
  838f38:	10c00a17 	ldw	r3,40(r2)
  838f3c:	e0bffd17 	ldw	r2,-12(fp)
  838f40:	10800417 	ldw	r2,16(r2)
  838f44:	1887883a 	add	r3,r3,r2
  838f48:	e0bff717 	ldw	r2,-36(fp)
  838f4c:	10800b17 	ldw	r2,44(r2)
  838f50:	18800536 	bltu	r3,r2,838f68 <udp_soinput+0x5c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
  838f54:	0009883a 	mov	r4,zero
  838f58:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
  838f5c:	00801a44 	movi	r2,105
  838f60:	e0bfff15 	stw	r2,-4(fp)
  838f64:	00005106 	br	8390ac <udp_soinput+0x1a0>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
  838f68:	01000044 	movi	r4,1
  838f6c:	000b883a 	mov	r5,zero
  838f70:	082b5c80 	call	82b5c8 <m_getnbuf>
  838f74:	e0bff815 	stw	r2,-32(fp)
   if (!m_in)
  838f78:	e0bff817 	ldw	r2,-32(fp)
  838f7c:	1004c03a 	cmpne	r2,r2,zero
  838f80:	1000051e 	bne	r2,zero,838f98 <udp_soinput+0x8c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
  838f84:	0009883a 	mov	r4,zero
  838f88:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
  838f8c:	00801a44 	movi	r2,105
  838f90:	e0bfff15 	stw	r2,-4(fp)
  838f94:	00004506 	br	8390ac <udp_soinput+0x1a0>
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
  838f98:	e0fff817 	ldw	r3,-32(fp)
  838f9c:	e0bffd17 	ldw	r2,-12(fp)
  838fa0:	18800115 	stw	r2,4(r3)
   m_in->m_data = pkt->nb_prot;
  838fa4:	e0bffd17 	ldw	r2,-12(fp)
  838fa8:	10c00317 	ldw	r3,12(r2)
  838fac:	e0bff817 	ldw	r2,-32(fp)
  838fb0:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
  838fb4:	e0bffd17 	ldw	r2,-12(fp)
  838fb8:	10c00417 	ldw	r3,16(r2)
  838fbc:	e0bff817 	ldw	r2,-32(fp)
  838fc0:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;
  838fc4:	e0bffd17 	ldw	r2,-12(fp)
  838fc8:	10c00117 	ldw	r3,4(r2)
  838fcc:	e0bff817 	ldw	r2,-32(fp)
  838fd0:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
  838fd4:	e0bffd17 	ldw	r2,-12(fp)
  838fd8:	10c00217 	ldw	r3,8(r2)
  838fdc:	e0bff817 	ldw	r2,-32(fp)
  838fe0:	10c00515 	stw	r3,20(r2)

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
  838fe4:	e0bffd17 	ldw	r2,-12(fp)
  838fe8:	10800717 	ldw	r2,28(r2)
  838fec:	e0bffa15 	stw	r2,-24(fp)
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
  838ff0:	e0bffd17 	ldw	r2,-12(fp)
  838ff4:	10800317 	ldw	r2,12(r2)
  838ff8:	10bffe04 	addi	r2,r2,-8
  838ffc:	e0bff615 	stw	r2,-40(fp)
   sin.sin_port = htons(udpp->ud_srcp);
  839000:	e0bff617 	ldw	r2,-40(fp)
  839004:	1080000b 	ldhu	r2,0(r2)
  839008:	10bfffcc 	andi	r2,r2,65535
  83900c:	1004d23a 	srli	r2,r2,8
  839010:	10803fcc 	andi	r2,r2,255
  839014:	1009883a 	mov	r4,r2
  839018:	e0bff617 	ldw	r2,-40(fp)
  83901c:	1080000b 	ldhu	r2,0(r2)
  839020:	10bfffcc 	andi	r2,r2,65535
  839024:	1004923a 	slli	r2,r2,8
  839028:	1007883a 	mov	r3,r2
  83902c:	00bfc004 	movi	r2,-256
  839030:	1884703a 	and	r2,r3,r2
  839034:	2084b03a 	or	r2,r4,r2
  839038:	e0bff98d 	sth	r2,-26(fp)
   sin.sin_family = AF_INET;
  83903c:	00800084 	movi	r2,2
  839040:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
  839044:	e0bff717 	ldw	r2,-36(fp)
  839048:	11000a04 	addi	r4,r2,40
  83904c:	e17ff904 	addi	r5,fp,-28
  839050:	e1bff817 	ldw	r6,-32(fp)
  839054:	0831e940 	call	831e94 <sbappendaddr>
  839058:	1004c03a 	cmpne	r2,r2,zero
  83905c:	1000091e 	bne	r2,zero,839084 <udp_soinput+0x178>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       */
      m_in->pkt = NULL;
  839060:	e0bff817 	ldw	r2,-32(fp)
  839064:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
  839068:	e13ff817 	ldw	r4,-32(fp)
  83906c:	082b7700 	call	82b770 <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
  839070:	0009883a 	mov	r4,zero
  839074:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
  839078:	00801a44 	movi	r2,105
  83907c:	e0bfff15 	stw	r2,-4(fp)
  839080:	00000a06 	br	8390ac <udp_soinput+0x1a0>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
  839084:	e0bff717 	ldw	r2,-36(fp)
  839088:	11000a04 	addi	r4,r2,40
  83908c:	082653c0 	call	82653c <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
  839090:	e0bff717 	ldw	r2,-36(fp)
  839094:	11400a04 	addi	r5,r2,40
  839098:	e13ff717 	ldw	r4,-36(fp)
  83909c:	0831b480 	call	831b48 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
  8390a0:	0009883a 	mov	r4,zero
  8390a4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return 0;
  8390a8:	e03fff15 	stw	zero,-4(fp)
  8390ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8390b0:	e037883a 	mov	sp,fp
  8390b4:	dfc00117 	ldw	ra,4(sp)
  8390b8:	df000017 	ldw	fp,0(sp)
  8390bc:	dec00204 	addi	sp,sp,8
  8390c0:	f800283a 	ret

008390c4 <udp_usrreq>:

int
udp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
  8390c4:	defff704 	addi	sp,sp,-36
  8390c8:	dfc00815 	stw	ra,32(sp)
  8390cc:	df000715 	stw	fp,28(sp)
  8390d0:	df000704 	addi	fp,sp,28
  8390d4:	e13ffc15 	stw	r4,-16(fp)
  8390d8:	e17ffd15 	stw	r5,-12(fp)
  8390dc:	e1bffe15 	stw	r6,-8(fp)
   UDPCONN udpconn = (UDPCONN)NULL;
  8390e0:	e03ffb15 	stw	zero,-20(fp)
   int   req;

   req = so->so_req;    /* get request from socket struct */
  8390e4:	e0bffc17 	ldw	r2,-16(fp)
  8390e8:	10800717 	ldw	r2,28(r2)
  8390ec:	e0bffa15 	stw	r2,-24(fp)

   switch (req) 
  8390f0:	e0bffa17 	ldw	r2,-24(fp)
  8390f4:	10800468 	cmpgeui	r2,r2,17
  8390f8:	10008b1e 	bne	r2,zero,839328 <udp_usrreq+0x264>
  8390fc:	e0bffa17 	ldw	r2,-24(fp)
  839100:	1085883a 	add	r2,r2,r2
  839104:	1087883a 	add	r3,r2,r2
  839108:	00802134 	movhi	r2,132
  83910c:	10a44704 	addi	r2,r2,-28388
  839110:	1885883a 	add	r2,r3,r2
  839114:	10800017 	ldw	r2,0(r2)
  839118:	1000683a 	jmp	r2
  83911c:	00839160 	cmpeqi	r2,zero,3653
  839120:	008391e8 	cmpgeui	r2,zero,3655
  839124:	0083922c 	andhi	r2,zero,3656
  839128:	00839328 	cmpgeui	r2,zero,3660
  83912c:	0083922c 	andhi	r2,zero,3656
  839130:	00839328 	cmpgeui	r2,zero,3660
  839134:	0083931c 	xori	r2,zero,3660
  839138:	00839328 	cmpgeui	r2,zero,3660
  83913c:	0083931c 	xori	r2,zero,3660
  839140:	0083927c 	xorhi	r2,zero,3657
  839144:	00839328 	cmpgeui	r2,zero,3660
  839148:	00839328 	cmpgeui	r2,zero,3660
  83914c:	00839328 	cmpgeui	r2,zero,3660
  839150:	00839328 	cmpgeui	r2,zero,3660
  839154:	00839328 	cmpgeui	r2,zero,3660
  839158:	008392cc 	andi	r2,zero,3659
  83915c:	008392cc 	andi	r2,zero,3659
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = udp_maxalloc();
  839160:	0843ecc0 	call	843ecc <udp_maxalloc>
  839164:	1007883a 	mov	r3,r2
  839168:	e0bffc17 	ldw	r2,-16(fp)
  83916c:	10c01315 	stw	r3,76(r2)
  839170:	e0bffc17 	ldw	r2,-16(fp)
  839174:	10c01317 	ldw	r3,76(r2)
  839178:	e0bffc17 	ldw	r2,-16(fp)
  83917c:	10c00b15 	stw	r3,44(r2)

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
  839180:	e0bffc17 	ldw	r2,-16(fp)
  839184:	10800517 	ldw	r2,20(r2)
  839188:	10800098 	cmpnei	r2,r2,2
  83918c:	10000e1e 	bne	r2,zero,8391c8 <udp_usrreq+0x104>
        UNLOCK_NET_RESOURCE(NET_RESID);
  839190:	0009883a 	mov	r4,zero
  839194:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
        udpconn = udp_open(0L, 0, udp_socket(), udp_soinput, so);
  839198:	0843d3c0 	call	843d3c <udp_socket>
  83919c:	11bfffcc 	andi	r6,r2,65535
  8391a0:	e0bffc17 	ldw	r2,-16(fp)
  8391a4:	d8800015 	stw	r2,0(sp)
  8391a8:	0009883a 	mov	r4,zero
  8391ac:	000b883a 	mov	r5,zero
  8391b0:	01c02134 	movhi	r7,132
  8391b4:	39e3c304 	addi	r7,r7,-28916
  8391b8:	082a3180 	call	82a318 <udp_open>
  8391bc:	e0bffb15 	stw	r2,-20(fp)
        LOCK_NET_RESOURCE(NET_RESID);
  8391c0:	0009883a 	mov	r4,zero
  8391c4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
        UNLOCK_NET_RESOURCE(NET_RESID);
        udpconn = udp6_open(0L, 0, udp_socket(), udp6_soinput, so);
        LOCK_NET_RESOURCE(NET_RESID);
      }
#endif
      if (!udpconn)
  8391c8:	e0bffb17 	ldw	r2,-20(fp)
  8391cc:	1004c03a 	cmpne	r2,r2,zero
  8391d0:	1000031e 	bne	r2,zero,8391e0 <udp_usrreq+0x11c>
         return(EINVAL);
  8391d4:	00800584 	movi	r2,22
  8391d8:	e0bfff15 	stw	r2,-4(fp)
  8391dc:	00005406 	br	839330 <udp_usrreq+0x26c>
      return 0;
  8391e0:	e03fff15 	stw	zero,-4(fp)
  8391e4:	00005206 	br	839330 <udp_usrreq+0x26c>
   case PRU_DETACH:
      /* delete the NetPort UDP connection */
      udpconn = udp_lookup(so);
  8391e8:	e13ffc17 	ldw	r4,-16(fp)
  8391ec:	0838e9c0 	call	838e9c <udp_lookup>
  8391f0:	e0bffb15 	stw	r2,-20(fp)
      if (!udpconn)
  8391f4:	e0bffb17 	ldw	r2,-20(fp)
  8391f8:	1004c03a 	cmpne	r2,r2,zero
  8391fc:	1000031e 	bne	r2,zero,83920c <udp_usrreq+0x148>
         return(EINVAL);
  839200:	00800584 	movi	r2,22
  839204:	e0bfff15 	stw	r2,-4(fp)
  839208:	00004906 	br	839330 <udp_usrreq+0x26c>
      /* unlock the net resource; UDP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
  83920c:	0009883a 	mov	r4,zero
  839210:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      udp_close(udpconn);
  839214:	e13ffb17 	ldw	r4,-20(fp)
  839218:	082a5500 	call	82a550 <udp_close>
      LOCK_NET_RESOURCE(NET_RESID);
  83921c:	0009883a 	mov	r4,zero
  839220:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      return 0;
  839224:	e03fff15 	stw	zero,-4(fp)
  839228:	00004106 	br	839330 <udp_usrreq+0x26c>
   case PRU_CONNECT:
      /* Install foreign port for UDP, making a virtual connection */
      /* fall to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
  83922c:	e0bffe17 	ldw	r2,-8(fp)
  839230:	1004c03a 	cmpne	r2,r2,zero
  839234:	1000031e 	bne	r2,zero,839244 <udp_usrreq+0x180>
         return(EINVAL);
  839238:	00800584 	movi	r2,22
  83923c:	e0bfff15 	stw	r2,-4(fp)
  839240:	00003b06 	br	839330 <udp_usrreq+0x26c>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
  839244:	e0bffc17 	ldw	r2,-16(fp)
  839248:	10800517 	ldw	r2,20(r2)
  83924c:	10800098 	cmpnei	r2,r2,2
  839250:	1000061e 	bne	r2,zero,83926c <udp_usrreq+0x1a8>
        return udp4_sockbind(so, nam, req );
  839254:	e13ffc17 	ldw	r4,-16(fp)
  839258:	e17ffe17 	ldw	r5,-8(fp)
  83925c:	e1bffa17 	ldw	r6,-24(fp)
  839260:	08393480 	call	839348 <udp4_sockbind>
  839264:	e0bfff15 	stw	r2,-4(fp)
  839268:	00003106 	br	839330 <udp_usrreq+0x26c>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockbind(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
  83926c:	082a7c80 	call	82a7c8 <dtrap>
      return EINVAL;
  839270:	00800584 	movi	r2,22
  839274:	e0bfff15 	stw	r2,-4(fp)
  839278:	00002d06 	br	839330 <udp_usrreq+0x26c>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
  83927c:	e0bffd17 	ldw	r2,-12(fp)
  839280:	1004c03a 	cmpne	r2,r2,zero
  839284:	1000031e 	bne	r2,zero,839294 <udp_usrreq+0x1d0>
         return(EINVAL);
  839288:	00800584 	movi	r2,22
  83928c:	e0bfff15 	stw	r2,-4(fp)
  839290:	00002706 	br	839330 <udp_usrreq+0x26c>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
  839294:	e0bffc17 	ldw	r2,-16(fp)
  839298:	10800517 	ldw	r2,20(r2)
  83929c:	10800098 	cmpnei	r2,r2,2
  8392a0:	1000061e 	bne	r2,zero,8392bc <udp_usrreq+0x1f8>
        return udp4_socksend(so, m, nam );
  8392a4:	e13ffc17 	ldw	r4,-16(fp)
  8392a8:	e17ffd17 	ldw	r5,-12(fp)
  8392ac:	e1bffe17 	ldw	r6,-8(fp)
  8392b0:	08396840 	call	839684 <udp4_socksend>
  8392b4:	e0bfff15 	stw	r2,-4(fp)
  8392b8:	00001d06 	br	839330 <udp_usrreq+0x26c>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_socksend(so, m, nam);
      }
#endif
      dtrap();   /* invalid address */
  8392bc:	082a7c80 	call	82a7c8 <dtrap>
      return EINVAL;
  8392c0:	00800584 	movi	r2,22
  8392c4:	e0bfff15 	stw	r2,-4(fp)
  8392c8:	00001906 	br	839330 <udp_usrreq+0x26c>

   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
  8392cc:	e0bffe17 	ldw	r2,-8(fp)
  8392d0:	1004c03a 	cmpne	r2,r2,zero
  8392d4:	1000031e 	bne	r2,zero,8392e4 <udp_usrreq+0x220>
         return(EINVAL);
  8392d8:	00800584 	movi	r2,22
  8392dc:	e0bfff15 	stw	r2,-4(fp)
  8392e0:	00001306 	br	839330 <udp_usrreq+0x26c>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
  8392e4:	e0bffc17 	ldw	r2,-16(fp)
  8392e8:	10800517 	ldw	r2,20(r2)
  8392ec:	10800098 	cmpnei	r2,r2,2
  8392f0:	1000061e 	bne	r2,zero,83930c <udp_usrreq+0x248>
        return udp4_sockaddr(so, nam, req );
  8392f4:	e13ffc17 	ldw	r4,-16(fp)
  8392f8:	e17ffe17 	ldw	r5,-8(fp)
  8392fc:	e1bffa17 	ldw	r6,-24(fp)
  839300:	0839a600 	call	839a60 <udp4_sockaddr>
  839304:	e0bfff15 	stw	r2,-4(fp)
  839308:	00000906 	br	839330 <udp_usrreq+0x26c>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockaddr(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
  83930c:	082a7c80 	call	82a7c8 <dtrap>
      return EINVAL;
  839310:	00800584 	movi	r2,22
  839314:	e0bfff15 	stw	r2,-4(fp)
  839318:	00000506 	br	839330 <udp_usrreq+0x26c>

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
  83931c:	082a7c80 	call	82a7c8 <dtrap>
      return 0;
  839320:	e03fff15 	stw	zero,-4(fp)
  839324:	00000206 	br	839330 <udp_usrreq+0x26c>
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
  839328:	008017c4 	movi	r2,95
  83932c:	e0bfff15 	stw	r2,-4(fp)
  839330:	e0bfff17 	ldw	r2,-4(fp)
   }
}
  839334:	e037883a 	mov	sp,fp
  839338:	dfc00117 	ldw	ra,4(sp)
  83933c:	df000017 	ldw	fp,0(sp)
  839340:	dec00204 	addi	sp,sp,8
  839344:	f800283a 	ret

00839348 <udp4_sockbind>:

#ifdef IP_V4
int udp4_sockbind(struct socket *so, struct mbuf *nam, int req ) 
{
  839348:	defff304 	addi	sp,sp,-52
  83934c:	dfc00c15 	stw	ra,48(sp)
  839350:	df000b15 	stw	fp,44(sp)
  839354:	df000b04 	addi	fp,sp,44
  839358:	e13ffc15 	stw	r4,-16(fp)
  83935c:	e17ffd15 	stw	r5,-12(fp)
  839360:	e1bffe15 	stw	r6,-8(fp)
  u_short  lport;   /* local port (local byte order) */
  ip_addr fhost; /* host to send to/recv from (network byte order) */
  ip_addr lhost; /* local IP address to bind to (network byte order) */
  NET ifp;

  sin = mtod(nam, struct sockaddr_in *);
  839364:	e0bffd17 	ldw	r2,-12(fp)
  839368:	10800317 	ldw	r2,12(r2)
  83936c:	e0bffb15 	stw	r2,-20(fp)
  if (sin == NULL)
  839370:	e0bffb17 	ldw	r2,-20(fp)
  839374:	1004c03a 	cmpne	r2,r2,zero
  839378:	1000031e 	bne	r2,zero,839388 <udp4_sockbind+0x40>
    return(EINVAL);
  83937c:	00800584 	movi	r2,22
  839380:	e0bfff15 	stw	r2,-4(fp)
  839384:	0000b906 	br	83966c <udp4_sockbind+0x324>
  if (nam->m_len != sizeof (*sin))
  839388:	e0bffd17 	ldw	r2,-12(fp)
  83938c:	10800217 	ldw	r2,8(r2)
  839390:	10800420 	cmpeqi	r2,r2,16
  839394:	1000031e 	bne	r2,zero,8393a4 <udp4_sockbind+0x5c>
    return(EINVAL);
  839398:	00800584 	movi	r2,22
  83939c:	e0bfff15 	stw	r2,-4(fp)
  8393a0:	0000b206 	br	83966c <udp4_sockbind+0x324>
  udpconn = udp_lookup(so);
  8393a4:	e13ffc17 	ldw	r4,-16(fp)
  8393a8:	0838e9c0 	call	838e9c <udp_lookup>
  8393ac:	e0bffa15 	stw	r2,-24(fp)
  if (!udpconn)
  8393b0:	e0bffa17 	ldw	r2,-24(fp)
  8393b4:	1004c03a 	cmpne	r2,r2,zero
  8393b8:	1000031e 	bne	r2,zero,8393c8 <udp4_sockbind+0x80>
     return(EINVAL);
  8393bc:	00800584 	movi	r2,22
  8393c0:	e0bfff15 	stw	r2,-4(fp)
  8393c4:	0000a906 	br	83966c <udp4_sockbind+0x324>
  if (req == PRU_BIND)
  8393c8:	e0bffe17 	ldw	r2,-8(fp)
  8393cc:	10800098 	cmpnei	r2,r2,2
  8393d0:	1000601e 	bne	r2,zero,839554 <udp4_sockbind+0x20c>
     * if the caller-supplied port is 0, try to get
     * the port from the UDP endpoint, or pick a new
     * unique port; else, use the caller-supplied
     * port
     */
    if (sin->sin_port == 0)
  8393d4:	e0bffb17 	ldw	r2,-20(fp)
  8393d8:	1080008b 	ldhu	r2,2(r2)
  8393dc:	10bfffcc 	andi	r2,r2,65535
  8393e0:	1004c03a 	cmpne	r2,r2,zero
  8393e4:	10000c1e 	bne	r2,zero,839418 <udp4_sockbind+0xd0>
    {
      if (udpconn->u_lport != 0)
  8393e8:	e0bffa17 	ldw	r2,-24(fp)
  8393ec:	1080018b 	ldhu	r2,6(r2)
  8393f0:	10bfffcc 	andi	r2,r2,65535
  8393f4:	1005003a 	cmpeq	r2,r2,zero
  8393f8:	1000041e 	bne	r2,zero,83940c <udp4_sockbind+0xc4>
        lport = udpconn->u_lport;
  8393fc:	e0bffa17 	ldw	r2,-24(fp)
  839400:	1080018b 	ldhu	r2,6(r2)
  839404:	e0bff80d 	sth	r2,-32(fp)
  839408:	00001206 	br	839454 <udp4_sockbind+0x10c>
      else
        lport = udp_socket();
  83940c:	0843d3c0 	call	843d3c <udp_socket>
  839410:	e0bff80d 	sth	r2,-32(fp)
  839414:	00000f06 	br	839454 <udp4_sockbind+0x10c>
    }
    else
    {
      lport = ntohs(sin->sin_port);
  839418:	e0bffb17 	ldw	r2,-20(fp)
  83941c:	1080008b 	ldhu	r2,2(r2)
  839420:	10bfffcc 	andi	r2,r2,65535
  839424:	1004d23a 	srli	r2,r2,8
  839428:	10803fcc 	andi	r2,r2,255
  83942c:	1009883a 	mov	r4,r2
  839430:	e0bffb17 	ldw	r2,-20(fp)
  839434:	1080008b 	ldhu	r2,2(r2)
  839438:	10bfffcc 	andi	r2,r2,65535
  83943c:	1004923a 	slli	r2,r2,8
  839440:	1007883a 	mov	r3,r2
  839444:	00bfc004 	movi	r2,-256
  839448:	1884703a 	and	r2,r3,r2
  83944c:	2084b03a 	or	r2,r4,r2
  839450:	e0bff80d 	sth	r2,-32(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * don't bind to a specific address; else, 
     * make sure the caller-supplied address is
     * an interface IP address and if so, bind to that
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
  839454:	e0bffb17 	ldw	r2,-20(fp)
  839458:	10800117 	ldw	r2,4(r2)
  83945c:	1004c03a 	cmpne	r2,r2,zero
  839460:	1000021e 	bne	r2,zero,83946c <udp4_sockbind+0x124>
    {
      lhost = 0L;
  839464:	e03ff615 	stw	zero,-40(fp)
  839468:	00001806 	br	8394cc <udp4_sockbind+0x184>
    }
    else
    {
      lhost = sin->sin_addr.s_addr;
  83946c:	e0bffb17 	ldw	r2,-20(fp)
  839470:	10800117 	ldw	r2,4(r2)
  839474:	e0bff615 	stw	r2,-40(fp)
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  839478:	00803934 	movhi	r2,228
  83947c:	10a9dd04 	addi	r2,r2,-22668
  839480:	10800017 	ldw	r2,0(r2)
  839484:	e0bff515 	stw	r2,-44(fp)
  839488:	00000706 	br	8394a8 <udp4_sockbind+0x160>
        if (ifp->n_ipaddr == lhost)
  83948c:	e0bff517 	ldw	r2,-44(fp)
  839490:	10c00a17 	ldw	r3,40(r2)
  839494:	e0bff617 	ldw	r2,-40(fp)
  839498:	18800626 	beq	r3,r2,8394b4 <udp4_sockbind+0x16c>
    else
    {
      lhost = sin->sin_addr.s_addr;
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  83949c:	e0bff517 	ldw	r2,-44(fp)
  8394a0:	10800017 	ldw	r2,0(r2)
  8394a4:	e0bff515 	stw	r2,-44(fp)
  8394a8:	e0bff517 	ldw	r2,-44(fp)
  8394ac:	1004c03a 	cmpne	r2,r2,zero
  8394b0:	103ff61e 	bne	r2,zero,83948c <udp4_sockbind+0x144>
        if (ifp->n_ipaddr == lhost)
          break;
      if (ifp == NULL)
  8394b4:	e0bff517 	ldw	r2,-44(fp)
  8394b8:	1004c03a 	cmpne	r2,r2,zero
  8394bc:	1000031e 	bne	r2,zero,8394cc <udp4_sockbind+0x184>
        return(EADDRNOTAVAIL);
  8394c0:	00801f44 	movi	r2,125
  8394c4:	e0bfff15 	stw	r2,-4(fp)
  8394c8:	00006806 	br	83966c <udp4_sockbind+0x324>
    }

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
  8394cc:	e0bffc17 	ldw	r2,-16(fp)
  8394d0:	10800417 	ldw	r2,16(r2)
  8394d4:	1080010c 	andi	r2,r2,4
  8394d8:	1004c03a 	cmpne	r2,r2,zero
  8394dc:	1000161e 	bne	r2,zero,839538 <udp4_sockbind+0x1f0>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
  8394e0:	00802174 	movhi	r2,133
  8394e4:	10831a04 	addi	r2,r2,3176
  8394e8:	10800017 	ldw	r2,0(r2)
  8394ec:	e0bff915 	stw	r2,-28(fp)
  8394f0:	00000e06 	br	83952c <udp4_sockbind+0x1e4>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
  8394f4:	e0bff917 	ldw	r2,-28(fp)
  8394f8:	1080018b 	ldhu	r2,6(r2)
  8394fc:	10ffffcc 	andi	r3,r2,65535
  839500:	e0bff80b 	ldhu	r2,-32(fp)
  839504:	1880061e 	bne	r3,r2,839520 <udp4_sockbind+0x1d8>
  839508:	e0fff917 	ldw	r3,-28(fp)
  83950c:	e0bffa17 	ldw	r2,-24(fp)
  839510:	18800326 	beq	r3,r2,839520 <udp4_sockbind+0x1d8>
          return(EADDRINUSE);
  839514:	00801c04 	movi	r2,112
  839518:	e0bfff15 	stw	r2,-4(fp)
  83951c:	00005306 	br	83966c <udp4_sockbind+0x324>

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
  839520:	e0bff917 	ldw	r2,-28(fp)
  839524:	10800017 	ldw	r2,0(r2)
  839528:	e0bff915 	stw	r2,-28(fp)
  83952c:	e0bff917 	ldw	r2,-28(fp)
  839530:	1004c03a 	cmpne	r2,r2,zero
  839534:	103fef1e 	bne	r2,zero,8394f4 <udp4_sockbind+0x1ac>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
          return(EADDRINUSE);
    /* bind the UDP endpoint */
    udpconn->u_lport = lport;
  839538:	e0fffa17 	ldw	r3,-24(fp)
  83953c:	e0bff80b 	ldhu	r2,-32(fp)
  839540:	1880018d 	sth	r2,6(r3)
    udpconn->u_lhost = lhost;
  839544:	e0fffa17 	ldw	r3,-24(fp)
  839548:	e0bff617 	ldw	r2,-40(fp)
  83954c:	18800315 	stw	r2,12(r3)
  839550:	00004506 	br	839668 <udp4_sockbind+0x320>
  else /* PRU_CONNECT */
  {
    /* connect the socket to a remote IP address and
     * UDP port.
     */
    fport = ntohs(sin->sin_port);
  839554:	e0bffb17 	ldw	r2,-20(fp)
  839558:	1080008b 	ldhu	r2,2(r2)
  83955c:	10bfffcc 	andi	r2,r2,65535
  839560:	1004d23a 	srli	r2,r2,8
  839564:	10803fcc 	andi	r2,r2,255
  839568:	1009883a 	mov	r4,r2
  83956c:	e0bffb17 	ldw	r2,-20(fp)
  839570:	1080008b 	ldhu	r2,2(r2)
  839574:	10bfffcc 	andi	r2,r2,65535
  839578:	1004923a 	slli	r2,r2,8
  83957c:	1007883a 	mov	r3,r2
  839580:	00bfc004 	movi	r2,-256
  839584:	1884703a 	and	r2,r3,r2
  839588:	2084b03a 	or	r2,r4,r2
  83958c:	e0bff88d 	sth	r2,-30(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * use the wildcard address; else, use the caller-
     * supplied address
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
  839590:	e0bffb17 	ldw	r2,-20(fp)
  839594:	10800117 	ldw	r2,4(r2)
  839598:	1004c03a 	cmpne	r2,r2,zero
  83959c:	1000021e 	bne	r2,zero,8395a8 <udp4_sockbind+0x260>
      fhost = 0L;
  8395a0:	e03ff715 	stw	zero,-36(fp)
  8395a4:	00000306 	br	8395b4 <udp4_sockbind+0x26c>
    else
      fhost = sin->sin_addr.s_addr;
  8395a8:	e0bffb17 	ldw	r2,-20(fp)
  8395ac:	10800117 	ldw	r2,4(r2)
  8395b0:	e0bff715 	stw	r2,-36(fp)
    /* prepare to bind the socket to the appropriate 
     * local interface address for the to-be-connected 
     * peer
     */
    lhost = ip_mymach(fhost);
  8395b4:	e13ff717 	ldw	r4,-36(fp)
  8395b8:	083ee080 	call	83ee08 <ip_mymach>
  8395bc:	e0bff615 	stw	r2,-40(fp)
    if (lhost == 0)
  8395c0:	e0bff617 	ldw	r2,-40(fp)
  8395c4:	1004c03a 	cmpne	r2,r2,zero
  8395c8:	1000031e 	bne	r2,zero,8395d8 <udp4_sockbind+0x290>
      return(ENETUNREACH);
  8395cc:	00801c84 	movi	r2,114
  8395d0:	e0bfff15 	stw	r2,-4(fp)
  8395d4:	00002506 	br	83966c <udp4_sockbind+0x324>
    /* if the socket hasn't been bound to a local
     * port yet, do so now
     */
    lport = udpconn->u_lport;
  8395d8:	e0bffa17 	ldw	r2,-24(fp)
  8395dc:	1080018b 	ldhu	r2,6(r2)
  8395e0:	e0bff80d 	sth	r2,-32(fp)
    if (lport == 0)
  8395e4:	e0bff80b 	ldhu	r2,-32(fp)
  8395e8:	1004c03a 	cmpne	r2,r2,zero
  8395ec:	1000021e 	bne	r2,zero,8395f8 <udp4_sockbind+0x2b0>
      lport = udp_socket();
  8395f0:	0843d3c0 	call	843d3c <udp_socket>
  8395f4:	e0bff80d 	sth	r2,-32(fp)
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
  8395f8:	e0fffa17 	ldw	r3,-24(fp)
  8395fc:	e0bff617 	ldw	r2,-40(fp)
  839600:	18800315 	stw	r2,12(r3)
    udpconn->u_lport = lport;
  839604:	e0fffa17 	ldw	r3,-24(fp)
  839608:	e0bff80b 	ldhu	r2,-32(fp)
  83960c:	1880018d 	sth	r2,6(r3)
    udpconn->u_fhost = fhost;
  839610:	e0fffa17 	ldw	r3,-24(fp)
  839614:	e0bff717 	ldw	r2,-36(fp)
  839618:	18800415 	stw	r2,16(r3)
    udpconn->u_fport = fport;
  83961c:	e0fffa17 	ldw	r3,-24(fp)
  839620:	e0bff88b 	ldhu	r2,-30(fp)
  839624:	1880020d 	sth	r2,8(r3)
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
  839628:	e0bffc17 	ldw	r2,-16(fp)
  83962c:	10c0088b 	ldhu	r3,34(r2)
  839630:	00bffcc4 	movi	r2,-13
  839634:	1884703a 	and	r2,r3,r2
  839638:	1007883a 	mov	r3,r2
  83963c:	e0bffc17 	ldw	r2,-16(fp)
  839640:	10c0088d 	sth	r3,34(r2)
    so->so_state |= SS_ISCONNECTED;
  839644:	e0bffc17 	ldw	r2,-16(fp)
  839648:	1080088b 	ldhu	r2,34(r2)
  83964c:	10800094 	ori	r2,r2,2
  839650:	1007883a 	mov	r3,r2
  839654:	e0bffc17 	ldw	r2,-16(fp)
  839658:	10c0088d 	sth	r3,34(r2)
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
  83965c:	e0bffc17 	ldw	r2,-16(fp)
  839660:	11000a04 	addi	r4,r2,40
  839664:	08322840 	call	832284 <sbflush>
  }
  return 0;
  839668:	e03fff15 	stw	zero,-4(fp)
  83966c:	e0bfff17 	ldw	r2,-4(fp)
}
  839670:	e037883a 	mov	sp,fp
  839674:	dfc00117 	ldw	ra,4(sp)
  839678:	df000017 	ldw	fp,0(sp)
  83967c:	dec00204 	addi	sp,sp,8
  839680:	f800283a 	ret

00839684 <udp4_socksend>:

int udp4_socksend(struct socket *so, struct mbuf *m, 
		struct mbuf *nam ) 
{
  839684:	defff204 	addi	sp,sp,-56
  839688:	dfc00d15 	stw	ra,52(sp)
  83968c:	df000c15 	stw	fp,48(sp)
  839690:	dc000b15 	stw	r16,44(sp)
  839694:	df000b04 	addi	fp,sp,44
  839698:	e13ffc15 	stw	r4,-16(fp)
  83969c:	e17ffd15 	stw	r5,-12(fp)
  8396a0:	e1bffe15 	stw	r6,-8(fp)
  PACKET pkt;
#ifdef MULTI_HOMED
  NET ifp;
#endif

  udpconn = udp_lookup(so);
  8396a4:	e13ffc17 	ldw	r4,-16(fp)
  8396a8:	0838e9c0 	call	838e9c <udp_lookup>
  8396ac:	e0bff915 	stw	r2,-28(fp)
  if (!udpconn)
  8396b0:	e0bff917 	ldw	r2,-28(fp)
  8396b4:	1004c03a 	cmpne	r2,r2,zero
  8396b8:	1000051e 	bne	r2,zero,8396d0 <udp4_socksend+0x4c>
  {
    m_free(m);
  8396bc:	e13ffd17 	ldw	r4,-12(fp)
  8396c0:	082b7700 	call	82b770 <m_free>
    /* may be bogus socket, but more likely the connection may 
       have closed due to ICMP dest unreachable from other side. */
    return(ECONNREFUSED);
  8396c4:	00801bc4 	movi	r2,111
  8396c8:	e0bfff15 	stw	r2,-4(fp)
  8396cc:	0000dd06 	br	839a44 <udp4_socksend+0x3c0>
  }

  if (nam == NULL)  /* no sendto() info passed, must be send() */
  8396d0:	e0bffe17 	ldw	r2,-8(fp)
  8396d4:	1004c03a 	cmpne	r2,r2,zero
  8396d8:	1000101e 	bne	r2,zero,83971c <udp4_socksend+0x98>
  { 
    if (so->so_state & SS_ISCONNECTED)
  8396dc:	e0bffc17 	ldw	r2,-16(fp)
  8396e0:	1080088b 	ldhu	r2,34(r2)
  8396e4:	10bfffcc 	andi	r2,r2,65535
  8396e8:	1080008c 	andi	r2,r2,2
  8396ec:	1005003a 	cmpeq	r2,r2,zero
  8396f0:	1000071e 	bne	r2,zero,839710 <udp4_socksend+0x8c>
    {
      fport = udpconn->u_fport;
  8396f4:	e0bff917 	ldw	r2,-28(fp)
  8396f8:	1080020b 	ldhu	r2,8(r2)
  8396fc:	e0bff80d 	sth	r2,-32(fp)
      fhost = udpconn->u_fhost;
  839700:	e0bff917 	ldw	r2,-28(fp)
  839704:	10800417 	ldw	r2,16(r2)
  839708:	e0bff715 	stw	r2,-36(fp)
  83970c:	00003106 	br	8397d4 <udp4_socksend+0x150>
    }
    else
      return (EINVAL);
  839710:	00800584 	movi	r2,22
  839714:	e0bfff15 	stw	r2,-4(fp)
  839718:	0000ca06 	br	839a44 <udp4_socksend+0x3c0>
  }
  else if(nam->m_len != sizeof (*sin))
  83971c:	e0bffe17 	ldw	r2,-8(fp)
  839720:	10800217 	ldw	r2,8(r2)
  839724:	10800420 	cmpeqi	r2,r2,16
  839728:	1000041e 	bne	r2,zero,83973c <udp4_socksend+0xb8>
  {
    dtrap();
  83972c:	082a7c80 	call	82a7c8 <dtrap>
    return (EINVAL);
  839730:	00800584 	movi	r2,22
  839734:	e0bfff15 	stw	r2,-4(fp)
  839738:	0000c206 	br	839a44 <udp4_socksend+0x3c0>
  }
  else
  {
    sin = mtod(nam, struct sockaddr_in *);
  83973c:	e0bffe17 	ldw	r2,-8(fp)
  839740:	10800317 	ldw	r2,12(r2)
  839744:	e0bffa15 	stw	r2,-24(fp)
    fhost = sin->sin_addr.s_addr;
  839748:	e0bffa17 	ldw	r2,-24(fp)
  83974c:	10800117 	ldw	r2,4(r2)
  839750:	e0bff715 	stw	r2,-36(fp)
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
  839754:	e0bffa17 	ldw	r2,-24(fp)
  839758:	1080008b 	ldhu	r2,2(r2)
  83975c:	10bfffcc 	andi	r2,r2,65535
  839760:	1005003a 	cmpeq	r2,r2,zero
  839764:	1000101e 	bne	r2,zero,8397a8 <udp4_socksend+0x124>
      fport = ntohs(sin->sin_port);
  839768:	e0bffa17 	ldw	r2,-24(fp)
  83976c:	1080008b 	ldhu	r2,2(r2)
  839770:	10bfffcc 	andi	r2,r2,65535
  839774:	1004d23a 	srli	r2,r2,8
  839778:	10803fcc 	andi	r2,r2,255
  83977c:	1009883a 	mov	r4,r2
  839780:	e0bffa17 	ldw	r2,-24(fp)
  839784:	1080008b 	ldhu	r2,2(r2)
  839788:	10bfffcc 	andi	r2,r2,65535
  83978c:	1004923a 	slli	r2,r2,8
  839790:	1007883a 	mov	r3,r2
  839794:	00bfc004 	movi	r2,-256
  839798:	1884703a 	and	r2,r3,r2
  83979c:	2084b03a 	or	r2,r4,r2
  8397a0:	e0bff80d 	sth	r2,-32(fp)
  8397a4:	00000b06 	br	8397d4 <udp4_socksend+0x150>
    else  /* use port already set in UDP connection */
    {
      if (udpconn->u_fport == 0) /* don't send to port 0 */
  8397a8:	e0bff917 	ldw	r2,-28(fp)
  8397ac:	1080020b 	ldhu	r2,8(r2)
  8397b0:	10bfffcc 	andi	r2,r2,65535
  8397b4:	1004c03a 	cmpne	r2,r2,zero
  8397b8:	1000031e 	bne	r2,zero,8397c8 <udp4_socksend+0x144>
        return (EINVAL);
  8397bc:	00800584 	movi	r2,22
  8397c0:	e0bfff15 	stw	r2,-4(fp)
  8397c4:	00009f06 	br	839a44 <udp4_socksend+0x3c0>
      fport = udpconn->u_fport;
  8397c8:	e0bff917 	ldw	r2,-28(fp)
  8397cc:	1080020b 	ldhu	r2,8(r2)
  8397d0:	e0bff80d 	sth	r2,-32(fp)

  /* since our pkt->nb_buff size is tied to max packet size, we 
   * assume our UDP datagrams are always in one mbuf and that the 
   * mbuf 
   */
  if (m->m_len > (unsigned)udp_maxalloc()) /* but check anyway:*/
  8397d4:	e0bffd17 	ldw	r2,-12(fp)
  8397d8:	14000217 	ldw	r16,8(r2)
  8397dc:	0843ecc0 	call	843ecc <udp_maxalloc>
  8397e0:	1400042e 	bgeu	r2,r16,8397f4 <udp4_socksend+0x170>
  {
    dtrap(); /* should never happen */
  8397e4:	082a7c80 	call	82a7c8 <dtrap>
    return EMSGSIZE;  /* try to recover */
  8397e8:	00801e84 	movi	r2,122
  8397ec:	e0bfff15 	stw	r2,-4(fp)
  8397f0:	00009406 	br	839a44 <udp4_socksend+0x3c0>
  }
  pkt = udp_alloc(m->m_len, 0);    /* get a NetPort buffer for send */
  8397f4:	e0bffd17 	ldw	r2,-12(fp)
  8397f8:	10800217 	ldw	r2,8(r2)
  8397fc:	1009883a 	mov	r4,r2
  839800:	000b883a 	mov	r5,zero
  839804:	0843e0c0 	call	843e0c <udp_alloc>
  839808:	e0bff615 	stw	r2,-40(fp)
  if (!pkt)
  83980c:	e0bff617 	ldw	r2,-40(fp)
  839810:	1004c03a 	cmpne	r2,r2,zero
  839814:	1000051e 	bne	r2,zero,83982c <udp4_socksend+0x1a8>
  {
    m_free(m);
  839818:	e13ffd17 	ldw	r4,-12(fp)
  83981c:	082b7700 	call	82b770 <m_free>
    return ENOBUFS;   /* report buffer shortages */
  839820:	00801a44 	movi	r2,105
  839824:	e0bfff15 	stw	r2,-4(fp)
  839828:	00008606 	br	839a44 <udp4_socksend+0x3c0>
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
  83982c:	e0bff617 	ldw	r2,-40(fp)
  839830:	10c00317 	ldw	r3,12(r2)
  839834:	e0bffd17 	ldw	r2,-12(fp)
  839838:	11400317 	ldw	r5,12(r2)
  83983c:	e0bffd17 	ldw	r2,-12(fp)
  839840:	10800217 	ldw	r2,8(r2)
  839844:	1809883a 	mov	r4,r3
  839848:	100d883a 	mov	r6,r2
  83984c:	08073380 	call	807338 <memcpy>
  pkt->nb_plen = m->m_len;
  839850:	e0bffd17 	ldw	r2,-12(fp)
  839854:	10c00217 	ldw	r3,8(r2)
  839858:	e0bff617 	ldw	r2,-40(fp)
  83985c:	10c00415 	stw	r3,16(r2)
  /* finished with mbuf, free it now */
  m_free(m);
  839860:	e13ffd17 	ldw	r4,-12(fp)
  839864:	082b7700 	call	82b770 <m_free>
  pkt->fhost = fhost;
  839868:	e0fff617 	ldw	r3,-40(fp)
  83986c:	e0bff717 	ldw	r2,-36(fp)
  839870:	18800715 	stw	r2,28(r3)
     * is up; if (after all that) we don't have an interface then we
     * fail with error EADDRNOTAVAIL; and finally, if we're built
     * for a single-homed configuration where there's only one
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
  839874:	e0bff717 	ldw	r2,-36(fp)
  839878:	10bfffd8 	cmpnei	r2,r2,-1
  83987c:	10004f1e 	bne	r2,zero,8399bc <udp4_socksend+0x338>
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
  839880:	e0bff917 	ldw	r2,-28(fp)
  839884:	10800317 	ldw	r2,12(r2)
  839888:	1005003a 	cmpeq	r2,r2,zero
  83988c:	1000111e 	bne	r2,zero,8398d4 <udp4_socksend+0x250>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  839890:	00803934 	movhi	r2,228
  839894:	10a9dd04 	addi	r2,r2,-22668
  839898:	10800017 	ldw	r2,0(r2)
  83989c:	e0bff515 	stw	r2,-44(fp)
  8398a0:	00000806 	br	8398c4 <udp4_socksend+0x240>
        if (ifp->n_ipaddr == udpconn->u_lhost)
  8398a4:	e0bff517 	ldw	r2,-44(fp)
  8398a8:	10c00a17 	ldw	r3,40(r2)
  8398ac:	e0bff917 	ldw	r2,-28(fp)
  8398b0:	10800317 	ldw	r2,12(r2)
  8398b4:	18802126 	beq	r3,r2,83993c <udp4_socksend+0x2b8>
  if (fhost == 0xffffffff)
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  8398b8:	e0bff517 	ldw	r2,-44(fp)
  8398bc:	10800017 	ldw	r2,0(r2)
  8398c0:	e0bff515 	stw	r2,-44(fp)
  8398c4:	e0bff517 	ldw	r2,-44(fp)
  8398c8:	1004c03a 	cmpne	r2,r2,zero
  8398cc:	103ff51e 	bne	r2,zero,8398a4 <udp4_socksend+0x220>
  8398d0:	00001a06 	br	83993c <udp4_socksend+0x2b8>
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  8398d4:	00803934 	movhi	r2,228
  8398d8:	10a9dd04 	addi	r2,r2,-22668
  8398dc:	10800017 	ldw	r2,0(r2)
  8398e0:	e0bff515 	stw	r2,-44(fp)
  8398e4:	00001206 	br	839930 <udp4_socksend+0x2ac>
        if ((ifp->n_flags & NF_BCAST) &&
  8398e8:	e0bff517 	ldw	r2,-44(fp)
  8398ec:	10802a17 	ldw	r2,168(r2)
  8398f0:	1080004c 	andi	r2,r2,1
  8398f4:	10803fcc 	andi	r2,r2,255
  8398f8:	1005003a 	cmpeq	r2,r2,zero
  8398fc:	1000091e 	bne	r2,zero,839924 <udp4_socksend+0x2a0>
  839900:	e0bff517 	ldw	r2,-44(fp)
  839904:	10802717 	ldw	r2,156(r2)
  839908:	1005003a 	cmpeq	r2,r2,zero
  83990c:	1000051e 	bne	r2,zero,839924 <udp4_socksend+0x2a0>
  839910:	e0bff517 	ldw	r2,-44(fp)
  839914:	10802717 	ldw	r2,156(r2)
  839918:	10800617 	ldw	r2,24(r2)
  83991c:	10800060 	cmpeqi	r2,r2,1
  839920:	1000061e 	bne	r2,zero,83993c <udp4_socksend+0x2b8>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  839924:	e0bff517 	ldw	r2,-44(fp)
  839928:	10800017 	ldw	r2,0(r2)
  83992c:	e0bff515 	stw	r2,-44(fp)
  839930:	e0bff517 	ldw	r2,-44(fp)
  839934:	1004c03a 	cmpne	r2,r2,zero
  839938:	103feb1e 	bne	r2,zero,8398e8 <udp4_socksend+0x264>
        if ((ifp->n_flags & NF_BCAST) &&
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
           break;
    }
    if (ifp == NULL)
  83993c:	e0bff517 	ldw	r2,-44(fp)
  839940:	1004c03a 	cmpne	r2,r2,zero
  839944:	10001a1e 	bne	r2,zero,8399b0 <udp4_socksend+0x32c>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  839948:	00803934 	movhi	r2,228
  83994c:	10a9dd04 	addi	r2,r2,-22668
  839950:	10800017 	ldw	r2,0(r2)
  839954:	e0bff515 	stw	r2,-44(fp)
  839958:	00000c06 	br	83998c <udp4_socksend+0x308>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
  83995c:	e0bff517 	ldw	r2,-44(fp)
  839960:	10802717 	ldw	r2,156(r2)
  839964:	1005003a 	cmpeq	r2,r2,zero
  839968:	1000051e 	bne	r2,zero,839980 <udp4_socksend+0x2fc>
  83996c:	e0bff517 	ldw	r2,-44(fp)
  839970:	10802717 	ldw	r2,156(r2)
  839974:	10800617 	ldw	r2,24(r2)
  839978:	10800060 	cmpeqi	r2,r2,1
  83997c:	1000061e 	bne	r2,zero,839998 <udp4_socksend+0x314>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
           break;
    }
    if (ifp == NULL)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  839980:	e0bff517 	ldw	r2,-44(fp)
  839984:	10800017 	ldw	r2,0(r2)
  839988:	e0bff515 	stw	r2,-44(fp)
  83998c:	e0bff517 	ldw	r2,-44(fp)
  839990:	1004c03a 	cmpne	r2,r2,zero
  839994:	103ff11e 	bne	r2,zero,83995c <udp4_socksend+0x2d8>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
          break;
      if (ifp == NULL)
  839998:	e0bff517 	ldw	r2,-44(fp)
  83999c:	1004c03a 	cmpne	r2,r2,zero
  8399a0:	1000031e 	bne	r2,zero,8399b0 <udp4_socksend+0x32c>
        return(EADDRNOTAVAIL);
  8399a4:	00801f44 	movi	r2,125
  8399a8:	e0bfff15 	stw	r2,-4(fp)
  8399ac:	00002506 	br	839a44 <udp4_socksend+0x3c0>
    }
    pkt->net = ifp;
  8399b0:	e0fff617 	ldw	r3,-40(fp)
  8399b4:	e0bff517 	ldw	r2,-44(fp)
  8399b8:	18800615 	stw	r2,24(r3)
#ifdef IP_MULTICAST

  /* If the socket has an IP moptions structure for multicast options,
   * place a pointer to this structure in the PACKET structure.
   */
  if (so->inp_moptions)
  8399bc:	e0bffc17 	ldw	r2,-16(fp)
  8399c0:	10800317 	ldw	r2,12(r2)
  8399c4:	1005003a 	cmpeq	r2,r2,zero
  8399c8:	1000041e 	bne	r2,zero,8399dc <udp4_socksend+0x358>
     pkt->imo = so->inp_moptions;
  8399cc:	e0bffc17 	ldw	r2,-16(fp)
  8399d0:	10c00317 	ldw	r3,12(r2)
  8399d4:	e0bff617 	ldw	r2,-40(fp)
  8399d8:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

   /* have we set options? */
   if (so->so_optsPack)
  8399dc:	e0bffc17 	ldw	r2,-16(fp)
  8399e0:	10801f17 	ldw	r2,124(r2)
  8399e4:	1005003a 	cmpeq	r2,r2,zero
  8399e8:	1000041e 	bne	r2,zero,8399fc <udp4_socksend+0x378>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */
  8399ec:	e0bffc17 	ldw	r2,-16(fp)
  8399f0:	10c01f17 	ldw	r3,124(r2)
  8399f4:	e0bff617 	ldw	r2,-40(fp)
  8399f8:	10c00c15 	stw	r3,48(r2)

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
  8399fc:	0009883a 	mov	r4,zero
  839a00:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
  e = udp_send(fport, udpconn->u_lport, pkt);
  839a04:	e13ff80b 	ldhu	r4,-32(fp)
  839a08:	e0bff917 	ldw	r2,-28(fp)
  839a0c:	1080018b 	ldhu	r2,6(r2)
  839a10:	117fffcc 	andi	r5,r2,65535
  839a14:	e1bff617 	ldw	r6,-40(fp)
  839a18:	08439540 	call	843954 <udp_send>
  839a1c:	e0bffb15 	stw	r2,-20(fp)
  LOCK_NET_RESOURCE(NET_RESID);
  839a20:	0009883a 	mov	r4,zero
  839a24:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
  if (e < 0) 
  839a28:	e0bffb17 	ldw	r2,-20(fp)
  839a2c:	1004403a 	cmpge	r2,r2,zero
  839a30:	1000031e 	bne	r2,zero,839a40 <udp4_socksend+0x3bc>
     return(e);
  839a34:	e0bffb17 	ldw	r2,-20(fp)
  839a38:	e0bfff15 	stw	r2,-4(fp)
  839a3c:	00000106 	br	839a44 <udp4_socksend+0x3c0>
  return 0;
  839a40:	e03fff15 	stw	zero,-4(fp)
  839a44:	e0bfff17 	ldw	r2,-4(fp)
}
  839a48:	e037883a 	mov	sp,fp
  839a4c:	dfc00217 	ldw	ra,8(sp)
  839a50:	df000117 	ldw	fp,4(sp)
  839a54:	dc000017 	ldw	r16,0(sp)
  839a58:	dec00304 	addi	sp,sp,12
  839a5c:	f800283a 	ret

00839a60 <udp4_sockaddr>:

int udp4_sockaddr(struct socket *so, struct mbuf *nam , int req)
{
  839a60:	defff804 	addi	sp,sp,-32
  839a64:	dfc00715 	stw	ra,28(sp)
  839a68:	df000615 	stw	fp,24(sp)
  839a6c:	df000604 	addi	fp,sp,24
  839a70:	e13ffc15 	stw	r4,-16(fp)
  839a74:	e17ffd15 	stw	r5,-12(fp)
  839a78:	e1bffe15 	stw	r6,-8(fp)
  struct sockaddr_in * sin;
  UDPCONN udpconn;

  sin = mtod(nam, struct sockaddr_in *);
  839a7c:	e0bffd17 	ldw	r2,-12(fp)
  839a80:	10800317 	ldw	r2,12(r2)
  839a84:	e0bffb15 	stw	r2,-20(fp)
  if (sin == NULL)
  839a88:	e0bffb17 	ldw	r2,-20(fp)
  839a8c:	1004c03a 	cmpne	r2,r2,zero
  839a90:	1000031e 	bne	r2,zero,839aa0 <udp4_sockaddr+0x40>
     return(EINVAL);
  839a94:	00800584 	movi	r2,22
  839a98:	e0bfff15 	stw	r2,-4(fp)
  839a9c:	00004106 	br	839ba4 <udp4_sockaddr+0x144>
  udpconn = udp_lookup(so);
  839aa0:	e13ffc17 	ldw	r4,-16(fp)
  839aa4:	0838e9c0 	call	838e9c <udp_lookup>
  839aa8:	e0bffa15 	stw	r2,-24(fp)
  if (!udpconn)
  839aac:	e0bffa17 	ldw	r2,-24(fp)
  839ab0:	1004c03a 	cmpne	r2,r2,zero
  839ab4:	1000031e 	bne	r2,zero,839ac4 <udp4_sockaddr+0x64>
     return(EINVAL);
  839ab8:	00800584 	movi	r2,22
  839abc:	e0bfff15 	stw	r2,-4(fp)
  839ac0:	00003806 	br	839ba4 <udp4_sockaddr+0x144>
  nam->m_len = sizeof(*sin);
  839ac4:	e0fffd17 	ldw	r3,-12(fp)
  839ac8:	00800404 	movi	r2,16
  839acc:	18800215 	stw	r2,8(r3)
  if (req == PRU_SOCKADDR)
  839ad0:	e0bffe17 	ldw	r2,-8(fp)
  839ad4:	108003d8 	cmpnei	r2,r2,15
  839ad8:	1000191e 	bne	r2,zero,839b40 <udp4_sockaddr+0xe0>
  {
     sin->sin_family = AF_INET;
  839adc:	e0fffb17 	ldw	r3,-20(fp)
  839ae0:	00800084 	movi	r2,2
  839ae4:	1880000d 	sth	r2,0(r3)
     sin->sin_port = htons(udpconn->u_lport);
  839ae8:	e0bffa17 	ldw	r2,-24(fp)
  839aec:	1080018b 	ldhu	r2,6(r2)
  839af0:	10bfffcc 	andi	r2,r2,65535
  839af4:	1004d23a 	srli	r2,r2,8
  839af8:	10803fcc 	andi	r2,r2,255
  839afc:	1009883a 	mov	r4,r2
  839b00:	e0bffa17 	ldw	r2,-24(fp)
  839b04:	1080018b 	ldhu	r2,6(r2)
  839b08:	10bfffcc 	andi	r2,r2,65535
  839b0c:	1004923a 	slli	r2,r2,8
  839b10:	1007883a 	mov	r3,r2
  839b14:	00bfc004 	movi	r2,-256
  839b18:	1884703a 	and	r2,r3,r2
  839b1c:	2084b03a 	or	r2,r4,r2
  839b20:	1007883a 	mov	r3,r2
  839b24:	e0bffb17 	ldw	r2,-20(fp)
  839b28:	10c0008d 	sth	r3,2(r2)
     sin->sin_addr.s_addr = udpconn->u_lhost;
  839b2c:	e0bffa17 	ldw	r2,-24(fp)
  839b30:	10c00317 	ldw	r3,12(r2)
  839b34:	e0bffb17 	ldw	r2,-20(fp)
  839b38:	10c00115 	stw	r3,4(r2)
  839b3c:	00001806 	br	839ba0 <udp4_sockaddr+0x140>
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
  839b40:	e0fffb17 	ldw	r3,-20(fp)
  839b44:	00800084 	movi	r2,2
  839b48:	1880000d 	sth	r2,0(r3)
    sin->sin_port = htons(udpconn->u_fport);
  839b4c:	e0bffa17 	ldw	r2,-24(fp)
  839b50:	1080020b 	ldhu	r2,8(r2)
  839b54:	10bfffcc 	andi	r2,r2,65535
  839b58:	1004d23a 	srli	r2,r2,8
  839b5c:	10803fcc 	andi	r2,r2,255
  839b60:	1009883a 	mov	r4,r2
  839b64:	e0bffa17 	ldw	r2,-24(fp)
  839b68:	1080020b 	ldhu	r2,8(r2)
  839b6c:	10bfffcc 	andi	r2,r2,65535
  839b70:	1004923a 	slli	r2,r2,8
  839b74:	1007883a 	mov	r3,r2
  839b78:	00bfc004 	movi	r2,-256
  839b7c:	1884703a 	and	r2,r3,r2
  839b80:	2084b03a 	or	r2,r4,r2
  839b84:	1007883a 	mov	r3,r2
  839b88:	e0bffb17 	ldw	r2,-20(fp)
  839b8c:	10c0008d 	sth	r3,2(r2)
    sin->sin_addr.s_addr = udpconn->u_fhost;
  839b90:	e0bffa17 	ldw	r2,-24(fp)
  839b94:	10c00417 	ldw	r3,16(r2)
  839b98:	e0bffb17 	ldw	r2,-20(fp)
  839b9c:	10c00115 	stw	r3,4(r2)
  }
  return 0;
  839ba0:	e03fff15 	stw	zero,-4(fp)
  839ba4:	e0bfff17 	ldw	r2,-4(fp)
}
  839ba8:	e037883a 	mov	sp,fp
  839bac:	dfc00117 	ldw	ra,4(sp)
  839bb0:	df000017 	ldw	fp,0(sp)
  839bb4:	dec00204 	addi	sp,sp,8
  839bb8:	f800283a 	ret

00839bbc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  839bbc:	defff404 	addi	sp,sp,-48
  839bc0:	df000b15 	stw	fp,44(sp)
  839bc4:	df000b04 	addi	fp,sp,44
  839bc8:	e13ffb15 	stw	r4,-20(fp)
  839bcc:	e17ffc15 	stw	r5,-16(fp)
  839bd0:	e1bffd15 	stw	r6,-12(fp)
  839bd4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  839bd8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  839bdc:	00802174 	movhi	r2,133
  839be0:	1082e504 	addi	r2,r2,2964
  839be4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  839be8:	1005003a 	cmpeq	r2,r2,zero
  839bec:	1000411e 	bne	r2,zero,839cf4 <alt_alarm_start+0x138>
  {
    if (alarm)
  839bf0:	e0bffb17 	ldw	r2,-20(fp)
  839bf4:	1005003a 	cmpeq	r2,r2,zero
  839bf8:	10003b1e 	bne	r2,zero,839ce8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  839bfc:	e0fffb17 	ldw	r3,-20(fp)
  839c00:	e0bffd17 	ldw	r2,-12(fp)
  839c04:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  839c08:	e0fffb17 	ldw	r3,-20(fp)
  839c0c:	e0bffe17 	ldw	r2,-8(fp)
  839c10:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  839c14:	0005303a 	rdctl	r2,status
  839c18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  839c1c:	e0fff817 	ldw	r3,-32(fp)
  839c20:	00bfff84 	movi	r2,-2
  839c24:	1884703a 	and	r2,r3,r2
  839c28:	1001703a 	wrctl	status,r2
  
  return context;
  839c2c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  839c30:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  839c34:	00802174 	movhi	r2,133
  839c38:	1082e604 	addi	r2,r2,2968
  839c3c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  839c40:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  839c44:	e0fffc17 	ldw	r3,-16(fp)
  839c48:	e0bff917 	ldw	r2,-28(fp)
  839c4c:	1885883a 	add	r2,r3,r2
  839c50:	10c00044 	addi	r3,r2,1
  839c54:	e0bffb17 	ldw	r2,-20(fp)
  839c58:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  839c5c:	e0bffb17 	ldw	r2,-20(fp)
  839c60:	10c00217 	ldw	r3,8(r2)
  839c64:	e0bff917 	ldw	r2,-28(fp)
  839c68:	1880042e 	bgeu	r3,r2,839c7c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  839c6c:	e0fffb17 	ldw	r3,-20(fp)
  839c70:	00800044 	movi	r2,1
  839c74:	18800405 	stb	r2,16(r3)
  839c78:	00000206 	br	839c84 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  839c7c:	e0bffb17 	ldw	r2,-20(fp)
  839c80:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  839c84:	e0fffb17 	ldw	r3,-20(fp)
  839c88:	00802174 	movhi	r2,133
  839c8c:	10828b04 	addi	r2,r2,2604
  839c90:	e0bff615 	stw	r2,-40(fp)
  839c94:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  839c98:	e0fff717 	ldw	r3,-36(fp)
  839c9c:	e0bff617 	ldw	r2,-40(fp)
  839ca0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  839ca4:	e0bff617 	ldw	r2,-40(fp)
  839ca8:	10c00017 	ldw	r3,0(r2)
  839cac:	e0bff717 	ldw	r2,-36(fp)
  839cb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  839cb4:	e0bff617 	ldw	r2,-40(fp)
  839cb8:	10c00017 	ldw	r3,0(r2)
  839cbc:	e0bff717 	ldw	r2,-36(fp)
  839cc0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  839cc4:	e0fff617 	ldw	r3,-40(fp)
  839cc8:	e0bff717 	ldw	r2,-36(fp)
  839ccc:	18800015 	stw	r2,0(r3)
  839cd0:	e0bffa17 	ldw	r2,-24(fp)
  839cd4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  839cd8:	e0bff517 	ldw	r2,-44(fp)
  839cdc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  839ce0:	e03fff15 	stw	zero,-4(fp)
  839ce4:	00000506 	br	839cfc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  839ce8:	00bffa84 	movi	r2,-22
  839cec:	e0bfff15 	stw	r2,-4(fp)
  839cf0:	00000206 	br	839cfc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  839cf4:	00bfde84 	movi	r2,-134
  839cf8:	e0bfff15 	stw	r2,-4(fp)
  839cfc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  839d00:	e037883a 	mov	sp,fp
  839d04:	df000017 	ldw	fp,0(sp)
  839d08:	dec00104 	addi	sp,sp,4
  839d0c:	f800283a 	ret

00839d10 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  839d10:	defffa04 	addi	sp,sp,-24
  839d14:	dfc00515 	stw	ra,20(sp)
  839d18:	df000415 	stw	fp,16(sp)
  839d1c:	df000404 	addi	fp,sp,16
  839d20:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  839d24:	008000c4 	movi	r2,3
  839d28:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  839d2c:	e0fffc17 	ldw	r3,-16(fp)
  839d30:	008003f4 	movhi	r2,15
  839d34:	10909004 	addi	r2,r2,16960
  839d38:	188b383a 	mul	r5,r3,r2
  839d3c:	0100bef4 	movhi	r4,763
  839d40:	213c2004 	addi	r4,r4,-3968
  839d44:	08053b80 	call	8053b8 <__udivsi3>
  839d48:	100b883a 	mov	r5,r2
  839d4c:	01200034 	movhi	r4,32768
  839d50:	213fffc4 	addi	r4,r4,-1
  839d54:	08053b80 	call	8053b8 <__udivsi3>
  839d58:	100b883a 	mov	r5,r2
  839d5c:	e13fff17 	ldw	r4,-4(fp)
  839d60:	08053b80 	call	8053b8 <__udivsi3>
  839d64:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  839d68:	e0bffd17 	ldw	r2,-12(fp)
  839d6c:	1005003a 	cmpeq	r2,r2,zero
  839d70:	1000281e 	bne	r2,zero,839e14 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  839d74:	e03ffe15 	stw	zero,-8(fp)
  839d78:	00001606 	br	839dd4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  839d7c:	00a00034 	movhi	r2,32768
  839d80:	10bfffc4 	addi	r2,r2,-1
  839d84:	10bfffc4 	addi	r2,r2,-1
  839d88:	103ffe1e 	bne	r2,zero,839d84 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  839d8c:	e0fffc17 	ldw	r3,-16(fp)
  839d90:	008003f4 	movhi	r2,15
  839d94:	10909004 	addi	r2,r2,16960
  839d98:	188b383a 	mul	r5,r3,r2
  839d9c:	0100bef4 	movhi	r4,763
  839da0:	213c2004 	addi	r4,r4,-3968
  839da4:	08053b80 	call	8053b8 <__udivsi3>
  839da8:	100b883a 	mov	r5,r2
  839dac:	01200034 	movhi	r4,32768
  839db0:	213fffc4 	addi	r4,r4,-1
  839db4:	08053b80 	call	8053b8 <__udivsi3>
  839db8:	1007883a 	mov	r3,r2
  839dbc:	e0bfff17 	ldw	r2,-4(fp)
  839dc0:	10c5c83a 	sub	r2,r2,r3
  839dc4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  839dc8:	e0bffe17 	ldw	r2,-8(fp)
  839dcc:	10800044 	addi	r2,r2,1
  839dd0:	e0bffe15 	stw	r2,-8(fp)
  839dd4:	e0fffe17 	ldw	r3,-8(fp)
  839dd8:	e0bffd17 	ldw	r2,-12(fp)
  839ddc:	18bfe716 	blt	r3,r2,839d7c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  839de0:	e0fffc17 	ldw	r3,-16(fp)
  839de4:	008003f4 	movhi	r2,15
  839de8:	10909004 	addi	r2,r2,16960
  839dec:	188b383a 	mul	r5,r3,r2
  839df0:	0100bef4 	movhi	r4,763
  839df4:	213c2004 	addi	r4,r4,-3968
  839df8:	08053b80 	call	8053b8 <__udivsi3>
  839dfc:	1007883a 	mov	r3,r2
  839e00:	e0bfff17 	ldw	r2,-4(fp)
  839e04:	1885383a 	mul	r2,r3,r2
  839e08:	10bfffc4 	addi	r2,r2,-1
  839e0c:	103ffe1e 	bne	r2,zero,839e08 <alt_busy_sleep+0xf8>
  839e10:	00000c06 	br	839e44 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  839e14:	e0fffc17 	ldw	r3,-16(fp)
  839e18:	008003f4 	movhi	r2,15
  839e1c:	10909004 	addi	r2,r2,16960
  839e20:	188b383a 	mul	r5,r3,r2
  839e24:	0100bef4 	movhi	r4,763
  839e28:	213c2004 	addi	r4,r4,-3968
  839e2c:	08053b80 	call	8053b8 <__udivsi3>
  839e30:	1007883a 	mov	r3,r2
  839e34:	e0bfff17 	ldw	r2,-4(fp)
  839e38:	1885383a 	mul	r2,r3,r2
  839e3c:	10bfffc4 	addi	r2,r2,-1
  839e40:	00bffe16 	blt	zero,r2,839e3c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  839e44:	0005883a 	mov	r2,zero
}
  839e48:	e037883a 	mov	sp,fp
  839e4c:	dfc00117 	ldw	ra,4(sp)
  839e50:	df000017 	ldw	fp,0(sp)
  839e54:	dec00204 	addi	sp,sp,8
  839e58:	f800283a 	ret

00839e5c <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  839e5c:	defff804 	addi	sp,sp,-32
  839e60:	dfc00715 	stw	ra,28(sp)
  839e64:	df000615 	stw	fp,24(sp)
  839e68:	df000604 	addi	fp,sp,24
  839e6c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  839e70:	e0bffc17 	ldw	r2,-16(fp)
  839e74:	1004803a 	cmplt	r2,r2,zero
  839e78:	1000081e 	bne	r2,zero,839e9c <alt_close+0x40>
  839e7c:	e0bffc17 	ldw	r2,-16(fp)
  839e80:	10800324 	muli	r2,r2,12
  839e84:	1007883a 	mov	r3,r2
  839e88:	00802174 	movhi	r2,133
  839e8c:	1081b204 	addi	r2,r2,1736
  839e90:	1887883a 	add	r3,r3,r2
  839e94:	e0ffff15 	stw	r3,-4(fp)
  839e98:	00000106 	br	839ea0 <alt_close+0x44>
  839e9c:	e03fff15 	stw	zero,-4(fp)
  839ea0:	e0bfff17 	ldw	r2,-4(fp)
  839ea4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  839ea8:	e0bffb17 	ldw	r2,-20(fp)
  839eac:	1005003a 	cmpeq	r2,r2,zero
  839eb0:	10001d1e 	bne	r2,zero,839f28 <alt_close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  839eb4:	e0bffb17 	ldw	r2,-20(fp)
  839eb8:	10800017 	ldw	r2,0(r2)
  839ebc:	10800417 	ldw	r2,16(r2)
  839ec0:	1005003a 	cmpeq	r2,r2,zero
  839ec4:	1000071e 	bne	r2,zero,839ee4 <alt_close+0x88>
  839ec8:	e0bffb17 	ldw	r2,-20(fp)
  839ecc:	10800017 	ldw	r2,0(r2)
  839ed0:	10800417 	ldw	r2,16(r2)
  839ed4:	e13ffb17 	ldw	r4,-20(fp)
  839ed8:	103ee83a 	callr	r2
  839edc:	e0bffe15 	stw	r2,-8(fp)
  839ee0:	00000106 	br	839ee8 <alt_close+0x8c>
  839ee4:	e03ffe15 	stw	zero,-8(fp)
  839ee8:	e0bffe17 	ldw	r2,-8(fp)
  839eec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  839ef0:	e13ffc17 	ldw	r4,-16(fp)
  839ef4:	0816c040 	call	816c04 <alt_release_fd>
    if (rval < 0)
  839ef8:	e0bffa17 	ldw	r2,-24(fp)
  839efc:	1004403a 	cmpge	r2,r2,zero
  839f00:	1000071e 	bne	r2,zero,839f20 <alt_close+0xc4>
    {
      ALT_ERRNO = -rval;
  839f04:	0839f580 	call	839f58 <alt_get_errno>
  839f08:	e0fffa17 	ldw	r3,-24(fp)
  839f0c:	00c7c83a 	sub	r3,zero,r3
  839f10:	10c00015 	stw	r3,0(r2)
      return -1;
  839f14:	00bfffc4 	movi	r2,-1
  839f18:	e0bffd15 	stw	r2,-12(fp)
  839f1c:	00000806 	br	839f40 <alt_close+0xe4>
    }
    return 0;
  839f20:	e03ffd15 	stw	zero,-12(fp)
  839f24:	00000606 	br	839f40 <alt_close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  839f28:	0839f580 	call	839f58 <alt_get_errno>
  839f2c:	1007883a 	mov	r3,r2
  839f30:	00801444 	movi	r2,81
  839f34:	18800015 	stw	r2,0(r3)
    return -1;
  839f38:	00bfffc4 	movi	r2,-1
  839f3c:	e0bffd15 	stw	r2,-12(fp)
  839f40:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  839f44:	e037883a 	mov	sp,fp
  839f48:	dfc00117 	ldw	ra,4(sp)
  839f4c:	df000017 	ldw	fp,0(sp)
  839f50:	dec00204 	addi	sp,sp,8
  839f54:	f800283a 	ret

00839f58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  839f58:	defffd04 	addi	sp,sp,-12
  839f5c:	dfc00215 	stw	ra,8(sp)
  839f60:	df000115 	stw	fp,4(sp)
  839f64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  839f68:	00802174 	movhi	r2,133
  839f6c:	1082c504 	addi	r2,r2,2836
  839f70:	10800017 	ldw	r2,0(r2)
  839f74:	1005003a 	cmpeq	r2,r2,zero
  839f78:	1000061e 	bne	r2,zero,839f94 <alt_get_errno+0x3c>
  839f7c:	00802174 	movhi	r2,133
  839f80:	1082c504 	addi	r2,r2,2836
  839f84:	10800017 	ldw	r2,0(r2)
  839f88:	103ee83a 	callr	r2
  839f8c:	e0bfff15 	stw	r2,-4(fp)
  839f90:	00000306 	br	839fa0 <alt_get_errno+0x48>
  839f94:	00802174 	movhi	r2,133
  839f98:	1082da04 	addi	r2,r2,2920
  839f9c:	e0bfff15 	stw	r2,-4(fp)
  839fa0:	e0bfff17 	ldw	r2,-4(fp)
}
  839fa4:	e037883a 	mov	sp,fp
  839fa8:	dfc00117 	ldw	ra,4(sp)
  839fac:	df000017 	ldw	fp,0(sp)
  839fb0:	dec00204 	addi	sp,sp,8
  839fb4:	f800283a 	ret

00839fb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  839fb8:	defffc04 	addi	sp,sp,-16
  839fbc:	df000315 	stw	fp,12(sp)
  839fc0:	df000304 	addi	fp,sp,12
  839fc4:	e13ffd15 	stw	r4,-12(fp)
  839fc8:	e17ffe15 	stw	r5,-8(fp)
  839fcc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  839fd0:	e0bfff17 	ldw	r2,-4(fp)
}
  839fd4:	e037883a 	mov	sp,fp
  839fd8:	df000017 	ldw	fp,0(sp)
  839fdc:	dec00104 	addi	sp,sp,4
  839fe0:	f800283a 	ret

00839fe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  839fe4:	defff904 	addi	sp,sp,-28
  839fe8:	dfc00615 	stw	ra,24(sp)
  839fec:	df000515 	stw	fp,20(sp)
  839ff0:	df000504 	addi	fp,sp,20
  839ff4:	e13ffd15 	stw	r4,-12(fp)
  839ff8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  839ffc:	e0bffd17 	ldw	r2,-12(fp)
  83a000:	1005003a 	cmpeq	r2,r2,zero
  83a004:	1000041e 	bne	r2,zero,83a018 <alt_dev_llist_insert+0x34>
  83a008:	e0bffd17 	ldw	r2,-12(fp)
  83a00c:	10800217 	ldw	r2,8(r2)
  83a010:	1004c03a 	cmpne	r2,r2,zero
  83a014:	1000071e 	bne	r2,zero,83a034 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  83a018:	083a0980 	call	83a098 <alt_get_errno>
  83a01c:	1007883a 	mov	r3,r2
  83a020:	00800584 	movi	r2,22
  83a024:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  83a028:	00bffa84 	movi	r2,-22
  83a02c:	e0bfff15 	stw	r2,-4(fp)
  83a030:	00001306 	br	83a080 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  83a034:	e0fffd17 	ldw	r3,-12(fp)
  83a038:	e0bffe17 	ldw	r2,-8(fp)
  83a03c:	e0bffb15 	stw	r2,-20(fp)
  83a040:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  83a044:	e0fffc17 	ldw	r3,-16(fp)
  83a048:	e0bffb17 	ldw	r2,-20(fp)
  83a04c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  83a050:	e0bffb17 	ldw	r2,-20(fp)
  83a054:	10c00017 	ldw	r3,0(r2)
  83a058:	e0bffc17 	ldw	r2,-16(fp)
  83a05c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  83a060:	e0bffb17 	ldw	r2,-20(fp)
  83a064:	10c00017 	ldw	r3,0(r2)
  83a068:	e0bffc17 	ldw	r2,-16(fp)
  83a06c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  83a070:	e0fffb17 	ldw	r3,-20(fp)
  83a074:	e0bffc17 	ldw	r2,-16(fp)
  83a078:	18800015 	stw	r2,0(r3)

  return 0;  
  83a07c:	e03fff15 	stw	zero,-4(fp)
  83a080:	e0bfff17 	ldw	r2,-4(fp)
}
  83a084:	e037883a 	mov	sp,fp
  83a088:	dfc00117 	ldw	ra,4(sp)
  83a08c:	df000017 	ldw	fp,0(sp)
  83a090:	dec00204 	addi	sp,sp,8
  83a094:	f800283a 	ret

0083a098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  83a098:	defffd04 	addi	sp,sp,-12
  83a09c:	dfc00215 	stw	ra,8(sp)
  83a0a0:	df000115 	stw	fp,4(sp)
  83a0a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  83a0a8:	00802174 	movhi	r2,133
  83a0ac:	1082c504 	addi	r2,r2,2836
  83a0b0:	10800017 	ldw	r2,0(r2)
  83a0b4:	1005003a 	cmpeq	r2,r2,zero
  83a0b8:	1000061e 	bne	r2,zero,83a0d4 <alt_get_errno+0x3c>
  83a0bc:	00802174 	movhi	r2,133
  83a0c0:	1082c504 	addi	r2,r2,2836
  83a0c4:	10800017 	ldw	r2,0(r2)
  83a0c8:	103ee83a 	callr	r2
  83a0cc:	e0bfff15 	stw	r2,-4(fp)
  83a0d0:	00000306 	br	83a0e0 <alt_get_errno+0x48>
  83a0d4:	00802174 	movhi	r2,133
  83a0d8:	1082da04 	addi	r2,r2,2920
  83a0dc:	e0bfff15 	stw	r2,-4(fp)
  83a0e0:	e0bfff17 	ldw	r2,-4(fp)
}
  83a0e4:	e037883a 	mov	sp,fp
  83a0e8:	dfc00117 	ldw	ra,4(sp)
  83a0ec:	df000017 	ldw	fp,0(sp)
  83a0f0:	dec00204 	addi	sp,sp,8
  83a0f4:	f800283a 	ret

0083a0f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  83a0f8:	defffd04 	addi	sp,sp,-12
  83a0fc:	dfc00215 	stw	ra,8(sp)
  83a100:	df000115 	stw	fp,4(sp)
  83a104:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  83a108:	00bfff04 	movi	r2,-4
  83a10c:	00c02174 	movhi	r3,133
  83a110:	18ea5b04 	addi	r3,r3,-22164
  83a114:	1885883a 	add	r2,r3,r2
  83a118:	e0bfff15 	stw	r2,-4(fp)
  83a11c:	00000606 	br	83a138 <_do_ctors+0x40>
        (*ctor) (); 
  83a120:	e0bfff17 	ldw	r2,-4(fp)
  83a124:	10800017 	ldw	r2,0(r2)
  83a128:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  83a12c:	e0bfff17 	ldw	r2,-4(fp)
  83a130:	10bfff04 	addi	r2,r2,-4
  83a134:	e0bfff15 	stw	r2,-4(fp)
  83a138:	e0ffff17 	ldw	r3,-4(fp)
  83a13c:	00802174 	movhi	r2,133
  83a140:	10aa5a04 	addi	r2,r2,-22168
  83a144:	18bff62e 	bgeu	r3,r2,83a120 <_do_ctors+0x28>
        (*ctor) (); 
}
  83a148:	e037883a 	mov	sp,fp
  83a14c:	dfc00117 	ldw	ra,4(sp)
  83a150:	df000017 	ldw	fp,0(sp)
  83a154:	dec00204 	addi	sp,sp,8
  83a158:	f800283a 	ret

0083a15c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  83a15c:	defffd04 	addi	sp,sp,-12
  83a160:	dfc00215 	stw	ra,8(sp)
  83a164:	df000115 	stw	fp,4(sp)
  83a168:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  83a16c:	00bfff04 	movi	r2,-4
  83a170:	00c02174 	movhi	r3,133
  83a174:	18ea5b04 	addi	r3,r3,-22164
  83a178:	1885883a 	add	r2,r3,r2
  83a17c:	e0bfff15 	stw	r2,-4(fp)
  83a180:	00000606 	br	83a19c <_do_dtors+0x40>
        (*dtor) (); 
  83a184:	e0bfff17 	ldw	r2,-4(fp)
  83a188:	10800017 	ldw	r2,0(r2)
  83a18c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  83a190:	e0bfff17 	ldw	r2,-4(fp)
  83a194:	10bfff04 	addi	r2,r2,-4
  83a198:	e0bfff15 	stw	r2,-4(fp)
  83a19c:	e0ffff17 	ldw	r3,-4(fp)
  83a1a0:	00802174 	movhi	r2,133
  83a1a4:	10aa5b04 	addi	r2,r2,-22164
  83a1a8:	18bff62e 	bgeu	r3,r2,83a184 <_do_dtors+0x28>
        (*dtor) (); 
}
  83a1ac:	e037883a 	mov	sp,fp
  83a1b0:	dfc00117 	ldw	ra,4(sp)
  83a1b4:	df000017 	ldw	fp,0(sp)
  83a1b8:	dec00204 	addi	sp,sp,8
  83a1bc:	f800283a 	ret

0083a1c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  83a1c0:	defff904 	addi	sp,sp,-28
  83a1c4:	dfc00615 	stw	ra,24(sp)
  83a1c8:	df000515 	stw	fp,20(sp)
  83a1cc:	df000504 	addi	fp,sp,20
  83a1d0:	e13ffd15 	stw	r4,-12(fp)
  83a1d4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  83a1d8:	e0bffe17 	ldw	r2,-8(fp)
  83a1dc:	10800017 	ldw	r2,0(r2)
  83a1e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  83a1e4:	e13ffd17 	ldw	r4,-12(fp)
  83a1e8:	08088440 	call	808844 <strlen>
  83a1ec:	10800044 	addi	r2,r2,1
  83a1f0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  83a1f4:	00000d06 	br	83a22c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  83a1f8:	e0bffc17 	ldw	r2,-16(fp)
  83a1fc:	11000217 	ldw	r4,8(r2)
  83a200:	e1bffb17 	ldw	r6,-20(fp)
  83a204:	e17ffd17 	ldw	r5,-12(fp)
  83a208:	080f0080 	call	80f008 <memcmp>
  83a20c:	1004c03a 	cmpne	r2,r2,zero
  83a210:	1000031e 	bne	r2,zero,83a220 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  83a214:	e0bffc17 	ldw	r2,-16(fp)
  83a218:	e0bfff15 	stw	r2,-4(fp)
  83a21c:	00000706 	br	83a23c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  83a220:	e0bffc17 	ldw	r2,-16(fp)
  83a224:	10800017 	ldw	r2,0(r2)
  83a228:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  83a22c:	e0fffe17 	ldw	r3,-8(fp)
  83a230:	e0bffc17 	ldw	r2,-16(fp)
  83a234:	10fff01e 	bne	r2,r3,83a1f8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  83a238:	e03fff15 	stw	zero,-4(fp)
  83a23c:	e0bfff17 	ldw	r2,-4(fp)
}
  83a240:	e037883a 	mov	sp,fp
  83a244:	dfc00117 	ldw	ra,4(sp)
  83a248:	df000017 	ldw	fp,0(sp)
  83a24c:	dec00204 	addi	sp,sp,8
  83a250:	f800283a 	ret

0083a254 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  83a254:	defffa04 	addi	sp,sp,-24
  83a258:	dfc00515 	stw	ra,20(sp)
  83a25c:	df000415 	stw	fp,16(sp)
  83a260:	df000404 	addi	fp,sp,16
  83a264:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  83a268:	00802174 	movhi	r2,133
  83a26c:	1082c004 	addi	r2,r2,2816
  83a270:	10800017 	ldw	r2,0(r2)
  83a274:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  83a278:	00003306 	br	83a348 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  83a27c:	e0bffd17 	ldw	r2,-12(fp)
  83a280:	11000217 	ldw	r4,8(r2)
  83a284:	08088440 	call	808844 <strlen>
  83a288:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  83a28c:	e0bffd17 	ldw	r2,-12(fp)
  83a290:	10c00217 	ldw	r3,8(r2)
  83a294:	e0bffc17 	ldw	r2,-16(fp)
  83a298:	1885883a 	add	r2,r3,r2
  83a29c:	10bfffc4 	addi	r2,r2,-1
  83a2a0:	10800003 	ldbu	r2,0(r2)
  83a2a4:	10803fcc 	andi	r2,r2,255
  83a2a8:	1080201c 	xori	r2,r2,128
  83a2ac:	10bfe004 	addi	r2,r2,-128
  83a2b0:	10800bd8 	cmpnei	r2,r2,47
  83a2b4:	1000031e 	bne	r2,zero,83a2c4 <alt_find_file+0x70>
    {
      len -= 1;
  83a2b8:	e0bffc17 	ldw	r2,-16(fp)
  83a2bc:	10bfffc4 	addi	r2,r2,-1
  83a2c0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  83a2c4:	e0bffc17 	ldw	r2,-16(fp)
  83a2c8:	1007883a 	mov	r3,r2
  83a2cc:	e0bffe17 	ldw	r2,-8(fp)
  83a2d0:	1885883a 	add	r2,r3,r2
  83a2d4:	10800003 	ldbu	r2,0(r2)
  83a2d8:	10803fcc 	andi	r2,r2,255
  83a2dc:	1080201c 	xori	r2,r2,128
  83a2e0:	10bfe004 	addi	r2,r2,-128
  83a2e4:	10800be0 	cmpeqi	r2,r2,47
  83a2e8:	10000a1e 	bne	r2,zero,83a314 <alt_find_file+0xc0>
  83a2ec:	e0bffc17 	ldw	r2,-16(fp)
  83a2f0:	1007883a 	mov	r3,r2
  83a2f4:	e0bffe17 	ldw	r2,-8(fp)
  83a2f8:	1885883a 	add	r2,r3,r2
  83a2fc:	10800003 	ldbu	r2,0(r2)
  83a300:	10803fcc 	andi	r2,r2,255
  83a304:	1080201c 	xori	r2,r2,128
  83a308:	10bfe004 	addi	r2,r2,-128
  83a30c:	1004c03a 	cmpne	r2,r2,zero
  83a310:	10000a1e 	bne	r2,zero,83a33c <alt_find_file+0xe8>
  83a314:	e0bffd17 	ldw	r2,-12(fp)
  83a318:	11000217 	ldw	r4,8(r2)
  83a31c:	e1bffc17 	ldw	r6,-16(fp)
  83a320:	e17ffe17 	ldw	r5,-8(fp)
  83a324:	080f0080 	call	80f008 <memcmp>
  83a328:	1004c03a 	cmpne	r2,r2,zero
  83a32c:	1000031e 	bne	r2,zero,83a33c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  83a330:	e0bffd17 	ldw	r2,-12(fp)
  83a334:	e0bfff15 	stw	r2,-4(fp)
  83a338:	00000806 	br	83a35c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  83a33c:	e0bffd17 	ldw	r2,-12(fp)
  83a340:	10800017 	ldw	r2,0(r2)
  83a344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  83a348:	00c02174 	movhi	r3,133
  83a34c:	18c2c004 	addi	r3,r3,2816
  83a350:	e0bffd17 	ldw	r2,-12(fp)
  83a354:	10ffc91e 	bne	r2,r3,83a27c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  83a358:	e03fff15 	stw	zero,-4(fp)
  83a35c:	e0bfff17 	ldw	r2,-4(fp)
}
  83a360:	e037883a 	mov	sp,fp
  83a364:	dfc00117 	ldw	ra,4(sp)
  83a368:	df000017 	ldw	fp,0(sp)
  83a36c:	dec00204 	addi	sp,sp,8
  83a370:	f800283a 	ret

0083a374 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  83a374:	defffb04 	addi	sp,sp,-20
  83a378:	df000415 	stw	fp,16(sp)
  83a37c:	df000404 	addi	fp,sp,16
  83a380:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  83a384:	e0bffe17 	ldw	r2,-8(fp)
  83a388:	10800217 	ldw	r2,8(r2)
  83a38c:	1004c03a 	cmpne	r2,r2,zero
  83a390:	1000031e 	bne	r2,zero,83a3a0 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  83a394:	00bffb44 	movi	r2,-19
  83a398:	e0bfff15 	stw	r2,-4(fp)
  83a39c:	00001406 	br	83a3f0 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  83a3a0:	e0fffe17 	ldw	r3,-8(fp)
  83a3a4:	00802174 	movhi	r2,133
  83a3a8:	1082c004 	addi	r2,r2,2816
  83a3ac:	e0bffc15 	stw	r2,-16(fp)
  83a3b0:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  83a3b4:	e0fffd17 	ldw	r3,-12(fp)
  83a3b8:	e0bffc17 	ldw	r2,-16(fp)
  83a3bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  83a3c0:	e0bffc17 	ldw	r2,-16(fp)
  83a3c4:	10c00017 	ldw	r3,0(r2)
  83a3c8:	e0bffd17 	ldw	r2,-12(fp)
  83a3cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  83a3d0:	e0bffc17 	ldw	r2,-16(fp)
  83a3d4:	10c00017 	ldw	r3,0(r2)
  83a3d8:	e0bffd17 	ldw	r2,-12(fp)
  83a3dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  83a3e0:	e0fffc17 	ldw	r3,-16(fp)
  83a3e4:	e0bffd17 	ldw	r2,-12(fp)
  83a3e8:	18800015 	stw	r2,0(r3)

  return 0;
  83a3ec:	e03fff15 	stw	zero,-4(fp)
  83a3f0:	e0bfff17 	ldw	r2,-4(fp)
} 
  83a3f4:	e037883a 	mov	sp,fp
  83a3f8:	df000017 	ldw	fp,0(sp)
  83a3fc:	dec00104 	addi	sp,sp,4
  83a400:	f800283a 	ret

0083a404 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  83a404:	defff804 	addi	sp,sp,-32
  83a408:	dfc00715 	stw	ra,28(sp)
  83a40c:	df000615 	stw	fp,24(sp)
  83a410:	df000604 	addi	fp,sp,24
  83a414:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  83a418:	00bffa04 	movi	r2,-24
  83a41c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  83a420:	00802174 	movhi	r2,133
  83a424:	10833404 	addi	r2,r2,3280
  83a428:	10800017 	ldw	r2,0(r2)
  83a42c:	e0bffa15 	stw	r2,-24(fp)
  83a430:	e03ffb0d 	sth	zero,-20(fp)
  83a434:	e17ffb0b 	ldhu	r5,-20(fp)
  83a438:	e1bffe04 	addi	r6,fp,-8
  83a43c:	e13ffa17 	ldw	r4,-24(fp)
  83a440:	081daec0 	call	81daec <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  83a444:	e03ffd15 	stw	zero,-12(fp)
  83a448:	00001e06 	br	83a4c4 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  83a44c:	e0bffd17 	ldw	r2,-12(fp)
  83a450:	00c02174 	movhi	r3,133
  83a454:	18c1b204 	addi	r3,r3,1736
  83a458:	10800324 	muli	r2,r2,12
  83a45c:	10c5883a 	add	r2,r2,r3
  83a460:	10800017 	ldw	r2,0(r2)
  83a464:	1004c03a 	cmpne	r2,r2,zero
  83a468:	1000131e 	bne	r2,zero,83a4b8 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  83a46c:	e0bffd17 	ldw	r2,-12(fp)
  83a470:	00c02174 	movhi	r3,133
  83a474:	18c1b204 	addi	r3,r3,1736
  83a478:	10800324 	muli	r2,r2,12
  83a47c:	10c7883a 	add	r3,r2,r3
  83a480:	e0bfff17 	ldw	r2,-4(fp)
  83a484:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  83a488:	00802174 	movhi	r2,133
  83a48c:	1082c404 	addi	r2,r2,2832
  83a490:	10c00017 	ldw	r3,0(r2)
  83a494:	e0bffd17 	ldw	r2,-12(fp)
  83a498:	1880040e 	bge	r3,r2,83a4ac <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  83a49c:	00c02174 	movhi	r3,133
  83a4a0:	18c2c404 	addi	r3,r3,2832
  83a4a4:	e0bffd17 	ldw	r2,-12(fp)
  83a4a8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  83a4ac:	e0bffd17 	ldw	r2,-12(fp)
  83a4b0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  83a4b4:	00000606 	br	83a4d0 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  83a4b8:	e0bffd17 	ldw	r2,-12(fp)
  83a4bc:	10800044 	addi	r2,r2,1
  83a4c0:	e0bffd15 	stw	r2,-12(fp)
  83a4c4:	e0bffd17 	ldw	r2,-12(fp)
  83a4c8:	10800810 	cmplti	r2,r2,32
  83a4cc:	103fdf1e 	bne	r2,zero,83a44c <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  83a4d0:	00802174 	movhi	r2,133
  83a4d4:	10833404 	addi	r2,r2,3280
  83a4d8:	11000017 	ldw	r4,0(r2)
  83a4dc:	081dee40 	call	81dee4 <OSSemPost>

  return rc;
  83a4e0:	e0bffc17 	ldw	r2,-16(fp)
}
  83a4e4:	e037883a 	mov	sp,fp
  83a4e8:	dfc00117 	ldw	ra,4(sp)
  83a4ec:	df000017 	ldw	fp,0(sp)
  83a4f0:	dec00204 	addi	sp,sp,8
  83a4f4:	f800283a 	ret

0083a4f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  83a4f8:	defff904 	addi	sp,sp,-28
  83a4fc:	dfc00615 	stw	ra,24(sp)
  83a500:	df000515 	stw	fp,20(sp)
  83a504:	df000504 	addi	fp,sp,20
  83a508:	e13ffc15 	stw	r4,-16(fp)
  83a50c:	e17ffd15 	stw	r5,-12(fp)
  83a510:	e1bffe15 	stw	r6,-8(fp)
  83a514:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  83a518:	e0800217 	ldw	r2,8(fp)
  83a51c:	d8800015 	stw	r2,0(sp)
  83a520:	e13ffc17 	ldw	r4,-16(fp)
  83a524:	e17ffd17 	ldw	r5,-12(fp)
  83a528:	e1bffe17 	ldw	r6,-8(fp)
  83a52c:	e1ffff17 	ldw	r7,-4(fp)
  83a530:	083a6cc0 	call	83a6cc <alt_iic_isr_register>
}  
  83a534:	e037883a 	mov	sp,fp
  83a538:	dfc00117 	ldw	ra,4(sp)
  83a53c:	df000017 	ldw	fp,0(sp)
  83a540:	dec00204 	addi	sp,sp,8
  83a544:	f800283a 	ret

0083a548 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  83a548:	defff904 	addi	sp,sp,-28
  83a54c:	df000615 	stw	fp,24(sp)
  83a550:	df000604 	addi	fp,sp,24
  83a554:	e13ffe15 	stw	r4,-8(fp)
  83a558:	e17fff15 	stw	r5,-4(fp)
  83a55c:	e0bfff17 	ldw	r2,-4(fp)
  83a560:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  83a564:	0005303a 	rdctl	r2,status
  83a568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  83a56c:	e0fffb17 	ldw	r3,-20(fp)
  83a570:	00bfff84 	movi	r2,-2
  83a574:	1884703a 	and	r2,r3,r2
  83a578:	1001703a 	wrctl	status,r2
  
  return context;
  83a57c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  83a580:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  83a584:	e0fffc17 	ldw	r3,-16(fp)
  83a588:	00800044 	movi	r2,1
  83a58c:	10c4983a 	sll	r2,r2,r3
  83a590:	1007883a 	mov	r3,r2
  83a594:	00802174 	movhi	r2,133
  83a598:	1082e104 	addi	r2,r2,2948
  83a59c:	10800017 	ldw	r2,0(r2)
  83a5a0:	1886b03a 	or	r3,r3,r2
  83a5a4:	00802174 	movhi	r2,133
  83a5a8:	1082e104 	addi	r2,r2,2948
  83a5ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  83a5b0:	00802174 	movhi	r2,133
  83a5b4:	1082e104 	addi	r2,r2,2948
  83a5b8:	10800017 	ldw	r2,0(r2)
  83a5bc:	100170fa 	wrctl	ienable,r2
  83a5c0:	e0bffd17 	ldw	r2,-12(fp)
  83a5c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  83a5c8:	e0bffa17 	ldw	r2,-24(fp)
  83a5cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  83a5d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  83a5d4:	e037883a 	mov	sp,fp
  83a5d8:	df000017 	ldw	fp,0(sp)
  83a5dc:	dec00104 	addi	sp,sp,4
  83a5e0:	f800283a 	ret

0083a5e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  83a5e4:	defff904 	addi	sp,sp,-28
  83a5e8:	df000615 	stw	fp,24(sp)
  83a5ec:	df000604 	addi	fp,sp,24
  83a5f0:	e13ffe15 	stw	r4,-8(fp)
  83a5f4:	e17fff15 	stw	r5,-4(fp)
  83a5f8:	e0bfff17 	ldw	r2,-4(fp)
  83a5fc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  83a600:	0005303a 	rdctl	r2,status
  83a604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  83a608:	e0fffb17 	ldw	r3,-20(fp)
  83a60c:	00bfff84 	movi	r2,-2
  83a610:	1884703a 	and	r2,r3,r2
  83a614:	1001703a 	wrctl	status,r2
  
  return context;
  83a618:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  83a61c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  83a620:	e0fffc17 	ldw	r3,-16(fp)
  83a624:	00800044 	movi	r2,1
  83a628:	10c4983a 	sll	r2,r2,r3
  83a62c:	0084303a 	nor	r2,zero,r2
  83a630:	1007883a 	mov	r3,r2
  83a634:	00802174 	movhi	r2,133
  83a638:	1082e104 	addi	r2,r2,2948
  83a63c:	10800017 	ldw	r2,0(r2)
  83a640:	1886703a 	and	r3,r3,r2
  83a644:	00802174 	movhi	r2,133
  83a648:	1082e104 	addi	r2,r2,2948
  83a64c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  83a650:	00802174 	movhi	r2,133
  83a654:	1082e104 	addi	r2,r2,2948
  83a658:	10800017 	ldw	r2,0(r2)
  83a65c:	100170fa 	wrctl	ienable,r2
  83a660:	e0bffd17 	ldw	r2,-12(fp)
  83a664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  83a668:	e0bffa17 	ldw	r2,-24(fp)
  83a66c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  83a670:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  83a674:	e037883a 	mov	sp,fp
  83a678:	df000017 	ldw	fp,0(sp)
  83a67c:	dec00104 	addi	sp,sp,4
  83a680:	f800283a 	ret

0083a684 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  83a684:	defffc04 	addi	sp,sp,-16
  83a688:	df000315 	stw	fp,12(sp)
  83a68c:	df000304 	addi	fp,sp,12
  83a690:	e13ffe15 	stw	r4,-8(fp)
  83a694:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  83a698:	000530fa 	rdctl	r2,ienable
  83a69c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  83a6a0:	e0ffff17 	ldw	r3,-4(fp)
  83a6a4:	00800044 	movi	r2,1
  83a6a8:	10c4983a 	sll	r2,r2,r3
  83a6ac:	1007883a 	mov	r3,r2
  83a6b0:	e0bffd17 	ldw	r2,-12(fp)
  83a6b4:	1884703a 	and	r2,r3,r2
  83a6b8:	1004c03a 	cmpne	r2,r2,zero
}
  83a6bc:	e037883a 	mov	sp,fp
  83a6c0:	df000017 	ldw	fp,0(sp)
  83a6c4:	dec00104 	addi	sp,sp,4
  83a6c8:	f800283a 	ret

0083a6cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  83a6cc:	defff404 	addi	sp,sp,-48
  83a6d0:	dfc00b15 	stw	ra,44(sp)
  83a6d4:	df000a15 	stw	fp,40(sp)
  83a6d8:	df000a04 	addi	fp,sp,40
  83a6dc:	e13ffb15 	stw	r4,-20(fp)
  83a6e0:	e17ffc15 	stw	r5,-16(fp)
  83a6e4:	e1bffd15 	stw	r6,-12(fp)
  83a6e8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  83a6ec:	00bffa84 	movi	r2,-22
  83a6f0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  83a6f4:	e0bffc17 	ldw	r2,-16(fp)
  83a6f8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  83a6fc:	e0bff917 	ldw	r2,-28(fp)
  83a700:	10800808 	cmpgei	r2,r2,32
  83a704:	1000291e 	bne	r2,zero,83a7ac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  83a708:	0005303a 	rdctl	r2,status
  83a70c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  83a710:	e0fff717 	ldw	r3,-36(fp)
  83a714:	00bfff84 	movi	r2,-2
  83a718:	1884703a 	and	r2,r3,r2
  83a71c:	1001703a 	wrctl	status,r2
  
  return context;
  83a720:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  83a724:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  83a728:	e0bff917 	ldw	r2,-28(fp)
  83a72c:	00c03934 	movhi	r3,228
  83a730:	18e94404 	addi	r3,r3,-23280
  83a734:	100490fa 	slli	r2,r2,3
  83a738:	10c7883a 	add	r3,r2,r3
  83a73c:	e0bffd17 	ldw	r2,-12(fp)
  83a740:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  83a744:	e0bff917 	ldw	r2,-28(fp)
  83a748:	00c03934 	movhi	r3,228
  83a74c:	18e94404 	addi	r3,r3,-23280
  83a750:	100490fa 	slli	r2,r2,3
  83a754:	10c5883a 	add	r2,r2,r3
  83a758:	10c00104 	addi	r3,r2,4
  83a75c:	e0bffe17 	ldw	r2,-8(fp)
  83a760:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  83a764:	e0bffd17 	ldw	r2,-12(fp)
  83a768:	1005003a 	cmpeq	r2,r2,zero
  83a76c:	1000051e 	bne	r2,zero,83a784 <alt_iic_isr_register+0xb8>
  83a770:	e17ff917 	ldw	r5,-28(fp)
  83a774:	e13ffb17 	ldw	r4,-20(fp)
  83a778:	083a5480 	call	83a548 <alt_ic_irq_enable>
  83a77c:	e0bfff15 	stw	r2,-4(fp)
  83a780:	00000406 	br	83a794 <alt_iic_isr_register+0xc8>
  83a784:	e17ff917 	ldw	r5,-28(fp)
  83a788:	e13ffb17 	ldw	r4,-20(fp)
  83a78c:	083a5e40 	call	83a5e4 <alt_ic_irq_disable>
  83a790:	e0bfff15 	stw	r2,-4(fp)
  83a794:	e0bfff17 	ldw	r2,-4(fp)
  83a798:	e0bffa15 	stw	r2,-24(fp)
  83a79c:	e0bff817 	ldw	r2,-32(fp)
  83a7a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  83a7a4:	e0bff617 	ldw	r2,-40(fp)
  83a7a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  83a7ac:	e0bffa17 	ldw	r2,-24(fp)
}
  83a7b0:	e037883a 	mov	sp,fp
  83a7b4:	dfc00117 	ldw	ra,4(sp)
  83a7b8:	df000017 	ldw	fp,0(sp)
  83a7bc:	dec00204 	addi	sp,sp,8
  83a7c0:	f800283a 	ret

0083a7c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  83a7c4:	defff904 	addi	sp,sp,-28
  83a7c8:	dfc00615 	stw	ra,24(sp)
  83a7cc:	df000515 	stw	fp,20(sp)
  83a7d0:	df000504 	addi	fp,sp,20
  83a7d4:	e13ffc15 	stw	r4,-16(fp)
  83a7d8:	e17ffd15 	stw	r5,-12(fp)
  83a7dc:	e1bffe15 	stw	r6,-8(fp)
  83a7e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  83a7e4:	e13ffd17 	ldw	r4,-12(fp)
  83a7e8:	e17ffe17 	ldw	r5,-8(fp)
  83a7ec:	e1bfff17 	ldw	r6,-4(fp)
  83a7f0:	0816a1c0 	call	816a1c <open>
  83a7f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  83a7f8:	e0bffb17 	ldw	r2,-20(fp)
  83a7fc:	1004803a 	cmplt	r2,r2,zero
  83a800:	10001c1e 	bne	r2,zero,83a874 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  83a804:	e0bffb17 	ldw	r2,-20(fp)
  83a808:	00c02174 	movhi	r3,133
  83a80c:	18c1b204 	addi	r3,r3,1736
  83a810:	10800324 	muli	r2,r2,12
  83a814:	10c5883a 	add	r2,r2,r3
  83a818:	10c00017 	ldw	r3,0(r2)
  83a81c:	e0bffc17 	ldw	r2,-16(fp)
  83a820:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  83a824:	e0bffb17 	ldw	r2,-20(fp)
  83a828:	00c02174 	movhi	r3,133
  83a82c:	18c1b204 	addi	r3,r3,1736
  83a830:	10800324 	muli	r2,r2,12
  83a834:	10c5883a 	add	r2,r2,r3
  83a838:	10800104 	addi	r2,r2,4
  83a83c:	10c00017 	ldw	r3,0(r2)
  83a840:	e0bffc17 	ldw	r2,-16(fp)
  83a844:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  83a848:	e0bffb17 	ldw	r2,-20(fp)
  83a84c:	00c02174 	movhi	r3,133
  83a850:	18c1b204 	addi	r3,r3,1736
  83a854:	10800324 	muli	r2,r2,12
  83a858:	10c5883a 	add	r2,r2,r3
  83a85c:	10800204 	addi	r2,r2,8
  83a860:	10c00017 	ldw	r3,0(r2)
  83a864:	e0bffc17 	ldw	r2,-16(fp)
  83a868:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  83a86c:	e13ffb17 	ldw	r4,-20(fp)
  83a870:	0816c040 	call	816c04 <alt_release_fd>
  }
} 
  83a874:	e037883a 	mov	sp,fp
  83a878:	dfc00117 	ldw	ra,4(sp)
  83a87c:	df000017 	ldw	fp,0(sp)
  83a880:	dec00204 	addi	sp,sp,8
  83a884:	f800283a 	ret

0083a888 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  83a888:	defffb04 	addi	sp,sp,-20
  83a88c:	dfc00415 	stw	ra,16(sp)
  83a890:	df000315 	stw	fp,12(sp)
  83a894:	df000304 	addi	fp,sp,12
  83a898:	e13ffd15 	stw	r4,-12(fp)
  83a89c:	e17ffe15 	stw	r5,-8(fp)
  83a8a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  83a8a4:	01002174 	movhi	r4,133
  83a8a8:	2101b504 	addi	r4,r4,1748
  83a8ac:	e17ffd17 	ldw	r5,-12(fp)
  83a8b0:	01800044 	movi	r6,1
  83a8b4:	01c07fc4 	movi	r7,511
  83a8b8:	083a7c40 	call	83a7c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  83a8bc:	01002174 	movhi	r4,133
  83a8c0:	2101b204 	addi	r4,r4,1736
  83a8c4:	e17ffe17 	ldw	r5,-8(fp)
  83a8c8:	000d883a 	mov	r6,zero
  83a8cc:	01c07fc4 	movi	r7,511
  83a8d0:	083a7c40 	call	83a7c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  83a8d4:	01002174 	movhi	r4,133
  83a8d8:	2101b804 	addi	r4,r4,1760
  83a8dc:	e17fff17 	ldw	r5,-4(fp)
  83a8e0:	01800044 	movi	r6,1
  83a8e4:	01c07fc4 	movi	r7,511
  83a8e8:	083a7c40 	call	83a7c4 <alt_open_fd>
}  
  83a8ec:	e037883a 	mov	sp,fp
  83a8f0:	dfc00117 	ldw	ra,4(sp)
  83a8f4:	df000017 	ldw	fp,0(sp)
  83a8f8:	dec00204 	addi	sp,sp,8
  83a8fc:	f800283a 	ret

0083a900 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  83a900:	defff704 	addi	sp,sp,-36
  83a904:	dfc00815 	stw	ra,32(sp)
  83a908:	df000715 	stw	fp,28(sp)
  83a90c:	df000704 	addi	fp,sp,28
  83a910:	e13ffb15 	stw	r4,-20(fp)
  83a914:	e17ffc15 	stw	r5,-16(fp)
  83a918:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  83a91c:	e0bffb17 	ldw	r2,-20(fp)
  83a920:	1004803a 	cmplt	r2,r2,zero
  83a924:	1000081e 	bne	r2,zero,83a948 <alt_read+0x48>
  83a928:	e0bffb17 	ldw	r2,-20(fp)
  83a92c:	10800324 	muli	r2,r2,12
  83a930:	1007883a 	mov	r3,r2
  83a934:	00802174 	movhi	r2,133
  83a938:	1081b204 	addi	r2,r2,1736
  83a93c:	1887883a 	add	r3,r3,r2
  83a940:	e0ffff15 	stw	r3,-4(fp)
  83a944:	00000106 	br	83a94c <alt_read+0x4c>
  83a948:	e03fff15 	stw	zero,-4(fp)
  83a94c:	e0bfff17 	ldw	r2,-4(fp)
  83a950:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  83a954:	e0bffa17 	ldw	r2,-24(fp)
  83a958:	1005003a 	cmpeq	r2,r2,zero
  83a95c:	1000241e 	bne	r2,zero,83a9f0 <alt_read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  83a960:	e0bffa17 	ldw	r2,-24(fp)
  83a964:	10800217 	ldw	r2,8(r2)
  83a968:	108000cc 	andi	r2,r2,3
  83a96c:	10800060 	cmpeqi	r2,r2,1
  83a970:	10001a1e 	bne	r2,zero,83a9dc <alt_read+0xdc>
  83a974:	e0bffa17 	ldw	r2,-24(fp)
  83a978:	10800017 	ldw	r2,0(r2)
  83a97c:	10800517 	ldw	r2,20(r2)
  83a980:	1005003a 	cmpeq	r2,r2,zero
  83a984:	1000151e 	bne	r2,zero,83a9dc <alt_read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  83a988:	e0bffa17 	ldw	r2,-24(fp)
  83a98c:	10800017 	ldw	r2,0(r2)
  83a990:	10800517 	ldw	r2,20(r2)
  83a994:	e17ffc17 	ldw	r5,-16(fp)
  83a998:	e1bffd17 	ldw	r6,-12(fp)
  83a99c:	e13ffa17 	ldw	r4,-24(fp)
  83a9a0:	103ee83a 	callr	r2
  83a9a4:	e0bff915 	stw	r2,-28(fp)
  83a9a8:	e0bff917 	ldw	r2,-28(fp)
  83a9ac:	1004403a 	cmpge	r2,r2,zero
  83a9b0:	1000071e 	bne	r2,zero,83a9d0 <alt_read+0xd0>
        {
          ALT_ERRNO = -rval;
  83a9b4:	083aa200 	call	83aa20 <alt_get_errno>
  83a9b8:	e0fff917 	ldw	r3,-28(fp)
  83a9bc:	00c7c83a 	sub	r3,zero,r3
  83a9c0:	10c00015 	stw	r3,0(r2)
          return -1;
  83a9c4:	00bfffc4 	movi	r2,-1
  83a9c8:	e0bffe15 	stw	r2,-8(fp)
  83a9cc:	00000e06 	br	83aa08 <alt_read+0x108>
        }
        return rval;
  83a9d0:	e0bff917 	ldw	r2,-28(fp)
  83a9d4:	e0bffe15 	stw	r2,-8(fp)
  83a9d8:	00000b06 	br	83aa08 <alt_read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  83a9dc:	083aa200 	call	83aa20 <alt_get_errno>
  83a9e0:	1007883a 	mov	r3,r2
  83a9e4:	00800344 	movi	r2,13
  83a9e8:	18800015 	stw	r2,0(r3)
  83a9ec:	00000406 	br	83aa00 <alt_read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  83a9f0:	083aa200 	call	83aa20 <alt_get_errno>
  83a9f4:	1007883a 	mov	r3,r2
  83a9f8:	00801444 	movi	r2,81
  83a9fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  83aa00:	00bfffc4 	movi	r2,-1
  83aa04:	e0bffe15 	stw	r2,-8(fp)
  83aa08:	e0bffe17 	ldw	r2,-8(fp)
}
  83aa0c:	e037883a 	mov	sp,fp
  83aa10:	dfc00117 	ldw	ra,4(sp)
  83aa14:	df000017 	ldw	fp,0(sp)
  83aa18:	dec00204 	addi	sp,sp,8
  83aa1c:	f800283a 	ret

0083aa20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  83aa20:	defffd04 	addi	sp,sp,-12
  83aa24:	dfc00215 	stw	ra,8(sp)
  83aa28:	df000115 	stw	fp,4(sp)
  83aa2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  83aa30:	00802174 	movhi	r2,133
  83aa34:	1082c504 	addi	r2,r2,2836
  83aa38:	10800017 	ldw	r2,0(r2)
  83aa3c:	1005003a 	cmpeq	r2,r2,zero
  83aa40:	1000061e 	bne	r2,zero,83aa5c <alt_get_errno+0x3c>
  83aa44:	00802174 	movhi	r2,133
  83aa48:	1082c504 	addi	r2,r2,2836
  83aa4c:	10800017 	ldw	r2,0(r2)
  83aa50:	103ee83a 	callr	r2
  83aa54:	e0bfff15 	stw	r2,-4(fp)
  83aa58:	00000306 	br	83aa68 <alt_get_errno+0x48>
  83aa5c:	00802174 	movhi	r2,133
  83aa60:	1082da04 	addi	r2,r2,2920
  83aa64:	e0bfff15 	stw	r2,-4(fp)
  83aa68:	e0bfff17 	ldw	r2,-4(fp)
}
  83aa6c:	e037883a 	mov	sp,fp
  83aa70:	dfc00117 	ldw	ra,4(sp)
  83aa74:	df000017 	ldw	fp,0(sp)
  83aa78:	dec00204 	addi	sp,sp,8
  83aa7c:	f800283a 	ret

0083aa80 <alt_remap_cached>:
 * Convert a pointer to a block of uncached memory, into a block of
 * cached memory.
 */

void* alt_remap_cached (volatile void* ptr, alt_u32 len)
{
  83aa80:	defffd04 	addi	sp,sp,-12
  83aa84:	df000215 	stw	fp,8(sp)
  83aa88:	df000204 	addi	fp,sp,8
  83aa8c:	e13ffe15 	stw	r4,-8(fp)
  83aa90:	e17fff15 	stw	r5,-4(fp)
  return (void*) (((alt_u32) ptr) & ~BYPASS_DCACHE_MASK);
  83aa94:	e0bffe17 	ldw	r2,-8(fp)
  83aa98:	1007883a 	mov	r3,r2
  83aa9c:	00a00034 	movhi	r2,32768
  83aaa0:	10bfffc4 	addi	r2,r2,-1
  83aaa4:	1884703a 	and	r2,r3,r2
}
  83aaa8:	e037883a 	mov	sp,fp
  83aaac:	df000017 	ldw	fp,0(sp)
  83aab0:	dec00104 	addi	sp,sp,4
  83aab4:	f800283a 	ret

0083aab8 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
  83aab8:	defffc04 	addi	sp,sp,-16
  83aabc:	dfc00315 	stw	ra,12(sp)
  83aac0:	df000215 	stw	fp,8(sp)
  83aac4:	df000204 	addi	fp,sp,8
  83aac8:	e13ffe15 	stw	r4,-8(fp)
  83aacc:	e17fff15 	stw	r5,-4(fp)
  alt_dcache_flush (ptr, len);
  83aad0:	e13ffe17 	ldw	r4,-8(fp)
  83aad4:	e17fff17 	ldw	r5,-4(fp)
  83aad8:	08161cc0 	call	8161cc <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
  83aadc:	e0bffe17 	ldw	r2,-8(fp)
  83aae0:	10a00034 	orhi	r2,r2,32768
}
  83aae4:	e037883a 	mov	sp,fp
  83aae8:	dfc00117 	ldw	ra,4(sp)
  83aaec:	df000017 	ldw	fp,0(sp)
  83aaf0:	dec00204 	addi	sp,sp,8
  83aaf4:	f800283a 	ret

0083aaf8 <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  83aaf8:	defff704 	addi	sp,sp,-36
  83aafc:	dfc00815 	stw	ra,32(sp)
  83ab00:	df000715 	stw	fp,28(sp)
  83ab04:	df000704 	addi	fp,sp,28
  83ab08:	e13ffb15 	stw	r4,-20(fp)
  83ab0c:	e17ffc15 	stw	r5,-16(fp)
  83ab10:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  83ab14:	e0bffb17 	ldw	r2,-20(fp)
  83ab18:	1004803a 	cmplt	r2,r2,zero
  83ab1c:	1000081e 	bne	r2,zero,83ab40 <alt_write+0x48>
  83ab20:	e0bffb17 	ldw	r2,-20(fp)
  83ab24:	10800324 	muli	r2,r2,12
  83ab28:	1007883a 	mov	r3,r2
  83ab2c:	00802174 	movhi	r2,133
  83ab30:	1081b204 	addi	r2,r2,1736
  83ab34:	1887883a 	add	r3,r3,r2
  83ab38:	e0ffff15 	stw	r3,-4(fp)
  83ab3c:	00000106 	br	83ab44 <alt_write+0x4c>
  83ab40:	e03fff15 	stw	zero,-4(fp)
  83ab44:	e0bfff17 	ldw	r2,-4(fp)
  83ab48:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  83ab4c:	e0bffa17 	ldw	r2,-24(fp)
  83ab50:	1005003a 	cmpeq	r2,r2,zero
  83ab54:	1000241e 	bne	r2,zero,83abe8 <alt_write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  83ab58:	e0bffa17 	ldw	r2,-24(fp)
  83ab5c:	10800217 	ldw	r2,8(r2)
  83ab60:	108000cc 	andi	r2,r2,3
  83ab64:	1005003a 	cmpeq	r2,r2,zero
  83ab68:	10001a1e 	bne	r2,zero,83abd4 <alt_write+0xdc>
  83ab6c:	e0bffa17 	ldw	r2,-24(fp)
  83ab70:	10800017 	ldw	r2,0(r2)
  83ab74:	10800617 	ldw	r2,24(r2)
  83ab78:	1005003a 	cmpeq	r2,r2,zero
  83ab7c:	1000151e 	bne	r2,zero,83abd4 <alt_write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  83ab80:	e0bffa17 	ldw	r2,-24(fp)
  83ab84:	10800017 	ldw	r2,0(r2)
  83ab88:	10800617 	ldw	r2,24(r2)
  83ab8c:	e17ffc17 	ldw	r5,-16(fp)
  83ab90:	e1bffd17 	ldw	r6,-12(fp)
  83ab94:	e13ffa17 	ldw	r4,-24(fp)
  83ab98:	103ee83a 	callr	r2
  83ab9c:	e0bff915 	stw	r2,-28(fp)
  83aba0:	e0bff917 	ldw	r2,-28(fp)
  83aba4:	1004403a 	cmpge	r2,r2,zero
  83aba8:	1000071e 	bne	r2,zero,83abc8 <alt_write+0xd0>
      {
        ALT_ERRNO = -rval;
  83abac:	083ac180 	call	83ac18 <alt_get_errno>
  83abb0:	e0fff917 	ldw	r3,-28(fp)
  83abb4:	00c7c83a 	sub	r3,zero,r3
  83abb8:	10c00015 	stw	r3,0(r2)
        return -1;
  83abbc:	00bfffc4 	movi	r2,-1
  83abc0:	e0bffe15 	stw	r2,-8(fp)
  83abc4:	00000e06 	br	83ac00 <alt_write+0x108>
      }
      return rval;
  83abc8:	e0bff917 	ldw	r2,-28(fp)
  83abcc:	e0bffe15 	stw	r2,-8(fp)
  83abd0:	00000b06 	br	83ac00 <alt_write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  83abd4:	083ac180 	call	83ac18 <alt_get_errno>
  83abd8:	1007883a 	mov	r3,r2
  83abdc:	00800344 	movi	r2,13
  83abe0:	18800015 	stw	r2,0(r3)
  83abe4:	00000406 	br	83abf8 <alt_write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  83abe8:	083ac180 	call	83ac18 <alt_get_errno>
  83abec:	1007883a 	mov	r3,r2
  83abf0:	00801444 	movi	r2,81
  83abf4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  83abf8:	00bfffc4 	movi	r2,-1
  83abfc:	e0bffe15 	stw	r2,-8(fp)
  83ac00:	e0bffe17 	ldw	r2,-8(fp)
}
  83ac04:	e037883a 	mov	sp,fp
  83ac08:	dfc00117 	ldw	ra,4(sp)
  83ac0c:	df000017 	ldw	fp,0(sp)
  83ac10:	dec00204 	addi	sp,sp,8
  83ac14:	f800283a 	ret

0083ac18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  83ac18:	defffd04 	addi	sp,sp,-12
  83ac1c:	dfc00215 	stw	ra,8(sp)
  83ac20:	df000115 	stw	fp,4(sp)
  83ac24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  83ac28:	00802174 	movhi	r2,133
  83ac2c:	1082c504 	addi	r2,r2,2836
  83ac30:	10800017 	ldw	r2,0(r2)
  83ac34:	1005003a 	cmpeq	r2,r2,zero
  83ac38:	1000061e 	bne	r2,zero,83ac54 <alt_get_errno+0x3c>
  83ac3c:	00802174 	movhi	r2,133
  83ac40:	1082c504 	addi	r2,r2,2836
  83ac44:	10800017 	ldw	r2,0(r2)
  83ac48:	103ee83a 	callr	r2
  83ac4c:	e0bfff15 	stw	r2,-4(fp)
  83ac50:	00000306 	br	83ac60 <alt_get_errno+0x48>
  83ac54:	00802174 	movhi	r2,133
  83ac58:	1082da04 	addi	r2,r2,2920
  83ac5c:	e0bfff15 	stw	r2,-4(fp)
  83ac60:	e0bfff17 	ldw	r2,-4(fp)
}
  83ac64:	e037883a 	mov	sp,fp
  83ac68:	dfc00117 	ldw	ra,4(sp)
  83ac6c:	df000017 	ldw	fp,0(sp)
  83ac70:	dec00204 	addi	sp,sp,8
  83ac74:	f800283a 	ret

0083ac78 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  83ac78:	deffff04 	addi	sp,sp,-4
  83ac7c:	df000015 	stw	fp,0(sp)
  83ac80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  83ac84:	000170fa 	wrctl	ienable,zero
}
  83ac88:	e037883a 	mov	sp,fp
  83ac8c:	df000017 	ldw	fp,0(sp)
  83ac90:	dec00104 	addi	sp,sp,4
  83ac94:	f800283a 	ret

0083ac98 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  83ac98:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  83ac9c:	d0e00b17 	ldw	r3,-32724(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  83aca0:	d1208417 	ldw	r4,-32240(gp)

      stw ra,  0(sp)
  83aca4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  83aca8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  83acac:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  83acb0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  83acb4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  83acb8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  83acbc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  83acc0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  83acc4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  83acc8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  83accc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  83acd0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  83acd4:	083b0b80 	call	83b0b8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  83acd8:	d1207f17 	ldw	r4,-32260(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  83acdc:	d1607707 	ldb	r5,-32292(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  83ace0:	d1208415 	stw	r4,-32240(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  83ace4:	d1607745 	stb	r5,-32291(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  83ace8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  83acec:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  83acf0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  83acf4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  83acf8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  83acfc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  83ad00:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  83ad04:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  83ad08:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  83ad0c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  83ad10:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  83ad14:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  83ad18:	d0e00b15 	stw	r3,-32724(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  83ad1c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  83ad20:	f800283a 	ret

0083ad24 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  83ad24:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  83ad28:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  83ad2c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  83ad30:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  83ad34:	083b0b80 	call	83b0b8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  83ad38:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  83ad3c:	d4a07545 	stb	r18,-32299(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  83ad40:	003fe506 	br	83acd8 <OSCtxSw+0x40>

0083ad44 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  83ad44:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  83ad48:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  83ad4c:	10800054 	ori	r2,r2,1
      wrctl status, r2
  83ad50:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  83ad54:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  83ad58:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  83ad5c:	dec00204 	addi	sp,sp,8

      callr r2
  83ad60:	103ee83a 	callr	r2

      nop
  83ad64:	0001883a 	nop

0083ad68 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  83ad68:	defff704 	addi	sp,sp,-36
  83ad6c:	dfc00815 	stw	ra,32(sp)
  83ad70:	df000715 	stw	fp,28(sp)
  83ad74:	df000704 	addi	fp,sp,28
  83ad78:	e13ffc15 	stw	r4,-16(fp)
  83ad7c:	e17ffd15 	stw	r5,-12(fp)
  83ad80:	e1bffe15 	stw	r6,-8(fp)
  83ad84:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  83ad88:	e0bffe17 	ldw	r2,-8(fp)
  83ad8c:	1007883a 	mov	r3,r2
  83ad90:	00bfff04 	movi	r2,-4
  83ad94:	1884703a 	and	r2,r3,r2
  83ad98:	10bf0004 	addi	r2,r2,-1024
  83ad9c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  83ada0:	e0bff917 	ldw	r2,-28(fp)
  83ada4:	10000015 	stw	zero,0(r2)
  83ada8:	e0bff917 	ldw	r2,-28(fp)
  83adac:	10c0bb04 	addi	r3,r2,748
  83adb0:	e0bff917 	ldw	r2,-28(fp)
  83adb4:	10c00115 	stw	r3,4(r2)
  83adb8:	e0bff917 	ldw	r2,-28(fp)
  83adbc:	1080bb04 	addi	r2,r2,748
  83adc0:	10c01704 	addi	r3,r2,92
  83adc4:	e0bff917 	ldw	r2,-28(fp)
  83adc8:	10c00215 	stw	r3,8(r2)
  83adcc:	e0bff917 	ldw	r2,-28(fp)
  83add0:	1080bb04 	addi	r2,r2,748
  83add4:	10c02e04 	addi	r3,r2,184
  83add8:	e0bff917 	ldw	r2,-28(fp)
  83addc:	10c00315 	stw	r3,12(r2)
  83ade0:	e0bff917 	ldw	r2,-28(fp)
  83ade4:	10000415 	stw	zero,16(r2)
  83ade8:	e0bff917 	ldw	r2,-28(fp)
  83adec:	10800504 	addi	r2,r2,20
  83adf0:	1009883a 	mov	r4,r2
  83adf4:	01800644 	movi	r6,25
  83adf8:	000b883a 	mov	r5,zero
  83adfc:	08074b80 	call	8074b8 <memset>
  83ae00:	e0bff917 	ldw	r2,-28(fp)
  83ae04:	10000c15 	stw	zero,48(r2)
  83ae08:	e0fff917 	ldw	r3,-28(fp)
  83ae0c:	00802174 	movhi	r2,133
  83ae10:	10b72c04 	addi	r2,r2,-9040
  83ae14:	18800d15 	stw	r2,52(r3)
  83ae18:	e0bff917 	ldw	r2,-28(fp)
  83ae1c:	10000e15 	stw	zero,56(r2)
  83ae20:	e0bff917 	ldw	r2,-28(fp)
  83ae24:	10000f15 	stw	zero,60(r2)
  83ae28:	e0bff917 	ldw	r2,-28(fp)
  83ae2c:	10001015 	stw	zero,64(r2)
  83ae30:	e0bff917 	ldw	r2,-28(fp)
  83ae34:	10001115 	stw	zero,68(r2)
  83ae38:	e0bff917 	ldw	r2,-28(fp)
  83ae3c:	10001215 	stw	zero,72(r2)
  83ae40:	e0bff917 	ldw	r2,-28(fp)
  83ae44:	10001315 	stw	zero,76(r2)
  83ae48:	e0bff917 	ldw	r2,-28(fp)
  83ae4c:	10001415 	stw	zero,80(r2)
  83ae50:	e0bff917 	ldw	r2,-28(fp)
  83ae54:	10001515 	stw	zero,84(r2)
  83ae58:	e0bff917 	ldw	r2,-28(fp)
  83ae5c:	10001615 	stw	zero,88(r2)
  83ae60:	e0bff917 	ldw	r2,-28(fp)
  83ae64:	10001715 	stw	zero,92(r2)
  83ae68:	e0bff917 	ldw	r2,-28(fp)
  83ae6c:	10001805 	stb	zero,96(r2)
  83ae70:	e0bff917 	ldw	r2,-28(fp)
  83ae74:	10801f04 	addi	r2,r2,124
  83ae78:	10000015 	stw	zero,0(r2)
  83ae7c:	10000115 	stw	zero,4(r2)
  83ae80:	10000215 	stw	zero,8(r2)
  83ae84:	10000315 	stw	zero,12(r2)
  83ae88:	10000415 	stw	zero,16(r2)
  83ae8c:	10000515 	stw	zero,20(r2)
  83ae90:	10000615 	stw	zero,24(r2)
  83ae94:	10000715 	stw	zero,28(r2)
  83ae98:	10000815 	stw	zero,32(r2)
  83ae9c:	e0bff917 	ldw	r2,-28(fp)
  83aea0:	10002815 	stw	zero,160(r2)
  83aea4:	e0fff917 	ldw	r3,-28(fp)
  83aea8:	00800044 	movi	r2,1
  83aeac:	18802915 	stw	r2,164(r3)
  83aeb0:	18002a15 	stw	zero,168(r3)
  83aeb4:	e0fff917 	ldw	r3,-28(fp)
  83aeb8:	008cc384 	movi	r2,13070
  83aebc:	18802b0d 	sth	r2,172(r3)
  83aec0:	e0fff917 	ldw	r3,-28(fp)
  83aec4:	00aaf344 	movi	r2,-21555
  83aec8:	18802b8d 	sth	r2,174(r3)
  83aecc:	e0fff917 	ldw	r3,-28(fp)
  83aed0:	00848d04 	movi	r2,4660
  83aed4:	18802c0d 	sth	r2,176(r3)
  83aed8:	e0fff917 	ldw	r3,-28(fp)
  83aedc:	00b99b44 	movi	r2,-6547
  83aee0:	18802c8d 	sth	r2,178(r3)
  83aee4:	e0fff917 	ldw	r3,-28(fp)
  83aee8:	00b7bb04 	movi	r2,-8468
  83aeec:	18802d0d 	sth	r2,180(r3)
  83aef0:	e0fff917 	ldw	r3,-28(fp)
  83aef4:	00800144 	movi	r2,5
  83aef8:	18802d8d 	sth	r2,182(r3)
  83aefc:	e0fff917 	ldw	r3,-28(fp)
  83af00:	008002c4 	movi	r2,11
  83af04:	18802e0d 	sth	r2,184(r3)
  83af08:	e0bff917 	ldw	r2,-28(fp)
  83af0c:	10002f15 	stw	zero,188(r2)
  83af10:	e0bff917 	ldw	r2,-28(fp)
  83af14:	10003015 	stw	zero,192(r2)
  83af18:	e0bff917 	ldw	r2,-28(fp)
  83af1c:	10003115 	stw	zero,196(r2)
  83af20:	e0bff917 	ldw	r2,-28(fp)
  83af24:	10003215 	stw	zero,200(r2)
  83af28:	e0bff917 	ldw	r2,-28(fp)
  83af2c:	10003315 	stw	zero,204(r2)
  83af30:	e0bff917 	ldw	r2,-28(fp)
  83af34:	10003415 	stw	zero,208(r2)
  83af38:	e0bff917 	ldw	r2,-28(fp)
  83af3c:	10003e15 	stw	zero,248(r2)
  83af40:	e0bff917 	ldw	r2,-28(fp)
  83af44:	10003f15 	stw	zero,252(r2)
  83af48:	e0bff917 	ldw	r2,-28(fp)
  83af4c:	10004015 	stw	zero,256(r2)
  83af50:	e0bff917 	ldw	r2,-28(fp)
  83af54:	10004115 	stw	zero,260(r2)
  83af58:	e0bff917 	ldw	r2,-28(fp)
  83af5c:	10004215 	stw	zero,264(r2)
  83af60:	e0bff917 	ldw	r2,-28(fp)
  83af64:	10004315 	stw	zero,268(r2)
  83af68:	e0bff917 	ldw	r2,-28(fp)
  83af6c:	10004415 	stw	zero,272(r2)
  83af70:	e0bff917 	ldw	r2,-28(fp)
  83af74:	10004515 	stw	zero,276(r2)
  83af78:	e0bff917 	ldw	r2,-28(fp)
  83af7c:	10004615 	stw	zero,280(r2)
  83af80:	e0bff917 	ldw	r2,-28(fp)
  83af84:	10004715 	stw	zero,284(r2)
  83af88:	e0bff917 	ldw	r2,-28(fp)
  83af8c:	10003505 	stb	zero,212(r2)
  83af90:	e0bff917 	ldw	r2,-28(fp)
  83af94:	10003705 	stb	zero,220(r2)
  83af98:	e0bff917 	ldw	r2,-28(fp)
  83af9c:	10003d15 	stw	zero,244(r2)
  83afa0:	e0bff917 	ldw	r2,-28(fp)
  83afa4:	10005215 	stw	zero,328(r2)
  83afa8:	e0bff917 	ldw	r2,-28(fp)
  83afac:	10005315 	stw	zero,332(r2)
  83afb0:	e0bff917 	ldw	r2,-28(fp)
  83afb4:	10005415 	stw	zero,336(r2)
  83afb8:	e0bff917 	ldw	r2,-28(fp)
  83afbc:	10005515 	stw	zero,340(r2)
  83afc0:	e0bff917 	ldw	r2,-28(fp)
  83afc4:	1000b515 	stw	zero,724(r2)
  83afc8:	e0bff917 	ldw	r2,-28(fp)
  83afcc:	10007515 	stw	zero,468(r2)
  83afd0:	e0bff917 	ldw	r2,-28(fp)
  83afd4:	1000b715 	stw	zero,732(r2)
  83afd8:	e0bff917 	ldw	r2,-28(fp)
  83afdc:	1000b815 	stw	zero,736(r2)
  83afe0:	e0bff917 	ldw	r2,-28(fp)
  83afe4:	1000b915 	stw	zero,740(r2)
  83afe8:	e0bff917 	ldw	r2,-28(fp)
  83afec:	1000ba15 	stw	zero,744(r2)
  83aff0:	e0bff917 	ldw	r2,-28(fp)
  83aff4:	1080bb04 	addi	r2,r2,748
  83aff8:	1009883a 	mov	r4,r2
  83affc:	01804504 	movi	r6,276
  83b000:	000b883a 	mov	r5,zero
  83b004:	08074b80 	call	8074b8 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  83b008:	e0bff917 	ldw	r2,-28(fp)
  83b00c:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  83b010:	e0bffb17 	ldw	r2,-20(fp)
  83b014:	10bff304 	addi	r2,r2,-52
  83b018:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  83b01c:	e0bffa17 	ldw	r2,-24(fp)
  83b020:	10c00c04 	addi	r3,r2,48
  83b024:	e0bffc17 	ldw	r2,-16(fp)
  83b028:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  83b02c:	e0bffa17 	ldw	r2,-24(fp)
  83b030:	10c00b04 	addi	r3,r2,44
  83b034:	e0bffd17 	ldw	r2,-12(fp)
  83b038:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  83b03c:	e0bffa17 	ldw	r2,-24(fp)
  83b040:	10c00a04 	addi	r3,r2,40
  83b044:	e0bff917 	ldw	r2,-28(fp)
  83b048:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  83b04c:	00802134 	movhi	r2,132
  83b050:	10ab5104 	addi	r2,r2,-21180
  83b054:	10c00104 	addi	r3,r2,4
  83b058:	e0bffa17 	ldw	r2,-24(fp)
  83b05c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  83b060:	e0bffa17 	ldw	r2,-24(fp)
}
  83b064:	e037883a 	mov	sp,fp
  83b068:	dfc00117 	ldw	ra,4(sp)
  83b06c:	df000017 	ldw	fp,0(sp)
  83b070:	dec00204 	addi	sp,sp,8
  83b074:	f800283a 	ret

0083b078 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  83b078:	defffe04 	addi	sp,sp,-8
  83b07c:	df000115 	stw	fp,4(sp)
  83b080:	df000104 	addi	fp,sp,4
  83b084:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  83b088:	e037883a 	mov	sp,fp
  83b08c:	df000017 	ldw	fp,0(sp)
  83b090:	dec00104 	addi	sp,sp,4
  83b094:	f800283a 	ret

0083b098 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  83b098:	defffe04 	addi	sp,sp,-8
  83b09c:	df000115 	stw	fp,4(sp)
  83b0a0:	df000104 	addi	fp,sp,4
  83b0a4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  83b0a8:	e037883a 	mov	sp,fp
  83b0ac:	df000017 	ldw	fp,0(sp)
  83b0b0:	dec00104 	addi	sp,sp,4
  83b0b4:	f800283a 	ret

0083b0b8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  83b0b8:	deffff04 	addi	sp,sp,-4
  83b0bc:	df000015 	stw	fp,0(sp)
  83b0c0:	d839883a 	mov	fp,sp
}
  83b0c4:	e037883a 	mov	sp,fp
  83b0c8:	df000017 	ldw	fp,0(sp)
  83b0cc:	dec00104 	addi	sp,sp,4
  83b0d0:	f800283a 	ret

0083b0d4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  83b0d4:	deffff04 	addi	sp,sp,-4
  83b0d8:	df000015 	stw	fp,0(sp)
  83b0dc:	d839883a 	mov	fp,sp
}
  83b0e0:	e037883a 	mov	sp,fp
  83b0e4:	df000017 	ldw	fp,0(sp)
  83b0e8:	dec00104 	addi	sp,sp,4
  83b0ec:	f800283a 	ret

0083b0f0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  83b0f0:	defffe04 	addi	sp,sp,-8
  83b0f4:	dfc00115 	stw	ra,4(sp)
  83b0f8:	df000015 	stw	fp,0(sp)
  83b0fc:	d839883a 	mov	fp,sp
    }
#endif  
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
  83b100:	082a95c0 	call	82a95c <cticks_hook>
#endif
}
  83b104:	e037883a 	mov	sp,fp
  83b108:	dfc00117 	ldw	ra,4(sp)
  83b10c:	df000017 	ldw	fp,0(sp)
  83b110:	dec00204 	addi	sp,sp,8
  83b114:	f800283a 	ret

0083b118 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  83b118:	deffff04 	addi	sp,sp,-4
  83b11c:	df000015 	stw	fp,0(sp)
  83b120:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  83b124:	e037883a 	mov	sp,fp
  83b128:	df000017 	ldw	fp,0(sp)
  83b12c:	dec00104 	addi	sp,sp,4
  83b130:	f800283a 	ret

0083b134 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  83b134:	deffff04 	addi	sp,sp,-4
  83b138:	df000015 	stw	fp,0(sp)
  83b13c:	d839883a 	mov	fp,sp
}
  83b140:	e037883a 	mov	sp,fp
  83b144:	df000017 	ldw	fp,0(sp)
  83b148:	dec00104 	addi	sp,sp,4
  83b14c:	f800283a 	ret

0083b150 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  83b150:	deffff04 	addi	sp,sp,-4
  83b154:	df000015 	stw	fp,0(sp)
  83b158:	d839883a 	mov	fp,sp
}
  83b15c:	e037883a 	mov	sp,fp
  83b160:	df000017 	ldw	fp,0(sp)
  83b164:	dec00104 	addi	sp,sp,4
  83b168:	f800283a 	ret

0083b16c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  83b16c:	defffe04 	addi	sp,sp,-8
  83b170:	df000115 	stw	fp,4(sp)
  83b174:	df000104 	addi	fp,sp,4
  83b178:	e13fff15 	stw	r4,-4(fp)
}
  83b17c:	e037883a 	mov	sp,fp
  83b180:	df000017 	ldw	fp,0(sp)
  83b184:	dec00104 	addi	sp,sp,4
  83b188:	f800283a 	ret

0083b18c <netmain_init>:
 * RETURNS: 
 */

void 
netmain_init(void)
{
  83b18c:	defffb04 	addi	sp,sp,-20
  83b190:	dfc00415 	stw	ra,16(sp)
  83b194:	df000315 	stw	fp,12(sp)
  83b198:	dc000215 	stw	r16,8(sp)
  83b19c:	df000204 	addi	fp,sp,8
   int   e = 0;
  83b1a0:	e03fff15 	stw	zero,-4(fp)
   char *   msg;
#ifdef IP_V6
   ip6_addr host;
#endif

   printf("%s\n", name);
  83b1a4:	d1205017 	ldw	r4,-32448(gp)
  83b1a8:	08077600 	call	807760 <puts>
   printf("Copyright 1996-2008 by InterNiche Technologies. All rights reserved. \n");
  83b1ac:	01002174 	movhi	r4,133
  83b1b0:	21373804 	addi	r4,r4,-8992
  83b1b4:	08077600 	call	807760 <puts>
#ifdef IN_MENUS
   install_version("allports3.1");
#endif
#ifndef SUPERLOOP
   /* call this to do pre-task setup including intialization of port_prep */
   msg = pre_task_setup();
  83b1b8:	082b10c0 	call	82b10c <pre_task_setup>
  83b1bc:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
  83b1c0:	e0bffe17 	ldw	r2,-8(fp)
  83b1c4:	1005003a 	cmpeq	r2,r2,zero
  83b1c8:	1000021e 	bne	r2,zero,83b1d4 <netmain_init+0x48>
      panic(msg);
  83b1cc:	e13ffe17 	ldw	r4,-8(fp)
  83b1d0:	0825a2c0 	call	825a2c <panic>
      printf("global_log_create() failed\n");
   }
   glog_with_type(LOG_TYPE_INFO, "INICHE LOG initialized", 1);
#endif

   msg = ip_startup();
  83b1d4:	08235740 	call	823574 <ip_startup>
  83b1d8:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
  83b1dc:	e0bffe17 	ldw	r2,-8(fp)
  83b1e0:	1005003a 	cmpeq	r2,r2,zero
  83b1e4:	1000071e 	bne	r2,zero,83b204 <netmain_init+0x78>
   {
      printf("inet startup error: %s\n", msg);
  83b1e8:	01002174 	movhi	r4,133
  83b1ec:	21374a04 	addi	r4,r4,-8920
  83b1f0:	e17ffe17 	ldw	r5,-8(fp)
  83b1f4:	08076480 	call	807648 <printf>
      panic("IP");
  83b1f8:	01002174 	movhi	r4,133
  83b1fc:	21375004 	addi	r4,r4,-8896
  83b200:	0825a2c0 	call	825a2c <panic>
   }

#if defined(MEMDEV_SIZE) && defined(VFS_FILES)
   init_memdev(); /* init the mem and null test devices */
  83b204:	0845d140 	call	845d14 <init_memdev>
#endif

#ifdef IP_MULTICAST
#ifdef INCLUDE_TCP
   /* call the IP multicast test program */
   u_mctest_init();
  83b208:	08452dc0 	call	8452dc <u_mctest_init>

   /* clear debugging flags. Port can optionally turn them
    * back on in post_task_setup();
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    
  83b20c:	00802174 	movhi	r2,133
  83b210:	10830104 	addi	r2,r2,3076
  83b214:	10000015 	stw	zero,0(r2)

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
  83b218:	00803934 	movhi	r2,228
  83b21c:	10a9dd04 	addi	r2,r2,-22668
  83b220:	10800017 	ldw	r2,0(r2)
  83b224:	14000104 	addi	r16,r2,4
  83b228:	00803934 	movhi	r2,228
  83b22c:	10a9dd04 	addi	r2,r2,-22668
  83b230:	10800017 	ldw	r2,0(r2)
  83b234:	11000a17 	ldw	r4,40(r2)
  83b238:	082588c0 	call	82588c <print_ipad>
  83b23c:	100d883a 	mov	r6,r2
  83b240:	01002174 	movhi	r4,133
  83b244:	21375104 	addi	r4,r4,-8892
  83b248:	800b883a 	mov	r5,r16
  83b24c:	08076480 	call	807648 <printf>
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
 
#ifndef SUPERLOOP
   /* call this per-target routine after basic tasks & net are up */
   msg = post_task_setup();
  83b250:	082b1800 	call	82b180 <post_task_setup>
  83b254:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
  83b258:	e0bffe17 	ldw	r2,-8(fp)
  83b25c:	1005003a 	cmpeq	r2,r2,zero
  83b260:	1000021e 	bne	r2,zero,83b26c <netmain_init+0xe0>
      panic(msg);
  83b264:	e13ffe17 	ldw	r4,-8(fp)
  83b268:	0825a2c0 	call	825a2c <panic>
#ifdef USE_AUTOIP
   Upnp_init();      /* start Auto IP before DHCP client */
#endif   /* USE_AUTOIP */

#ifdef DHCP_CLIENT
   dhc_setup();   /* kick off any DHCP clients */
  83b26c:	08459880 	call	845988 <dhc_setup>
      panic("prep_modules");
   }
#endif
   USE_ARG(e);    /* Avoid compiler warnings */

} /* end of netmain_init() */
  83b270:	e037883a 	mov	sp,fp
  83b274:	dfc00217 	ldw	ra,8(sp)
  83b278:	df000117 	ldw	fp,4(sp)
  83b27c:	dc000017 	ldw	r16,0(sp)
  83b280:	dec00304 	addi	sp,sp,12
  83b284:	f800283a 	ret

0083b288 <icmp_port_du>:
 * RETURNS: 
 */

void
icmp_port_du(PACKET p, struct destun * pdp)
{
  83b288:	defffb04 	addi	sp,sp,-20
  83b28c:	dfc00415 	stw	ra,16(sp)
  83b290:	df000315 	stw	fp,12(sp)
  83b294:	dc000215 	stw	r16,8(sp)
  83b298:	df000204 	addi	fp,sp,8
  83b29c:	e13ffe15 	stw	r4,-8(fp)
  83b2a0:	e17fff15 	stw	r5,-4(fp)
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
  83b2a4:	e0bfff17 	ldw	r2,-4(fp)
  83b2a8:	10800003 	ldbu	r2,0(r2)
  83b2ac:	10803fcc 	andi	r2,r2,255
  83b2b0:	1080201c 	xori	r2,r2,128
  83b2b4:	10bfe004 	addi	r2,r2,-128
  83b2b8:	00c02174 	movhi	r3,133
  83b2bc:	18c21204 	addi	r3,r3,2120
  83b2c0:	1085883a 	add	r2,r2,r2
  83b2c4:	1085883a 	add	r2,r2,r2
  83b2c8:	10c5883a 	add	r2,r2,r3
  83b2cc:	14000017 	ldw	r16,0(r2)
  83b2d0:	e0bffe17 	ldw	r2,-8(fp)
  83b2d4:	11000717 	ldw	r4,28(r2)
  83b2d8:	082588c0 	call	82588c <print_ipad>
  83b2dc:	100d883a 	mov	r6,r2
  83b2e0:	01002174 	movhi	r4,133
  83b2e4:	21376104 	addi	r4,r4,-8828
  83b2e8:	800b883a 	mov	r5,r16
  83b2ec:	08076480 	call	807648 <printf>
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
   dprintf(prompt);
  83b2f0:	d1205117 	ldw	r4,-32444(gp)
  83b2f4:	08076480 	call	807648 <printf>
}
  83b2f8:	e037883a 	mov	sp,fp
  83b2fc:	dfc00217 	ldw	ra,8(sp)
  83b300:	df000117 	ldw	fp,4(sp)
  83b304:	dc000017 	ldw	r16,0(sp)
  83b308:	dec00304 	addi	sp,sp,12
  83b30c:	f800283a 	ret

0083b310 <station_state>:
 * RETURNS: 
 */

int
station_state(void * pio)
{
  83b310:	defff904 	addi	sp,sp,-28
  83b314:	dfc00615 	stw	ra,24(sp)
  83b318:	df000515 	stw	fp,20(sp)
  83b31c:	dc000415 	stw	r16,16(sp)
  83b320:	df000404 	addi	fp,sp,16
  83b324:	e13fff15 	stw	r4,-4(fp)
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
  83b328:	e03ffe15 	stw	zero,-8(fp)
  83b32c:	00803934 	movhi	r2,228
  83b330:	10a9dd04 	addi	r2,r2,-22668
  83b334:	10800017 	ldw	r2,0(r2)
  83b338:	e0bffd15 	stw	r2,-12(fp)
  83b33c:	00002206 	br	83b3c8 <station_state+0xb8>
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
  83b340:	e0bffd17 	ldw	r2,-12(fp)
  83b344:	14000104 	addi	r16,r2,4
  83b348:	e0bffd17 	ldw	r2,-12(fp)
  83b34c:	11000a17 	ldw	r4,40(r2)
  83b350:	082588c0 	call	82588c <print_ipad>
  83b354:	d8800015 	stw	r2,0(sp)
  83b358:	e13fff17 	ldw	r4,-4(fp)
  83b35c:	01402174 	movhi	r5,133
  83b360:	29776a04 	addi	r5,r5,-8792
  83b364:	e1bffe17 	ldw	r6,-8(fp)
  83b368:	800f883a 	mov	r7,r16
  83b36c:	0825c540 	call	825c54 <ns_printf>
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
  83b370:	e0bffd17 	ldw	r2,-12(fp)
  83b374:	11000c17 	ldw	r4,48(r2)
  83b378:	082588c0 	call	82588c <print_ipad>
  83b37c:	100d883a 	mov	r6,r2
  83b380:	e13fff17 	ldw	r4,-4(fp)
  83b384:	01402174 	movhi	r5,133
  83b388:	29777104 	addi	r5,r5,-8764
  83b38c:	0825c540 	call	825c54 <ns_printf>
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
  83b390:	e0bffd17 	ldw	r2,-12(fp)
  83b394:	11000d17 	ldw	r4,52(r2)
  83b398:	082588c0 	call	82588c <print_ipad>
  83b39c:	100d883a 	mov	r6,r2
  83b3a0:	e13fff17 	ldw	r4,-4(fp)
  83b3a4:	01402174 	movhi	r5,133
  83b3a8:	29777404 	addi	r5,r5,-8752
  83b3ac:	0825c540 	call	825c54 <ns_printf>
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
  83b3b0:	e0bffd17 	ldw	r2,-12(fp)
  83b3b4:	10800017 	ldw	r2,0(r2)
  83b3b8:	e0bffd15 	stw	r2,-12(fp)
  83b3bc:	e0bffe17 	ldw	r2,-8(fp)
  83b3c0:	10800044 	addi	r2,r2,1
  83b3c4:	e0bffe15 	stw	r2,-8(fp)
  83b3c8:	e0bffd17 	ldw	r2,-12(fp)
  83b3cc:	1004c03a 	cmpne	r2,r2,zero
  83b3d0:	103fdb1e 	bne	r2,zero,83b340 <station_state+0x30>
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
   }
#endif   /* NO_INET_STACK */

   ns_printf(pio, "current tick count %lu\n", cticks);
  83b3d4:	00802174 	movhi	r2,133
  83b3d8:	10832604 	addi	r2,r2,3224
  83b3dc:	11800017 	ldw	r6,0(r2)
  83b3e0:	e13fff17 	ldw	r4,-4(fp)
  83b3e4:	01402174 	movhi	r5,133
  83b3e8:	29777704 	addi	r5,r5,-8740
  83b3ec:	0825c540 	call	825c54 <ns_printf>

   ns_printf(pio, "common delay parameter:  %lu ticks (%lu ms).\n", pingdelay, (pingdelay * TIMEFOR1TICK));
  83b3f0:	d1a05217 	ldw	r6,-32440(gp)
  83b3f4:	d1e05217 	ldw	r7,-32440(gp)
  83b3f8:	e13fff17 	ldw	r4,-4(fp)
  83b3fc:	01402174 	movhi	r5,133
  83b400:	29777d04 	addi	r5,r5,-8716
  83b404:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio, "common host parameter: %s\n", print_ipad(activehost));
  83b408:	d120bf17 	ldw	r4,-32004(gp)
  83b40c:	082588c0 	call	82588c <print_ipad>
  83b410:	100d883a 	mov	r6,r2
  83b414:	e13fff17 	ldw	r4,-4(fp)
  83b418:	01402174 	movhi	r5,133
  83b41c:	29778904 	addi	r5,r5,-8668
  83b420:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio, "common length parameter: %d\n", deflength);
  83b424:	d1a05317 	ldw	r6,-32436(gp)
  83b428:	e13fff17 	ldw	r4,-4(fp)
  83b42c:	01402174 	movhi	r5,133
  83b430:	29779004 	addi	r5,r5,-8640
  83b434:	0825c540 	call	825c54 <ns_printf>
#ifdef USE_PPP
   ns_printf(pio, "current dial-in user name is %s\n", pppcfg.username);
   ns_printf(pio, "current dial-in password is %s\n", pppcfg.password);
#endif   /* USE_PPP */

   task_stats(pio);
  83b438:	e13fff17 	ldw	r4,-4(fp)
  83b43c:	083ba040 	call	83ba04 <task_stats>

   return 0;
  83b440:	0005883a 	mov	r2,zero
}
  83b444:	e037883a 	mov	sp,fp
  83b448:	dfc00217 	ldw	ra,8(sp)
  83b44c:	df000117 	ldw	fp,4(sp)
  83b450:	dc000017 	ldw	r16,0(sp)
  83b454:	dec00304 	addi	sp,sp,12
  83b458:	f800283a 	ret

0083b45c <sysuptime>:
 * RETURNS: 
 */

unsigned long
sysuptime()
{
  83b45c:	defffe04 	addi	sp,sp,-8
  83b460:	dfc00115 	stw	ra,4(sp)
  83b464:	df000015 	stw	fp,0(sp)
  83b468:	d839883a 	mov	fp,sp
   return ((cticks/TPS)*100);    /* 100ths of a sec since boot time */
  83b46c:	00802174 	movhi	r2,133
  83b470:	10832604 	addi	r2,r2,3224
  83b474:	11000017 	ldw	r4,0(r2)
  83b478:	0140fa04 	movi	r5,1000
  83b47c:	08053b80 	call	8053b8 <__udivsi3>
  83b480:	10801924 	muli	r2,r2,100
}
  83b484:	e037883a 	mov	sp,fp
  83b488:	dfc00117 	ldw	ra,4(sp)
  83b48c:	df000017 	ldw	fp,0(sp)
  83b490:	dec00204 	addi	sp,sp,8
  83b494:	f800283a 	ret

0083b498 <packet_check>:

static int inside_pktdemux = 0; 

void
packet_check(void)
{
  83b498:	defffe04 	addi	sp,sp,-8
  83b49c:	dfc00115 	stw	ra,4(sp)
  83b4a0:	df000015 	stw	fp,0(sp)
  83b4a4:	d839883a 	mov	fp,sp
   if(inside_pktdemux != 0)   /* check re-entrancy flag */
  83b4a8:	d0a0c017 	ldw	r2,-32000(gp)
  83b4ac:	1004c03a 	cmpne	r2,r2,zero
  83b4b0:	1000071e 	bne	r2,zero,83b4d0 <packet_check+0x38>
      return;           /* do not re-enter pktdemux(), packet will wait... */
   inside_pktdemux++;   /* set re-entrany flag */
  83b4b4:	d0a0c017 	ldw	r2,-32000(gp)
  83b4b8:	10800044 	addi	r2,r2,1
  83b4bc:	d0a0c015 	stw	r2,-32000(gp)
   pktdemux();          /* process low level packet input */
  83b4c0:	0822f2c0 	call	822f2c <pktdemux>
   inside_pktdemux--;   /* clear re-entrany flag */
  83b4c4:	d0a0c017 	ldw	r2,-32000(gp)
  83b4c8:	10bfffc4 	addi	r2,r2,-1
  83b4cc:	d0a0c015 	stw	r2,-32000(gp)
}
  83b4d0:	e037883a 	mov	sp,fp
  83b4d4:	dfc00117 	ldw	ra,4(sp)
  83b4d8:	df000017 	ldw	fp,0(sp)
  83b4dc:	dec00204 	addi	sp,sp,8
  83b4e0:	f800283a 	ret

0083b4e4 <mcastlist>:
 * RETURNS: 
 */

int
mcastlist(struct in_multi * multi_ptr)
{
  83b4e4:	defffe04 	addi	sp,sp,-8
  83b4e8:	df000115 	stw	fp,4(sp)
  83b4ec:	df000104 	addi	fp,sp,4
  83b4f0:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(multi_ptr);

   return 0;
  83b4f4:	0005883a 	mov	r2,zero
}
  83b4f8:	e037883a 	mov	sp,fp
  83b4fc:	df000017 	ldw	fp,0(sp)
  83b500:	dec00104 	addi	sp,sp,4
  83b504:	f800283a 	ret

0083b508 <prep_modules>:
#ifdef USE_MODEM
extern   int   prep_modem(void);
#endif   /* USE_MODEM */

int prep_modules(void)
{
  83b508:	defffd04 	addi	sp,sp,-12
  83b50c:	dfc00215 	stw	ra,8(sp)
  83b510:	df000115 	stw	fp,4(sp)
  83b514:	df000104 	addi	fp,sp,4
#ifdef IP_V6
   ip6_addr host;
   int i;
#endif

int e = 0;
  83b518:	e03fff15 	stw	zero,-4(fp)
      panic("prep_modules");
   }
#endif   /* SMTP_ALERTS */

#ifdef VFS_FILES
   e = prep_vfs();
  83b51c:	0848e700 	call	848e70 <prep_vfs>
  83b520:	e0bfff15 	stw	r2,-4(fp)
   if (e != 0)
  83b524:	e0bfff17 	ldw	r2,-4(fp)
  83b528:	1005003a 	cmpeq	r2,r2,zero
  83b52c:	1000061e 	bne	r2,zero,83b548 <prep_modules+0x40>
   {
      dprintf("VFS Module prep failed\n");
  83b530:	01002174 	movhi	r4,133
  83b534:	21379804 	addi	r4,r4,-8608
  83b538:	08077600 	call	807760 <puts>
      panic("prep_modules");
  83b53c:	01002174 	movhi	r4,133
  83b540:	21379e04 	addi	r4,r4,-8584
  83b544:	0825a2c0 	call	825a2c <panic>
   {
      dprintf("sslapp_init() failed\n");
      panic("prep_modules");
   }
#endif
   return 0;
  83b548:	0005883a 	mov	r2,zero
}
  83b54c:	e037883a 	mov	sp,fp
  83b550:	dfc00117 	ldw	ra,4(sp)
  83b554:	df000017 	ldw	fp,0(sp)
  83b558:	dec00204 	addi	sp,sp,8
  83b55c:	f800283a 	ret

0083b560 <inet_timer>:
 * RETURNS: 
 */

void
inet_timer(void)
{
  83b560:	defffe04 	addi	sp,sp,-8
  83b564:	dfc00115 	stw	ra,4(sp)
  83b568:	df000015 	stw	fp,0(sp)
  83b56c:	d839883a 	mov	fp,sp
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
  83b570:	00802174 	movhi	r2,133
  83b574:	10834404 	addi	r2,r2,3344
  83b578:	10c00017 	ldw	r3,0(r2)
  83b57c:	00802174 	movhi	r2,133
  83b580:	10832604 	addi	r2,r2,3224
  83b584:	10800017 	ldw	r2,0(r2)
  83b588:	1880012e 	bgeu	r3,r2,83b590 <inet_timer+0x30>
      ip_reasm_process_timer_tick ();
  83b58c:	0840b100 	call	840b10 <ip_reasm_process_timer_tick>
#endif

#ifdef INCLUDE_TCP
   tcp_tick();          /* run TCP timers */
  83b590:	082cd500 	call	82cd50 <tcp_tick>
#endif

#ifdef INICHE_TIMERS    /* interval timers? */
   check_interval_timers();
  83b594:	083b6240 	call	83b624 <check_interval_timers>
#endif

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Call igmp timeout routine */
   if (igmp_cticks < cticks)  /* Call igmp timeout routine 5 times per sec */
  83b598:	00802174 	movhi	r2,133
  83b59c:	10830504 	addi	r2,r2,3092
  83b5a0:	10c00017 	ldw	r3,0(r2)
  83b5a4:	00802174 	movhi	r2,133
  83b5a8:	10832604 	addi	r2,r2,3224
  83b5ac:	10800017 	ldw	r2,0(r2)
  83b5b0:	1880012e 	bgeu	r3,r2,83b5b8 <inet_timer+0x58>
      igmp_fasttimo();
  83b5b4:	0823bcc0 	call	823bcc <igmp_fasttimo>
#endif



   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
  83b5b8:	d0a0c117 	ldw	r2,-31996(gp)
  83b5bc:	00c02174 	movhi	r3,133
  83b5c0:	18c32604 	addi	r3,r3,3224
  83b5c4:	18c00017 	ldw	r3,0(r3)
  83b5c8:	10c00636 	bltu	r2,r3,83b5e4 <inet_timer+0x84>
  83b5cc:	00802174 	movhi	r2,133
  83b5d0:	10832604 	addi	r2,r2,3224
  83b5d4:	10800017 	ldw	r2,0(r2)
  83b5d8:	10c9c404 	addi	r3,r2,10000
  83b5dc:	d0a0c117 	ldw	r2,-31996(gp)
  83b5e0:	18800b2e 	bgeu	r3,r2,83b610 <inet_timer+0xb0>
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
   {
      nextppp = cticks + TPS;
  83b5e4:	00802174 	movhi	r2,133
  83b5e8:	10832604 	addi	r2,r2,3224
  83b5ec:	10800017 	ldw	r2,0(r2)
  83b5f0:	1080fa04 	addi	r2,r2,1000
  83b5f4:	d0a0c115 	stw	r2,-31996(gp)

      if (port_1s_callout != NULL)
  83b5f8:	d0a0c217 	ldw	r2,-31992(gp)
  83b5fc:	1005003a 	cmpeq	r2,r2,zero
  83b600:	1000021e 	bne	r2,zero,83b60c <inet_timer+0xac>
         (*port_1s_callout)();
  83b604:	d0a0c217 	ldw	r2,-31992(gp)
  83b608:	103ee83a 	callr	r2

#ifdef USE_PPP
      ppp_timeisup();
#endif
#ifdef DHCP_CLIENT
      dhc_second();
  83b60c:	0828e200 	call	828e20 <dhc_second>
#endif
#ifdef IPSEC
      IPSecTimer();
#endif
   }
}
  83b610:	e037883a 	mov	sp,fp
  83b614:	dfc00117 	ldw	ra,4(sp)
  83b618:	df000017 	ldw	fp,0(sp)
  83b61c:	dec00204 	addi	sp,sp,8
  83b620:	f800283a 	ret

0083b624 <check_interval_timers>:

static int numtimers = 0;     /* number of active timers */

static void
check_interval_timers(void)
{
  83b624:	defffc04 	addi	sp,sp,-16
  83b628:	dfc00315 	stw	ra,12(sp)
  83b62c:	df000215 	stw	fp,8(sp)
  83b630:	df000204 	addi	fp,sp,8
   int   i;
   int   found = 0;  /* number of valid timers found */
  83b634:	e03ffe15 	stw	zero,-8(fp)

   /* if no timers, just return */
   if (numtimers > 0)
  83b638:	d0a0c317 	ldw	r2,-31988(gp)
  83b63c:	10800050 	cmplti	r2,r2,1
  83b640:	1000591e 	bne	r2,zero,83b7a8 <check_interval_timers+0x184>
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
  83b644:	e03fff15 	stw	zero,-4(fp)
  83b648:	00005406 	br	83b79c <check_interval_timers+0x178>
      {
         if (intimers[i].callback)   /* is this timer active? */
  83b64c:	e0bfff17 	ldw	r2,-4(fp)
  83b650:	00c03934 	movhi	r3,228
  83b654:	18e98404 	addi	r3,r3,-23024
  83b658:	10800524 	muli	r2,r2,20
  83b65c:	10c5883a 	add	r2,r2,r3
  83b660:	10800017 	ldw	r2,0(r2)
  83b664:	1005003a 	cmpeq	r2,r2,zero
  83b668:	1000491e 	bne	r2,zero,83b790 <check_interval_timers+0x16c>
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
  83b66c:	e0bfff17 	ldw	r2,-4(fp)
  83b670:	00c03934 	movhi	r3,228
  83b674:	18e98404 	addi	r3,r3,-23024
  83b678:	10800524 	muli	r2,r2,20
  83b67c:	10c5883a 	add	r2,r2,r3
  83b680:	10800304 	addi	r2,r2,12
  83b684:	10c00017 	ldw	r3,0(r2)
  83b688:	00802174 	movhi	r2,133
  83b68c:	10832604 	addi	r2,r2,3224
  83b690:	10800017 	ldw	r2,0(r2)
  83b694:	1880382e 	bgeu	r3,r2,83b778 <check_interval_timers+0x154>
  83b698:	e0bfff17 	ldw	r2,-4(fp)
  83b69c:	00c03934 	movhi	r3,228
  83b6a0:	18e98404 	addi	r3,r3,-23024
  83b6a4:	10800524 	muli	r2,r2,20
  83b6a8:	10c5883a 	add	r2,r2,r3
  83b6ac:	10800404 	addi	r2,r2,16
  83b6b0:	10800017 	ldw	r2,0(r2)
  83b6b4:	1004c03a 	cmpne	r2,r2,zero
  83b6b8:	10002f1e 	bne	r2,zero,83b778 <check_interval_timers+0x154>
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
  83b6bc:	e17fff17 	ldw	r5,-4(fp)
  83b6c0:	e0bfff17 	ldw	r2,-4(fp)
  83b6c4:	00c03934 	movhi	r3,228
  83b6c8:	18e98404 	addi	r3,r3,-23024
  83b6cc:	10800524 	muli	r2,r2,20
  83b6d0:	10c5883a 	add	r2,r2,r3
  83b6d4:	10800204 	addi	r2,r2,8
  83b6d8:	10c00017 	ldw	r3,0(r2)
  83b6dc:	00802174 	movhi	r2,133
  83b6e0:	10832604 	addi	r2,r2,3224
  83b6e4:	10800017 	ldw	r2,0(r2)
  83b6e8:	1889883a 	add	r4,r3,r2
  83b6ec:	00c03934 	movhi	r3,228
  83b6f0:	18e98404 	addi	r3,r3,-23024
  83b6f4:	28800524 	muli	r2,r5,20
  83b6f8:	10c5883a 	add	r2,r2,r3
  83b6fc:	10800304 	addi	r2,r2,12
  83b700:	11000015 	stw	r4,0(r2)
               intimers[i].inuse = TRUE;
  83b704:	e0bfff17 	ldw	r2,-4(fp)
  83b708:	00c03934 	movhi	r3,228
  83b70c:	18e98404 	addi	r3,r3,-23024
  83b710:	10800524 	muli	r2,r2,20
  83b714:	10c5883a 	add	r2,r2,r3
  83b718:	10c00404 	addi	r3,r2,16
  83b71c:	00800044 	movi	r2,1
  83b720:	18800015 	stw	r2,0(r3)
               intimers[i].callback(intimers[i].parm);      /* call user routine */
  83b724:	e0bfff17 	ldw	r2,-4(fp)
  83b728:	00c03934 	movhi	r3,228
  83b72c:	18e98404 	addi	r3,r3,-23024
  83b730:	10800524 	muli	r2,r2,20
  83b734:	10c5883a 	add	r2,r2,r3
  83b738:	11400017 	ldw	r5,0(r2)
  83b73c:	e0bfff17 	ldw	r2,-4(fp)
  83b740:	00c03934 	movhi	r3,228
  83b744:	18e98404 	addi	r3,r3,-23024
  83b748:	10800524 	muli	r2,r2,20
  83b74c:	10c5883a 	add	r2,r2,r3
  83b750:	10800104 	addi	r2,r2,4
  83b754:	11000017 	ldw	r4,0(r2)
  83b758:	283ee83a 	callr	r5
               intimers[i].inuse = FALSE;
  83b75c:	e0bfff17 	ldw	r2,-4(fp)
  83b760:	00c03934 	movhi	r3,228
  83b764:	18e98404 	addi	r3,r3,-23024
  83b768:	10800524 	muli	r2,r2,20
  83b76c:	10c5883a 	add	r2,r2,r3
  83b770:	10800404 	addi	r2,r2,16
  83b774:	10000015 	stw	zero,0(r2)
            }
            /* If we've examined all the active timers, we're done */
            if (++found >= numtimers)
  83b778:	e0bffe17 	ldw	r2,-8(fp)
  83b77c:	10800044 	addi	r2,r2,1
  83b780:	e0bffe15 	stw	r2,-8(fp)
  83b784:	d0e0c317 	ldw	r3,-31988(gp)
  83b788:	e0bffe17 	ldw	r2,-8(fp)
  83b78c:	10c0060e 	bge	r2,r3,83b7a8 <check_interval_timers+0x184>

   /* if no timers, just return */
   if (numtimers > 0)
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
  83b790:	e0bfff17 	ldw	r2,-4(fp)
  83b794:	10800044 	addi	r2,r2,1
  83b798:	e0bfff15 	stw	r2,-4(fp)
  83b79c:	e0bfff17 	ldw	r2,-4(fp)
  83b7a0:	10800150 	cmplti	r2,r2,5
  83b7a4:	103fa91e 	bne	r2,zero,83b64c <check_interval_timers+0x28>
            if (++found >= numtimers)
               break;
         }
      }
   }
}
  83b7a8:	e037883a 	mov	sp,fp
  83b7ac:	dfc00117 	ldw	ra,4(sp)
  83b7b0:	df000017 	ldw	fp,0(sp)
  83b7b4:	dec00204 	addi	sp,sp,8
  83b7b8:	f800283a 	ret

0083b7bc <in_timerset>:
 * RETURNS: timer ID if OK, else if table is full.
 */

long
in_timerset(void (*callback)(long), long msecs, long parm)
{
  83b7bc:	defff804 	addi	sp,sp,-32
  83b7c0:	dfc00715 	stw	ra,28(sp)
  83b7c4:	df000615 	stw	fp,24(sp)
  83b7c8:	dc000515 	stw	r16,20(sp)
  83b7cc:	df000504 	addi	fp,sp,20
  83b7d0:	e13ffc15 	stw	r4,-16(fp)
  83b7d4:	e17ffd15 	stw	r5,-12(fp)
  83b7d8:	e1bffe15 	stw	r6,-8(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
  83b7dc:	e03ffb15 	stw	zero,-20(fp)
  83b7e0:	00004a06 	br	83b90c <in_timerset+0x150>
   {
      if(intimers[i].callback == NULL)
  83b7e4:	e0bffb17 	ldw	r2,-20(fp)
  83b7e8:	00c03934 	movhi	r3,228
  83b7ec:	18e98404 	addi	r3,r3,-23024
  83b7f0:	10800524 	muli	r2,r2,20
  83b7f4:	10c5883a 	add	r2,r2,r3
  83b7f8:	10800017 	ldw	r2,0(r2)
  83b7fc:	1004c03a 	cmpne	r2,r2,zero
  83b800:	10003f1e 	bne	r2,zero,83b900 <in_timerset+0x144>
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
  83b804:	e0bffb17 	ldw	r2,-20(fp)
  83b808:	00c03934 	movhi	r3,228
  83b80c:	18e98404 	addi	r3,r3,-23024
  83b810:	10800524 	muli	r2,r2,20
  83b814:	10c7883a 	add	r3,r2,r3
  83b818:	e0bffc17 	ldw	r2,-16(fp)
  83b81c:	18800015 	stw	r2,0(r3)
         intimers[i].parm = parm;
  83b820:	e0bffb17 	ldw	r2,-20(fp)
  83b824:	00c03934 	movhi	r3,228
  83b828:	18e98404 	addi	r3,r3,-23024
  83b82c:	10800524 	muli	r2,r2,20
  83b830:	10c5883a 	add	r2,r2,r3
  83b834:	10c00104 	addi	r3,r2,4
  83b838:	e0bffe17 	ldw	r2,-8(fp)
  83b83c:	18800015 	stw	r2,0(r3)
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
  83b840:	e43ffb17 	ldw	r16,-20(fp)
  83b844:	e0bffd17 	ldw	r2,-12(fp)
  83b848:	1100fa24 	muli	r4,r2,1000
  83b84c:	0140fa04 	movi	r5,1000
  83b850:	08053b80 	call	8053b8 <__udivsi3>
  83b854:	1009883a 	mov	r4,r2
  83b858:	00c03934 	movhi	r3,228
  83b85c:	18e98404 	addi	r3,r3,-23024
  83b860:	80800524 	muli	r2,r16,20
  83b864:	10c5883a 	add	r2,r2,r3
  83b868:	10800204 	addi	r2,r2,8
  83b86c:	11000015 	stw	r4,0(r2)
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
  83b870:	e17ffb17 	ldw	r5,-20(fp)
  83b874:	e0bffb17 	ldw	r2,-20(fp)
  83b878:	00c03934 	movhi	r3,228
  83b87c:	18e98404 	addi	r3,r3,-23024
  83b880:	10800524 	muli	r2,r2,20
  83b884:	10c5883a 	add	r2,r2,r3
  83b888:	10800204 	addi	r2,r2,8
  83b88c:	10c00017 	ldw	r3,0(r2)
  83b890:	00802174 	movhi	r2,133
  83b894:	10832604 	addi	r2,r2,3224
  83b898:	10800017 	ldw	r2,0(r2)
  83b89c:	1889883a 	add	r4,r3,r2
  83b8a0:	00c03934 	movhi	r3,228
  83b8a4:	18e98404 	addi	r3,r3,-23024
  83b8a8:	28800524 	muli	r2,r5,20
  83b8ac:	10c5883a 	add	r2,r2,r3
  83b8b0:	10800304 	addi	r2,r2,12
  83b8b4:	11000015 	stw	r4,0(r2)
		 intimers[i].inuse = FALSE;
  83b8b8:	e0bffb17 	ldw	r2,-20(fp)
  83b8bc:	00c03934 	movhi	r3,228
  83b8c0:	18e98404 	addi	r3,r3,-23024
  83b8c4:	10800524 	muli	r2,r2,20
  83b8c8:	10c5883a 	add	r2,r2,r3
  83b8cc:	10800404 	addi	r2,r2,16
  83b8d0:	10000015 	stw	zero,0(r2)
         numtimers++;
  83b8d4:	d0a0c317 	ldw	r2,-31988(gp)
  83b8d8:	10800044 	addi	r2,r2,1
  83b8dc:	d0a0c315 	stw	r2,-31988(gp)
         return (long)&intimers[i];
  83b8e0:	e0bffb17 	ldw	r2,-20(fp)
  83b8e4:	10800524 	muli	r2,r2,20
  83b8e8:	1007883a 	mov	r3,r2
  83b8ec:	00803934 	movhi	r2,228
  83b8f0:	10a98404 	addi	r2,r2,-23024
  83b8f4:	1885883a 	add	r2,r3,r2
  83b8f8:	e0bfff15 	stw	r2,-4(fp)
  83b8fc:	00000706 	br	83b91c <in_timerset+0x160>
long
in_timerset(void (*callback)(long), long msecs, long parm)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
  83b900:	e0bffb17 	ldw	r2,-20(fp)
  83b904:	10800044 	addi	r2,r2,1
  83b908:	e0bffb15 	stw	r2,-20(fp)
  83b90c:	e0bffb17 	ldw	r2,-20(fp)
  83b910:	10800150 	cmplti	r2,r2,5
  83b914:	103fb31e 	bne	r2,zero,83b7e4 <in_timerset+0x28>
		 intimers[i].inuse = FALSE;
         numtimers++;
         return (long)&intimers[i];
      }
   }
   return 0;
  83b918:	e03fff15 	stw	zero,-4(fp)
  83b91c:	e0bfff17 	ldw	r2,-4(fp)
}
  83b920:	e037883a 	mov	sp,fp
  83b924:	dfc00217 	ldw	ra,8(sp)
  83b928:	df000117 	ldw	fp,4(sp)
  83b92c:	dc000017 	ldw	r16,0(sp)
  83b930:	dec00304 	addi	sp,sp,12
  83b934:	f800283a 	ret

0083b938 <in_timerkill>:
 */


int
in_timerkill(long timer)
{
  83b938:	defffb04 	addi	sp,sp,-20
  83b93c:	dfc00415 	stw	ra,16(sp)
  83b940:	df000315 	stw	fp,12(sp)
  83b944:	df000304 	addi	fp,sp,12
  83b948:	e13ffe15 	stw	r4,-8(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
  83b94c:	e03ffd15 	stw	zero,-12(fp)
  83b950:	00001706 	br	83b9b0 <in_timerkill+0x78>
   {
      if(timer == (long)&intimers[i])
  83b954:	e0bffd17 	ldw	r2,-12(fp)
  83b958:	10800524 	muli	r2,r2,20
  83b95c:	1007883a 	mov	r3,r2
  83b960:	00803934 	movhi	r2,228
  83b964:	10a98404 	addi	r2,r2,-23024
  83b968:	1885883a 	add	r2,r3,r2
  83b96c:	1007883a 	mov	r3,r2
  83b970:	e0bffe17 	ldw	r2,-8(fp)
  83b974:	18800b1e 	bne	r3,r2,83b9a4 <in_timerkill+0x6c>
      {
         intimers[i].callback = NULL;
  83b978:	e0bffd17 	ldw	r2,-12(fp)
  83b97c:	00c03934 	movhi	r3,228
  83b980:	18e98404 	addi	r3,r3,-23024
  83b984:	10800524 	muli	r2,r2,20
  83b988:	10c5883a 	add	r2,r2,r3
  83b98c:	10000015 	stw	zero,0(r2)
         numtimers--;
  83b990:	d0a0c317 	ldw	r2,-31988(gp)
  83b994:	10bfffc4 	addi	r2,r2,-1
  83b998:	d0a0c315 	stw	r2,-31988(gp)
         return 0;      /* OK return */
  83b99c:	e03fff15 	stw	zero,-4(fp)
  83b9a0:	00000906 	br	83b9c8 <in_timerkill+0x90>
int
in_timerkill(long timer)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
  83b9a4:	e0bffd17 	ldw	r2,-12(fp)
  83b9a8:	10800044 	addi	r2,r2,1
  83b9ac:	e0bffd15 	stw	r2,-12(fp)
  83b9b0:	e0bffd17 	ldw	r2,-12(fp)
  83b9b4:	10800150 	cmplti	r2,r2,5
  83b9b8:	103fe61e 	bne	r2,zero,83b954 <in_timerkill+0x1c>
         intimers[i].callback = NULL;
         numtimers--;
         return 0;      /* OK return */
      }
   }
   dtrap();    /* timer to kill not found */
  83b9bc:	082a7c80 	call	82a7c8 <dtrap>
   return ENP_PARAM;
  83b9c0:	00bffd84 	movi	r2,-10
  83b9c4:	e0bfff15 	stw	r2,-4(fp)
  83b9c8:	e0bfff17 	ldw	r2,-4(fp)
}
  83b9cc:	e037883a 	mov	sp,fp
  83b9d0:	dfc00117 	ldw	ra,4(sp)
  83b9d4:	df000017 	ldw	fp,0(sp)
  83b9d8:	dec00204 	addi	sp,sp,8
  83b9dc:	f800283a 	ret

0083b9e0 <create_apptasks>:
#endif
/* per-application thread definitions */

int
create_apptasks(void)
{
  83b9e0:	defffe04 	addi	sp,sp,-8
  83b9e4:	df000115 	stw	fp,4(sp)
  83b9e8:	df000104 	addi	fp,sp,4
int e = 0;
  83b9ec:	e03fff15 	stw	zero,-4(fp)
#endif
/* 
 * Altera Niche Stack Nios port modification:
 * return error code, if any 
 */
   return e;
  83b9f0:	e0bfff17 	ldw	r2,-4(fp)
}
  83b9f4:	e037883a 	mov	sp,fp
  83b9f8:	df000017 	ldw	fp,0(sp)
  83b9fc:	dec00104 	addi	sp,sp,4
  83ba00:	f800283a 	ret

0083ba04 <task_stats>:
 */


void
task_stats(void * pio)
{
  83ba04:	defffd04 	addi	sp,sp,-12
  83ba08:	dfc00215 	stw	ra,8(sp)
  83ba0c:	df000115 	stw	fp,4(sp)
  83ba10:	df000104 	addi	fp,sp,4
  83ba14:	e13fff15 	stw	r4,-4(fp)
   ns_printf(pio, "Task wakeups:");
  83ba18:	e13fff17 	ldw	r4,-4(fp)
  83ba1c:	01402174 	movhi	r5,133
  83ba20:	2977a204 	addi	r5,r5,-8568
  83ba24:	0825c540 	call	825c54 <ns_printf>

#ifndef NO_INET_STACK
   ns_printf(pio, "netmain: %lu\n", netmain_wakes);
  83ba28:	00802174 	movhi	r2,133
  83ba2c:	10830804 	addi	r2,r2,3104
  83ba30:	11800017 	ldw	r6,0(r2)
  83ba34:	e13fff17 	ldw	r4,-4(fp)
  83ba38:	01402174 	movhi	r5,133
  83ba3c:	2977a604 	addi	r5,r5,-8552
  83ba40:	0825c540 	call	825c54 <ns_printf>
#endif
#ifndef NO_INET_TICK
   ns_printf(pio, "nettick: %lu\n", nettick_wakes);
  83ba44:	00802174 	movhi	r2,133
  83ba48:	10830904 	addi	r2,r2,3108
  83ba4c:	11800017 	ldw	r6,0(r2)
  83ba50:	e13fff17 	ldw	r4,-4(fp)
  83ba54:	01402174 	movhi	r5,133
  83ba58:	2977aa04 	addi	r5,r5,-8536
  83ba5c:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio, "browtask: %lu  ", browtask_wakes);
#endif
#ifdef INCLUDE_SSLAPP
   ns_printf(pio, "INCLUDE_SSLAPP: %lu  ", sslapp_wakes);
#endif
   ns_printf(pio, "\n");
  83ba60:	e13fff17 	ldw	r4,-4(fp)
  83ba64:	01402174 	movhi	r5,133
  83ba68:	2977ae04 	addi	r5,r5,-8520
  83ba6c:	0825c540 	call	825c54 <ns_printf>
}
  83ba70:	e037883a 	mov	sp,fp
  83ba74:	dfc00117 	ldw	ra,4(sp)
  83ba78:	df000017 	ldw	fp,0(sp)
  83ba7c:	dec00204 	addi	sp,sp,8
  83ba80:	f800283a 	ret

0083ba84 <fcntl>:
 * (for files and device drivers) or calls the InterNiche bsd_ioctl for 
 * sockets.
 */
 
int fcntl (int file, int cmd, ...)
{
  83ba84:	defff704 	addi	sp,sp,-36
  83ba88:	dfc00615 	stw	ra,24(sp)
  83ba8c:	df000515 	stw	fp,20(sp)
  83ba90:	df000504 	addi	fp,sp,20
  83ba94:	e13ffd15 	stw	r4,-12(fp)
  83ba98:	e1800215 	stw	r6,8(fp)
  83ba9c:	e1c00315 	stw	r7,12(fp)
  83baa0:	e17ffe15 	stw	r5,-8(fp)
  long     flags;
  va_list  argp;

  if (file < ALT_MAX_FD)
  83baa4:	e0bffd17 	ldw	r2,-12(fp)
  83baa8:	10800808 	cmpgei	r2,r2,32
  83baac:	10000e1e 	bne	r2,zero,83bae8 <fcntl+0x64>
  {
    va_start(argp, cmd);
  83bab0:	e0800204 	addi	r2,fp,8
  83bab4:	e0bffc15 	stw	r2,-16(fp)
    flags = va_arg(argp, long);
  83bab8:	e0fffc17 	ldw	r3,-16(fp)
  83babc:	18800104 	addi	r2,r3,4
  83bac0:	e0bffc15 	stw	r2,-16(fp)
  83bac4:	1805883a 	mov	r2,r3
  83bac8:	10800017 	ldw	r2,0(r2)
  83bacc:	e0bffb15 	stw	r2,-20(fp)
    va_end(argp);
    return alt_fcntl(file, cmd, flags);
  83bad0:	e13ffd17 	ldw	r4,-12(fp)
  83bad4:	e17ffe17 	ldw	r5,-8(fp)
  83bad8:	e1bffb17 	ldw	r6,-20(fp)
  83badc:	0848e940 	call	848e94 <alt_fcntl>
  83bae0:	e0bfff15 	stw	r2,-4(fp)
  83bae4:	00000d06 	br	83bb1c <fcntl+0x98>
  }
  else
  {
    va_start(argp, cmd);
  83bae8:	e0800204 	addi	r2,fp,8
  83baec:	e0bffc15 	stw	r2,-16(fp)
    flags = va_arg(argp, long);
  83baf0:	e0fffc17 	ldw	r3,-16(fp)
  83baf4:	18800104 	addi	r2,r3,4
  83baf8:	e0bffc15 	stw	r2,-16(fp)
  83bafc:	1805883a 	mov	r2,r3
  83bb00:	10800017 	ldw	r2,0(r2)
  83bb04:	e0bffb15 	stw	r2,-20(fp)
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
  83bb08:	e17ffe17 	ldw	r5,-8(fp)
  83bb0c:	e13ffd17 	ldw	r4,-12(fp)
  83bb10:	e1bffb17 	ldw	r6,-20(fp)
  83bb14:	082509c0 	call	82509c <bsd_ioctl>
  83bb18:	e0bfff15 	stw	r2,-4(fp)
  83bb1c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  83bb20:	e037883a 	mov	sp,fp
  83bb24:	dfc00117 	ldw	ra,4(sp)
  83bb28:	df000017 	ldw	fp,0(sp)
  83bb2c:	dec00404 	addi	sp,sp,16
  83bb30:	f800283a 	ret

0083bb34 <etainit>:
 * RETURNS: int               0 if OK, else nonzero
 */

int
etainit(void)
{
  83bb34:	defffd04 	addi	sp,sp,-12
  83bb38:	dfc00215 	stw	ra,8(sp)
  83bb3c:	df000115 	stw	fp,4(sp)
  83bb40:	df000104 	addi	fp,sp,4
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
  83bb44:	01018204 	movi	r4,1544
  83bb48:	083d1380 	call	83d138 <reg_type>
  83bb4c:	1005003a 	cmpeq	r2,r2,zero
  83bb50:	1000061e 	bne	r2,zero,83bb6c <etainit+0x38>
   {
#ifdef NPDEBUG
      dprintf("ARP: unable to register type with MAC Driver\n");
  83bb54:	01002174 	movhi	r4,133
  83bb58:	2137af04 	addi	r4,r4,-8516
  83bb5c:	08077600 	call	807760 <puts>
#endif
      return (1);
  83bb60:	00800044 	movi	r2,1
  83bb64:	e0bfff15 	stw	r2,-4(fp)
  83bb68:	00000106 	br	83bb70 <etainit+0x3c>
   }
   return (0);
  83bb6c:	e03fff15 	stw	zero,-4(fp)
  83bb70:	e0bfff17 	ldw	r2,-4(fp)
}
  83bb74:	e037883a 	mov	sp,fp
  83bb78:	dfc00117 	ldw	ra,4(sp)
  83bb7c:	df000017 	ldw	fp,0(sp)
  83bb80:	dec00204 	addi	sp,sp,8
  83bb84:	f800283a 	ret

0083bb88 <et_send>:
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
  83bb88:	defff904 	addi	sp,sp,-28
  83bb8c:	dfc00615 	stw	ra,24(sp)
  83bb90:	df000515 	stw	fp,20(sp)
  83bb94:	df000504 	addi	fp,sp,20
  83bb98:	e13ffe15 	stw	r4,-8(fp)
  83bb9c:	e17fff15 	stw	r5,-4(fp)
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
  83bba0:	e0bffe17 	ldw	r2,-8(fp)
  83bba4:	10800617 	ldw	r2,24(r2)
  83bba8:	10802717 	ldw	r2,156(r2)
  83bbac:	e0bffc15 	stw	r2,-16(fp)
   int err;

   tp->lasttime = cticks;
  83bbb0:	00802174 	movhi	r2,133
  83bbb4:	10832604 	addi	r2,r2,3224
  83bbb8:	10c00017 	ldw	r3,0(r2)
  83bbbc:	e0bfff17 	ldw	r2,-4(fp)
  83bbc0:	10c00615 	stw	r3,24(r2)
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
  83bbc4:	e0bffe17 	ldw	r2,-8(fp)
  83bbc8:	10800317 	ldw	r2,12(r2)
  83bbcc:	10fffc04 	addi	r3,r2,-16
  83bbd0:	e0bffe17 	ldw	r2,-8(fp)
  83bbd4:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen += ETHHDR_SIZE;
  83bbd8:	e0bffe17 	ldw	r2,-8(fp)
  83bbdc:	10800417 	ldw	r2,16(r2)
  83bbe0:	10c00404 	addi	r3,r2,16
  83bbe4:	e0bffe17 	ldw	r2,-8(fp)
  83bbe8:	10c00415 	stw	r3,16(r2)
   ethhdr = pkt->nb_prot + ETHHDR_BIAS;
  83bbec:	e0bffe17 	ldw	r2,-8(fp)
  83bbf0:	10800317 	ldw	r2,12(r2)
  83bbf4:	10800084 	addi	r2,r2,2
  83bbf8:	e0bffd15 	stw	r2,-12(fp)
      MEMMOVE(snap, snapdata, 6);
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
  83bbfc:	e0bffe17 	ldw	r2,-8(fp)
  83bc00:	10c00117 	ldw	r3,4(r2)
  83bc04:	e0bffd17 	ldw	r2,-12(fp)
  83bc08:	10c0032e 	bgeu	r2,r3,83bc18 <et_send+0x90>
      panic("et_send: prepend");
  83bc0c:	01002174 	movhi	r4,133
  83bc10:	2137bb04 	addi	r4,r4,-8468
  83bc14:	0825a2c0 	call	825a2c <panic>

   MEMMOVE(ethhdr + ET_DSTOFF, tp->t_phy_addr, 6);  /* set pkt's MAC dst addr */
  83bc18:	e0bfff17 	ldw	r2,-4(fp)
  83bc1c:	11400104 	addi	r5,r2,4
  83bc20:	e13ffd17 	ldw	r4,-12(fp)
  83bc24:	01800184 	movi	r6,6
  83bc28:	08073d80 	call	8073d8 <memmove>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);  /* MAC src */
  83bc2c:	e0bffd17 	ldw	r2,-12(fp)
  83bc30:	11000184 	addi	r4,r2,6
  83bc34:	e0bffc17 	ldw	r2,-16(fp)
  83bc38:	11400517 	ldw	r5,20(r2)
  83bc3c:	01800184 	movi	r6,6
  83bc40:	08073d80 	call	8073d8 <memmove>

   /* nice clean ethernet II header */
   if ((tp->flags & (ET_ETH2|ET_SNAP)) != ET_SNAP)
  83bc44:	e0bfff17 	ldw	r2,-4(fp)
  83bc48:	1080070b 	ldhu	r2,28(r2)
  83bc4c:	10bfffcc 	andi	r2,r2,65535
  83bc50:	108000cc 	andi	r2,r2,3
  83bc54:	108000a0 	cmpeqi	r2,r2,2
  83bc58:	1000041e 	bne	r2,zero,83bc6c <et_send+0xe4>
      ET_TYPE_SET(ethhdr, ntohs(ARPIP));
  83bc5c:	e0bffd17 	ldw	r2,-12(fp)
  83bc60:	10c00304 	addi	r3,r2,12
  83bc64:	00800204 	movi	r2,8
  83bc68:	18800005 	stb	r2,0(r3)
  83bc6c:	e0bffd17 	ldw	r2,-12(fp)
  83bc70:	10800344 	addi	r2,r2,13
  83bc74:	10000005 	stb	zero,0(r2)
      ET_TYPE_SET(ethhdr, len8023);
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
  83bc78:	e0bffe17 	ldw	r2,-8(fp)
  83bc7c:	10800617 	ldw	r2,24(r2)
  83bc80:	10800417 	ldw	r2,16(r2)
  83bc84:	1005003a 	cmpeq	r2,r2,zero
  83bc88:	1000071e 	bne	r2,zero,83bca8 <et_send+0x120>
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
  83bc8c:	e0bffe17 	ldw	r2,-8(fp)
  83bc90:	10800617 	ldw	r2,24(r2)
  83bc94:	10800417 	ldw	r2,16(r2)
  83bc98:	e13ffe17 	ldw	r4,-8(fp)
  83bc9c:	103ee83a 	callr	r2
  83bca0:	e0bffb15 	stw	r2,-20(fp)
  83bca4:	00001106 	br	83bcec <et_send+0x164>
   else  /* else use older raw_send routine */
   {
      /* sent to media */
      err = pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
  83bca8:	e0bffe17 	ldw	r2,-8(fp)
  83bcac:	10800617 	ldw	r2,24(r2)
  83bcb0:	10c00317 	ldw	r3,12(r2)
  83bcb4:	e0bffe17 	ldw	r2,-8(fp)
  83bcb8:	11000617 	ldw	r4,24(r2)
  83bcbc:	e0bffe17 	ldw	r2,-8(fp)
  83bcc0:	11400317 	ldw	r5,12(r2)
  83bcc4:	e0bffe17 	ldw	r2,-8(fp)
  83bcc8:	11800417 	ldw	r6,16(r2)
  83bccc:	183ee83a 	callr	r3
  83bcd0:	e0bffb15 	stw	r2,-20(fp)
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83bcd4:	01000084 	movi	r4,2
  83bcd8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(pkt);
  83bcdc:	e13ffe17 	ldw	r4,-8(fp)
  83bce0:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83bce4:	01000084 	movi	r4,2
  83bce8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   }

   return (err);
  83bcec:	e0bffb17 	ldw	r2,-20(fp)
}
  83bcf0:	e037883a 	mov	sp,fp
  83bcf4:	dfc00117 	ldw	ra,4(sp)
  83bcf8:	df000017 	ldw	fp,0(sp)
  83bcfc:	dec00204 	addi	sp,sp,8
  83bd00:	f800283a 	ret

0083bd04 <arp_free_pending>:
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
  83bd04:	defffb04 	addi	sp,sp,-20
  83bd08:	dfc00415 	stw	ra,16(sp)
  83bd0c:	df000315 	stw	fp,12(sp)
  83bd10:	df000304 	addi	fp,sp,12
  83bd14:	e13fff15 	stw	r4,-4(fp)
   PACKET tmppkt;
   PACKET nextpkt;

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
  83bd18:	e0bfff17 	ldw	r2,-4(fp)
  83bd1c:	10800417 	ldw	r2,16(r2)
  83bd20:	e0bffe15 	stw	r2,-8(fp)
   entry->pending = (PACKET)NULL;
  83bd24:	e0bfff17 	ldw	r2,-4(fp)
  83bd28:	10000415 	stw	zero,16(r2)

   LOCK_NET_RESOURCE(FREEQ_RESID);
  83bd2c:	01000084 	movi	r4,2
  83bd30:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   /* free all pending packets */
   while (tmppkt)
  83bd34:	00000906 	br	83bd5c <arp_free_pending+0x58>
   {
      nextpkt = tmppkt->next;        /* save the next packet in list */
  83bd38:	e0bffe17 	ldw	r2,-8(fp)
  83bd3c:	10800017 	ldw	r2,0(r2)
  83bd40:	e0bffd15 	stw	r2,-12(fp)
      tmppkt->next = (PACKET)NULL;
  83bd44:	e0bffe17 	ldw	r2,-8(fp)
  83bd48:	10000015 	stw	zero,0(r2)
      pk_free(tmppkt);               /* free current packet */
  83bd4c:	e13ffe17 	ldw	r4,-8(fp)
  83bd50:	0829f180 	call	829f18 <pk_free>
      tmppkt = nextpkt;              /* process the next packet */
  83bd54:	e0bffd17 	ldw	r2,-12(fp)
  83bd58:	e0bffe15 	stw	r2,-8(fp)
   entry->pending = (PACKET)NULL;

   LOCK_NET_RESOURCE(FREEQ_RESID);

   /* free all pending packets */
   while (tmppkt)
  83bd5c:	e0bffe17 	ldw	r2,-8(fp)
  83bd60:	1004c03a 	cmpne	r2,r2,zero
  83bd64:	103ff41e 	bne	r2,zero,83bd38 <arp_free_pending+0x34>
      tmppkt->next = (PACKET)NULL;
      pk_free(tmppkt);               /* free current packet */
      tmppkt = nextpkt;              /* process the next packet */
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */
  83bd68:	e0bfff17 	ldw	r2,-4(fp)
  83bd6c:	10000015 	stw	zero,0(r2)

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83bd70:	01000084 	movi	r4,2
  83bd74:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
}
  83bd78:	e037883a 	mov	sp,fp
  83bd7c:	dfc00117 	ldw	ra,4(sp)
  83bd80:	df000017 	ldw	fp,0(sp)
  83bd84:	dec00204 	addi	sp,sp,8
  83bd88:	f800283a 	ret

0083bd8c <arp_send_pending>:
 * Clear the list (entry->pending) after sending the packets.
 */

void
arp_send_pending(struct arptabent *entry)
{
  83bd8c:	defffc04 	addi	sp,sp,-16
  83bd90:	dfc00315 	stw	ra,12(sp)
  83bd94:	df000215 	stw	fp,8(sp)
  83bd98:	df000204 	addi	fp,sp,8
  83bd9c:	e13fff15 	stw	r4,-4(fp)
   PACKET tmppkt = entry->pending;
  83bda0:	e0bfff17 	ldw	r2,-4(fp)
  83bda4:	10800417 	ldw	r2,16(r2)
  83bda8:	e0bffe15 	stw	r2,-8(fp)

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
  83bdac:	00000906 	br	83bdd4 <arp_send_pending+0x48>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
  83bdb0:	e0bffe17 	ldw	r2,-8(fp)
  83bdb4:	10c00017 	ldw	r3,0(r2)
  83bdb8:	e0bfff17 	ldw	r2,-4(fp)
  83bdbc:	10c00415 	stw	r3,16(r2)
      tmppkt->next = (PACKET)NULL;
  83bdc0:	e0bffe17 	ldw	r2,-8(fp)
  83bdc4:	10000015 	stw	zero,0(r2)
      et_send(tmppkt, entry);          /* try send again */
  83bdc8:	e13ffe17 	ldw	r4,-8(fp)
  83bdcc:	e17fff17 	ldw	r5,-4(fp)
  83bdd0:	083bb880 	call	83bb88 <et_send>
   PACKET tmppkt = entry->pending;

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
  83bdd4:	e0bfff17 	ldw	r2,-4(fp)
  83bdd8:	10800417 	ldw	r2,16(r2)
  83bddc:	e0bffe15 	stw	r2,-8(fp)
  83bde0:	e0bffe17 	ldw	r2,-8(fp)
  83bde4:	1004c03a 	cmpne	r2,r2,zero
  83bde8:	103ff11e 	bne	r2,zero,83bdb0 <arp_send_pending+0x24>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
      tmppkt->next = (PACKET)NULL;
      et_send(tmppkt, entry);          /* try send again */
   }
}
  83bdec:	e037883a 	mov	sp,fp
  83bdf0:	dfc00117 	ldw	ra,4(sp)
  83bdf4:	df000017 	ldw	fp,0(sp)
  83bdf8:	dec00204 	addi	sp,sp,8
  83bdfc:	f800283a 	ret

0083be00 <send_arp>:
 * timeout will eventually free packet. 
 */

int
send_arp(PACKET pkt, ip_addr dest_ip)
{
  83be00:	defff304 	addi	sp,sp,-52
  83be04:	dfc00c15 	stw	ra,48(sp)
  83be08:	df000b15 	stw	fp,44(sp)
  83be0c:	df000b04 	addi	fp,sp,44
  83be10:	e13ffd15 	stw	r4,-12(fp)
  83be14:	e17ffe15 	stw	r5,-8(fp)
   struct arptabent *   oldest;
   char * ethhdr;
   NET net = pkt->net;
  83be18:	e0bffd17 	ldw	r2,-12(fp)
  83be1c:	10800617 	ldw	r2,24(r2)
  83be20:	e0bff915 	stw	r2,-28(fp)
   struct arp_hdr *  arphdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
  83be24:	e0bffd17 	ldw	r2,-12(fp)
  83be28:	10800617 	ldw	r2,24(r2)
  83be2c:	10802717 	ldw	r2,156(r2)
  83be30:	e0bff715 	stw	r2,-36(fp)
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
  83be34:	e0bffe17 	ldw	r2,-8(fp)
  83be38:	10bfffe0 	cmpeqi	r2,r2,-1
  83be3c:	10001b1e 	bne	r2,zero,83beac <send_arp+0xac>
  83be40:	e0bff917 	ldw	r2,-28(fp)
  83be44:	10800c17 	ldw	r2,48(r2)
  83be48:	0086303a 	nor	r3,zero,r2
  83be4c:	e0bffe17 	ldw	r2,-8(fp)
  83be50:	1886703a 	and	r3,r3,r2
  83be54:	e0bff917 	ldw	r2,-28(fp)
  83be58:	10800c17 	ldw	r2,48(r2)
  83be5c:	0084303a 	nor	r2,zero,r2
  83be60:	18801226 	beq	r3,r2,83beac <send_arp+0xac>
  83be64:	e0bffe17 	ldw	r2,-8(fp)
  83be68:	1004d63a 	srli	r2,r2,24
  83be6c:	10c03fcc 	andi	r3,r2,255
  83be70:	e0bffe17 	ldw	r2,-8(fp)
  83be74:	1004d23a 	srli	r2,r2,8
  83be78:	10bfc00c 	andi	r2,r2,65280
  83be7c:	1886b03a 	or	r3,r3,r2
  83be80:	e0bffe17 	ldw	r2,-8(fp)
  83be84:	10bfc00c 	andi	r2,r2,65280
  83be88:	1004923a 	slli	r2,r2,8
  83be8c:	1886b03a 	or	r3,r3,r2
  83be90:	e0bffe17 	ldw	r2,-8(fp)
  83be94:	10803fcc 	andi	r2,r2,255
  83be98:	1004963a 	slli	r2,r2,24
  83be9c:	1884b03a 	or	r2,r3,r2
  83bea0:	10fc002c 	andhi	r3,r2,61440
  83bea4:	00b80034 	movhi	r2,57344
  83bea8:	1880441e 	bne	r3,r2,83bfbc <send_arp+0x1bc>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask))))

#endif /* IP_MULTICAST */
   {
      /* get unused or oldest entry in table */
      oldest = make_arp_entry(dest_ip, pkt->net);
  83beac:	e0bffd17 	ldw	r2,-12(fp)
  83beb0:	11400617 	ldw	r5,24(r2)
  83beb4:	e13ffe17 	ldw	r4,-8(fp)
  83beb8:	083c4400 	call	83c440 <make_arp_entry>
  83bebc:	e0bffb15 	stw	r2,-20(fp)

      /* set MAC destination to ethernet broadcast (all FFs) */
      MEMSET(oldest->t_phy_addr, 0xFF, 6);
  83bec0:	e0bffb17 	ldw	r2,-20(fp)
  83bec4:	10c00104 	addi	r3,r2,4
  83bec8:	00bfffc4 	movi	r2,-1
  83becc:	18800005 	stb	r2,0(r3)
  83bed0:	00bfffc4 	movi	r2,-1
  83bed4:	18800045 	stb	r2,1(r3)
  83bed8:	00bfffc4 	movi	r2,-1
  83bedc:	18800085 	stb	r2,2(r3)
  83bee0:	00bfffc4 	movi	r2,-1
  83bee4:	188000c5 	stb	r2,3(r3)
  83bee8:	00bfffc4 	movi	r2,-1
  83beec:	18800105 	stb	r2,4(r3)
  83bef0:	00bfffc4 	movi	r2,-1
  83bef4:	18800145 	stb	r2,5(r3)
#ifdef IP_MULTICAST
      /* If n_mcastlist routine is defined in the net structure,
         map IP mcast to Ether multicast  */

#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
  83bef8:	e0bffd17 	ldw	r2,-12(fp)
  83befc:	10800617 	ldw	r2,24(r2)
  83bf00:	10802b17 	ldw	r2,172(r2)
  83bf04:	1005003a 	cmpeq	r2,r2,zero
  83bf08:	1000271e 	bne	r2,zero,83bfa8 <send_arp+0x1a8>
  83bf0c:	e0bffe17 	ldw	r2,-8(fp)
  83bf10:	1004d63a 	srli	r2,r2,24
  83bf14:	10c03fcc 	andi	r3,r2,255
  83bf18:	e0bffe17 	ldw	r2,-8(fp)
  83bf1c:	1004d23a 	srli	r2,r2,8
  83bf20:	10bfc00c 	andi	r2,r2,65280
  83bf24:	1886b03a 	or	r3,r3,r2
  83bf28:	e0bffe17 	ldw	r2,-8(fp)
  83bf2c:	10bfc00c 	andi	r2,r2,65280
  83bf30:	1004923a 	slli	r2,r2,8
  83bf34:	1886b03a 	or	r3,r3,r2
  83bf38:	e0bffe17 	ldw	r2,-8(fp)
  83bf3c:	10803fcc 	andi	r2,r2,255
  83bf40:	1004963a 	slli	r2,r2,24
  83bf44:	1884b03a 	or	r2,r3,r2
  83bf48:	10fc002c 	andhi	r3,r2,61440
  83bf4c:	00b80034 	movhi	r2,57344
  83bf50:	1880151e 	bne	r3,r2,83bfa8 <send_arp+0x1a8>
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
  83bf54:	e0bffe17 	ldw	r2,-8(fp)
  83bf58:	e0bffc15 	stw	r2,-16(fp)
         oldest->t_phy_addr[0] = 0x01;
  83bf5c:	e0fffb17 	ldw	r3,-20(fp)
  83bf60:	00800044 	movi	r2,1
  83bf64:	18800105 	stb	r2,4(r3)
         oldest->t_phy_addr[1] = 0x00;
  83bf68:	e0bffb17 	ldw	r2,-20(fp)
  83bf6c:	10000145 	stb	zero,5(r2)
         oldest->t_phy_addr[2] = 0x5e;
  83bf70:	e0fffb17 	ldw	r3,-20(fp)
  83bf74:	00801784 	movi	r2,94
  83bf78:	18800185 	stb	r2,6(r3)
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
  83bf7c:	e0bffc43 	ldbu	r2,-15(fp)
  83bf80:	10801fcc 	andi	r2,r2,127
  83bf84:	1007883a 	mov	r3,r2
  83bf88:	e0bffb17 	ldw	r2,-20(fp)
  83bf8c:	10c001c5 	stb	r3,7(r2)
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
  83bf90:	e0fffc83 	ldbu	r3,-14(fp)
  83bf94:	e0bffb17 	ldw	r2,-20(fp)
  83bf98:	10c00205 	stb	r3,8(r2)
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
  83bf9c:	e0fffcc3 	ldbu	r3,-13(fp)
  83bfa0:	e0bffb17 	ldw	r2,-20(fp)
  83bfa4:	10c00245 	stb	r3,9(r2)
      }
#endif /* ETHMCAST */
#endif /* IP_MULTICAST */
      return (et_send(pkt, oldest));
  83bfa8:	e13ffd17 	ldw	r4,-12(fp)
  83bfac:	e17ffb17 	ldw	r5,-20(fp)
  83bfb0:	083bb880 	call	83bb88 <et_send>
  83bfb4:	e0bfff15 	stw	r2,-4(fp)
  83bfb8:	0000b106 	br	83c280 <send_arp+0x480>

   /* If packet is addressed to this Ethernet interface, and
    * it's not a loopback address, then don't send it on the wire. 
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
  83bfbc:	e0bffd17 	ldw	r2,-12(fp)
  83bfc0:	10c00717 	ldw	r3,28(r2)
  83bfc4:	e0bffd17 	ldw	r2,-12(fp)
  83bfc8:	10800617 	ldw	r2,24(r2)
  83bfcc:	10800a17 	ldw	r2,40(r2)
  83bfd0:	18800e1e 	bne	r3,r2,83c00c <send_arp+0x20c>
  83bfd4:	e0bffd17 	ldw	r2,-12(fp)
  83bfd8:	10800717 	ldw	r2,28(r2)
  83bfdc:	10803fcc 	andi	r2,r2,255
  83bfe0:	10801fe0 	cmpeqi	r2,r2,127
  83bfe4:	1000091e 	bne	r2,zero,83c00c <send_arp+0x20c>
      ((pkt->fhost & htonl(0xFF000000)) != htonl(0x7F000000)))
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83bfe8:	01000084 	movi	r4,2
  83bfec:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(pkt);
  83bff0:	e13ffd17 	ldw	r4,-12(fp)
  83bff4:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83bff8:	01000084 	movi	r4,2
  83bffc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENP_NO_ROUTE;
  83c000:	00bff7c4 	movi	r2,-33
  83c004:	e0bfff15 	stw	r2,-4(fp)
  83c008:	00009d06 	br	83c280 <send_arp+0x480>
   }

   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
  83c00c:	01000084 	movi	r4,2
  83c010:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
  83c014:	01000c04 	movi	r4,48
  83c018:	0829b840 	call	829b84 <pk_alloc>
  83c01c:	e0bff615 	stw	r2,-40(fp)
   if (!arppkt)
  83c020:	e0bff617 	ldw	r2,-40(fp)
  83c024:	1004c03a 	cmpne	r2,r2,zero
  83c028:	1000071e 	bne	r2,zero,83c048 <send_arp+0x248>
   {
      pk_free(pkt);
  83c02c:	e13ffd17 	ldw	r4,-12(fp)
  83c030:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83c034:	01000084 	movi	r4,2
  83c038:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
  83c03c:	00bffa84 	movi	r2,-22
  83c040:	e0bfff15 	stw	r2,-4(fp)
  83c044:	00008e06 	br	83c280 <send_arp+0x480>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83c048:	01000084 	movi	r4,2
  83c04c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
  83c050:	e0bff617 	ldw	r2,-40(fp)
  83c054:	10c00117 	ldw	r3,4(r2)
  83c058:	e0bff617 	ldw	r2,-40(fp)
  83c05c:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
  83c060:	e0fff617 	ldw	r3,-40(fp)
  83c064:	00800c04 	movi	r2,48
  83c068:	18800415 	stw	r2,16(r3)
   arppkt->net = pkt->net;
  83c06c:	e0bffd17 	ldw	r2,-12(fp)
  83c070:	10c00617 	ldw	r3,24(r2)
  83c074:	e0bff617 	ldw	r2,-40(fp)
  83c078:	10c00615 	stw	r3,24(r2)

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
  83c07c:	e0bffd17 	ldw	r2,-12(fp)
  83c080:	11400617 	ldw	r5,24(r2)
  83c084:	e13ffe17 	ldw	r4,-8(fp)
  83c088:	083c4400 	call	83c440 <make_arp_entry>
  83c08c:	e0bffb15 	stw	r2,-20(fp)

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */
  83c090:	e0fffb17 	ldw	r3,-20(fp)
  83c094:	e0bffd17 	ldw	r2,-12(fp)
  83c098:	18800415 	stw	r2,16(r3)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
  83c09c:	e0bff617 	ldw	r2,-40(fp)
  83c0a0:	10800117 	ldw	r2,4(r2)
  83c0a4:	10800084 	addi	r2,r2,2
  83c0a8:	e0bffa15 	stw	r2,-24(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
  83c0ac:	e0bff617 	ldw	r2,-40(fp)
  83c0b0:	10800117 	ldw	r2,4(r2)
  83c0b4:	10800404 	addi	r2,r2,16
  83c0b8:	e0bff815 	stw	r2,-32(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
  83c0bc:	e0fff817 	ldw	r3,-32(fp)
  83c0c0:	00804004 	movi	r2,256
  83c0c4:	1880000d 	sth	r2,0(r3)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
  83c0c8:	e0fff817 	ldw	r3,-32(fp)
  83c0cc:	00800204 	movi	r2,8
  83c0d0:	1880008d 	sth	r2,2(r3)
   arphdr->ar_hln = 6;
  83c0d4:	e0fff817 	ldw	r3,-32(fp)
  83c0d8:	00800184 	movi	r2,6
  83c0dc:	18800105 	stb	r2,4(r3)
   arphdr->ar_pln = 4;
  83c0e0:	e0fff817 	ldw	r3,-32(fp)
  83c0e4:	00800104 	movi	r2,4
  83c0e8:	18800145 	stb	r2,5(r3)
   arphdr->ar_op = ARREQ;
  83c0ec:	e0fff817 	ldw	r3,-32(fp)
  83c0f0:	00804004 	movi	r2,256
  83c0f4:	1880018d 	sth	r2,6(r3)
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
  83c0f8:	e0fff817 	ldw	r3,-32(fp)
  83c0fc:	e0bffe17 	ldw	r2,-8(fp)
  83c100:	18800715 	stw	r2,28(r3)
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
  83c104:	e0bffd17 	ldw	r2,-12(fp)
  83c108:	10800617 	ldw	r2,24(r2)
  83c10c:	10c00a17 	ldw	r3,40(r2)
  83c110:	e0bff817 	ldw	r2,-32(fp)
  83c114:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
  83c118:	e0bff817 	ldw	r2,-32(fp)
  83c11c:	11000204 	addi	r4,r2,8
  83c120:	e0bff717 	ldw	r2,-36(fp)
  83c124:	11400517 	ldw	r5,20(r2)
  83c128:	01800184 	movi	r6,6
  83c12c:	08073d80 	call	8073d8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
  83c130:	e0fffa17 	ldw	r3,-24(fp)
  83c134:	00bfffc4 	movi	r2,-1
  83c138:	18800005 	stb	r2,0(r3)
  83c13c:	00bfffc4 	movi	r2,-1
  83c140:	18800045 	stb	r2,1(r3)
  83c144:	00bfffc4 	movi	r2,-1
  83c148:	18800085 	stb	r2,2(r3)
  83c14c:	00bfffc4 	movi	r2,-1
  83c150:	188000c5 	stb	r2,3(r3)
  83c154:	00bfffc4 	movi	r2,-1
  83c158:	18800105 	stb	r2,4(r3)
  83c15c:	00bfffc4 	movi	r2,-1
  83c160:	18800145 	stb	r2,5(r3)
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
  83c164:	e0bffa17 	ldw	r2,-24(fp)
  83c168:	11000184 	addi	r4,r2,6
  83c16c:	e0bff717 	ldw	r2,-36(fp)
  83c170:	11400517 	ldw	r5,20(r2)
  83c174:	01800184 	movi	r6,6
  83c178:	08073d80 	call	8073d8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
  83c17c:	e0bffa17 	ldw	r2,-24(fp)
  83c180:	10c00304 	addi	r3,r2,12
  83c184:	00800204 	movi	r2,8
  83c188:	18800005 	stb	r2,0(r3)
  83c18c:	e0bffa17 	ldw	r2,-24(fp)
  83c190:	10c00344 	addi	r3,r2,13
  83c194:	00800184 	movi	r2,6
  83c198:	18800005 	stb	r2,0(r3)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
  83c19c:	e0bff817 	ldw	r2,-32(fp)
  83c1a0:	e0bff515 	stw	r2,-44(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
  83c1a4:	e0bff517 	ldw	r2,-44(fp)
  83c1a8:	11000204 	addi	r4,r2,8
  83c1ac:	e0bff817 	ldw	r2,-32(fp)
  83c1b0:	11400204 	addi	r5,r2,8
  83c1b4:	01800184 	movi	r6,6
  83c1b8:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
  83c1bc:	e0bff517 	ldw	r2,-44(fp)
  83c1c0:	10800204 	addi	r2,r2,8
  83c1c4:	11000184 	addi	r4,r2,6
  83c1c8:	e0bff817 	ldw	r2,-32(fp)
  83c1cc:	11400404 	addi	r5,r2,16
  83c1d0:	01800104 	movi	r6,4
  83c1d4:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
  83c1d8:	e0bff517 	ldw	r2,-44(fp)
  83c1dc:	10800204 	addi	r2,r2,8
  83c1e0:	11000284 	addi	r4,r2,10
  83c1e4:	e0bff817 	ldw	r2,-32(fp)
  83c1e8:	11400504 	addi	r5,r2,20
  83c1ec:	01800184 	movi	r6,6
  83c1f0:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
  83c1f4:	e0bff517 	ldw	r2,-44(fp)
  83c1f8:	10800204 	addi	r2,r2,8
  83c1fc:	11000404 	addi	r4,r2,16
  83c200:	e0bff817 	ldw	r2,-32(fp)
  83c204:	11400704 	addi	r5,r2,28
  83c208:	01800104 	movi	r6,4
  83c20c:	08073d80 	call	8073d8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
  83c210:	e0bff917 	ldw	r2,-28(fp)
  83c214:	10800417 	ldw	r2,16(r2)
  83c218:	1005003a 	cmpeq	r2,r2,zero
  83c21c:	1000051e 	bne	r2,zero,83c234 <send_arp+0x434>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
  83c220:	e0bff917 	ldw	r2,-28(fp)
  83c224:	10800417 	ldw	r2,16(r2)
  83c228:	e13ff617 	ldw	r4,-40(fp)
  83c22c:	103ee83a 	callr	r2
  83c230:	00000e06 	br	83c26c <send_arp+0x46c>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
  83c234:	e0bff917 	ldw	r2,-28(fp)
  83c238:	10c00317 	ldw	r3,12(r2)
  83c23c:	e0bff617 	ldw	r2,-40(fp)
  83c240:	11000617 	ldw	r4,24(r2)
  83c244:	e0bff617 	ldw	r2,-40(fp)
  83c248:	11400117 	ldw	r5,4(r2)
  83c24c:	01800c04 	movi	r6,48
  83c250:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83c254:	01000084 	movi	r4,2
  83c258:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
  83c25c:	e13ff617 	ldw	r4,-40(fp)
  83c260:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83c264:	01000084 	movi	r4,2
  83c268:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
  83c26c:	d0a0c717 	ldw	r2,-31972(gp)
  83c270:	10800044 	addi	r2,r2,1
  83c274:	d0a0c715 	stw	r2,-31972(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
  83c278:	00800044 	movi	r2,1
  83c27c:	e0bfff15 	stw	r2,-4(fp)
  83c280:	e0bfff17 	ldw	r2,-4(fp)
}
  83c284:	e037883a 	mov	sp,fp
  83c288:	dfc00117 	ldw	ra,4(sp)
  83c28c:	df000017 	ldw	fp,0(sp)
  83c290:	dec00204 	addi	sp,sp,8
  83c294:	f800283a 	ret

0083c298 <find_oldest_arp>:
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
  83c298:	defff604 	addi	sp,sp,-40
  83c29c:	dfc00915 	stw	ra,36(sp)
  83c2a0:	df000815 	stw	fp,32(sp)
  83c2a4:	df000804 	addi	fp,sp,32
  83c2a8:	e13ffd15 	stw	r4,-12(fp)
   struct arptabent *tp;
   struct arptabent *exact  = (struct arptabent *)NULL;
  83c2ac:	e03ffb15 	stw	zero,-20(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
  83c2b0:	e03ffa15 	stw	zero,-24(fp)
   struct arptabent *empty  = (struct arptabent *)NULL;
  83c2b4:	e03ff915 	stw	zero,-28(fp)
   unsigned long lticks = cticks;
  83c2b8:	00802174 	movhi	r2,133
  83c2bc:	10832604 	addi	r2,r2,3224
  83c2c0:	10800017 	ldw	r2,0(r2)
  83c2c4:	e0bff815 	stw	r2,-32(fp)

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
  83c2c8:	00803934 	movhi	r2,228
  83c2cc:	10a99d04 	addi	r2,r2,-22924
  83c2d0:	e0bffc15 	stw	r2,-16(fp)
  83c2d4:	00004006 	br	83c3d8 <find_oldest_arp+0x140>
   {
      /* age out old, pending entries */
      if (tp->pending)
  83c2d8:	e0bffc17 	ldw	r2,-16(fp)
  83c2dc:	10800417 	ldw	r2,16(r2)
  83c2e0:	1005003a 	cmpeq	r2,r2,zero
  83c2e4:	10000b1e 	bne	r2,zero,83c314 <find_oldest_arp+0x7c>
      {
         /* purge if pending for more than one second */
         if ((lticks - tp->createtime) > TPS)
  83c2e8:	e0bffc17 	ldw	r2,-16(fp)
  83c2ec:	10c00517 	ldw	r3,20(r2)
  83c2f0:	e0bff817 	ldw	r2,-32(fp)
  83c2f4:	10c5c83a 	sub	r2,r2,r3
  83c2f8:	1080fa70 	cmpltui	r2,r2,1001
  83c2fc:	1000181e 	bne	r2,zero,83c360 <find_oldest_arp+0xc8>
         {
            arp_free_pending(tp);   /* free pending packets */
  83c300:	e13ffc17 	ldw	r4,-16(fp)
  83c304:	083bd040 	call	83bd04 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
  83c308:	e0bffc17 	ldw	r2,-16(fp)
  83c30c:	10000015 	stw	zero,0(r2)
  83c310:	00001306 	br	83c360 <find_oldest_arp+0xc8>
         }
      }
      else if ((tp->t_pro_addr != 0) &&
  83c314:	e0bffc17 	ldw	r2,-16(fp)
  83c318:	10800017 	ldw	r2,0(r2)
  83c31c:	1005003a 	cmpeq	r2,r2,zero
  83c320:	10000f1e 	bne	r2,zero,83c360 <find_oldest_arp+0xc8>
  83c324:	e0bffc17 	ldw	r2,-16(fp)
  83c328:	10c00517 	ldw	r3,20(r2)
  83c32c:	e0bff817 	ldw	r2,-32(fp)
  83c330:	10c5c83a 	sub	r2,r2,r3
  83c334:	1007883a 	mov	r3,r2
  83c338:	d0a05417 	ldw	r2,-32432(gp)
  83c33c:	18800816 	blt	r3,r2,83c360 <find_oldest_arp+0xc8>
  83c340:	e0bffc17 	ldw	r2,-16(fp)
  83c344:	10c00617 	ldw	r3,24(r2)
  83c348:	e0bff817 	ldw	r2,-32(fp)
  83c34c:	10c5c83a 	sub	r2,r2,r3
  83c350:	1080fa30 	cmpltui	r2,r2,1000
  83c354:	1000021e 	bne	r2,zero,83c360 <find_oldest_arp+0xc8>
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
               ((int)(lticks - tp->lasttime)   >= TPS))
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
  83c358:	e0bffc17 	ldw	r2,-16(fp)
  83c35c:	10000015 	stw	zero,0(r2)
      }

      if (tp->t_pro_addr == dest_ip)   /* ip addr already has entry */
  83c360:	e0bffc17 	ldw	r2,-16(fp)
  83c364:	10c00017 	ldw	r3,0(r2)
  83c368:	e0bffd17 	ldw	r2,-12(fp)
  83c36c:	1880031e 	bne	r3,r2,83c37c <find_oldest_arp+0xe4>
      {
         exact = tp;
  83c370:	e0bffc17 	ldw	r2,-16(fp)
  83c374:	e0bffb15 	stw	r2,-20(fp)
  83c378:	00001406 	br	83c3cc <find_oldest_arp+0x134>
      }
      else if (tp->t_pro_addr != 0)
  83c37c:	e0bffc17 	ldw	r2,-16(fp)
  83c380:	10800017 	ldw	r2,0(r2)
  83c384:	1005003a 	cmpeq	r2,r2,zero
  83c388:	10000b1e 	bne	r2,zero,83c3b8 <find_oldest_arp+0x120>
      {
         if (!oldest || (tp->lasttime < oldest->lasttime))
  83c38c:	e0bffa17 	ldw	r2,-24(fp)
  83c390:	1005003a 	cmpeq	r2,r2,zero
  83c394:	1000051e 	bne	r2,zero,83c3ac <find_oldest_arp+0x114>
  83c398:	e0bffc17 	ldw	r2,-16(fp)
  83c39c:	10c00617 	ldw	r3,24(r2)
  83c3a0:	e0bffa17 	ldw	r2,-24(fp)
  83c3a4:	10800617 	ldw	r2,24(r2)
  83c3a8:	1880082e 	bgeu	r3,r2,83c3cc <find_oldest_arp+0x134>
            oldest = tp;
  83c3ac:	e0bffc17 	ldw	r2,-16(fp)
  83c3b0:	e0bffa15 	stw	r2,-24(fp)
  83c3b4:	00000506 	br	83c3cc <find_oldest_arp+0x134>
      }
      else if (!empty)
  83c3b8:	e0bff917 	ldw	r2,-28(fp)
  83c3bc:	1004c03a 	cmpne	r2,r2,zero
  83c3c0:	1000021e 	bne	r2,zero,83c3cc <find_oldest_arp+0x134>
         empty = tp;          /* grab first empty slot */
  83c3c4:	e0bffc17 	ldw	r2,-16(fp)
  83c3c8:	e0bff915 	stw	r2,-28(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
  83c3cc:	e0bffc17 	ldw	r2,-16(fp)
  83c3d0:	10800804 	addi	r2,r2,32
  83c3d4:	e0bffc15 	stw	r2,-16(fp)
  83c3d8:	00c03934 	movhi	r3,228
  83c3dc:	18e9dd04 	addi	r3,r3,-22668
  83c3e0:	e0bffc17 	ldw	r2,-16(fp)
  83c3e4:	10ffbc36 	bltu	r2,r3,83c2d8 <find_oldest_arp+0x40>
      }
      else if (!empty)
         empty = tp;          /* grab first empty slot */
   }

   return ((exact) ? exact : ((empty) ? empty : oldest));
  83c3e8:	e0bffb17 	ldw	r2,-20(fp)
  83c3ec:	1004c03a 	cmpne	r2,r2,zero
  83c3f0:	10000b1e 	bne	r2,zero,83c420 <find_oldest_arp+0x188>
  83c3f4:	e0bff917 	ldw	r2,-28(fp)
  83c3f8:	1005003a 	cmpeq	r2,r2,zero
  83c3fc:	1000031e 	bne	r2,zero,83c40c <find_oldest_arp+0x174>
  83c400:	e0bff917 	ldw	r2,-28(fp)
  83c404:	e0bffe15 	stw	r2,-8(fp)
  83c408:	00000206 	br	83c414 <find_oldest_arp+0x17c>
  83c40c:	e0bffa17 	ldw	r2,-24(fp)
  83c410:	e0bffe15 	stw	r2,-8(fp)
  83c414:	e0bffe17 	ldw	r2,-8(fp)
  83c418:	e0bfff15 	stw	r2,-4(fp)
  83c41c:	00000206 	br	83c428 <find_oldest_arp+0x190>
  83c420:	e0bffb17 	ldw	r2,-20(fp)
  83c424:	e0bfff15 	stw	r2,-4(fp)
  83c428:	e0bfff17 	ldw	r2,-4(fp)
}
  83c42c:	e037883a 	mov	sp,fp
  83c430:	dfc00117 	ldw	ra,4(sp)
  83c434:	df000017 	ldw	fp,0(sp)
  83c438:	dec00204 	addi	sp,sp,8
  83c43c:	f800283a 	ret

0083c440 <make_arp_entry>:
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
  83c440:	defffa04 	addi	sp,sp,-24
  83c444:	dfc00515 	stw	ra,20(sp)
  83c448:	df000415 	stw	fp,16(sp)
  83c44c:	df000404 	addi	fp,sp,16
  83c450:	e13ffe15 	stw	r4,-8(fp)
  83c454:	e17fff15 	stw	r5,-4(fp)
   struct arptabent *oldest;
   unsigned long lticks = cticks;
  83c458:	00802174 	movhi	r2,133
  83c45c:	10832604 	addi	r2,r2,3224
  83c460:	10800017 	ldw	r2,0(r2)
  83c464:	e0bffc15 	stw	r2,-16(fp)

   /* find usable (or existing) ARP table entry */
   oldest = find_oldest_arp(dest_ip);
  83c468:	e13ffe17 	ldw	r4,-8(fp)
  83c46c:	083c2980 	call	83c298 <find_oldest_arp>
  83c470:	e0bffd15 	stw	r2,-12(fp)

   /* If recycling entry, don't leak packets which may be stuck here */
   if (oldest->pending && (oldest->t_pro_addr != dest_ip))
  83c474:	e0bffd17 	ldw	r2,-12(fp)
  83c478:	10800417 	ldw	r2,16(r2)
  83c47c:	1005003a 	cmpeq	r2,r2,zero
  83c480:	1000061e 	bne	r2,zero,83c49c <make_arp_entry+0x5c>
  83c484:	e0bffd17 	ldw	r2,-12(fp)
  83c488:	10c00017 	ldw	r3,0(r2)
  83c48c:	e0bffe17 	ldw	r2,-8(fp)
  83c490:	18800226 	beq	r3,r2,83c49c <make_arp_entry+0x5c>
   {
      arp_free_pending(oldest);
  83c494:	e13ffd17 	ldw	r4,-12(fp)
  83c498:	083bd040 	call	83bd04 <arp_free_pending>
   }

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
  83c49c:	e0fffd17 	ldw	r3,-12(fp)
  83c4a0:	e0bffe17 	ldw	r2,-8(fp)
  83c4a4:	18800015 	stw	r2,0(r3)
   oldest->net = net;
  83c4a8:	e0fffd17 	ldw	r3,-12(fp)
  83c4ac:	e0bfff17 	ldw	r2,-4(fp)
  83c4b0:	18800315 	stw	r2,12(r3)
   oldest->flags = 0;
  83c4b4:	e0bffd17 	ldw	r2,-12(fp)
  83c4b8:	1000070d 	sth	zero,28(r2)
   MEMSET(oldest->t_phy_addr, '\0', 6);   /* clear mac address */
  83c4bc:	e0bffd17 	ldw	r2,-12(fp)
  83c4c0:	10800104 	addi	r2,r2,4
  83c4c4:	10000005 	stb	zero,0(r2)
  83c4c8:	10000045 	stb	zero,1(r2)
  83c4cc:	10000085 	stb	zero,2(r2)
  83c4d0:	100000c5 	stb	zero,3(r2)
  83c4d4:	10000105 	stb	zero,4(r2)
  83c4d8:	10000145 	stb	zero,5(r2)
   oldest->createtime = oldest->lasttime = lticks;
  83c4dc:	e0fffd17 	ldw	r3,-12(fp)
  83c4e0:	e0bffc17 	ldw	r2,-16(fp)
  83c4e4:	18800615 	stw	r2,24(r3)
  83c4e8:	e0bffd17 	ldw	r2,-12(fp)
  83c4ec:	10c00617 	ldw	r3,24(r2)
  83c4f0:	e0bffd17 	ldw	r2,-12(fp)
  83c4f4:	10c00515 	stw	r3,20(r2)

   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
  83c4f8:	d0a0c417 	ldw	r2,-31984(gp)
  83c4fc:	1004c03a 	cmpne	r2,r2,zero
  83c500:	1000071e 	bne	r2,zero,83c520 <make_arp_entry+0xe0>
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
  83c504:	01002134 	movhi	r4,132
  83c508:	2132fc04 	addi	r4,r4,-13328
  83c50c:	0149c404 	movi	r5,10000
  83c510:	000d883a 	mov	r6,zero
  83c514:	083b7bc0 	call	83b7bc <in_timerset>
  83c518:	d0a0c415 	stw	r2,-31984(gp)
  83c51c:	00000706 	br	83c53c <make_arp_entry+0xfc>
   }
   else
   {
      ((struct intimer *)arp_timer)->tmo =
  83c520:	d0a0c417 	ldw	r2,-31984(gp)
  83c524:	1009883a 	mov	r4,r2
  83c528:	d0a0c417 	ldw	r2,-31984(gp)
  83c52c:	10c00217 	ldw	r3,8(r2)
  83c530:	e0bffc17 	ldw	r2,-16(fp)
  83c534:	1885883a 	add	r2,r3,r2
  83c538:	20800315 	stw	r2,12(r4)
              ((struct intimer *)arp_timer)->interval + lticks;
   }

   return oldest;
  83c53c:	e0bffd17 	ldw	r2,-12(fp)
}
  83c540:	e037883a 	mov	sp,fp
  83c544:	dfc00117 	ldw	ra,4(sp)
  83c548:	df000017 	ldw	fp,0(sp)
  83c54c:	dec00204 	addi	sp,sp,8
  83c550:	f800283a 	ret

0083c554 <arpReply>:
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
  83c554:	defff704 	addi	sp,sp,-36
  83c558:	dfc00815 	stw	ra,32(sp)
  83c55c:	df000715 	stw	fp,28(sp)
  83c560:	df000704 	addi	fp,sp,28
  83c564:	e13fff15 	stw	r4,-4(fp)
   struct arp_hdr *in;
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
  83c568:	01000084 	movi	r4,2
  83c56c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   outpkt = pk_alloc(arpsize);
  83c570:	01000c04 	movi	r4,48
  83c574:	0829b840 	call	829b84 <pk_alloc>
  83c578:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83c57c:	01000084 	movi	r4,2
  83c580:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (!outpkt)
  83c584:	e0bffe17 	ldw	r2,-8(fp)
  83c588:	1004c03a 	cmpne	r2,r2,zero
  83c58c:	1000021e 	bne	r2,zero,83c598 <arpReply+0x44>
   {
      dtrap();
  83c590:	082a7c80 	call	82a7c8 <dtrap>
      return;
  83c594:	00008f06 	br	83c7d4 <arpReply+0x280>
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */
  83c598:	e0bfff17 	ldw	r2,-4(fp)
  83c59c:	10c00617 	ldw	r3,24(r2)
  83c5a0:	e0bffe17 	ldw	r2,-8(fp)
  83c5a4:	10c00615 	stw	r3,24(r2)

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
  83c5a8:	e0bfff17 	ldw	r2,-4(fp)
  83c5ac:	10800317 	ldw	r2,12(r2)
  83c5b0:	10bffc84 	addi	r2,r2,-14
  83c5b4:	e0bffa15 	stw	r2,-24(fp)
   ethout = outpkt->nb_buff + ETHHDR_BIAS;
  83c5b8:	e0bffe17 	ldw	r2,-8(fp)
  83c5bc:	10800117 	ldw	r2,4(r2)
  83c5c0:	10800084 	addi	r2,r2,2
  83c5c4:	e0bffb15 	stw	r2,-20(fp)
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
  83c5c8:	e0bffb17 	ldw	r2,-20(fp)
  83c5cc:	10c00304 	addi	r3,r2,12
  83c5d0:	00800204 	movi	r2,8
  83c5d4:	18800005 	stb	r2,0(r3)
  83c5d8:	e0bffb17 	ldw	r2,-20(fp)
  83c5dc:	10c00344 	addi	r3,r2,13
  83c5e0:	00800184 	movi	r2,6
  83c5e4:	18800005 	stb	r2,0(r3)
      in = (struct arp_hdr *)(pkt->nb_prot);
  83c5e8:	e0bfff17 	ldw	r2,-4(fp)
  83c5ec:	10800317 	ldw	r2,12(r2)
  83c5f0:	e0bffd15 	stw	r2,-12(fp)
      out = (struct arp_hdr *)(outpkt->nb_buff + ETHHDR_SIZE);
  83c5f4:	e0bffe17 	ldw	r2,-8(fp)
  83c5f8:	10800117 	ldw	r2,4(r2)
  83c5fc:	10800404 	addi	r2,r2,16
  83c600:	e0bffc15 	stw	r2,-16(fp)
      outpkt->nb_plen = arpsize;
  83c604:	e0fffe17 	ldw	r3,-8(fp)
  83c608:	00800c04 	movi	r2,48
  83c60c:	18800415 	stw	r2,16(r3)

   /* prepare outgoing arp packet */
#ifdef IEEE_802_3
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
  83c610:	e0fffc17 	ldw	r3,-16(fp)
  83c614:	00804004 	movi	r2,256
  83c618:	1880000d 	sth	r2,0(r3)
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
  83c61c:	e0fffc17 	ldw	r3,-16(fp)
  83c620:	00800204 	movi	r2,8
  83c624:	1880008d 	sth	r2,2(r3)
   out->ar_hln = 6;
  83c628:	e0fffc17 	ldw	r3,-16(fp)
  83c62c:	00800184 	movi	r2,6
  83c630:	18800105 	stb	r2,4(r3)
   out->ar_pln = 4;
  83c634:	e0fffc17 	ldw	r3,-16(fp)
  83c638:	00800104 	movi	r2,4
  83c63c:	18800145 	stb	r2,5(r3)
   out->ar_op = ARREP;
  83c640:	e0fffc17 	ldw	r3,-16(fp)
  83c644:	00808004 	movi	r2,512
  83c648:	1880018d 	sth	r2,6(r3)
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
  83c64c:	e0bffd17 	ldw	r2,-12(fp)
  83c650:	10c00417 	ldw	r3,16(r2)
  83c654:	e0bffc17 	ldw	r2,-16(fp)
  83c658:	10c00715 	stw	r3,28(r2)
   out->ar_spa = in->ar_tpa;
  83c65c:	e0bffd17 	ldw	r2,-12(fp)
  83c660:	10c00717 	ldw	r3,28(r2)
  83c664:	e0bffc17 	ldw	r2,-16(fp)
  83c668:	10c00415 	stw	r3,16(r2)
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
  83c66c:	e0bffc17 	ldw	r2,-16(fp)
  83c670:	11000504 	addi	r4,r2,20
  83c674:	e0bffd17 	ldw	r2,-12(fp)
  83c678:	11400204 	addi	r5,r2,8
  83c67c:	01800184 	movi	r6,6
  83c680:	08073d80 	call	8073d8 <memmove>
   MEMMOVE(out->ar_sha, outpkt->net->n_mib->ifPhysAddress, 6);  /* fill in our mac address */
  83c684:	e0bffc17 	ldw	r2,-16(fp)
  83c688:	11000204 	addi	r4,r2,8
  83c68c:	e0bffe17 	ldw	r2,-8(fp)
  83c690:	10800617 	ldw	r2,24(r2)
  83c694:	10802717 	ldw	r2,156(r2)
  83c698:	11400517 	ldw	r5,20(r2)
  83c69c:	01800184 	movi	r6,6
  83c6a0:	08073d80 	call	8073d8 <memmove>

   /* prepend ethernet unicast header to arp reply */
   MEMMOVE(ethout + ET_DSTOFF, ethin + ET_SRCOFF, 6);
  83c6a4:	e0bffa17 	ldw	r2,-24(fp)
  83c6a8:	11400184 	addi	r5,r2,6
  83c6ac:	e13ffb17 	ldw	r4,-20(fp)
  83c6b0:	01800184 	movi	r6,6
  83c6b4:	08073d80 	call	8073d8 <memmove>
   MEMMOVE(ethout + ET_SRCOFF, outpkt->net->n_mib->ifPhysAddress, 6);
  83c6b8:	e0bffb17 	ldw	r2,-20(fp)
  83c6bc:	11000184 	addi	r4,r2,6
  83c6c0:	e0bffe17 	ldw	r2,-8(fp)
  83c6c4:	10800617 	ldw	r2,24(r2)
  83c6c8:	10802717 	ldw	r2,156(r2)
  83c6cc:	11400517 	ldw	r5,20(r2)
  83c6d0:	01800184 	movi	r6,6
  83c6d4:	08073d80 	call	8073d8 <memmove>

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)out;
  83c6d8:	e0bffc17 	ldw	r2,-16(fp)
  83c6dc:	e0bff915 	stw	r2,-28(fp)
      MEMMOVE(&arwp->data[AR_SHA], out->ar_sha, 6);
  83c6e0:	e0bff917 	ldw	r2,-28(fp)
  83c6e4:	11000204 	addi	r4,r2,8
  83c6e8:	e0bffc17 	ldw	r2,-16(fp)
  83c6ec:	11400204 	addi	r5,r2,8
  83c6f0:	01800184 	movi	r6,6
  83c6f4:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &out->ar_spa, 4);
  83c6f8:	e0bff917 	ldw	r2,-28(fp)
  83c6fc:	10800204 	addi	r2,r2,8
  83c700:	11000184 	addi	r4,r2,6
  83c704:	e0bffc17 	ldw	r2,-16(fp)
  83c708:	11400404 	addi	r5,r2,16
  83c70c:	01800104 	movi	r6,4
  83c710:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], out->ar_tha, 6);
  83c714:	e0bff917 	ldw	r2,-28(fp)
  83c718:	10800204 	addi	r2,r2,8
  83c71c:	11000284 	addi	r4,r2,10
  83c720:	e0bffc17 	ldw	r2,-16(fp)
  83c724:	11400504 	addi	r5,r2,20
  83c728:	01800184 	movi	r6,6
  83c72c:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &out->ar_tpa, 4);
  83c730:	e0bff917 	ldw	r2,-28(fp)
  83c734:	10800204 	addi	r2,r2,8
  83c738:	11000404 	addi	r4,r2,16
  83c73c:	e0bffc17 	ldw	r2,-16(fp)
  83c740:	11400704 	addi	r5,r2,28
  83c744:	01800104 	movi	r6,4
  83c748:	08073d80 	call	8073d8 <memmove>
   }
#endif   /* NO_CC_PACKING */

   /* if a packet oriented send exists, use it: */
   if (outpkt->net->pkt_send)
  83c74c:	e0bffe17 	ldw	r2,-8(fp)
  83c750:	10800617 	ldw	r2,24(r2)
  83c754:	10800417 	ldw	r2,16(r2)
  83c758:	1005003a 	cmpeq	r2,r2,zero
  83c75c:	10000a1e 	bne	r2,zero,83c788 <arpReply+0x234>
   {
      outpkt->nb_prot = outpkt->nb_buff;
  83c760:	e0bffe17 	ldw	r2,-8(fp)
  83c764:	10c00117 	ldw	r3,4(r2)
  83c768:	e0bffe17 	ldw	r2,-8(fp)
  83c76c:	10c00315 	stw	r3,12(r2)
      outpkt->net->pkt_send(outpkt);
  83c770:	e0bffe17 	ldw	r2,-8(fp)
  83c774:	10800617 	ldw	r2,24(r2)
  83c778:	10800417 	ldw	r2,16(r2)
  83c77c:	e13ffe17 	ldw	r4,-8(fp)
  83c780:	103ee83a 	callr	r2
  83c784:	00001006 	br	83c7c8 <arpReply+0x274>
   }
   else
   {
      outpkt->net->raw_send(pkt->net, outpkt->nb_buff, outpkt->nb_plen);
  83c788:	e0bffe17 	ldw	r2,-8(fp)
  83c78c:	10800617 	ldw	r2,24(r2)
  83c790:	10c00317 	ldw	r3,12(r2)
  83c794:	e0bfff17 	ldw	r2,-4(fp)
  83c798:	11000617 	ldw	r4,24(r2)
  83c79c:	e0bffe17 	ldw	r2,-8(fp)
  83c7a0:	11400117 	ldw	r5,4(r2)
  83c7a4:	e0bffe17 	ldw	r2,-8(fp)
  83c7a8:	11800417 	ldw	r6,16(r2)
  83c7ac:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83c7b0:	01000084 	movi	r4,2
  83c7b4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(outpkt);
  83c7b8:	e13ffe17 	ldw	r4,-8(fp)
  83c7bc:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83c7c0:	01000084 	movi	r4,2
  83c7c4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   }
   /* input 'pkt' will be freed by caller */
   arpRepsOut++;
  83c7c8:	d0a0c917 	ldw	r2,-31964(gp)
  83c7cc:	10800044 	addi	r2,r2,1
  83c7d0:	d0a0c915 	stw	r2,-31964(gp)
}
  83c7d4:	e037883a 	mov	sp,fp
  83c7d8:	dfc00117 	ldw	ra,4(sp)
  83c7dc:	df000017 	ldw	fp,0(sp)
  83c7e0:	dec00204 	addi	sp,sp,8
  83c7e4:	f800283a 	ret

0083c7e8 <arprcv>:
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
  83c7e8:	defff804 	addi	sp,sp,-32
  83c7ec:	dfc00715 	stw	ra,28(sp)
  83c7f0:	df000615 	stw	fp,24(sp)
  83c7f4:	df000604 	addi	fp,sp,24
  83c7f8:	e13ffe15 	stw	r4,-8(fp)
   char *eth;
#ifdef IEEE_802_3
   int      ieee = FALSE;     /* TRUE if received packet is 802.3 */
#endif

   eth = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
  83c7fc:	e0bffe17 	ldw	r2,-8(fp)
  83c800:	10800317 	ldw	r2,12(r2)
  83c804:	10bffc84 	addi	r2,r2,-14
  83c808:	e0bffb15 	stw	r2,-20(fp)
   arphdr = (struct arp_hdr *)(pkt->nb_prot);
  83c80c:	e0bffe17 	ldw	r2,-8(fp)
  83c810:	10800317 	ldw	r2,12(r2)
  83c814:	e0bffd15 	stw	r2,-12(fp)
#endif   /* IEEE_802_3_ONLY */
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
  83c818:	e0bffd17 	ldw	r2,-12(fp)
  83c81c:	e0bffa15 	stw	r2,-24(fp)
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
  83c820:	e0bffd17 	ldw	r2,-12(fp)
  83c824:	11000704 	addi	r4,r2,28
  83c828:	e0bffa17 	ldw	r2,-24(fp)
  83c82c:	10800204 	addi	r2,r2,8
  83c830:	11400404 	addi	r5,r2,16
  83c834:	01800104 	movi	r6,4
  83c838:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(arphdr->ar_tha, &arwp->data[AR_THA], 6);
  83c83c:	e0bffd17 	ldw	r2,-12(fp)
  83c840:	11000504 	addi	r4,r2,20
  83c844:	e0bffa17 	ldw	r2,-24(fp)
  83c848:	10800204 	addi	r2,r2,8
  83c84c:	11400284 	addi	r5,r2,10
  83c850:	01800184 	movi	r6,6
  83c854:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arphdr->ar_spa, &arwp->data[AR_SPA], 4);
  83c858:	e0bffd17 	ldw	r2,-12(fp)
  83c85c:	11000404 	addi	r4,r2,16
  83c860:	e0bffa17 	ldw	r2,-24(fp)
  83c864:	10800204 	addi	r2,r2,8
  83c868:	11400184 	addi	r5,r2,6
  83c86c:	01800104 	movi	r6,4
  83c870:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(arphdr->ar_sha, &arwp->data[AR_SHA], 6);
  83c874:	e0bffd17 	ldw	r2,-12(fp)
  83c878:	11000204 	addi	r4,r2,8
  83c87c:	e0bffa17 	ldw	r2,-24(fp)
  83c880:	11400204 	addi	r5,r2,8
  83c884:	01800184 	movi	r6,6
  83c888:	08073d80 	call	8073d8 <memmove>
   }
#endif

   /* check ARP's target IP against our net's: */
#ifdef IP_MULTICAST
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
  83c88c:	e0bffd17 	ldw	r2,-12(fp)
  83c890:	10c00717 	ldw	r3,28(r2)
  83c894:	e0bffe17 	ldw	r2,-8(fp)
  83c898:	10800617 	ldw	r2,24(r2)
  83c89c:	10800a17 	ldw	r2,40(r2)
  83c8a0:	18801f26 	beq	r3,r2,83c920 <arprcv+0x138>
  83c8a4:	e0bffd17 	ldw	r2,-12(fp)
  83c8a8:	10800717 	ldw	r2,28(r2)
  83c8ac:	1004d63a 	srli	r2,r2,24
  83c8b0:	10c03fcc 	andi	r3,r2,255
  83c8b4:	e0bffd17 	ldw	r2,-12(fp)
  83c8b8:	10800717 	ldw	r2,28(r2)
  83c8bc:	1004d23a 	srli	r2,r2,8
  83c8c0:	10bfc00c 	andi	r2,r2,65280
  83c8c4:	1886b03a 	or	r3,r3,r2
  83c8c8:	e0bffd17 	ldw	r2,-12(fp)
  83c8cc:	10800717 	ldw	r2,28(r2)
  83c8d0:	10bfc00c 	andi	r2,r2,65280
  83c8d4:	1004923a 	slli	r2,r2,8
  83c8d8:	1886b03a 	or	r3,r3,r2
  83c8dc:	e0bffd17 	ldw	r2,-12(fp)
  83c8e0:	10800717 	ldw	r2,28(r2)
  83c8e4:	10803fcc 	andi	r2,r2,255
  83c8e8:	1004963a 	slli	r2,r2,24
  83c8ec:	1884b03a 	or	r2,r3,r2
  83c8f0:	10fc002c 	andhi	r3,r2,61440
  83c8f4:	00b80034 	movhi	r2,57344
  83c8f8:	18800926 	beq	r3,r2,83c920 <arprcv+0x138>
     (!IN_MULTICAST(ntohl(arphdr->ar_tpa))))
#else
   if (arphdr->ar_tpa != pkt->net->n_ipaddr)
#endif /* IP_MULTICAST */
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83c8fc:	01000084 	movi	r4,2
  83c900:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(pkt);     /* not for us, dump & ret (proxy here later?) */
  83c904:	e13ffe17 	ldw	r4,-8(fp)
  83c908:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83c90c:	01000084 	movi	r4,2
  83c910:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return (ENP_NOT_MINE);
  83c914:	00800084 	movi	r2,2
  83c918:	e0bfff15 	stw	r2,-4(fp)
  83c91c:	00004406 	br	83ca30 <arprcv+0x248>
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
  83c920:	e0bffd17 	ldw	r2,-12(fp)
  83c924:	1080018b 	ldhu	r2,6(r2)
  83c928:	10bfffcc 	andi	r2,r2,65535
  83c92c:	10804018 	cmpnei	r2,r2,256
  83c930:	10000b1e 	bne	r2,zero,83c960 <arprcv+0x178>
   {
      arpReqsIn++;   /* count these */
  83c934:	d0a0c617 	ldw	r2,-31976(gp)
  83c938:	10800044 	addi	r2,r2,1
  83c93c:	d0a0c615 	stw	r2,-31976(gp)
      arpReply(pkt); /* send arp reply */
  83c940:	e13ffe17 	ldw	r4,-8(fp)
  83c944:	083c5540 	call	83c554 <arpReply>
      /* make partial ARP table entry */
      make_arp_entry(arphdr->ar_spa, pkt->net);
  83c948:	e0bffd17 	ldw	r2,-12(fp)
  83c94c:	11000417 	ldw	r4,16(r2)
  83c950:	e0bffe17 	ldw	r2,-8(fp)
  83c954:	11400617 	ldw	r5,24(r2)
  83c958:	083c4400 	call	83c440 <make_arp_entry>
  83c95c:	00000306 	br	83c96c <arprcv+0x184>
      /* fall thru to arp reply logic to finish our table entry */
   }
   else     /* ARP reply, count and fall thru to logic to update table */
   {
      arpRepsIn++;
  83c960:	d0a0c817 	ldw	r2,-31968(gp)
  83c964:	10800044 	addi	r2,r2,1
  83c968:	d0a0c815 	stw	r2,-31968(gp)
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
  83c96c:	00803934 	movhi	r2,228
  83c970:	10a99d04 	addi	r2,r2,-22924
  83c974:	e0bffc15 	stw	r2,-16(fp)
  83c978:	00002106 	br	83ca00 <arprcv+0x218>
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
  83c97c:	e0bffc17 	ldw	r2,-16(fp)
  83c980:	10c00017 	ldw	r3,0(r2)
  83c984:	e0bffd17 	ldw	r2,-12(fp)
  83c988:	10800417 	ldw	r2,16(r2)
  83c98c:	1880191e 	bne	r3,r2,83c9f4 <arprcv+0x20c>
            tp->flags |= ET_SNAP;
         else
            tp->flags |= ET_ETH2;      /* else it's ethernet II */
#endif   /* IEEE_802_3 */

         MEMMOVE(tp->t_phy_addr, arphdr->ar_sha, 6);   /* update MAC adddress */
  83c990:	e0bffc17 	ldw	r2,-16(fp)
  83c994:	11000104 	addi	r4,r2,4
  83c998:	e0bffd17 	ldw	r2,-12(fp)
  83c99c:	11400204 	addi	r5,r2,8
  83c9a0:	01800184 	movi	r6,6
  83c9a4:	08073d80 	call	8073d8 <memmove>
         tp->lasttime = cticks;
  83c9a8:	00802174 	movhi	r2,133
  83c9ac:	10832604 	addi	r2,r2,3224
  83c9b0:	10c00017 	ldw	r3,0(r2)
  83c9b4:	e0bffc17 	ldw	r2,-16(fp)
  83c9b8:	10c00615 	stw	r3,24(r2)
         if (tp->pending)     /* packet waiting for this IP entry? */
  83c9bc:	e0bffc17 	ldw	r2,-16(fp)
  83c9c0:	10800417 	ldw	r2,16(r2)
  83c9c4:	1005003a 	cmpeq	r2,r2,zero
  83c9c8:	1000021e 	bne	r2,zero,83c9d4 <arprcv+0x1ec>
         {
            arp_send_pending(tp);
  83c9cc:	e13ffc17 	ldw	r4,-16(fp)
  83c9d0:	083bd8c0 	call	83bd8c <arp_send_pending>
         }
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83c9d4:	01000084 	movi	r4,2
  83c9d8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(pkt);
  83c9dc:	e13ffe17 	ldw	r4,-8(fp)
  83c9e0:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83c9e4:	01000084 	movi	r4,2
  83c9e8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

         return (0);
  83c9ec:	e03fff15 	stw	zero,-4(fp)
  83c9f0:	00000f06 	br	83ca30 <arprcv+0x248>
      arpRepsIn++;
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
  83c9f4:	e0bffc17 	ldw	r2,-16(fp)
  83c9f8:	10800804 	addi	r2,r2,32
  83c9fc:	e0bffc15 	stw	r2,-16(fp)
  83ca00:	00c03934 	movhi	r3,228
  83ca04:	18e9dd04 	addi	r3,r3,-22668
  83ca08:	e0bffc17 	ldw	r2,-16(fp)
  83ca0c:	10ffdb36 	bltu	r2,r3,83c97c <arprcv+0x194>

#ifdef IEEE_802_3_ONLY
drop:
#endif /* IEEE_802_3_ONLY */
   /* fall to here if packet is not in table */
   LOCK_NET_RESOURCE(FREEQ_RESID);
  83ca10:	01000084 	movi	r4,2
  83ca14:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(pkt);
  83ca18:	e13ffe17 	ldw	r4,-8(fp)
  83ca1c:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83ca20:	01000084 	movi	r4,2
  83ca24:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   return ENP_NOT_MINE;
  83ca28:	00800084 	movi	r2,2
  83ca2c:	e0bfff15 	stw	r2,-4(fp)
  83ca30:	e0bfff17 	ldw	r2,-4(fp)
}
  83ca34:	e037883a 	mov	sp,fp
  83ca38:	dfc00117 	ldw	ra,4(sp)
  83ca3c:	df000017 	ldw	fp,0(sp)
  83ca40:	dec00204 	addi	sp,sp,8
  83ca44:	f800283a 	ret

0083ca48 <send_via_arp>:
 * change the PC's IP address. 
 */

int
send_via_arp(PACKET pkt, ip_addr dest_ip)
{
  83ca48:	defff704 	addi	sp,sp,-36
  83ca4c:	dfc00815 	stw	ra,32(sp)
  83ca50:	df000715 	stw	fp,28(sp)
  83ca54:	df000704 	addi	fp,sp,28
  83ca58:	e13ffd15 	stw	r4,-12(fp)
  83ca5c:	e17ffe15 	stw	r5,-8(fp)
   struct arptabent *tp;
   unsigned long lticks = cticks;
  83ca60:	00802174 	movhi	r2,133
  83ca64:	10832604 	addi	r2,r2,3224
  83ca68:	10800017 	ldw	r2,0(r2)
  83ca6c:	e0bffb15 	stw	r2,-20(fp)
   int err;

   /* don't allow zero dest */
   if (dest_ip == 0)
  83ca70:	e0bffe17 	ldw	r2,-8(fp)
  83ca74:	1004c03a 	cmpne	r2,r2,zero
  83ca78:	1000091e 	bne	r2,zero,83caa0 <send_via_arp+0x58>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83ca7c:	01000084 	movi	r4,2
  83ca80:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(pkt);
  83ca84:	e13ffd17 	ldw	r4,-12(fp)
  83ca88:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83ca8c:	01000084 	movi	r4,2
  83ca90:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return SEND_DROPPED; 
  83ca94:	00bffa84 	movi	r2,-22
  83ca98:	e0bfff15 	stw	r2,-4(fp)
  83ca9c:	00004e06 	br	83cbd8 <send_via_arp+0x190>
   }

   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
  83caa0:	d0e0ca17 	ldw	r3,-31960(gp)
  83caa4:	e0bffb17 	ldw	r2,-20(fp)
  83caa8:	10c5c83a 	sub	r2,r2,r3
  83caac:	1080fa70 	cmpltui	r2,r2,1001
  83cab0:	1000011e 	bne	r2,zero,83cab8 <send_via_arp+0x70>
      arpcache = (struct arptabent *)NULL;
  83cab4:	d020c515 	stw	zero,-31980(gp)

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
  83cab8:	d0a0c517 	ldw	r2,-31980(gp)
  83cabc:	1005003a 	cmpeq	r2,r2,zero
  83cac0:	1000071e 	bne	r2,zero,83cae0 <send_via_arp+0x98>
  83cac4:	d0a0c517 	ldw	r2,-31980(gp)
  83cac8:	10c00017 	ldw	r3,0(r2)
  83cacc:	e0bffe17 	ldw	r2,-8(fp)
  83cad0:	1880031e 	bne	r3,r2,83cae0 <send_via_arp+0x98>
      tp = arpcache;
  83cad4:	d0a0c517 	ldw	r2,-31980(gp)
  83cad8:	e0bffc15 	stw	r2,-16(fp)
   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
      arpcache = (struct arptabent *)NULL;

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
  83cadc:	00000306 	br	83caec <send_via_arp+0xa4>
      tp = arpcache;
   else
   {
      /* scan arp table for an existing entry */
      tp = find_oldest_arp(dest_ip);
  83cae0:	e13ffe17 	ldw	r4,-8(fp)
  83cae4:	083c2980 	call	83c298 <find_oldest_arp>
  83cae8:	e0bffc15 	stw	r2,-16(fp)
   }

   if (tp->t_pro_addr == dest_ip)   /* we found our entry */
  83caec:	e0bffc17 	ldw	r2,-16(fp)
  83caf0:	10c00017 	ldw	r3,0(r2)
  83caf4:	e0bffe17 	ldw	r2,-8(fp)
  83caf8:	1880311e 	bne	r3,r2,83cbc0 <send_via_arp+0x178>
   {
      if (tp->pending)  /* arp already pending for this IP? */
  83cafc:	e0bffc17 	ldw	r2,-16(fp)
  83cb00:	10800417 	ldw	r2,16(r2)
  83cb04:	1005003a 	cmpeq	r2,r2,zero
  83cb08:	1000241e 	bne	r2,zero,83cb9c <send_via_arp+0x154>
      {
         if (lilfreeq.q_len < 2)
  83cb0c:	00803934 	movhi	r2,228
  83cb10:	10a7fe04 	addi	r2,r2,-24584
  83cb14:	10800217 	ldw	r2,8(r2)
  83cb18:	10800088 	cmpgei	r2,r2,2
  83cb1c:	1000091e 	bne	r2,zero,83cb44 <send_via_arp+0xfc>
         {
            /* system is depleted of resources - free the
             * pkt instead of queueing it - so that we are in a
             * position to receive an arp reply 
             */
            LOCK_NET_RESOURCE(FREEQ_RESID);
  83cb20:	01000084 	movi	r4,2
  83cb24:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(pkt);  /* sorry, we have to dump this one.. */
  83cb28:	e13ffd17 	ldw	r4,-12(fp)
  83cb2c:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83cb30:	01000084 	movi	r4,2
  83cb34:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            err = SEND_DROPPED;    /* pkts already waiting for this IP entry */
  83cb38:	00bffa84 	movi	r2,-22
  83cb3c:	e0bffa15 	stw	r2,-24(fp)
  83cb40:	00002306 	br	83cbd0 <send_via_arp+0x188>
         }
         else
         {
            PACKET tmppkt=tp->pending;
  83cb44:	e0bffc17 	ldw	r2,-16(fp)
  83cb48:	10800417 	ldw	r2,16(r2)
  83cb4c:	e0bff915 	stw	r2,-28(fp)

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
  83cb50:	00000306 	br	83cb60 <send_via_arp+0x118>
               tmppkt = tmppkt->next;
  83cb54:	e0bff917 	ldw	r2,-28(fp)
  83cb58:	10800017 	ldw	r2,0(r2)
  83cb5c:	e0bff915 	stw	r2,-28(fp)
         else
         {
            PACKET tmppkt=tp->pending;

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
  83cb60:	e0bff917 	ldw	r2,-28(fp)
  83cb64:	10800017 	ldw	r2,0(r2)
  83cb68:	1004c03a 	cmpne	r2,r2,zero
  83cb6c:	103ff91e 	bne	r2,zero,83cb54 <send_via_arp+0x10c>
               tmppkt = tmppkt->next;
            tmppkt->next = pkt;      /* add new pkt to end of list */
  83cb70:	e0fff917 	ldw	r3,-28(fp)
  83cb74:	e0bffd17 	ldw	r2,-12(fp)
  83cb78:	18800015 	stw	r2,0(r3)
            if (pkt->next)
  83cb7c:	e0bffd17 	ldw	r2,-12(fp)
  83cb80:	10800017 	ldw	r2,0(r2)
  83cb84:	1005003a 	cmpeq	r2,r2,zero
  83cb88:	1000011e 	bne	r2,zero,83cb90 <send_via_arp+0x148>
            {
               dtrap();              /* chain of pkts to be sent ??? */
  83cb8c:	082a7c80 	call	82a7c8 <dtrap>
            }
            err = ENP_SEND_PENDING; /* packet queued pending ARP reply */
  83cb90:	00800044 	movi	r2,1
  83cb94:	e0bffa15 	stw	r2,-24(fp)
  83cb98:	00000d06 	br	83cbd0 <send_via_arp+0x188>
         }
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
  83cb9c:	e0bffc17 	ldw	r2,-16(fp)
  83cba0:	d0a0c515 	stw	r2,-31980(gp)
         cachetime = lticks;  /* mark time we cached */
  83cba4:	e0bffb17 	ldw	r2,-20(fp)
  83cba8:	d0a0ca15 	stw	r2,-31960(gp)
         err = et_send(pkt, tp);
  83cbac:	e13ffd17 	ldw	r4,-12(fp)
  83cbb0:	e17ffc17 	ldw	r5,-16(fp)
  83cbb4:	083bb880 	call	83bb88 <et_send>
  83cbb8:	e0bffa15 	stw	r2,-24(fp)
  83cbbc:	00000406 	br	83cbd0 <send_via_arp+0x188>
      }
   }
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);
  83cbc0:	e13ffd17 	ldw	r4,-12(fp)
  83cbc4:	e17ffe17 	ldw	r5,-8(fp)
  83cbc8:	083be000 	call	83be00 <send_arp>
  83cbcc:	e0bffa15 	stw	r2,-24(fp)

   return (err);
  83cbd0:	e0bffa17 	ldw	r2,-24(fp)
  83cbd4:	e0bfff15 	stw	r2,-4(fp)
  83cbd8:	e0bfff17 	ldw	r2,-4(fp)
}
  83cbdc:	e037883a 	mov	sp,fp
  83cbe0:	dfc00117 	ldw	ra,4(sp)
  83cbe4:	df000017 	ldw	fp,0(sp)
  83cbe8:	dec00204 	addi	sp,sp,8
  83cbec:	f800283a 	ret

0083cbf0 <cb_arpent_tmo>:
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
  83cbf0:	defffa04 	addi	sp,sp,-24
  83cbf4:	dfc00515 	stw	ra,20(sp)
  83cbf8:	df000415 	stw	fp,16(sp)
  83cbfc:	df000404 	addi	fp,sp,16
  83cc00:	e13fff15 	stw	r4,-4(fp)
   struct arptabent *tp;
   int arp_count = 0;
  83cc04:	e03ffd15 	stw	zero,-12(fp)
   unsigned long lticks = cticks;
  83cc08:	00802174 	movhi	r2,133
  83cc0c:	10832604 	addi	r2,r2,3224
  83cc10:	10800017 	ldw	r2,0(r2)
  83cc14:	e0bffc15 	stw	r2,-16(fp)

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
  83cc18:	00803934 	movhi	r2,228
  83cc1c:	10a99d04 	addi	r2,r2,-22924
  83cc20:	e0bffe15 	stw	r2,-8(fp)
  83cc24:	00002906 	br	83cccc <cb_arpent_tmo+0xdc>
   {
      if (tp->t_pro_addr != 0)
  83cc28:	e0bffe17 	ldw	r2,-8(fp)
  83cc2c:	10800017 	ldw	r2,0(r2)
  83cc30:	1005003a 	cmpeq	r2,r2,zero
  83cc34:	1000221e 	bne	r2,zero,83ccc0 <cb_arpent_tmo+0xd0>
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
  83cc38:	e0bffe17 	ldw	r2,-8(fp)
  83cc3c:	10800417 	ldw	r2,16(r2)
  83cc40:	1005003a 	cmpeq	r2,r2,zero
  83cc44:	10000b1e 	bne	r2,zero,83cc74 <cb_arpent_tmo+0x84>
  83cc48:	e0bffe17 	ldw	r2,-8(fp)
  83cc4c:	10c00517 	ldw	r3,20(r2)
  83cc50:	e0bffc17 	ldw	r2,-16(fp)
  83cc54:	10c5c83a 	sub	r2,r2,r3
  83cc58:	1080fa70 	cmpltui	r2,r2,1001
  83cc5c:	1000051e 	bne	r2,zero,83cc74 <cb_arpent_tmo+0x84>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
  83cc60:	e13ffe17 	ldw	r4,-8(fp)
  83cc64:	083bd040 	call	83bd04 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
  83cc68:	e0bffe17 	ldw	r2,-8(fp)
  83cc6c:	10000015 	stw	zero,0(r2)
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   {
      if (tp->t_pro_addr != 0)
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
  83cc70:	00001306 	br	83ccc0 <cb_arpent_tmo+0xd0>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
  83cc74:	e0bffe17 	ldw	r2,-8(fp)
  83cc78:	10c00517 	ldw	r3,20(r2)
  83cc7c:	e0bffc17 	ldw	r2,-16(fp)
  83cc80:	10c5c83a 	sub	r2,r2,r3
  83cc84:	1007883a 	mov	r3,r2
  83cc88:	d0a05417 	ldw	r2,-32432(gp)
  83cc8c:	18800916 	blt	r3,r2,83ccb4 <cb_arpent_tmo+0xc4>
  83cc90:	e0bffe17 	ldw	r2,-8(fp)
  83cc94:	10c00617 	ldw	r3,24(r2)
  83cc98:	e0bffc17 	ldw	r2,-16(fp)
  83cc9c:	10c5c83a 	sub	r2,r2,r3
  83cca0:	1080fa30 	cmpltui	r2,r2,1000
  83cca4:	1000031e 	bne	r2,zero,83ccb4 <cb_arpent_tmo+0xc4>
                  ((int)(lticks - tp->lasttime)   >= TPS))
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
  83cca8:	e0bffe17 	ldw	r2,-8(fp)
  83ccac:	10000015 	stw	zero,0(r2)
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
  83ccb0:	00000306 	br	83ccc0 <cb_arpent_tmo+0xd0>
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else
            arp_count++;
  83ccb4:	e0bffd17 	ldw	r2,-12(fp)
  83ccb8:	10800044 	addi	r2,r2,1
  83ccbc:	e0bffd15 	stw	r2,-12(fp)
{
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
  83ccc0:	e0bffe17 	ldw	r2,-8(fp)
  83ccc4:	10800804 	addi	r2,r2,32
  83ccc8:	e0bffe15 	stw	r2,-8(fp)
  83cccc:	00c03934 	movhi	r3,228
  83ccd0:	18e9dd04 	addi	r3,r3,-22668
  83ccd4:	e0bffe17 	ldw	r2,-8(fp)
  83ccd8:	10ffd336 	bltu	r2,r3,83cc28 <cb_arpent_tmo+0x38>
            arp_count++;
      }
   }

   /* if there are no more "pending" entries, kill the timer */
   if (arp_count == 0)
  83ccdc:	e0bffd17 	ldw	r2,-12(fp)
  83cce0:	1004c03a 	cmpne	r2,r2,zero
  83cce4:	1000031e 	bne	r2,zero,83ccf4 <cb_arpent_tmo+0x104>
   {
      in_timerkill(arp_timer);
  83cce8:	d120c417 	ldw	r4,-31984(gp)
  83ccec:	083b9380 	call	83b938 <in_timerkill>
      arp_timer = 0;
  83ccf0:	d020c415 	stw	zero,-31984(gp)
   }
      
   USE_ARG(arg);
}
  83ccf4:	e037883a 	mov	sp,fp
  83ccf8:	dfc00117 	ldw	ra,4(sp)
  83ccfc:	df000017 	ldw	fp,0(sp)
  83cd00:	dec00204 	addi	sp,sp,8
  83cd04:	f800283a 	ret

0083cd08 <grat_arp>:
 * RETURNS: Returns 0 if OK, or the usual ENP_ errors 
 */

int
grat_arp(NET net, int flag)
{
  83cd08:	defff604 	addi	sp,sp,-40
  83cd0c:	dfc00915 	stw	ra,36(sp)
  83cd10:	df000815 	stw	fp,32(sp)
  83cd14:	df000804 	addi	fp,sp,32
  83cd18:	e13ffd15 	stw	r4,-12(fp)
  83cd1c:	e17ffe15 	stw	r5,-8(fp)
   char * ethhdr;
   struct arp_hdr *  arphdr;
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
  83cd20:	e0bffd17 	ldw	r2,-12(fp)
  83cd24:	10802717 	ldw	r2,156(r2)
  83cd28:	e0bffa15 	stw	r2,-24(fp)
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
  83cd2c:	01000084 	movi	r4,2
  83cd30:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
  83cd34:	01000c04 	movi	r4,48
  83cd38:	0829b840 	call	829b84 <pk_alloc>
  83cd3c:	e0bff915 	stw	r2,-28(fp)
   if (!arppkt)
  83cd40:	e0bff917 	ldw	r2,-28(fp)
  83cd44:	1004c03a 	cmpne	r2,r2,zero
  83cd48:	1000051e 	bne	r2,zero,83cd60 <grat_arp+0x58>
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83cd4c:	01000084 	movi	r4,2
  83cd50:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
  83cd54:	00bffa84 	movi	r2,-22
  83cd58:	e0bfff15 	stw	r2,-4(fp)
  83cd5c:	00009706 	br	83cfbc <grat_arp+0x2b4>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83cd60:	01000084 	movi	r4,2
  83cd64:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
  83cd68:	e0bff917 	ldw	r2,-28(fp)
  83cd6c:	10c00117 	ldw	r3,4(r2)
  83cd70:	e0bff917 	ldw	r2,-28(fp)
  83cd74:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
  83cd78:	e0fff917 	ldw	r3,-28(fp)
  83cd7c:	00800c04 	movi	r2,48
  83cd80:	18800415 	stw	r2,16(r3)
   arppkt->net = net;
  83cd84:	e0fff917 	ldw	r3,-28(fp)
  83cd88:	e0bffd17 	ldw	r2,-12(fp)
  83cd8c:	18800615 	stw	r2,24(r3)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
  83cd90:	e0bff917 	ldw	r2,-28(fp)
  83cd94:	10800117 	ldw	r2,4(r2)
  83cd98:	10800084 	addi	r2,r2,2
  83cd9c:	e0bffc15 	stw	r2,-16(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
  83cda0:	e0bff917 	ldw	r2,-28(fp)
  83cda4:	10800117 	ldw	r2,4(r2)
  83cda8:	10800404 	addi	r2,r2,16
  83cdac:	e0bffb15 	stw	r2,-20(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
  83cdb0:	e0fffb17 	ldw	r3,-20(fp)
  83cdb4:	00804004 	movi	r2,256
  83cdb8:	1880000d 	sth	r2,0(r3)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
  83cdbc:	e0fffb17 	ldw	r3,-20(fp)
  83cdc0:	00800204 	movi	r2,8
  83cdc4:	1880008d 	sth	r2,2(r3)
   arphdr->ar_hln = 6;
  83cdc8:	e0fffb17 	ldw	r3,-20(fp)
  83cdcc:	00800184 	movi	r2,6
  83cdd0:	18800105 	stb	r2,4(r3)
   arphdr->ar_pln = 4;
  83cdd4:	e0fffb17 	ldw	r3,-20(fp)
  83cdd8:	00800104 	movi	r2,4
  83cddc:	18800145 	stb	r2,5(r3)
   
   /* ARP req? */
   if (flag == 0)
  83cde0:	e0bffe17 	ldw	r2,-8(fp)
  83cde4:	1004c03a 	cmpne	r2,r2,zero
  83cde8:	1000041e 	bne	r2,zero,83cdfc <grat_arp+0xf4>
      /* yup */
      arphdr->ar_op = ARREQ;
  83cdec:	e0fffb17 	ldw	r3,-20(fp)
  83cdf0:	00804004 	movi	r2,256
  83cdf4:	1880018d 	sth	r2,6(r3)
  83cdf8:	00000306 	br	83ce08 <grat_arp+0x100>
   else
     /* nope */
      arphdr->ar_op = ARREP;
  83cdfc:	e0fffb17 	ldw	r3,-20(fp)
  83ce00:	00808004 	movi	r2,512
  83ce04:	1880018d 	sth	r2,6(r3)
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
  83ce08:	e0bffd17 	ldw	r2,-12(fp)
  83ce0c:	10c00a17 	ldw	r3,40(r2)
  83ce10:	e0bffb17 	ldw	r2,-20(fp)
  83ce14:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
  83ce18:	e0bffd17 	ldw	r2,-12(fp)
  83ce1c:	10c00a17 	ldw	r3,40(r2)
  83ce20:	e0bffb17 	ldw	r2,-20(fp)
  83ce24:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
  83ce28:	e0bffb17 	ldw	r2,-20(fp)
  83ce2c:	11000204 	addi	r4,r2,8
  83ce30:	e0bffa17 	ldw	r2,-24(fp)
  83ce34:	11400517 	ldw	r5,20(r2)
  83ce38:	01800184 	movi	r6,6
  83ce3c:	08073d80 	call	8073d8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
  83ce40:	e0fffc17 	ldw	r3,-16(fp)
  83ce44:	00bfffc4 	movi	r2,-1
  83ce48:	18800005 	stb	r2,0(r3)
  83ce4c:	00bfffc4 	movi	r2,-1
  83ce50:	18800045 	stb	r2,1(r3)
  83ce54:	00bfffc4 	movi	r2,-1
  83ce58:	18800085 	stb	r2,2(r3)
  83ce5c:	00bfffc4 	movi	r2,-1
  83ce60:	188000c5 	stb	r2,3(r3)
  83ce64:	00bfffc4 	movi	r2,-1
  83ce68:	18800105 	stb	r2,4(r3)
  83ce6c:	00bfffc4 	movi	r2,-1
  83ce70:	18800145 	stb	r2,5(r3)
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
  83ce74:	e0bffc17 	ldw	r2,-16(fp)
  83ce78:	11000184 	addi	r4,r2,6
  83ce7c:	e0bffa17 	ldw	r2,-24(fp)
  83ce80:	11400517 	ldw	r5,20(r2)
  83ce84:	01800184 	movi	r6,6
  83ce88:	08073d80 	call	8073d8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
  83ce8c:	e0bffc17 	ldw	r2,-16(fp)
  83ce90:	10c00304 	addi	r3,r2,12
  83ce94:	00800204 	movi	r2,8
  83ce98:	18800005 	stb	r2,0(r3)
  83ce9c:	e0bffc17 	ldw	r2,-16(fp)
  83cea0:	10c00344 	addi	r3,r2,13
  83cea4:	00800184 	movi	r2,6
  83cea8:	18800005 	stb	r2,0(r3)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
  83ceac:	e0bffb17 	ldw	r2,-20(fp)
  83ceb0:	e0bff815 	stw	r2,-32(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
  83ceb4:	e0bff817 	ldw	r2,-32(fp)
  83ceb8:	11000204 	addi	r4,r2,8
  83cebc:	e0bffb17 	ldw	r2,-20(fp)
  83cec0:	11400204 	addi	r5,r2,8
  83cec4:	01800184 	movi	r6,6
  83cec8:	08073d80 	call	8073d8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
  83cecc:	e0bff817 	ldw	r2,-32(fp)
  83ced0:	10800204 	addi	r2,r2,8
  83ced4:	11000184 	addi	r4,r2,6
  83ced8:	e0bffb17 	ldw	r2,-20(fp)
  83cedc:	11400404 	addi	r5,r2,16
  83cee0:	01800104 	movi	r6,4
  83cee4:	08073d80 	call	8073d8 <memmove>

   /* ARP req? */
   if (flag == 0)
  83cee8:	e0bffe17 	ldw	r2,-8(fp)
  83ceec:	1004c03a 	cmpne	r2,r2,zero
  83cef0:	1000081e 	bne	r2,zero,83cf14 <grat_arp+0x20c>
      /* yup */      
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
  83cef4:	e0bff817 	ldw	r2,-32(fp)
  83cef8:	10800204 	addi	r2,r2,8
  83cefc:	11000284 	addi	r4,r2,10
  83cf00:	e0bffb17 	ldw	r2,-20(fp)
  83cf04:	11400504 	addi	r5,r2,20
  83cf08:	01800184 	movi	r6,6
  83cf0c:	08073d80 	call	8073d8 <memmove>
  83cf10:	00000706 	br	83cf30 <grat_arp+0x228>
   else
      /* nope */
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_sha, 6);
  83cf14:	e0bff817 	ldw	r2,-32(fp)
  83cf18:	10800204 	addi	r2,r2,8
  83cf1c:	11000284 	addi	r4,r2,10
  83cf20:	e0bffb17 	ldw	r2,-20(fp)
  83cf24:	11400204 	addi	r5,r2,8
  83cf28:	01800184 	movi	r6,6
  83cf2c:	08073d80 	call	8073d8 <memmove>
      
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
  83cf30:	e0bff817 	ldw	r2,-32(fp)
  83cf34:	10800204 	addi	r2,r2,8
  83cf38:	11000404 	addi	r4,r2,16
  83cf3c:	e0bffb17 	ldw	r2,-20(fp)
  83cf40:	11400704 	addi	r5,r2,28
  83cf44:	01800104 	movi	r6,4
  83cf48:	08073d80 	call	8073d8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
  83cf4c:	e0bffd17 	ldw	r2,-12(fp)
  83cf50:	10800417 	ldw	r2,16(r2)
  83cf54:	1005003a 	cmpeq	r2,r2,zero
  83cf58:	1000051e 	bne	r2,zero,83cf70 <grat_arp+0x268>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
  83cf5c:	e0bffd17 	ldw	r2,-12(fp)
  83cf60:	10800417 	ldw	r2,16(r2)
  83cf64:	e13ff917 	ldw	r4,-28(fp)
  83cf68:	103ee83a 	callr	r2
  83cf6c:	00000e06 	br	83cfa8 <grat_arp+0x2a0>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
  83cf70:	e0bffd17 	ldw	r2,-12(fp)
  83cf74:	10c00317 	ldw	r3,12(r2)
  83cf78:	e0bff917 	ldw	r2,-28(fp)
  83cf7c:	11000617 	ldw	r4,24(r2)
  83cf80:	e0bff917 	ldw	r2,-28(fp)
  83cf84:	11400117 	ldw	r5,4(r2)
  83cf88:	01800c04 	movi	r6,48
  83cf8c:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83cf90:	01000084 	movi	r4,2
  83cf94:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
  83cf98:	e13ff917 	ldw	r4,-28(fp)
  83cf9c:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83cfa0:	01000084 	movi	r4,2
  83cfa4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
  83cfa8:	d0a0c717 	ldw	r2,-31972(gp)
  83cfac:	10800044 	addi	r2,r2,1
  83cfb0:	d0a0c715 	stw	r2,-31972(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
  83cfb4:	00800044 	movi	r2,1
  83cfb8:	e0bfff15 	stw	r2,-4(fp)
  83cfbc:	e0bfff17 	ldw	r2,-4(fp)
}
  83cfc0:	e037883a 	mov	sp,fp
  83cfc4:	dfc00117 	ldw	ra,4(sp)
  83cfc8:	df000017 	ldw	fp,0(sp)
  83cfcc:	dec00204 	addi	sp,sp,8
  83cfd0:	f800283a 	ret

0083cfd4 <if_getbynum>:
 * RETURNS: Returns NET pointer, or NULL if out of range
 */

NET
if_getbynum(int ifnum)
{
  83cfd4:	defffb04 	addi	sp,sp,-20
  83cfd8:	dfc00415 	stw	ra,16(sp)
  83cfdc:	df000315 	stw	fp,12(sp)
  83cfe0:	df000304 	addi	fp,sp,12
  83cfe4:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  83cfe8:	00803934 	movhi	r2,228
  83cfec:	10a9dd04 	addi	r2,r2,-22668
  83cff0:	10800017 	ldw	r2,0(r2)
  83cff4:	e0bffd15 	stw	r2,-12(fp)
  83cff8:	00000c06 	br	83d02c <if_getbynum+0x58>
   {
      if(ifnum-- == 0)
  83cffc:	e0bffe17 	ldw	r2,-8(fp)
  83d000:	10bfffc4 	addi	r2,r2,-1
  83d004:	e0bffe15 	stw	r2,-8(fp)
  83d008:	e0bffe17 	ldw	r2,-8(fp)
  83d00c:	10bfffd8 	cmpnei	r2,r2,-1
  83d010:	1000031e 	bne	r2,zero,83d020 <if_getbynum+0x4c>
         return ifp;
  83d014:	e0bffd17 	ldw	r2,-12(fp)
  83d018:	e0bfff15 	stw	r2,-4(fp)
  83d01c:	00000806 	br	83d040 <if_getbynum+0x6c>

NET
if_getbynum(int ifnum)
{
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  83d020:	e0bffd17 	ldw	r2,-12(fp)
  83d024:	10800017 	ldw	r2,0(r2)
  83d028:	e0bffd15 	stw	r2,-12(fp)
  83d02c:	e0bffd17 	ldw	r2,-12(fp)
  83d030:	1004c03a 	cmpne	r2,r2,zero
  83d034:	103ff11e 	bne	r2,zero,83cffc <if_getbynum+0x28>
   {
      if(ifnum-- == 0)
         return ifp;
   }
   dtrap();
  83d038:	082a7c80 	call	82a7c8 <dtrap>
   return NULL;   /* list is not long enough */
  83d03c:	e03fff15 	stw	zero,-4(fp)
  83d040:	e0bfff17 	ldw	r2,-4(fp)
}
  83d044:	e037883a 	mov	sp,fp
  83d048:	dfc00117 	ldw	ra,4(sp)
  83d04c:	df000017 	ldw	fp,0(sp)
  83d050:	dec00204 	addi	sp,sp,8
  83d054:	f800283a 	ret

0083d058 <isbcast>:
 * RETURNS:  Returns TRUE if broadcast, else false. 
 */

int
isbcast(NET ifc, unsigned char * addr)
{
  83d058:	defffc04 	addi	sp,sp,-16
  83d05c:	df000315 	stw	fp,12(sp)
  83d060:	df000304 	addi	fp,sp,12
  83d064:	e13ffd15 	stw	r4,-12(fp)
  83d068:	e17ffe15 	stw	r5,-8(fp)
#if (ALIGN_TYPE > 2)
   /* On systems with 32bit alignment requirements we have to make
    * sure our tests are aligned. Specifically, this results in "data
    * abort" errors on the Samsung/ARM port. 
    */
   if((u_long)addr & (ALIGN_TYPE - 1))
  83d06c:	e0bffe17 	ldw	r2,-8(fp)
  83d070:	108000cc 	andi	r2,r2,3
  83d074:	1005003a 	cmpeq	r2,r2,zero
  83d078:	10000e1e 	bne	r2,zero,83d0b4 <isbcast+0x5c>
   {
      /* check first two bytes */
      if ((u_short)*(u_short*)(addr) != 0xFFFF)
  83d07c:	e0bffe17 	ldw	r2,-8(fp)
  83d080:	1080000b 	ldhu	r2,0(r2)
  83d084:	10ffffcc 	andi	r3,r2,65535
  83d088:	00bfffd4 	movui	r2,65535
  83d08c:	18800226 	beq	r3,r2,83d098 <isbcast+0x40>
         return(FALSE);
  83d090:	e03fff15 	stw	zero,-4(fp)
  83d094:	00002306 	br	83d124 <isbcast+0xcc>
      if ((u_long)(*(u_long*)(addr + 2)) != 0xFFFFFFFF)
  83d098:	e0bffe17 	ldw	r2,-8(fp)
  83d09c:	10800084 	addi	r2,r2,2
  83d0a0:	10800017 	ldw	r2,0(r2)
  83d0a4:	10bfffe0 	cmpeqi	r2,r2,-1
  83d0a8:	1000101e 	bne	r2,zero,83d0ec <isbcast+0x94>
         return FALSE;
  83d0ac:	e03fff15 	stw	zero,-4(fp)
  83d0b0:	00001c06 	br	83d124 <isbcast+0xcc>
#endif /* ALIGN_TYPE > 4 */
   {
      /* check first four bytes for all ones. Since this is the fastest
       * test, do it first
       */
      if ((u_long)(*(u_long*)addr) != 0xFFFFFFFF)
  83d0b4:	e0bffe17 	ldw	r2,-8(fp)
  83d0b8:	10800017 	ldw	r2,0(r2)
  83d0bc:	10bfffe0 	cmpeqi	r2,r2,-1
  83d0c0:	1000021e 	bne	r2,zero,83d0cc <isbcast+0x74>
         return FALSE;
  83d0c4:	e03fff15 	stw	zero,-4(fp)
  83d0c8:	00001606 	br	83d124 <isbcast+0xcc>

      /* check last two bytes */
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
  83d0cc:	e0bffe17 	ldw	r2,-8(fp)
  83d0d0:	10800104 	addi	r2,r2,4
  83d0d4:	1080000b 	ldhu	r2,0(r2)
  83d0d8:	10ffffcc 	andi	r3,r2,65535
  83d0dc:	00bfffd4 	movui	r2,65535
  83d0e0:	18800226 	beq	r3,r2,83d0ec <isbcast+0x94>
         return(FALSE);
  83d0e4:	e03fff15 	stw	zero,-4(fp)
  83d0e8:	00000e06 	br	83d124 <isbcast+0xcc>
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
  83d0ec:	e0bffd17 	ldw	r2,-12(fp)
  83d0f0:	10802717 	ldw	r2,156(r2)
  83d0f4:	10800217 	ldw	r2,8(r2)
  83d0f8:	108005e0 	cmpeqi	r2,r2,23
  83d0fc:	1000051e 	bne	r2,zero,83d114 <isbcast+0xbc>
  83d100:	e0bffd17 	ldw	r2,-12(fp)
  83d104:	10802717 	ldw	r2,156(r2)
  83d108:	10800217 	ldw	r2,8(r2)
  83d10c:	10800718 	cmpnei	r2,r2,28
  83d110:	1000021e 	bne	r2,zero,83d11c <isbcast+0xc4>
       (ifc->n_mib->ifType == SLIP))
   {
      return FALSE;
  83d114:	e03fff15 	stw	zero,-4(fp)
  83d118:	00000206 	br	83d124 <isbcast+0xcc>
   }

   /* passed all tests, must be broadcast */
   return(TRUE);
  83d11c:	00800044 	movi	r2,1
  83d120:	e0bfff15 	stw	r2,-4(fp)
  83d124:	e0bfff17 	ldw	r2,-4(fp)
}
  83d128:	e037883a 	mov	sp,fp
  83d12c:	df000017 	ldw	fp,0(sp)
  83d130:	dec00104 	addi	sp,sp,4
  83d134:	f800283a 	ret

0083d138 <reg_type>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
reg_type(unshort type)
{
  83d138:	defffa04 	addi	sp,sp,-24
  83d13c:	dfc00515 	stw	ra,20(sp)
  83d140:	df000415 	stw	fp,16(sp)
  83d144:	df000404 	addi	fp,sp,16
  83d148:	e13ffe0d 	sth	r4,-8(fp)
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  83d14c:	00803934 	movhi	r2,228
  83d150:	10a9dd04 	addi	r2,r2,-22668
  83d154:	10800017 	ldw	r2,0(r2)
  83d158:	e0bffd15 	stw	r2,-12(fp)
  83d15c:	00001306 	br	83d1ac <reg_type+0x74>
   {
      if (ifp->n_reg_type)    /* make sure call exists */
  83d160:	e0bffd17 	ldw	r2,-12(fp)
  83d164:	10800617 	ldw	r2,24(r2)
  83d168:	1005003a 	cmpeq	r2,r2,zero
  83d16c:	10000c1e 	bne	r2,zero,83d1a0 <reg_type+0x68>
      {
         e = (ifp->n_reg_type)(type, ifp);
  83d170:	e0bffd17 	ldw	r2,-12(fp)
  83d174:	10800617 	ldw	r2,24(r2)
  83d178:	e13ffe0b 	ldhu	r4,-8(fp)
  83d17c:	e17ffd17 	ldw	r5,-12(fp)
  83d180:	103ee83a 	callr	r2
  83d184:	e0bffc15 	stw	r2,-16(fp)
         if (e)
  83d188:	e0bffc17 	ldw	r2,-16(fp)
  83d18c:	1005003a 	cmpeq	r2,r2,zero
  83d190:	1000031e 	bne	r2,zero,83d1a0 <reg_type+0x68>
            return e;   /* bails out if error */
  83d194:	e0bffc17 	ldw	r2,-16(fp)
  83d198:	e0bfff15 	stw	r2,-4(fp)
  83d19c:	00000706 	br	83d1bc <reg_type+0x84>
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
  83d1a0:	e0bffd17 	ldw	r2,-12(fp)
  83d1a4:	10800017 	ldw	r2,0(r2)
  83d1a8:	e0bffd15 	stw	r2,-12(fp)
  83d1ac:	e0bffd17 	ldw	r2,-12(fp)
  83d1b0:	1004c03a 	cmpne	r2,r2,zero
  83d1b4:	103fea1e 	bne	r2,zero,83d160 <reg_type+0x28>
         e = (ifp->n_reg_type)(type, ifp);
         if (e)
            return e;   /* bails out if error */
      }
   }
   return 0;   /* OK code */
  83d1b8:	e03fff15 	stw	zero,-4(fp)
  83d1bc:	e0bfff17 	ldw	r2,-4(fp)
}
  83d1c0:	e037883a 	mov	sp,fp
  83d1c4:	dfc00117 	ldw	ra,4(sp)
  83d1c8:	df000017 	ldw	fp,0(sp)
  83d1cc:	dec00204 	addi	sp,sp,8
  83d1d0:	f800283a 	ret

0083d1d4 <if_killsocks>:
 */

      /* kill this NETs sockets */
void
if_killsocks(NET ifp)
{
  83d1d4:	defffa04 	addi	sp,sp,-24
  83d1d8:	dfc00515 	stw	ra,20(sp)
  83d1dc:	df000415 	stw	fp,16(sp)
  83d1e0:	df000404 	addi	fp,sp,16
  83d1e4:	e13fff15 	stw	r4,-4(fp)
   struct socket * so;
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
  83d1e8:	00803934 	movhi	r2,228
  83d1ec:	10a8d904 	addi	r2,r2,-23708
  83d1f0:	10800017 	ldw	r2,0(r2)
  83d1f4:	e0bffe15 	stw	r2,-8(fp)
   while(so)
  83d1f8:	00001406 	br	83d24c <if_killsocks+0x78>
   {
      if(so->so_pcb)
  83d1fc:	e0bffe17 	ldw	r2,-8(fp)
  83d200:	10800117 	ldw	r2,4(r2)
  83d204:	1005003a 	cmpeq	r2,r2,zero
  83d208:	1000051e 	bne	r2,zero,83d220 <if_killsocks+0x4c>
         so_ifp = so->so_pcb->ifp;
  83d20c:	e0bffe17 	ldw	r2,-8(fp)
  83d210:	10800117 	ldw	r2,4(r2)
  83d214:	10800a17 	ldw	r2,40(r2)
  83d218:	e0bffc15 	stw	r2,-16(fp)
  83d21c:	00000106 	br	83d224 <if_killsocks+0x50>
      else
         so_ifp = NULL;
  83d220:	e03ffc15 	stw	zero,-16(fp)
      next = (struct socket *)so->next;
  83d224:	e0bffe17 	ldw	r2,-8(fp)
  83d228:	10800017 	ldw	r2,0(r2)
  83d22c:	e0bffd15 	stw	r2,-12(fp)
      if (so_ifp == ifp)
  83d230:	e0fffc17 	ldw	r3,-16(fp)
  83d234:	e0bfff17 	ldw	r2,-4(fp)
  83d238:	1880021e 	bne	r3,r2,83d244 <if_killsocks+0x70>
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
  83d23c:	e13ffe17 	ldw	r4,-8(fp)
  83d240:	082f7380 	call	82f738 <soabort>
      }
      so = next;
  83d244:	e0bffd17 	ldw	r2,-12(fp)
  83d248:	e0bffe15 	stw	r2,-8(fp)
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
   while(so)
  83d24c:	e0bffe17 	ldw	r2,-8(fp)
  83d250:	1004c03a 	cmpne	r2,r2,zero
  83d254:	103fe91e 	bne	r2,zero,83d1fc <if_killsocks+0x28>
          */
         soabort(so);
      }
      so = next;
   }
}
  83d258:	e037883a 	mov	sp,fp
  83d25c:	dfc00117 	ldw	ra,4(sp)
  83d260:	df000017 	ldw	fp,0(sp)
  83d264:	dec00204 	addi	sp,sp,8
  83d268:	f800283a 	ret

0083d26c <ip_init>:
 * OK, else returns a non-zero error code. 
 */

int
ip_init(void)
{
  83d26c:	defffd04 	addi	sp,sp,-12
  83d270:	dfc00215 	stw	ra,8(sp)
  83d274:	df000115 	stw	fp,4(sp)
  83d278:	df000104 	addi	fp,sp,4

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
  83d27c:	01000204 	movi	r4,8
  83d280:	083d1380 	call	83d138 <reg_type>
  83d284:	1005003a 	cmpeq	r2,r2,zero
  83d288:	1000061e 	bne	r2,zero,83d2a4 <ip_init+0x38>
   {   
#ifdef NPDEBUG
      dprintf("IP_INIT: unable to register type with MAC driver\n");
  83d28c:	01002174 	movhi	r4,133
  83d290:	2137c004 	addi	r4,r4,-8448
  83d294:	08077600 	call	807760 <puts>
#endif
      return(1);
  83d298:	00800044 	movi	r2,1
  83d29c:	e0bfff15 	stw	r2,-4(fp)
  83d2a0:	00002b06 	br	83d350 <ip_init+0xe4>
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
  83d2a4:	00803934 	movhi	r2,228
  83d2a8:	10a9e204 	addi	r2,r2,-22648
  83d2ac:	1009883a 	mov	r4,r2
  83d2b0:	01801404 	movi	r6,80
  83d2b4:	000b883a 	mov	r5,zero
  83d2b8:	08074b80 	call	8074b8 <memset>
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
  83d2bc:	00c03934 	movhi	r3,228
  83d2c0:	18e9e204 	addi	r3,r3,-22648
  83d2c4:	00800084 	movi	r2,2
  83d2c8:	18800015 	stw	r2,0(r3)
   ip_mib.ipDefaultTTL = IP_TTL;
  83d2cc:	00c03934 	movhi	r3,228
  83d2d0:	18e9e204 	addi	r3,r3,-22648
  83d2d4:	00801004 	movi	r2,64
  83d2d8:	18800115 	stw	r2,4(r3)

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
  83d2dc:	d0a05617 	ldw	r2,-32424(gp)
  83d2e0:	11000f24 	muli	r4,r2,60
  83d2e4:	082b20c0 	call	82b20c <npalloc>
  83d2e8:	d0a0cb15 	stw	r2,-31956(gp)
   if (!rt_mib)
  83d2ec:	d0a0cb17 	ldw	r2,-31956(gp)
  83d2f0:	1004c03a 	cmpne	r2,r2,zero
  83d2f4:	1000061e 	bne	r2,zero,83d310 <ip_init+0xa4>
   {
#ifdef NPDEBUG
      dprintf("IP_INIT ERROR: can't alloc route table\n");
  83d2f8:	01002174 	movhi	r4,133
  83d2fc:	2137cd04 	addi	r4,r4,-8396
  83d300:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
  83d304:	00bffb04 	movi	r2,-20
  83d308:	e0bfff15 	stw	r2,-4(fp)
  83d30c:	00001006 	br	83d350 <ip_init+0xe4>
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
  83d310:	d0e0cb17 	ldw	r3,-31956(gp)
  83d314:	d0a05617 	ldw	r2,-32424(gp)
  83d318:	10800f24 	muli	r2,r2,60
  83d31c:	1809883a 	mov	r4,r3
  83d320:	100d883a 	mov	r6,r2
  83d324:	000b883a 	mov	r5,zero
  83d328:	08074b80 	call	8074b8 <memset>
  ip_mib.ipForwarding = 1;   /* override default, be gateway (router) */
  83d32c:	00c03934 	movhi	r3,228
  83d330:	18e9e204 	addi	r3,r3,-22648
  83d334:	00800044 	movi	r2,1
  83d338:	18800015 	stw	r2,0(r3)
#endif   /* IP_ROUTING */

   /* set IP reassembly timeout */
   ip_mib.ipReasmTimeout = IRE_TMO;
  83d33c:	00c03934 	movhi	r3,228
  83d340:	18e9e204 	addi	r3,r3,-22648
  83d344:	00801e04 	movi	r2,120
  83d348:	18800c15 	stw	r2,48(r3)
      return(1);
   }
#endif   /* IPSEC */

   /* everything opened OK return 0 */
   return(SUCCESS);
  83d34c:	e03fff15 	stw	zero,-4(fp)
  83d350:	e0bfff17 	ldw	r2,-4(fp)
}
  83d354:	e037883a 	mov	sp,fp
  83d358:	dfc00117 	ldw	ra,4(sp)
  83d35c:	df000017 	ldw	fp,0(sp)
  83d360:	dec00204 	addi	sp,sp,8
  83d364:	f800283a 	ret

0083d368 <ip_bldhead>:
 * RETURNS: void
 */

void
ip_bldhead(PACKET p, unsigned pid, u_char prot, unshort fragword)
{
  83d368:	defff804 	addi	sp,sp,-32
  83d36c:	dfc00715 	stw	ra,28(sp)
  83d370:	df000615 	stw	fp,24(sp)
  83d374:	df000604 	addi	fp,sp,24
  83d378:	e13ffc15 	stw	r4,-16(fp)
  83d37c:	e17ffd15 	stw	r5,-12(fp)
  83d380:	e1bffe05 	stb	r6,-8(fp)
  83d384:	e1ffff0d 	sth	r7,-4(fp)
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
  83d388:	e0bffc17 	ldw	r2,-16(fp)
  83d38c:	10800317 	ldw	r2,12(r2)
  83d390:	10fffb04 	addi	r3,r2,-20
  83d394:	e0bffc17 	ldw	r2,-16(fp)
  83d398:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
  83d39c:	e0bffc17 	ldw	r2,-16(fp)
  83d3a0:	10800417 	ldw	r2,16(r2)
  83d3a4:	10c00504 	addi	r3,r2,20
  83d3a8:	e0bffc17 	ldw	r2,-16(fp)
  83d3ac:	10c00415 	stw	r3,16(r2)

   pip = (struct ip*)p->nb_prot;
  83d3b0:	e0bffc17 	ldw	r2,-16(fp)
  83d3b4:	10800317 	ldw	r2,12(r2)
  83d3b8:	e0bffb15 	stw	r2,-20(fp)

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
  83d3bc:	e0fffb17 	ldw	r3,-20(fp)
  83d3c0:	00801144 	movi	r2,69
  83d3c4:	18800005 	stb	r2,0(r3)
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
  83d3c8:	e0fffb17 	ldw	r3,-20(fp)
  83d3cc:	e0bfff0b 	ldhu	r2,-4(fp)
  83d3d0:	1880018d 	sth	r2,6(r3)
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
  83d3d4:	e0bffd17 	ldw	r2,-12(fp)
  83d3d8:	10bfffcc 	andi	r2,r2,65535
  83d3dc:	1004d23a 	srli	r2,r2,8
  83d3e0:	10803fcc 	andi	r2,r2,255
  83d3e4:	1009883a 	mov	r4,r2
  83d3e8:	e0bffd17 	ldw	r2,-12(fp)
  83d3ec:	10bfffcc 	andi	r2,r2,65535
  83d3f0:	1004923a 	slli	r2,r2,8
  83d3f4:	1007883a 	mov	r3,r2
  83d3f8:	00bfc004 	movi	r2,-256
  83d3fc:	1884703a 	and	r2,r3,r2
  83d400:	2084b03a 	or	r2,r4,r2
  83d404:	1007883a 	mov	r3,r2
  83d408:	e0bffb17 	ldw	r2,-20(fp)
  83d40c:	10c0010d 	sth	r3,4(r2)
   pip->ip_len = htons((unshort)p->nb_plen);
  83d410:	e0bffc17 	ldw	r2,-16(fp)
  83d414:	10800417 	ldw	r2,16(r2)
  83d418:	10bfffcc 	andi	r2,r2,65535
  83d41c:	1004d23a 	srli	r2,r2,8
  83d420:	10803fcc 	andi	r2,r2,255
  83d424:	1009883a 	mov	r4,r2
  83d428:	e0bffc17 	ldw	r2,-16(fp)
  83d42c:	10800417 	ldw	r2,16(r2)
  83d430:	10bfffcc 	andi	r2,r2,65535
  83d434:	1004923a 	slli	r2,r2,8
  83d438:	1007883a 	mov	r3,r2
  83d43c:	00bfc004 	movi	r2,-256
  83d440:	1884703a 	and	r2,r3,r2
  83d444:	2084b03a 	or	r2,r4,r2
  83d448:	1007883a 	mov	r3,r2
  83d44c:	e0bffb17 	ldw	r2,-20(fp)
  83d450:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */
  83d454:	e0fffb17 	ldw	r3,-20(fp)
  83d458:	e0bffe03 	ldbu	r2,-8(fp)
  83d45c:	18800245 	stb	r2,9(r3)

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
  83d460:	e0bffc17 	ldw	r2,-16(fp)
  83d464:	10800c17 	ldw	r2,48(r2)
  83d468:	e0bffa15 	stw	r2,-24(fp)
  83d46c:	e0bffa17 	ldw	r2,-24(fp)
  83d470:	1005003a 	cmpeq	r2,r2,zero
  83d474:	1000121e 	bne	r2,zero,83d4c0 <ip_bldhead+0x158>
   {
	  /* yup */
	  if (sopts->ip_ttl)
  83d478:	e0bffa17 	ldw	r2,-24(fp)
  83d47c:	10800043 	ldbu	r2,1(r2)
  83d480:	10803fcc 	andi	r2,r2,255
  83d484:	1005003a 	cmpeq	r2,r2,zero
  83d488:	1000051e 	bne	r2,zero,83d4a0 <ip_bldhead+0x138>
         pip->ip_time = sopts->ip_ttl;
  83d48c:	e0bffa17 	ldw	r2,-24(fp)
  83d490:	10c00043 	ldbu	r3,1(r2)
  83d494:	e0bffb17 	ldw	r2,-20(fp)
  83d498:	10c00205 	stb	r3,8(r2)
  83d49c:	00000306 	br	83d4ac <ip_bldhead+0x144>
	  else
         pip->ip_time = (u_char)IP_TTL;     /* default number of hops, really */
  83d4a0:	e0fffb17 	ldw	r3,-20(fp)
  83d4a4:	00801004 	movi	r2,64
  83d4a8:	18800205 	stb	r2,8(r3)
      pip->ip_tos = sopts->ip_tos;
  83d4ac:	e0bffa17 	ldw	r2,-24(fp)
  83d4b0:	10c00003 	ldbu	r3,0(r2)
  83d4b4:	e0bffb17 	ldw	r2,-20(fp)
  83d4b8:	10c00045 	stb	r3,1(r2)
  83d4bc:	00000506 	br	83d4d4 <ip_bldhead+0x16c>
   }
   else
   {
	  /* nope */
      pip->ip_time = (u_char)IP_TTL;       /* default number of hops, really */
  83d4c0:	e0bffb17 	ldw	r2,-20(fp)
  83d4c4:	00c01004 	movi	r3,64
  83d4c8:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
  83d4cc:	e0bffb17 	ldw	r2,-20(fp)
  83d4d0:	10000045 	stb	zero,1(r2)
   }
   
   pip->ip_chksum = IPXSUM;      /* clear checksum field for summing */
  83d4d4:	e0bffb17 	ldw	r2,-20(fp)
  83d4d8:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
  83d4dc:	e13ffb17 	ldw	r4,-20(fp)
  83d4e0:	01400284 	movi	r5,10
  83d4e4:	08256340 	call	825634 <cksum>
  83d4e8:	0084303a 	nor	r2,zero,r2
  83d4ec:	1007883a 	mov	r3,r2
  83d4f0:	e0bffb17 	ldw	r2,-20(fp)
  83d4f4:	10c0028d 	sth	r3,10(r2)
}
  83d4f8:	e037883a 	mov	sp,fp
  83d4fc:	dfc00117 	ldw	ra,4(sp)
  83d500:	df000017 	ldw	fp,0(sp)
  83d504:	dec00204 	addi	sp,sp,8
  83d508:	f800283a 	ret

0083d50c <ip_write_internal>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
  83d50c:	deffed04 	addi	sp,sp,-76
  83d510:	dfc01215 	stw	ra,72(sp)
  83d514:	df001115 	stw	fp,68(sp)
  83d518:	df001104 	addi	fp,sp,68
  83d51c:	e13ffc15 	stw	r4,-16(fp)
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
  83d520:	e0bffc17 	ldw	r2,-16(fp)
  83d524:	10800717 	ldw	r2,28(r2)
  83d528:	1004d63a 	srli	r2,r2,24
  83d52c:	10c03fcc 	andi	r3,r2,255
  83d530:	e0bffc17 	ldw	r2,-16(fp)
  83d534:	10800717 	ldw	r2,28(r2)
  83d538:	1004d23a 	srli	r2,r2,8
  83d53c:	10bfc00c 	andi	r2,r2,65280
  83d540:	1886b03a 	or	r3,r3,r2
  83d544:	e0bffc17 	ldw	r2,-16(fp)
  83d548:	10800717 	ldw	r2,28(r2)
  83d54c:	10bfc00c 	andi	r2,r2,65280
  83d550:	1004923a 	slli	r2,r2,8
  83d554:	1886b03a 	or	r3,r3,r2
  83d558:	e0bffc17 	ldw	r2,-16(fp)
  83d55c:	10800717 	ldw	r2,28(r2)
  83d560:	10803fcc 	andi	r2,r2,255
  83d564:	1004963a 	slli	r2,r2,24
  83d568:	1884b03a 	or	r2,r3,r2
  83d56c:	10fc002c 	andhi	r3,r2,61440
  83d570:	00b80034 	movhi	r2,57344
  83d574:	1880b31e 	bne	r3,r2,83d844 <ip_write_internal+0x338>
   {
      if (p->imo != NULL)
  83d578:	e0bffc17 	ldw	r2,-16(fp)
  83d57c:	10800b17 	ldw	r2,44(r2)
  83d580:	1005003a 	cmpeq	r2,r2,zero
  83d584:	1000131e 	bne	r2,zero,83d5d4 <ip_write_internal+0xc8>
         if (p->imo->imo_multicast_netp)
  83d588:	e0bffc17 	ldw	r2,-16(fp)
  83d58c:	10800b17 	ldw	r2,44(r2)
  83d590:	10800017 	ldw	r2,0(r2)
  83d594:	1005003a 	cmpeq	r2,r2,zero
  83d598:	1000061e 	bne	r2,zero,83d5b4 <ip_write_internal+0xa8>
            p->net = p->imo->imo_multicast_netp;
  83d59c:	e0bffc17 	ldw	r2,-16(fp)
  83d5a0:	10800b17 	ldw	r2,44(r2)
  83d5a4:	10c00017 	ldw	r3,0(r2)
  83d5a8:	e0bffc17 	ldw	r2,-16(fp)
  83d5ac:	10c00615 	stw	r3,24(r2)
  83d5b0:	00002606 	br	83d64c <ip_write_internal+0x140>
         else
            p->net = iproute(p->fhost, &firsthop);
  83d5b4:	e0bffc17 	ldw	r2,-16(fp)
  83d5b8:	11000717 	ldw	r4,28(r2)
  83d5bc:	e17ffb04 	addi	r5,fp,-20
  83d5c0:	083f16c0 	call	83f16c <iproute>
  83d5c4:	1007883a 	mov	r3,r2
  83d5c8:	e0bffc17 	ldw	r2,-16(fp)
  83d5cc:	10c00615 	stw	r3,24(r2)
  83d5d0:	00001e06 	br	83d64c <ip_write_internal+0x140>
      else
      {
         for (i = 0; i < ifNumber; i++)
  83d5d4:	e03ff815 	stw	zero,-32(fp)
  83d5d8:	00001706 	br	83d638 <ip_write_internal+0x12c>
            if (nets[i]->n_mcastlist)
  83d5dc:	e0bff817 	ldw	r2,-32(fp)
  83d5e0:	00c03934 	movhi	r3,228
  83d5e4:	18e79c04 	addi	r3,r3,-24976
  83d5e8:	1085883a 	add	r2,r2,r2
  83d5ec:	1085883a 	add	r2,r2,r2
  83d5f0:	10c5883a 	add	r2,r2,r3
  83d5f4:	10800017 	ldw	r2,0(r2)
  83d5f8:	10802b17 	ldw	r2,172(r2)
  83d5fc:	1005003a 	cmpeq	r2,r2,zero
  83d600:	10000a1e 	bne	r2,zero,83d62c <ip_write_internal+0x120>
            {
               p->net = nets[i];
  83d604:	e0bff817 	ldw	r2,-32(fp)
  83d608:	00c03934 	movhi	r3,228
  83d60c:	18e79c04 	addi	r3,r3,-24976
  83d610:	1085883a 	add	r2,r2,r2
  83d614:	1085883a 	add	r2,r2,r2
  83d618:	10c5883a 	add	r2,r2,r3
  83d61c:	10c00017 	ldw	r3,0(r2)
  83d620:	e0bffc17 	ldw	r2,-16(fp)
  83d624:	10c00615 	stw	r3,24(r2)
               break;
  83d628:	00000806 	br	83d64c <ip_write_internal+0x140>
            p->net = p->imo->imo_multicast_netp;
         else
            p->net = iproute(p->fhost, &firsthop);
      else
      {
         for (i = 0; i < ifNumber; i++)
  83d62c:	e0bff817 	ldw	r2,-32(fp)
  83d630:	10800044 	addi	r2,r2,1
  83d634:	e0bff815 	stw	r2,-32(fp)
  83d638:	00802174 	movhi	r2,133
  83d63c:	10830204 	addi	r2,r2,3080
  83d640:	10c00017 	ldw	r3,0(r2)
  83d644:	e0bff817 	ldw	r2,-32(fp)
  83d648:	10ffe436 	bltu	r2,r3,83d5dc <ip_write_internal+0xd0>
               break;
            }
      }

      /* Confirm that the outgoing interface supports multicast. */
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
  83d64c:	e0bffc17 	ldw	r2,-16(fp)
  83d650:	10800617 	ldw	r2,24(r2)
  83d654:	1005003a 	cmpeq	r2,r2,zero
  83d658:	1000051e 	bne	r2,zero,83d670 <ip_write_internal+0x164>
  83d65c:	e0bffc17 	ldw	r2,-16(fp)
  83d660:	10800617 	ldw	r2,24(r2)
  83d664:	10802b17 	ldw	r2,172(r2)
  83d668:	1004c03a 	cmpne	r2,r2,zero
  83d66c:	10002e1e 	bne	r2,zero,83d728 <ip_write_internal+0x21c>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
  83d670:	00802174 	movhi	r2,133
  83d674:	10830104 	addi	r2,r2,3076
  83d678:	10800017 	ldw	r2,0(r2)
  83d67c:	1080840c 	andi	r2,r2,528
  83d680:	1005003a 	cmpeq	r2,r2,zero
  83d684:	1000181e 	bne	r2,zero,83d6e8 <ip_write_internal+0x1dc>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
  83d688:	e0bffc17 	ldw	r2,-16(fp)
  83d68c:	11800417 	ldw	r6,16(r2)
  83d690:	e0bffc17 	ldw	r2,-16(fp)
  83d694:	10800717 	ldw	r2,28(r2)
  83d698:	11c03fcc 	andi	r7,r2,255
  83d69c:	e0bffc17 	ldw	r2,-16(fp)
  83d6a0:	10800717 	ldw	r2,28(r2)
  83d6a4:	1004d23a 	srli	r2,r2,8
  83d6a8:	11003fcc 	andi	r4,r2,255
  83d6ac:	e0bffc17 	ldw	r2,-16(fp)
  83d6b0:	10800717 	ldw	r2,28(r2)
  83d6b4:	1004d43a 	srli	r2,r2,16
  83d6b8:	10c03fcc 	andi	r3,r2,255
  83d6bc:	e0bffc17 	ldw	r2,-16(fp)
  83d6c0:	10800717 	ldw	r2,28(r2)
  83d6c4:	1004d63a 	srli	r2,r2,24
  83d6c8:	d9000015 	stw	r4,0(sp)
  83d6cc:	d8c00115 	stw	r3,4(sp)
  83d6d0:	d8800215 	stw	r2,8(sp)
  83d6d4:	01002174 	movhi	r4,133
  83d6d8:	2137d704 	addi	r4,r4,-8356
  83d6dc:	e17ffc17 	ldw	r5,-16(fp)
  83d6e0:	08076480 	call	807648 <printf>
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
  83d6e4:	082a7c80 	call	82a7c8 <dtrap>
         }
#endif
         ip_mib.ipOutNoRoutes++;
  83d6e8:	00803934 	movhi	r2,228
  83d6ec:	10a9e204 	addi	r2,r2,-22648
  83d6f0:	10800b17 	ldw	r2,44(r2)
  83d6f4:	10c00044 	addi	r3,r2,1
  83d6f8:	00803934 	movhi	r2,228
  83d6fc:	10a9e204 	addi	r2,r2,-22648
  83d700:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83d704:	01000084 	movi	r4,2
  83d708:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(p);
  83d70c:	e13ffc17 	ldw	r4,-16(fp)
  83d710:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83d714:	01000084 	movi	r4,2
  83d718:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
  83d71c:	00bff7c4 	movi	r2,-33
  83d720:	e0bffd15 	stw	r2,-12(fp)
  83d724:	00015306 	br	83dc74 <ip_write_internal+0x768>
       * If we belong to the destination multicast group
       * on the outgoing interface, and the caller did not
       * forbid loopback, put a copy of the packet on the
       * received queue.
       */
      inm = lookup_mcast(p->fhost, p->net);
  83d728:	e0bffc17 	ldw	r2,-16(fp)
  83d72c:	11000717 	ldw	r4,28(r2)
  83d730:	e0bffc17 	ldw	r2,-16(fp)
  83d734:	11400617 	ldw	r5,24(r2)
  83d738:	08423680 	call	842368 <lookup_mcast>
  83d73c:	e0bff915 	stw	r2,-28(fp)
      if ((inm != NULL) &&
  83d740:	e0bff917 	ldw	r2,-28(fp)
  83d744:	1005003a 	cmpeq	r2,r2,zero
  83d748:	10001f1e 	bne	r2,zero,83d7c8 <ip_write_internal+0x2bc>
  83d74c:	e0bffc17 	ldw	r2,-16(fp)
  83d750:	10800b17 	ldw	r2,44(r2)
  83d754:	1005003a 	cmpeq	r2,r2,zero
  83d758:	1000061e 	bne	r2,zero,83d774 <ip_write_internal+0x268>
  83d75c:	e0bffc17 	ldw	r2,-16(fp)
  83d760:	10800b17 	ldw	r2,44(r2)
  83d764:	10800143 	ldbu	r2,5(r2)
  83d768:	10803fcc 	andi	r2,r2,255
  83d76c:	1005003a 	cmpeq	r2,r2,zero
  83d770:	1000151e 	bne	r2,zero,83d7c8 <ip_write_internal+0x2bc>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
      {
         p->type = IPTP;
  83d774:	e0fffc17 	ldw	r3,-16(fp)
  83d778:	00800204 	movi	r2,8
  83d77c:	1880080d 	sth	r2,32(r3)
         pkt2 = ip_copypkt(p);
  83d780:	e13ffc17 	ldw	r4,-16(fp)
  83d784:	083f3d80 	call	83f3d8 <ip_copypkt>
  83d788:	e0bffa15 	stw	r2,-24(fp)
         if (pkt2)
  83d78c:	e0bffa17 	ldw	r2,-24(fp)
  83d790:	1005003a 	cmpeq	r2,r2,zero
  83d794:	10000c1e 	bne	r2,zero,83d7c8 <ip_write_internal+0x2bc>
         {
            LOCK_NET_RESOURCE(RXQ_RESID);
  83d798:	01000044 	movi	r4,1
  83d79c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            putq(&rcvdq, (q_elt)pkt2);
  83d7a0:	e17ffa17 	ldw	r5,-24(fp)
  83d7a4:	01003934 	movhi	r4,228
  83d7a8:	2126d704 	addi	r4,r4,-25764
  83d7ac:	082a1580 	call	82a158 <putq>
            UNLOCK_NET_RESOURCE(RXQ_RESID);
  83d7b0:	01000044 	movi	r4,1
  83d7b4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            SignalPktDemux();
  83d7b8:	00802174 	movhi	r2,133
  83d7bc:	10832904 	addi	r2,r2,3236
  83d7c0:	11000017 	ldw	r4,0(r2)
  83d7c4:	081dee40 	call	81dee4 <OSSemPost>
       * Also, multicasts addressed to the loopback interface
       * are not sent -- a copy will already have been looped
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
  83d7c8:	e0bffc17 	ldw	r2,-16(fp)
  83d7cc:	10800317 	ldw	r2,12(r2)
  83d7d0:	e0bff715 	stw	r2,-36(fp)
      if ((pip->ip_time == 0) || 
  83d7d4:	e0bff717 	ldw	r2,-36(fp)
  83d7d8:	10800203 	ldbu	r2,8(r2)
  83d7dc:	10803fcc 	andi	r2,r2,255
  83d7e0:	1005003a 	cmpeq	r2,r2,zero
  83d7e4:	10000b1e 	bne	r2,zero,83d814 <ip_write_internal+0x308>
  83d7e8:	e0bffc17 	ldw	r2,-16(fp)
  83d7ec:	10800717 	ldw	r2,28(r2)
  83d7f0:	10803fcc 	andi	r2,r2,255
  83d7f4:	10801fe0 	cmpeqi	r2,r2,127
  83d7f8:	1000061e 	bne	r2,zero,83d814 <ip_write_internal+0x308>
  83d7fc:	e0bffc17 	ldw	r2,-16(fp)
  83d800:	10c00717 	ldw	r3,28(r2)
  83d804:	e0bffc17 	ldw	r2,-16(fp)
  83d808:	10800617 	ldw	r2,24(r2)
  83d80c:	10800a17 	ldw	r2,40(r2)
  83d810:	1880081e 	bne	r3,r2,83d834 <ip_write_internal+0x328>
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
          (p->fhost == p->net->n_ipaddr))
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83d814:	01000084 	movi	r4,2
  83d818:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(p);
  83d81c:	e13ffc17 	ldw	r4,-16(fp)
  83d820:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83d824:	01000084 	movi	r4,2
  83d828:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return(SUCCESS);
  83d82c:	e03ffd15 	stw	zero,-12(fp)
  83d830:	00011006 	br	83dc74 <ip_write_internal+0x768>
      }

      firsthop = p->fhost;
  83d834:	e0bffc17 	ldw	r2,-16(fp)
  83d838:	10800717 	ldw	r2,28(r2)
  83d83c:	e0bffb15 	stw	r2,-20(fp)

      goto sendit;
  83d840:	00004106 	br	83d948 <ip_write_internal+0x43c>
   }

#endif /* IP_MULTICAST */

   /* if this is a broadcast packet, use the caller-selected network */
   if (p->fhost == 0xFFFFFFFF)
  83d844:	e0bffc17 	ldw	r2,-16(fp)
  83d848:	10800717 	ldw	r2,28(r2)
  83d84c:	10bfffd8 	cmpnei	r2,r2,-1
  83d850:	1000041e 	bne	r2,zero,83d864 <ip_write_internal+0x358>
   {
      firsthop = p->fhost;
  83d854:	e0bffc17 	ldw	r2,-16(fp)
  83d858:	10800717 	ldw	r2,28(r2)
  83d85c:	e0bffb15 	stw	r2,-20(fp)
  83d860:	00003906 	br	83d948 <ip_write_internal+0x43c>
   }
   else
   {
      p->net = iproute(p->fhost, &firsthop);
  83d864:	e0bffc17 	ldw	r2,-16(fp)
  83d868:	11000717 	ldw	r4,28(r2)
  83d86c:	e17ffb04 	addi	r5,fp,-20
  83d870:	083f16c0 	call	83f16c <iproute>
  83d874:	1007883a 	mov	r3,r2
  83d878:	e0bffc17 	ldw	r2,-16(fp)
  83d87c:	10c00615 	stw	r3,24(r2)
      if (p->net == NULL)
  83d880:	e0bffc17 	ldw	r2,-16(fp)
  83d884:	10800617 	ldw	r2,24(r2)
  83d888:	1004c03a 	cmpne	r2,r2,zero
  83d88c:	10002e1e 	bne	r2,zero,83d948 <ip_write_internal+0x43c>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
  83d890:	00802174 	movhi	r2,133
  83d894:	10830104 	addi	r2,r2,3076
  83d898:	10800017 	ldw	r2,0(r2)
  83d89c:	1080840c 	andi	r2,r2,528
  83d8a0:	1005003a 	cmpeq	r2,r2,zero
  83d8a4:	1000181e 	bne	r2,zero,83d908 <ip_write_internal+0x3fc>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
  83d8a8:	e0bffc17 	ldw	r2,-16(fp)
  83d8ac:	11800417 	ldw	r6,16(r2)
  83d8b0:	e0bffc17 	ldw	r2,-16(fp)
  83d8b4:	10800717 	ldw	r2,28(r2)
  83d8b8:	11c03fcc 	andi	r7,r2,255
  83d8bc:	e0bffc17 	ldw	r2,-16(fp)
  83d8c0:	10800717 	ldw	r2,28(r2)
  83d8c4:	1004d23a 	srli	r2,r2,8
  83d8c8:	11003fcc 	andi	r4,r2,255
  83d8cc:	e0bffc17 	ldw	r2,-16(fp)
  83d8d0:	10800717 	ldw	r2,28(r2)
  83d8d4:	1004d43a 	srli	r2,r2,16
  83d8d8:	10c03fcc 	andi	r3,r2,255
  83d8dc:	e0bffc17 	ldw	r2,-16(fp)
  83d8e0:	10800717 	ldw	r2,28(r2)
  83d8e4:	1004d63a 	srli	r2,r2,24
  83d8e8:	d9000015 	stw	r4,0(sp)
  83d8ec:	d8c00115 	stw	r3,4(sp)
  83d8f0:	d8800215 	stw	r2,8(sp)
  83d8f4:	01002174 	movhi	r4,133
  83d8f8:	2137d704 	addi	r4,r4,-8356
  83d8fc:	e17ffc17 	ldw	r5,-16(fp)
  83d900:	08076480 	call	807648 <printf>
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
  83d904:	082a7c80 	call	82a7c8 <dtrap>
         }
#endif   /* NPDEBUG */
         ip_mib.ipOutNoRoutes++;
  83d908:	00803934 	movhi	r2,228
  83d90c:	10a9e204 	addi	r2,r2,-22648
  83d910:	10800b17 	ldw	r2,44(r2)
  83d914:	10c00044 	addi	r3,r2,1
  83d918:	00803934 	movhi	r2,228
  83d91c:	10a9e204 	addi	r2,r2,-22648
  83d920:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83d924:	01000084 	movi	r4,2
  83d928:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(p);
  83d92c:	e13ffc17 	ldw	r4,-16(fp)
  83d930:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83d934:	01000084 	movi	r4,2
  83d938:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
  83d93c:	00fff7c4 	movi	r3,-33
  83d940:	e0fffd15 	stw	r3,-12(fp)
  83d944:	0000cb06 	br	83dc74 <ip_write_internal+0x768>
#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
  83d948:	00802174 	movhi	r2,133
  83d94c:	10830104 	addi	r2,r2,3076
  83d950:	10800017 	ldw	r2,0(r2)
  83d954:	1080800c 	andi	r2,r2,512
  83d958:	1005003a 	cmpeq	r2,r2,zero
  83d95c:	1000231e 	bne	r2,zero,83d9ec <ip_write_internal+0x4e0>
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
  83d960:	e0bffc17 	ldw	r2,-16(fp)
  83d964:	11400417 	ldw	r5,16(r2)
  83d968:	e0bffc17 	ldw	r2,-16(fp)
  83d96c:	10800717 	ldw	r2,28(r2)
  83d970:	11803fcc 	andi	r6,r2,255
  83d974:	e0bffc17 	ldw	r2,-16(fp)
  83d978:	10800717 	ldw	r2,28(r2)
  83d97c:	1004d23a 	srli	r2,r2,8
  83d980:	11c03fcc 	andi	r7,r2,255
  83d984:	e0bffc17 	ldw	r2,-16(fp)
  83d988:	10800717 	ldw	r2,28(r2)
  83d98c:	1004d43a 	srli	r2,r2,16
  83d990:	10c03fcc 	andi	r3,r2,255
  83d994:	e0bffc17 	ldw	r2,-16(fp)
  83d998:	10800717 	ldw	r2,28(r2)
  83d99c:	1004d63a 	srli	r2,r2,24
  83d9a0:	d8c00015 	stw	r3,0(sp)
  83d9a4:	d8800115 	stw	r2,4(sp)
  83d9a8:	01002174 	movhi	r4,133
  83d9ac:	2137e704 	addi	r4,r4,-8292
  83d9b0:	08076480 	call	807648 <printf>
       p->nb_plen, PUSH_IPADDR(p->fhost));
      dprintf(" route %u.%u.%u.%u\n", PUSH_IPADDR(firsthop));
  83d9b4:	e0bffb17 	ldw	r2,-20(fp)
  83d9b8:	11403fcc 	andi	r5,r2,255
  83d9bc:	e0bffb17 	ldw	r2,-20(fp)
  83d9c0:	1004d23a 	srli	r2,r2,8
  83d9c4:	11803fcc 	andi	r6,r2,255
  83d9c8:	e0bffb17 	ldw	r2,-20(fp)
  83d9cc:	1004d43a 	srli	r2,r2,16
  83d9d0:	11c03fcc 	andi	r7,r2,255
  83d9d4:	e0bffb17 	ldw	r2,-20(fp)
  83d9d8:	1004d63a 	srli	r2,r2,24
  83d9dc:	d8800015 	stw	r2,0(sp)
  83d9e0:	01002174 	movhi	r4,133
  83d9e4:	2137f004 	addi	r4,r4,-8256
  83d9e8:	08076480 	call	807648 <printf>
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
  83d9ec:	e0bffc17 	ldw	r2,-16(fp)
  83d9f0:	10800617 	ldw	r2,24(r2)
  83d9f4:	10c00a17 	ldw	r3,40(r2)
  83d9f8:	e0bffc17 	ldw	r2,-16(fp)
  83d9fc:	10800717 	ldw	r2,28(r2)
  83da00:	18802a1e 	bne	r3,r2,83daac <ip_write_internal+0x5a0>
  83da04:	e0bffc17 	ldw	r2,-16(fp)
  83da08:	10800717 	ldw	r2,28(r2)
  83da0c:	10803fcc 	andi	r2,r2,255
  83da10:	10801fe0 	cmpeqi	r2,r2,127
  83da14:	1000251e 	bne	r2,zero,83daac <ip_write_internal+0x5a0>
       ((p->fhost & htonl(0xff000000)) != htonl(0x7f000000)))
   {
      if (!(p->net->n_flags & NF_NBPROT))
  83da18:	e0bffc17 	ldw	r2,-16(fp)
  83da1c:	10800617 	ldw	r2,24(r2)
  83da20:	10802a17 	ldw	r2,168(r2)
  83da24:	1080020c 	andi	r2,r2,8
  83da28:	1004c03a 	cmpne	r2,r2,zero
  83da2c:	10000a1e 	bne	r2,zero,83da58 <ip_write_internal+0x54c>
          * IP or ARP protocol header) and nb_type to the protocol
          * type, and set the NF_NBPROT flag in its interfaces'
          * n_flags fields.
          */
#ifdef NPDEBUG
         dtrap();
  83da30:	082a7c80 	call	82a7c8 <dtrap>
#endif
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83da34:	01000084 	movi	r4,2
  83da38:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(p);
  83da3c:	e13ffc17 	ldw	r4,-16(fp)
  83da40:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83da44:	01000084 	movi	r4,2
  83da48:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_LOGIC;
  83da4c:	00bffd44 	movi	r2,-11
  83da50:	e0bffd15 	stw	r2,-12(fp)
  83da54:	00008706 	br	83dc74 <ip_write_internal+0x768>
      }
      p->type = IPTP;
  83da58:	e0fffc17 	ldw	r3,-16(fp)
  83da5c:	00800204 	movi	r2,8
  83da60:	1880080d 	sth	r2,32(r3)
      UNLOCK_NET_RESOURCE(NET_RESID);
  83da64:	0009883a 	mov	r4,zero
  83da68:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(RXQ_RESID);
  83da6c:	01000044 	movi	r4,1
  83da70:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      putq(&rcvdq, (q_elt)p);
  83da74:	e17ffc17 	ldw	r5,-16(fp)
  83da78:	01003934 	movhi	r4,228
  83da7c:	2126d704 	addi	r4,r4,-25764
  83da80:	082a1580 	call	82a158 <putq>
      UNLOCK_NET_RESOURCE(RXQ_RESID);
  83da84:	01000044 	movi	r4,1
  83da88:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(NET_RESID);
  83da8c:	0009883a 	mov	r4,zero
  83da90:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);

      SignalPktDemux();
  83da94:	00802174 	movhi	r2,133
  83da98:	10832904 	addi	r2,r2,3236
  83da9c:	11000017 	ldw	r4,0(r2)
  83daa0:	081dee40 	call	81dee4 <OSSemPost>

      return SUCCESS;
  83daa4:	e03ffd15 	stw	zero,-12(fp)
  83daa8:	00007206 	br	83dc74 <ip_write_internal+0x768>
   }

   /* determine if the buffer that needs to be transmitted is interrupt-safe */
   intrsafe_buf = ((p->flags & PKF_INTRUNSAFE) ? 0 : 1);
  83daac:	e0bffc17 	ldw	r2,-16(fp)
  83dab0:	10800a17 	ldw	r2,40(r2)
  83dab4:	1080040c 	andi	r2,r2,16
  83dab8:	1005003a 	cmpeq	r2,r2,zero
  83dabc:	e0bff605 	stb	r2,-40(fp)
   /* obtain the length of the largest interrupt-safe buffer that can be 
    * allocated via pk_alloc () */
   maxbuflen = pk_get_max_intrsafe_buf_len ();
  83dac0:	0829fc40 	call	829fc4 <pk_get_max_intrsafe_buf_len>
  83dac4:	e0bff315 	stw	r2,-52(fp)
    * the original buffer is interrupt-safe, we just need to consider the
    * MTU of the egress interface.  If the original buffer is interrupt-
    * unsafe, we compute the MIN of the largest interrupt-safe buffer that
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
  83dac8:	e0bff603 	ldbu	r2,-40(fp)
  83dacc:	1004c03a 	cmpne	r2,r2,zero
  83dad0:	10000e1e 	bne	r2,zero,83db0c <ip_write_internal+0x600>
       limit = MIN(maxbuflen,p->net->n_mtu);
  83dad4:	e0bffc17 	ldw	r2,-16(fp)
  83dad8:	10800617 	ldw	r2,24(r2)
  83dadc:	10800917 	ldw	r2,36(r2)
  83dae0:	e0fff317 	ldw	r3,-52(fp)
  83dae4:	e0ffff15 	stw	r3,-4(fp)
  83dae8:	e0bffe15 	stw	r2,-8(fp)
  83daec:	e0bfff17 	ldw	r2,-4(fp)
  83daf0:	e0fffe17 	ldw	r3,-8(fp)
  83daf4:	10c0022e 	bgeu	r2,r3,83db00 <ip_write_internal+0x5f4>
  83daf8:	e0bfff17 	ldw	r2,-4(fp)
  83dafc:	e0bffe15 	stw	r2,-8(fp)
  83db00:	e0fffe17 	ldw	r3,-8(fp)
  83db04:	e0fff515 	stw	r3,-44(fp)
  83db08:	00000406 	br	83db1c <ip_write_internal+0x610>
   else
       limit = p->net->n_mtu;
  83db0c:	e0bffc17 	ldw	r2,-16(fp)
  83db10:	10800617 	ldw	r2,24(r2)
  83db14:	10800917 	ldw	r2,36(r2)
  83db18:	e0bff515 	stw	r2,-44(fp)

   if ((p->nb_plen + p->net->n_lnh) > limit)
  83db1c:	e0bffc17 	ldw	r2,-16(fp)
  83db20:	10c00417 	ldw	r3,16(r2)
  83db24:	e0bffc17 	ldw	r2,-16(fp)
  83db28:	10800617 	ldw	r2,24(r2)
  83db2c:	10800817 	ldw	r2,32(r2)
  83db30:	1887883a 	add	r3,r3,r2
  83db34:	e0bff517 	ldw	r2,-44(fp)
  83db38:	10c0072e 	bgeu	r2,r3,83db58 <ip_write_internal+0x64c>
   {
#ifdef IP_FRAGMENTS
      int err;
      err = ip_fragment(p, firsthop);
  83db3c:	e17ffb17 	ldw	r5,-20(fp)
  83db40:	e13ffc17 	ldw	r4,-16(fp)
  83db44:	083e7e40 	call	83e7e4 <ip_fragment>
  83db48:	e0bff215 	stw	r2,-56(fp)
      IN_PROFILER(PF_IP, PF_EXIT);
      return(err);
  83db4c:	e0bff217 	ldw	r2,-56(fp)
  83db50:	e0bffd15 	stw	r2,-12(fp)
  83db54:	00004706 	br	83dc74 <ip_write_internal+0x768>
   }
   else
   {
      /* fragmentation is not required; check to see if we need to copy out of
       * an interrupt-unsafe buffer */ 
      if (!intrsafe_buf)
  83db58:	e0bff603 	ldbu	r2,-40(fp)
  83db5c:	1004c03a 	cmpne	r2,r2,zero
  83db60:	1000401e 	bne	r2,zero,83dc64 <ip_write_internal+0x758>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83db64:	01000084 	movi	r4,2
  83db68:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         newpkt = pk_alloc(p->nb_plen + p->net->n_lnh);
  83db6c:	e0bffc17 	ldw	r2,-16(fp)
  83db70:	10c00417 	ldw	r3,16(r2)
  83db74:	e0bffc17 	ldw	r2,-16(fp)
  83db78:	10800617 	ldw	r2,24(r2)
  83db7c:	10800817 	ldw	r2,32(r2)
  83db80:	1889883a 	add	r4,r3,r2
  83db84:	0829b840 	call	829b84 <pk_alloc>
  83db88:	e0bff415 	stw	r2,-48(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83db8c:	01000084 	movi	r4,2
  83db90:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         if (newpkt == 0)
  83db94:	e0bff417 	ldw	r2,-48(fp)
  83db98:	1004c03a 	cmpne	r2,r2,zero
  83db9c:	1000091e 	bne	r2,zero,83dbc4 <ip_write_internal+0x6b8>
         {
            /* can't allocate interrupt-safe buffer, so free the packet that 
             * we are working with */
            LOCK_NET_RESOURCE(FREEQ_RESID);
  83dba0:	01000084 	movi	r4,2
  83dba4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(p);
  83dba8:	e13ffc17 	ldw	r4,-16(fp)
  83dbac:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83dbb0:	01000084 	movi	r4,2
  83dbb4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NOBUFFER;
  83dbb8:	00fffac4 	movi	r3,-21
  83dbbc:	e0fffd15 	stw	r3,-12(fp)
  83dbc0:	00002c06 	br	83dc74 <ip_write_internal+0x768>
         }
         else
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
  83dbc4:	e0bff417 	ldw	r2,-48(fp)
  83dbc8:	10c00117 	ldw	r3,4(r2)
  83dbcc:	e0bffc17 	ldw	r2,-16(fp)
  83dbd0:	10800617 	ldw	r2,24(r2)
  83dbd4:	10800817 	ldw	r2,32(r2)
  83dbd8:	1887883a 	add	r3,r3,r2
  83dbdc:	e0bff417 	ldw	r2,-48(fp)
  83dbe0:	10c00315 	stw	r3,12(r2)
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
  83dbe4:	e0bff417 	ldw	r2,-48(fp)
  83dbe8:	10c00317 	ldw	r3,12(r2)
  83dbec:	e0bffc17 	ldw	r2,-16(fp)
  83dbf0:	11400317 	ldw	r5,12(r2)
  83dbf4:	e0bffc17 	ldw	r2,-16(fp)
  83dbf8:	10800417 	ldw	r2,16(r2)
  83dbfc:	1809883a 	mov	r4,r3
  83dc00:	100d883a 	mov	r6,r2
  83dc04:	08073380 	call	807338 <memcpy>
            /* setup various fields in the newly allocated PACKET structure */
            newpkt->nb_plen = p->nb_plen;
  83dc08:	e0bffc17 	ldw	r2,-16(fp)
  83dc0c:	10c00417 	ldw	r3,16(r2)
  83dc10:	e0bff417 	ldw	r2,-48(fp)
  83dc14:	10c00415 	stw	r3,16(r2)
            newpkt->net = p->net;
  83dc18:	e0bffc17 	ldw	r2,-16(fp)
  83dc1c:	10c00617 	ldw	r3,24(r2)
  83dc20:	e0bff417 	ldw	r2,-48(fp)
  83dc24:	10c00615 	stw	r3,24(r2)
            newpkt->fhost = p->fhost;
  83dc28:	e0bffc17 	ldw	r2,-16(fp)
  83dc2c:	10c00717 	ldw	r3,28(r2)
  83dc30:	e0bff417 	ldw	r2,-48(fp)
  83dc34:	10c00715 	stw	r3,28(r2)
            /* free the original packet since it is no longer needed */
            LOCK_NET_RESOURCE(FREEQ_RESID);
  83dc38:	01000084 	movi	r4,2
  83dc3c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(p);
  83dc40:	e13ffc17 	ldw	r4,-16(fp)
  83dc44:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83dc48:	01000084 	movi	r4,2
  83dc4c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            /* send packet to MAC layer. This will try to resolve MAC layer addressing 
             * and send packet. ip2mac() can return SUCCESS, PENDING, or error codes. 
             */
            return(ip2mac(newpkt, firsthop));
  83dc50:	e17ffb17 	ldw	r5,-20(fp)
  83dc54:	e13ff417 	ldw	r4,-48(fp)
  83dc58:	08233d00 	call	8233d0 <ip2mac>
  83dc5c:	e0bffd15 	stw	r2,-12(fp)
  83dc60:	00000406 	br	83dc74 <ip_write_internal+0x768>
      else
      {
         /* since the packet is in an interrupt-safe buffer, it can be passed to 
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
  83dc64:	e17ffb17 	ldw	r5,-20(fp)
  83dc68:	e13ffc17 	ldw	r4,-16(fp)
  83dc6c:	08233d00 	call	8233d0 <ip2mac>
  83dc70:	e0bffd15 	stw	r2,-12(fp)
  83dc74:	e0bffd17 	ldw	r2,-12(fp)
      }
   }
}
  83dc78:	e037883a 	mov	sp,fp
  83dc7c:	dfc00117 	ldw	ra,4(sp)
  83dc80:	df000017 	ldw	fp,0(sp)
  83dc84:	dec00204 	addi	sp,sp,8
  83dc88:	f800283a 	ret

0083dc8c <ip_write>:

int
ip_write(
   u_char   prot,
   PACKET   p)
{
  83dc8c:	defff904 	addi	sp,sp,-28
  83dc90:	dfc00615 	stw	ra,24(sp)
  83dc94:	df000515 	stw	fp,20(sp)
  83dc98:	df000504 	addi	fp,sp,20
  83dc9c:	e17fff15 	stw	r5,-4(fp)
  83dca0:	e13ffe05 	stb	r4,-8(fp)
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
  83dca4:	00803934 	movhi	r2,228
  83dca8:	10a9e204 	addi	r2,r2,-22648
  83dcac:	10800917 	ldw	r2,36(r2)
  83dcb0:	10c00044 	addi	r3,r2,1
  83dcb4:	00803934 	movhi	r2,228
  83dcb8:	10a9e204 	addi	r2,r2,-22648
  83dcbc:	10c00915 	stw	r3,36(r2)

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
  83dcc0:	e0bfff17 	ldw	r2,-4(fp)
  83dcc4:	10800317 	ldw	r2,12(r2)
  83dcc8:	10fffb04 	addi	r3,r2,-20
  83dccc:	e0bfff17 	ldw	r2,-4(fp)
  83dcd0:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
  83dcd4:	e0bfff17 	ldw	r2,-4(fp)
  83dcd8:	10800417 	ldw	r2,16(r2)
  83dcdc:	10c00504 	addi	r3,r2,20
  83dce0:	e0bfff17 	ldw	r2,-4(fp)
  83dce4:	10c00415 	stw	r3,16(r2)
   pip = (struct ip*)(p->nb_prot);
  83dce8:	e0bfff17 	ldw	r2,-4(fp)
  83dcec:	10800317 	ldw	r2,12(r2)
  83dcf0:	e0bffd15 	stw	r2,-12(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
  83dcf4:	e0fffd17 	ldw	r3,-12(fp)
  83dcf8:	00801144 	movi	r2,69
  83dcfc:	18800005 	stb	r2,0(r3)
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
  83dd00:	e0bffd17 	ldw	r2,-12(fp)
  83dd04:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
  83dd08:	d0a05517 	ldw	r2,-32428(gp)
  83dd0c:	10bfffcc 	andi	r2,r2,65535
  83dd10:	1004d23a 	srli	r2,r2,8
  83dd14:	10803fcc 	andi	r2,r2,255
  83dd18:	1009883a 	mov	r4,r2
  83dd1c:	d0a05517 	ldw	r2,-32428(gp)
  83dd20:	10bfffcc 	andi	r2,r2,65535
  83dd24:	1004923a 	slli	r2,r2,8
  83dd28:	1007883a 	mov	r3,r2
  83dd2c:	00bfc004 	movi	r2,-256
  83dd30:	1884703a 	and	r2,r3,r2
  83dd34:	2084b03a 	or	r2,r4,r2
  83dd38:	1007883a 	mov	r3,r2
  83dd3c:	e0bffd17 	ldw	r2,-12(fp)
  83dd40:	10c0010d 	sth	r3,4(r2)
   uid++;
  83dd44:	d0a05517 	ldw	r2,-32428(gp)
  83dd48:	10800044 	addi	r2,r2,1
  83dd4c:	d0a05515 	stw	r2,-32428(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
  83dd50:	e0bfff17 	ldw	r2,-4(fp)
  83dd54:	10800417 	ldw	r2,16(r2)
  83dd58:	10bfffcc 	andi	r2,r2,65535
  83dd5c:	1004d23a 	srli	r2,r2,8
  83dd60:	10803fcc 	andi	r2,r2,255
  83dd64:	1009883a 	mov	r4,r2
  83dd68:	e0bfff17 	ldw	r2,-4(fp)
  83dd6c:	10800417 	ldw	r2,16(r2)
  83dd70:	10bfffcc 	andi	r2,r2,65535
  83dd74:	1004923a 	slli	r2,r2,8
  83dd78:	1007883a 	mov	r3,r2
  83dd7c:	00bfc004 	movi	r2,-256
  83dd80:	1884703a 	and	r2,r3,r2
  83dd84:	2084b03a 	or	r2,r4,r2
  83dd88:	1007883a 	mov	r3,r2
  83dd8c:	e0bffd17 	ldw	r2,-12(fp)
  83dd90:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
  83dd94:	e0fffd17 	ldw	r3,-12(fp)
  83dd98:	e0bffe03 	ldbu	r2,-8(fp)
  83dd9c:	18800245 	stb	r2,9(r3)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
  83dda0:	e0bffd17 	ldw	r2,-12(fp)
  83dda4:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
  83dda8:	00801004 	movi	r2,64
  83ddac:	e0bffc05 	stb	r2,-16(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
  83ddb0:	e0bfff17 	ldw	r2,-4(fp)
  83ddb4:	10800717 	ldw	r2,28(r2)
  83ddb8:	1004d63a 	srli	r2,r2,24
  83ddbc:	10c03fcc 	andi	r3,r2,255
  83ddc0:	e0bfff17 	ldw	r2,-4(fp)
  83ddc4:	10800717 	ldw	r2,28(r2)
  83ddc8:	1004d23a 	srli	r2,r2,8
  83ddcc:	10bfc00c 	andi	r2,r2,65280
  83ddd0:	1886b03a 	or	r3,r3,r2
  83ddd4:	e0bfff17 	ldw	r2,-4(fp)
  83ddd8:	10800717 	ldw	r2,28(r2)
  83dddc:	10bfc00c 	andi	r2,r2,65280
  83dde0:	1004923a 	slli	r2,r2,8
  83dde4:	1886b03a 	or	r3,r3,r2
  83dde8:	e0bfff17 	ldw	r2,-4(fp)
  83ddec:	10800717 	ldw	r2,28(r2)
  83ddf0:	10803fcc 	andi	r2,r2,255
  83ddf4:	1004963a 	slli	r2,r2,24
  83ddf8:	1884b03a 	or	r2,r3,r2
  83ddfc:	10fc002c 	andhi	r3,r2,61440
  83de00:	00b80034 	movhi	r2,57344
  83de04:	1880081e 	bne	r3,r2,83de28 <ip_write+0x19c>
  83de08:	e0bfff17 	ldw	r2,-4(fp)
  83de0c:	10800b17 	ldw	r2,44(r2)
  83de10:	1005003a 	cmpeq	r2,r2,zero
  83de14:	1000041e 	bne	r2,zero,83de28 <ip_write+0x19c>
      ttl = p->imo->imo_multicast_ttl;
  83de18:	e0bfff17 	ldw	r2,-4(fp)
  83de1c:	10800b17 	ldw	r2,44(r2)
  83de20:	10800103 	ldbu	r2,4(r2)
  83de24:	e0bffc05 	stb	r2,-16(fp)
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
  83de28:	e0bfff17 	ldw	r2,-4(fp)
  83de2c:	10800c17 	ldw	r2,48(r2)
  83de30:	e0bffb15 	stw	r2,-20(fp)
  83de34:	e0bffb17 	ldw	r2,-20(fp)
  83de38:	1005003a 	cmpeq	r2,r2,zero
  83de3c:	1000121e 	bne	r2,zero,83de88 <ip_write+0x1fc>
   {
	  /* yup */
	  if (sopts->ip_ttl)
  83de40:	e0bffb17 	ldw	r2,-20(fp)
  83de44:	10800043 	ldbu	r2,1(r2)
  83de48:	10803fcc 	andi	r2,r2,255
  83de4c:	1005003a 	cmpeq	r2,r2,zero
  83de50:	1000051e 	bne	r2,zero,83de68 <ip_write+0x1dc>
         pip->ip_time = sopts->ip_ttl;
  83de54:	e0bffb17 	ldw	r2,-20(fp)
  83de58:	10c00043 	ldbu	r3,1(r2)
  83de5c:	e0bffd17 	ldw	r2,-12(fp)
  83de60:	10c00205 	stb	r3,8(r2)
  83de64:	00000306 	br	83de74 <ip_write+0x1e8>
	  else
         pip->ip_time = ttl;
  83de68:	e0fffd17 	ldw	r3,-12(fp)
  83de6c:	e0bffc03 	ldbu	r2,-16(fp)
  83de70:	18800205 	stb	r2,8(r3)
      pip->ip_tos = sopts->ip_tos;
  83de74:	e0bffb17 	ldw	r2,-20(fp)
  83de78:	10c00003 	ldbu	r3,0(r2)
  83de7c:	e0bffd17 	ldw	r2,-12(fp)
  83de80:	10c00045 	stb	r3,1(r2)
  83de84:	00000506 	br	83de9c <ip_write+0x210>
   }
   else
   {
	  /* nope */
      pip->ip_time = ttl;
  83de88:	e0bffd17 	ldw	r2,-12(fp)
  83de8c:	e0fffc03 	ldbu	r3,-16(fp)
  83de90:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
  83de94:	e0bffd17 	ldw	r2,-12(fp)
  83de98:	10000045 	stb	zero,1(r2)
   }
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);
  83de9c:	e13ffd17 	ldw	r4,-12(fp)
  83dea0:	01400284 	movi	r5,10
  83dea4:	08256340 	call	825634 <cksum>
  83dea8:	0084303a 	nor	r2,zero,r2
  83deac:	1007883a 	mov	r3,r2
  83deb0:	e0bffd17 	ldw	r2,-12(fp)
  83deb4:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
  83deb8:	e13fff17 	ldw	r4,-4(fp)
  83debc:	083d50c0 	call	83d50c <ip_write_internal>
}
  83dec0:	e037883a 	mov	sp,fp
  83dec4:	dfc00117 	ldw	ra,4(sp)
  83dec8:	df000017 	ldw	fp,0(sp)
  83decc:	dec00204 	addi	sp,sp,8
  83ded0:	f800283a 	ret

0083ded4 <ip_write2>:
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
  83ded4:	defff504 	addi	sp,sp,-44
  83ded8:	dfc00a15 	stw	ra,40(sp)
  83dedc:	df000915 	stw	fp,36(sp)
  83dee0:	df000904 	addi	fp,sp,36
  83dee4:	e17ffe15 	stw	r5,-8(fp)
  83dee8:	e1bfff15 	stw	r6,-4(fp)
  83deec:	e13ffd05 	stb	r4,-12(fp)
   struct ip * pip;
   u_char ttl;
   struct ip_socopts * sopts;
   u_char iphlen = sizeof (struct ip);
  83def0:	00800504 	movi	r2,20
  83def4:	e0bff905 	stb	r2,-28(fp)
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
  83def8:	00803934 	movhi	r2,228
  83defc:	10a9e204 	addi	r2,r2,-22648
  83df00:	10800917 	ldw	r2,36(r2)
  83df04:	10c00044 	addi	r3,r2,1
  83df08:	00803934 	movhi	r2,228
  83df0c:	10a9e204 	addi	r2,r2,-22648
  83df10:	10c00915 	stw	r3,36(r2)

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
  83df14:	e0bfff17 	ldw	r2,-4(fp)
  83df18:	e0bff815 	stw	r2,-32(fp)
  83df1c:	00000c06 	br	83df50 <ip_write2+0x7c>
   {
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
  83df20:	e0bff817 	ldw	r2,-32(fp)
  83df24:	10800003 	ldbu	r2,0(r2)
  83df28:	10803fcc 	andi	r2,r2,255
  83df2c:	10800520 	cmpeqi	r2,r2,20
  83df30:	1000011e 	bne	r2,zero,83df38 <ip_write2+0x64>
  83df34:	00000306 	br	83df44 <ip_write2+0x70>
      {
         case IP_RTR_ALERT_OPT:
            iphlen += IP_RTR_ALERT_OPT_SIZE;
  83df38:	e0bff903 	ldbu	r2,-28(fp)
  83df3c:	10800104 	addi	r2,r2,4
  83df40:	e0bff905 	stb	r2,-28(fp)
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
  83df44:	e0bff817 	ldw	r2,-32(fp)
  83df48:	10800044 	addi	r2,r2,1
  83df4c:	e0bff815 	stw	r2,-32(fp)
  83df50:	e0bff817 	ldw	r2,-32(fp)
  83df54:	10800003 	ldbu	r2,0(r2)
  83df58:	10803fcc 	andi	r2,r2,255
  83df5c:	1004c03a 	cmpne	r2,r2,zero
  83df60:	103fef1e 	bne	r2,zero,83df20 <ip_write2+0x4c>
   }

   /* compute the amount of padding required, if any (to ensure
    * that the IP header (including options) ends on a dword
    * (four byte) boundary */
   if (iphlen & 0x3)
  83df64:	e0bff903 	ldbu	r2,-28(fp)
  83df68:	108000cc 	andi	r2,r2,3
  83df6c:	1005003a 	cmpeq	r2,r2,zero
  83df70:	1000071e 	bne	r2,zero,83df90 <ip_write2+0xbc>
      iphlen_pad = 4 - (iphlen & 0x3);
  83df74:	e0bff903 	ldbu	r2,-28(fp)
  83df78:	108000cc 	andi	r2,r2,3
  83df7c:	1007883a 	mov	r3,r2
  83df80:	00800104 	movi	r2,4
  83df84:	10c5c83a 	sub	r2,r2,r3
  83df88:	e0bff745 	stb	r2,-35(fp)
  83df8c:	00000106 	br	83df94 <ip_write2+0xc0>
   else iphlen_pad = 0; /* no header padding required */
  83df90:	e03ff745 	stb	zero,-35(fp)
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
  83df94:	e0bffe17 	ldw	r2,-8(fp)
  83df98:	11000317 	ldw	r4,12(r2)
  83df9c:	e0fff903 	ldbu	r3,-28(fp)
  83dfa0:	e0bff743 	ldbu	r2,-35(fp)
  83dfa4:	1885883a 	add	r2,r3,r2
  83dfa8:	2087c83a 	sub	r3,r4,r2
  83dfac:	e0bffe17 	ldw	r2,-8(fp)
  83dfb0:	10c00315 	stw	r3,12(r2)
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
  83dfb4:	e0bffe17 	ldw	r2,-8(fp)
  83dfb8:	11000417 	ldw	r4,16(r2)
  83dfbc:	e0fff903 	ldbu	r3,-28(fp)
  83dfc0:	e0bff743 	ldbu	r2,-35(fp)
  83dfc4:	1885883a 	add	r2,r3,r2
  83dfc8:	2087883a 	add	r3,r4,r2
  83dfcc:	e0bffe17 	ldw	r2,-8(fp)
  83dfd0:	10c00415 	stw	r3,16(r2)
   pip = (struct ip *) (p->nb_prot);
  83dfd4:	e0bffe17 	ldw	r2,-8(fp)
  83dfd8:	10800317 	ldw	r2,12(r2)
  83dfdc:	e0bffc15 	stw	r2,-16(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
  83dfe0:	e0fff903 	ldbu	r3,-28(fp)
  83dfe4:	e0bff743 	ldbu	r2,-35(fp)
  83dfe8:	1885883a 	add	r2,r3,r2
  83dfec:	1005d0ba 	srai	r2,r2,2
  83dff0:	10801014 	ori	r2,r2,64
  83dff4:	1007883a 	mov	r3,r2
  83dff8:	e0bffc17 	ldw	r2,-16(fp)
  83dffc:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
  83e000:	e0bffc17 	ldw	r2,-16(fp)
  83e004:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
  83e008:	d0a05517 	ldw	r2,-32428(gp)
  83e00c:	10bfffcc 	andi	r2,r2,65535
  83e010:	1004d23a 	srli	r2,r2,8
  83e014:	10803fcc 	andi	r2,r2,255
  83e018:	1009883a 	mov	r4,r2
  83e01c:	d0a05517 	ldw	r2,-32428(gp)
  83e020:	10bfffcc 	andi	r2,r2,65535
  83e024:	1004923a 	slli	r2,r2,8
  83e028:	1007883a 	mov	r3,r2
  83e02c:	00bfc004 	movi	r2,-256
  83e030:	1884703a 	and	r2,r3,r2
  83e034:	2084b03a 	or	r2,r4,r2
  83e038:	1007883a 	mov	r3,r2
  83e03c:	e0bffc17 	ldw	r2,-16(fp)
  83e040:	10c0010d 	sth	r3,4(r2)
   uid++;
  83e044:	d0a05517 	ldw	r2,-32428(gp)
  83e048:	10800044 	addi	r2,r2,1
  83e04c:	d0a05515 	stw	r2,-32428(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
  83e050:	e0bffe17 	ldw	r2,-8(fp)
  83e054:	10800417 	ldw	r2,16(r2)
  83e058:	10bfffcc 	andi	r2,r2,65535
  83e05c:	1004d23a 	srli	r2,r2,8
  83e060:	10803fcc 	andi	r2,r2,255
  83e064:	1009883a 	mov	r4,r2
  83e068:	e0bffe17 	ldw	r2,-8(fp)
  83e06c:	10800417 	ldw	r2,16(r2)
  83e070:	10bfffcc 	andi	r2,r2,65535
  83e074:	1004923a 	slli	r2,r2,8
  83e078:	1007883a 	mov	r3,r2
  83e07c:	00bfc004 	movi	r2,-256
  83e080:	1884703a 	and	r2,r3,r2
  83e084:	2084b03a 	or	r2,r4,r2
  83e088:	1007883a 	mov	r3,r2
  83e08c:	e0bffc17 	ldw	r2,-16(fp)
  83e090:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
  83e094:	e0fffc17 	ldw	r3,-16(fp)
  83e098:	e0bffd03 	ldbu	r2,-12(fp)
  83e09c:	18800245 	stb	r2,9(r3)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
  83e0a0:	e0bffc17 	ldw	r2,-16(fp)
  83e0a4:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
  83e0a8:	00801004 	movi	r2,64
  83e0ac:	e0bffb05 	stb	r2,-20(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
  83e0b0:	e0bffe17 	ldw	r2,-8(fp)
  83e0b4:	10800717 	ldw	r2,28(r2)
  83e0b8:	1004d63a 	srli	r2,r2,24
  83e0bc:	10c03fcc 	andi	r3,r2,255
  83e0c0:	e0bffe17 	ldw	r2,-8(fp)
  83e0c4:	10800717 	ldw	r2,28(r2)
  83e0c8:	1004d23a 	srli	r2,r2,8
  83e0cc:	10bfc00c 	andi	r2,r2,65280
  83e0d0:	1886b03a 	or	r3,r3,r2
  83e0d4:	e0bffe17 	ldw	r2,-8(fp)
  83e0d8:	10800717 	ldw	r2,28(r2)
  83e0dc:	10bfc00c 	andi	r2,r2,65280
  83e0e0:	1004923a 	slli	r2,r2,8
  83e0e4:	1886b03a 	or	r3,r3,r2
  83e0e8:	e0bffe17 	ldw	r2,-8(fp)
  83e0ec:	10800717 	ldw	r2,28(r2)
  83e0f0:	10803fcc 	andi	r2,r2,255
  83e0f4:	1004963a 	slli	r2,r2,24
  83e0f8:	1884b03a 	or	r2,r3,r2
  83e0fc:	10fc002c 	andhi	r3,r2,61440
  83e100:	00b80034 	movhi	r2,57344
  83e104:	1880081e 	bne	r3,r2,83e128 <ip_write2+0x254>
  83e108:	e0bffe17 	ldw	r2,-8(fp)
  83e10c:	10800b17 	ldw	r2,44(r2)
  83e110:	1005003a 	cmpeq	r2,r2,zero
  83e114:	1000041e 	bne	r2,zero,83e128 <ip_write2+0x254>
      ttl = p->imo->imo_multicast_ttl;
  83e118:	e0bffe17 	ldw	r2,-8(fp)
  83e11c:	10800b17 	ldw	r2,44(r2)
  83e120:	10800103 	ldbu	r2,4(r2)
  83e124:	e0bffb05 	stb	r2,-20(fp)
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
  83e128:	e0bffe17 	ldw	r2,-8(fp)
  83e12c:	10800c17 	ldw	r2,48(r2)
  83e130:	e0bffa15 	stw	r2,-24(fp)
  83e134:	e0bffa17 	ldw	r2,-24(fp)
  83e138:	1005003a 	cmpeq	r2,r2,zero
  83e13c:	1000121e 	bne	r2,zero,83e188 <ip_write2+0x2b4>
   {
      if (sopts->ip_ttl)
  83e140:	e0bffa17 	ldw	r2,-24(fp)
  83e144:	10800043 	ldbu	r2,1(r2)
  83e148:	10803fcc 	andi	r2,r2,255
  83e14c:	1005003a 	cmpeq	r2,r2,zero
  83e150:	1000051e 	bne	r2,zero,83e168 <ip_write2+0x294>
         pip->ip_time = sopts->ip_ttl;
  83e154:	e0bffa17 	ldw	r2,-24(fp)
  83e158:	10c00043 	ldbu	r3,1(r2)
  83e15c:	e0bffc17 	ldw	r2,-16(fp)
  83e160:	10c00205 	stb	r3,8(r2)
  83e164:	00000306 	br	83e174 <ip_write2+0x2a0>
      else
         pip->ip_time = ttl;
  83e168:	e0fffc17 	ldw	r3,-16(fp)
  83e16c:	e0bffb03 	ldbu	r2,-20(fp)
  83e170:	18800205 	stb	r2,8(r3)
      pip->ip_tos = sopts->ip_tos;
  83e174:	e0bffa17 	ldw	r2,-24(fp)
  83e178:	10c00003 	ldbu	r3,0(r2)
  83e17c:	e0bffc17 	ldw	r2,-16(fp)
  83e180:	10c00045 	stb	r3,1(r2)
  83e184:	00000506 	br	83e19c <ip_write2+0x2c8>
   }
   else
   {
      pip->ip_time = ttl;
  83e188:	e0bffc17 	ldw	r2,-16(fp)
  83e18c:	e0fffb03 	ldbu	r3,-20(fp)
  83e190:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
  83e194:	e0bffc17 	ldw	r2,-16(fp)
  83e198:	10000045 	stb	zero,1(r2)
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
  83e19c:	e0bffe17 	ldw	r2,-8(fp)
  83e1a0:	10800317 	ldw	r2,12(r2)
  83e1a4:	10800504 	addi	r2,r2,20
  83e1a8:	e0bff815 	stw	r2,-32(fp)
  83e1ac:	00000f06 	br	83e1ec <ip_write2+0x318>
   {
      /* caller has already provided adequate space for the requested options */
      switch (*optp)
  83e1b0:	e0bfff17 	ldw	r2,-4(fp)
  83e1b4:	10800003 	ldbu	r2,0(r2)
  83e1b8:	10803fcc 	andi	r2,r2,255
  83e1bc:	10800520 	cmpeqi	r2,r2,20
  83e1c0:	1000011e 	bne	r2,zero,83e1c8 <ip_write2+0x2f4>
  83e1c4:	00000606 	br	83e1e0 <ip_write2+0x30c>
      {
         case IP_RTR_ALERT_OPT:
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
  83e1c8:	e0fff817 	ldw	r3,-32(fp)
  83e1cc:	00812504 	movi	r2,1172
  83e1d0:	18800015 	stw	r2,0(r3)
            /* this option is 4 bytes long */
            tmpp += IP_RTR_ALERT_OPT_SIZE;
  83e1d4:	e0bff817 	ldw	r2,-32(fp)
  83e1d8:	10800104 	addi	r2,r2,4
  83e1dc:	e0bff815 	stw	r2,-32(fp)
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
  83e1e0:	e0bfff17 	ldw	r2,-4(fp)
  83e1e4:	10800044 	addi	r2,r2,1
  83e1e8:	e0bfff15 	stw	r2,-4(fp)
  83e1ec:	e0bfff17 	ldw	r2,-4(fp)
  83e1f0:	10800003 	ldbu	r2,0(r2)
  83e1f4:	10803fcc 	andi	r2,r2,255
  83e1f8:	1004c03a 	cmpne	r2,r2,zero
  83e1fc:	103fec1e 	bne	r2,zero,83e1b0 <ip_write2+0x2dc>
            break;
      }
   }

   /* add one (or more) one-byte long End of Option options (if required) */
   for (i = 0; i < iphlen_pad; ++i) *(tmpp + i) = 0;
  83e200:	e03ff705 	stb	zero,-36(fp)
  83e204:	00000806 	br	83e228 <ip_write2+0x354>
  83e208:	e0bff703 	ldbu	r2,-36(fp)
  83e20c:	1007883a 	mov	r3,r2
  83e210:	e0bff817 	ldw	r2,-32(fp)
  83e214:	1885883a 	add	r2,r3,r2
  83e218:	10000005 	stb	zero,0(r2)
  83e21c:	e0bff703 	ldbu	r2,-36(fp)
  83e220:	10800044 	addi	r2,r2,1
  83e224:	e0bff705 	stb	r2,-36(fp)
  83e228:	e0fff703 	ldbu	r3,-36(fp)
  83e22c:	e0bff743 	ldbu	r2,-35(fp)
  83e230:	18bff536 	bltu	r3,r2,83e208 <ip_write2+0x334>
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));
  83e234:	e0fff903 	ldbu	r3,-28(fp)
  83e238:	e0bff743 	ldbu	r2,-35(fp)
  83e23c:	1887883a 	add	r3,r3,r2
  83e240:	1804d7fa 	srli	r2,r3,31
  83e244:	10c5883a 	add	r2,r2,r3
  83e248:	1005d07a 	srai	r2,r2,1
  83e24c:	100b883a 	mov	r5,r2
  83e250:	e13ffc17 	ldw	r4,-16(fp)
  83e254:	08256340 	call	825634 <cksum>
  83e258:	0084303a 	nor	r2,zero,r2
  83e25c:	1007883a 	mov	r3,r2
  83e260:	e0bffc17 	ldw	r2,-16(fp)
  83e264:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal (p));
  83e268:	e13ffe17 	ldw	r4,-8(fp)
  83e26c:	083d50c0 	call	83d50c <ip_write_internal>
}
  83e270:	e037883a 	mov	sp,fp
  83e274:	dfc00117 	ldw	ra,4(sp)
  83e278:	df000017 	ldw	fp,0(sp)
  83e27c:	dec00204 	addi	sp,sp,8
  83e280:	f800283a 	ret

0083e284 <ip_raw_write>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
  83e284:	defffc04 	addi	sp,sp,-16
  83e288:	dfc00315 	stw	ra,12(sp)
  83e28c:	df000215 	stw	fp,8(sp)
  83e290:	df000204 	addi	fp,sp,8
  83e294:	e13fff15 	stw	r4,-4(fp)
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
  83e298:	00803934 	movhi	r2,228
  83e29c:	10a9e204 	addi	r2,r2,-22648
  83e2a0:	10800917 	ldw	r2,36(r2)
  83e2a4:	10c00044 	addi	r3,r2,1
  83e2a8:	00803934 	movhi	r2,228
  83e2ac:	10a9e204 	addi	r2,r2,-22648
  83e2b0:	10c00915 	stw	r3,36(r2)

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
  83e2b4:	e0bfff17 	ldw	r2,-4(fp)
  83e2b8:	10800317 	ldw	r2,12(r2)
  83e2bc:	e0bffe15 	stw	r2,-8(fp)
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
  83e2c0:	e0bffe17 	ldw	r2,-8(fp)
  83e2c4:	1080010b 	ldhu	r2,4(r2)
  83e2c8:	10bfffcc 	andi	r2,r2,65535
  83e2cc:	1004c03a 	cmpne	r2,r2,zero
  83e2d0:	1000121e 	bne	r2,zero,83e31c <ip_raw_write+0x98>
   {
      pip->ip_id = htons((unshort)uid);
  83e2d4:	d0a05517 	ldw	r2,-32428(gp)
  83e2d8:	10bfffcc 	andi	r2,r2,65535
  83e2dc:	1004d23a 	srli	r2,r2,8
  83e2e0:	10803fcc 	andi	r2,r2,255
  83e2e4:	1009883a 	mov	r4,r2
  83e2e8:	d0a05517 	ldw	r2,-32428(gp)
  83e2ec:	10bfffcc 	andi	r2,r2,65535
  83e2f0:	1004923a 	slli	r2,r2,8
  83e2f4:	1007883a 	mov	r3,r2
  83e2f8:	00bfc004 	movi	r2,-256
  83e2fc:	1884703a 	and	r2,r3,r2
  83e300:	2084b03a 	or	r2,r4,r2
  83e304:	1007883a 	mov	r3,r2
  83e308:	e0bffe17 	ldw	r2,-8(fp)
  83e30c:	10c0010d 	sth	r3,4(r2)
      uid++;
  83e310:	d0a05517 	ldw	r2,-32428(gp)
  83e314:	10800044 	addi	r2,r2,1
  83e318:	d0a05515 	stw	r2,-32428(gp)
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
  83e31c:	e0bffe17 	ldw	r2,-8(fp)
  83e320:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
  83e324:	e13ffe17 	ldw	r4,-8(fp)
  83e328:	01400284 	movi	r5,10
  83e32c:	08256340 	call	825634 <cksum>
  83e330:	0084303a 	nor	r2,zero,r2
  83e334:	1007883a 	mov	r3,r2
  83e338:	e0bffe17 	ldw	r2,-8(fp)
  83e33c:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
  83e340:	e13fff17 	ldw	r4,-4(fp)
  83e344:	083d50c0 	call	83d50c <ip_write_internal>
}
  83e348:	e037883a 	mov	sp,fp
  83e34c:	dfc00117 	ldw	ra,4(sp)
  83e350:	df000017 	ldw	fp,0(sp)
  83e354:	dec00204 	addi	sp,sp,8
  83e358:	f800283a 	ret

0083e35c <ip_fragment_lc>:
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
  83e35c:	deffed04 	addi	sp,sp,-76
  83e360:	dfc01215 	stw	ra,72(sp)
  83e364:	df001115 	stw	fp,68(sp)
  83e368:	df001104 	addi	fp,sp,68
  83e36c:	e13ffa15 	stw	r4,-24(fp)
  83e370:	e17ffb15 	stw	r5,-20(fp)
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
  83e374:	00803934 	movhi	r2,228
  83e378:	10a9e204 	addi	r2,r2,-22648
  83e37c:	10801017 	ldw	r2,64(r2)
  83e380:	10c00044 	addi	r3,r2,1
  83e384:	00803934 	movhi	r2,228
  83e388:	10a9e204 	addi	r2,r2,-22648
  83e38c:	10c01015 	stw	r3,64(r2)
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
  83e390:	e0bffa17 	ldw	r2,-24(fp)
  83e394:	10800317 	ldw	r2,12(r2)
  83e398:	e0bff115 	stw	r2,-60(fp)
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
  83e39c:	e0bff117 	ldw	r2,-60(fp)
  83e3a0:	10800003 	ldbu	r2,0(r2)
  83e3a4:	10803fcc 	andi	r2,r2,255
  83e3a8:	108003cc 	andi	r2,r2,15
  83e3ac:	1085883a 	add	r2,r2,r2
  83e3b0:	1085883a 	add	r2,r2,r2
  83e3b4:	e0bff015 	stw	r2,-64(fp)
   left = (int)p->nb_plen - iphlen; /* bytes left to send in datagram */
  83e3b8:	e0bffa17 	ldw	r2,-24(fp)
  83e3bc:	10800417 	ldw	r2,16(r2)
  83e3c0:	1007883a 	mov	r3,r2
  83e3c4:	e0bff017 	ldw	r2,-64(fp)
  83e3c8:	1885c83a 	sub	r2,r3,r2
  83e3cc:	e0bff415 	stw	r2,-48(fp)
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
  83e3d0:	e0bffa17 	ldw	r2,-24(fp)
  83e3d4:	10800617 	ldw	r2,24(r2)
  83e3d8:	11000917 	ldw	r4,36(r2)
  83e3dc:	e0bffa17 	ldw	r2,-24(fp)
  83e3e0:	10800617 	ldw	r2,24(r2)
  83e3e4:	10c00817 	ldw	r3,32(r2)
  83e3e8:	e0bff017 	ldw	r2,-64(fp)
  83e3ec:	1885883a 	add	r2,r3,r2
  83e3f0:	2085c83a 	sub	r2,r4,r2
  83e3f4:	10bffe04 	addi	r2,r2,-8
  83e3f8:	e0bff815 	stw	r2,-32(fp)
   if (maxipsize < 64)  /* to small to use */
  83e3fc:	e0bff817 	ldw	r2,-32(fp)
  83e400:	10801028 	cmpgeui	r2,r2,64
  83e404:	1000041e 	bne	r2,zero,83e418 <ip_fragment_lc+0xbc>
   {
      dtrap();    /* probably bad programming */
  83e408:	082a7c80 	call	82a7c8 <dtrap>
      return ENP_LOGIC;
  83e40c:	00bffd44 	movi	r2,-11
  83e410:	e0bffe15 	stw	r2,-8(fp)
  83e414:	0000ed06 	br	83e7cc <ip_fragment_lc+0x470>
   }
   numfrags = (p->nb_plen/maxipsize) + 1;    /* number of fragments */
  83e418:	e0bffa17 	ldw	r2,-24(fp)
  83e41c:	11000417 	ldw	r4,16(r2)
  83e420:	e17ff817 	ldw	r5,-32(fp)
  83e424:	08053b80 	call	8053b8 <__udivsi3>
  83e428:	10800044 	addi	r2,r2,1
  83e42c:	e0bff715 	stw	r2,-36(fp)
   fragsize = (((p->nb_plen + (numfrags - 1)) / numfrags) + 7) & ~7; 
  83e430:	e0bffa17 	ldw	r2,-24(fp)
  83e434:	10c00417 	ldw	r3,16(r2)
  83e438:	e0bff717 	ldw	r2,-36(fp)
  83e43c:	1885883a 	add	r2,r3,r2
  83e440:	113fffc4 	addi	r4,r2,-1
  83e444:	e17ff717 	ldw	r5,-36(fp)
  83e448:	08053b80 	call	8053b8 <__udivsi3>
  83e44c:	10c001c4 	addi	r3,r2,7
  83e450:	00bffe04 	movi	r2,-8
  83e454:	1884703a 	and	r2,r3,r2
  83e458:	e0bff915 	stw	r2,-28(fp)
   foffset = 0;
  83e45c:	e03ff615 	stw	zero,-40(fp)

   /* Now update from any previous info */
   tmp_fraginfo = ntohs(pip->ip_flgs_foff);     /* get current frag info*/
  83e460:	e0bff117 	ldw	r2,-60(fp)
  83e464:	1080018b 	ldhu	r2,6(r2)
  83e468:	10bfffcc 	andi	r2,r2,65535
  83e46c:	1004d23a 	srli	r2,r2,8
  83e470:	10803fcc 	andi	r2,r2,255
  83e474:	1009883a 	mov	r4,r2
  83e478:	e0bff117 	ldw	r2,-60(fp)
  83e47c:	1080018b 	ldhu	r2,6(r2)
  83e480:	10bfffcc 	andi	r2,r2,65535
  83e484:	1004923a 	slli	r2,r2,8
  83e488:	1007883a 	mov	r3,r2
  83e48c:	00bfc004 	movi	r2,-256
  83e490:	1884703a 	and	r2,r3,r2
  83e494:	2084b03a 	or	r2,r4,r2
  83e498:	e0bfef0d 	sth	r2,-68(fp)
   if ( tmp_fraginfo & (~IP_FLG_MASK) )
  83e49c:	e0ffef0b 	ldhu	r3,-68(fp)
  83e4a0:	00bffff4 	movhi	r2,65535
  83e4a4:	1087ffc4 	addi	r2,r2,8191
  83e4a8:	1884703a 	and	r2,r3,r2
  83e4ac:	1005003a 	cmpeq	r2,r2,zero
  83e4b0:	1000081e 	bne	r2,zero,83e4d4 <ip_fragment_lc+0x178>
   {
      /* When fragmenting an already fragmented packet, we need to
         add the initial offset */
      foffset = (tmp_fraginfo & (~IP_FLG_MASK))  ;
  83e4b4:	e0ffef0b 	ldhu	r3,-68(fp)
  83e4b8:	00bffff4 	movhi	r2,65535
  83e4bc:	1087ffc4 	addi	r2,r2,8191
  83e4c0:	1884703a 	and	r2,r3,r2
  83e4c4:	e0bff615 	stw	r2,-40(fp)
      foffset <<= 3;    /* Multiply by 8 to get "offset in num of bytes" */
  83e4c8:	e0bff617 	ldw	r2,-40(fp)
  83e4cc:	100490fa 	slli	r2,r2,3
  83e4d0:	e0bff615 	stw	r2,-40(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
  83e4d4:	e0bffa17 	ldw	r2,-24(fp)
  83e4d8:	e0bff315 	stw	r2,-52(fp)
   e = 0;
  83e4dc:	e03ff215 	stw	zero,-56(fp)
   while (left > 1)  /* more data left to send? */
  83e4e0:	0000b506 	br	83e7b8 <ip_fragment_lc+0x45c>
   {
      p = pkt2;  /* move next fragment up */
  83e4e4:	e0bff317 	ldw	r2,-52(fp)
  83e4e8:	e0bffa15 	stw	r2,-24(fp)
      pip = (struct ip *)(p->nb_prot);
  83e4ec:	e0bffa17 	ldw	r2,-24(fp)
  83e4f0:	10800317 	ldw	r2,12(r2)
  83e4f4:	e0bff115 	stw	r2,-60(fp)
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
  83e4f8:	e0bff917 	ldw	r2,-28(fp)
  83e4fc:	e0fff417 	ldw	r3,-48(fp)
  83e500:	e0ffff15 	stw	r3,-4(fp)
  83e504:	e0bffd15 	stw	r2,-12(fp)
  83e508:	e0bfff17 	ldw	r2,-4(fp)
  83e50c:	e0fffd17 	ldw	r3,-12(fp)
  83e510:	10c0020e 	bge	r2,r3,83e51c <ip_fragment_lc+0x1c0>
  83e514:	e0bfff17 	ldw	r2,-4(fp)
  83e518:	e0bffd15 	stw	r2,-12(fp)
  83e51c:	e0bff017 	ldw	r2,-64(fp)
  83e520:	e0fffd17 	ldw	r3,-12(fp)
  83e524:	1885883a 	add	r2,r3,r2
  83e528:	1007883a 	mov	r3,r2
  83e52c:	e0bffa17 	ldw	r2,-24(fp)
  83e530:	10c00415 	stw	r3,16(r2)
      left -= fragsize; /* decrement count of bytes left to send */
  83e534:	e0fff417 	ldw	r3,-48(fp)
  83e538:	e0bff917 	ldw	r2,-28(fp)
  83e53c:	1885c83a 	sub	r2,r3,r2
  83e540:	e0bff415 	stw	r2,-48(fp)

      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);
  83e544:	e0bffa17 	ldw	r2,-24(fp)
  83e548:	10800417 	ldw	r2,16(r2)
  83e54c:	10bfffcc 	andi	r2,r2,65535
  83e550:	1004d23a 	srli	r2,r2,8
  83e554:	10803fcc 	andi	r2,r2,255
  83e558:	1009883a 	mov	r4,r2
  83e55c:	e0bffa17 	ldw	r2,-24(fp)
  83e560:	10800417 	ldw	r2,16(r2)
  83e564:	10bfffcc 	andi	r2,r2,65535
  83e568:	1004923a 	slli	r2,r2,8
  83e56c:	1007883a 	mov	r3,r2
  83e570:	00bfc004 	movi	r2,-256
  83e574:	1884703a 	and	r2,r3,r2
  83e578:	2084b03a 	or	r2,r4,r2
  83e57c:	1007883a 	mov	r3,r2
  83e580:	e0bff117 	ldw	r2,-60(fp)
  83e584:	10c0008d 	sth	r3,2(r2)

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
  83e588:	e0bff617 	ldw	r2,-40(fp)
  83e58c:	1004d0fa 	srli	r2,r2,3
  83e590:	e0bff50d 	sth	r2,-44(fp)
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
  83e594:	e0bff417 	ldw	r2,-48(fp)
  83e598:	10800090 	cmplti	r2,r2,2
  83e59c:	1000031e 	bne	r2,zero,83e5ac <ip_fragment_lc+0x250>
  83e5a0:	00880004 	movi	r2,8192
  83e5a4:	e0bffc0d 	sth	r2,-16(fp)
  83e5a8:	00000106 	br	83e5b0 <ip_fragment_lc+0x254>
  83e5ac:	e03ffc0d 	sth	zero,-16(fp)
  83e5b0:	e0bff50b 	ldhu	r2,-44(fp)
  83e5b4:	e0fffc0b 	ldhu	r3,-16(fp)
  83e5b8:	1884b03a 	or	r2,r3,r2
  83e5bc:	e0bff50d 	sth	r2,-44(fp)

      if ( tmp_fraginfo & IP_FLG_MF )             
  83e5c0:	e0bfef0b 	ldhu	r2,-68(fp)
  83e5c4:	1088000c 	andi	r2,r2,8192
  83e5c8:	1005003a 	cmpeq	r2,r2,zero
  83e5cc:	1000031e 	bne	r2,zero,83e5dc <ip_fragment_lc+0x280>
      {
         /* As flag is set in main packet, it should be set in all
          * fragmented packets also 
          */
         fraginfo |= IP_FLG_MF;
  83e5d0:	e0bff50b 	ldhu	r2,-44(fp)
  83e5d4:	10880014 	ori	r2,r2,8192
  83e5d8:	e0bff50d 	sth	r2,-44(fp)
      }

      pip->ip_flgs_foff = htons(fraginfo);   /* do htons macro on separate line */
  83e5dc:	e0bff50b 	ldhu	r2,-44(fp)
  83e5e0:	1004d23a 	srli	r2,r2,8
  83e5e4:	10803fcc 	andi	r2,r2,255
  83e5e8:	1009883a 	mov	r4,r2
  83e5ec:	e0bff50b 	ldhu	r2,-44(fp)
  83e5f0:	1004923a 	slli	r2,r2,8
  83e5f4:	1007883a 	mov	r3,r2
  83e5f8:	00bfc004 	movi	r2,-256
  83e5fc:	1884703a 	and	r2,r3,r2
  83e600:	2084b03a 	or	r2,r4,r2
  83e604:	1007883a 	mov	r3,r2
  83e608:	e0bff117 	ldw	r2,-60(fp)
  83e60c:	10c0018d 	sth	r3,6(r2)
      /* set up & save next fragment (pkt2) since ip2mac() will delete p */
      if (left > 1)
  83e610:	e0bff417 	ldw	r2,-48(fp)
  83e614:	10800090 	cmplti	r2,r2,2
  83e618:	1000401e 	bne	r2,zero,83e71c <ip_fragment_lc+0x3c0>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83e61c:	01000084 	movi	r4,2
  83e620:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pkt2 = pk_alloc(left + iphlen + MaxLnh);
  83e624:	e0fff417 	ldw	r3,-48(fp)
  83e628:	e0bff017 	ldw	r2,-64(fp)
  83e62c:	1887883a 	add	r3,r3,r2
  83e630:	00802174 	movhi	r2,133
  83e634:	1082ff04 	addi	r2,r2,3068
  83e638:	10800017 	ldw	r2,0(r2)
  83e63c:	1885883a 	add	r2,r3,r2
  83e640:	1009883a 	mov	r4,r2
  83e644:	0829b840 	call	829b84 <pk_alloc>
  83e648:	e0bff315 	stw	r2,-52(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83e64c:	01000084 	movi	r4,2
  83e650:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         if (!pkt2)
  83e654:	e0bff317 	ldw	r2,-52(fp)
  83e658:	1004c03a 	cmpne	r2,r2,zero
  83e65c:	1000111e 	bne	r2,zero,83e6a4 <ip_fragment_lc+0x348>
         {
            dtrap();
  83e660:	082a7c80 	call	82a7c8 <dtrap>
            LOCK_NET_RESOURCE(FREEQ_RESID);
  83e664:	01000084 	movi	r4,2
  83e668:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(p);
  83e66c:	e13ffa17 	ldw	r4,-24(fp)
  83e670:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83e674:	01000084 	movi	r4,2
  83e678:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
  83e67c:	00803934 	movhi	r2,228
  83e680:	10a9e204 	addi	r2,r2,-22648
  83e684:	10801117 	ldw	r2,68(r2)
  83e688:	10c00044 	addi	r3,r2,1
  83e68c:	00803934 	movhi	r2,228
  83e690:	10a9e204 	addi	r2,r2,-22648
  83e694:	10c01115 	stw	r3,68(r2)
            return ENP_RESOURCE;
  83e698:	00bffa84 	movi	r2,-22
  83e69c:	e0bffe15 	stw	r2,-8(fp)
  83e6a0:	00004a06 	br	83e7cc <ip_fragment_lc+0x470>
         }

         pkt2->net = p->net;       /* copy critical parms to new packet */
  83e6a4:	e0bffa17 	ldw	r2,-24(fp)
  83e6a8:	10c00617 	ldw	r3,24(r2)
  83e6ac:	e0bff317 	ldw	r2,-52(fp)
  83e6b0:	10c00615 	stw	r3,24(r2)
         pkt2->fhost = p->fhost;
  83e6b4:	e0bffa17 	ldw	r2,-24(fp)
  83e6b8:	10c00717 	ldw	r3,28(r2)
  83e6bc:	e0bff317 	ldw	r2,-52(fp)
  83e6c0:	10c00715 	stw	r3,28(r2)
         /* Duplicate the IPHeader */
         MEMCPY(pkt2->nb_prot, p->nb_prot, iphlen);
  83e6c4:	e0bff317 	ldw	r2,-52(fp)
  83e6c8:	11000317 	ldw	r4,12(r2)
  83e6cc:	e0bffa17 	ldw	r2,-24(fp)
  83e6d0:	10800317 	ldw	r2,12(r2)
  83e6d4:	e0fff017 	ldw	r3,-64(fp)
  83e6d8:	100b883a 	mov	r5,r2
  83e6dc:	180d883a 	mov	r6,r3
  83e6e0:	08073380 	call	807338 <memcpy>
         /* copy data for NEXT fragment from p to pkt2 */
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
  83e6e4:	e0bff317 	ldw	r2,-52(fp)
  83e6e8:	10c00317 	ldw	r3,12(r2)
  83e6ec:	e0bff017 	ldw	r2,-64(fp)
  83e6f0:	1889883a 	add	r4,r3,r2
  83e6f4:	e0bffa17 	ldw	r2,-24(fp)
  83e6f8:	10c00317 	ldw	r3,12(r2)
  83e6fc:	e0bff017 	ldw	r2,-64(fp)
  83e700:	1887883a 	add	r3,r3,r2
  83e704:	e0bff917 	ldw	r2,-28(fp)
  83e708:	1885883a 	add	r2,r3,r2
  83e70c:	e0fff417 	ldw	r3,-48(fp)
  83e710:	100b883a 	mov	r5,r2
  83e714:	180d883a 	mov	r6,r3
  83e718:	08073380 	call	807338 <memcpy>
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
  83e71c:	e0bff117 	ldw	r2,-60(fp)
  83e720:	1000028d 	sth	zero,10(r2)
      pip->ip_chksum = ~cksum(pip, 10);
  83e724:	e13ff117 	ldw	r4,-60(fp)
  83e728:	01400284 	movi	r5,10
  83e72c:	08256340 	call	825634 <cksum>
  83e730:	0084303a 	nor	r2,zero,r2
  83e734:	1007883a 	mov	r3,r2
  83e738:	e0bff117 	ldw	r2,-60(fp)
  83e73c:	10c0028d 	sth	r3,10(r2)

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
  83e740:	e13ffa17 	ldw	r4,-24(fp)
  83e744:	e17ffb17 	ldw	r5,-20(fp)
  83e748:	08233d00 	call	8233d0 <ip2mac>
  83e74c:	e0bff215 	stw	r2,-56(fp)
      ip_mib.ipFragCreates++;
  83e750:	00803934 	movhi	r2,228
  83e754:	10a9e204 	addi	r2,r2,-22648
  83e758:	10801217 	ldw	r2,72(r2)
  83e75c:	10c00044 	addi	r3,r2,1
  83e760:	00803934 	movhi	r2,228
  83e764:	10a9e204 	addi	r2,r2,-22648
  83e768:	10c01215 	stw	r3,72(r2)
      if (e < 0)
  83e76c:	e0bff217 	ldw	r2,-56(fp)
  83e770:	1004403a 	cmpge	r2,r2,zero
  83e774:	10000c1e 	bne	r2,zero,83e7a8 <ip_fragment_lc+0x44c>
      {
         if (left > 1) 
  83e778:	e0bff417 	ldw	r2,-48(fp)
  83e77c:	10800090 	cmplti	r2,r2,2
  83e780:	1000061e 	bne	r2,zero,83e79c <ip_fragment_lc+0x440>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
  83e784:	01000084 	movi	r4,2
  83e788:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(pkt2);
  83e78c:	e13ff317 	ldw	r4,-52(fp)
  83e790:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83e794:	01000084 	movi	r4,2
  83e798:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         }
         return e;
  83e79c:	e0fff217 	ldw	r3,-56(fp)
  83e7a0:	e0fffe15 	stw	r3,-8(fp)
  83e7a4:	00000906 	br	83e7cc <ip_fragment_lc+0x470>
      }
      foffset += fragsize;    /* offset for next fragment */
  83e7a8:	e0bff617 	ldw	r2,-40(fp)
  83e7ac:	e0fff917 	ldw	r3,-28(fp)
  83e7b0:	10c5883a 	add	r2,r2,r3
  83e7b4:	e0bff615 	stw	r2,-40(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
   e = 0;
   while (left > 1)  /* more data left to send? */
  83e7b8:	e0bff417 	ldw	r2,-48(fp)
  83e7bc:	10800088 	cmpgei	r2,r2,2
  83e7c0:	103f481e 	bne	r2,zero,83e4e4 <ip_fragment_lc+0x188>
         }
         return e;
      }
      foffset += fragsize;    /* offset for next fragment */
   }
   return e;
  83e7c4:	e0bff217 	ldw	r2,-56(fp)
  83e7c8:	e0bffe15 	stw	r2,-8(fp)
  83e7cc:	e0bffe17 	ldw	r2,-8(fp)
}
  83e7d0:	e037883a 	mov	sp,fp
  83e7d4:	dfc00117 	ldw	ra,4(sp)
  83e7d8:	df000017 	ldw	fp,0(sp)
  83e7dc:	dec00204 	addi	sp,sp,8
  83e7e0:	f800283a 	ret

0083e7e4 <ip_fragment>:
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
  83e7e4:	deffed04 	addi	sp,sp,-76
  83e7e8:	dfc01215 	stw	ra,72(sp)
  83e7ec:	df001115 	stw	fp,68(sp)
  83e7f0:	df001104 	addi	fp,sp,68
  83e7f4:	e13ffa15 	stw	r4,-24(fp)
  83e7f8:	e17ffb15 	stw	r5,-20(fp)
   u_short parent_mf;
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
  83e7fc:	e0bffa17 	ldw	r2,-24(fp)
  83e800:	10800317 	ldw	r2,12(r2)
  83e804:	e0bff815 	stw	r2,-32(fp)
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
  83e808:	e0bff817 	ldw	r2,-32(fp)
  83e80c:	1080018b 	ldhu	r2,6(r2)
  83e810:	10bfffcc 	andi	r2,r2,65535
  83e814:	1004d23a 	srli	r2,r2,8
  83e818:	10bfffcc 	andi	r2,r2,65535
  83e81c:	10c03fcc 	andi	r3,r2,255
  83e820:	e0bff817 	ldw	r2,-32(fp)
  83e824:	1080018b 	ldhu	r2,6(r2)
  83e828:	10bfffcc 	andi	r2,r2,65535
  83e82c:	1004923a 	slli	r2,r2,8
  83e830:	10bfc00c 	andi	r2,r2,65280
  83e834:	1884b03a 	or	r2,r3,r2
  83e838:	1090000c 	andi	r2,r2,16384
  83e83c:	1005003a 	cmpeq	r2,r2,zero
  83e840:	10001a1e 	bne	r2,zero,83e8ac <ip_fragment+0xc8>
   {
      /* can't fragment a packet with the DF bit set */
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83e844:	01000084 	movi	r4,2
  83e848:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  83e84c:	e13ffa17 	ldw	r4,-24(fp)
  83e850:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83e854:	01000084 	movi	r4,2
  83e858:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      ip_mib.ipFragFails++;
  83e85c:	00803934 	movhi	r2,228
  83e860:	10a9e204 	addi	r2,r2,-22648
  83e864:	10801117 	ldw	r2,68(r2)
  83e868:	10c00044 	addi	r3,r2,1
  83e86c:	00803934 	movhi	r2,228
  83e870:	10a9e204 	addi	r2,r2,-22648
  83e874:	10c01115 	stw	r3,68(r2)
#ifdef FULL_ICMP
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
  83e878:	e0bff817 	ldw	r2,-32(fp)
  83e87c:	11000317 	ldw	r4,12(r2)
  83e880:	e0bffa17 	ldw	r2,-24(fp)
  83e884:	10800617 	ldw	r2,24(r2)
  83e888:	11400a17 	ldw	r5,40(r2)
  83e88c:	e0bffa17 	ldw	r2,-24(fp)
  83e890:	10800617 	ldw	r2,24(r2)
  83e894:	d8800015 	stw	r2,0(sp)
  83e898:	e1bff817 	ldw	r6,-32(fp)
  83e89c:	01c00104 	movi	r7,4
  83e8a0:	0849c7c0 	call	849c7c <icmp_destun>
#endif   /* FULL_ICMP */
      return 0;
  83e8a4:	e03ffe15 	stw	zero,-8(fp)
  83e8a8:	00015106 	br	83edf0 <ip_fragment+0x60c>
   }

   maxbuflen = pk_get_max_intrsafe_buf_len ();
  83e8ac:	0829fc40 	call	829fc4 <pk_get_max_intrsafe_buf_len>
  83e8b0:	e0bff915 	stw	r2,-28(fp)

   /* the maximum amount of data that will be sent to ip2mac ().  Please note that
    * our definition of MTU is different from the traditional definition of that
    * parameter (which excludes the data link layer header). */
   maxl3_len = (unsigned short int) (MIN(maxbuflen, ((unsigned) p->net->n_mtu)));
  83e8b4:	e0bffa17 	ldw	r2,-24(fp)
  83e8b8:	10800617 	ldw	r2,24(r2)
  83e8bc:	10800917 	ldw	r2,36(r2)
  83e8c0:	e0fff917 	ldw	r3,-28(fp)
  83e8c4:	e0ffff15 	stw	r3,-4(fp)
  83e8c8:	e0bffd15 	stw	r2,-12(fp)
  83e8cc:	e0bfff17 	ldw	r2,-4(fp)
  83e8d0:	e0fffd17 	ldw	r3,-12(fp)
  83e8d4:	10c0022e 	bgeu	r2,r3,83e8e0 <ip_fragment+0xfc>
  83e8d8:	e0bfff17 	ldw	r2,-4(fp)
  83e8dc:	e0bffd15 	stw	r2,-12(fp)
  83e8e0:	e0fffd17 	ldw	r3,-12(fp)
  83e8e4:	e0fff58d 	sth	r3,-42(fp)

   /* get the length of the IP header of the original, unfragmented datagram */
   iphlen = ip_hlen(pip);
  83e8e8:	e0bff817 	ldw	r2,-32(fp)
  83e8ec:	10800003 	ldbu	r2,0(r2)
  83e8f0:	108003cc 	andi	r2,r2,15
  83e8f4:	1085883a 	add	r2,r2,r2
  83e8f8:	1085883a 	add	r2,r2,r2
  83e8fc:	e0bff7c5 	stb	r2,-33(fp)

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
  83e900:	e0bffa17 	ldw	r2,-24(fp)
  83e904:	10800617 	ldw	r2,24(r2)
  83e908:	10800817 	ldw	r2,32(r2)
  83e90c:	e0bff785 	stb	r2,-34(fp)
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
  83e910:	e0fff7c3 	ldbu	r3,-33(fp)
  83e914:	e0bff58b 	ldhu	r2,-42(fp)
  83e918:	10c5c83a 	sub	r2,r2,r3
  83e91c:	1007883a 	mov	r3,r2
  83e920:	e0bff783 	ldbu	r2,-34(fp)
  83e924:	1885c83a 	sub	r2,r3,r2
  83e928:	e0bff70d 	sth	r2,-36(fp)

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
  83e92c:	e0fff70b 	ldhu	r3,-36(fp)
  83e930:	00bffe04 	movi	r2,-8
  83e934:	1884703a 	and	r2,r3,r2
  83e938:	e0bff70d 	sth	r2,-36(fp)

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
  83e93c:	e0bff817 	ldw	r2,-32(fp)
  83e940:	1080008b 	ldhu	r2,2(r2)
  83e944:	10bfffcc 	andi	r2,r2,65535
  83e948:	1004d23a 	srli	r2,r2,8
  83e94c:	10803fcc 	andi	r2,r2,255
  83e950:	1009883a 	mov	r4,r2
  83e954:	e0bff817 	ldw	r2,-32(fp)
  83e958:	1080008b 	ldhu	r2,2(r2)
  83e95c:	10bfffcc 	andi	r2,r2,65535
  83e960:	1004923a 	slli	r2,r2,8
  83e964:	1007883a 	mov	r3,r2
  83e968:	00bfc004 	movi	r2,-256
  83e96c:	1884703a 	and	r2,r3,r2
  83e970:	2084b03a 	or	r2,r4,r2
  83e974:	1007883a 	mov	r3,r2
  83e978:	e0bff7c3 	ldbu	r2,-33(fp)
  83e97c:	1885c83a 	sub	r2,r3,r2
  83e980:	e0bff68d 	sth	r2,-38(fp)
   num_frags = (total_payload_len / useable_payload_len);
  83e984:	e13ff68b 	ldhu	r4,-38(fp)
  83e988:	e17ff70b 	ldhu	r5,-36(fp)
  83e98c:	08053b80 	call	8053b8 <__udivsi3>
  83e990:	e0bff50d 	sth	r2,-44(fp)
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
  83e994:	e13ff68b 	ldhu	r4,-38(fp)
  83e998:	e17ff70b 	ldhu	r5,-36(fp)
  83e99c:	08053c00 	call	8053c0 <__umodsi3>
  83e9a0:	e0bff60d 	sth	r2,-40(fp)
  83e9a4:	e0bff60b 	ldhu	r2,-40(fp)
  83e9a8:	1005003a 	cmpeq	r2,r2,zero
  83e9ac:	1000031e 	bne	r2,zero,83e9bc <ip_fragment+0x1d8>
   {
      /* we will have one additional (also last) fragment that is smaller than the 
       * other fragments */
      ++num_frags;
  83e9b0:	e0bff50b 	ldhu	r2,-44(fp)
  83e9b4:	10800044 	addi	r2,r2,1
  83e9b8:	e0bff50d 	sth	r2,-44(fp)
    * the one passed to this function) is interrupt-safe, then we use 
    * ip_fragment_lc () for creating the child fragments.  This decreases the 
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
  83e9bc:	e0bff50b 	ldhu	r2,-44(fp)
  83e9c0:	10800128 	cmpgeui	r2,r2,4
  83e9c4:	10000a1e 	bne	r2,zero,83e9f0 <ip_fragment+0x20c>
  83e9c8:	e0bffa17 	ldw	r2,-24(fp)
  83e9cc:	10800a17 	ldw	r2,40(r2)
  83e9d0:	1080040c 	andi	r2,r2,16
  83e9d4:	1004c03a 	cmpne	r2,r2,zero
  83e9d8:	1000051e 	bne	r2,zero,83e9f0 <ip_fragment+0x20c>
   {
      return (ip_fragment_lc (p, firsthop));
  83e9dc:	e13ffa17 	ldw	r4,-24(fp)
  83e9e0:	e17ffb17 	ldw	r5,-20(fp)
  83e9e4:	083e35c0 	call	83e35c <ip_fragment_lc>
  83e9e8:	e0bffe15 	stw	r2,-8(fp)
  83e9ec:	00010006 	br	83edf0 <ip_fragment+0x60c>
   }

   parent_frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
  83e9f0:	e0bff817 	ldw	r2,-32(fp)
  83e9f4:	1080018b 	ldhu	r2,6(r2)
  83e9f8:	10bfffcc 	andi	r2,r2,65535
  83e9fc:	1004d23a 	srli	r2,r2,8
  83ea00:	10803fcc 	andi	r2,r2,255
  83ea04:	1009883a 	mov	r4,r2
  83ea08:	e0bff817 	ldw	r2,-32(fp)
  83ea0c:	1080018b 	ldhu	r2,6(r2)
  83ea10:	10bfffcc 	andi	r2,r2,65535
  83ea14:	1004923a 	slli	r2,r2,8
  83ea18:	1007883a 	mov	r3,r2
  83ea1c:	00bfc004 	movi	r2,-256
  83ea20:	1884703a 	and	r2,r3,r2
  83ea24:	2084b03a 	or	r2,r4,r2
  83ea28:	1087ffcc 	andi	r2,r2,8191
  83ea2c:	100490fa 	slli	r2,r2,3
  83ea30:	e0bff38d 	sth	r2,-50(fp)
   parent_mf = ((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF);
  83ea34:	e0bff817 	ldw	r2,-32(fp)
  83ea38:	1080018b 	ldhu	r2,6(r2)
  83ea3c:	10bfffcc 	andi	r2,r2,65535
  83ea40:	1004d23a 	srli	r2,r2,8
  83ea44:	10803fcc 	andi	r2,r2,255
  83ea48:	1009883a 	mov	r4,r2
  83ea4c:	e0bff817 	ldw	r2,-32(fp)
  83ea50:	1080018b 	ldhu	r2,6(r2)
  83ea54:	10bfffcc 	andi	r2,r2,65535
  83ea58:	1004923a 	slli	r2,r2,8
  83ea5c:	1007883a 	mov	r3,r2
  83ea60:	00bfc004 	movi	r2,-256
  83ea64:	1884703a 	and	r2,r3,r2
  83ea68:	2084b03a 	or	r2,r4,r2
  83ea6c:	1088000c 	andi	r2,r2,8192
  83ea70:	e0bff30d 	sth	r2,-52(fp)
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
  83ea74:	e03ff48d 	sth	zero,-46(fp)
  83ea78:	0000cc06 	br	83edac <ip_fragment+0x5c8>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
  83ea7c:	01000084 	movi	r4,2
  83ea80:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      newpkt = pk_alloc (useable_payload_len + iphlen + l2hdr_len); 
  83ea84:	e0fff70b 	ldhu	r3,-36(fp)
  83ea88:	e0bff7c3 	ldbu	r2,-33(fp)
  83ea8c:	1887883a 	add	r3,r3,r2
  83ea90:	e0bff783 	ldbu	r2,-34(fp)
  83ea94:	1885883a 	add	r2,r3,r2
  83ea98:	1009883a 	mov	r4,r2
  83ea9c:	0829b840 	call	829b84 <pk_alloc>
  83eaa0:	e0bff215 	stw	r2,-56(fp)
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83eaa4:	01000084 	movi	r4,2
  83eaa8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

      if (newpkt == 0)
  83eaac:	e0bff217 	ldw	r2,-56(fp)
  83eab0:	1004c03a 	cmpne	r2,r2,zero
  83eab4:	1000101e 	bne	r2,zero,83eaf8 <ip_fragment+0x314>
      {
         /* free the packet that we are working with */
         LOCK_NET_RESOURCE(FREEQ_RESID);
  83eab8:	01000084 	movi	r4,2
  83eabc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(p);
  83eac0:	e13ffa17 	ldw	r4,-24(fp)
  83eac4:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83eac8:	01000084 	movi	r4,2
  83eacc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         ip_mib.ipFragFails++;
  83ead0:	00803934 	movhi	r2,228
  83ead4:	10a9e204 	addi	r2,r2,-22648
  83ead8:	10801117 	ldw	r2,68(r2)
  83eadc:	10c00044 	addi	r3,r2,1
  83eae0:	00803934 	movhi	r2,228
  83eae4:	10a9e204 	addi	r2,r2,-22648
  83eae8:	10c01115 	stw	r3,68(r2)
         return ENP_NOBUFFER;
  83eaec:	00bffac4 	movi	r2,-21
  83eaf0:	e0bffe15 	stw	r2,-8(fp)
  83eaf4:	0000be06 	br	83edf0 <ip_fragment+0x60c>
      }
      else
      {
         /* copy the IP header from the original datagram into the fragment */
         MEMCPY((newpkt->nb_buff + l2hdr_len), p->nb_prot, iphlen);
  83eaf8:	e0bff217 	ldw	r2,-56(fp)
  83eafc:	10c00117 	ldw	r3,4(r2)
  83eb00:	e0bff783 	ldbu	r2,-34(fp)
  83eb04:	1889883a 	add	r4,r3,r2
  83eb08:	e0bffa17 	ldw	r2,-24(fp)
  83eb0c:	10800317 	ldw	r2,12(r2)
  83eb10:	e0fff7c3 	ldbu	r3,-33(fp)
  83eb14:	100b883a 	mov	r5,r2
  83eb18:	180d883a 	mov	r6,r3
  83eb1c:	08073380 	call	807338 <memcpy>

         /* compute the amount of payload that needs to be copied into each 
          * child fragment */
         if (i < (num_frags - 1))
  83eb20:	e0fff48b 	ldhu	r3,-46(fp)
  83eb24:	e0bff50b 	ldhu	r2,-44(fp)
  83eb28:	10bfffc4 	addi	r2,r2,-1
  83eb2c:	1880030e 	bge	r3,r2,83eb3c <ip_fragment+0x358>
         {
            amt_to_copy = useable_payload_len;
  83eb30:	e0bff70b 	ldhu	r2,-36(fp)
  83eb34:	e0bff40d 	sth	r2,-48(fp)
  83eb38:	00000a06 	br	83eb64 <ip_fragment+0x380>
         }
         else
         {
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
  83eb3c:	e0bff60b 	ldhu	r2,-40(fp)
  83eb40:	1004c03a 	cmpne	r2,r2,zero
  83eb44:	1000031e 	bne	r2,zero,83eb54 <ip_fragment+0x370>
  83eb48:	e0fff70b 	ldhu	r3,-36(fp)
  83eb4c:	e0fffc0d 	sth	r3,-16(fp)
  83eb50:	00000206 	br	83eb5c <ip_fragment+0x378>
  83eb54:	e0bff60b 	ldhu	r2,-40(fp)
  83eb58:	e0bffc0d 	sth	r2,-16(fp)
  83eb5c:	e0fffc0b 	ldhu	r3,-16(fp)
  83eb60:	e0fff40d 	sth	r3,-48(fp)
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);
  83eb64:	e0bff217 	ldw	r2,-56(fp)
  83eb68:	10c00117 	ldw	r3,4(r2)
  83eb6c:	e0bff783 	ldbu	r2,-34(fp)
  83eb70:	1887883a 	add	r3,r3,r2
  83eb74:	e0bff7c3 	ldbu	r2,-33(fp)
  83eb78:	188b883a 	add	r5,r3,r2
  83eb7c:	e0bffa17 	ldw	r2,-24(fp)
  83eb80:	10c00317 	ldw	r3,12(r2)
  83eb84:	e0bff7c3 	ldbu	r2,-33(fp)
  83eb88:	1889883a 	add	r4,r3,r2
  83eb8c:	e0fff70b 	ldhu	r3,-36(fp)
  83eb90:	e0bff48b 	ldhu	r2,-46(fp)
  83eb94:	1885383a 	mul	r2,r3,r2
  83eb98:	2085883a 	add	r2,r4,r2
  83eb9c:	e0fff40b 	ldhu	r3,-48(fp)
  83eba0:	2809883a 	mov	r4,r5
  83eba4:	100b883a 	mov	r5,r2
  83eba8:	180d883a 	mov	r6,r3
  83ebac:	08073380 	call	807338 <memcpy>

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
  83ebb0:	e0bff217 	ldw	r2,-56(fp)
  83ebb4:	10c00117 	ldw	r3,4(r2)
  83ebb8:	e0bff783 	ldbu	r2,-34(fp)
  83ebbc:	1887883a 	add	r3,r3,r2
  83ebc0:	e0bff217 	ldw	r2,-56(fp)
  83ebc4:	10c00315 	stw	r3,12(r2)
         newpkt->nb_plen = iphlen + amt_to_copy;
  83ebc8:	e0fff7c3 	ldbu	r3,-33(fp)
  83ebcc:	e0bff40b 	ldhu	r2,-48(fp)
  83ebd0:	1885883a 	add	r2,r3,r2
  83ebd4:	1007883a 	mov	r3,r2
  83ebd8:	e0bff217 	ldw	r2,-56(fp)
  83ebdc:	10c00415 	stw	r3,16(r2)
         newpkt->net = p->net;
  83ebe0:	e0bffa17 	ldw	r2,-24(fp)
  83ebe4:	10c00617 	ldw	r3,24(r2)
  83ebe8:	e0bff217 	ldw	r2,-56(fp)
  83ebec:	10c00615 	stw	r3,24(r2)
         newpkt->fhost = p->fhost;
  83ebf0:	e0bffa17 	ldw	r2,-24(fp)
  83ebf4:	10c00717 	ldw	r3,28(r2)
  83ebf8:	e0bff217 	ldw	r2,-56(fp)
  83ebfc:	10c00715 	stw	r3,28(r2)
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);
  83ec00:	e0fff217 	ldw	r3,-56(fp)
  83ec04:	00820004 	movi	r2,2048
  83ec08:	1880080d 	sth	r2,32(r3)

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
  83ec0c:	e0bff217 	ldw	r2,-56(fp)
  83ec10:	10800317 	ldw	r2,12(r2)
  83ec14:	e0bff115 	stw	r2,-60(fp)
         newpip->ip_len = htons(newpkt->nb_plen);
  83ec18:	e0bff217 	ldw	r2,-56(fp)
  83ec1c:	10800417 	ldw	r2,16(r2)
  83ec20:	1004d23a 	srli	r2,r2,8
  83ec24:	10803fcc 	andi	r2,r2,255
  83ec28:	1009883a 	mov	r4,r2
  83ec2c:	e0bff217 	ldw	r2,-56(fp)
  83ec30:	10800417 	ldw	r2,16(r2)
  83ec34:	1004923a 	slli	r2,r2,8
  83ec38:	1007883a 	mov	r3,r2
  83ec3c:	00bfc004 	movi	r2,-256
  83ec40:	1884703a 	and	r2,r3,r2
  83ec44:	2084b03a 	or	r2,r4,r2
  83ec48:	1007883a 	mov	r3,r2
  83ec4c:	e0bff117 	ldw	r2,-60(fp)
  83ec50:	10c0008d 	sth	r3,2(r2)
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
  83ec54:	e13ff38b 	ldhu	r4,-50(fp)
  83ec58:	e0fff70b 	ldhu	r3,-36(fp)
  83ec5c:	e0bff48b 	ldhu	r2,-46(fp)
  83ec60:	1885383a 	mul	r2,r3,r2
  83ec64:	2085883a 	add	r2,r4,r2
  83ec68:	1005d2fa 	srai	r2,r2,11
  83ec6c:	10803fcc 	andi	r2,r2,255
  83ec70:	100b883a 	mov	r5,r2
  83ec74:	e13ff38b 	ldhu	r4,-50(fp)
  83ec78:	e0fff70b 	ldhu	r3,-36(fp)
  83ec7c:	e0bff48b 	ldhu	r2,-46(fp)
  83ec80:	1885383a 	mul	r2,r3,r2
  83ec84:	2085883a 	add	r2,r4,r2
  83ec88:	1005d0fa 	srai	r2,r2,3
  83ec8c:	1004923a 	slli	r2,r2,8
  83ec90:	1007883a 	mov	r3,r2
  83ec94:	00bfc004 	movi	r2,-256
  83ec98:	1884703a 	and	r2,r3,r2
  83ec9c:	2884b03a 	or	r2,r5,r2
  83eca0:	1007883a 	mov	r3,r2
  83eca4:	e0bff117 	ldw	r2,-60(fp)
  83eca8:	10c0018d 	sth	r3,6(r2)
          *     child fragments but the last will have the MF bit set)
          * (2) Parent fragment offset = x, MF = 1: first or middle fragment (FF or MF)
          *     (all child fragments will have the MF bit set)
          * (3) Parent fragment offset > 0, MF = 0: last fragment (LF) (all child fragments
          *     except the last will have the MF bit set) */
         if (i < (num_frags - 1))
  83ecac:	e0fff48b 	ldhu	r3,-46(fp)
  83ecb0:	e0bff50b 	ldhu	r2,-44(fp)
  83ecb4:	10bfffc4 	addi	r2,r2,-1
  83ecb8:	1880070e 	bge	r3,r2,83ecd8 <ip_fragment+0x4f4>
         {
            newpip->ip_flgs_foff |= htons(IP_FLG_MF);
  83ecbc:	e0bff117 	ldw	r2,-60(fp)
  83ecc0:	1080018b 	ldhu	r2,6(r2)
  83ecc4:	10800814 	ori	r2,r2,32
  83ecc8:	1007883a 	mov	r3,r2
  83eccc:	e0bff117 	ldw	r2,-60(fp)
  83ecd0:	10c0018d 	sth	r3,6(r2)
  83ecd4:	00000906 	br	83ecfc <ip_fragment+0x518>
         }
         else
         {
            if (parent_mf)
  83ecd8:	e0bff30b 	ldhu	r2,-52(fp)
  83ecdc:	1005003a 	cmpeq	r2,r2,zero
  83ece0:	1000061e 	bne	r2,zero,83ecfc <ip_fragment+0x518>
            {
               newpip->ip_flgs_foff |= htons(IP_FLG_MF);
  83ece4:	e0bff117 	ldw	r2,-60(fp)
  83ece8:	1080018b 	ldhu	r2,6(r2)
  83ecec:	10800814 	ori	r2,r2,32
  83ecf0:	1007883a 	mov	r3,r2
  83ecf4:	e0bff117 	ldw	r2,-60(fp)
  83ecf8:	10c0018d 	sth	r3,6(r2)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
  83ecfc:	e0bff117 	ldw	r2,-60(fp)
  83ed00:	1000028d 	sth	zero,10(r2)
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
  83ed04:	e0bff7c3 	ldbu	r2,-33(fp)
  83ed08:	1004d07a 	srli	r2,r2,1
  83ed0c:	11403fcc 	andi	r5,r2,255
  83ed10:	e13ff117 	ldw	r4,-60(fp)
  83ed14:	08256340 	call	825634 <cksum>
  83ed18:	0084303a 	nor	r2,zero,r2
  83ed1c:	1007883a 	mov	r3,r2
  83ed20:	e0bff117 	ldw	r2,-60(fp)
  83ed24:	10c0028d 	sth	r3,10(r2)

         ip_mib.ipFragCreates++;
  83ed28:	00803934 	movhi	r2,228
  83ed2c:	10a9e204 	addi	r2,r2,-22648
  83ed30:	10801217 	ldw	r2,72(r2)
  83ed34:	10c00044 	addi	r3,r2,1
  83ed38:	00803934 	movhi	r2,228
  83ed3c:	10a9e204 	addi	r2,r2,-22648
  83ed40:	10c01215 	stw	r3,72(r2)

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
  83ed44:	e13ff217 	ldw	r4,-56(fp)
  83ed48:	e17ffb17 	ldw	r5,-20(fp)
  83ed4c:	08233d00 	call	8233d0 <ip2mac>
  83ed50:	e0bff015 	stw	r2,-64(fp)
         if (e < 0)
  83ed54:	e0bff017 	ldw	r2,-64(fp)
  83ed58:	1004403a 	cmpge	r2,r2,zero
  83ed5c:	1000101e 	bne	r2,zero,83eda0 <ip_fragment+0x5bc>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
  83ed60:	01000084 	movi	r4,2
  83ed64:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(p);
  83ed68:	e13ffa17 	ldw	r4,-24(fp)
  83ed6c:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83ed70:	01000084 	movi	r4,2
  83ed74:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
  83ed78:	00803934 	movhi	r2,228
  83ed7c:	10a9e204 	addi	r2,r2,-22648
  83ed80:	10801117 	ldw	r2,68(r2)
  83ed84:	10c00044 	addi	r3,r2,1
  83ed88:	00803934 	movhi	r2,228
  83ed8c:	10a9e204 	addi	r2,r2,-22648
  83ed90:	10c01115 	stw	r3,68(r2)
            return e;
  83ed94:	e0bff017 	ldw	r2,-64(fp)
  83ed98:	e0bffe15 	stw	r2,-8(fp)
  83ed9c:	00001406 	br	83edf0 <ip_fragment+0x60c>
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
  83eda0:	e0bff48b 	ldhu	r2,-46(fp)
  83eda4:	10800044 	addi	r2,r2,1
  83eda8:	e0bff48d 	sth	r2,-46(fp)
  83edac:	e0fff48b 	ldhu	r3,-46(fp)
  83edb0:	e0bff50b 	ldhu	r2,-44(fp)
  83edb4:	18bf3136 	bltu	r3,r2,83ea7c <ip_fragment+0x298>

   } /* end FOR (all child fragments) */

   /* free the parent buffer since all of the data from it have been copied 
    * out into the child fragments */
   LOCK_NET_RESOURCE(FREEQ_RESID);
  83edb8:	01000084 	movi	r4,2
  83edbc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p);
  83edc0:	e13ffa17 	ldw	r4,-24(fp)
  83edc4:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83edc8:	01000084 	movi	r4,2
  83edcc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
  83edd0:	00803934 	movhi	r2,228
  83edd4:	10a9e204 	addi	r2,r2,-22648
  83edd8:	10801017 	ldw	r2,64(r2)
  83eddc:	10c00044 	addi	r3,r2,1
  83ede0:	00803934 	movhi	r2,228
  83ede4:	10a9e204 	addi	r2,r2,-22648
  83ede8:	10c01015 	stw	r3,64(r2)

   return 0;
  83edec:	e03ffe15 	stw	zero,-8(fp)
  83edf0:	e0bffe17 	ldw	r2,-8(fp)
}
  83edf4:	e037883a 	mov	sp,fp
  83edf8:	dfc00117 	ldw	ra,4(sp)
  83edfc:	df000017 	ldw	fp,0(sp)
  83ee00:	dec00204 	addi	sp,sp,8
  83ee04:	f800283a 	ret

0083ee08 <ip_mymach>:
 * certain foreign host. 
 */

ip_addr
ip_mymach(ip_addr host)
{
  83ee08:	defff904 	addi	sp,sp,-28
  83ee0c:	dfc00615 	stw	ra,24(sp)
  83ee10:	df000515 	stw	fp,20(sp)
  83ee14:	df000504 	addi	fp,sp,20
  83ee18:	e13ffe15 	stw	r4,-8(fp)

#ifndef MULTI_HOMED /* single static interface */
   USE_ARG(host);
   return(nets[0]->n_ipaddr);   /* always use address from only net */
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
  83ee1c:	e17ffd04 	addi	r5,fp,-12
  83ee20:	e13ffe17 	ldw	r4,-8(fp)
  83ee24:	083f16c0 	call	83f16c <iproute>
  83ee28:	e0bffc15 	stw	r2,-16(fp)
   if (tnet == 0)
  83ee2c:	e0bffc17 	ldw	r2,-16(fp)
  83ee30:	1004c03a 	cmpne	r2,r2,zero
  83ee34:	1000161e 	bne	r2,zero,83ee90 <ip_mymach+0x88>
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
  83ee38:	00802174 	movhi	r2,133
  83ee3c:	10830104 	addi	r2,r2,3076
  83ee40:	10800017 	ldw	r2,0(r2)
  83ee44:	1080050c 	andi	r2,r2,20
  83ee48:	1005003a 	cmpeq	r2,r2,zero
  83ee4c:	10000e1e 	bne	r2,zero,83ee88 <ip_mymach+0x80>
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
  83ee50:	e0bffe17 	ldw	r2,-8(fp)
  83ee54:	11403fcc 	andi	r5,r2,255
  83ee58:	e0bffe17 	ldw	r2,-8(fp)
  83ee5c:	1004d23a 	srli	r2,r2,8
  83ee60:	11803fcc 	andi	r6,r2,255
  83ee64:	e0bffe17 	ldw	r2,-8(fp)
  83ee68:	1004d43a 	srli	r2,r2,16
  83ee6c:	11c03fcc 	andi	r7,r2,255
  83ee70:	e0bffe17 	ldw	r2,-8(fp)
  83ee74:	1004d63a 	srli	r2,r2,24
  83ee78:	d8800015 	stw	r2,0(sp)
  83ee7c:	01002174 	movhi	r4,133
  83ee80:	2137f504 	addi	r4,r4,-8236
  83ee84:	08076480 	call	807648 <printf>
#endif   /* NPDEBUG */
      return 0L;
  83ee88:	e03fff15 	stw	zero,-4(fp)
  83ee8c:	00000306 	br	83ee9c <ip_mymach+0x94>
   }
   return tnet->n_ipaddr;
  83ee90:	e0bffc17 	ldw	r2,-16(fp)
  83ee94:	10800a17 	ldw	r2,40(r2)
  83ee98:	e0bfff15 	stw	r2,-4(fp)
  83ee9c:	e0bfff17 	ldw	r2,-4(fp)
#endif /* MULTI_HOMED */
}
  83eea0:	e037883a 	mov	sp,fp
  83eea4:	dfc00117 	ldw	ra,4(sp)
  83eea8:	df000017 	ldw	fp,0(sp)
  83eeac:	dec00204 	addi	sp,sp,8
  83eeb0:	f800283a 	ret

0083eeb4 <ip_dump>:
 * RETURNS: void
 */

void
ip_dump(PACKET p)
{
  83eeb4:	defff204 	addi	sp,sp,-56
  83eeb8:	dfc00d15 	stw	ra,52(sp)
  83eebc:	df000c15 	stw	fp,48(sp)
  83eec0:	df000c04 	addi	fp,sp,48
  83eec4:	e13ffa15 	stw	r4,-24(fp)
   struct ip * pip;
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
  83eec8:	e0bffa17 	ldw	r2,-24(fp)
  83eecc:	10800317 	ldw	r2,12(r2)
  83eed0:	e0bff915 	stw	r2,-28(fp)
   osum = pip->ip_chksum;
  83eed4:	e0bff917 	ldw	r2,-28(fp)
  83eed8:	1080028b 	ldhu	r2,10(r2)
  83eedc:	e0bff70d 	sth	r2,-36(fp)
   pip->ip_chksum = 0;
  83eee0:	e0bff917 	ldw	r2,-28(fp)
  83eee4:	1000028d 	sth	zero,10(r2)
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
  83eee8:	e0bff917 	ldw	r2,-28(fp)
  83eeec:	10800003 	ldbu	r2,0(r2)
  83eef0:	10803fcc 	andi	r2,r2,255
  83eef4:	108003cc 	andi	r2,r2,15
  83eef8:	1085883a 	add	r2,r2,r2
  83eefc:	1085883a 	add	r2,r2,r2
  83ef00:	1005d07a 	srai	r2,r2,1
  83ef04:	100b883a 	mov	r5,r2
  83ef08:	e13ff917 	ldw	r4,-28(fp)
  83ef0c:	08256340 	call	825634 <cksum>
  83ef10:	0084303a 	nor	r2,zero,r2
  83ef14:	e0bff78d 	sth	r2,-34(fp)

   if (osum != xsum)          /* trap here if checksum is wrong */
  83ef18:	e0fff70b 	ldhu	r3,-36(fp)
  83ef1c:	e0bff78b 	ldhu	r2,-34(fp)
  83ef20:	18800126 	beq	r3,r2,83ef28 <ip_dump+0x74>
   {
      dtrap();
  83ef24:	082a7c80 	call	82a7c8 <dtrap>
   /* dtrap() is fatal in the default Windows implementation, so
    * we comment it out */
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
  83ef28:	0009883a 	mov	r4,zero
  83ef2c:	01402174 	movhi	r5,133
  83ef30:	2977fe04 	addi	r5,r5,-8200
  83ef34:	0825c540 	call	825c54 <ns_printf>
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
  83ef38:	e0bff917 	ldw	r2,-28(fp)
  83ef3c:	e0bff815 	stw	r2,-32(fp)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
  83ef40:	e0bff817 	ldw	r2,-32(fp)
  83ef44:	10800003 	ldbu	r2,0(r2)
  83ef48:	11803fcc 	andi	r6,r2,255
  83ef4c:	e0bff817 	ldw	r2,-32(fp)
  83ef50:	10800044 	addi	r2,r2,1
  83ef54:	10800003 	ldbu	r2,0(r2)
  83ef58:	11c03fcc 	andi	r7,r2,255
  83ef5c:	e0bff917 	ldw	r2,-28(fp)
  83ef60:	1080008b 	ldhu	r2,2(r2)
  83ef64:	10bfffcc 	andi	r2,r2,65535
  83ef68:	1004d23a 	srli	r2,r2,8
  83ef6c:	10bfffcc 	andi	r2,r2,65535
  83ef70:	10c03fcc 	andi	r3,r2,255
  83ef74:	e0bff917 	ldw	r2,-28(fp)
  83ef78:	1080008b 	ldhu	r2,2(r2)
  83ef7c:	10bfffcc 	andi	r2,r2,65535
  83ef80:	1004923a 	slli	r2,r2,8
  83ef84:	10bfc00c 	andi	r2,r2,65280
  83ef88:	1888b03a 	or	r4,r3,r2
  83ef8c:	e0bff917 	ldw	r2,-28(fp)
  83ef90:	1080010b 	ldhu	r2,4(r2)
  83ef94:	10bfffcc 	andi	r2,r2,65535
  83ef98:	1004d23a 	srli	r2,r2,8
  83ef9c:	10bfffcc 	andi	r2,r2,65535
  83efa0:	10c03fcc 	andi	r3,r2,255
  83efa4:	e0bff917 	ldw	r2,-28(fp)
  83efa8:	1080010b 	ldhu	r2,4(r2)
  83efac:	10bfffcc 	andi	r2,r2,65535
  83efb0:	1004923a 	slli	r2,r2,8
  83efb4:	10bfc00c 	andi	r2,r2,65280
  83efb8:	1884b03a 	or	r2,r3,r2
  83efbc:	d9000015 	stw	r4,0(sp)
  83efc0:	d8800115 	stw	r2,4(sp)
  83efc4:	0009883a 	mov	r4,zero
  83efc8:	01402174 	movhi	r5,133
  83efcc:	29780304 	addi	r5,r5,-8180
  83efd0:	0825c540 	call	825c54 <ns_printf>
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
  83efd4:	e0bff817 	ldw	r2,-32(fp)
  83efd8:	10800184 	addi	r2,r2,6
  83efdc:	1080000b 	ldhu	r2,0(r2)
  83efe0:	10bfffcc 	andi	r2,r2,65535
  83efe4:	1004d23a 	srli	r2,r2,8
  83efe8:	10bfffcc 	andi	r2,r2,65535
  83efec:	10c03fcc 	andi	r3,r2,255
  83eff0:	e0bff817 	ldw	r2,-32(fp)
  83eff4:	10800184 	addi	r2,r2,6
  83eff8:	1080000b 	ldhu	r2,0(r2)
  83effc:	10bfffcc 	andi	r2,r2,65535
  83f000:	1004923a 	slli	r2,r2,8
  83f004:	10bfc00c 	andi	r2,r2,65280
  83f008:	1886b03a 	or	r3,r3,r2
  83f00c:	e0ffff15 	stw	r3,-4(fp)
  83f010:	e0bff917 	ldw	r2,-28(fp)
  83f014:	10800203 	ldbu	r2,8(r2)
  83f018:	10803fcc 	andi	r2,r2,255
  83f01c:	e0bffe15 	stw	r2,-8(fp)
  83f020:	e0bff917 	ldw	r2,-28(fp)
  83f024:	10800243 	ldbu	r2,9(r2)
  83f028:	10803fcc 	andi	r2,r2,255
  83f02c:	e0bffd15 	stw	r2,-12(fp)
  83f030:	e0bff70b 	ldhu	r2,-36(fp)
  83f034:	1004d23a 	srli	r2,r2,8
  83f038:	10bfffcc 	andi	r2,r2,65535
  83f03c:	10c03fcc 	andi	r3,r2,255
  83f040:	e0bff70b 	ldhu	r2,-36(fp)
  83f044:	1004923a 	slli	r2,r2,8
  83f048:	10bfc00c 	andi	r2,r2,65280
  83f04c:	1886b03a 	or	r3,r3,r2
  83f050:	e0fffc15 	stw	r3,-16(fp)
  83f054:	e0fff70b 	ldhu	r3,-36(fp)
  83f058:	e0bff78b 	ldhu	r2,-34(fp)
  83f05c:	1880041e 	bne	r3,r2,83f070 <ip_dump+0x1bc>
  83f060:	00802174 	movhi	r2,133
  83f064:	10b80f04 	addi	r2,r2,-8132
  83f068:	e0bffb15 	stw	r2,-20(fp)
  83f06c:	00000306 	br	83f07c <ip_dump+0x1c8>
  83f070:	00802174 	movhi	r2,133
  83f074:	10b81004 	addi	r2,r2,-8128
  83f078:	e0bffb15 	stw	r2,-20(fp)
  83f07c:	e0bffd17 	ldw	r2,-12(fp)
  83f080:	d8800015 	stw	r2,0(sp)
  83f084:	e0bffc17 	ldw	r2,-16(fp)
  83f088:	d8800115 	stw	r2,4(sp)
  83f08c:	e0bffb17 	ldw	r2,-20(fp)
  83f090:	d8800215 	stw	r2,8(sp)
  83f094:	0009883a 	mov	r4,zero
  83f098:	01402174 	movhi	r5,133
  83f09c:	29781104 	addi	r5,r5,-8124
  83f0a0:	e1bfff17 	ldw	r6,-4(fp)
  83f0a4:	e1fffe17 	ldw	r7,-8(fp)
  83f0a8:	0825c540 	call	825c54 <ns_printf>
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
    htons(osum), (osum==xsum)?"ok":"bad");
   ns_printf(NULL ,"src: %u.%u.%u.%u  ", PUSH_IPADDR(pip->ip_src));
  83f0ac:	e0bff917 	ldw	r2,-28(fp)
  83f0b0:	10800317 	ldw	r2,12(r2)
  83f0b4:	11803fcc 	andi	r6,r2,255
  83f0b8:	e0bff917 	ldw	r2,-28(fp)
  83f0bc:	10800317 	ldw	r2,12(r2)
  83f0c0:	1004d23a 	srli	r2,r2,8
  83f0c4:	11c03fcc 	andi	r7,r2,255
  83f0c8:	e0bff917 	ldw	r2,-28(fp)
  83f0cc:	10800317 	ldw	r2,12(r2)
  83f0d0:	1004d43a 	srli	r2,r2,16
  83f0d4:	10c03fcc 	andi	r3,r2,255
  83f0d8:	e0bff917 	ldw	r2,-28(fp)
  83f0dc:	10800317 	ldw	r2,12(r2)
  83f0e0:	1004d63a 	srli	r2,r2,24
  83f0e4:	d8c00015 	stw	r3,0(sp)
  83f0e8:	d8800115 	stw	r2,4(sp)
  83f0ec:	0009883a 	mov	r4,zero
  83f0f0:	01402174 	movhi	r5,133
  83f0f4:	29782104 	addi	r5,r5,-8060
  83f0f8:	0825c540 	call	825c54 <ns_printf>
   ns_printf(NULL ,"dest: %u.%u.%u.%u\n", PUSH_IPADDR(pip->ip_dest));
  83f0fc:	e0bff917 	ldw	r2,-28(fp)
  83f100:	10800417 	ldw	r2,16(r2)
  83f104:	11803fcc 	andi	r6,r2,255
  83f108:	e0bff917 	ldw	r2,-28(fp)
  83f10c:	10800417 	ldw	r2,16(r2)
  83f110:	1004d23a 	srli	r2,r2,8
  83f114:	11c03fcc 	andi	r7,r2,255
  83f118:	e0bff917 	ldw	r2,-28(fp)
  83f11c:	10800417 	ldw	r2,16(r2)
  83f120:	1004d43a 	srli	r2,r2,16
  83f124:	10c03fcc 	andi	r3,r2,255
  83f128:	e0bff917 	ldw	r2,-28(fp)
  83f12c:	10800417 	ldw	r2,16(r2)
  83f130:	1004d63a 	srli	r2,r2,24
  83f134:	d8c00015 	stw	r3,0(sp)
  83f138:	d8800115 	stw	r2,4(sp)
  83f13c:	0009883a 	mov	r4,zero
  83f140:	01402174 	movhi	r5,133
  83f144:	29782604 	addi	r5,r5,-8040
  83f148:	0825c540 	call	825c54 <ns_printf>

   pip->ip_chksum = osum;     /* fix what we clobbered */
  83f14c:	e0fff917 	ldw	r3,-28(fp)
  83f150:	e0bff70b 	ldhu	r2,-36(fp)
  83f154:	1880028d 	sth	r2,10(r3)
}
  83f158:	e037883a 	mov	sp,fp
  83f15c:	dfc00117 	ldw	ra,4(sp)
  83f160:	df000017 	ldw	fp,0(sp)
  83f164:	dec00204 	addi	sp,sp,8
  83f168:	f800283a 	ret

0083f16c <iproute>:
 * RETURNS: Returns NULL when unable to route, else returns a NET pointer.
 */

NET
iproute(ip_addr host, ip_addr * hop1)
{
  83f16c:	defff704 	addi	sp,sp,-36
  83f170:	dfc00815 	stw	ra,32(sp)
  83f174:	df000715 	stw	fp,28(sp)
  83f178:	df000704 	addi	fp,sp,28
  83f17c:	e13ffd15 	stw	r4,-12(fp)
  83f180:	e17ffe15 	stw	r5,-8(fp)
   NET      ifp;
#ifdef IP_ROUTING
   RTMIB    rtp;
#endif   /* IP_ROUTING */

   if (host == 0L)      /* Sanity check parameter. */
  83f184:	e0bffd17 	ldw	r2,-12(fp)
  83f188:	1004c03a 	cmpne	r2,r2,zero
  83f18c:	1000021e 	bne	r2,zero,83f198 <iproute+0x2c>
      return NULL;
  83f190:	e03fff15 	stw	zero,-4(fp)
  83f194:	00008a06 	br	83f3c0 <iproute+0x254>
    * stack has been initialized (tk_yield() gets called out of the 
    * dialer code as part of PPP initialization), one symptom of 
    * which is the routing table not being present yet. if this 
    * happens, quit. 
    */
   if (rt_mib == NULL)
  83f198:	d0a0cb17 	ldw	r2,-31956(gp)
  83f19c:	1004c03a 	cmpne	r2,r2,zero
  83f1a0:	1000021e 	bne	r2,zero,83f1ac <iproute+0x40>
      return NULL;
  83f1a4:	e03fff15 	stw	zero,-4(fp)
  83f1a8:	00008506 	br	83f3c0 <iproute+0x254>
#endif   /* BTREE_ROUTING */

   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
  83f1ac:	00802174 	movhi	r2,133
  83f1b0:	10834b04 	addi	r2,r2,3372
  83f1b4:	10800017 	ldw	r2,0(r2)
  83f1b8:	1005003a 	cmpeq	r2,r2,zero
  83f1bc:	1000191e 	bne	r2,zero,83f224 <iproute+0xb8>
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
  83f1c0:	00802174 	movhi	r2,133
  83f1c4:	10834b04 	addi	r2,r2,3372
  83f1c8:	10800017 	ldw	r2,0(r2)
  83f1cc:	10c00017 	ldw	r3,0(r2)
  83f1d0:	e0bffd17 	ldw	r2,-12(fp)
  83f1d4:	1880131e 	bne	r3,r2,83f224 <iproute+0xb8>
      {
         *hop1 = cachedRoute->ipRouteNextHop;   /* fill in nexthop IP addr */
  83f1d8:	00802174 	movhi	r2,133
  83f1dc:	10834b04 	addi	r2,r2,3372
  83f1e0:	10800017 	ldw	r2,0(r2)
  83f1e4:	10c00617 	ldw	r3,24(r2)
  83f1e8:	e0bffe17 	ldw	r2,-8(fp)
  83f1ec:	10c00015 	stw	r3,0(r2)
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
  83f1f0:	00802174 	movhi	r2,133
  83f1f4:	10834b04 	addi	r2,r2,3372
  83f1f8:	10c00017 	ldw	r3,0(r2)
  83f1fc:	00802174 	movhi	r2,133
  83f200:	10832604 	addi	r2,r2,3224
  83f204:	10800017 	ldw	r2,0(r2)
  83f208:	18800915 	stw	r2,36(r3)
         return(cachedRoute->ifp); /* net to send on */
  83f20c:	00802174 	movhi	r2,133
  83f210:	10834b04 	addi	r2,r2,3372
  83f214:	10800017 	ldw	r2,0(r2)
  83f218:	10800e17 	ldw	r2,56(r2)
  83f21c:	e0bfff15 	stw	r2,-4(fp)
  83f220:	00006706 	br	83f3c0 <iproute+0x254>
      }
   }

   rtp = rt_lookup(host);
  83f224:	e13ffd17 	ldw	r4,-12(fp)
  83f228:	0842a0c0 	call	842a0c <rt_lookup>
  83f22c:	e0bffa15 	stw	r2,-24(fp)
   if(rtp)
  83f230:	e0bffa17 	ldw	r2,-24(fp)
  83f234:	1005003a 	cmpeq	r2,r2,zero
  83f238:	10000c1e 	bne	r2,zero,83f26c <iproute+0x100>
   {
      cachedRoute = rtp;
  83f23c:	00c02174 	movhi	r3,133
  83f240:	18c34b04 	addi	r3,r3,3372
  83f244:	e0bffa17 	ldw	r2,-24(fp)
  83f248:	18800015 	stw	r2,0(r3)
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
  83f24c:	e0bffa17 	ldw	r2,-24(fp)
  83f250:	10c00617 	ldw	r3,24(r2)
  83f254:	e0bffe17 	ldw	r2,-8(fp)
  83f258:	10c00015 	stw	r3,0(r2)
      return(rtp->ifp);             /* return pointer to net */
  83f25c:	e0bffa17 	ldw	r2,-24(fp)
  83f260:	10800e17 	ldw	r2,56(r2)
  83f264:	e0bfff15 	stw	r2,-4(fp)
  83f268:	00005506 	br	83f3c0 <iproute+0x254>
    * the initial state for the for loop that iterates through the
    * list), but only build the iterator for multi-homed systems
    * because single-homed systems are often memory-limited systems as
    * well.  
    */
   ifp = (NET)(netlist.q_head);
  83f26c:	00803934 	movhi	r2,228
  83f270:	10a9dd04 	addi	r2,r2,-22668
  83f274:	10800017 	ldw	r2,0(r2)
  83f278:	e0bffb15 	stw	r2,-20(fp)
   i = 0;
  83f27c:	e03ffc15 	stw	zero,-16(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
  83f280:	00002f06 	br	83f340 <iproute+0x1d4>
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
  83f284:	e0bffb17 	ldw	r2,-20(fp)
  83f288:	10800c17 	ldw	r2,48(r2)
  83f28c:	1005003a 	cmpeq	r2,r2,zero
  83f290:	1000251e 	bne	r2,zero,83f328 <iproute+0x1bc>
  83f294:	e0bffb17 	ldw	r2,-20(fp)
  83f298:	10800a17 	ldw	r2,40(r2)
  83f29c:	1005003a 	cmpeq	r2,r2,zero
  83f2a0:	1000211e 	bne	r2,zero,83f328 <iproute+0x1bc>
  83f2a4:	e0bffb17 	ldw	r2,-20(fp)
  83f2a8:	10c00a17 	ldw	r3,40(r2)
  83f2ac:	e0bffb17 	ldw	r2,-20(fp)
  83f2b0:	10800c17 	ldw	r2,48(r2)
  83f2b4:	1888703a 	and	r4,r3,r2
  83f2b8:	e0bffb17 	ldw	r2,-20(fp)
  83f2bc:	10c00c17 	ldw	r3,48(r2)
  83f2c0:	e0bffd17 	ldw	r2,-12(fp)
  83f2c4:	1884703a 	and	r2,r3,r2
  83f2c8:	2080171e 	bne	r4,r2,83f328 <iproute+0x1bc>
         (ifp->n_ipaddr != 0) && 
         ((ifp->n_ipaddr & ifp->snmask) == (host & ifp->snmask)))
      {
#ifdef IP_ROUTING
         /* make a cached Route entry for next time */
         cachedRoute = add_route(host, 0xFFFFFFFF, host, i, IPRP_OTHER);
  83f2cc:	00800044 	movi	r2,1
  83f2d0:	d8800015 	stw	r2,0(sp)
  83f2d4:	e13ffd17 	ldw	r4,-12(fp)
  83f2d8:	017fffc4 	movi	r5,-1
  83f2dc:	e1bffd17 	ldw	r6,-12(fp)
  83f2e0:	e1fffc17 	ldw	r7,-16(fp)
  83f2e4:	0842b900 	call	842b90 <add_route>
  83f2e8:	1007883a 	mov	r3,r2
  83f2ec:	00802174 	movhi	r2,133
  83f2f0:	10834b04 	addi	r2,r2,3372
  83f2f4:	10c00015 	stw	r3,0(r2)
#ifdef NPDEBUG
         if (cachedRoute == NULL)
  83f2f8:	00802174 	movhi	r2,133
  83f2fc:	10834b04 	addi	r2,r2,3372
  83f300:	10800017 	ldw	r2,0(r2)
  83f304:	1004c03a 	cmpne	r2,r2,zero
  83f308:	1000011e 	bne	r2,zero,83f310 <iproute+0x1a4>
            dtrap();
  83f30c:	082a7c80 	call	82a7c8 <dtrap>
#endif   /* NPDEBUG */
#endif   /* IP_ROUTING */
         *hop1 = host;
  83f310:	e0fffe17 	ldw	r3,-8(fp)
  83f314:	e0bffd17 	ldw	r2,-12(fp)
  83f318:	18800015 	stw	r2,0(r3)
         return ifp;
  83f31c:	e0bffb17 	ldw	r2,-20(fp)
  83f320:	e0bfff15 	stw	r2,-4(fp)
  83f324:	00002606 	br	83f3c0 <iproute+0x254>
    * well.  
    */
   ifp = (NET)(netlist.q_head);
   i = 0;
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
  83f328:	e0bffb17 	ldw	r2,-20(fp)
  83f32c:	10800017 	ldw	r2,0(r2)
  83f330:	e0bffb15 	stw	r2,-20(fp)
  83f334:	e0bffc17 	ldw	r2,-16(fp)
  83f338:	10800044 	addi	r2,r2,1
  83f33c:	e0bffc15 	stw	r2,-16(fp)
  83f340:	e0bffb17 	ldw	r2,-20(fp)
  83f344:	1004c03a 	cmpne	r2,r2,zero
  83f348:	103fce1e 	bne	r2,zero,83f284 <iproute+0x118>
#endif   /* IP_LOOPBACK */

   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
  83f34c:	00803934 	movhi	r2,228
  83f350:	10a9dd04 	addi	r2,r2,-22668
  83f354:	10800017 	ldw	r2,0(r2)
  83f358:	e0bffb15 	stw	r2,-20(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
  83f35c:	00000e06 	br	83f398 <iproute+0x22c>
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
  83f360:	e0bffb17 	ldw	r2,-20(fp)
  83f364:	10800d17 	ldw	r2,52(r2)
  83f368:	1005003a 	cmpeq	r2,r2,zero
  83f36c:	1000071e 	bne	r2,zero,83f38c <iproute+0x220>
      {
         *hop1 = ifp->n_defgw;
  83f370:	e0bffb17 	ldw	r2,-20(fp)
  83f374:	10c00d17 	ldw	r3,52(r2)
  83f378:	e0bffe17 	ldw	r2,-8(fp)
  83f37c:	10c00015 	stw	r3,0(r2)
         return ifp;
  83f380:	e0bffb17 	ldw	r2,-20(fp)
  83f384:	e0bfff15 	stw	r2,-4(fp)
  83f388:	00000d06 	br	83f3c0 <iproute+0x254>
   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
  83f38c:	e0bffb17 	ldw	r2,-20(fp)
  83f390:	10800017 	ldw	r2,0(r2)
  83f394:	e0bffb15 	stw	r2,-20(fp)
  83f398:	e0bffb17 	ldw	r2,-20(fp)
  83f39c:	1004c03a 	cmpne	r2,r2,zero
  83f3a0:	103fef1e 	bne	r2,zero,83f360 <iproute+0x1f4>
   /* if no gateway is set, then change the first hop address to the 
    * host we're trying to route to. this is just a kluge to make 
    * this work with arp routing. otherwise, we would try to return 
    * some sort of error indication. 
    */
   *hop1 = host;
  83f3a4:	e0fffe17 	ldw	r3,-8(fp)
  83f3a8:	e0bffd17 	ldw	r2,-12(fp)
  83f3ac:	18800015 	stw	r2,0(r3)
   return((NET)(netlist.q_head));
  83f3b0:	00803934 	movhi	r2,228
  83f3b4:	10a9dd04 	addi	r2,r2,-22668
  83f3b8:	10800017 	ldw	r2,0(r2)
  83f3bc:	e0bfff15 	stw	r2,-4(fp)
  83f3c0:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* STRICT_SUBNETTING */
}
  83f3c4:	e037883a 	mov	sp,fp
  83f3c8:	dfc00117 	ldw	ra,4(sp)
  83f3cc:	df000017 	ldw	fp,0(sp)
  83f3d0:	dec00204 	addi	sp,sp,8
  83f3d4:	f800283a 	ret

0083f3d8 <ip_copypkt>:
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
  83f3d8:	defffa04 	addi	sp,sp,-24
  83f3dc:	dfc00515 	stw	ra,20(sp)
  83f3e0:	df000415 	stw	fp,16(sp)
  83f3e4:	df000404 	addi	fp,sp,16
  83f3e8:	e13ffe15 	stw	r4,-8(fp)
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
  83f3ec:	e0bffe17 	ldw	r2,-8(fp)
  83f3f0:	11000417 	ldw	r4,16(r2)
  83f3f4:	e0bffe17 	ldw	r2,-8(fp)
  83f3f8:	10800317 	ldw	r2,12(r2)
  83f3fc:	1007883a 	mov	r3,r2
  83f400:	e0bffe17 	ldw	r2,-8(fp)
  83f404:	10800117 	ldw	r2,4(r2)
  83f408:	1885c83a 	sub	r2,r3,r2
  83f40c:	2085883a 	add	r2,r4,r2
  83f410:	e0bffc15 	stw	r2,-16(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
  83f414:	01000084 	movi	r4,2
  83f418:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   np = pk_alloc(len);
  83f41c:	e13ffc17 	ldw	r4,-16(fp)
  83f420:	0829b840 	call	829b84 <pk_alloc>
  83f424:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  83f428:	01000084 	movi	r4,2
  83f42c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   if (np == NULL)
  83f430:	e0bffd17 	ldw	r2,-12(fp)
  83f434:	1004c03a 	cmpne	r2,r2,zero
  83f438:	1000061e 	bne	r2,zero,83f454 <ip_copypkt+0x7c>
   {
#ifdef NPDEBUG
      dprintf("ip_copypkt(): unable to obtain packet (len %d)\n", len);
  83f43c:	01002174 	movhi	r4,133
  83f440:	21382b04 	addi	r4,r4,-8020
  83f444:	e17ffc17 	ldw	r5,-16(fp)
  83f448:	08076480 	call	807648 <printf>
#endif
      return NULL;
  83f44c:	e03fff15 	stw	zero,-4(fp)
  83f450:	00002906 	br	83f4f8 <ip_copypkt+0x120>
   }

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);
  83f454:	e0bffd17 	ldw	r2,-12(fp)
  83f458:	11000117 	ldw	r4,4(r2)
  83f45c:	e0bffe17 	ldw	r2,-8(fp)
  83f460:	10800117 	ldw	r2,4(r2)
  83f464:	e0fffc17 	ldw	r3,-16(fp)
  83f468:	100b883a 	mov	r5,r2
  83f46c:	180d883a 	mov	r6,r3
  83f470:	08073380 	call	807338 <memcpy>

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
  83f474:	e0bffd17 	ldw	r2,-12(fp)
  83f478:	11000117 	ldw	r4,4(r2)
  83f47c:	e0bffe17 	ldw	r2,-8(fp)
  83f480:	10800317 	ldw	r2,12(r2)
  83f484:	1007883a 	mov	r3,r2
  83f488:	e0bffe17 	ldw	r2,-8(fp)
  83f48c:	10800117 	ldw	r2,4(r2)
  83f490:	1885c83a 	sub	r2,r3,r2
  83f494:	2087883a 	add	r3,r4,r2
  83f498:	e0bffd17 	ldw	r2,-12(fp)
  83f49c:	10c00315 	stw	r3,12(r2)
   np->nb_plen = p->nb_plen;
  83f4a0:	e0bffe17 	ldw	r2,-8(fp)
  83f4a4:	10c00417 	ldw	r3,16(r2)
  83f4a8:	e0bffd17 	ldw	r2,-12(fp)
  83f4ac:	10c00415 	stw	r3,16(r2)
   np->net = p->net;
  83f4b0:	e0bffe17 	ldw	r2,-8(fp)
  83f4b4:	10c00617 	ldw	r3,24(r2)
  83f4b8:	e0bffd17 	ldw	r2,-12(fp)
  83f4bc:	10c00615 	stw	r3,24(r2)
   np->fhost = p->fhost;
  83f4c0:	e0bffe17 	ldw	r2,-8(fp)
  83f4c4:	10c00717 	ldw	r3,28(r2)
  83f4c8:	e0bffd17 	ldw	r2,-12(fp)
  83f4cc:	10c00715 	stw	r3,28(r2)
   np->type = p->type;
  83f4d0:	e0bffe17 	ldw	r2,-8(fp)
  83f4d4:	10c0080b 	ldhu	r3,32(r2)
  83f4d8:	e0bffd17 	ldw	r2,-12(fp)
  83f4dc:	10c0080d 	sth	r3,32(r2)
   np->nb_tstamp = p->nb_tstamp;
  83f4e0:	e0bffe17 	ldw	r2,-8(fp)
  83f4e4:	10c00517 	ldw	r3,20(r2)
  83f4e8:	e0bffd17 	ldw	r2,-12(fp)
  83f4ec:	10c00515 	stw	r3,20(r2)

   /* return pointer to the copy */
   return np;
  83f4f0:	e0bffd17 	ldw	r2,-12(fp)
  83f4f4:	e0bfff15 	stw	r2,-4(fp)
  83f4f8:	e0bfff17 	ldw	r2,-4(fp)
}
  83f4fc:	e037883a 	mov	sp,fp
  83f500:	dfc00117 	ldw	ra,4(sp)
  83f504:	df000017 	ldw	fp,0(sp)
  83f508:	dec00204 	addi	sp,sp,8
  83f50c:	f800283a 	ret

0083f510 <ip_reasm_match_frag_with_ire>:
packet being processed.  If no such entry is found, this function returns 
NULL.
*/

IREP ip_reasm_match_frag_with_ire (struct ip * pip)
{
  83f510:	defff904 	addi	sp,sp,-28
  83f514:	df000615 	stw	fp,24(sp)
  83f518:	df000604 	addi	fp,sp,24
  83f51c:	e13ffe15 	stw	r4,-8(fp)
   ip_addr dest;
   u_char prot;
   u_short id;
   IREP tmpp;
 
   src = pip->ip_src;
  83f520:	e0bffe17 	ldw	r2,-8(fp)
  83f524:	10800317 	ldw	r2,12(r2)
  83f528:	e0bffd15 	stw	r2,-12(fp)
   dest = pip->ip_dest;
  83f52c:	e0bffe17 	ldw	r2,-8(fp)
  83f530:	10800417 	ldw	r2,16(r2)
  83f534:	e0bffc15 	stw	r2,-16(fp)
   prot = pip->ip_prot;
  83f538:	e0bffe17 	ldw	r2,-8(fp)
  83f53c:	10800243 	ldbu	r2,9(r2)
  83f540:	e0bffb85 	stb	r2,-18(fp)
   id = pip->ip_id;
  83f544:	e0bffe17 	ldw	r2,-8(fp)
  83f548:	1080010b 	ldhu	r2,4(r2)
  83f54c:	e0bffb0d 	sth	r2,-20(fp)

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  83f550:	d0a0cd17 	ldw	r2,-31948(gp)
  83f554:	e0bffa15 	stw	r2,-24(fp)
  83f558:	00001806 	br	83f5bc <ip_reasm_match_frag_with_ire+0xac>
      {
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
  83f55c:	e0bffa17 	ldw	r2,-24(fp)
  83f560:	10c00117 	ldw	r3,4(r2)
  83f564:	e0bffd17 	ldw	r2,-12(fp)
  83f568:	1880111e 	bne	r3,r2,83f5b0 <ip_reasm_match_frag_with_ire+0xa0>
  83f56c:	e0bffa17 	ldw	r2,-24(fp)
  83f570:	10c00217 	ldw	r3,8(r2)
  83f574:	e0bffc17 	ldw	r2,-16(fp)
  83f578:	18800d1e 	bne	r3,r2,83f5b0 <ip_reasm_match_frag_with_ire+0xa0>
  83f57c:	e0bffa17 	ldw	r2,-24(fp)
  83f580:	10800383 	ldbu	r2,14(r2)
  83f584:	10c03fcc 	andi	r3,r2,255
  83f588:	e0bffb83 	ldbu	r2,-18(fp)
  83f58c:	1880081e 	bne	r3,r2,83f5b0 <ip_reasm_match_frag_with_ire+0xa0>
  83f590:	e0bffa17 	ldw	r2,-24(fp)
  83f594:	1080030b 	ldhu	r2,12(r2)
  83f598:	10ffffcc 	andi	r3,r2,65535
  83f59c:	e0bffb0b 	ldhu	r2,-20(fp)
  83f5a0:	1880031e 	bne	r3,r2,83f5b0 <ip_reasm_match_frag_with_ire+0xa0>
          (tmpp->prot == prot) && (tmpp->id == id))
         {
         return tmpp; /* we've found a match */
  83f5a4:	e0bffa17 	ldw	r2,-24(fp)
  83f5a8:	e0bfff15 	stw	r2,-4(fp)
  83f5ac:	00000706 	br	83f5cc <ip_reasm_match_frag_with_ire+0xbc>
   prot = pip->ip_prot;
   id = pip->ip_id;

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  83f5b0:	e0bffa17 	ldw	r2,-24(fp)
  83f5b4:	10800017 	ldw	r2,0(r2)
  83f5b8:	e0bffa15 	stw	r2,-24(fp)
  83f5bc:	e0bffa17 	ldw	r2,-24(fp)
  83f5c0:	1004c03a 	cmpne	r2,r2,zero
  83f5c4:	103fe51e 	bne	r2,zero,83f55c <ip_reasm_match_frag_with_ire+0x4c>
         return tmpp; /* we've found a match */
         }
      }

   /* no match found */
   return NULL;
  83f5c8:	e03fff15 	stw	zero,-4(fp)
  83f5cc:	e0bfff17 	ldw	r2,-4(fp)
}
  83f5d0:	e037883a 	mov	sp,fp
  83f5d4:	df000017 	ldw	fp,0(sp)
  83f5d8:	dec00104 	addi	sp,sp,4
  83f5dc:	f800283a 	ret

0083f5e0 <ip_reasm_determine_type_of_frag>:
OUTPUT: One of the various IP_FRAGTYPE values (IP_CP, IP_FF, IP_MF, 
or IP_LF)
*/

IP_FRAGTYPE ip_reasm_determine_type_of_frag (struct ip * pip)
{
  83f5e0:	defffc04 	addi	sp,sp,-16
  83f5e4:	df000315 	stw	fp,12(sp)
  83f5e8:	df000304 	addi	fp,sp,12
  83f5ec:	e13fff15 	stw	r4,-4(fp)
  u_short mf;
  u_short foff;
  IP_FRAGTYPE rc;

  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
  83f5f0:	e0bfff17 	ldw	r2,-4(fp)
  83f5f4:	1080018b 	ldhu	r2,6(r2)
  83f5f8:	10bfffcc 	andi	r2,r2,65535
  83f5fc:	1004d23a 	srli	r2,r2,8
  83f600:	10bfffcc 	andi	r2,r2,65535
  83f604:	10c03fcc 	andi	r3,r2,255
  83f608:	e0bfff17 	ldw	r2,-4(fp)
  83f60c:	1080018b 	ldhu	r2,6(r2)
  83f610:	10bfffcc 	andi	r2,r2,65535
  83f614:	1004923a 	slli	r2,r2,8
  83f618:	10bfc00c 	andi	r2,r2,65280
  83f61c:	1884b03a 	or	r2,r3,r2
  83f620:	1088000c 	andi	r2,r2,8192
  83f624:	1005d37a 	srai	r2,r2,13
  83f628:	e0bffe8d 	sth	r2,-6(fp)
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);
  83f62c:	e0bfff17 	ldw	r2,-4(fp)
  83f630:	1080018b 	ldhu	r2,6(r2)
  83f634:	10bfffcc 	andi	r2,r2,65535
  83f638:	1004d23a 	srli	r2,r2,8
  83f63c:	10803fcc 	andi	r2,r2,255
  83f640:	1009883a 	mov	r4,r2
  83f644:	e0bfff17 	ldw	r2,-4(fp)
  83f648:	1080018b 	ldhu	r2,6(r2)
  83f64c:	10bfffcc 	andi	r2,r2,65535
  83f650:	1004923a 	slli	r2,r2,8
  83f654:	1007883a 	mov	r3,r2
  83f658:	00bfc004 	movi	r2,-256
  83f65c:	1884703a 	and	r2,r3,r2
  83f660:	2084b03a 	or	r2,r4,r2
  83f664:	1087ffcc 	andi	r2,r2,8191
  83f668:	e0bffe0d 	sth	r2,-8(fp)

  if (mf == 0)
  83f66c:	e0bffe8b 	ldhu	r2,-6(fp)
  83f670:	1004c03a 	cmpne	r2,r2,zero
  83f674:	1000081e 	bne	r2,zero,83f698 <ip_reasm_determine_type_of_frag+0xb8>
     {
     if (foff == 0) {rc = IP_CP;}
  83f678:	e0bffe0b 	ldhu	r2,-8(fp)
  83f67c:	1004c03a 	cmpne	r2,r2,zero
  83f680:	1000021e 	bne	r2,zero,83f68c <ip_reasm_determine_type_of_frag+0xac>
  83f684:	e03ffd15 	stw	zero,-12(fp)
  83f688:	00000b06 	br	83f6b8 <ip_reasm_determine_type_of_frag+0xd8>
     else {rc = IP_LF;}
  83f68c:	00800144 	movi	r2,5
  83f690:	e0bffd15 	stw	r2,-12(fp)
  83f694:	00000806 	br	83f6b8 <ip_reasm_determine_type_of_frag+0xd8>
     }
  else
     {
     if (foff == 0) {rc = IP_FF;}
  83f698:	e0bffe0b 	ldhu	r2,-8(fp)
  83f69c:	1004c03a 	cmpne	r2,r2,zero
  83f6a0:	1000031e 	bne	r2,zero,83f6b0 <ip_reasm_determine_type_of_frag+0xd0>
  83f6a4:	00800044 	movi	r2,1
  83f6a8:	e0bffd15 	stw	r2,-12(fp)
  83f6ac:	00000206 	br	83f6b8 <ip_reasm_determine_type_of_frag+0xd8>
     else {rc = IP_MF;}
  83f6b0:	008000c4 	movi	r2,3
  83f6b4:	e0bffd15 	stw	r2,-12(fp)
     }

  return rc;
  83f6b8:	e0bffd17 	ldw	r2,-12(fp)
}
  83f6bc:	e037883a 	mov	sp,fp
  83f6c0:	df000017 	ldw	fp,0(sp)
  83f6c4:	dec00104 	addi	sp,sp,4
  83f6c8:	f800283a 	ret

0083f6cc <ip_reasm_check_mem_useage>:
OUTPUT: ENP_RESOURCE, if the increment request can't be allowed; 
otherwise it returns IPREASM_OK.
*/

int ip_reasm_check_mem_useage (u_short increment)
{
  83f6cc:	defffd04 	addi	sp,sp,-12
  83f6d0:	df000215 	stw	fp,8(sp)
  83f6d4:	df000204 	addi	fp,sp,8
  83f6d8:	e13ffe0d 	sth	r4,-8(fp)
   /* sanity check */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
  83f6dc:	d0e0cc17 	ldw	r3,-31952(gp)
  83f6e0:	008001b4 	movhi	r2,6
  83f6e4:	10c0072e 	bgeu	r2,r3,83f704 <ip_reasm_check_mem_useage+0x38>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
  83f6e8:	00803934 	movhi	r2,228
  83f6ec:	10a9f604 	addi	r2,r2,-22568
  83f6f0:	10800217 	ldw	r2,8(r2)
  83f6f4:	10c00044 	addi	r3,r2,1
  83f6f8:	00803934 	movhi	r2,228
  83f6fc:	10a9f604 	addi	r2,r2,-22568
  83f700:	10c00215 	stw	r3,8(r2)
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
  83f704:	d0e0cc17 	ldw	r3,-31952(gp)
  83f708:	008001b4 	movhi	r2,6
  83f70c:	18800526 	beq	r3,r2,83f724 <ip_reasm_check_mem_useage+0x58>
  83f710:	e0fffe0b 	ldhu	r3,-8(fp)
  83f714:	d0a0cc17 	ldw	r2,-31952(gp)
  83f718:	1887883a 	add	r3,r3,r2
  83f71c:	008001b4 	movhi	r2,6
  83f720:	10c00a2e 	bgeu	r2,r3,83f74c <ip_reasm_check_mem_useage+0x80>
       (ipr_curr_mem + increment > IP_REASM_MAX_MEM))
   {
      /* return an error indication */
      ++ire_stats.mem_check_fail;
  83f724:	00803934 	movhi	r2,228
  83f728:	10a9f604 	addi	r2,r2,-22568
  83f72c:	10800317 	ldw	r2,12(r2)
  83f730:	10c00044 	addi	r3,r2,1
  83f734:	00803934 	movhi	r2,228
  83f738:	10a9f604 	addi	r2,r2,-22568
  83f73c:	10c00315 	stw	r3,12(r2)
      return ENP_RESOURCE;
  83f740:	00bffa84 	movi	r2,-22
  83f744:	e0bfff15 	stw	r2,-4(fp)
  83f748:	00000106 	br	83f750 <ip_reasm_check_mem_useage+0x84>
   }

   /* memory limits will not be exceeded with this increment */
   return IPREASM_OK;
  83f74c:	e03fff15 	stw	zero,-4(fp)
  83f750:	e0bfff17 	ldw	r2,-4(fp)
}
  83f754:	e037883a 	mov	sp,fp
  83f758:	df000017 	ldw	fp,0(sp)
  83f75c:	dec00104 	addi	sp,sp,4
  83f760:	f800283a 	ret

0083f764 <ip_reasm_incr_mem_useage>:
system exceeding the maximum limit or if the system has already exceeded 
the prespecified limit for memory useage; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
  83f764:	defffd04 	addi	sp,sp,-12
  83f768:	df000215 	stw	fp,8(sp)
  83f76c:	df000204 	addi	fp,sp,8
  83f770:	e13ffe0d 	sth	r4,-8(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
  83f774:	d0e0cc17 	ldw	r3,-31952(gp)
  83f778:	008001b4 	movhi	r2,6
  83f77c:	10c00a2e 	bgeu	r2,r3,83f7a8 <ip_reasm_incr_mem_useage+0x44>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
  83f780:	00803934 	movhi	r2,228
  83f784:	10a9f604 	addi	r2,r2,-22568
  83f788:	10800217 	ldw	r2,8(r2)
  83f78c:	10c00044 	addi	r3,r2,1
  83f790:	00803934 	movhi	r2,228
  83f794:	10a9f604 	addi	r2,r2,-22568
  83f798:	10c00215 	stw	r3,8(r2)
      return ENP_RESOURCE;
  83f79c:	00bffa84 	movi	r2,-22
  83f7a0:	e0bfff15 	stw	r2,-4(fp)
  83f7a4:	00001406 	br	83f7f8 <ip_reasm_incr_mem_useage+0x94>
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
  83f7a8:	e0fffe0b 	ldhu	r3,-8(fp)
  83f7ac:	d0a0cc17 	ldw	r2,-31952(gp)
  83f7b0:	1887883a 	add	r3,r3,r2
  83f7b4:	008001b4 	movhi	r2,6
  83f7b8:	10c00a2e 	bgeu	r2,r3,83f7e4 <ip_reasm_incr_mem_useage+0x80>
   {
      /* this should never happen since caller should have 
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
  83f7bc:	00803934 	movhi	r2,228
  83f7c0:	10a9f604 	addi	r2,r2,-22568
  83f7c4:	10800417 	ldw	r2,16(r2)
  83f7c8:	10c00044 	addi	r3,r2,1
  83f7cc:	00803934 	movhi	r2,228
  83f7d0:	10a9f604 	addi	r2,r2,-22568
  83f7d4:	10c00415 	stw	r3,16(r2)
      return ENP_RESOURCE;
  83f7d8:	00bffa84 	movi	r2,-22
  83f7dc:	e0bfff15 	stw	r2,-4(fp)
  83f7e0:	00000506 	br	83f7f8 <ip_reasm_incr_mem_useage+0x94>
   }

   ipr_curr_mem += increment;
  83f7e4:	e0bffe0b 	ldhu	r2,-8(fp)
  83f7e8:	d0e0cc17 	ldw	r3,-31952(gp)
  83f7ec:	10c5883a 	add	r2,r2,r3
  83f7f0:	d0a0cc15 	stw	r2,-31952(gp)

   /* successfully incremented memory useage counter */
   return IPREASM_OK;
  83f7f4:	e03fff15 	stw	zero,-4(fp)
  83f7f8:	e0bfff17 	ldw	r2,-4(fp)
}
  83f7fc:	e037883a 	mov	sp,fp
  83f800:	df000017 	ldw	fp,0(sp)
  83f804:	dec00104 	addi	sp,sp,4
  83f808:	f800283a 	ret

0083f80c <ip_reasm_decr_mem_useage>:
exceeded the prespecified limit for memory useage; otherwise, it returns 
IPREASM_OK.
*/

int ip_reasm_decr_mem_useage (u_short decrement)
{
  83f80c:	defffd04 	addi	sp,sp,-12
  83f810:	df000215 	stw	fp,8(sp)
  83f814:	df000204 	addi	fp,sp,8
  83f818:	e13ffe0d 	sth	r4,-8(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
  83f81c:	d0e0cc17 	ldw	r3,-31952(gp)
  83f820:	008001b4 	movhi	r2,6
  83f824:	10c00a2e 	bgeu	r2,r3,83f850 <ip_reasm_decr_mem_useage+0x44>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
  83f828:	00803934 	movhi	r2,228
  83f82c:	10a9f604 	addi	r2,r2,-22568
  83f830:	10800217 	ldw	r2,8(r2)
  83f834:	10c00044 	addi	r3,r2,1
  83f838:	00803934 	movhi	r2,228
  83f83c:	10a9f604 	addi	r2,r2,-22568
  83f840:	10c00215 	stw	r3,8(r2)
      return ENP_RESOURCE;
  83f844:	00bffa84 	movi	r2,-22
  83f848:	e0bfff15 	stw	r2,-4(fp)
  83f84c:	00001206 	br	83f898 <ip_reasm_decr_mem_useage+0x8c>
   }
   if (ipr_curr_mem < decrement)
  83f850:	e0fffe0b 	ldhu	r3,-8(fp)
  83f854:	d0a0cc17 	ldw	r2,-31952(gp)
  83f858:	10c00a2e 	bgeu	r2,r3,83f884 <ip_reasm_decr_mem_useage+0x78>
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
  83f85c:	00803934 	movhi	r2,228
  83f860:	10a9f604 	addi	r2,r2,-22568
  83f864:	10800517 	ldw	r2,20(r2)
  83f868:	10c00044 	addi	r3,r2,1
  83f86c:	00803934 	movhi	r2,228
  83f870:	10a9f604 	addi	r2,r2,-22568
  83f874:	10c00515 	stw	r3,20(r2)
      return ENP_RESOURCE;
  83f878:	00bffa84 	movi	r2,-22
  83f87c:	e0bfff15 	stw	r2,-4(fp)
  83f880:	00000506 	br	83f898 <ip_reasm_decr_mem_useage+0x8c>
   }

   ipr_curr_mem -= decrement;
  83f884:	d0a0cc17 	ldw	r2,-31952(gp)
  83f888:	e0fffe0b 	ldhu	r3,-8(fp)
  83f88c:	10c5c83a 	sub	r2,r2,r3
  83f890:	d0a0cc15 	stw	r2,-31952(gp)

   /* successfully decremented memory useage counter */
   return IPREASM_OK;
  83f894:	e03fff15 	stw	zero,-4(fp)
  83f898:	e0bfff17 	ldw	r2,-4(fp)
}
  83f89c:	e037883a 	mov	sp,fp
  83f8a0:	df000017 	ldw	fp,0(sp)
  83f8a4:	dec00104 	addi	sp,sp,4
  83f8a8:	f800283a 	ret

0083f8ac <ip_reasm_process_first_fragment>:
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
  83f8ac:	defff604 	addi	sp,sp,-40
  83f8b0:	dfc00915 	stw	ra,36(sp)
  83f8b4:	df000815 	stw	fp,32(sp)
  83f8b8:	df000804 	addi	fp,sp,32
  83f8bc:	e13ffe15 	stw	r4,-8(fp)
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
  83f8c0:	e0bffe17 	ldw	r2,-8(fp)
  83f8c4:	10800217 	ldw	r2,8(r2)
  83f8c8:	10802204 	addi	r2,r2,136
  83f8cc:	113fffcc 	andi	r4,r2,65535
  83f8d0:	083f6cc0 	call	83f6cc <ip_reasm_check_mem_useage>
  83f8d4:	e0bff815 	stw	r2,-32(fp)
  83f8d8:	e0bff817 	ldw	r2,-32(fp)
  83f8dc:	1005003a 	cmpeq	r2,r2,zero
  83f8e0:	1000101e 	bne	r2,zero,83f924 <ip_reasm_process_first_fragment+0x78>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
  83f8e4:	01000084 	movi	r4,2
  83f8e8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free (p);
  83f8ec:	e13ffe17 	ldw	r4,-8(fp)
  83f8f0:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
  83f8f4:	01000084 	movi	r4,2
  83f8f8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
  83f8fc:	00803934 	movhi	r2,228
  83f900:	10a9e204 	addi	r2,r2,-22648
  83f904:	10800f17 	ldw	r2,60(r2)
  83f908:	10c00044 	addi	r3,r2,1
  83f90c:	00803934 	movhi	r2,228
  83f910:	10a9e204 	addi	r2,r2,-22648
  83f914:	10c00f15 	stw	r3,60(r2)
      return rc;
  83f918:	e0bff817 	ldw	r2,-32(fp)
  83f91c:	e0bfff15 	stw	r2,-4(fp)
  83f920:	00009406 	br	83fb74 <ip_reasm_process_first_fragment+0x2c8>
   }

   /* we are ok wrt memory limits; since this is the first fragment, we need 
    * to create an IRE entry */
   irep = (IREP) IPR_ALLOC(sizeof(IRE));
  83f924:	01002204 	movi	r4,136
  83f928:	082b20c0 	call	82b20c <npalloc>
  83f92c:	e0bffc15 	stw	r2,-16(fp)
   if (irep == 0) 
  83f930:	e0bffc17 	ldw	r2,-16(fp)
  83f934:	1004c03a 	cmpne	r2,r2,zero
  83f938:	1000101e 	bne	r2,zero,83f97c <ip_reasm_process_first_fragment+0xd0>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
  83f93c:	01000084 	movi	r4,2
  83f940:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free (p);
  83f944:	e13ffe17 	ldw	r4,-8(fp)
  83f948:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
  83f94c:	01000084 	movi	r4,2
  83f950:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
  83f954:	00803934 	movhi	r2,228
  83f958:	10a9e204 	addi	r2,r2,-22648
  83f95c:	10800f17 	ldw	r2,60(r2)
  83f960:	10c00044 	addi	r3,r2,1
  83f964:	00803934 	movhi	r2,228
  83f968:	10a9e204 	addi	r2,r2,-22648
  83f96c:	10c00f15 	stw	r3,60(r2)
      return ENP_RESOURCE;
  83f970:	00bffa84 	movi	r2,-22
  83f974:	e0bfff15 	stw	r2,-4(fp)
  83f978:	00007e06 	br	83fb74 <ip_reasm_process_first_fragment+0x2c8>
   }

   pip = ip_head(p);
  83f97c:	e0bffe17 	ldw	r2,-8(fp)
  83f980:	10800317 	ldw	r2,12(r2)
  83f984:	e0bffd15 	stw	r2,-12(fp)
   iphlen = ip_hlen(pip);
  83f988:	e0bffd17 	ldw	r2,-12(fp)
  83f98c:	10800003 	ldbu	r2,0(r2)
  83f990:	108003cc 	andi	r2,r2,15
  83f994:	1085883a 	add	r2,r2,r2
  83f998:	1085883a 	add	r2,r2,r2
  83f99c:	e0bffa05 	stb	r2,-24(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
  83f9a0:	e13ffd17 	ldw	r4,-12(fp)
  83f9a4:	083f5e00 	call	83f5e0 <ip_reasm_determine_type_of_frag>
  83f9a8:	e0bffb15 	stw	r2,-20(fp)
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
  83f9ac:	e0bffd17 	ldw	r2,-12(fp)
  83f9b0:	1080018b 	ldhu	r2,6(r2)
  83f9b4:	10bfffcc 	andi	r2,r2,65535
  83f9b8:	1004d23a 	srli	r2,r2,8
  83f9bc:	10803fcc 	andi	r2,r2,255
  83f9c0:	1009883a 	mov	r4,r2
  83f9c4:	e0bffd17 	ldw	r2,-12(fp)
  83f9c8:	1080018b 	ldhu	r2,6(r2)
  83f9cc:	10bfffcc 	andi	r2,r2,65535
  83f9d0:	1004923a 	slli	r2,r2,8
  83f9d4:	1007883a 	mov	r3,r2
  83f9d8:	00bfc004 	movi	r2,-256
  83f9dc:	1884703a 	and	r2,r3,r2
  83f9e0:	2084b03a 	or	r2,r4,r2
  83f9e4:	1087ffcc 	andi	r2,r2,8191
  83f9e8:	100490fa 	slli	r2,r2,3
  83f9ec:	e0bff98d 	sth	r2,-26(fp)
   total_len = ntohs(pip->ip_len);
  83f9f0:	e0bffd17 	ldw	r2,-12(fp)
  83f9f4:	1080008b 	ldhu	r2,2(r2)
  83f9f8:	10bfffcc 	andi	r2,r2,65535
  83f9fc:	1004d23a 	srli	r2,r2,8
  83fa00:	10803fcc 	andi	r2,r2,255
  83fa04:	1009883a 	mov	r4,r2
  83fa08:	e0bffd17 	ldw	r2,-12(fp)
  83fa0c:	1080008b 	ldhu	r2,2(r2)
  83fa10:	10bfffcc 	andi	r2,r2,65535
  83fa14:	1004923a 	slli	r2,r2,8
  83fa18:	1007883a 	mov	r3,r2
  83fa1c:	00bfc004 	movi	r2,-256
  83fa20:	1884703a 	and	r2,r3,r2
  83fa24:	2084b03a 	or	r2,r4,r2
  83fa28:	e0bff90d 	sth	r2,-28(fp)

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
  83fa2c:	e0bffd17 	ldw	r2,-12(fp)
  83fa30:	10c00317 	ldw	r3,12(r2)
  83fa34:	e0bffc17 	ldw	r2,-16(fp)
  83fa38:	10c00115 	stw	r3,4(r2)
   irep->dest = pip->ip_dest;
  83fa3c:	e0bffd17 	ldw	r2,-12(fp)
  83fa40:	10c00417 	ldw	r3,16(r2)
  83fa44:	e0bffc17 	ldw	r2,-16(fp)
  83fa48:	10c00215 	stw	r3,8(r2)
   irep->prot = pip->ip_prot;
  83fa4c:	e0bffd17 	ldw	r2,-12(fp)
  83fa50:	10c00243 	ldbu	r3,9(r2)
  83fa54:	e0bffc17 	ldw	r2,-16(fp)
  83fa58:	10c00385 	stb	r3,14(r2)
   irep->id = pip->ip_id;
  83fa5c:	e0bffd17 	ldw	r2,-12(fp)
  83fa60:	10c0010b 	ldhu	r3,4(r2)
  83fa64:	e0bffc17 	ldw	r2,-16(fp)
  83fa68:	10c0030d 	sth	r3,12(r2)
   if (ftype == IP_LF)
  83fa6c:	e0bffb17 	ldw	r2,-20(fp)
  83fa70:	10800158 	cmpnei	r2,r2,5
  83fa74:	10000a1e 	bne	r2,zero,83faa0 <ip_reasm_process_first_fragment+0x1f4>
      {
      irep->length = frag_offset + (total_len - iphlen);
  83fa78:	e0fffa03 	ldbu	r3,-24(fp)
  83fa7c:	e0bff90b 	ldhu	r2,-28(fp)
  83fa80:	10c5c83a 	sub	r2,r2,r3
  83fa84:	1007883a 	mov	r3,r2
  83fa88:	e0bff98b 	ldhu	r2,-26(fp)
  83fa8c:	1885883a 	add	r2,r3,r2
  83fa90:	1007883a 	mov	r3,r2
  83fa94:	e0bffc17 	ldw	r2,-16(fp)
  83fa98:	10c0040d 	sth	r3,16(r2)
  83fa9c:	00000a06 	br	83fac8 <ip_reasm_process_first_fragment+0x21c>
      }
   else if (ftype == IP_FF)
  83faa0:	e0bffb17 	ldw	r2,-20(fp)
  83faa4:	10800058 	cmpnei	r2,r2,1
  83faa8:	1000071e 	bne	r2,zero,83fac8 <ip_reasm_process_first_fragment+0x21c>
       * out, and results in the transmission of an ICMP Time Exceeded message (with the
       * code set to "fragment reassembly time exceeded").  Please note that the 'l2_hdr' 
       * as set below may not be the start address for the L2 header (but it is adequate 
       * for our use).  If the FF is never received, these fields stay at their initial
       * value of 0. */
      irep->l2_hdr = p->nb_buff;
  83faac:	e0bffe17 	ldw	r2,-8(fp)
  83fab0:	10c00117 	ldw	r3,4(r2)
  83fab4:	e0bffc17 	ldw	r2,-16(fp)
  83fab8:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
  83fabc:	e0fffd17 	ldw	r3,-12(fp)
  83fac0:	e0bffc17 	ldw	r2,-16(fp)
  83fac4:	10c02015 	stw	r3,128(r2)
      }

   /* note that the 'rcvd' and 'length' counters only keep track of the data part of 
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
  83fac8:	e0fffa03 	ldbu	r3,-24(fp)
  83facc:	e0bff90b 	ldhu	r2,-28(fp)
  83fad0:	10c5c83a 	sub	r2,r2,r3
  83fad4:	1007883a 	mov	r3,r2
  83fad8:	e0bffc17 	ldw	r2,-16(fp)
  83fadc:	10c0048d 	sth	r3,18(r2)
   irep->age = 0;
  83fae0:	e0bffc17 	ldw	r2,-16(fp)
  83fae4:	10000515 	stw	zero,20(r2)

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;
  83fae8:	e0bffc17 	ldw	r2,-16(fp)
  83faec:	10802103 	ldbu	r2,132(r2)
  83faf0:	10800054 	ori	r2,r2,1
  83faf4:	1007883a 	mov	r3,r2
  83faf8:	e0bffc17 	ldw	r2,-16(fp)
  83fafc:	10c02105 	stb	r3,132(r2)

   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
  83fb00:	e0fffc17 	ldw	r3,-16(fp)
  83fb04:	e0bffe17 	ldw	r2,-8(fp)
  83fb08:	18800715 	stw	r2,28(r3)
   irep->rfq.frag_offset[0] = frag_offset;
  83fb0c:	e0fffc17 	ldw	r3,-16(fp)
  83fb10:	e0bff98b 	ldhu	r2,-26(fp)
  83fb14:	1880170d 	sth	r2,92(r3)
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
  83fb18:	e0bffe17 	ldw	r2,-8(fp)
  83fb1c:	10c00317 	ldw	r3,12(r2)
  83fb20:	e0bffa03 	ldbu	r2,-24(fp)
  83fb24:	1887883a 	add	r3,r3,r2
  83fb28:	e0bffe17 	ldw	r2,-8(fp)
  83fb2c:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
  83fb30:	e0bffe17 	ldw	r2,-8(fp)
  83fb34:	10c00417 	ldw	r3,16(r2)
  83fb38:	e0bffa03 	ldbu	r2,-24(fp)
  83fb3c:	1887c83a 	sub	r3,r3,r2
  83fb40:	e0bffe17 	ldw	r2,-8(fp)
  83fb44:	10c00415 	stw	r3,16(r2)

   /* insert at start of global IRE list */
   irep->next = h_ireq;
  83fb48:	d0e0cd17 	ldw	r3,-31948(gp)
  83fb4c:	e0bffc17 	ldw	r2,-16(fp)
  83fb50:	10c00015 	stw	r3,0(r2)
   h_ireq = irep;
  83fb54:	e0bffc17 	ldw	r2,-16(fp)
  83fb58:	d0a0cd15 	stw	r2,-31948(gp)

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
  83fb5c:	e0bffe17 	ldw	r2,-8(fp)
  83fb60:	10800217 	ldw	r2,8(r2)
  83fb64:	10802204 	addi	r2,r2,136
  83fb68:	113fffcc 	andi	r4,r2,65535
  83fb6c:	083f7640 	call	83f764 <ip_reasm_incr_mem_useage>

   return IPREASM_OK;
  83fb70:	e03fff15 	stw	zero,-4(fp)
  83fb74:	e0bfff17 	ldw	r2,-4(fp)
}
  83fb78:	e037883a 	mov	sp,fp
  83fb7c:	dfc00117 	ldw	ra,4(sp)
  83fb80:	df000017 	ldw	fp,0(sp)
  83fb84:	dec00204 	addi	sp,sp,8
  83fb88:	f800283a 	ret

0083fb8c <ip_reassm>:
merely passes their return code back to its caller.  Otherwise, it returns
IPREASM_OK indicating that the fragment was successfully processed.
*/

int ip_reassm (PACKET p)
{
  83fb8c:	defff804 	addi	sp,sp,-32
  83fb90:	dfc00715 	stw	ra,28(sp)
  83fb94:	df000615 	stw	fp,24(sp)
  83fb98:	df000604 	addi	fp,sp,24
  83fb9c:	e13ffe15 	stw	r4,-8(fp)
   IREP irep;
   struct ip * pip;
   int rc1, rc2;

   pip = ip_head(p);
  83fba0:	e0bffe17 	ldw	r2,-8(fp)
  83fba4:	10800317 	ldw	r2,12(r2)
  83fba8:	e0bffc15 	stw	r2,-16(fp)

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);
  83fbac:	e13ffc17 	ldw	r4,-16(fp)
  83fbb0:	083f5100 	call	83f510 <ip_reasm_match_frag_with_ire>
  83fbb4:	e0bffd15 	stw	r2,-12(fp)

   if (!irep)
  83fbb8:	e0bffd17 	ldw	r2,-12(fp)
  83fbbc:	1004c03a 	cmpne	r2,r2,zero
  83fbc0:	1000091e 	bne	r2,zero,83fbe8 <ip_reassm+0x5c>
   {
      /* this is the first packet for a "new" fragment stream */
      if ((rc1 = ip_reasm_process_first_fragment (p)) != IPREASM_OK)
  83fbc4:	e13ffe17 	ldw	r4,-8(fp)
  83fbc8:	083f8ac0 	call	83f8ac <ip_reasm_process_first_fragment>
  83fbcc:	e0bffb15 	stw	r2,-20(fp)
  83fbd0:	e0bffb17 	ldw	r2,-20(fp)
  83fbd4:	1005003a 	cmpeq	r2,r2,zero
  83fbd8:	10000d1e 	bne	r2,zero,83fc10 <ip_reassm+0x84>
      {
         /* ip_reasm_process_first_fragment () will free the packet */
         return rc1;
  83fbdc:	e0bffb17 	ldw	r2,-20(fp)
  83fbe0:	e0bfff15 	stw	r2,-4(fp)
  83fbe4:	00000b06 	br	83fc14 <ip_reassm+0x88>
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
  83fbe8:	e13ffe17 	ldw	r4,-8(fp)
  83fbec:	e17ffd17 	ldw	r5,-12(fp)
  83fbf0:	08401bc0 	call	8401bc <ip_reasm_process_subsequent_fragments>
  83fbf4:	e0bffa15 	stw	r2,-24(fp)
  83fbf8:	e0bffa17 	ldw	r2,-24(fp)
  83fbfc:	1005003a 	cmpeq	r2,r2,zero
  83fc00:	1000031e 	bne	r2,zero,83fc10 <ip_reassm+0x84>
      {
         /* ip_reasm_process_subsequent_fragments () has already deleted the IRE entry */
         return rc2;
  83fc04:	e0bffa17 	ldw	r2,-24(fp)
  83fc08:	e0bfff15 	stw	r2,-4(fp)
  83fc0c:	00000106 	br	83fc14 <ip_reassm+0x88>
      }
   }

   return IPREASM_OK;
  83fc10:	e03fff15 	stw	zero,-4(fp)
  83fc14:	e0bfff17 	ldw	r2,-4(fp)
}
  83fc18:	e037883a 	mov	sp,fp
  83fc1c:	dfc00117 	ldw	ra,4(sp)
  83fc20:	df000017 	ldw	fp,0(sp)
  83fc24:	dec00204 	addi	sp,sp,8
  83fc28:	f800283a 	ret

0083fc2c <ip_reasm_compute_overlap>:
            (i.e., contains "unique" data).
*/

IPREASM_RC ip_reasm_compute_overlap (PACKET p, IREP irep, u_short * indexp, 
 RFQP * last_rfqpp, u_short * frag_offsetp, u_char * hole_createdp)
{
  83fc2c:	defff204 	addi	sp,sp,-56
  83fc30:	dfc00d15 	stw	ra,52(sp)
  83fc34:	df000c15 	stw	fp,48(sp)
  83fc38:	df000c04 	addi	fp,sp,48
  83fc3c:	e13ffb15 	stw	r4,-20(fp)
  83fc40:	e17ffc15 	stw	r5,-16(fp)
  83fc44:	e1bffd15 	stw	r6,-12(fp)
  83fc48:	e1fffe15 	stw	r7,-8(fp)
   u_short currend;
   u_short drop_len;
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
  83fc4c:	e13ffc17 	ldw	r4,-16(fp)
  83fc50:	08407500 	call	840750 <ip_reasm_find_ire>
  83fc54:	10803fcc 	andi	r2,r2,255
  83fc58:	10800060 	cmpeqi	r2,r2,1
  83fc5c:	1000101e 	bne	r2,zero,83fca0 <ip_reasm_compute_overlap+0x74>
      {
      ++ire_stats.bad_irep;
  83fc60:	00803934 	movhi	r2,228
  83fc64:	10a9f604 	addi	r2,r2,-22568
  83fc68:	10800017 	ldw	r2,0(r2)
  83fc6c:	10c00044 	addi	r3,r2,1
  83fc70:	00803934 	movhi	r2,228
  83fc74:	10a9f604 	addi	r2,r2,-22568
  83fc78:	10c00015 	stw	r3,0(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
  83fc7c:	01000084 	movi	r4,2
  83fc80:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free (p);
  83fc84:	e13ffb17 	ldw	r4,-20(fp)
  83fc88:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
  83fc8c:	01000084 	movi	r4,2
  83fc90:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return IPREASM_DROP_FRAG_BAD_PARAM;
  83fc94:	00800044 	movi	r2,1
  83fc98:	e0bfff15 	stw	r2,-4(fp)
  83fc9c:	00014106 	br	8401a4 <ip_reasm_compute_overlap+0x578>
      }

   jrip = ip_head(p);
  83fca0:	e0bffb17 	ldw	r2,-20(fp)
  83fca4:	10800317 	ldw	r2,12(r2)
  83fca8:	e0bff815 	stw	r2,-32(fp)
   iphlen = ip_hlen (jrip);
  83fcac:	e0bff817 	ldw	r2,-32(fp)
  83fcb0:	10800003 	ldbu	r2,0(r2)
  83fcb4:	108003cc 	andi	r2,r2,15
  83fcb8:	1085883a 	add	r2,r2,r2
  83fcbc:	1085883a 	add	r2,r2,r2
  83fcc0:	e0bff485 	stb	r2,-46(fp)
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
  83fcc4:	e0bff817 	ldw	r2,-32(fp)
  83fcc8:	1080018b 	ldhu	r2,6(r2)
  83fccc:	10bfffcc 	andi	r2,r2,65535
  83fcd0:	1004d23a 	srli	r2,r2,8
  83fcd4:	10803fcc 	andi	r2,r2,255
  83fcd8:	1009883a 	mov	r4,r2
  83fcdc:	e0bff817 	ldw	r2,-32(fp)
  83fce0:	1080018b 	ldhu	r2,6(r2)
  83fce4:	10bfffcc 	andi	r2,r2,65535
  83fce8:	1004923a 	slli	r2,r2,8
  83fcec:	1007883a 	mov	r3,r2
  83fcf0:	00bfc004 	movi	r2,-256
  83fcf4:	1884703a 	and	r2,r3,r2
  83fcf8:	2084b03a 	or	r2,r4,r2
  83fcfc:	1087ffcc 	andi	r2,r2,8191
  83fd00:	100490fa 	slli	r2,r2,3
  83fd04:	e0bff70d 	sth	r2,-36(fp)
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
  83fd08:	e0bff817 	ldw	r2,-32(fp)
  83fd0c:	1080008b 	ldhu	r2,2(r2)
  83fd10:	10bfffcc 	andi	r2,r2,65535
  83fd14:	1004d23a 	srli	r2,r2,8
  83fd18:	10803fcc 	andi	r2,r2,255
  83fd1c:	1009883a 	mov	r4,r2
  83fd20:	e0bff817 	ldw	r2,-32(fp)
  83fd24:	1080008b 	ldhu	r2,2(r2)
  83fd28:	10bfffcc 	andi	r2,r2,65535
  83fd2c:	1004923a 	slli	r2,r2,8
  83fd30:	1007883a 	mov	r3,r2
  83fd34:	00bfc004 	movi	r2,-256
  83fd38:	1884703a 	and	r2,r3,r2
  83fd3c:	2084b03a 	or	r2,r4,r2
  83fd40:	1007883a 	mov	r3,r2
  83fd44:	e0bff483 	ldbu	r2,-46(fp)
  83fd48:	1885c83a 	sub	r2,r3,r2
  83fd4c:	1007883a 	mov	r3,r2
  83fd50:	e0bff70b 	ldhu	r2,-36(fp)
  83fd54:	1885883a 	add	r2,r3,r2
  83fd58:	10bfffc4 	addi	r2,r2,-1
  83fd5c:	e0bff68d 	sth	r2,-38(fp)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
  83fd60:	e0bffb17 	ldw	r2,-20(fp)
  83fd64:	10c00317 	ldw	r3,12(r2)
  83fd68:	e0bff483 	ldbu	r2,-46(fp)
  83fd6c:	1887883a 	add	r3,r3,r2
  83fd70:	e0bffb17 	ldw	r2,-20(fp)
  83fd74:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
  83fd78:	e0bffb17 	ldw	r2,-20(fp)
  83fd7c:	10c00417 	ldw	r3,16(r2)
  83fd80:	e0bff483 	ldbu	r2,-46(fp)
  83fd84:	1887c83a 	sub	r3,r3,r2
  83fd88:	e0bffb17 	ldw	r2,-20(fp)
  83fd8c:	10c00415 	stw	r3,16(r2)

   *frag_offsetp = jrstart;
  83fd90:	e0c00217 	ldw	r3,8(fp)
  83fd94:	e0bff70b 	ldhu	r2,-36(fp)
  83fd98:	1880000d 	sth	r2,0(r3)
   *indexp = INVALID_FRAG_INDEX;
  83fd9c:	e0fffd17 	ldw	r3,-12(fp)
  83fda0:	00800404 	movi	r2,16
  83fda4:	1880000d 	sth	r2,0(r3)
   *last_rfqpp = 0;
  83fda8:	e0bffe17 	ldw	r2,-8(fp)
  83fdac:	10000015 	stw	zero,0(r2)
   *hole_createdp = IPREASM_FALSE;
  83fdb0:	e0800317 	ldw	r2,12(fp)
  83fdb4:	10000005 	stb	zero,0(r2)

   rfqp = &(irep->rfq);
  83fdb8:	e0bffc17 	ldw	r2,-16(fp)
  83fdbc:	10800604 	addi	r2,r2,24
  83fdc0:	e0bffa15 	stw	r2,-24(fp)

   while (rfqp)
  83fdc4:	0000ef06 	br	840184 <ip_reasm_compute_overlap+0x558>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  83fdc8:	e03ff40d 	sth	zero,-48(fp)
  83fdcc:	0000df06 	br	84014c <ip_reasm_compute_overlap+0x520>
         {
         if ((currpkt = rfqp->bufp[i]) != 0)
  83fdd0:	e0bff40b 	ldhu	r2,-48(fp)
  83fdd4:	e0fffa17 	ldw	r3,-24(fp)
  83fdd8:	1085883a 	add	r2,r2,r2
  83fddc:	1085883a 	add	r2,r2,r2
  83fde0:	10c5883a 	add	r2,r2,r3
  83fde4:	10800104 	addi	r2,r2,4
  83fde8:	10800017 	ldw	r2,0(r2)
  83fdec:	e0bff915 	stw	r2,-28(fp)
  83fdf0:	e0bff917 	ldw	r2,-28(fp)
  83fdf4:	1005003a 	cmpeq	r2,r2,zero
  83fdf8:	1000bf1e 	bne	r2,zero,8400f8 <ip_reasm_compute_overlap+0x4cc>
            {
            currstart = rfqp->frag_offset[i];
  83fdfc:	e0bff40b 	ldhu	r2,-48(fp)
  83fe00:	e0fffa17 	ldw	r3,-24(fp)
  83fe04:	1085883a 	add	r2,r2,r2
  83fe08:	10c5883a 	add	r2,r2,r3
  83fe0c:	10801104 	addi	r2,r2,68
  83fe10:	1080000b 	ldhu	r2,0(r2)
  83fe14:	e0bff60d 	sth	r2,-40(fp)
            currend = currstart + currpkt->nb_plen - 1;
  83fe18:	e0bff917 	ldw	r2,-28(fp)
  83fe1c:	10800417 	ldw	r2,16(r2)
  83fe20:	1007883a 	mov	r3,r2
  83fe24:	e0bff60b 	ldhu	r2,-40(fp)
  83fe28:	1885883a 	add	r2,r3,r2
  83fe2c:	10bfffc4 	addi	r2,r2,-1
  83fe30:	e0bff58d 	sth	r2,-42(fp)

            if (currstart < jrstart)
  83fe34:	e0fff60b 	ldhu	r3,-40(fp)
  83fe38:	e0bff70b 	ldhu	r2,-36(fp)
  83fe3c:	18802b2e 	bgeu	r3,r2,83feec <ip_reasm_compute_overlap+0x2c0>
               {
               if (currend < jrend) /* cases A1 and A2 */
  83fe40:	e0fff58b 	ldhu	r3,-42(fp)
  83fe44:	e0bff68b 	ldhu	r2,-38(fp)
  83fe48:	1880202e 	bgeu	r3,r2,83fecc <ip_reasm_compute_overlap+0x2a0>
                  {
                  if (currend < jrstart) /* A1 */
  83fe4c:	e0fff58b 	ldhu	r3,-42(fp)
  83fe50:	e0bff70b 	ldhu	r2,-36(fp)
  83fe54:	1880ba36 	bltu	r3,r2,840140 <ip_reasm_compute_overlap+0x514>
                     {
                     /* the just received fragment partially overlaps current 
                      * fragment on the latter's right; increment start 
                      * pointer and decrement length of just received fragment.
                      * Move on to the next fragment in the RFQ. */
                     drop_len = (currend - jrstart) + 1;
  83fe58:	e0fff58b 	ldhu	r3,-42(fp)
  83fe5c:	e0bff70b 	ldhu	r2,-36(fp)
  83fe60:	1885c83a 	sub	r2,r3,r2
  83fe64:	10800044 	addi	r2,r2,1
  83fe68:	e0bff50d 	sth	r2,-44(fp)
                     p->nb_prot += drop_len;
  83fe6c:	e0bffb17 	ldw	r2,-20(fp)
  83fe70:	10c00317 	ldw	r3,12(r2)
  83fe74:	e0bff50b 	ldhu	r2,-44(fp)
  83fe78:	1887883a 	add	r3,r3,r2
  83fe7c:	e0bffb17 	ldw	r2,-20(fp)
  83fe80:	10c00315 	stw	r3,12(r2)
                     p->nb_plen -= drop_len;
  83fe84:	e0bffb17 	ldw	r2,-20(fp)
  83fe88:	10c00417 	ldw	r3,16(r2)
  83fe8c:	e0bff50b 	ldhu	r2,-44(fp)
  83fe90:	1887c83a 	sub	r3,r3,r2
  83fe94:	e0bffb17 	ldw	r2,-20(fp)
  83fe98:	10c00415 	stw	r3,16(r2)
                     jrstart += drop_len;
  83fe9c:	e0fff70b 	ldhu	r3,-36(fp)
  83fea0:	e0bff50b 	ldhu	r2,-44(fp)
  83fea4:	1885883a 	add	r2,r3,r2
  83fea8:	e0bff70d 	sth	r2,-36(fp)
                     jrend = jrstart + p->nb_plen - 1;
  83feac:	e0bffb17 	ldw	r2,-20(fp)
  83feb0:	10800417 	ldw	r2,16(r2)
  83feb4:	1007883a 	mov	r3,r2
  83feb8:	e0bff70b 	ldhu	r2,-36(fp)
  83febc:	1885883a 	add	r2,r3,r2
  83fec0:	10bfffc4 	addi	r2,r2,-1
  83fec4:	e0bff68d 	sth	r2,-38(fp)
  83fec8:	00009d06 	br	840140 <ip_reasm_compute_overlap+0x514>
               else
                  {
                  /* currend is greater than or equal to jrend (cases E1 and E2).
                   * The current fragment is a superset of the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
  83fecc:	01000084 	movi	r4,2
  83fed0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
                  pk_free (p);
  83fed4:	e13ffb17 	ldw	r4,-20(fp)
  83fed8:	0829f180 	call	829f18 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
  83fedc:	01000084 	movi	r4,2
  83fee0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
  83fee4:	e03fff15 	stw	zero,-4(fp)
  83fee8:	0000ae06 	br	8401a4 <ip_reasm_compute_overlap+0x578>
                  }
               }
            else if (currstart > jrstart)
  83feec:	e0fff60b 	ldhu	r3,-40(fp)
  83fef0:	e0bff70b 	ldhu	r2,-36(fp)
  83fef4:	10c04d2e 	bgeu	r2,r3,84002c <ip_reasm_compute_overlap+0x400>
               {
               if (currend > jrend) /* cases B1 and B2 */
  83fef8:	e0fff58b 	ldhu	r3,-42(fp)
  83fefc:	e0bff68b 	ldhu	r2,-38(fp)
  83ff00:	10c0112e 	bgeu	r2,r3,83ff48 <ip_reasm_compute_overlap+0x31c>
                  {
                  if (currstart > jrend) /* B1 */
  83ff04:	e0fff60b 	ldhu	r3,-40(fp)
  83ff08:	e0bff68b 	ldhu	r2,-38(fp)
  83ff0c:	10c08c36 	bltu	r2,r3,840140 <ip_reasm_compute_overlap+0x514>
                     {
                     /* just received fragment partially overlaps current 
                      * fragment on the latter's left; decrement length of 
                      * just received fragment.  Move on to the next fragment 
                      * in the RFQ. */
                     p->nb_plen = currstart - jrstart;
  83ff10:	e0fff60b 	ldhu	r3,-40(fp)
  83ff14:	e0bff70b 	ldhu	r2,-36(fp)
  83ff18:	1885c83a 	sub	r2,r3,r2
  83ff1c:	1007883a 	mov	r3,r2
  83ff20:	e0bffb17 	ldw	r2,-20(fp)
  83ff24:	10c00415 	stw	r3,16(r2)
                     /* start offset remains unchanged, but jrend must be updated */
                     jrend = jrstart + p->nb_plen - 1;
  83ff28:	e0bffb17 	ldw	r2,-20(fp)
  83ff2c:	10800417 	ldw	r2,16(r2)
  83ff30:	1007883a 	mov	r3,r2
  83ff34:	e0bff70b 	ldhu	r2,-36(fp)
  83ff38:	1885883a 	add	r2,r3,r2
  83ff3c:	10bfffc4 	addi	r2,r2,-1
  83ff40:	e0bff68d 	sth	r2,-38(fp)
  83ff44:	00007e06 	br	840140 <ip_reasm_compute_overlap+0x514>
                     }
                  }
               else if (currend == jrend) /* F1 */
  83ff48:	e0fff58b 	ldhu	r3,-42(fp)
  83ff4c:	e0bff68b 	ldhu	r2,-38(fp)
  83ff50:	18800e1e 	bne	r3,r2,83ff8c <ip_reasm_compute_overlap+0x360>
                  {
                  /* current fragment is a subset of the just received fragment.  
                   * Decrement the length of the just received fragment.  Move
                   * on to the next fragment in the RFQ. */
                  p->nb_plen = currstart - jrstart;
  83ff54:	e0fff60b 	ldhu	r3,-40(fp)
  83ff58:	e0bff70b 	ldhu	r2,-36(fp)
  83ff5c:	1885c83a 	sub	r2,r3,r2
  83ff60:	1007883a 	mov	r3,r2
  83ff64:	e0bffb17 	ldw	r2,-20(fp)
  83ff68:	10c00415 	stw	r3,16(r2)
                  jrend = jrstart + p->nb_plen - 1;
  83ff6c:	e0bffb17 	ldw	r2,-20(fp)
  83ff70:	10800417 	ldw	r2,16(r2)
  83ff74:	1007883a 	mov	r3,r2
  83ff78:	e0bff70b 	ldhu	r2,-36(fp)
  83ff7c:	1885883a 	add	r2,r3,r2
  83ff80:	10bfffc4 	addi	r2,r2,-1
  83ff84:	e0bff68d 	sth	r2,-38(fp)
  83ff88:	00006d06 	br	840140 <ip_reasm_compute_overlap+0x514>
                  {
                  /* currend is less than jrend (case F2).  current fragment is 
                   * a subset of the just received fragment.  Drop current
                   * fragment.  Move on to the next fragment in the RFQ.  Decrement
                   * the amount of memory currently in use. */
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
  83ff8c:	e0bff917 	ldw	r2,-28(fp)
  83ff90:	10800217 	ldw	r2,8(r2)
  83ff94:	113fffcc 	andi	r4,r2,65535
  83ff98:	083f80c0 	call	83f80c <ip_reasm_decr_mem_useage>
                  irep->rcvd -= currpkt->nb_plen;
  83ff9c:	e0bffc17 	ldw	r2,-16(fp)
  83ffa0:	10c0048b 	ldhu	r3,18(r2)
  83ffa4:	e0bff917 	ldw	r2,-28(fp)
  83ffa8:	10800417 	ldw	r2,16(r2)
  83ffac:	1885c83a 	sub	r2,r3,r2
  83ffb0:	1007883a 	mov	r3,r2
  83ffb4:	e0bffc17 	ldw	r2,-16(fp)
  83ffb8:	10c0048d 	sth	r3,18(r2)
                  LOCK_NET_RESOURCE (FREEQ_RESID);
  83ffbc:	01000084 	movi	r4,2
  83ffc0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
                  pk_free (currpkt);
  83ffc4:	e13ff917 	ldw	r4,-28(fp)
  83ffc8:	0829f180 	call	829f18 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
  83ffcc:	01000084 	movi	r4,2
  83ffd0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
                  rfqp->bufp[i] = 0; /* mark slot as unused */
  83ffd4:	e0bff40b 	ldhu	r2,-48(fp)
  83ffd8:	e0fffa17 	ldw	r3,-24(fp)
  83ffdc:	1085883a 	add	r2,r2,r2
  83ffe0:	1085883a 	add	r2,r2,r2
  83ffe4:	10c5883a 	add	r2,r2,r3
  83ffe8:	10800104 	addi	r2,r2,4
  83ffec:	10000015 	stw	zero,0(r2)
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
  83fff0:	e0bffd17 	ldw	r2,-12(fp)
  83fff4:	1080000b 	ldhu	r2,0(r2)
  83fff8:	10bfffcc 	andi	r2,r2,65535
  83fffc:	10800418 	cmpnei	r2,r2,16
  840000:	1000061e 	bne	r2,zero,84001c <ip_reasm_compute_overlap+0x3f0>
                     {
                     *indexp = i;
  840004:	e0fffd17 	ldw	r3,-12(fp)
  840008:	e0bff40b 	ldhu	r2,-48(fp)
  84000c:	1880000d 	sth	r2,0(r3)
                     *last_rfqpp = rfqp;
  840010:	e0fffe17 	ldw	r3,-8(fp)
  840014:	e0bffa17 	ldw	r2,-24(fp)
  840018:	18800015 	stw	r2,0(r3)
                     }
                  /* we've just created a hole; the array may no longer be "compact" */
                  *hole_createdp = IPREASM_TRUE;
  84001c:	e0c00317 	ldw	r3,12(fp)
  840020:	00800044 	movi	r2,1
  840024:	18800005 	stb	r2,0(r3)
  840028:	00004506 	br	840140 <ip_reasm_compute_overlap+0x514>
                  }
               }
            else
               {
               /* currstart and jrstart are equal */
               if (currend == jrend) /* case C */
  84002c:	e0fff58b 	ldhu	r3,-42(fp)
  840030:	e0bff68b 	ldhu	r2,-38(fp)
  840034:	1880081e 	bne	r3,r2,840058 <ip_reasm_compute_overlap+0x42c>
                  {
                  /* the current fragment is identical to the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
  840038:	01000084 	movi	r4,2
  84003c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
                  pk_free (p);
  840040:	e13ffb17 	ldw	r4,-20(fp)
  840044:	0829f180 	call	829f18 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
  840048:	01000084 	movi	r4,2
  84004c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
  840050:	e03fff15 	stw	zero,-4(fp)
  840054:	00005306 	br	8401a4 <ip_reasm_compute_overlap+0x578>
                  }
               else if (currend > jrend) /* case D1 */
  840058:	e0fff58b 	ldhu	r3,-42(fp)
  84005c:	e0bff68b 	ldhu	r2,-38(fp)
  840060:	10c0082e 	bgeu	r2,r3,840084 <ip_reasm_compute_overlap+0x458>
                  {
                  /* current fragment is a superset of just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
  840064:	01000084 	movi	r4,2
  840068:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
                  pk_free (p);
  84006c:	e13ffb17 	ldw	r4,-20(fp)
  840070:	0829f180 	call	829f18 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
  840074:	01000084 	movi	r4,2
  840078:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
  84007c:	e03fff15 	stw	zero,-4(fp)
  840080:	00004806 	br	8401a4 <ip_reasm_compute_overlap+0x578>
                  /* currend is less than jrend (case D2).  current fragment 
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
  840084:	e0fff58b 	ldhu	r3,-42(fp)
  840088:	e0bff70b 	ldhu	r2,-36(fp)
  84008c:	1885c83a 	sub	r2,r3,r2
  840090:	10800044 	addi	r2,r2,1
  840094:	e0bff50d 	sth	r2,-44(fp)
                  p->nb_prot += drop_len;
  840098:	e0bffb17 	ldw	r2,-20(fp)
  84009c:	10c00317 	ldw	r3,12(r2)
  8400a0:	e0bff50b 	ldhu	r2,-44(fp)
  8400a4:	1887883a 	add	r3,r3,r2
  8400a8:	e0bffb17 	ldw	r2,-20(fp)
  8400ac:	10c00315 	stw	r3,12(r2)
                  p->nb_plen -= drop_len;
  8400b0:	e0bffb17 	ldw	r2,-20(fp)
  8400b4:	10c00417 	ldw	r3,16(r2)
  8400b8:	e0bff50b 	ldhu	r2,-44(fp)
  8400bc:	1887c83a 	sub	r3,r3,r2
  8400c0:	e0bffb17 	ldw	r2,-20(fp)
  8400c4:	10c00415 	stw	r3,16(r2)
                  jrstart += drop_len;
  8400c8:	e0fff70b 	ldhu	r3,-36(fp)
  8400cc:	e0bff50b 	ldhu	r2,-44(fp)
  8400d0:	1885883a 	add	r2,r3,r2
  8400d4:	e0bff70d 	sth	r2,-36(fp)
                  jrend = jrstart + p->nb_plen - 1;
  8400d8:	e0bffb17 	ldw	r2,-20(fp)
  8400dc:	10800417 	ldw	r2,16(r2)
  8400e0:	1007883a 	mov	r3,r2
  8400e4:	e0bff70b 	ldhu	r2,-36(fp)
  8400e8:	1885883a 	add	r2,r3,r2
  8400ec:	10bfffc4 	addi	r2,r2,-1
  8400f0:	e0bff68d 	sth	r2,-38(fp)
  8400f4:	00001206 	br	840140 <ip_reasm_compute_overlap+0x514>
                  }
               }
            } /* end if (PACKET buffer exists at this slot) */
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
  8400f8:	e0bffd17 	ldw	r2,-12(fp)
  8400fc:	1080000b 	ldhu	r2,0(r2)
  840100:	10bfffcc 	andi	r2,r2,65535
  840104:	10800418 	cmpnei	r2,r2,16
  840108:	1000061e 	bne	r2,zero,840124 <ip_reasm_compute_overlap+0x4f8>
               {
               *indexp = i;
  84010c:	e0fffd17 	ldw	r3,-12(fp)
  840110:	e0bff40b 	ldhu	r2,-48(fp)
  840114:	1880000d 	sth	r2,0(r3)
               *last_rfqpp = rfqp;               
  840118:	e0fffe17 	ldw	r3,-8(fp)
  84011c:	e0bffa17 	ldw	r2,-24(fp)
  840120:	18800015 	stw	r2,0(r3)
               }
            if (irep->flags & IPR_RFQ_COMPACT)
  840124:	e0bffc17 	ldw	r2,-16(fp)
  840128:	10802103 	ldbu	r2,132(r2)
  84012c:	10803fcc 	andi	r2,r2,255
  840130:	1080004c 	andi	r2,r2,1
  840134:	10803fcc 	andi	r2,r2,255
  840138:	1004c03a 	cmpne	r2,r2,zero
  84013c:	1000061e 	bne	r2,zero,840158 <ip_reasm_compute_overlap+0x52c>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  840140:	e0bff40b 	ldhu	r2,-48(fp)
  840144:	10800044 	addi	r2,r2,1
  840148:	e0bff40d 	sth	r2,-48(fp)
  84014c:	e0bff40b 	ldhu	r2,-48(fp)
  840150:	10800430 	cmpltui	r2,r2,16
  840154:	103f1e1e 	bne	r2,zero,83fdd0 <ip_reasm_compute_overlap+0x1a4>
               }
            }
         } /* end FOR (0...(IPR_MAX_FRAGS - 1)) */

      /* skip saving RFQ pointer if we've already found an empty slot */
      if ((*indexp) == INVALID_FRAG_INDEX) 
  840158:	e0bffd17 	ldw	r2,-12(fp)
  84015c:	1080000b 	ldhu	r2,0(r2)
  840160:	10bfffcc 	andi	r2,r2,65535
  840164:	10800418 	cmpnei	r2,r2,16
  840168:	1000031e 	bne	r2,zero,840178 <ip_reasm_compute_overlap+0x54c>
         {
         *last_rfqpp = rfqp;
  84016c:	e0fffe17 	ldw	r3,-8(fp)
  840170:	e0bffa17 	ldw	r2,-24(fp)
  840174:	18800015 	stw	r2,0(r3)
         }
      rfqp = rfqp->next;
  840178:	e0bffa17 	ldw	r2,-24(fp)
  84017c:	10800017 	ldw	r2,0(r2)
  840180:	e0bffa15 	stw	r2,-24(fp)
   *last_rfqpp = 0;
   *hole_createdp = IPREASM_FALSE;

   rfqp = &(irep->rfq);

   while (rfqp)
  840184:	e0bffa17 	ldw	r2,-24(fp)
  840188:	1004c03a 	cmpne	r2,r2,zero
  84018c:	103f0e1e 	bne	r2,zero,83fdc8 <ip_reasm_compute_overlap+0x19c>
      } /* end while (rfqp) */

   /* if no empty slots were found, (*last_rfqpp) will contain a pointer 
    * to the last RFQ that we were working with */

   *frag_offsetp = jrstart; /* stored in host byte order */
  840190:	e0c00217 	ldw	r3,8(fp)
  840194:	e0bff70b 	ldhu	r2,-36(fp)
  840198:	1880000d 	sth	r2,0(r3)

   return IPREASM_ACCEPT_FRAG;
  84019c:	00800084 	movi	r2,2
  8401a0:	e0bfff15 	stw	r2,-4(fp)
  8401a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8401a8:	e037883a 	mov	sp,fp
  8401ac:	dfc00117 	ldw	ra,4(sp)
  8401b0:	df000017 	ldw	fp,0(sp)
  8401b4:	dec00204 	addi	sp,sp,8
  8401b8:	f800283a 	ret

008401bc <ip_reasm_process_subsequent_fragments>:
            queued fragments (and hence has been dropped), or if the fragment
            has been processed successfully.
*/

int ip_reasm_process_subsequent_fragments (PACKET p, IREP irep)
{
  8401bc:	deffed04 	addi	sp,sp,-76
  8401c0:	dfc01215 	stw	ra,72(sp)
  8401c4:	df001115 	stw	fp,68(sp)
  8401c8:	df001104 	addi	fp,sp,68
  8401cc:	e13ffa15 	stw	r4,-24(fp)
  8401d0:	e17ffb15 	stw	r5,-20(fp)
   PACKET reassy_pkt;
   struct ip * pip;
   RFQP new_rfqp = 0;
  8401d4:	e03ff415 	stw	zero,-48(fp)
   u_short index;
   RFQP rfqp;
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
  8401d8:	e13ffb17 	ldw	r4,-20(fp)
  8401dc:	08407500 	call	840750 <ip_reasm_find_ire>
  8401e0:	10803fcc 	andi	r2,r2,255
  8401e4:	10800060 	cmpeqi	r2,r2,1
  8401e8:	1000171e 	bne	r2,zero,840248 <ip_reasm_process_subsequent_fragments+0x8c>
      {
      ++ire_stats.bad_irep;
  8401ec:	00803934 	movhi	r2,228
  8401f0:	10a9f604 	addi	r2,r2,-22568
  8401f4:	10800017 	ldw	r2,0(r2)
  8401f8:	10c00044 	addi	r3,r2,1
  8401fc:	00803934 	movhi	r2,228
  840200:	10a9f604 	addi	r2,r2,-22568
  840204:	10c00015 	stw	r3,0(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
  840208:	01000084 	movi	r4,2
  84020c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free (p);
  840210:	e13ffa17 	ldw	r4,-24(fp)
  840214:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
  840218:	01000084 	movi	r4,2
  84021c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
  840220:	00803934 	movhi	r2,228
  840224:	10a9e204 	addi	r2,r2,-22648
  840228:	10800f17 	ldw	r2,60(r2)
  84022c:	10c00044 	addi	r3,r2,1
  840230:	00803934 	movhi	r2,228
  840234:	10a9e204 	addi	r2,r2,-22648
  840238:	10c00f15 	stw	r3,60(r2)
      return ENP_PARAM;
  84023c:	00bffd84 	movi	r2,-10
  840240:	e0bffe15 	stw	r2,-8(fp)
  840244:	00013c06 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>
      }

   pip = ip_head(p);
  840248:	e0bffa17 	ldw	r2,-24(fp)
  84024c:	10800317 	ldw	r2,12(r2)
  840250:	e0bff515 	stw	r2,-44(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
  840254:	e13ff517 	ldw	r4,-44(fp)
  840258:	083f5e00 	call	83f5e0 <ip_reasm_determine_type_of_frag>
  84025c:	e0bff215 	stw	r2,-56(fp)
   /* this fragment is a destined for an already queued fragment stream.
    * we update the 'length' field for LFs here because ip_reasm_compute_overlap ()
    * modifies the received fragment's nb_prot pointer (thereby making its IP header 
    * inaccessible) */
   if (ftype == IP_LF)
  840260:	e0bff217 	ldw	r2,-56(fp)
  840264:	10800158 	cmpnei	r2,r2,5
  840268:	10002c1e 	bne	r2,zero,84031c <ip_reasm_process_subsequent_fragments+0x160>
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
  84026c:	e0bff517 	ldw	r2,-44(fp)
  840270:	1080018b 	ldhu	r2,6(r2)
  840274:	10bfffcc 	andi	r2,r2,65535
  840278:	1004d23a 	srli	r2,r2,8
  84027c:	10803fcc 	andi	r2,r2,255
  840280:	1009883a 	mov	r4,r2
  840284:	e0bff517 	ldw	r2,-44(fp)
  840288:	1080018b 	ldhu	r2,6(r2)
  84028c:	10bfffcc 	andi	r2,r2,65535
  840290:	1004923a 	slli	r2,r2,8
  840294:	1007883a 	mov	r3,r2
  840298:	00bfc004 	movi	r2,-256
  84029c:	1884703a 	and	r2,r3,r2
  8402a0:	2084b03a 	or	r2,r4,r2
  8402a4:	1087ffcc 	andi	r2,r2,8191
  8402a8:	100490fa 	slli	r2,r2,3
  8402ac:	100b883a 	mov	r5,r2
  8402b0:	e0bff517 	ldw	r2,-44(fp)
  8402b4:	1080008b 	ldhu	r2,2(r2)
  8402b8:	10bfffcc 	andi	r2,r2,65535
  8402bc:	1004d23a 	srli	r2,r2,8
  8402c0:	10803fcc 	andi	r2,r2,255
  8402c4:	1009883a 	mov	r4,r2
  8402c8:	e0bff517 	ldw	r2,-44(fp)
  8402cc:	1080008b 	ldhu	r2,2(r2)
  8402d0:	10bfffcc 	andi	r2,r2,65535
  8402d4:	1004923a 	slli	r2,r2,8
  8402d8:	1007883a 	mov	r3,r2
  8402dc:	00bfc004 	movi	r2,-256
  8402e0:	1884703a 	and	r2,r3,r2
  8402e4:	2084b03a 	or	r2,r4,r2
  8402e8:	1007883a 	mov	r3,r2
  8402ec:	e0bff517 	ldw	r2,-44(fp)
  8402f0:	10800003 	ldbu	r2,0(r2)
  8402f4:	10803fcc 	andi	r2,r2,255
  8402f8:	108003cc 	andi	r2,r2,15
  8402fc:	1085883a 	add	r2,r2,r2
  840300:	1085883a 	add	r2,r2,r2
  840304:	1885c83a 	sub	r2,r3,r2
  840308:	2885883a 	add	r2,r5,r2
  84030c:	1007883a 	mov	r3,r2
  840310:	e0bffb17 	ldw	r2,-20(fp)
  840314:	10c0040d 	sth	r3,16(r2)
  840318:	00000a06 	br	840344 <ip_reasm_process_subsequent_fragments+0x188>
      }
   else if (ftype == IP_FF)
  84031c:	e0bff217 	ldw	r2,-56(fp)
  840320:	10800058 	cmpnei	r2,r2,1
  840324:	1000071e 	bne	r2,zero,840344 <ip_reasm_process_subsequent_fragments+0x188>
      {
      irep->l2_hdr = p->nb_buff;
  840328:	e0bffa17 	ldw	r2,-24(fp)
  84032c:	10c00117 	ldw	r3,4(r2)
  840330:	e0bffb17 	ldw	r2,-20(fp)
  840334:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
  840338:	e0fff517 	ldw	r3,-44(fp)
  84033c:	e0bffb17 	ldw	r2,-20(fp)
  840340:	10c02015 	stw	r3,128(r2)
      }

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
  840344:	e1bff704 	addi	r6,fp,-36
  840348:	e1fff804 	addi	r7,fp,-32
  84034c:	e0bff904 	addi	r2,fp,-28
  840350:	d8800015 	stw	r2,0(sp)
  840354:	e0bff984 	addi	r2,fp,-26
  840358:	d8800115 	stw	r2,4(sp)
  84035c:	e13ffa17 	ldw	r4,-24(fp)
  840360:	e17ffb17 	ldw	r5,-20(fp)
  840364:	083fc2c0 	call	83fc2c <ip_reasm_compute_overlap>
  840368:	e0bff115 	stw	r2,-60(fp)
  84036c:	e0bff117 	ldw	r2,-60(fp)
  840370:	108000a0 	cmpeqi	r2,r2,2
  840374:	10000e1e 	bne	r2,zero,8403b0 <ip_reasm_process_subsequent_fragments+0x1f4>
      {
      switch (rc2)
  840378:	e0fff117 	ldw	r3,-60(fp)
  84037c:	e0ffff15 	stw	r3,-4(fp)
  840380:	e13fff17 	ldw	r4,-4(fp)
  840384:	2005003a 	cmpeq	r2,r4,zero
  840388:	1000041e 	bne	r2,zero,84039c <ip_reasm_process_subsequent_fragments+0x1e0>
  84038c:	e0ffff17 	ldw	r3,-4(fp)
  840390:	18800060 	cmpeqi	r2,r3,1
  840394:	1000031e 	bne	r2,zero,8403a4 <ip_reasm_process_subsequent_fragments+0x1e8>
  840398:	00000506 	br	8403b0 <ip_reasm_process_subsequent_fragments+0x1f4>
         {
         case IPREASM_DROP_FRAG_DUPLICATE:
            /* this isn't really an error, since it indicates that the received 
             * fragment's information is a duplicate of what is present in the 
             * already queued fragments */
            return IPREASM_OK;
  84039c:	e03ffe15 	stw	zero,-8(fp)
  8403a0:	0000e506 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>
         case IPREASM_DROP_FRAG_BAD_PARAM:
            /* this is a real error */
            return ENP_PARAM;
  8403a4:	013ffd84 	movi	r4,-10
  8403a8:	e13ffe15 	stw	r4,-8(fp)
  8403ac:	0000e206 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>
      }

   /* this is a fragment from an existing fragment stream; 
    * check for resource limits before accepting it.  For now
    * assume that an extra RFQ is not required. */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen)) != IPREASM_OK)
  8403b0:	e0bffa17 	ldw	r2,-24(fp)
  8403b4:	10800217 	ldw	r2,8(r2)
  8403b8:	113fffcc 	andi	r4,r2,65535
  8403bc:	083f6cc0 	call	83f6cc <ip_reasm_check_mem_useage>
  8403c0:	e0bff315 	stw	r2,-52(fp)
  8403c4:	e0bff317 	ldw	r2,-52(fp)
  8403c8:	1005003a 	cmpeq	r2,r2,zero
  8403cc:	1000121e 	bne	r2,zero,840418 <ip_reasm_process_subsequent_fragments+0x25c>
      {
      LOCK_NET_RESOURCE (FREEQ_RESID);
  8403d0:	01000084 	movi	r4,2
  8403d4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free (p);
  8403d8:	e13ffa17 	ldw	r4,-24(fp)
  8403dc:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
  8403e0:	01000084 	movi	r4,2
  8403e4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      ip_reasm_delete_ire (irep);
  8403e8:	e13ffb17 	ldw	r4,-20(fp)
  8403ec:	0840bf40 	call	840bf4 <ip_reasm_delete_ire>
      ++ip_mib.ipReasmFails;
  8403f0:	00803934 	movhi	r2,228
  8403f4:	10a9e204 	addi	r2,r2,-22648
  8403f8:	10800f17 	ldw	r2,60(r2)
  8403fc:	10c00044 	addi	r3,r2,1
  840400:	00803934 	movhi	r2,228
  840404:	10a9e204 	addi	r2,r2,-22648
  840408:	10c00f15 	stw	r3,60(r2)
      return rc;
  84040c:	e0bff317 	ldw	r2,-52(fp)
  840410:	e0bffe15 	stw	r2,-8(fp)
  840414:	0000c806 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>

   /* the two combinations of index and rfqp are as follows:
    * (1) index = INVALID_FRAG_INDEX, rfqp = non-zero: no empty slot found in RFQ(s),
    *     and rfqp points to the last RFQ that was processed
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
  840418:	e0bff70b 	ldhu	r2,-36(fp)
  84041c:	10bfffcc 	andi	r2,r2,65535
  840420:	10800420 	cmpeqi	r2,r2,16
  840424:	1000121e 	bne	r2,zero,840470 <ip_reasm_process_subsequent_fragments+0x2b4>
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
  840428:	e0fff817 	ldw	r3,-32(fp)
  84042c:	e0bff70b 	ldhu	r2,-36(fp)
  840430:	10bfffcc 	andi	r2,r2,65535
  840434:	1085883a 	add	r2,r2,r2
  840438:	1085883a 	add	r2,r2,r2
  84043c:	10c5883a 	add	r2,r2,r3
  840440:	10c00104 	addi	r3,r2,4
  840444:	e0bffa17 	ldw	r2,-24(fp)
  840448:	18800015 	stw	r2,0(r3)
      rfqp->frag_offset[index] = frag_offset;
  84044c:	e0fff817 	ldw	r3,-32(fp)
  840450:	e0bff70b 	ldhu	r2,-36(fp)
  840454:	10bfffcc 	andi	r2,r2,65535
  840458:	e13ff90b 	ldhu	r4,-28(fp)
  84045c:	1085883a 	add	r2,r2,r2
  840460:	10c5883a 	add	r2,r2,r3
  840464:	10801104 	addi	r2,r2,68
  840468:	1100000d 	sth	r4,0(r2)
  84046c:	00003c06 	br	840560 <ip_reasm_process_subsequent_fragments+0x3a4>
      }
   else
      {
      /* since we need to allocate an extra RFQ, check for memory useage again... */
      if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (RFQ)))) != IPREASM_OK)
  840470:	e0bffa17 	ldw	r2,-24(fp)
  840474:	10800217 	ldw	r2,8(r2)
  840478:	10801904 	addi	r2,r2,100
  84047c:	113fffcc 	andi	r4,r2,65535
  840480:	083f6cc0 	call	83f6cc <ip_reasm_check_mem_useage>
  840484:	e0bff315 	stw	r2,-52(fp)
  840488:	e0bff317 	ldw	r2,-52(fp)
  84048c:	1005003a 	cmpeq	r2,r2,zero
  840490:	1000121e 	bne	r2,zero,8404dc <ip_reasm_process_subsequent_fragments+0x320>
         {
         LOCK_NET_RESOURCE (FREEQ_RESID);
  840494:	01000084 	movi	r4,2
  840498:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free (p);
  84049c:	e13ffa17 	ldw	r4,-24(fp)
  8404a0:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
  8404a4:	01000084 	movi	r4,2
  8404a8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
  8404ac:	e13ffb17 	ldw	r4,-20(fp)
  8404b0:	0840bf40 	call	840bf4 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
  8404b4:	00803934 	movhi	r2,228
  8404b8:	10a9e204 	addi	r2,r2,-22648
  8404bc:	10800f17 	ldw	r2,60(r2)
  8404c0:	10c00044 	addi	r3,r2,1
  8404c4:	00803934 	movhi	r2,228
  8404c8:	10a9e204 	addi	r2,r2,-22648
  8404cc:	10c00f15 	stw	r3,60(r2)
         return rc;
  8404d0:	e0fff317 	ldw	r3,-52(fp)
  8404d4:	e0fffe15 	stw	r3,-8(fp)
  8404d8:	00009706 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>
         }

      /* no slots are available in the one (or more) existing RFQs; we 
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
  8404dc:	01001904 	movi	r4,100
  8404e0:	082b20c0 	call	82b20c <npalloc>
  8404e4:	e0bff415 	stw	r2,-48(fp)
      if (new_rfqp == 0)
  8404e8:	e0bff417 	ldw	r2,-48(fp)
  8404ec:	1004c03a 	cmpne	r2,r2,zero
  8404f0:	1000121e 	bne	r2,zero,84053c <ip_reasm_process_subsequent_fragments+0x380>
         {
         /* can't store the existing fragment, so we'll drop it */
         LOCK_NET_RESOURCE (FREEQ_RESID);
  8404f4:	01000084 	movi	r4,2
  8404f8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free (p);
  8404fc:	e13ffa17 	ldw	r4,-24(fp)
  840500:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
  840504:	01000084 	movi	r4,2
  840508:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
  84050c:	e13ffb17 	ldw	r4,-20(fp)
  840510:	0840bf40 	call	840bf4 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
  840514:	00803934 	movhi	r2,228
  840518:	10a9e204 	addi	r2,r2,-22648
  84051c:	10800f17 	ldw	r2,60(r2)
  840520:	10c00044 	addi	r3,r2,1
  840524:	00803934 	movhi	r2,228
  840528:	10a9e204 	addi	r2,r2,-22648
  84052c:	10c00f15 	stw	r3,60(r2)
         return ENP_RESOURCE;
  840530:	013ffa84 	movi	r4,-22
  840534:	e13ffe15 	stw	r4,-8(fp)
  840538:	00007f06 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>
         }
      else
         {
         new_rfqp->bufp[0] = p;
  84053c:	e0fff417 	ldw	r3,-48(fp)
  840540:	e0bffa17 	ldw	r2,-24(fp)
  840544:	18800115 	stw	r2,4(r3)
         new_rfqp->frag_offset[0] = frag_offset;
  840548:	e0fff90b 	ldhu	r3,-28(fp)
  84054c:	e0bff417 	ldw	r2,-48(fp)
  840550:	10c0110d 	sth	r3,68(r2)
         rfqp->next = new_rfqp;
  840554:	e0fff817 	ldw	r3,-32(fp)
  840558:	e0bff417 	ldw	r2,-48(fp)
  84055c:	18800015 	stw	r2,0(r3)
         }
      }
      
      /* check to see if the RFQ is still compact, but only if hole(s) were created 
       * in ip_reasm_compute_overlap () */
      if (hole_created)
  840560:	e0bff983 	ldbu	r2,-26(fp)
  840564:	10803fcc 	andi	r2,r2,255
  840568:	1005003a 	cmpeq	r2,r2,zero
  84056c:	1000161e 	bne	r2,zero,8405c8 <ip_reasm_process_subsequent_fragments+0x40c>
         {
         if ((rc = ip_reasm_mark_compact_rfq (irep)) != IPREASM_OK)
  840570:	e13ffb17 	ldw	r4,-20(fp)
  840574:	0840dbc0 	call	840dbc <ip_reasm_mark_compact_rfq>
  840578:	e0bff315 	stw	r2,-52(fp)
  84057c:	e0bff317 	ldw	r2,-52(fp)
  840580:	1005003a 	cmpeq	r2,r2,zero
  840584:	1000101e 	bne	r2,zero,8405c8 <ip_reasm_process_subsequent_fragments+0x40c>
            {
            /* an error return is due to a bad IRE pointer, which ip_reasm_mark_compact_rfq () logs */
            LOCK_NET_RESOURCE (FREEQ_RESID);
  840588:	01000084 	movi	r4,2
  84058c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free (p);
  840590:	e13ffa17 	ldw	r4,-24(fp)
  840594:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);
  840598:	01000084 	movi	r4,2
  84059c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            ++ip_mib.ipReasmFails;
  8405a0:	00803934 	movhi	r2,228
  8405a4:	10a9e204 	addi	r2,r2,-22648
  8405a8:	10800f17 	ldw	r2,60(r2)
  8405ac:	10c00044 	addi	r3,r2,1
  8405b0:	00803934 	movhi	r2,228
  8405b4:	10a9e204 	addi	r2,r2,-22648
  8405b8:	10c00f15 	stw	r3,60(r2)
            return rc;
  8405bc:	e0bff317 	ldw	r2,-52(fp)
  8405c0:	e0bffe15 	stw	r2,-8(fp)
  8405c4:	00005c06 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>

   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
  8405c8:	e0bffb17 	ldw	r2,-20(fp)
  8405cc:	10c0048b 	ldhu	r3,18(r2)
  8405d0:	e0bffa17 	ldw	r2,-24(fp)
  8405d4:	10800417 	ldw	r2,16(r2)
  8405d8:	1885883a 	add	r2,r3,r2
  8405dc:	1007883a 	mov	r3,r2
  8405e0:	e0bffb17 	ldw	r2,-20(fp)
  8405e4:	10c0048d 	sth	r3,18(r2)
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
  8405e8:	e0bffa17 	ldw	r2,-24(fp)
  8405ec:	10800217 	ldw	r2,8(r2)
  8405f0:	e0bffd0d 	sth	r2,-12(fp)
  8405f4:	e0bff417 	ldw	r2,-48(fp)
  8405f8:	1004c03a 	cmpne	r2,r2,zero
  8405fc:	1000021e 	bne	r2,zero,840608 <ip_reasm_process_subsequent_fragments+0x44c>
  840600:	e03ffc0d 	sth	zero,-16(fp)
  840604:	00000206 	br	840610 <ip_reasm_process_subsequent_fragments+0x454>
  840608:	00c01904 	movi	r3,100
  84060c:	e0fffc0d 	sth	r3,-16(fp)
  840610:	e13ffd0b 	ldhu	r4,-12(fp)
  840614:	e0fffc0b 	ldhu	r3,-16(fp)
  840618:	20c5883a 	add	r2,r4,r3
  84061c:	113fffcc 	andi	r4,r2,65535
  840620:	083f7640 	call	83f764 <ip_reasm_incr_mem_useage>

   if (irep->length != 0)
  840624:	e0bffb17 	ldw	r2,-20(fp)
  840628:	1080040b 	ldhu	r2,16(r2)
  84062c:	10bfffcc 	andi	r2,r2,65535
  840630:	1005003a 	cmpeq	r2,r2,zero
  840634:	10003f1e 	bne	r2,zero,840734 <ip_reasm_process_subsequent_fragments+0x578>
      {
      /* we know the total length of the original unfragmented datagram; 
       * let's check to see if we have all of the bytes... */
      if (irep->rcvd == irep->length)
  840638:	e0bffb17 	ldw	r2,-20(fp)
  84063c:	10c0048b 	ldhu	r3,18(r2)
  840640:	e0bffb17 	ldw	r2,-20(fp)
  840644:	1080040b 	ldhu	r2,16(r2)
  840648:	18ffffcc 	andi	r3,r3,65535
  84064c:	10bfffcc 	andi	r2,r2,65535
  840650:	1880381e 	bne	r3,r2,840734 <ip_reasm_process_subsequent_fragments+0x578>
          * Ensure that we allocate space for the data link header, IP header, 
          * and the payload of the original, unfragmented datagram.  We pick 
          * the data link layer and IP headers from the First Fragment (FF), 
          * but we need to adjust some of the fields in the IP header after 
          * reassembly is complete. */
         pip = (struct ip *) irep->l3_hdr;
  840654:	e0bffb17 	ldw	r2,-20(fp)
  840658:	10802017 	ldw	r2,128(r2)
  84065c:	e0bff515 	stw	r2,-44(fp)
         LOCK_NET_RESOURCE (FREEQ_RESID);
  840660:	01000084 	movi	r4,2
  840664:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         reassy_pkt = pk_alloc (irep->length + (irep->l3_hdr - irep->l2_hdr) + ip_hlen (pip));
  840668:	e0bffb17 	ldw	r2,-20(fp)
  84066c:	1080040b 	ldhu	r2,16(r2)
  840670:	113fffcc 	andi	r4,r2,65535
  840674:	e0bffb17 	ldw	r2,-20(fp)
  840678:	10802017 	ldw	r2,128(r2)
  84067c:	1007883a 	mov	r3,r2
  840680:	e0bffb17 	ldw	r2,-20(fp)
  840684:	10801f17 	ldw	r2,124(r2)
  840688:	1885c83a 	sub	r2,r3,r2
  84068c:	2087883a 	add	r3,r4,r2
  840690:	e0bff517 	ldw	r2,-44(fp)
  840694:	10800003 	ldbu	r2,0(r2)
  840698:	10803fcc 	andi	r2,r2,255
  84069c:	108003cc 	andi	r2,r2,15
  8406a0:	1085883a 	add	r2,r2,r2
  8406a4:	1085883a 	add	r2,r2,r2
  8406a8:	1885883a 	add	r2,r3,r2
  8406ac:	1009883a 	mov	r4,r2
  8406b0:	0829b840 	call	829b84 <pk_alloc>
  8406b4:	e0bff615 	stw	r2,-40(fp)
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
  8406b8:	01000084 	movi	r4,2
  8406bc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         if (reassy_pkt == 0)
  8406c0:	e0bff617 	ldw	r2,-40(fp)
  8406c4:	1004c03a 	cmpne	r2,r2,zero
  8406c8:	10000c1e 	bne	r2,zero,8406fc <ip_reasm_process_subsequent_fragments+0x540>
            {
            /* the following call will delete all queued fragments, including
             * the currently received one */
            ip_reasm_delete_ire (irep);
  8406cc:	e13ffb17 	ldw	r4,-20(fp)
  8406d0:	0840bf40 	call	840bf4 <ip_reasm_delete_ire>
            ++ip_mib.ipReasmFails;
  8406d4:	00803934 	movhi	r2,228
  8406d8:	10a9e204 	addi	r2,r2,-22648
  8406dc:	10800f17 	ldw	r2,60(r2)
  8406e0:	10c00044 	addi	r3,r2,1
  8406e4:	00803934 	movhi	r2,228
  8406e8:	10a9e204 	addi	r2,r2,-22648
  8406ec:	10c00f15 	stw	r3,60(r2)
            return ENP_NOBUFFER;
  8406f0:	013ffac4 	movi	r4,-21
  8406f4:	e13ffe15 	stw	r4,-8(fp)
  8406f8:	00000f06 	br	840738 <ip_reasm_process_subsequent_fragments+0x57c>
            }
         else
            {
            ip_reasm_copy_queued_fragments_into_reassy_buffer (reassy_pkt, irep);
  8406fc:	e13ff617 	ldw	r4,-40(fp)
  840700:	e17ffb17 	ldw	r5,-20(fp)
  840704:	08407b40 	call	8407b4 <ip_reasm_copy_queued_fragments_into_reassy_buffer>
            /* free the IRE structure (and its constituent elements) */
            ip_reasm_delete_ire (irep);
  840708:	e13ffb17 	ldw	r4,-20(fp)
  84070c:	0840bf40 	call	840bf4 <ip_reasm_delete_ire>
            /* at this point, 'irep' is no longer a valid pointer, and so should 
             * not be referenced.  We're done, and we now pass the packet for 
             * demux'ing to the appropriate entity (e.g., UDP, TCP, etc.).  Note
             * that ip_demux () expects 'nb_prot' to point to the beginning of 
             * the IP header. */
            ++ip_mib.ipReasmOKs;
  840710:	00803934 	movhi	r2,228
  840714:	10a9e204 	addi	r2,r2,-22648
  840718:	10800e17 	ldw	r2,56(r2)
  84071c:	10c00044 	addi	r3,r2,1
  840720:	00803934 	movhi	r2,228
  840724:	10a9e204 	addi	r2,r2,-22648
  840728:	10c00e15 	stw	r3,56(r2)
            ip_demux (reassy_pkt);
  84072c:	e13ff617 	ldw	r4,-40(fp)
  840730:	0841cb80 	call	841cb8 <ip_demux>
      {
      /* we haven't received the LF (so we don't know the total amount of data in 
       * the original, unfragmented datagram), and therefore reassembly can't complete yet */
      }

   return IPREASM_OK;
  840734:	e03ffe15 	stw	zero,-8(fp)
  840738:	e0bffe17 	ldw	r2,-8(fp)
}
  84073c:	e037883a 	mov	sp,fp
  840740:	dfc00117 	ldw	ra,4(sp)
  840744:	df000017 	ldw	fp,0(sp)
  840748:	dec00204 	addi	sp,sp,8
  84074c:	f800283a 	ret

00840750 <ip_reasm_find_ire>:
OUTPUT: This function returns a IPREASM_TRUE if the IRE exists in the master 
IRE list; otherwise, it returns a IPREASM_FALSE.
*/

u_char ip_reasm_find_ire (IREP irep)
{
  840750:	defffc04 	addi	sp,sp,-16
  840754:	df000315 	stw	fp,12(sp)
  840758:	df000304 	addi	fp,sp,12
  84075c:	e13ffe15 	stw	r4,-8(fp)
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  840760:	d0a0cd17 	ldw	r2,-31948(gp)
  840764:	e0bffd15 	stw	r2,-12(fp)
  840768:	00000906 	br	840790 <ip_reasm_find_ire+0x40>
      {
      if (tmpp == irep) 
  84076c:	e0fffd17 	ldw	r3,-12(fp)
  840770:	e0bffe17 	ldw	r2,-8(fp)
  840774:	1880031e 	bne	r3,r2,840784 <ip_reasm_find_ire+0x34>
         {
         return IPREASM_TRUE;
  840778:	00800044 	movi	r2,1
  84077c:	e0bfff15 	stw	r2,-4(fp)
  840780:	00000706 	br	8407a0 <ip_reasm_find_ire+0x50>
u_char ip_reasm_find_ire (IREP irep)
{
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  840784:	e0bffd17 	ldw	r2,-12(fp)
  840788:	10800017 	ldw	r2,0(r2)
  84078c:	e0bffd15 	stw	r2,-12(fp)
  840790:	e0bffd17 	ldw	r2,-12(fp)
  840794:	1004c03a 	cmpne	r2,r2,zero
  840798:	103ff41e 	bne	r2,zero,84076c <ip_reasm_find_ire+0x1c>
         {
         return IPREASM_TRUE;
         }
      }

   return IPREASM_FALSE;
  84079c:	e03fff15 	stw	zero,-4(fp)
  8407a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8407a4:	e037883a 	mov	sp,fp
  8407a8:	df000017 	ldw	fp,0(sp)
  8407ac:	dec00104 	addi	sp,sp,4
  8407b0:	f800283a 	ret

008407b4 <ip_reasm_copy_queued_fragments_into_reassy_buffer>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
  8407b4:	defff404 	addi	sp,sp,-48
  8407b8:	dfc00b15 	stw	ra,44(sp)
  8407bc:	df000a15 	stw	fp,40(sp)
  8407c0:	df000a04 	addi	fp,sp,40
  8407c4:	e13ffe15 	stw	r4,-8(fp)
  8407c8:	e17fff15 	stw	r5,-4(fp)
   RFQP rfqp;
   u_short i;
   PACKET p;
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;
  8407cc:	e03ff615 	stw	zero,-40(fp)

   pip = (struct ip *) irep->l3_hdr;
  8407d0:	e0bfff17 	ldw	r2,-4(fp)
  8407d4:	10802017 	ldw	r2,128(r2)
  8407d8:	e0bffd15 	stw	r2,-12(fp)
   iphlen = ip_hlen (pip);
  8407dc:	e0bffd17 	ldw	r2,-12(fp)
  8407e0:	10800003 	ldbu	r2,0(r2)
  8407e4:	108003cc 	andi	r2,r2,15
  8407e8:	1085883a 	add	r2,r2,r2
  8407ec:	1085883a 	add	r2,r2,r2
  8407f0:	e0bff805 	stb	r2,-32(fp)

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
  8407f4:	e0bfff17 	ldw	r2,-4(fp)
  8407f8:	10802017 	ldw	r2,128(r2)
  8407fc:	1007883a 	mov	r3,r2
  840800:	e0bfff17 	ldw	r2,-4(fp)
  840804:	10801f17 	ldw	r2,124(r2)
  840808:	1885c83a 	sub	r2,r3,r2
  84080c:	1007883a 	mov	r3,r2
  840810:	e0bff803 	ldbu	r2,-32(fp)
  840814:	1885883a 	add	r2,r3,r2
  840818:	e0bffc05 	stb	r2,-16(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);
  84081c:	e0bffe17 	ldw	r2,-8(fp)
  840820:	11000117 	ldw	r4,4(r2)
  840824:	e0bfff17 	ldw	r2,-4(fp)
  840828:	10801f17 	ldw	r2,124(r2)
  84082c:	e0fffc03 	ldbu	r3,-16(fp)
  840830:	100b883a 	mov	r5,r2
  840834:	180d883a 	mov	r6,r3
  840838:	08073380 	call	807338 <memcpy>

   rfqp = &(irep->rfq);
  84083c:	e0bfff17 	ldw	r2,-4(fp)
  840840:	10800604 	addi	r2,r2,24
  840844:	e0bffb15 	stw	r2,-20(fp)
   writep = reassy_pkt->nb_buff + offset;
  840848:	e0bffe17 	ldw	r2,-8(fp)
  84084c:	10c00117 	ldw	r3,4(r2)
  840850:	e0bffc03 	ldbu	r2,-16(fp)
  840854:	1885883a 	add	r2,r3,r2
  840858:	e0bff715 	stw	r2,-36(fp)

   while (rfqp)
  84085c:	00004606 	br	840978 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1c4>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  840860:	e03ffa0d 	sth	zero,-24(fp)
  840864:	00003e06 	br	840960 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1ac>
         {
         if ((p = rfqp->bufp [i]) != 0)
  840868:	e0bffa0b 	ldhu	r2,-24(fp)
  84086c:	e0fffb17 	ldw	r3,-20(fp)
  840870:	1085883a 	add	r2,r2,r2
  840874:	1085883a 	add	r2,r2,r2
  840878:	10c5883a 	add	r2,r2,r3
  84087c:	10800104 	addi	r2,r2,4
  840880:	10800017 	ldw	r2,0(r2)
  840884:	e0bff915 	stw	r2,-28(fp)
  840888:	e0bff917 	ldw	r2,-28(fp)
  84088c:	1005003a 	cmpeq	r2,r2,zero
  840890:	1000291e 	bne	r2,zero,840938 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x184>
            {
            /* note that rfqp->frag_offset[i] is the true value of the offset field, 
             * and does not require any scaling (like the Fragment Offset field in 
             * the IP header) */
            MEMCPY((writep + rfqp->frag_offset[i]), p->nb_prot, p->nb_plen);
  840894:	e0bffa0b 	ldhu	r2,-24(fp)
  840898:	e0fffb17 	ldw	r3,-20(fp)
  84089c:	1085883a 	add	r2,r2,r2
  8408a0:	10c5883a 	add	r2,r2,r3
  8408a4:	10801104 	addi	r2,r2,68
  8408a8:	1080000b 	ldhu	r2,0(r2)
  8408ac:	10bfffcc 	andi	r2,r2,65535
  8408b0:	1007883a 	mov	r3,r2
  8408b4:	e0bff717 	ldw	r2,-36(fp)
  8408b8:	1887883a 	add	r3,r3,r2
  8408bc:	e0bff917 	ldw	r2,-28(fp)
  8408c0:	11400317 	ldw	r5,12(r2)
  8408c4:	e0bff917 	ldw	r2,-28(fp)
  8408c8:	10800417 	ldw	r2,16(r2)
  8408cc:	1809883a 	mov	r4,r3
  8408d0:	100d883a 	mov	r6,r2
  8408d4:	08073380 	call	807338 <memcpy>
            /* free fragment after we've copied data out from it (unless we need to
             * save it so that we can copy some fields from it later (after exiting 
             * from the loop)) */
            if (!sav_pkt) sav_pkt = p;
  8408d8:	e0bff617 	ldw	r2,-40(fp)
  8408dc:	1004c03a 	cmpne	r2,r2,zero
  8408e0:	1000031e 	bne	r2,zero,8408f0 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x13c>
  8408e4:	e0bff917 	ldw	r2,-28(fp)
  8408e8:	e0bff615 	stw	r2,-40(fp)
  8408ec:	00000a06 	br	840918 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x164>
            else
               {
               ip_reasm_decr_mem_useage (p->nb_blen);
  8408f0:	e0bff917 	ldw	r2,-28(fp)
  8408f4:	10800217 	ldw	r2,8(r2)
  8408f8:	113fffcc 	andi	r4,r2,65535
  8408fc:	083f80c0 	call	83f80c <ip_reasm_decr_mem_useage>
               LOCK_NET_RESOURCE (FREEQ_RESID);
  840900:	01000084 	movi	r4,2
  840904:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
               pk_free (p);
  840908:	e13ff917 	ldw	r4,-28(fp)
  84090c:	0829f180 	call	829f18 <pk_free>
               UNLOCK_NET_RESOURCE (FREEQ_RESID);
  840910:	01000084 	movi	r4,2
  840914:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
               }
            /* since we're done with the packet, mark slot as unused */
            rfqp->bufp [i] = 0;
  840918:	e0bffa0b 	ldhu	r2,-24(fp)
  84091c:	e0fffb17 	ldw	r3,-20(fp)
  840920:	1085883a 	add	r2,r2,r2
  840924:	1085883a 	add	r2,r2,r2
  840928:	10c5883a 	add	r2,r2,r3
  84092c:	10800104 	addi	r2,r2,4
  840930:	10000015 	stw	zero,0(r2)
  840934:	00000706 	br	840954 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1a0>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
  840938:	e0bfff17 	ldw	r2,-4(fp)
  84093c:	10802103 	ldbu	r2,132(r2)
  840940:	10803fcc 	andi	r2,r2,255
  840944:	1080004c 	andi	r2,r2,1
  840948:	10803fcc 	andi	r2,r2,255
  84094c:	1004c03a 	cmpne	r2,r2,zero
  840950:	1000061e 	bne	r2,zero,84096c <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1b8>
   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  840954:	e0bffa0b 	ldhu	r2,-24(fp)
  840958:	10800044 	addi	r2,r2,1
  84095c:	e0bffa0d 	sth	r2,-24(fp)
  840960:	e0bffa0b 	ldhu	r2,-24(fp)
  840964:	10800430 	cmpltui	r2,r2,16
  840968:	103fbf1e 	bne	r2,zero,840868 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xb4>
               break;
               }
            }
          }

      rfqp = rfqp->next;
  84096c:	e0bffb17 	ldw	r2,-20(fp)
  840970:	10800017 	ldw	r2,0(r2)
  840974:	e0bffb15 	stw	r2,-20(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);

   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
  840978:	e0bffb17 	ldw	r2,-20(fp)
  84097c:	1004c03a 	cmpne	r2,r2,zero
  840980:	103fb71e 	bne	r2,zero,840860 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xac>
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
  840984:	e0bffe17 	ldw	r2,-8(fp)
  840988:	11000117 	ldw	r4,4(r2)
  84098c:	e0bfff17 	ldw	r2,-4(fp)
  840990:	10802017 	ldw	r2,128(r2)
  840994:	1007883a 	mov	r3,r2
  840998:	e0bfff17 	ldw	r2,-4(fp)
  84099c:	10801f17 	ldw	r2,124(r2)
  8409a0:	1885c83a 	sub	r2,r3,r2
  8409a4:	2087883a 	add	r3,r4,r2
  8409a8:	e0bffe17 	ldw	r2,-8(fp)
  8409ac:	10c00315 	stw	r3,12(r2)
   reassy_pkt->nb_plen = irep->length + iphlen;
  8409b0:	e0bfff17 	ldw	r2,-4(fp)
  8409b4:	1080040b 	ldhu	r2,16(r2)
  8409b8:	10ffffcc 	andi	r3,r2,65535
  8409bc:	e0bff803 	ldbu	r2,-32(fp)
  8409c0:	1885883a 	add	r2,r3,r2
  8409c4:	1007883a 	mov	r3,r2
  8409c8:	e0bffe17 	ldw	r2,-8(fp)
  8409cc:	10c00415 	stw	r3,16(r2)
   reassy_pkt->nb_tstamp = cticks;
  8409d0:	00802174 	movhi	r2,133
  8409d4:	10832604 	addi	r2,r2,3224
  8409d8:	10800017 	ldw	r2,0(r2)
  8409dc:	1007883a 	mov	r3,r2
  8409e0:	e0bffe17 	ldw	r2,-8(fp)
  8409e4:	10c00515 	stw	r3,20(r2)
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
  8409e8:	e0bffe17 	ldw	r2,-8(fp)
  8409ec:	10c00a17 	ldw	r3,40(r2)
  8409f0:	e0bff617 	ldw	r2,-40(fp)
  8409f4:	10800a17 	ldw	r2,40(r2)
  8409f8:	108000cc 	andi	r2,r2,3
  8409fc:	1886b03a 	or	r3,r3,r2
  840a00:	e0bffe17 	ldw	r2,-8(fp)
  840a04:	10c00a15 	stw	r3,40(r2)
   reassy_pkt->net = sav_pkt->net;
  840a08:	e0bff617 	ldw	r2,-40(fp)
  840a0c:	10c00617 	ldw	r3,24(r2)
  840a10:	e0bffe17 	ldw	r2,-8(fp)
  840a14:	10c00615 	stw	r3,24(r2)
   reassy_pkt->type = sav_pkt->type;
  840a18:	e0bff617 	ldw	r2,-40(fp)
  840a1c:	10c0080b 	ldhu	r3,32(r2)
  840a20:	e0bffe17 	ldw	r2,-8(fp)
  840a24:	10c0080d 	sth	r3,32(r2)
   /* fhost is set by ip_demux () before handing off to the packet to its 
    * intended destination (protocol) */

   /* free the saved packet too, since we don't need it anymore */
   ip_reasm_decr_mem_useage (sav_pkt->nb_blen);
  840a28:	e0bff617 	ldw	r2,-40(fp)
  840a2c:	10800217 	ldw	r2,8(r2)
  840a30:	113fffcc 	andi	r4,r2,65535
  840a34:	083f80c0 	call	83f80c <ip_reasm_decr_mem_useage>
   LOCK_NET_RESOURCE (FREEQ_RESID);
  840a38:	01000084 	movi	r4,2
  840a3c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free (sav_pkt);
  840a40:	e13ff617 	ldw	r4,-40(fp)
  840a44:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
  840a48:	01000084 	movi	r4,2
  840a4c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
  840a50:	e0bffe17 	ldw	r2,-8(fp)
  840a54:	10800317 	ldw	r2,12(r2)
  840a58:	e0bffd15 	stw	r2,-12(fp)
   pip->ip_len = htons(reassy_pkt->nb_plen);
  840a5c:	e0bffe17 	ldw	r2,-8(fp)
  840a60:	10800417 	ldw	r2,16(r2)
  840a64:	1004d23a 	srli	r2,r2,8
  840a68:	10803fcc 	andi	r2,r2,255
  840a6c:	1009883a 	mov	r4,r2
  840a70:	e0bffe17 	ldw	r2,-8(fp)
  840a74:	10800417 	ldw	r2,16(r2)
  840a78:	1004923a 	slli	r2,r2,8
  840a7c:	1007883a 	mov	r3,r2
  840a80:	00bfc004 	movi	r2,-256
  840a84:	1884703a 	and	r2,r3,r2
  840a88:	2084b03a 	or	r2,r4,r2
  840a8c:	1007883a 	mov	r3,r2
  840a90:	e0bffd17 	ldw	r2,-12(fp)
  840a94:	10c0008d 	sth	r3,2(r2)
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
  840a98:	e0bffd17 	ldw	r2,-12(fp)
  840a9c:	10c0018b 	ldhu	r3,6(r2)
  840aa0:	00bff7c4 	movi	r2,-33
  840aa4:	1884703a 	and	r2,r3,r2
  840aa8:	1007883a 	mov	r3,r2
  840aac:	e0bffd17 	ldw	r2,-12(fp)
  840ab0:	10c0018d 	sth	r3,6(r2)
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
  840ab4:	e0bffd17 	ldw	r2,-12(fp)
  840ab8:	1080018b 	ldhu	r2,6(r2)
  840abc:	1080380c 	andi	r2,r2,224
  840ac0:	1007883a 	mov	r3,r2
  840ac4:	e0bffd17 	ldw	r2,-12(fp)
  840ac8:	10c0018d 	sth	r3,6(r2)
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
  840acc:	e0bffd17 	ldw	r2,-12(fp)
  840ad0:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
  840ad4:	e0bff803 	ldbu	r2,-32(fp)
  840ad8:	1004d07a 	srli	r2,r2,1
  840adc:	11403fcc 	andi	r5,r2,255
  840ae0:	e13ffd17 	ldw	r4,-12(fp)
  840ae4:	08256340 	call	825634 <cksum>
  840ae8:	0084303a 	nor	r2,zero,r2
  840aec:	1007883a 	mov	r3,r2
  840af0:	e0bffd17 	ldw	r2,-12(fp)
  840af4:	10c0028d 	sth	r3,10(r2)

   return IPREASM_OK;
  840af8:	0005883a 	mov	r2,zero
}
  840afc:	e037883a 	mov	sp,fp
  840b00:	dfc00117 	ldw	ra,4(sp)
  840b04:	df000017 	ldw	fp,0(sp)
  840b08:	dec00204 	addi	sp,sp,8
  840b0c:	f800283a 	ret

00840b10 <ip_reasm_process_timer_tick>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_process_timer_tick (void)
{
  840b10:	defffc04 	addi	sp,sp,-16
  840b14:	dfc00315 	stw	ra,12(sp)
  840b18:	df000215 	stw	fp,8(sp)
  840b1c:	df000204 	addi	fp,sp,8
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
  840b20:	0009883a 	mov	r4,zero
  840b24:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
  840b28:	d0a0cd17 	ldw	r2,-31948(gp)
  840b2c:	e0bfff15 	stw	r2,-4(fp)
  840b30:	00002006 	br	840bb4 <ip_reasm_process_timer_tick+0xa4>
      {
      /* save the next pointer for the IRE that may be deleted */
      nxt_tmpp = tmpp->next;
  840b34:	e0bfff17 	ldw	r2,-4(fp)
  840b38:	10800017 	ldw	r2,0(r2)
  840b3c:	e0bffe15 	stw	r2,-8(fp)
      ++tmpp->age;
  840b40:	e0bfff17 	ldw	r2,-4(fp)
  840b44:	10800517 	ldw	r2,20(r2)
  840b48:	10c00044 	addi	r3,r2,1
  840b4c:	e0bfff17 	ldw	r2,-4(fp)
  840b50:	10c00515 	stw	r3,20(r2)
      /* check to see if this entry has reached its max age (expired)? */
      if (tmpp->age == IRE_TMO)
  840b54:	e0bfff17 	ldw	r2,-4(fp)
  840b58:	10800517 	ldw	r2,20(r2)
  840b5c:	10801e18 	cmpnei	r2,r2,120
  840b60:	1000121e 	bne	r2,zero,840bac <ip_reasm_process_timer_tick+0x9c>
         {
         /* it has...and therefore must be deleted. */
         ++ire_stats.ire_timed_out;
  840b64:	00803934 	movhi	r2,228
  840b68:	10a9f604 	addi	r2,r2,-22568
  840b6c:	10800117 	ldw	r2,4(r2)
  840b70:	10c00044 	addi	r3,r2,1
  840b74:	00803934 	movhi	r2,228
  840b78:	10a9f604 	addi	r2,r2,-22568
  840b7c:	10c00115 	stw	r3,4(r2)
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
  840b80:	e13fff17 	ldw	r4,-4(fp)
  840b84:	08412580 	call	841258 <ip_reasm_send_icmp_timex>
#endif
         ip_reasm_delete_ire (tmpp);
  840b88:	e13fff17 	ldw	r4,-4(fp)
  840b8c:	0840bf40 	call	840bf4 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
  840b90:	00803934 	movhi	r2,228
  840b94:	10a9e204 	addi	r2,r2,-22648
  840b98:	10800f17 	ldw	r2,60(r2)
  840b9c:	10c00044 	addi	r3,r2,1
  840ba0:	00803934 	movhi	r2,228
  840ba4:	10a9e204 	addi	r2,r2,-22648
  840ba8:	10c00f15 	stw	r3,60(r2)
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
  840bac:	e0bffe17 	ldw	r2,-8(fp)
  840bb0:	e0bfff15 	stw	r2,-4(fp)
  840bb4:	e0bfff17 	ldw	r2,-4(fp)
  840bb8:	1004c03a 	cmpne	r2,r2,zero
  840bbc:	103fdd1e 	bne	r2,zero,840b34 <ip_reasm_process_timer_tick+0x24>
         ++ip_mib.ipReasmFails;
         }
      }

   /* set the time for the next invocation of this routine (one second later) */
   ire_cticks = cticks + TPS;
  840bc0:	00802174 	movhi	r2,133
  840bc4:	10832604 	addi	r2,r2,3224
  840bc8:	10800017 	ldw	r2,0(r2)
  840bcc:	1080fa04 	addi	r2,r2,1000
  840bd0:	d0a0ce15 	stw	r2,-31944(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
  840bd4:	0009883a 	mov	r4,zero
  840bd8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   return IPREASM_OK;
  840bdc:	0005883a 	mov	r2,zero
}
  840be0:	e037883a 	mov	sp,fp
  840be4:	dfc00117 	ldw	ra,4(sp)
  840be8:	df000017 	ldw	fp,0(sp)
  840bec:	dec00204 	addi	sp,sp,8
  840bf0:	f800283a 	ret

00840bf4 <ip_reasm_delete_ire>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in the 
master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_delete_ire (IREP irep)
{
  840bf4:	defff504 	addi	sp,sp,-44
  840bf8:	dfc00a15 	stw	ra,40(sp)
  840bfc:	df000915 	stw	fp,36(sp)
  840c00:	df000904 	addi	fp,sp,36
  840c04:	e13ffe15 	stw	r4,-8(fp)
   RFQP rfqp, first_rfqp, prev_rfqp;
   u_short i;
   PACKET p;
   IREP tmpp;
   IREP prev_tmpp = 0;
  840c08:	e03ff715 	stw	zero,-36(fp)

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  840c0c:	d0a0cd17 	ldw	r2,-31948(gp)
  840c10:	e0bff815 	stw	r2,-32(fp)
  840c14:	00001406 	br	840c68 <ip_reasm_delete_ire+0x74>
      {
      if (tmpp == irep) 
  840c18:	e0fff817 	ldw	r3,-32(fp)
  840c1c:	e0bffe17 	ldw	r2,-8(fp)
  840c20:	18800c1e 	bne	r3,r2,840c54 <ip_reasm_delete_ire+0x60>
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
  840c24:	d0e0cd17 	ldw	r3,-31948(gp)
  840c28:	e0bff817 	ldw	r2,-32(fp)
  840c2c:	10c0041e 	bne	r2,r3,840c40 <ip_reasm_delete_ire+0x4c>
  840c30:	e0bffe17 	ldw	r2,-8(fp)
  840c34:	10800017 	ldw	r2,0(r2)
  840c38:	d0a0cd15 	stw	r2,-31948(gp)
  840c3c:	00000d06 	br	840c74 <ip_reasm_delete_ire+0x80>
         else prev_tmpp->next = irep->next;
  840c40:	e0bffe17 	ldw	r2,-8(fp)
  840c44:	10c00017 	ldw	r3,0(r2)
  840c48:	e0bff717 	ldw	r2,-36(fp)
  840c4c:	10c00015 	stw	r3,0(r2)
         break;
  840c50:	00000806 	br	840c74 <ip_reasm_delete_ire+0x80>
         }
      prev_tmpp = tmpp;
  840c54:	e0bff817 	ldw	r2,-32(fp)
  840c58:	e0bff715 	stw	r2,-36(fp)
   IREP tmpp;
   IREP prev_tmpp = 0;

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  840c5c:	e0bff817 	ldw	r2,-32(fp)
  840c60:	10800017 	ldw	r2,0(r2)
  840c64:	e0bff815 	stw	r2,-32(fp)
  840c68:	e0bff817 	ldw	r2,-32(fp)
  840c6c:	1004c03a 	cmpne	r2,r2,zero
  840c70:	103fe91e 	bne	r2,zero,840c18 <ip_reasm_delete_ire+0x24>
      prev_tmpp = tmpp;
      }

   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
  840c74:	e0bff817 	ldw	r2,-32(fp)
  840c78:	1004c03a 	cmpne	r2,r2,zero
  840c7c:	10000a1e 	bne	r2,zero,840ca8 <ip_reasm_delete_ire+0xb4>
      {
      ++ire_stats.bad_irep;
  840c80:	00803934 	movhi	r2,228
  840c84:	10a9f604 	addi	r2,r2,-22568
  840c88:	10800017 	ldw	r2,0(r2)
  840c8c:	10c00044 	addi	r3,r2,1
  840c90:	00803934 	movhi	r2,228
  840c94:	10a9f604 	addi	r2,r2,-22568
  840c98:	10c00015 	stw	r3,0(r2)
      return ENP_PARAM;
  840c9c:	00bffd84 	movi	r2,-10
  840ca0:	e0bfff15 	stw	r2,-4(fp)
  840ca4:	00003f06 	br	840da4 <ip_reasm_delete_ire+0x1b0>
      }

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);
  840ca8:	e0bffe17 	ldw	r2,-8(fp)
  840cac:	10800604 	addi	r2,r2,24
  840cb0:	e0bffc15 	stw	r2,-16(fp)
  840cb4:	e0bffc17 	ldw	r2,-16(fp)
  840cb8:	e0bffd15 	stw	r2,-12(fp)

   while (rfqp)
  840cbc:	00003106 	br	840d84 <ip_reasm_delete_ire+0x190>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  840cc0:	e03ffa0d 	sth	zero,-24(fp)
  840cc4:	00002006 	br	840d48 <ip_reasm_delete_ire+0x154>
         {
         if ((p = rfqp->bufp [i]) != 0)
  840cc8:	e0bffa0b 	ldhu	r2,-24(fp)
  840ccc:	e0fffd17 	ldw	r3,-12(fp)
  840cd0:	1085883a 	add	r2,r2,r2
  840cd4:	1085883a 	add	r2,r2,r2
  840cd8:	10c5883a 	add	r2,r2,r3
  840cdc:	10800104 	addi	r2,r2,4
  840ce0:	10800017 	ldw	r2,0(r2)
  840ce4:	e0bff915 	stw	r2,-28(fp)
  840ce8:	e0bff917 	ldw	r2,-28(fp)
  840cec:	1005003a 	cmpeq	r2,r2,zero
  840cf0:	10000b1e 	bne	r2,zero,840d20 <ip_reasm_delete_ire+0x12c>
            {
            ip_reasm_decr_mem_useage (p->nb_blen);
  840cf4:	e0bff917 	ldw	r2,-28(fp)
  840cf8:	10800217 	ldw	r2,8(r2)
  840cfc:	113fffcc 	andi	r4,r2,65535
  840d00:	083f80c0 	call	83f80c <ip_reasm_decr_mem_useage>
            LOCK_NET_RESOURCE (FREEQ_RESID);
  840d04:	01000084 	movi	r4,2
  840d08:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free (p);
  840d0c:	e13ff917 	ldw	r4,-28(fp)
  840d10:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);               
  840d14:	01000084 	movi	r4,2
  840d18:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
  840d1c:	00000706 	br	840d3c <ip_reasm_delete_ire+0x148>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
  840d20:	e0bffe17 	ldw	r2,-8(fp)
  840d24:	10802103 	ldbu	r2,132(r2)
  840d28:	10803fcc 	andi	r2,r2,255
  840d2c:	1080004c 	andi	r2,r2,1
  840d30:	10803fcc 	andi	r2,r2,255
  840d34:	1004c03a 	cmpne	r2,r2,zero
  840d38:	1000061e 	bne	r2,zero,840d54 <ip_reasm_delete_ire+0x160>
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  840d3c:	e0bffa0b 	ldhu	r2,-24(fp)
  840d40:	10800044 	addi	r2,r2,1
  840d44:	e0bffa0d 	sth	r2,-24(fp)
  840d48:	e0bffa0b 	ldhu	r2,-24(fp)
  840d4c:	10800430 	cmpltui	r2,r2,16
  840d50:	103fdd1e 	bne	r2,zero,840cc8 <ip_reasm_delete_ire+0xd4>
               break;
               }
            }
          }

       prev_rfqp = rfqp;
  840d54:	e0bffd17 	ldw	r2,-12(fp)
  840d58:	e0bffb15 	stw	r2,-20(fp)
       rfqp = rfqp->next;
  840d5c:	e0bffd17 	ldw	r2,-12(fp)
  840d60:	10800017 	ldw	r2,0(r2)
  840d64:	e0bffd15 	stw	r2,-12(fp)
       /* the first RFQ is statically allocated, and cannot be freed */
       if (prev_rfqp != first_rfqp)
  840d68:	e0fffb17 	ldw	r3,-20(fp)
  840d6c:	e0bffc17 	ldw	r2,-16(fp)
  840d70:	18800426 	beq	r3,r2,840d84 <ip_reasm_delete_ire+0x190>
          {
          ip_reasm_decr_mem_useage (sizeof(RFQ));
  840d74:	01001904 	movi	r4,100
  840d78:	083f80c0 	call	83f80c <ip_reasm_decr_mem_useage>
          IPR_FREE (prev_rfqp);
  840d7c:	e13ffb17 	ldw	r4,-20(fp)
  840d80:	082b3000 	call	82b300 <npfree>

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
  840d84:	e0bffd17 	ldw	r2,-12(fp)
  840d88:	1004c03a 	cmpne	r2,r2,zero
  840d8c:	103fcc1e 	bne	r2,zero,840cc0 <ip_reasm_delete_ire+0xcc>
          IPR_FREE (prev_rfqp);
          }
      }

   /* now free the parent entity */
   ip_reasm_decr_mem_useage (sizeof(IRE));
  840d90:	01002204 	movi	r4,136
  840d94:	083f80c0 	call	83f80c <ip_reasm_decr_mem_useage>
   IPR_FREE (irep);
  840d98:	e13ffe17 	ldw	r4,-8(fp)
  840d9c:	082b3000 	call	82b300 <npfree>

   return IPREASM_OK;
  840da0:	e03fff15 	stw	zero,-4(fp)
  840da4:	e0bfff17 	ldw	r2,-4(fp)
}
  840da8:	e037883a 	mov	sp,fp
  840dac:	dfc00117 	ldw	ra,4(sp)
  840db0:	df000017 	ldw	fp,0(sp)
  840db4:	dec00204 	addi	sp,sp,8
  840db8:	f800283a 	ret

00840dbc <ip_reasm_mark_compact_rfq>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in 
the master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_mark_compact_rfq (IREP irep)
{
  840dbc:	defffa04 	addi	sp,sp,-24
  840dc0:	dfc00515 	stw	ra,20(sp)
  840dc4:	df000415 	stw	fp,16(sp)
  840dc8:	df000404 	addi	fp,sp,16
  840dcc:	e13ffe15 	stw	r4,-8(fp)
   RFQP rfqp;
   u_short i;
   u_char empty_slot_discovered = IPREASM_FALSE;
  840dd0:	e03ffc45 	stb	zero,-15(fp)
   u_char compact = IPREASM_TRUE;
  840dd4:	00800044 	movi	r2,1
  840dd8:	e0bffc05 	stb	r2,-16(fp)

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
  840ddc:	e13ffe17 	ldw	r4,-8(fp)
  840de0:	08407500 	call	840750 <ip_reasm_find_ire>
  840de4:	10803fcc 	andi	r2,r2,255
  840de8:	10800060 	cmpeqi	r2,r2,1
  840dec:	10000a1e 	bne	r2,zero,840e18 <ip_reasm_mark_compact_rfq+0x5c>
   {
      ++ire_stats.bad_irep;
  840df0:	00803934 	movhi	r2,228
  840df4:	10a9f604 	addi	r2,r2,-22568
  840df8:	10800017 	ldw	r2,0(r2)
  840dfc:	10c00044 	addi	r3,r2,1
  840e00:	00803934 	movhi	r2,228
  840e04:	10a9f604 	addi	r2,r2,-22568
  840e08:	10c00015 	stw	r3,0(r2)
      return ENP_PARAM;
  840e0c:	00bffd84 	movi	r2,-10
  840e10:	e0bfff15 	stw	r2,-4(fp)
  840e14:	00003506 	br	840eec <ip_reasm_mark_compact_rfq+0x130>
   }

   rfqp = &(irep->rfq);
  840e18:	e0bffe17 	ldw	r2,-8(fp)
  840e1c:	10800604 	addi	r2,r2,24
  840e20:	e0bffd15 	stw	r2,-12(fp)

   while (rfqp)
  840e24:	00001c06 	br	840e98 <ip_reasm_mark_compact_rfq+0xdc>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  840e28:	e03ffc8d 	sth	zero,-14(fp)
  840e2c:	00001406 	br	840e80 <ip_reasm_mark_compact_rfq+0xc4>
         {
         if (rfqp->bufp [i] == 0)
  840e30:	e0bffc8b 	ldhu	r2,-14(fp)
  840e34:	e0fffd17 	ldw	r3,-12(fp)
  840e38:	1085883a 	add	r2,r2,r2
  840e3c:	1085883a 	add	r2,r2,r2
  840e40:	10c5883a 	add	r2,r2,r3
  840e44:	10800104 	addi	r2,r2,4
  840e48:	10800017 	ldw	r2,0(r2)
  840e4c:	1004c03a 	cmpne	r2,r2,zero
  840e50:	1000031e 	bne	r2,zero,840e60 <ip_reasm_mark_compact_rfq+0xa4>
            {            
            empty_slot_discovered = IPREASM_TRUE;
  840e54:	00800044 	movi	r2,1
  840e58:	e0bffc45 	stb	r2,-15(fp)
  840e5c:	00000506 	br	840e74 <ip_reasm_mark_compact_rfq+0xb8>
            }
         else
            {
            if (empty_slot_discovered) 
  840e60:	e0bffc43 	ldbu	r2,-15(fp)
  840e64:	1005003a 	cmpeq	r2,r2,zero
  840e68:	1000021e 	bne	r2,zero,840e74 <ip_reasm_mark_compact_rfq+0xb8>
               {
               compact = IPREASM_FALSE;
  840e6c:	e03ffc05 	stb	zero,-16(fp)
               break;
  840e70:	00000606 	br	840e8c <ip_reasm_mark_compact_rfq+0xd0>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
  840e74:	e0bffc8b 	ldhu	r2,-14(fp)
  840e78:	10800044 	addi	r2,r2,1
  840e7c:	e0bffc8d 	sth	r2,-14(fp)
  840e80:	e0bffc8b 	ldhu	r2,-14(fp)
  840e84:	10800430 	cmpltui	r2,r2,16
  840e88:	103fe91e 	bne	r2,zero,840e30 <ip_reasm_mark_compact_rfq+0x74>
               compact = IPREASM_FALSE;
               break;
               }
            }
          }
       rfqp = rfqp->next;
  840e8c:	e0bffd17 	ldw	r2,-12(fp)
  840e90:	10800017 	ldw	r2,0(r2)
  840e94:	e0bffd15 	stw	r2,-12(fp)
      return ENP_PARAM;
   }

   rfqp = &(irep->rfq);

   while (rfqp)
  840e98:	e0bffd17 	ldw	r2,-12(fp)
  840e9c:	1004c03a 	cmpne	r2,r2,zero
  840ea0:	103fe11e 	bne	r2,zero,840e28 <ip_reasm_mark_compact_rfq+0x6c>
            }
          }
       rfqp = rfqp->next;
      }

   if (compact) 
  840ea4:	e0bffc03 	ldbu	r2,-16(fp)
  840ea8:	1005003a 	cmpeq	r2,r2,zero
  840eac:	1000071e 	bne	r2,zero,840ecc <ip_reasm_mark_compact_rfq+0x110>
      {
      irep->flags |= IPR_RFQ_COMPACT;
  840eb0:	e0bffe17 	ldw	r2,-8(fp)
  840eb4:	10802103 	ldbu	r2,132(r2)
  840eb8:	10800054 	ori	r2,r2,1
  840ebc:	1007883a 	mov	r3,r2
  840ec0:	e0bffe17 	ldw	r2,-8(fp)
  840ec4:	10c02105 	stb	r3,132(r2)
  840ec8:	00000706 	br	840ee8 <ip_reasm_mark_compact_rfq+0x12c>
      }
   else 
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
  840ecc:	e0bffe17 	ldw	r2,-8(fp)
  840ed0:	10c02103 	ldbu	r3,132(r2)
  840ed4:	00bfff84 	movi	r2,-2
  840ed8:	1884703a 	and	r2,r3,r2
  840edc:	1007883a 	mov	r3,r2
  840ee0:	e0bffe17 	ldw	r2,-8(fp)
  840ee4:	10c02105 	stb	r3,132(r2)
      }

   return IPREASM_OK;
  840ee8:	e03fff15 	stw	zero,-4(fp)
  840eec:	e0bfff17 	ldw	r2,-4(fp)
}
  840ef0:	e037883a 	mov	sp,fp
  840ef4:	dfc00117 	ldw	ra,4(sp)
  840ef8:	df000017 	ldw	fp,0(sp)
  840efc:	dec00204 	addi	sp,sp,8
  840f00:	f800283a 	ret

00840f04 <ipr_stats>:

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
  840f04:	deffec04 	addi	sp,sp,-80
  840f08:	dfc01315 	stw	ra,76(sp)
  840f0c:	df001215 	stw	fp,72(sp)
  840f10:	dc001115 	stw	r16,68(sp)
  840f14:	df001104 	addi	fp,sp,68
  840f18:	e13fff15 	stw	r4,-4(fp)
   unsigned long ticks_elapsed = cticks;
  840f1c:	00802174 	movhi	r2,133
  840f20:	10832604 	addi	r2,r2,3224
  840f24:	10800017 	ldw	r2,0(r2)
  840f28:	e0bffe15 	stw	r2,-8(fp)
   u_short size_ire = sizeof(IRE);
  840f2c:	00802204 	movi	r2,136
  840f30:	e0bffd8d 	sth	r2,-10(fp)
   u_short size_rfq = sizeof(RFQ);
  840f34:	00801904 	movi	r2,100
  840f38:	e0bffd0d 	sth	r2,-12(fp)
   IREP tmpp;
   u_short count = 0;
  840f3c:	e03ffb0d 	sth	zero,-20(fp)
   RFQP rfqp;
   u_short frag_count = 0;
  840f40:	e03ff98d 	sth	zero,-26(fp)
   u_short i;

   ns_printf(pio,"IP reassembly statistics:\n");
  840f44:	e13fff17 	ldw	r4,-4(fp)
  840f48:	01402174 	movhi	r5,133
  840f4c:	29783704 	addi	r5,r5,-7972
  840f50:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
  840f54:	d420cc17 	ldw	r16,-31952(gp)
  840f58:	e13ffe17 	ldw	r4,-8(fp)
  840f5c:	0140fa04 	movi	r5,1000
  840f60:	08053b80 	call	8053b8 <__udivsi3>
  840f64:	e0fffd8b 	ldhu	r3,-10(fp)
  840f68:	e13ffd0b 	ldhu	r4,-12(fp)
  840f6c:	d8800015 	stw	r2,0(sp)
  840f70:	d8c00115 	stw	r3,4(sp)
  840f74:	d9000215 	stw	r4,8(sp)
  840f78:	e13fff17 	ldw	r4,-4(fp)
  840f7c:	01402174 	movhi	r5,133
  840f80:	29783e04 	addi	r5,r5,-7944
  840f84:	800d883a 	mov	r6,r16
  840f88:	e1fffe17 	ldw	r7,-8(fp)
  840f8c:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
  840f90:	00803934 	movhi	r2,228
  840f94:	10a9f604 	addi	r2,r2,-22568
  840f98:	11800117 	ldw	r6,4(r2)
  840f9c:	00803934 	movhi	r2,228
  840fa0:	10a9f604 	addi	r2,r2,-22568
  840fa4:	11c00017 	ldw	r7,0(r2)
  840fa8:	00803934 	movhi	r2,228
  840fac:	10a9f604 	addi	r2,r2,-22568
  840fb0:	11000217 	ldw	r4,8(r2)
  840fb4:	00803934 	movhi	r2,228
  840fb8:	10a9f604 	addi	r2,r2,-22568
  840fbc:	11400317 	ldw	r5,12(r2)
  840fc0:	00803934 	movhi	r2,228
  840fc4:	10a9f604 	addi	r2,r2,-22568
  840fc8:	10c00417 	ldw	r3,16(r2)
  840fcc:	00803934 	movhi	r2,228
  840fd0:	10a9f604 	addi	r2,r2,-22568
  840fd4:	10800517 	ldw	r2,20(r2)
  840fd8:	d9000015 	stw	r4,0(sp)
  840fdc:	d9400115 	stw	r5,4(sp)
  840fe0:	d8c00215 	stw	r3,8(sp)
  840fe4:	d8800315 	stw	r2,12(sp)
  840fe8:	e13fff17 	ldw	r4,-4(fp)
  840fec:	01402174 	movhi	r5,133
  840ff0:	29784e04 	addi	r5,r5,-7880
  840ff4:	0825c540 	call	825c54 <ns_printf>
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
  840ff8:	d1a0cd17 	ldw	r6,-31948(gp)
  840ffc:	e13fff17 	ldw	r4,-4(fp)
  841000:	01402174 	movhi	r5,133
  841004:	29786304 	addi	r5,r5,-7796
  841008:	0825c540 	call	825c54 <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  84100c:	d0a0cd17 	ldw	r2,-31948(gp)
  841010:	e0bffc15 	stw	r2,-16(fp)
  841014:	00008106 	br	84121c <ipr_stats+0x318>
      {
      ++count;
  841018:	e0bffb0b 	ldhu	r2,-20(fp)
  84101c:	10800044 	addi	r2,r2,1
  841020:	e0bffb0d 	sth	r2,-20(fp)
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
  841024:	e0bffc17 	ldw	r2,-16(fp)
  841028:	10800604 	addi	r2,r2,24
  84102c:	e0bffa15 	stw	r2,-24(fp)
      while (rfqp)
  841030:	00001f06 	br	8410b0 <ipr_stats+0x1ac>
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
  841034:	e03ff90d 	sth	zero,-28(fp)
  841038:	00001706 	br	841098 <ipr_stats+0x194>
            {
            if (rfqp->bufp [i] != 0)
  84103c:	e0bff90b 	ldhu	r2,-28(fp)
  841040:	e0fffa17 	ldw	r3,-24(fp)
  841044:	1085883a 	add	r2,r2,r2
  841048:	1085883a 	add	r2,r2,r2
  84104c:	10c5883a 	add	r2,r2,r3
  841050:	10800104 	addi	r2,r2,4
  841054:	10800017 	ldw	r2,0(r2)
  841058:	1005003a 	cmpeq	r2,r2,zero
  84105c:	1000041e 	bne	r2,zero,841070 <ipr_stats+0x16c>
               {
               ++frag_count;            
  841060:	e0bff98b 	ldhu	r2,-26(fp)
  841064:	10800044 	addi	r2,r2,1
  841068:	e0bff98d 	sth	r2,-26(fp)
  84106c:	00000706 	br	84108c <ipr_stats+0x188>
               }
            else
               {
               if (tmpp->flags & IPR_RFQ_COMPACT)
  841070:	e0bffc17 	ldw	r2,-16(fp)
  841074:	10802103 	ldbu	r2,132(r2)
  841078:	10803fcc 	andi	r2,r2,255
  84107c:	1080004c 	andi	r2,r2,1
  841080:	10803fcc 	andi	r2,r2,255
  841084:	1004c03a 	cmpne	r2,r2,zero
  841088:	1000061e 	bne	r2,zero,8410a4 <ipr_stats+0x1a0>
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
  84108c:	e0bff90b 	ldhu	r2,-28(fp)
  841090:	10800044 	addi	r2,r2,1
  841094:	e0bff90d 	sth	r2,-28(fp)
  841098:	e0bff90b 	ldhu	r2,-28(fp)
  84109c:	10800430 	cmpltui	r2,r2,16
  8410a0:	103fe61e 	bne	r2,zero,84103c <ipr_stats+0x138>
                  {
                  break;
                  }
               }
            }
         rfqp = rfqp->next;
  8410a4:	e0bffa17 	ldw	r2,-24(fp)
  8410a8:	10800017 	ldw	r2,0(r2)
  8410ac:	e0bffa15 	stw	r2,-24(fp)
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
      {
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
  8410b0:	e0bffa17 	ldw	r2,-24(fp)
  8410b4:	1004c03a 	cmpne	r2,r2,zero
  8410b8:	103fde1e 	bne	r2,zero,841034 <ipr_stats+0x130>
                  }
               }
            }
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
  8410bc:	e1fff98b 	ldhu	r7,-26(fp)
  8410c0:	e0bffc17 	ldw	r2,-16(fp)
  8410c4:	10800117 	ldw	r2,4(r2)
  8410c8:	1004d63a 	srli	r2,r2,24
  8410cc:	10c03fcc 	andi	r3,r2,255
  8410d0:	e0bffc17 	ldw	r2,-16(fp)
  8410d4:	10800117 	ldw	r2,4(r2)
  8410d8:	1004d23a 	srli	r2,r2,8
  8410dc:	10bfc00c 	andi	r2,r2,65280
  8410e0:	1886b03a 	or	r3,r3,r2
  8410e4:	e0bffc17 	ldw	r2,-16(fp)
  8410e8:	10800117 	ldw	r2,4(r2)
  8410ec:	10bfc00c 	andi	r2,r2,65280
  8410f0:	1004923a 	slli	r2,r2,8
  8410f4:	1886b03a 	or	r3,r3,r2
  8410f8:	e0bffc17 	ldw	r2,-16(fp)
  8410fc:	10800117 	ldw	r2,4(r2)
  841100:	10803fcc 	andi	r2,r2,255
  841104:	1004963a 	slli	r2,r2,24
  841108:	1888b03a 	or	r4,r3,r2
  84110c:	e0bffc17 	ldw	r2,-16(fp)
  841110:	10800217 	ldw	r2,8(r2)
  841114:	1004d63a 	srli	r2,r2,24
  841118:	10c03fcc 	andi	r3,r2,255
  84111c:	e0bffc17 	ldw	r2,-16(fp)
  841120:	10800217 	ldw	r2,8(r2)
  841124:	1004d23a 	srli	r2,r2,8
  841128:	10bfc00c 	andi	r2,r2,65280
  84112c:	1886b03a 	or	r3,r3,r2
  841130:	e0bffc17 	ldw	r2,-16(fp)
  841134:	10800217 	ldw	r2,8(r2)
  841138:	10bfc00c 	andi	r2,r2,65280
  84113c:	1004923a 	slli	r2,r2,8
  841140:	1886b03a 	or	r3,r3,r2
  841144:	e0bffc17 	ldw	r2,-16(fp)
  841148:	10800217 	ldw	r2,8(r2)
  84114c:	10803fcc 	andi	r2,r2,255
  841150:	1004963a 	slli	r2,r2,24
  841154:	188ab03a 	or	r5,r3,r2
  841158:	e0bffc17 	ldw	r2,-16(fp)
  84115c:	10800383 	ldbu	r2,14(r2)
  841160:	11803fcc 	andi	r6,r2,255
  841164:	e0bffc17 	ldw	r2,-16(fp)
  841168:	1080030b 	ldhu	r2,12(r2)
  84116c:	10bfffcc 	andi	r2,r2,65535
  841170:	1004d23a 	srli	r2,r2,8
  841174:	10bfffcc 	andi	r2,r2,65535
  841178:	10c03fcc 	andi	r3,r2,255
  84117c:	e0bffc17 	ldw	r2,-16(fp)
  841180:	1080030b 	ldhu	r2,12(r2)
  841184:	10bfffcc 	andi	r2,r2,65535
  841188:	1004923a 	slli	r2,r2,8
  84118c:	10bfc00c 	andi	r2,r2,65280
  841190:	1886b03a 	or	r3,r3,r2
  841194:	e0bffc17 	ldw	r2,-16(fp)
  841198:	1080040b 	ldhu	r2,16(r2)
  84119c:	123fffcc 	andi	r8,r2,65535
  8411a0:	e0bffc17 	ldw	r2,-16(fp)
  8411a4:	1080048b 	ldhu	r2,18(r2)
  8411a8:	127fffcc 	andi	r9,r2,65535
  8411ac:	e0bffc17 	ldw	r2,-16(fp)
  8411b0:	12800517 	ldw	r10,20(r2)
  8411b4:	e0bffc17 	ldw	r2,-16(fp)
  8411b8:	12c01f17 	ldw	r11,124(r2)
  8411bc:	e0bffc17 	ldw	r2,-16(fp)
  8411c0:	13002017 	ldw	r12,128(r2)
  8411c4:	e0bffc17 	ldw	r2,-16(fp)
  8411c8:	10802103 	ldbu	r2,132(r2)
  8411cc:	10803fcc 	andi	r2,r2,255
  8411d0:	1080004c 	andi	r2,r2,1
  8411d4:	d9000015 	stw	r4,0(sp)
  8411d8:	d9400115 	stw	r5,4(sp)
  8411dc:	d9800215 	stw	r6,8(sp)
  8411e0:	d8c00315 	stw	r3,12(sp)
  8411e4:	da000415 	stw	r8,16(sp)
  8411e8:	da400515 	stw	r9,20(sp)
  8411ec:	da800615 	stw	r10,24(sp)
  8411f0:	dac00715 	stw	r11,28(sp)
  8411f4:	db000815 	stw	r12,32(sp)
  8411f8:	d8800915 	stw	r2,36(sp)
  8411fc:	e13fff17 	ldw	r4,-4(fp)
  841200:	01402174 	movhi	r5,133
  841204:	29786904 	addi	r5,r5,-7772
  841208:	e1bffc17 	ldw	r6,-16(fp)
  84120c:	0825c540 	call	825c54 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
  841210:	e0bffc17 	ldw	r2,-16(fp)
  841214:	10800017 	ldw	r2,0(r2)
  841218:	e0bffc15 	stw	r2,-16(fp)
  84121c:	e0bffc17 	ldw	r2,-16(fp)
  841220:	1004c03a 	cmpne	r2,r2,zero
  841224:	103f7c1e 	bne	r2,zero,841018 <ipr_stats+0x114>
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
      } /* end FOR (IRE linked list) */

   ns_printf(pio,"Found a total of %u IRE entries\n",count);
  841228:	e1bffb0b 	ldhu	r6,-20(fp)
  84122c:	e13fff17 	ldw	r4,-4(fp)
  841230:	01402174 	movhi	r5,133
  841234:	29788404 	addi	r5,r5,-7664
  841238:	0825c540 	call	825c54 <ns_printf>

   return IPREASM_OK;
  84123c:	0005883a 	mov	r2,zero
}
  841240:	e037883a 	mov	sp,fp
  841244:	dfc00217 	ldw	ra,8(sp)
  841248:	df000117 	ldw	fp,4(sp)
  84124c:	dc000017 	ldw	r16,0(sp)
  841250:	dec00304 	addi	sp,sp,12
  841254:	f800283a 	ret

00841258 <ip_reasm_send_icmp_timex>:
OUTPUT: This function always returns IPREASM_OK.
*/

#ifdef FULL_ICMP
u_long ip_reasm_send_icmp_timex (IREP irep)
{
  841258:	defffc04 	addi	sp,sp,-16
  84125c:	dfc00315 	stw	ra,12(sp)
  841260:	df000215 	stw	fp,8(sp)
  841264:	df000204 	addi	fp,sp,8
  841268:	e13fff15 	stw	r4,-4(fp)

   /* we can only send an ICMP Time Exceeded message with code 1 ("fragment reassembly 
    * time exceeded") if we have received the First Fragment (FF) of the original, 
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
  84126c:	e0bfff17 	ldw	r2,-4(fp)
  841270:	10801f17 	ldw	r2,124(r2)
  841274:	1005003a 	cmpeq	r2,r2,zero
  841278:	1000061e 	bne	r2,zero,841294 <ip_reasm_send_icmp_timex+0x3c>
      {
      pip = (struct ip *) irep->l3_hdr;
  84127c:	e0bfff17 	ldw	r2,-4(fp)
  841280:	10802017 	ldw	r2,128(r2)
  841284:	e0bffe15 	stw	r2,-8(fp)
      icmp_timex (pip, TIMEX_REASSY_FAILED);
  841288:	e13ffe17 	ldw	r4,-8(fp)
  84128c:	01400044 	movi	r5,1
  841290:	0849fcc0 	call	849fcc <icmp_timex>
      }

   return IPREASM_OK;
  841294:	0005883a 	mov	r2,zero
}
  841298:	e037883a 	mov	sp,fp
  84129c:	dfc00117 	ldw	ra,4(sp)
  8412a0:	df000017 	ldw	fp,0(sp)
  8412a4:	dec00204 	addi	sp,sp,8
  8412a8:	f800283a 	ret

008412ac <ip_rcv>:
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
  8412ac:	defff204 	addi	sp,sp,-56
  8412b0:	dfc00d15 	stw	ra,52(sp)
  8412b4:	df000c15 	stw	fp,48(sp)
  8412b8:	dc000b15 	stw	r16,44(sp)
  8412bc:	df000b04 	addi	fp,sp,44
  8412c0:	e13ffe15 	stw	r4,-8(fp)
   unsigned hdrlen;  /* length of IP header including options */
   unsigned len;     /* total length including IP header */
   unsigned short int num_pkts;
   PACKET * pktp;
   unsigned char i;
   int rcvrc = -1;
  8412c4:	00bfffc4 	movi	r2,-1
  8412c8:	e0bff515 	stw	r2,-44(fp)
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  8412cc:	00802174 	movhi	r2,133
  8412d0:	10830104 	addi	r2,r2,3076
  8412d4:	10800017 	ldw	r2,0(r2)
  8412d8:	1081000c 	andi	r2,r2,1024
  8412dc:	1005003a 	cmpeq	r2,r2,zero
  8412e0:	1000101e 	bne	r2,zero,841324 <ip_rcv+0x78>
  8412e4:	00802174 	movhi	r2,133
  8412e8:	10830104 	addi	r2,r2,3076
  8412ec:	10800017 	ldw	r2,0(r2)
  8412f0:	1080800c 	andi	r2,r2,512
  8412f4:	1005003a 	cmpeq	r2,r2,zero
  8412f8:	10000a1e 	bne	r2,zero,841324 <ip_rcv+0x78>
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
  8412fc:	e0bffe17 	ldw	r2,-8(fp)
  841300:	14000417 	ldw	r16,16(r2)
  841304:	e0bffe17 	ldw	r2,-8(fp)
  841308:	11000617 	ldw	r4,24(r2)
  84130c:	08239940 	call	823994 <if_netnumber>
  841310:	100d883a 	mov	r6,r2
  841314:	01002174 	movhi	r4,133
  841318:	21388d04 	addi	r4,r4,-7628
  84131c:	800b883a 	mov	r5,r16
  841320:	08076480 	call	807648 <printf>
         p->nb_plen, net_num(p->net));
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   nt = p->net;      /* which interface it came in on */
  841324:	e0bffe17 	ldw	r2,-8(fp)
  841328:	10800617 	ldw	r2,24(r2)
  84132c:	e0bffb15 	stw	r2,-20(fp)
   ip_mib.ipInReceives++;
  841330:	00803934 	movhi	r2,228
  841334:	10a9e204 	addi	r2,r2,-22648
  841338:	10800217 	ldw	r2,8(r2)
  84133c:	10c00044 	addi	r3,r2,1
  841340:	00803934 	movhi	r2,228
  841344:	10a9e204 	addi	r2,r2,-22648
  841348:	10c00215 	stw	r3,8(r2)
   pip = ip_head(p);
  84134c:	e0bffe17 	ldw	r2,-8(fp)
  841350:	10800317 	ldw	r2,12(r2)
  841354:	e0bffd15 	stw	r2,-12(fp)

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
  841358:	e0bffe17 	ldw	r2,-8(fp)
  84135c:	11000417 	ldw	r4,16(r2)
  841360:	e0bffd17 	ldw	r2,-12(fp)
  841364:	1080008b 	ldhu	r2,2(r2)
  841368:	10bfffcc 	andi	r2,r2,65535
  84136c:	1004d23a 	srli	r2,r2,8
  841370:	10bfffcc 	andi	r2,r2,65535
  841374:	10c03fcc 	andi	r3,r2,255
  841378:	e0bffd17 	ldw	r2,-12(fp)
  84137c:	1080008b 	ldhu	r2,2(r2)
  841380:	10bfffcc 	andi	r2,r2,65535
  841384:	1004923a 	slli	r2,r2,8
  841388:	10bfc00c 	andi	r2,r2,65280
  84138c:	1884b03a 	or	r2,r3,r2
  841390:	2080272e 	bgeu	r4,r2,841430 <ip_rcv+0x184>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  841394:	00802174 	movhi	r2,133
  841398:	10830104 	addi	r2,r2,3076
  84139c:	10800017 	ldw	r2,0(r2)
  8413a0:	1081000c 	andi	r2,r2,1024
  8413a4:	1005003a 	cmpeq	r2,r2,zero
  8413a8:	1000111e 	bne	r2,zero,8413f0 <ip_rcv+0x144>
  8413ac:	00802174 	movhi	r2,133
  8413b0:	10830104 	addi	r2,r2,3076
  8413b4:	10800017 	ldw	r2,0(r2)
  8413b8:	1080800c 	andi	r2,r2,512
  8413bc:	1005003a 	cmpeq	r2,r2,zero
  8413c0:	10000b1e 	bne	r2,zero,8413f0 <ip_rcv+0x144>
      {
         dprintf("ip_rcv: bad pkt len\n");
  8413c4:	01002174 	movhi	r4,133
  8413c8:	21389604 	addi	r4,r4,-7592
  8413cc:	08077600 	call	807760 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
  8413d0:	00802174 	movhi	r2,133
  8413d4:	10830104 	addi	r2,r2,3076
  8413d8:	10800017 	ldw	r2,0(r2)
  8413dc:	1080008c 	andi	r2,r2,2
  8413e0:	1005003a 	cmpeq	r2,r2,zero
  8413e4:	1000021e 	bne	r2,zero,8413f0 <ip_rcv+0x144>
  8413e8:	e13ffe17 	ldw	r4,-8(fp)
  8413ec:	083eeb40 	call	83eeb4 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
  8413f0:	00803934 	movhi	r2,228
  8413f4:	10a9e204 	addi	r2,r2,-22648
  8413f8:	10800317 	ldw	r2,12(r2)
  8413fc:	10c00044 	addi	r3,r2,1
  841400:	00803934 	movhi	r2,228
  841404:	10a9e204 	addi	r2,r2,-22648
  841408:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
  84140c:	01000084 	movi	r4,2
  841410:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  841414:	e13ffe17 	ldw	r4,-8(fp)
  841418:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  84141c:	01000084 	movi	r4,2
  841420:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
  841424:	00bff804 	movi	r2,-32
  841428:	e0bfff15 	stw	r2,-4(fp)
  84142c:	00009806 	br	841690 <ip_rcv+0x3e4>
   }

   /* use length from IP header; MAC value may be padded */
   len = htons(pip->ip_len);
  841430:	e0bffd17 	ldw	r2,-12(fp)
  841434:	1080008b 	ldhu	r2,2(r2)
  841438:	10bfffcc 	andi	r2,r2,65535
  84143c:	1004d23a 	srli	r2,r2,8
  841440:	10bfffcc 	andi	r2,r2,65535
  841444:	10c03fcc 	andi	r3,r2,255
  841448:	e0bffd17 	ldw	r2,-12(fp)
  84144c:	1080008b 	ldhu	r2,2(r2)
  841450:	10bfffcc 	andi	r2,r2,65535
  841454:	1004923a 	slli	r2,r2,8
  841458:	10bfc00c 	andi	r2,r2,65280
  84145c:	1884b03a 	or	r2,r3,r2
  841460:	e0bff915 	stw	r2,-28(fp)
   p->nb_plen = len;       /* fix pkt len */
  841464:	e0fffe17 	ldw	r3,-8(fp)
  841468:	e0bff917 	ldw	r2,-28(fp)
  84146c:	18800415 	stw	r2,16(r3)

   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
  841470:	e0bffd17 	ldw	r2,-12(fp)
  841474:	10800003 	ldbu	r2,0(r2)
  841478:	10803fcc 	andi	r2,r2,255
  84147c:	10803c0c 	andi	r2,r2,240
  841480:	1005d13a 	srai	r2,r2,4
  841484:	10800120 	cmpeqi	r2,r2,4
  841488:	1000271e 	bne	r2,zero,841528 <ip_rcv+0x27c>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  84148c:	00802174 	movhi	r2,133
  841490:	10830104 	addi	r2,r2,3076
  841494:	10800017 	ldw	r2,0(r2)
  841498:	1081000c 	andi	r2,r2,1024
  84149c:	1005003a 	cmpeq	r2,r2,zero
  8414a0:	1000111e 	bne	r2,zero,8414e8 <ip_rcv+0x23c>
  8414a4:	00802174 	movhi	r2,133
  8414a8:	10830104 	addi	r2,r2,3076
  8414ac:	10800017 	ldw	r2,0(r2)
  8414b0:	1080800c 	andi	r2,r2,512
  8414b4:	1005003a 	cmpeq	r2,r2,zero
  8414b8:	10000b1e 	bne	r2,zero,8414e8 <ip_rcv+0x23c>
      {
         dprintf("ip_rcv: bad version number\n");
  8414bc:	01002174 	movhi	r4,133
  8414c0:	21389b04 	addi	r4,r4,-7572
  8414c4:	08077600 	call	807760 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
  8414c8:	00802174 	movhi	r2,133
  8414cc:	10830104 	addi	r2,r2,3076
  8414d0:	10800017 	ldw	r2,0(r2)
  8414d4:	1080008c 	andi	r2,r2,2
  8414d8:	1005003a 	cmpeq	r2,r2,zero
  8414dc:	1000021e 	bne	r2,zero,8414e8 <ip_rcv+0x23c>
  8414e0:	e13ffe17 	ldw	r4,-8(fp)
  8414e4:	083eeb40 	call	83eeb4 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
  8414e8:	00803934 	movhi	r2,228
  8414ec:	10a9e204 	addi	r2,r2,-22648
  8414f0:	10800317 	ldw	r2,12(r2)
  8414f4:	10c00044 	addi	r3,r2,1
  8414f8:	00803934 	movhi	r2,228
  8414fc:	10a9e204 	addi	r2,r2,-22648
  841500:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
  841504:	01000084 	movi	r4,2
  841508:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  84150c:	e13ffe17 	ldw	r4,-8(fp)
  841510:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  841514:	01000084 	movi	r4,2
  841518:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
  84151c:	00bff804 	movi	r2,-32
  841520:	e0bfff15 	stw	r2,-4(fp)
  841524:	00005a06 	br	841690 <ip_rcv+0x3e4>
   }

   csum = pip->ip_chksum;
  841528:	e0bffd17 	ldw	r2,-12(fp)
  84152c:	1080028b 	ldhu	r2,10(r2)
  841530:	e0bffc8d 	sth	r2,-14(fp)
   pip->ip_chksum = 0;
  841534:	e0bffd17 	ldw	r2,-12(fp)
  841538:	1000028d 	sth	zero,10(r2)
   hdrlen = ip_hlen(pip);
  84153c:	e0bffd17 	ldw	r2,-12(fp)
  841540:	10800003 	ldbu	r2,0(r2)
  841544:	10803fcc 	andi	r2,r2,255
  841548:	108003cc 	andi	r2,r2,15
  84154c:	1085883a 	add	r2,r2,r2
  841550:	1085883a 	add	r2,r2,r2
  841554:	e0bffa15 	stw	r2,-24(fp)
   tempsum = ~cksum(pip, hdrlen >> 1);
  841558:	e0bffa17 	ldw	r2,-24(fp)
  84155c:	100ad07a 	srli	r5,r2,1
  841560:	e13ffd17 	ldw	r4,-12(fp)
  841564:	08256340 	call	825634 <cksum>
  841568:	0084303a 	nor	r2,zero,r2
  84156c:	e0bffc0d 	sth	r2,-16(fp)

   if (csum != tempsum)
  841570:	e0fffc8b 	ldhu	r3,-14(fp)
  841574:	e0bffc0b 	ldhu	r2,-16(fp)
  841578:	18802a26 	beq	r3,r2,841624 <ip_rcv+0x378>
   {
      pip->ip_chksum = csum;
  84157c:	e0fffd17 	ldw	r3,-12(fp)
  841580:	e0bffc8b 	ldhu	r2,-14(fp)
  841584:	1880028d 	sth	r2,10(r3)
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  841588:	00802174 	movhi	r2,133
  84158c:	10830104 	addi	r2,r2,3076
  841590:	10800017 	ldw	r2,0(r2)
  841594:	1081000c 	andi	r2,r2,1024
  841598:	1005003a 	cmpeq	r2,r2,zero
  84159c:	1000111e 	bne	r2,zero,8415e4 <ip_rcv+0x338>
  8415a0:	00802174 	movhi	r2,133
  8415a4:	10830104 	addi	r2,r2,3076
  8415a8:	10800017 	ldw	r2,0(r2)
  8415ac:	1080800c 	andi	r2,r2,512
  8415b0:	1005003a 	cmpeq	r2,r2,zero
  8415b4:	10000b1e 	bne	r2,zero,8415e4 <ip_rcv+0x338>
      {
         dprintf("ip_rcv: bad xsum\n");
  8415b8:	01002174 	movhi	r4,133
  8415bc:	2138a204 	addi	r4,r4,-7544
  8415c0:	08077600 	call	807760 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
  8415c4:	00802174 	movhi	r2,133
  8415c8:	10830104 	addi	r2,r2,3076
  8415cc:	10800017 	ldw	r2,0(r2)
  8415d0:	1080008c 	andi	r2,r2,2
  8415d4:	1005003a 	cmpeq	r2,r2,zero
  8415d8:	1000021e 	bne	r2,zero,8415e4 <ip_rcv+0x338>
  8415dc:	e13ffe17 	ldw	r4,-8(fp)
  8415e0:	083eeb40 	call	83eeb4 <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
  8415e4:	00803934 	movhi	r2,228
  8415e8:	10a9e204 	addi	r2,r2,-22648
  8415ec:	10800317 	ldw	r2,12(r2)
  8415f0:	10c00044 	addi	r3,r2,1
  8415f4:	00803934 	movhi	r2,228
  8415f8:	10a9e204 	addi	r2,r2,-22648
  8415fc:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
  841600:	01000084 	movi	r4,2
  841604:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  841608:	e13ffe17 	ldw	r4,-8(fp)
  84160c:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  841610:	01000084 	movi	r4,2
  841614:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
  841618:	00bff804 	movi	r2,-32
  84161c:	e0bfff15 	stw	r2,-4(fp)
  841620:	00001b06 	br	841690 <ip_rcv+0x3e4>
   }

   pip->ip_chksum = csum;
  841624:	e0fffd17 	ldw	r3,-12(fp)
  841628:	e0bffc8b 	ldhu	r2,-14(fp)
  84162c:	1880028d 	sth	r2,10(r3)
#endif

    /* start off by assuming that we will only process the "current" packet;
     * these values may get overwritten by the NAT module if it returns
     * more than one packet back to this function (ip_rcv ()) */
    num_pkts = 1;
  841630:	00800044 	movi	r2,1
  841634:	e0bff80d 	sth	r2,-32(fp)
    pktp = &p;
  841638:	e0bffe04 	addi	r2,fp,-8
  84163c:	e0bff715 	stw	r2,-36(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
  841640:	e03ff605 	stb	zero,-40(fp)
  841644:	00000c06 	br	841678 <ip_rcv+0x3cc>
   {
      rcvrc = ip_rcv_phase2 (*(pktp + i));
  841648:	e0bff603 	ldbu	r2,-40(fp)
  84164c:	1085883a 	add	r2,r2,r2
  841650:	1085883a 	add	r2,r2,r2
  841654:	1007883a 	mov	r3,r2
  841658:	e0bff717 	ldw	r2,-36(fp)
  84165c:	1885883a 	add	r2,r3,r2
  841660:	11000017 	ldw	r4,0(r2)
  841664:	08416ac0 	call	8416ac <ip_rcv_phase2>
  841668:	e0bff515 	stw	r2,-44(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
  84166c:	e0bff603 	ldbu	r2,-40(fp)
  841670:	10800044 	addi	r2,r2,1
  841674:	e0bff605 	stb	r2,-40(fp)
  841678:	e0bff603 	ldbu	r2,-40(fp)
  84167c:	10ffffcc 	andi	r3,r2,65535
  841680:	e0bff80b 	ldhu	r2,-32(fp)
  841684:	18bff036 	bltu	r3,r2,841648 <ip_rcv+0x39c>
   if (pktp != &p) nat_free (pktp);
#endif /* NATRT */

   /* when multiple packets are processed in the loop above, the return code
    * contains the return code for the last packet */
   return rcvrc;
  841688:	e0bff517 	ldw	r2,-44(fp)
  84168c:	e0bfff15 	stw	r2,-4(fp)
  841690:	e0bfff17 	ldw	r2,-4(fp)
}
  841694:	e037883a 	mov	sp,fp
  841698:	dfc00217 	ldw	ra,8(sp)
  84169c:	df000117 	ldw	fp,4(sp)
  8416a0:	dc000017 	ldw	r16,0(sp)
  8416a4:	dec00304 	addi	sp,sp,12
  8416a8:	f800283a 	ret

008416ac <ip_rcv_phase2>:


int ip_rcv_phase2 (PACKET p)
{
  8416ac:	defff404 	addi	sp,sp,-48
  8416b0:	dfc00b15 	stw	ra,44(sp)
  8416b4:	df000a15 	stw	fp,40(sp)
  8416b8:	df000a04 	addi	fp,sp,40
  8416bc:	e13ffe15 	stw	r4,-8(fp)

   struct ip * pip;     /* the internet header */
   NET nt;
   unsigned short tempsum;

   pip = ip_head(p);
  8416c0:	e0bffe17 	ldw	r2,-8(fp)
  8416c4:	10800317 	ldw	r2,12(r2)
  8416c8:	e0bffc15 	stw	r2,-16(fp)
   nt = p->net;      /* which interface it came in on */
  8416cc:	e0bffe17 	ldw	r2,-8(fp)
  8416d0:	10800617 	ldw	r2,24(r2)
  8416d4:	e0bffb15 	stw	r2,-20(fp)

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
  8416d8:	e0bffc17 	ldw	r2,-16(fp)
  8416dc:	10800417 	ldw	r2,16(r2)
  8416e0:	1004d63a 	srli	r2,r2,24
  8416e4:	10c03fcc 	andi	r3,r2,255
  8416e8:	e0bffc17 	ldw	r2,-16(fp)
  8416ec:	10800417 	ldw	r2,16(r2)
  8416f0:	1004d23a 	srli	r2,r2,8
  8416f4:	10bfc00c 	andi	r2,r2,65280
  8416f8:	1886b03a 	or	r3,r3,r2
  8416fc:	e0bffc17 	ldw	r2,-16(fp)
  841700:	10800417 	ldw	r2,16(r2)
  841704:	10bfc00c 	andi	r2,r2,65280
  841708:	1004923a 	slli	r2,r2,8
  84170c:	1886b03a 	or	r3,r3,r2
  841710:	e0bffc17 	ldw	r2,-16(fp)
  841714:	10800417 	ldw	r2,16(r2)
  841718:	10803fcc 	andi	r2,r2,255
  84171c:	1004963a 	slli	r2,r2,24
  841720:	1884b03a 	or	r2,r3,r2
  841724:	10fc002c 	andhi	r3,r2,61440
  841728:	00b80034 	movhi	r2,57344
  84172c:	1880181e 	bne	r3,r2,841790 <ip_rcv_phase2+0xe4>
      struct in_multi * inm;
      /*
       * See if we belong to the destination multicast group on the
       * arrival interface.
       */
      inm = lookup_mcast(pip->ip_dest, nt);
  841730:	e0bffc17 	ldw	r2,-16(fp)
  841734:	11000417 	ldw	r4,16(r2)
  841738:	e17ffb17 	ldw	r5,-20(fp)
  84173c:	08423680 	call	842368 <lookup_mcast>
  841740:	e0bff915 	stw	r2,-28(fp)
      if (inm == NULL) 
  841744:	e0bff917 	ldw	r2,-28(fp)
  841748:	1004c03a 	cmpne	r2,r2,zero
  84174c:	10010d1e 	bne	r2,zero,841b84 <ip_rcv_phase2+0x4d8>
      {
         ip_mib.ipOutNoRoutes++;
  841750:	00803934 	movhi	r2,228
  841754:	10a9e204 	addi	r2,r2,-22648
  841758:	10800b17 	ldw	r2,44(r2)
  84175c:	10c00044 	addi	r3,r2,1
  841760:	00803934 	movhi	r2,228
  841764:	10a9e204 	addi	r2,r2,-22648
  841768:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
  84176c:	01000084 	movi	r4,2
  841770:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(p);
  841774:	e13ffe17 	ldw	r4,-8(fp)
  841778:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  84177c:	01000084 	movi	r4,2
  841780:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NOT_MINE);
  841784:	00800084 	movi	r2,2
  841788:	e0bfff15 	stw	r2,-4(fp)
  84178c:	00014406 	br	841ca0 <ip_rcv_phase2+0x5f4>
      else
         goto ours;
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
  841790:	e0bffc17 	ldw	r2,-16(fp)
  841794:	10c00417 	ldw	r3,16(r2)
  841798:	e0bffb17 	ldw	r2,-20(fp)
  84179c:	10800a17 	ldw	r2,40(r2)
  8417a0:	1880f826 	beq	r3,r2,841b84 <ip_rcv_phase2+0x4d8>
  8417a4:	e0bffc17 	ldw	r2,-16(fp)
  8417a8:	10800417 	ldw	r2,16(r2)
  8417ac:	10bfffe0 	cmpeqi	r2,r2,-1
  8417b0:	1000f41e 	bne	r2,zero,841b84 <ip_rcv_phase2+0x4d8>
  8417b4:	e0bffc17 	ldw	r2,-16(fp)
  8417b8:	10c00417 	ldw	r3,16(r2)
  8417bc:	e0bffb17 	ldw	r2,-20(fp)
  8417c0:	10800e17 	ldw	r2,56(r2)
  8417c4:	1880ef26 	beq	r3,r2,841b84 <ip_rcv_phase2+0x4d8>
  8417c8:	e0bffc17 	ldw	r2,-16(fp)
  8417cc:	10c00417 	ldw	r3,16(r2)
  8417d0:	e0bffb17 	ldw	r2,-20(fp)
  8417d4:	10800f17 	ldw	r2,60(r2)
  8417d8:	1880ea26 	beq	r3,r2,841b84 <ip_rcv_phase2+0x4d8>
  8417dc:	e0bffc17 	ldw	r2,-16(fp)
  8417e0:	10c00417 	ldw	r3,16(r2)
  8417e4:	e0bffb17 	ldw	r2,-20(fp)
  8417e8:	10801017 	ldw	r2,64(r2)
  8417ec:	1880e526 	beq	r3,r2,841b84 <ip_rcv_phase2+0x4d8>
  8417f0:	e0bffb17 	ldw	r2,-20(fp)
  8417f4:	10c00a17 	ldw	r3,40(r2)
  8417f8:	e0bffb17 	ldw	r2,-20(fp)
  8417fc:	10800c17 	ldw	r2,48(r2)
  841800:	0084303a 	nor	r2,zero,r2
  841804:	1884703a 	and	r2,r3,r2
  841808:	1005003a 	cmpeq	r2,r2,zero
  84180c:	1000dd1e 	bne	r2,zero,841b84 <ip_rcv_phase2+0x4d8>
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  841810:	00802174 	movhi	r2,133
  841814:	10830104 	addi	r2,r2,3076
  841818:	10800017 	ldw	r2,0(r2)
  84181c:	1081000c 	andi	r2,r2,1024
  841820:	1005003a 	cmpeq	r2,r2,zero
  841824:	1000181e 	bne	r2,zero,841888 <ip_rcv_phase2+0x1dc>
  841828:	00802174 	movhi	r2,133
  84182c:	10830104 	addi	r2,r2,3076
  841830:	10800017 	ldw	r2,0(r2)
  841834:	1080800c 	andi	r2,r2,512
  841838:	1005003a 	cmpeq	r2,r2,zero
  84183c:	1000121e 	bne	r2,zero,841888 <ip_rcv_phase2+0x1dc>
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
  841840:	e0bffc17 	ldw	r2,-16(fp)
  841844:	10800417 	ldw	r2,16(r2)
  841848:	11403fcc 	andi	r5,r2,255
  84184c:	e0bffc17 	ldw	r2,-16(fp)
  841850:	10800417 	ldw	r2,16(r2)
  841854:	1004d23a 	srli	r2,r2,8
  841858:	11803fcc 	andi	r6,r2,255
  84185c:	e0bffc17 	ldw	r2,-16(fp)
  841860:	10800417 	ldw	r2,16(r2)
  841864:	1004d43a 	srli	r2,r2,16
  841868:	11c03fcc 	andi	r7,r2,255
  84186c:	e0bffc17 	ldw	r2,-16(fp)
  841870:	10800417 	ldw	r2,16(r2)
  841874:	1004d63a 	srli	r2,r2,24
  841878:	d8800015 	stw	r2,0(sp)
  84187c:	01002174 	movhi	r4,133
  841880:	2138a704 	addi	r4,r4,-7524
  841884:	08076480 	call	807648 <printf>

#ifdef IP_ROUTING    /* if multi-homed router, try to route */
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
  841888:	00803934 	movhi	r2,228
  84188c:	10a9e204 	addi	r2,r2,-22648
  841890:	10800017 	ldw	r2,0(r2)
  841894:	10800098 	cmpnei	r2,r2,2
  841898:	1000101e 	bne	r2,zero,8418dc <ip_rcv_phase2+0x230>
      {
         ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
  84189c:	00803934 	movhi	r2,228
  8418a0:	10a9e204 	addi	r2,r2,-22648
  8418a4:	10800a17 	ldw	r2,40(r2)
  8418a8:	10c00044 	addi	r3,r2,1
  8418ac:	00803934 	movhi	r2,228
  8418b0:	10a9e204 	addi	r2,r2,-22648
  8418b4:	10c00a15 	stw	r3,40(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
  8418b8:	01000084 	movi	r4,2
  8418bc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
         pk_free(p);
  8418c0:	e13ffe17 	ldw	r4,-8(fp)
  8418c4:	0829f180 	call	829f18 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8418c8:	01000084 	movi	r4,2
  8418cc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_NO_ROUTE;
  8418d0:	00bff7c4 	movi	r2,-33
  8418d4:	e0bfff15 	stw	r2,-4(fp)
  8418d8:	0000f106 	br	841ca0 <ip_rcv_phase2+0x5f4>
         NET outnet;
#ifdef IP_FRAGMENTS
         int err;
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
  8418dc:	00803934 	movhi	r2,228
  8418e0:	10a9e204 	addi	r2,r2,-22648
  8418e4:	10800517 	ldw	r2,20(r2)
  8418e8:	10c00044 	addi	r3,r2,1
  8418ec:	00803934 	movhi	r2,228
  8418f0:	10a9e204 	addi	r2,r2,-22648
  8418f4:	10c00515 	stw	r3,20(r2)
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
  8418f8:	e0bffc17 	ldw	r2,-16(fp)
  8418fc:	10800203 	ldbu	r2,8(r2)
  841900:	10803fcc 	andi	r2,r2,255
  841904:	108000a8 	cmpgeui	r2,r2,2
  841908:	10001b1e 	bne	r2,zero,841978 <ip_rcv_phase2+0x2cc>
         {
            ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
  84190c:	00803934 	movhi	r2,228
  841910:	10a9e204 	addi	r2,r2,-22648
  841914:	10800a17 	ldw	r2,40(r2)
  841918:	10c00044 	addi	r3,r2,1
  84191c:	00803934 	movhi	r2,228
  841920:	10a9e204 	addi	r2,r2,-22648
  841924:	10c00a15 	stw	r3,40(r2)
#ifdef FULL_ICMP
            icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, (TIMEX <<8), p->net);
  841928:	e0bffc17 	ldw	r2,-16(fp)
  84192c:	11000317 	ldw	r4,12(r2)
  841930:	e0bffe17 	ldw	r2,-8(fp)
  841934:	10800617 	ldw	r2,24(r2)
  841938:	11400a17 	ldw	r5,40(r2)
  84193c:	e0bffe17 	ldw	r2,-8(fp)
  841940:	10800617 	ldw	r2,24(r2)
  841944:	d8800015 	stw	r2,0(sp)
  841948:	e1bffc17 	ldw	r6,-16(fp)
  84194c:	01c2c004 	movi	r7,2816
  841950:	0849c7c0 	call	849c7c <icmp_destun>
#endif   /* FULL_ICMP */
            LOCK_NET_RESOURCE(FREEQ_RESID);
  841954:	01000084 	movi	r4,2
  841958:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(p);
  84195c:	e13ffe17 	ldw	r4,-8(fp)
  841960:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  841964:	01000084 	movi	r4,2
  841968:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
  84196c:	00bff7c4 	movi	r2,-33
  841970:	e0bfff15 	stw	r2,-4(fp)
  841974:	0000ca06 	br	841ca0 <ip_rcv_phase2+0x5f4>
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
  841978:	e0bffc17 	ldw	r2,-16(fp)
  84197c:	10c00417 	ldw	r3,16(r2)
  841980:	e0bffe17 	ldw	r2,-8(fp)
  841984:	10c00715 	stw	r3,28(r2)
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
  841988:	e0bffe17 	ldw	r2,-8(fp)
  84198c:	11000717 	ldw	r4,28(r2)
  841990:	e17ffd04 	addi	r5,fp,-12
  841994:	083f16c0 	call	83f16c <iproute>
  841998:	e0bff815 	stw	r2,-32(fp)
  84199c:	e0bff817 	ldw	r2,-32(fp)
  8419a0:	1004c03a 	cmpne	r2,r2,zero
  8419a4:	1000101e 	bne	r2,zero,8419e8 <ip_rcv_phase2+0x33c>
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
  8419a8:	00803934 	movhi	r2,228
  8419ac:	10a9e204 	addi	r2,r2,-22648
  8419b0:	10800b17 	ldw	r2,44(r2)
  8419b4:	10c00044 	addi	r3,r2,1
  8419b8:	00803934 	movhi	r2,228
  8419bc:	10a9e204 	addi	r2,r2,-22648
  8419c0:	10c00b15 	stw	r3,44(r2)
            LOCK_NET_RESOURCE(FREEQ_RESID);
  8419c4:	01000084 	movi	r4,2
  8419c8:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
            pk_free(p);
  8419cc:	e13ffe17 	ldw	r4,-8(fp)
  8419d0:	0829f180 	call	829f18 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8419d4:	01000084 	movi	r4,2
  8419d8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
  8419dc:	00bff7c4 	movi	r2,-33
  8419e0:	e0bfff15 	stw	r2,-4(fp)
  8419e4:	0000ae06 	br	841ca0 <ip_rcv_phase2+0x5f4>
         /* Check to see if the packet was is addressed to one of our IP
          * addresses other than the interface it was received on. If so,
          * routing should have returned that interface and we can trap this
          * situation by checking the interfaces IP address.
          */
         if(pip->ip_dest == outnet->n_ipaddr)
  8419e8:	e0bffc17 	ldw	r2,-16(fp)
  8419ec:	10c00417 	ldw	r3,16(r2)
  8419f0:	e0bff817 	ldw	r2,-32(fp)
  8419f4:	10800a17 	ldw	r2,40(r2)
  8419f8:	18806226 	beq	r3,r2,841b84 <ip_rcv_phase2+0x4d8>
            goto ours;

         /* Make sure the packet is not a subnet broadcast for either the
          * source or destination network.
          */
         if((pip->ip_dest == outnet->n_netbr) ||
  8419fc:	e0bffc17 	ldw	r2,-16(fp)
  841a00:	10c00417 	ldw	r3,16(r2)
  841a04:	e0bff817 	ldw	r2,-32(fp)
  841a08:	10800e17 	ldw	r2,56(r2)
  841a0c:	18805d26 	beq	r3,r2,841b84 <ip_rcv_phase2+0x4d8>
  841a10:	e0bffc17 	ldw	r2,-16(fp)
  841a14:	10c00417 	ldw	r3,16(r2)
  841a18:	e0bffe17 	ldw	r2,-8(fp)
  841a1c:	10800617 	ldw	r2,24(r2)
  841a20:	10800e17 	ldw	r2,56(r2)
  841a24:	18805726 	beq	r3,r2,841b84 <ip_rcv_phase2+0x4d8>
         {
            goto ours;            
         }

         /* Routed OK, prepare to send */
         p->net = outnet;           /* set iface to send on */
  841a28:	e0fffe17 	ldw	r3,-8(fp)
  841a2c:	e0bff817 	ldw	r2,-32(fp)
  841a30:	18800615 	stw	r2,24(r3)
            }
         }
#endif   /* IPSEC */

         /* see if packet is too big for media of dest net */
         if ((p->nb_plen + p->net->n_lnh) > (unsigned)outnet->n_mtu)
  841a34:	e0bffe17 	ldw	r2,-8(fp)
  841a38:	10c00417 	ldw	r3,16(r2)
  841a3c:	e0bffe17 	ldw	r2,-8(fp)
  841a40:	10800617 	ldw	r2,24(r2)
  841a44:	10800817 	ldw	r2,32(r2)
  841a48:	1887883a 	add	r3,r3,r2
  841a4c:	e0bff817 	ldw	r2,-32(fp)
  841a50:	10800917 	ldw	r2,36(r2)
  841a54:	10c0372e 	bgeu	r2,r3,841b34 <ip_rcv_phase2+0x488>
         {
#ifdef IP_FRAGMENTS
            /* see if we're not supposed to fragment it */
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
  841a58:	e0bffc17 	ldw	r2,-16(fp)
  841a5c:	1080018b 	ldhu	r2,6(r2)
  841a60:	10bfffcc 	andi	r2,r2,65535
  841a64:	1004d23a 	srli	r2,r2,8
  841a68:	10bfffcc 	andi	r2,r2,65535
  841a6c:	10c03fcc 	andi	r3,r2,255
  841a70:	e0bffc17 	ldw	r2,-16(fp)
  841a74:	1080018b 	ldhu	r2,6(r2)
  841a78:	10bfffcc 	andi	r2,r2,65535
  841a7c:	1004923a 	slli	r2,r2,8
  841a80:	10bfc00c 	andi	r2,r2,65280
  841a84:	1884b03a 	or	r2,r3,r2
  841a88:	1090000c 	andi	r2,r2,16384
  841a8c:	1005003a 	cmpeq	r2,r2,zero
  841a90:	10001b1e 	bne	r2,zero,841b00 <ip_rcv_phase2+0x454>
            {
#ifdef FULL_ICMP
               icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
  841a94:	e0bffc17 	ldw	r2,-16(fp)
  841a98:	11000317 	ldw	r4,12(r2)
  841a9c:	e0bffe17 	ldw	r2,-8(fp)
  841aa0:	10800617 	ldw	r2,24(r2)
  841aa4:	11400a17 	ldw	r5,40(r2)
  841aa8:	e0bffe17 	ldw	r2,-8(fp)
  841aac:	10800617 	ldw	r2,24(r2)
  841ab0:	d8800015 	stw	r2,0(sp)
  841ab4:	e1bffc17 	ldw	r6,-16(fp)
  841ab8:	01c00104 	movi	r7,4
  841abc:	0849c7c0 	call	849c7c <icmp_destun>
#endif   /* FULL_ICMP */
               ip_mib.ipFragFails++;
  841ac0:	00803934 	movhi	r2,228
  841ac4:	10a9e204 	addi	r2,r2,-22648
  841ac8:	10801117 	ldw	r2,68(r2)
  841acc:	10c00044 	addi	r3,r2,1
  841ad0:	00803934 	movhi	r2,228
  841ad4:	10a9e204 	addi	r2,r2,-22648
  841ad8:	10c01115 	stw	r3,68(r2)
               LOCK_NET_RESOURCE(FREEQ_RESID);
  841adc:	01000084 	movi	r4,2
  841ae0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
               pk_free(p);
  841ae4:	e13ffe17 	ldw	r4,-8(fp)
  841ae8:	0829f180 	call	829f18 <pk_free>
               UNLOCK_NET_RESOURCE(FREEQ_RESID);
  841aec:	01000084 	movi	r4,2
  841af0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
               IN_PROFILER(PF_IP, PF_EXIT);
               return ENP_LOGIC;
  841af4:	00bffd44 	movi	r2,-11
  841af8:	e0bfff15 	stw	r2,-4(fp)
  841afc:	00006806 	br	841ca0 <ip_rcv_phase2+0x5f4>
            }

            /* fall to here if we're going to fragment it. */
            pip->ip_time--;            /* datagram's hop count */
  841b00:	e0bffc17 	ldw	r2,-16(fp)
  841b04:	10800203 	ldbu	r2,8(r2)
  841b08:	10bfffc4 	addi	r2,r2,-1
  841b0c:	1007883a 	mov	r3,r2
  841b10:	e0bffc17 	ldw	r2,-16(fp)
  841b14:	10c00205 	stb	r3,8(r2)
            err = ip_fragment(p, firsthop);
  841b18:	e17ffd17 	ldw	r5,-12(fp)
  841b1c:	e13ffe17 	ldw	r4,-8(fp)
  841b20:	083e7e40 	call	83e7e4 <ip_fragment>
  841b24:	e0bff715 	stw	r2,-36(fp)
            IN_PROFILER(PF_IP, PF_EXIT);
            return(err);
  841b28:	e0bff717 	ldw	r2,-36(fp)
  841b2c:	e0bfff15 	stw	r2,-4(fp)
  841b30:	00005b06 	br	841ca0 <ip_rcv_phase2+0x5f4>
            pk_free(p);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
  841b34:	e0bffc17 	ldw	r2,-16(fp)
  841b38:	10800203 	ldbu	r2,8(r2)
  841b3c:	10bfffc4 	addi	r2,r2,-1
  841b40:	1007883a 	mov	r3,r2
  841b44:	e0bffc17 	ldw	r2,-16(fp)
  841b48:	10c00205 	stb	r3,8(r2)
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
  841b4c:	e0bffc17 	ldw	r2,-16(fp)
  841b50:	1000028d 	sth	zero,10(r2)
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
  841b54:	e13ffc17 	ldw	r4,-16(fp)
  841b58:	01400284 	movi	r5,10
  841b5c:	08256340 	call	825634 <cksum>
  841b60:	0084303a 	nor	r2,zero,r2
  841b64:	1007883a 	mov	r3,r2
  841b68:	e0bffc17 	ldw	r2,-16(fp)
  841b6c:	10c0028d 	sth	r3,10(r2)
         IN_PROFILER(PF_IP, PF_EXIT);
#ifdef RF_SIMULATION
         if(rfsim_routing)
            return(rfsim_send(p, firsthop));
#endif   /* RF_SIMULATION */
         return(ip2mac(p, firsthop));
  841b70:	e17ffd17 	ldw	r5,-12(fp)
  841b74:	e13ffe17 	ldw	r4,-8(fp)
  841b78:	08233d00 	call	8233d0 <ip2mac>
  841b7c:	e0bfff15 	stw	r2,-4(fp)
  841b80:	00004706 	br	841ca0 <ip_rcv_phase2+0x5f4>
#if defined (IP_MULTICAST) || defined (IP_ROUTING)
ours:
#endif

   /* Test for fragment: */
   tempsum = htons(pip->ip_flgs_foff); /* borrow cksum variable */
  841b84:	e0bffc17 	ldw	r2,-16(fp)
  841b88:	1080018b 	ldhu	r2,6(r2)
  841b8c:	10bfffcc 	andi	r2,r2,65535
  841b90:	1004d23a 	srli	r2,r2,8
  841b94:	10803fcc 	andi	r2,r2,255
  841b98:	1009883a 	mov	r4,r2
  841b9c:	e0bffc17 	ldw	r2,-16(fp)
  841ba0:	1080018b 	ldhu	r2,6(r2)
  841ba4:	10bfffcc 	andi	r2,r2,65535
  841ba8:	1004923a 	slli	r2,r2,8
  841bac:	1007883a 	mov	r3,r2
  841bb0:	00bfc004 	movi	r2,-256
  841bb4:	1884703a 	and	r2,r3,r2
  841bb8:	2084b03a 	or	r2,r4,r2
  841bbc:	e0bffa0d 	sth	r2,-24(fp)
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
  841bc0:	e0bffa0b 	ldhu	r2,-24(fp)
  841bc4:	1088000c 	andi	r2,r2,8192
  841bc8:	1004c03a 	cmpne	r2,r2,zero
  841bcc:	1000061e 	bne	r2,zero,841be8 <ip_rcv_phase2+0x53c>
  841bd0:	e0fffa0b 	ldhu	r3,-24(fp)
  841bd4:	00bffff4 	movhi	r2,65535
  841bd8:	1087ffc4 	addi	r2,r2,8191
  841bdc:	1884703a 	and	r2,r3,r2
  841be0:	1005003a 	cmpeq	r2,r2,zero
  841be4:	10002b1e 	bne	r2,zero,841c94 <ip_rcv_phase2+0x5e8>
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  841be8:	00802174 	movhi	r2,133
  841bec:	10830104 	addi	r2,r2,3076
  841bf0:	10800017 	ldw	r2,0(r2)
  841bf4:	1081000c 	andi	r2,r2,1024
  841bf8:	1005003a 	cmpeq	r2,r2,zero
  841bfc:	10001a1e 	bne	r2,zero,841c68 <ip_rcv_phase2+0x5bc>
  841c00:	00802174 	movhi	r2,133
  841c04:	10830104 	addi	r2,r2,3076
  841c08:	10800017 	ldw	r2,0(r2)
  841c0c:	1080800c 	andi	r2,r2,512
  841c10:	1005003a 	cmpeq	r2,r2,zero
  841c14:	1000141e 	bne	r2,zero,841c68 <ip_rcv_phase2+0x5bc>
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
  841c18:	e0bffc17 	ldw	r2,-16(fp)
  841c1c:	10800317 	ldw	r2,12(r2)
  841c20:	11403fcc 	andi	r5,r2,255
  841c24:	e0bffc17 	ldw	r2,-16(fp)
  841c28:	10800317 	ldw	r2,12(r2)
  841c2c:	1004d23a 	srli	r2,r2,8
  841c30:	11803fcc 	andi	r6,r2,255
  841c34:	e0bffc17 	ldw	r2,-16(fp)
  841c38:	10800317 	ldw	r2,12(r2)
  841c3c:	1004d43a 	srli	r2,r2,16
  841c40:	11c03fcc 	andi	r7,r2,255
  841c44:	e0bffc17 	ldw	r2,-16(fp)
  841c48:	10800317 	ldw	r2,12(r2)
  841c4c:	1004d63a 	srli	r2,r2,24
  841c50:	d8800015 	stw	r2,0(sp)
  841c54:	01002174 	movhi	r4,133
  841c58:	2138b304 	addi	r4,r4,-7476
  841c5c:	08076480 	call	807648 <printf>
          PUSH_IPADDR(pip->ip_src));
         ip_dump(p);
  841c60:	e13ffe17 	ldw	r4,-8(fp)
  841c64:	083eeb40 	call	83eeb4 <ip_dump>
      }
#endif
      ip_mib.ipReasmReqds++;     /* got a reassemble request; ie a frag */
  841c68:	00803934 	movhi	r2,228
  841c6c:	10a9e204 	addi	r2,r2,-22648
  841c70:	10800d17 	ldw	r2,52(r2)
  841c74:	10c00044 	addi	r3,r2,1
  841c78:	00803934 	movhi	r2,228
  841c7c:	10a9e204 	addi	r2,r2,-22648
  841c80:	10c00d15 	stw	r3,52(r2)
#ifdef IP_FRAGMENTS
      return(ip_reassm(p));
  841c84:	e13ffe17 	ldw	r4,-8(fp)
  841c88:	083fb8c0 	call	83fb8c <ip_reassm>
  841c8c:	e0bfff15 	stw	r2,-4(fp)
  841c90:	00000306 	br	841ca0 <ip_rcv_phase2+0x5f4>
   {
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
  841c94:	e13ffe17 	ldw	r4,-8(fp)
  841c98:	0841cb80 	call	841cb8 <ip_demux>
  841c9c:	e0bfff15 	stw	r2,-4(fp)
  841ca0:	e0bfff17 	ldw	r2,-4(fp)
}
  841ca4:	e037883a 	mov	sp,fp
  841ca8:	dfc00117 	ldw	ra,4(sp)
  841cac:	df000017 	ldw	fp,0(sp)
  841cb0:	dec00204 	addi	sp,sp,8
  841cb4:	f800283a 	ret

00841cb8 <ip_demux>:
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
  841cb8:	defff704 	addi	sp,sp,-36
  841cbc:	dfc00815 	stw	ra,32(sp)
  841cc0:	df000715 	stw	fp,28(sp)
  841cc4:	df000704 	addi	fp,sp,28
  841cc8:	e13ffd15 	stw	r4,-12(fp)
   int   err;

   /* The packet is verified; the header is correct. Now we have
    * to demultiplex it among our internet connections.
    */
   pip = (struct ip *)(p->nb_prot);
  841ccc:	e0bffd17 	ldw	r2,-12(fp)
  841cd0:	10800317 	ldw	r2,12(r2)
  841cd4:	e0bffc15 	stw	r2,-16(fp)

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
  841cd8:	e0bffc17 	ldw	r2,-16(fp)
  841cdc:	10800003 	ldbu	r2,0(r2)
  841ce0:	10803fcc 	andi	r2,r2,255
  841ce4:	10801160 	cmpeqi	r2,r2,69
  841ce8:	1000131e 	bne	r2,zero,841d38 <ip_demux+0x80>
   {
      if((pip->ip_ver_ihl < 0x45) ||
  841cec:	e0bffc17 	ldw	r2,-16(fp)
  841cf0:	10800003 	ldbu	r2,0(r2)
  841cf4:	10803fcc 	andi	r2,r2,255
  841cf8:	10801170 	cmpltui	r2,r2,69
  841cfc:	1000051e 	bne	r2,zero,841d14 <ip_demux+0x5c>
  841d00:	e0bffc17 	ldw	r2,-16(fp)
  841d04:	10800003 	ldbu	r2,0(r2)
  841d08:	10803fcc 	andi	r2,r2,255
  841d0c:	10801230 	cmpltui	r2,r2,72
  841d10:	1000091e 	bne	r2,zero,841d38 <ip_demux+0x80>
         (pip->ip_ver_ihl > 0x47))
      {
         dprintf("ip_demux: bad IP type 0x%x\n", pip->ip_ver_ihl);
  841d14:	e0bffc17 	ldw	r2,-16(fp)
  841d18:	10800003 	ldbu	r2,0(r2)
  841d1c:	11403fcc 	andi	r5,r2,255
  841d20:	01002174 	movhi	r4,133
  841d24:	2138bc04 	addi	r4,r4,-7440
  841d28:	08076480 	call	807648 <printf>
         return ENP_LOGIC;
  841d2c:	00bffd44 	movi	r2,-11
  841d30:	e0bfff15 	stw	r2,-4(fp)
  841d34:	0000e606 	br	8420d0 <ip_demux+0x418>

   /* for profiling purposes count the upper layers (UDP, ICMP) in the IP
    * profile bucket. TCP will insert it's own nested profile calls 
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;
  841d38:	e0bffc17 	ldw	r2,-16(fp)
  841d3c:	10c00317 	ldw	r3,12(r2)
  841d40:	e0bffd17 	ldw	r2,-12(fp)
  841d44:	10c00715 	stw	r3,28(r2)

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  841d48:	00802174 	movhi	r2,133
  841d4c:	10830104 	addi	r2,r2,3076
  841d50:	10800017 	ldw	r2,0(r2)
  841d54:	1081000c 	andi	r2,r2,1024
  841d58:	1005003a 	cmpeq	r2,r2,zero
  841d5c:	1000241e 	bne	r2,zero,841df0 <ip_demux+0x138>
  841d60:	00802174 	movhi	r2,133
  841d64:	10830104 	addi	r2,r2,3076
  841d68:	10800017 	ldw	r2,0(r2)
  841d6c:	1080800c 	andi	r2,r2,512
  841d70:	1005003a 	cmpeq	r2,r2,zero
  841d74:	10001e1e 	bne	r2,zero,841df0 <ip_demux+0x138>
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
  841d78:	e0bffc17 	ldw	r2,-16(fp)
  841d7c:	10800243 	ldbu	r2,9(r2)
  841d80:	11403fcc 	andi	r5,r2,255
  841d84:	e0bffc17 	ldw	r2,-16(fp)
  841d88:	10800317 	ldw	r2,12(r2)
  841d8c:	11803fcc 	andi	r6,r2,255
  841d90:	e0bffc17 	ldw	r2,-16(fp)
  841d94:	10800317 	ldw	r2,12(r2)
  841d98:	1004d23a 	srli	r2,r2,8
  841d9c:	11c03fcc 	andi	r7,r2,255
  841da0:	e0bffc17 	ldw	r2,-16(fp)
  841da4:	10800317 	ldw	r2,12(r2)
  841da8:	1004d43a 	srli	r2,r2,16
  841dac:	10c03fcc 	andi	r3,r2,255
  841db0:	e0bffc17 	ldw	r2,-16(fp)
  841db4:	10800317 	ldw	r2,12(r2)
  841db8:	1004d63a 	srli	r2,r2,24
  841dbc:	d8c00015 	stw	r3,0(sp)
  841dc0:	d8800115 	stw	r2,4(sp)
  841dc4:	01002174 	movhi	r4,133
  841dc8:	2138c304 	addi	r4,r4,-7412
  841dcc:	08076480 	call	807648 <printf>
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
      if (NDEBUG & DUMP) ip_dump(p);
  841dd0:	00802174 	movhi	r2,133
  841dd4:	10830104 	addi	r2,r2,3076
  841dd8:	10800017 	ldw	r2,0(r2)
  841ddc:	1080008c 	andi	r2,r2,2
  841de0:	1005003a 	cmpeq	r2,r2,zero
  841de4:	1000021e 	bne	r2,zero,841df0 <ip_demux+0x138>
  841de8:	e13ffd17 	ldw	r4,-12(fp)
  841dec:	083eeb40 	call	83eeb4 <ip_dump>
   }
#endif

   switch (pip->ip_prot)
  841df0:	e0bffc17 	ldw	r2,-16(fp)
  841df4:	10800243 	ldbu	r2,9(r2)
  841df8:	10803fcc 	andi	r2,r2,255
  841dfc:	e0bffe15 	stw	r2,-8(fp)
  841e00:	e0fffe17 	ldw	r3,-8(fp)
  841e04:	188000a0 	cmpeqi	r2,r3,2
  841e08:	1000241e 	bne	r2,zero,841e9c <ip_demux+0x1e4>
  841e0c:	e0fffe17 	ldw	r3,-8(fp)
  841e10:	188000c8 	cmpgei	r2,r3,3
  841e14:	1000041e 	bne	r2,zero,841e28 <ip_demux+0x170>
  841e18:	e0fffe17 	ldw	r3,-8(fp)
  841e1c:	18800060 	cmpeqi	r2,r3,1
  841e20:	1000131e 	bne	r2,zero,841e70 <ip_demux+0x1b8>
  841e24:	00003306 	br	841ef4 <ip_demux+0x23c>
  841e28:	e0fffe17 	ldw	r3,-8(fp)
  841e2c:	188001a0 	cmpeqi	r2,r3,6
  841e30:	1000251e 	bne	r2,zero,841ec8 <ip_demux+0x210>
  841e34:	e0fffe17 	ldw	r3,-8(fp)
  841e38:	18800460 	cmpeqi	r2,r3,17
  841e3c:	1000011e 	bne	r2,zero,841e44 <ip_demux+0x18c>
  841e40:	00002c06 	br	841ef4 <ip_demux+0x23c>
   {
   case UDP_PROT:
      ip_mib.ipInDelivers++;
  841e44:	00803934 	movhi	r2,228
  841e48:	10a9e204 	addi	r2,r2,-22648
  841e4c:	10800817 	ldw	r2,32(r2)
  841e50:	10c00044 	addi	r3,r2,1
  841e54:	00803934 	movhi	r2,228
  841e58:	10a9e204 	addi	r2,r2,-22648
  841e5c:	10c00815 	stw	r3,32(r2)
      err = udpdemux(p);
  841e60:	e13ffd17 	ldw	r4,-12(fp)
  841e64:	08430fc0 	call	8430fc <udpdemux>
  841e68:	e0bffb15 	stw	r2,-20(fp)
      break;
  841e6c:	00002b06 	br	841f1c <ip_demux+0x264>
   case ICMP_PROT:
      ip_mib.ipInDelivers++;
  841e70:	00803934 	movhi	r2,228
  841e74:	10a9e204 	addi	r2,r2,-22648
  841e78:	10800817 	ldw	r2,32(r2)
  841e7c:	10c00044 	addi	r3,r2,1
  841e80:	00803934 	movhi	r2,228
  841e84:	10a9e204 	addi	r2,r2,-22648
  841e88:	10c00815 	stw	r3,32(r2)
      err = icmprcv(p);
  841e8c:	e13ffd17 	ldw	r4,-12(fp)
  841e90:	08490480 	call	849048 <icmprcv>
  841e94:	e0bffb15 	stw	r2,-20(fp)
      break;
  841e98:	00002006 	br	841f1c <ip_demux+0x264>
#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   case IGMP_PROT:
      ip_mib.ipInDelivers++;
  841e9c:	00803934 	movhi	r2,228
  841ea0:	10a9e204 	addi	r2,r2,-22648
  841ea4:	10800817 	ldw	r2,32(r2)
  841ea8:	10c00044 	addi	r3,r2,1
  841eac:	00803934 	movhi	r2,228
  841eb0:	10a9e204 	addi	r2,r2,-22648
  841eb4:	10c00815 	stw	r3,32(r2)
      err = igmp_input(p);
  841eb8:	e13ffd17 	ldw	r4,-12(fp)
  841ebc:	0823ad40 	call	823ad4 <igmp_input>
  841ec0:	e0bffb15 	stw	r2,-20(fp)
      break;
  841ec4:	00001506 	br	841f1c <ip_demux+0x264>
#endif   /* IP_MULTICAST and (IGMPv1 or IGMPv2) */
#ifdef INCLUDE_TCP
   case TCP_PROT:
      ip_mib.ipInDelivers++;
  841ec8:	00803934 	movhi	r2,228
  841ecc:	10a9e204 	addi	r2,r2,-22648
  841ed0:	10800817 	ldw	r2,32(r2)
  841ed4:	10c00044 	addi	r3,r2,1
  841ed8:	00803934 	movhi	r2,228
  841edc:	10a9e204 	addi	r2,r2,-22648
  841ee0:	10c00815 	stw	r3,32(r2)
      err = tcp_rcv(p);
  841ee4:	e13ffd17 	ldw	r4,-12(fp)
  841ee8:	082c0ec0 	call	82c0ec <tcp_rcv>
  841eec:	e0bffb15 	stw	r2,-20(fp)
      break;
  841ef0:	00000a06 	br	841f1c <ip_demux+0x264>
      err = v6t_rcv(p);
      break;
#endif /* IPV6_TUNNEL */
   default: /* unknown upper protocol */
#ifdef IP_RAW
      ip_mib.ipInDelivers++;
  841ef4:	00803934 	movhi	r2,228
  841ef8:	10a9e204 	addi	r2,r2,-22648
  841efc:	10800817 	ldw	r2,32(r2)
  841f00:	10c00044 	addi	r3,r2,1
  841f04:	00803934 	movhi	r2,228
  841f08:	10a9e204 	addi	r2,r2,-22648
  841f0c:	10c00815 	stw	r3,32(r2)
      err = ip_raw_input(p);
  841f10:	e13ffd17 	ldw	r4,-12(fp)
  841f14:	084266c0 	call	84266c <ip_raw_input>
  841f18:	e0bffb15 	stw	r2,-20(fp)
#endif /* IP_RAW */
   }

   IN_PROFILER(PF_IP, PF_EXIT);

   if(err != ENP_PARAM)
  841f1c:	e0bffb17 	ldw	r2,-20(fp)
  841f20:	10bffda0 	cmpeqi	r2,r2,-10
  841f24:	1000031e 	bne	r2,zero,841f34 <ip_demux+0x27c>
   {
      return err;
  841f28:	e0bffb17 	ldw	r2,-20(fp)
  841f2c:	e0bfff15 	stw	r2,-4(fp)
  841f30:	00006706 	br	8420d0 <ip_demux+0x418>

#ifdef FULL_ICMP
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
  841f34:	e0bffc17 	ldw	r2,-16(fp)
  841f38:	10800417 	ldw	r2,16(r2)
  841f3c:	10bfffe0 	cmpeqi	r2,r2,-1
  841f40:	1000541e 	bne	r2,zero,842094 <ip_demux+0x3dc>
  841f44:	e0bffc17 	ldw	r2,-16(fp)
  841f48:	10800417 	ldw	r2,16(r2)
  841f4c:	1004d63a 	srli	r2,r2,24
  841f50:	10c03fcc 	andi	r3,r2,255
  841f54:	e0bffc17 	ldw	r2,-16(fp)
  841f58:	10800417 	ldw	r2,16(r2)
  841f5c:	1004d23a 	srli	r2,r2,8
  841f60:	10bfc00c 	andi	r2,r2,65280
  841f64:	1886b03a 	or	r3,r3,r2
  841f68:	e0bffc17 	ldw	r2,-16(fp)
  841f6c:	10800417 	ldw	r2,16(r2)
  841f70:	10bfc00c 	andi	r2,r2,65280
  841f74:	1004923a 	slli	r2,r2,8
  841f78:	1886b03a 	or	r3,r3,r2
  841f7c:	e0bffc17 	ldw	r2,-16(fp)
  841f80:	10800417 	ldw	r2,16(r2)
  841f84:	10803fcc 	andi	r2,r2,255
  841f88:	1004963a 	slli	r2,r2,24
  841f8c:	1884b03a 	or	r2,r3,r2
  841f90:	10fc002c 	andhi	r3,r2,61440
  841f94:	00b80034 	movhi	r2,57344
  841f98:	18803e26 	beq	r3,r2,842094 <ip_demux+0x3dc>
  841f9c:	e0bffc17 	ldw	r2,-16(fp)
  841fa0:	10c00417 	ldw	r3,16(r2)
  841fa4:	e0bffd17 	ldw	r2,-12(fp)
  841fa8:	10800617 	ldw	r2,24(r2)
  841fac:	10800e17 	ldw	r2,56(r2)
  841fb0:	18803826 	beq	r3,r2,842094 <ip_demux+0x3dc>
  841fb4:	e0bffc17 	ldw	r2,-16(fp)
  841fb8:	10c00417 	ldw	r3,16(r2)
  841fbc:	e0bffd17 	ldw	r2,-12(fp)
  841fc0:	10800617 	ldw	r2,24(r2)
  841fc4:	10800f17 	ldw	r2,60(r2)
  841fc8:	18803226 	beq	r3,r2,842094 <ip_demux+0x3dc>
  841fcc:	e0bffc17 	ldw	r2,-16(fp)
  841fd0:	10c00417 	ldw	r3,16(r2)
  841fd4:	e0bffd17 	ldw	r2,-12(fp)
  841fd8:	10800617 	ldw	r2,24(r2)
  841fdc:	10801017 	ldw	r2,64(r2)
  841fe0:	18802c26 	beq	r3,r2,842094 <ip_demux+0x3dc>
  841fe4:	e0bffd17 	ldw	r2,-12(fp)
  841fe8:	10800617 	ldw	r2,24(r2)
  841fec:	10c00a17 	ldw	r3,40(r2)
  841ff0:	e0bffd17 	ldw	r2,-12(fp)
  841ff4:	10800617 	ldw	r2,24(r2)
  841ff8:	10801017 	ldw	r2,64(r2)
  841ffc:	18802526 	beq	r3,r2,842094 <ip_demux+0x3dc>
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
       (p->net->n_ipaddr ^ p->net->n_subnetbr))  /* Know our own host address? */
   {

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  842000:	00802174 	movhi	r2,133
  842004:	10830104 	addi	r2,r2,3076
  842008:	10800017 	ldw	r2,0(r2)
  84200c:	1081000c 	andi	r2,r2,1024
  842010:	1005003a 	cmpeq	r2,r2,zero
  842014:	1000141e 	bne	r2,zero,842068 <ip_demux+0x3b0>
  842018:	00802174 	movhi	r2,133
  84201c:	10830104 	addi	r2,r2,3076
  842020:	10800017 	ldw	r2,0(r2)
  842024:	1080800c 	andi	r2,r2,512
  842028:	1005003a 	cmpeq	r2,r2,zero
  84202c:	10000e1e 	bne	r2,zero,842068 <ip_demux+0x3b0>
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
  842030:	e0bffc17 	ldw	r2,-16(fp)
  842034:	10800243 	ldbu	r2,9(r2)
  842038:	11403fcc 	andi	r5,r2,255
  84203c:	01002174 	movhi	r4,133
  842040:	2138cd04 	addi	r4,r4,-7372
  842044:	08076480 	call	807648 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
  842048:	00802174 	movhi	r2,133
  84204c:	10830104 	addi	r2,r2,3076
  842050:	10800017 	ldw	r2,0(r2)
  842054:	1080008c 	andi	r2,r2,2
  842058:	1005003a 	cmpeq	r2,r2,zero
  84205c:	1000021e 	bne	r2,zero,842068 <ip_demux+0x3b0>
  842060:	e13ffd17 	ldw	r4,-12(fp)
  842064:	083eeb40 	call	83eeb4 <ip_dump>
      }
#endif   /* NPDEBUG */
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTPROT, p->net);
  842068:	e0bffc17 	ldw	r2,-16(fp)
  84206c:	11000317 	ldw	r4,12(r2)
  842070:	e0bffd17 	ldw	r2,-12(fp)
  842074:	10800617 	ldw	r2,24(r2)
  842078:	11400a17 	ldw	r5,40(r2)
  84207c:	e0bffd17 	ldw	r2,-12(fp)
  842080:	10800617 	ldw	r2,24(r2)
  842084:	d8800015 	stw	r2,0(sp)
  842088:	e1bffc17 	ldw	r6,-16(fp)
  84208c:	01c00084 	movi	r7,2
  842090:	0849c7c0 	call	849c7c <icmp_destun>
   }
#endif   /* FULL_ICMP */

   ip_mib.ipUnknownProtos++;
  842094:	00803934 	movhi	r2,228
  842098:	10a9e204 	addi	r2,r2,-22648
  84209c:	10800617 	ldw	r2,24(r2)
  8420a0:	10c00044 	addi	r3,r2,1
  8420a4:	00803934 	movhi	r2,228
  8420a8:	10a9e204 	addi	r2,r2,-22648
  8420ac:	10c00615 	stw	r3,24(r2)
   LOCK_NET_RESOURCE(FREEQ_RESID);
  8420b0:	01000084 	movi	r4,2
  8420b4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p);
  8420b8:	e13ffd17 	ldw	r4,-12(fp)
  8420bc:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8420c0:	01000084 	movi	r4,2
  8420c4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return ENP_NOT_MINE;
  8420c8:	00c00084 	movi	r3,2
  8420cc:	e0ffff15 	stw	r3,-4(fp)
  8420d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8420d4:	e037883a 	mov	sp,fp
  8420d8:	dfc00117 	ldw	ra,4(sp)
  8420dc:	df000017 	ldw	fp,0(sp)
  8420e0:	dec00204 	addi	sp,sp,8
  8420e4:	f800283a 	ret

008420e8 <in_addmulti>:
 * RETURNS: 
 */

struct in_multi * 
in_addmulti(ip_addr *ap, struct net *netp, int addrtype)
{
  8420e8:	defff804 	addi	sp,sp,-32
  8420ec:	dfc00715 	stw	ra,28(sp)
  8420f0:	df000615 	stw	fp,24(sp)
  8420f4:	df000604 	addi	fp,sp,24
  8420f8:	e13ffc15 	stw	r4,-16(fp)
  8420fc:	e17ffd15 	stw	r5,-12(fp)
  842100:	e1bffe15 	stw	r6,-8(fp)
   struct in_multi *inm = (struct in_multi *)NULL;
  842104:	e03ffb15 	stw	zero,-20(fp)
   int error;

   /* check for good addr. */
   if ((ap == (ip_addr *)NULL) || (*ap == 0))
  842108:	e0bffc17 	ldw	r2,-16(fp)
  84210c:	1005003a 	cmpeq	r2,r2,zero
  842110:	1000041e 	bne	r2,zero,842124 <in_addmulti+0x3c>
  842114:	e0bffc17 	ldw	r2,-16(fp)
  842118:	10800017 	ldw	r2,0(r2)
  84211c:	1004c03a 	cmpne	r2,r2,zero
  842120:	1000021e 	bne	r2,zero,84212c <in_addmulti+0x44>
      return ((struct in_multi *)NULL);  
  842124:	e03fff15 	stw	zero,-4(fp)
  842128:	00004306 	br	842238 <in_addmulti+0x150>

   ENTER_CRIT_SECTION(netp);
  84212c:	082a9c80 	call	82a9c8 <irq_Mask>
#ifdef IP_V6
   if(addrtype == 6)
      inm = v6_lookup_mcast((ip6_addr*)ap, netp);
#endif
#ifdef IP_V4
   if(addrtype != 6)
  842130:	e0bffe17 	ldw	r2,-8(fp)
  842134:	108001a0 	cmpeqi	r2,r2,6
  842138:	1000051e 	bne	r2,zero,842150 <in_addmulti+0x68>
      inm = lookup_mcast(*ap, netp);
  84213c:	e0bffc17 	ldw	r2,-16(fp)
  842140:	11000017 	ldw	r4,0(r2)
  842144:	e17ffd17 	ldw	r5,-12(fp)
  842148:	08423680 	call	842368 <lookup_mcast>
  84214c:	e0bffb15 	stw	r2,-20(fp)
#endif

   if (inm != (struct in_multi *)NULL) 
  842150:	e0bffb17 	ldw	r2,-20(fp)
  842154:	1005003a 	cmpeq	r2,r2,zero
  842158:	1000061e 	bne	r2,zero,842174 <in_addmulti+0x8c>
   {
      /* Found it; just increment the reference count. */
      ++inm->inm_refcount;
  84215c:	e0bffb17 	ldw	r2,-20(fp)
  842160:	10800217 	ldw	r2,8(r2)
  842164:	10c00044 	addi	r3,r2,1
  842168:	e0bffb17 	ldw	r2,-20(fp)
  84216c:	10c00215 	stw	r3,8(r2)
  842170:	00002e06 	br	84222c <in_addmulti+0x144>
   {
      /*
       * New address; allocate a new multicast record
       * and link it into the interface's multicast list.
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));
  842174:	01000604 	movi	r4,24
  842178:	082b20c0 	call	82b20c <npalloc>
  84217c:	e0bffb15 	stw	r2,-20(fp)

      if (inm == (struct in_multi *)NULL) 
  842180:	e0bffb17 	ldw	r2,-20(fp)
  842184:	1004c03a 	cmpne	r2,r2,zero
  842188:	1000031e 	bne	r2,zero,842198 <in_addmulti+0xb0>
      {
         EXIT_CRIT_SECTION(netp);
  84218c:	082aa240 	call	82aa24 <irq_Unmask>
         return ((struct in_multi *)NULL);
  842190:	e03fff15 	stw	zero,-4(fp)
  842194:	00002806 	br	842238 <in_addmulti+0x150>
#ifdef IP_V6
      if(addrtype == 6)
         IP6CPY(&inm->ip6addr, (struct in6_addr *)ap);
#endif
#ifdef IP_V4
      if(addrtype != 6)
  842198:	e0bffe17 	ldw	r2,-8(fp)
  84219c:	108001a0 	cmpeqi	r2,r2,6
  8421a0:	1000041e 	bne	r2,zero,8421b4 <in_addmulti+0xcc>
         inm->inm_addr = *ap;
  8421a4:	e0bffc17 	ldw	r2,-16(fp)
  8421a8:	10c00017 	ldw	r3,0(r2)
  8421ac:	e0bffb17 	ldw	r2,-20(fp)
  8421b0:	10c00015 	stw	r3,0(r2)
#endif
      inm->inm_netp = netp;
  8421b4:	e0fffb17 	ldw	r3,-20(fp)
  8421b8:	e0bffd17 	ldw	r2,-12(fp)
  8421bc:	18800115 	stw	r2,4(r3)
      inm->inm_refcount = 1;
  8421c0:	e0fffb17 	ldw	r3,-20(fp)
  8421c4:	00800044 	movi	r2,1
  8421c8:	18800215 	stw	r2,8(r3)
      inm->inm_next = netp->mc_list;
  8421cc:	e0bffd17 	ldw	r2,-12(fp)
  8421d0:	10c02c17 	ldw	r3,176(r2)
  8421d4:	e0bffb17 	ldw	r2,-20(fp)
  8421d8:	10c00515 	stw	r3,20(r2)
      netp->mc_list = inm;
  8421dc:	e0fffd17 	ldw	r3,-12(fp)
  8421e0:	e0bffb17 	ldw	r2,-20(fp)
  8421e4:	18802c15 	stw	r2,176(r3)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the new address.
       */
      if(netp->n_mcastlist)
  8421e8:	e0bffd17 	ldw	r2,-12(fp)
  8421ec:	10802b17 	ldw	r2,172(r2)
  8421f0:	1005003a 	cmpeq	r2,r2,zero
  8421f4:	1000061e 	bne	r2,zero,842210 <in_addmulti+0x128>
         error = netp->n_mcastlist(inm);
  8421f8:	e0bffd17 	ldw	r2,-12(fp)
  8421fc:	10802b17 	ldw	r2,172(r2)
  842200:	e13ffb17 	ldw	r4,-20(fp)
  842204:	103ee83a 	callr	r2
  842208:	e0bffa15 	stw	r2,-24(fp)
  84220c:	00000106 	br	842214 <in_addmulti+0x12c>
      else
         error = 0;
  842210:	e03ffa15 	stw	zero,-24(fp)
#if defined (IGMP_V1) || defined (IGMP_V2)
      /*
       * Let IGMP know that we have joined a new IP multicast group.
       */
      if (inm->inm_addr) igmp_joingroup(inm);
  842214:	e0bffb17 	ldw	r2,-20(fp)
  842218:	10800017 	ldw	r2,0(r2)
  84221c:	1005003a 	cmpeq	r2,r2,zero
  842220:	1000021e 	bne	r2,zero,84222c <in_addmulti+0x144>
  842224:	e13ffb17 	ldw	r4,-20(fp)
  842228:	08240100 	call	824010 <igmp_joingroup>
#endif      
   }

   EXIT_CRIT_SECTION(netp);
  84222c:	082aa240 	call	82aa24 <irq_Unmask>
   USE_ARG(error);

   return (inm);
  842230:	e0bffb17 	ldw	r2,-20(fp)
  842234:	e0bfff15 	stw	r2,-4(fp)
  842238:	e0bfff17 	ldw	r2,-4(fp)
}
  84223c:	e037883a 	mov	sp,fp
  842240:	dfc00117 	ldw	ra,4(sp)
  842244:	df000017 	ldw	fp,0(sp)
  842248:	dec00204 	addi	sp,sp,8
  84224c:	f800283a 	ret

00842250 <in_delmulti>:
 * RETURNS: 
 */

void
in_delmulti(struct in_multi * inm)
{
  842250:	defffa04 	addi	sp,sp,-24
  842254:	dfc00515 	stw	ra,20(sp)
  842258:	df000415 	stw	fp,16(sp)
  84225c:	df000404 	addi	fp,sp,16
  842260:	e13fff15 	stw	r4,-4(fp)
   struct in_multi * p;
   NET         netp = inm->inm_netp;
  842264:	e0bfff17 	ldw	r2,-4(fp)
  842268:	10800117 	ldw	r2,4(r2)
  84226c:	e0bffd15 	stw	r2,-12(fp)
   int error;

   ENTER_CRIT_SECTION(inm);
  842270:	082a9c80 	call	82a9c8 <irq_Mask>
   if (--inm->inm_refcount == 0) 
  842274:	e0bfff17 	ldw	r2,-4(fp)
  842278:	10800217 	ldw	r2,8(r2)
  84227c:	10ffffc4 	addi	r3,r2,-1
  842280:	e0bfff17 	ldw	r2,-4(fp)
  842284:	10c00215 	stw	r3,8(r2)
  842288:	e0bfff17 	ldw	r2,-4(fp)
  84228c:	10800217 	ldw	r2,8(r2)
  842290:	1004c03a 	cmpne	r2,r2,zero
  842294:	10002e1e 	bne	r2,zero,842350 <in_delmulti+0x100>
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
  842298:	e0bffd17 	ldw	r2,-12(fp)
  84229c:	10802c17 	ldw	r2,176(r2)
  8422a0:	e0bffe15 	stw	r2,-8(fp)
  8422a4:	00001406 	br	8422f8 <in_delmulti+0xa8>
      {
         if(p == inm)   /* inm is first in mc_list */
  8422a8:	e0fffe17 	ldw	r3,-8(fp)
  8422ac:	e0bfff17 	ldw	r2,-4(fp)
  8422b0:	1880051e 	bne	r3,r2,8422c8 <in_delmulti+0x78>
         {
            netp->mc_list = p->inm_next;  /* unlink */
  8422b4:	e0bffe17 	ldw	r2,-8(fp)
  8422b8:	10c00517 	ldw	r3,20(r2)
  8422bc:	e0bffd17 	ldw	r2,-12(fp)
  8422c0:	10c02c15 	stw	r3,176(r2)
            break;
  8422c4:	00000f06 	br	842304 <in_delmulti+0xb4>
         }
         else if(p->inm_next == inm)   /* inm is next */
  8422c8:	e0bffe17 	ldw	r2,-8(fp)
  8422cc:	10c00517 	ldw	r3,20(r2)
  8422d0:	e0bfff17 	ldw	r2,-4(fp)
  8422d4:	1880051e 	bne	r3,r2,8422ec <in_delmulti+0x9c>
         {
            p->inm_next = inm->inm_next;  /* unlink */
  8422d8:	e0bfff17 	ldw	r2,-4(fp)
  8422dc:	10c00517 	ldw	r3,20(r2)
  8422e0:	e0bffe17 	ldw	r2,-8(fp)
  8422e4:	10c00515 	stw	r3,20(r2)
            break;
  8422e8:	00000606 	br	842304 <in_delmulti+0xb4>

   ENTER_CRIT_SECTION(inm);
   if (--inm->inm_refcount == 0) 
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
  8422ec:	e0bffe17 	ldw	r2,-8(fp)
  8422f0:	10800517 	ldw	r2,20(r2)
  8422f4:	e0bffe15 	stw	r2,-8(fp)
  8422f8:	e0bffe17 	ldw	r2,-8(fp)
  8422fc:	1004c03a 	cmpne	r2,r2,zero
  842300:	103fe91e 	bne	r2,zero,8422a8 <in_delmulti+0x58>
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
  842304:	e0bffd17 	ldw	r2,-12(fp)
  842308:	10802b17 	ldw	r2,172(r2)
  84230c:	1005003a 	cmpeq	r2,r2,zero
  842310:	1000061e 	bne	r2,zero,84232c <in_delmulti+0xdc>
         error = netp->n_mcastlist(inm);
  842314:	e0bffd17 	ldw	r2,-12(fp)
  842318:	10802b17 	ldw	r2,172(r2)
  84231c:	e13fff17 	ldw	r4,-4(fp)
  842320:	103ee83a 	callr	r2
  842324:	e0bffc15 	stw	r2,-16(fp)
  842328:	00000106 	br	842330 <in_delmulti+0xe0>
      else
         error = 0;
  84232c:	e03ffc15 	stw	zero,-16(fp)
#if defined (IGMP_V2)
      /*
       * No remaining claims to this record; let IGMP know that
       * we are leaving the multicast group.
       */
      if (inm->inm_addr) igmp_leavegroup(inm);
  842330:	e0bfff17 	ldw	r2,-4(fp)
  842334:	10800017 	ldw	r2,0(r2)
  842338:	1005003a 	cmpeq	r2,r2,zero
  84233c:	1000021e 	bne	r2,zero,842348 <in_delmulti+0xf8>
  842340:	e13fff17 	ldw	r4,-4(fp)
  842344:	082427c0 	call	82427c <igmp_leavegroup>
#endif      

      IM_FREE(inm);
  842348:	e13fff17 	ldw	r4,-4(fp)
  84234c:	082b3000 	call	82b300 <npfree>
   }
   EXIT_CRIT_SECTION(inm);
  842350:	082aa240 	call	82aa24 <irq_Unmask>
}
  842354:	e037883a 	mov	sp,fp
  842358:	dfc00117 	ldw	ra,4(sp)
  84235c:	df000017 	ldw	fp,0(sp)
  842360:	dec00204 	addi	sp,sp,8
  842364:	f800283a 	ret

00842368 <lookup_mcast>:
 * RETURNS: pointer to mcast addr structure, or NULL if not found.
 */

struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
  842368:	defffb04 	addi	sp,sp,-20
  84236c:	df000415 	stw	fp,16(sp)
  842370:	df000404 	addi	fp,sp,16
  842374:	e13ffd15 	stw	r4,-12(fp)
  842378:	e17ffe15 	stw	r5,-8(fp)
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
  84237c:	e0bffe17 	ldw	r2,-8(fp)
  842380:	10802c17 	ldw	r2,176(r2)
  842384:	e0bffc15 	stw	r2,-16(fp)
  842388:	00000a06 	br	8423b4 <lookup_mcast+0x4c>
   {
      if(imp->inm_addr == addr)
  84238c:	e0bffc17 	ldw	r2,-16(fp)
  842390:	10c00017 	ldw	r3,0(r2)
  842394:	e0bffd17 	ldw	r2,-12(fp)
  842398:	1880031e 	bne	r3,r2,8423a8 <lookup_mcast+0x40>
         return imp;
  84239c:	e0bffc17 	ldw	r2,-16(fp)
  8423a0:	e0bfff15 	stw	r2,-4(fp)
  8423a4:	00000706 	br	8423c4 <lookup_mcast+0x5c>
struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
  8423a8:	e0bffc17 	ldw	r2,-16(fp)
  8423ac:	10800517 	ldw	r2,20(r2)
  8423b0:	e0bffc15 	stw	r2,-16(fp)
  8423b4:	e0bffc17 	ldw	r2,-16(fp)
  8423b8:	1004c03a 	cmpne	r2,r2,zero
  8423bc:	103ff31e 	bne	r2,zero,84238c <lookup_mcast+0x24>
   {
      if(imp->inm_addr == addr)
         return imp;
   }
   return NULL;   /* addr not found in mcast list */
  8423c0:	e03fff15 	stw	zero,-4(fp)
  8423c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8423c8:	e037883a 	mov	sp,fp
  8423cc:	df000017 	ldw	fp,0(sp)
  8423d0:	dec00104 	addi	sp,sp,4
  8423d4:	f800283a 	ret

008423d8 <prep_ifaces>:
 * passed value. 
 */

int
prep_ifaces(int ifaces_found)
{
  8423d8:	defffc04 	addi	sp,sp,-16
  8423dc:	dfc00315 	stw	ra,12(sp)
  8423e0:	df000215 	stw	fp,8(sp)
  8423e4:	df000204 	addi	fp,sp,8
  8423e8:	e13ffe15 	stw	r4,-8(fp)
   if (port_prep)
  8423ec:	d0a0cf17 	ldw	r2,-31940(gp)
  8423f0:	1005003a 	cmpeq	r2,r2,zero
  8423f4:	1000041e 	bne	r2,zero,842408 <prep_ifaces+0x30>
      ifaces_found = port_prep(ifaces_found);
  8423f8:	d0a0cf17 	ldw	r2,-31940(gp)
  8423fc:	e13ffe17 	ldw	r4,-8(fp)
  842400:	103ee83a 	callr	r2
  842404:	e0bffe15 	stw	r2,-8(fp)

#ifdef MAC_LOOPBACK
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */
  842408:	e0fffe17 	ldw	r3,-8(fp)
  84240c:	00802174 	movhi	r2,133
  842410:	10830204 	addi	r2,r2,3080
  842414:	10c00015 	stw	r3,0(r2)

   initmsg("prepped %u interface%s, initializing...\n", 
  842418:	e0bffe17 	ldw	r2,-8(fp)
  84241c:	10800058 	cmpnei	r2,r2,1
  842420:	1000041e 	bne	r2,zero,842434 <prep_ifaces+0x5c>
  842424:	00802174 	movhi	r2,133
  842428:	10b8d504 	addi	r2,r2,-7340
  84242c:	e0bfff15 	stw	r2,-4(fp)
  842430:	00000306 	br	842440 <prep_ifaces+0x68>
  842434:	00802174 	movhi	r2,133
  842438:	10b8d604 	addi	r2,r2,-7336
  84243c:	e0bfff15 	stw	r2,-4(fp)
  842440:	01002174 	movhi	r4,133
  842444:	2138d704 	addi	r4,r4,-7332
  842448:	e17ffe17 	ldw	r5,-8(fp)
  84244c:	e1bfff17 	ldw	r6,-4(fp)
  842450:	08076480 	call	807648 <printf>
      ifaces_found, ifaces_found==1?"":"s");

   return ifaces_found;
  842454:	e0bffe17 	ldw	r2,-8(fp)
}
  842458:	e037883a 	mov	sp,fp
  84245c:	dfc00117 	ldw	ra,4(sp)
  842460:	df000017 	ldw	fp,0(sp)
  842464:	dec00204 	addi	sp,sp,8
  842468:	f800283a 	ret

0084246c <netexit>:
 * RETURNS: SHould not return
 */

void
netexit(int err)      /* exit error level */
{
  84246c:	defffd04 	addi	sp,sp,-12
  842470:	dfc00215 	stw	ra,8(sp)
  842474:	df000115 	stw	fp,4(sp)
  842478:	df000104 	addi	fp,sp,4
  84247c:	e13fff15 	stw	r4,-4(fp)
   net_system_exit = TRUE; /* set flag for shutting down */
  842480:	00800044 	movi	r2,1
  842484:	d0a0d015 	stw	r2,-31936(gp)
   ip_exit();  /* do the exit_hook()ed stuff */
  842488:	08238c40 	call	8238c4 <ip_exit>

   PORT_EXIT_FUNC(err);    /* should not return! */
  84248c:	e13fff17 	ldw	r4,-4(fp)
  842490:	084a3840 	call	84a384 <exit>

00842494 <evtmap_setup>:
 * INPUT: None.
 * OUTPUT: None
 */
 
void evtmap_setup (void)
{
  842494:	deffff04 	addi	sp,sp,-4
  842498:	df000015 	stw	fp,0(sp)
  84249c:	d839883a 	mov	fp,sp
#ifdef SOCK_MAP_EVENTS
   so_evtmap = TRUE;
   so_evtmap_create = evtmap_create;
   so_evtmap_delete = evtmap_delete;
#else
   so_evtmap = FALSE;
  8424a0:	d020d305 	stb	zero,-31924(gp)
   so_evtmap_create = 0;
  8424a4:	d020d115 	stw	zero,-31932(gp)
   so_evtmap_delete = 0;
  8424a8:	d020d215 	stw	zero,-31928(gp)
#endif   /* SOCK_MAP_EVENTS */ 

}
  8424ac:	e037883a 	mov	sp,fp
  8424b0:	df000017 	ldw	fp,0(sp)
  8424b4:	dec00104 	addi	sp,sp,4
  8424b8:	f800283a 	ret

008424bc <ip_raw_open>:
ip_raw_open(u_char prot,
            ip_addr laddr,
            ip_addr faddr,
            int (*handler)(PACKET, void *),
            void * data)
{
  8424bc:	defff804 	addi	sp,sp,-32
  8424c0:	dfc00715 	stw	ra,28(sp)
  8424c4:	df000615 	stw	fp,24(sp)
  8424c8:	df000604 	addi	fp,sp,24
  8424cc:	e17ffc15 	stw	r5,-16(fp)
  8424d0:	e1bffd15 	stw	r6,-12(fp)
  8424d4:	e1fffe15 	stw	r7,-8(fp)
  8424d8:	e13ffb05 	stb	r4,-20(fp)
   struct ipraw_ep * ep;

   LOCK_NET_RESOURCE(NET_RESID);
  8424dc:	0009883a 	mov	r4,zero
  8424e0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
  8424e4:	01000604 	movi	r4,24
  8424e8:	082b20c0 	call	82b20c <npalloc>
  8424ec:	e0bffa15 	stw	r2,-24(fp)
   if (ep == NULL)
  8424f0:	e0bffa17 	ldw	r2,-24(fp)
  8424f4:	1004c03a 	cmpne	r2,r2,zero
  8424f8:	10000e1e 	bne	r2,zero,842534 <ip_raw_open+0x78>
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
  8424fc:	00802174 	movhi	r2,133
  842500:	10830104 	addi	r2,r2,3076
  842504:	10800017 	ldw	r2,0(r2)
  842508:	1080010c 	andi	r2,r2,4
  84250c:	1005003a 	cmpeq	r2,r2,zero
  842510:	1000031e 	bne	r2,zero,842520 <ip_raw_open+0x64>
         dprintf("IP: Couldn't allocate ep storage.\n");
  842514:	01002174 	movhi	r4,133
  842518:	2138e204 	addi	r4,r4,-7288
  84251c:	08077600 	call	807760 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
  842520:	0009883a 	mov	r4,zero
  842524:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ep;
  842528:	e0bffa17 	ldw	r2,-24(fp)
  84252c:	e0bfff15 	stw	r2,-4(fp)
  842530:	00001806 	br	842594 <ip_raw_open+0xd8>
   }

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
  842534:	e0fffa17 	ldw	r3,-24(fp)
  842538:	e0bffc17 	ldw	r2,-16(fp)
  84253c:	18800115 	stw	r2,4(r3)
   ep->ipr_faddr = faddr;
  842540:	e0fffa17 	ldw	r3,-24(fp)
  842544:	e0bffd17 	ldw	r2,-12(fp)
  842548:	18800215 	stw	r2,8(r3)
   ep->ipr_prot = prot;
  84254c:	e0fffa17 	ldw	r3,-24(fp)
  842550:	e0bffb03 	ldbu	r2,-20(fp)
  842554:	18800505 	stb	r2,20(r3)
   ep->ipr_rcv = handler;
  842558:	e0fffa17 	ldw	r3,-24(fp)
  84255c:	e0bffe17 	ldw	r2,-8(fp)
  842560:	18800315 	stw	r2,12(r3)
   ep->ipr_data = data;
  842564:	e0fffa17 	ldw	r3,-24(fp)
  842568:	e0800217 	ldw	r2,8(fp)
  84256c:	18800415 	stw	r2,16(r3)

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
  842570:	d0e0d417 	ldw	r3,-31920(gp)
  842574:	e0bffa17 	ldw	r2,-24(fp)
  842578:	10c00015 	stw	r3,0(r2)
   ipraw_eps = ep;
  84257c:	e0bffa17 	ldw	r2,-24(fp)
  842580:	d0a0d415 	stw	r2,-31920(gp)

   /* and return the pointer to the endpoint */
   UNLOCK_NET_RESOURCE(NET_RESID);
  842584:	0009883a 	mov	r4,zero
  842588:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return ep;
  84258c:	e0bffa17 	ldw	r2,-24(fp)
  842590:	e0bfff15 	stw	r2,-4(fp)
  842594:	e0bfff17 	ldw	r2,-4(fp)
}
  842598:	e037883a 	mov	sp,fp
  84259c:	dfc00117 	ldw	ra,4(sp)
  8425a0:	df000017 	ldw	fp,0(sp)
  8425a4:	dec00204 	addi	sp,sp,8
  8425a8:	f800283a 	ret

008425ac <ip_raw_close>:
 *                               that is to be closed
 * RETURNS: void
 */
void
ip_raw_close(struct ipraw_ep * ep)
{
  8425ac:	defffb04 	addi	sp,sp,-20
  8425b0:	dfc00415 	stw	ra,16(sp)
  8425b4:	df000315 	stw	fp,12(sp)
  8425b8:	df000304 	addi	fp,sp,12
  8425bc:	e13fff15 	stw	r4,-4(fp)
   struct ipraw_ep * prev_ep;
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);
  8425c0:	0009883a 	mov	r4,zero
  8425c4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
  8425c8:	e03ffe15 	stw	zero,-8(fp)
  8425cc:	d0a0d417 	ldw	r2,-31920(gp)
  8425d0:	e0bffd15 	stw	r2,-12(fp)
        curr_ep != NULL;
  8425d4:	00000806 	br	8425f8 <ip_raw_close+0x4c>
        curr_ep = curr_ep->ipr_next)
   {
      if (curr_ep == ep)
  8425d8:	e0fffd17 	ldw	r3,-12(fp)
  8425dc:	e0bfff17 	ldw	r2,-4(fp)
  8425e0:	18800826 	beq	r3,r2,842604 <ip_raw_close+0x58>
         break;
      prev_ep = curr_ep;
  8425e4:	e0bffd17 	ldw	r2,-12(fp)
  8425e8:	e0bffe15 	stw	r2,-8(fp)
   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
        curr_ep != NULL;
        curr_ep = curr_ep->ipr_next)
  8425ec:	e0bffd17 	ldw	r2,-12(fp)
  8425f0:	10800017 	ldw	r2,0(r2)
  8425f4:	e0bffd15 	stw	r2,-12(fp)

   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
        curr_ep != NULL;
  8425f8:	e0bffd17 	ldw	r2,-12(fp)
  8425fc:	1004c03a 	cmpne	r2,r2,zero
  842600:	103ff51e 	bne	r2,zero,8425d8 <ip_raw_close+0x2c>
         break;
      prev_ep = curr_ep;
   }

   /* if we didn't find it, we can't close it, so just return */
   if (curr_ep == NULL)
  842604:	e0bffd17 	ldw	r2,-12(fp)
  842608:	1004c03a 	cmpne	r2,r2,zero
  84260c:	1000041e 	bne	r2,zero,842620 <ip_raw_close+0x74>
   {
#ifdef NPDEBUG
      /* caller passed pointer to endpoint not in list 
       * -- not fatal, but may be programming error
       */
      dtrap();
  842610:	082a7c80 	call	82a7c8 <dtrap>
#endif /* NPDEBUG */
      UNLOCK_NET_RESOURCE(NET_RESID);
  842614:	0009883a 	mov	r4,zero
  842618:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return;
  84261c:	00000e06 	br	842658 <ip_raw_close+0xac>
   }

   /* unlink it from the list */
   if (prev_ep)
  842620:	e0bffe17 	ldw	r2,-8(fp)
  842624:	1005003a 	cmpeq	r2,r2,zero
  842628:	1000041e 	bne	r2,zero,84263c <ip_raw_close+0x90>
      prev_ep = curr_ep->ipr_next;
  84262c:	e0bffd17 	ldw	r2,-12(fp)
  842630:	10800017 	ldw	r2,0(r2)
  842634:	e0bffe15 	stw	r2,-8(fp)
  842638:	00000306 	br	842648 <ip_raw_close+0x9c>
   else
      ipraw_eps = curr_ep->ipr_next;
  84263c:	e0bffd17 	ldw	r2,-12(fp)
  842640:	10800017 	ldw	r2,0(r2)
  842644:	d0a0d415 	stw	r2,-31920(gp)

   /* free its storage */
   IEP_FREE(curr_ep);
  842648:	e13ffd17 	ldw	r4,-12(fp)
  84264c:	082b3000 	call	82b300 <npfree>

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
  842650:	0009883a 	mov	r4,zero
  842654:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
}
  842658:	e037883a 	mov	sp,fp
  84265c:	dfc00117 	ldw	ra,4(sp)
  842660:	df000017 	ldw	fp,0(sp)
  842664:	dec00204 	addi	sp,sp,8
  842668:	f800283a 	ret

0084266c <ip_raw_input>:
 *          freed); else an error code indicating that the
 *          received packet was not accepted/processed
 */
int
ip_raw_input(PACKET p)
{
  84266c:	defff604 	addi	sp,sp,-40
  842670:	dfc00915 	stw	ra,36(sp)
  842674:	df000815 	stw	fp,32(sp)
  842678:	df000804 	addi	fp,sp,32
  84267c:	e13fff15 	stw	r4,-4(fp)
   struct ip * pip;              /* the internet header */
   struct ipraw_ep * ep;
   struct ipraw_ep * next_ep;
   struct ipraw_ep * matched_ep = NULL;
  842680:	e03ffb15 	stw	zero,-20(fp)
   int err;
   int delivered;

   /* start out expecting to not deliver the packet */
   delivered = 0;
  842684:	e03ff915 	stw	zero,-28(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);
  842688:	e0bfff17 	ldw	r2,-4(fp)
  84268c:	10800317 	ldw	r2,12(r2)
  842690:	e0bffe15 	stw	r2,-8(fp)

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
  842694:	d0a0d417 	ldw	r2,-31920(gp)
  842698:	e0bffd15 	stw	r2,-12(fp)
  84269c:	00004d06 	br	8427d4 <ip_raw_input+0x168>
   {
      /* keep track of next endpoint -- defense against upcall
       * function closing its own endpoint
       */
      next_ep = ep->ipr_next;
  8426a0:	e0bffd17 	ldw	r2,-12(fp)
  8426a4:	10800017 	ldw	r2,0(r2)
  8426a8:	e0bffc15 	stw	r2,-16(fp)

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
  8426ac:	e0bffd17 	ldw	r2,-12(fp)
  8426b0:	10800503 	ldbu	r2,20(r2)
  8426b4:	10803fcc 	andi	r2,r2,255
  8426b8:	1005003a 	cmpeq	r2,r2,zero
  8426bc:	1000071e 	bne	r2,zero,8426dc <ip_raw_input+0x70>
  8426c0:	e0bffd17 	ldw	r2,-12(fp)
  8426c4:	10c00503 	ldbu	r3,20(r2)
  8426c8:	e0bffe17 	ldw	r2,-8(fp)
  8426cc:	10800243 	ldbu	r2,9(r2)
  8426d0:	18c03fcc 	andi	r3,r3,255
  8426d4:	10803fcc 	andi	r2,r2,255
  8426d8:	18803c1e 	bne	r3,r2,8427cc <ip_raw_input+0x160>
         continue;
      if (ep->ipr_laddr && ep->ipr_laddr != pip->ip_dest)
  8426dc:	e0bffd17 	ldw	r2,-12(fp)
  8426e0:	10800117 	ldw	r2,4(r2)
  8426e4:	1005003a 	cmpeq	r2,r2,zero
  8426e8:	1000051e 	bne	r2,zero,842700 <ip_raw_input+0x94>
  8426ec:	e0bffd17 	ldw	r2,-12(fp)
  8426f0:	10c00117 	ldw	r3,4(r2)
  8426f4:	e0bffe17 	ldw	r2,-8(fp)
  8426f8:	10800417 	ldw	r2,16(r2)
  8426fc:	1880331e 	bne	r3,r2,8427cc <ip_raw_input+0x160>
         continue;
      if (ep->ipr_faddr && ep->ipr_faddr != pip->ip_src)
  842700:	e0bffd17 	ldw	r2,-12(fp)
  842704:	10800217 	ldw	r2,8(r2)
  842708:	1005003a 	cmpeq	r2,r2,zero
  84270c:	1000051e 	bne	r2,zero,842724 <ip_raw_input+0xb8>
  842710:	e0bffd17 	ldw	r2,-12(fp)
  842714:	10c00217 	ldw	r3,8(r2)
  842718:	e0bffe17 	ldw	r2,-8(fp)
  84271c:	10800317 	ldw	r2,12(r2)
  842720:	18802a1e 	bne	r3,r2,8427cc <ip_raw_input+0x160>
         continue;

      /* if the endpoint has a receive upcall function, 
       * keep track of the endpoint
       */
      if (ep->ipr_rcv != NULL)
  842724:	e0bffd17 	ldw	r2,-12(fp)
  842728:	10800317 	ldw	r2,12(r2)
  84272c:	1005003a 	cmpeq	r2,r2,zero
  842730:	1000261e 	bne	r2,zero,8427cc <ip_raw_input+0x160>
          * copy the packet into a new buffer,
          * and pass the new copy to the previously matched 
          * endpoint's upcall function 
          * before we forget the previous endpoint
          */
         if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
  842734:	e0bffb17 	ldw	r2,-20(fp)
  842738:	1005003a 	cmpeq	r2,r2,zero
  84273c:	1000211e 	bne	r2,zero,8427c4 <ip_raw_input+0x158>
  842740:	e0bffb17 	ldw	r2,-20(fp)
  842744:	10800317 	ldw	r2,12(r2)
  842748:	1005003a 	cmpeq	r2,r2,zero
  84274c:	10001d1e 	bne	r2,zero,8427c4 <ip_raw_input+0x158>
         {
            PACKET p2;

            p2 = ip_copypkt(p);
  842750:	e13fff17 	ldw	r4,-4(fp)
  842754:	083f3d80 	call	83f3d8 <ip_copypkt>
  842758:	e0bff815 	stw	r2,-32(fp)
            if (p2)
  84275c:	e0bff817 	ldw	r2,-32(fp)
  842760:	1005003a 	cmpeq	r2,r2,zero
  842764:	1000171e 	bne	r2,zero,8427c4 <ip_raw_input+0x158>
            {
               UNLOCK_NET_RESOURCE(NET_RESID);
  842768:	0009883a 	mov	r4,zero
  84276c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
               err = ((*matched_ep->ipr_rcv)(p2, matched_ep->ipr_data));
  842770:	e0bffb17 	ldw	r2,-20(fp)
  842774:	10c00317 	ldw	r3,12(r2)
  842778:	e0bffb17 	ldw	r2,-20(fp)
  84277c:	11400417 	ldw	r5,16(r2)
  842780:	e13ff817 	ldw	r4,-32(fp)
  842784:	183ee83a 	callr	r3
  842788:	e0bffa15 	stw	r2,-24(fp)
               LOCK_NET_RESOURCE(NET_RESID);
  84278c:	0009883a 	mov	r4,zero
  842790:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
               if (err)
  842794:	e0bffa17 	ldw	r2,-24(fp)
  842798:	1005003a 	cmpeq	r2,r2,zero
  84279c:	1000071e 	bne	r2,zero,8427bc <ip_raw_input+0x150>
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
  8427a0:	01000084 	movi	r4,2
  8427a4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
                  pk_free(p2);
  8427a8:	e13ff817 	ldw	r4,-32(fp)
  8427ac:	0829f180 	call	829f18 <pk_free>
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8427b0:	01000084 	movi	r4,2
  8427b4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
  8427b8:	00000206 	br	8427c4 <ip_raw_input+0x158>
               }
               else
                  delivered = 1;
  8427bc:	00800044 	movi	r2,1
  8427c0:	e0bff915 	stw	r2,-28(fp)
            }
         }
         matched_ep = ep;
  8427c4:	e0bffd17 	ldw	r2,-12(fp)
  8427c8:	e0bffb15 	stw	r2,-20(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
  8427cc:	e0bffc17 	ldw	r2,-16(fp)
  8427d0:	e0bffd15 	stw	r2,-12(fp)
  8427d4:	e0bffd17 	ldw	r2,-12(fp)
  8427d8:	1004c03a 	cmpne	r2,r2,zero
  8427dc:	103fb01e 	bne	r2,zero,8426a0 <ip_raw_input+0x34>
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
  8427e0:	e0bffb17 	ldw	r2,-20(fp)
  8427e4:	1005003a 	cmpeq	r2,r2,zero
  8427e8:	1000151e 	bne	r2,zero,842840 <ip_raw_input+0x1d4>
  8427ec:	e0bffb17 	ldw	r2,-20(fp)
  8427f0:	10800317 	ldw	r2,12(r2)
  8427f4:	1005003a 	cmpeq	r2,r2,zero
  8427f8:	1000111e 	bne	r2,zero,842840 <ip_raw_input+0x1d4>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
  8427fc:	0009883a 	mov	r4,zero
  842800:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
  842804:	e0bffb17 	ldw	r2,-20(fp)
  842808:	10c00317 	ldw	r3,12(r2)
  84280c:	e0bffb17 	ldw	r2,-20(fp)
  842810:	11400417 	ldw	r5,16(r2)
  842814:	e13fff17 	ldw	r4,-4(fp)
  842818:	183ee83a 	callr	r3
  84281c:	e0bffa15 	stw	r2,-24(fp)
      LOCK_NET_RESOURCE(NET_RESID);
  842820:	0009883a 	mov	r4,zero
  842824:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      if (err == 0)
  842828:	e0bffa17 	ldw	r2,-24(fp)
  84282c:	1004c03a 	cmpne	r2,r2,zero
  842830:	10000c1e 	bne	r2,zero,842864 <ip_raw_input+0x1f8>
         delivered = 1;
  842834:	00800044 	movi	r2,1
  842838:	e0bff915 	stw	r2,-28(fp)
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
  84283c:	00000906 	br	842864 <ip_raw_input+0x1f8>
      if (err == 0)
         delivered = 1;
   }
   else
   {
      err = ENP_PARAM;
  842840:	00bffd84 	movi	r2,-10
  842844:	e0bffa15 	stw	r2,-24(fp)
      ip_mib.ipUnknownProtos++;
  842848:	00803934 	movhi	r2,228
  84284c:	10a9e204 	addi	r2,r2,-22648
  842850:	10800617 	ldw	r2,24(r2)
  842854:	10c00044 	addi	r3,r2,1
  842858:	00803934 	movhi	r2,228
  84285c:	10a9e204 	addi	r2,r2,-22648
  842860:	10c00615 	stw	r3,24(r2)
   }

   if (!delivered)
  842864:	e0bff917 	ldw	r2,-28(fp)
  842868:	1004c03a 	cmpne	r2,r2,zero
  84286c:	1000071e 	bne	r2,zero,84288c <ip_raw_input+0x220>
      ip_mib.ipInDelivers--;
  842870:	00803934 	movhi	r2,228
  842874:	10a9e204 	addi	r2,r2,-22648
  842878:	10800817 	ldw	r2,32(r2)
  84287c:	10ffffc4 	addi	r3,r2,-1
  842880:	00803934 	movhi	r2,228
  842884:	10a9e204 	addi	r2,r2,-22648
  842888:	10c00815 	stw	r3,32(r2)

   return err;
  84288c:	e0bffa17 	ldw	r2,-24(fp)
}
  842890:	e037883a 	mov	sp,fp
  842894:	dfc00117 	ldw	ra,4(sp)
  842898:	df000017 	ldw	fp,0(sp)
  84289c:	dec00204 	addi	sp,sp,8
  8428a0:	f800283a 	ret

008428a4 <ip_raw_alloc>:
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
  8428a4:	defffa04 	addi	sp,sp,-24
  8428a8:	dfc00515 	stw	ra,20(sp)
  8428ac:	df000415 	stw	fp,16(sp)
  8428b0:	df000404 	addi	fp,sp,16
  8428b4:	e13ffe15 	stw	r4,-8(fp)
  8428b8:	e17fff15 	stw	r5,-4(fp)
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
  8428bc:	e0bffe17 	ldw	r2,-8(fp)
  8428c0:	10c00044 	addi	r3,r2,1
  8428c4:	00bfff84 	movi	r2,-2
  8428c8:	1884703a 	and	r2,r3,r2
  8428cc:	e0bffd15 	stw	r2,-12(fp)
   if (!hdrincl)
  8428d0:	e0bfff17 	ldw	r2,-4(fp)
  8428d4:	1004c03a 	cmpne	r2,r2,zero
  8428d8:	1000031e 	bne	r2,zero,8428e8 <ip_raw_alloc+0x44>
      len += IPHSIZ;
  8428dc:	e0bffd17 	ldw	r2,-12(fp)
  8428e0:	10800504 	addi	r2,r2,20
  8428e4:	e0bffd15 	stw	r2,-12(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
  8428e8:	01000084 	movi	r4,2
  8428ec:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + MaxLnh);
  8428f0:	00802174 	movhi	r2,133
  8428f4:	1082ff04 	addi	r2,r2,3068
  8428f8:	10c00017 	ldw	r3,0(r2)
  8428fc:	e0bffd17 	ldw	r2,-12(fp)
  842900:	1885883a 	add	r2,r3,r2
  842904:	1009883a 	mov	r4,r2
  842908:	0829b840 	call	829b84 <pk_alloc>
  84290c:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  842910:	01000084 	movi	r4,2
  842914:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   if (p)
  842918:	e0bffc17 	ldw	r2,-16(fp)
  84291c:	1005003a 	cmpeq	r2,r2,zero
  842920:	10000d1e 	bne	r2,zero,842958 <ip_raw_alloc+0xb4>
   {
      if (!hdrincl)
  842924:	e0bfff17 	ldw	r2,-4(fp)
  842928:	1004c03a 	cmpne	r2,r2,zero
  84292c:	10000a1e 	bne	r2,zero,842958 <ip_raw_alloc+0xb4>
      {
         p->nb_prot += IPHSIZ;
  842930:	e0bffc17 	ldw	r2,-16(fp)
  842934:	10800317 	ldw	r2,12(r2)
  842938:	10c00504 	addi	r3,r2,20
  84293c:	e0bffc17 	ldw	r2,-16(fp)
  842940:	10c00315 	stw	r3,12(r2)
         p->nb_plen -= IPHSIZ;
  842944:	e0bffc17 	ldw	r2,-16(fp)
  842948:	10800417 	ldw	r2,16(r2)
  84294c:	10fffb04 	addi	r3,r2,-20
  842950:	e0bffc17 	ldw	r2,-16(fp)
  842954:	10c00415 	stw	r3,16(r2)
      }
   }
   return p;
  842958:	e0bffc17 	ldw	r2,-16(fp)
}
  84295c:	e037883a 	mov	sp,fp
  842960:	dfc00117 	ldw	ra,4(sp)
  842964:	df000017 	ldw	fp,0(sp)
  842968:	dec00204 	addi	sp,sp,8
  84296c:	f800283a 	ret

00842970 <ip_raw_free>:
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
  842970:	defffd04 	addi	sp,sp,-12
  842974:	dfc00215 	stw	ra,8(sp)
  842978:	df000115 	stw	fp,4(sp)
  84297c:	df000104 	addi	fp,sp,4
  842980:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
  842984:	01000084 	movi	r4,2
  842988:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p);
  84298c:	e13fff17 	ldw	r4,-4(fp)
  842990:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  842994:	01000084 	movi	r4,2
  842998:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
}
  84299c:	e037883a 	mov	sp,fp
  8429a0:	dfc00117 	ldw	ra,4(sp)
  8429a4:	df000017 	ldw	fp,0(sp)
  8429a8:	dec00204 	addi	sp,sp,8
  8429ac:	f800283a 	ret

008429b0 <ip_raw_maxalloc>:
 *          for 
 */

int
ip_raw_maxalloc(int hdrincl)
{
  8429b0:	defffd04 	addi	sp,sp,-12
  8429b4:	df000215 	stw	fp,8(sp)
  8429b8:	df000204 	addi	fp,sp,8
  8429bc:	e13fff15 	stw	r4,-4(fp)
   int len;

   len = bigbufsiz - MaxLnh;
  8429c0:	00802174 	movhi	r2,133
  8429c4:	1082b704 	addi	r2,r2,2780
  8429c8:	10c00017 	ldw	r3,0(r2)
  8429cc:	00802174 	movhi	r2,133
  8429d0:	1082ff04 	addi	r2,r2,3068
  8429d4:	10800017 	ldw	r2,0(r2)
  8429d8:	1885c83a 	sub	r2,r3,r2
  8429dc:	e0bffe15 	stw	r2,-8(fp)
   if (!hdrincl)
  8429e0:	e0bfff17 	ldw	r2,-4(fp)
  8429e4:	1004c03a 	cmpne	r2,r2,zero
  8429e8:	1000031e 	bne	r2,zero,8429f8 <ip_raw_maxalloc+0x48>
      len -= IPHSIZ;
  8429ec:	e0bffe17 	ldw	r2,-8(fp)
  8429f0:	10bffb04 	addi	r2,r2,-20
  8429f4:	e0bffe15 	stw	r2,-8(fp)
   return len;
  8429f8:	e0bffe17 	ldw	r2,-8(fp)
}
  8429fc:	e037883a 	mov	sp,fp
  842a00:	df000017 	ldw	fp,0(sp)
  842a04:	dec00104 	addi	sp,sp,4
  842a08:	f800283a 	ret

00842a0c <rt_lookup>:
 * entry was found.
 */

RTMIB
rt_lookup(ip_addr host)
{
  842a0c:	defff804 	addi	sp,sp,-32
  842a10:	df000715 	stw	fp,28(sp)
  842a14:	df000704 	addi	fp,sp,28
  842a18:	e13fff15 	stw	r4,-4(fp)
   RTMIB    rtp;
   RTMIB    netmatch;
   unsigned char max_bits_matched = 0;
  842a1c:	e03ffc45 	stb	zero,-15(fp)
   unsigned char curr_bits_matched;
   ip_addr  entry_mask;
   unsigned long int bitcount_mask;
   unsigned long int extracted_bit;

   netmatch = NULL;
  842a20:	e03ffd15 	stw	zero,-12(fp)

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
  842a24:	00802174 	movhi	r2,133
  842a28:	10834104 	addi	r2,r2,3332
  842a2c:	10800017 	ldw	r2,0(r2)
  842a30:	e0bffe15 	stw	r2,-8(fp)
  842a34:	00003e06 	br	842b30 <rt_lookup+0x124>
   {
      if (rtp->ipRouteNextHop == 0L)   /* skip over empty entries */
  842a38:	e0bffe17 	ldw	r2,-8(fp)
  842a3c:	10800617 	ldw	r2,24(r2)
  842a40:	1005003a 	cmpeq	r2,r2,zero
  842a44:	1000371e 	bne	r2,zero,842b24 <rt_lookup+0x118>
#ifdef RIP_SUPPORT
      /* skip RIP private entries */
      if (rtp->ipRouteFlags & RIP_PRIVATE)
         continue;
#endif
      entry_mask = rtp->ipRouteMask;
  842a48:	e0bffe17 	ldw	r2,-8(fp)
  842a4c:	10800a17 	ldw	r2,40(r2)
  842a50:	e0bffb15 	stw	r2,-20(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
  842a54:	e0bffe17 	ldw	r2,-8(fp)
  842a58:	10c00017 	ldw	r3,0(r2)
  842a5c:	e0bffb17 	ldw	r2,-20(fp)
  842a60:	1888703a 	and	r4,r3,r2
  842a64:	e0ffff17 	ldw	r3,-4(fp)
  842a68:	e0bffb17 	ldw	r2,-20(fp)
  842a6c:	1884703a 	and	r2,r3,r2
  842a70:	20802c1e 	bne	r4,r2,842b24 <rt_lookup+0x118>
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
  842a74:	e03ffc05 	stb	zero,-16(fp)
  842a78:	00a00034 	movhi	r2,32768
  842a7c:	e0bffa15 	stw	r2,-24(fp)
  842a80:	00001b06 	br	842af0 <rt_lookup+0xe4>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
  842a84:	e0bffb17 	ldw	r2,-20(fp)
  842a88:	1004d63a 	srli	r2,r2,24
  842a8c:	10c03fcc 	andi	r3,r2,255
  842a90:	e0bffb17 	ldw	r2,-20(fp)
  842a94:	1004d23a 	srli	r2,r2,8
  842a98:	10bfc00c 	andi	r2,r2,65280
  842a9c:	1886b03a 	or	r3,r3,r2
  842aa0:	e0bffb17 	ldw	r2,-20(fp)
  842aa4:	10bfc00c 	andi	r2,r2,65280
  842aa8:	1004923a 	slli	r2,r2,8
  842aac:	1886b03a 	or	r3,r3,r2
  842ab0:	e0bffb17 	ldw	r2,-20(fp)
  842ab4:	10803fcc 	andi	r2,r2,255
  842ab8:	1004963a 	slli	r2,r2,24
  842abc:	1886b03a 	or	r3,r3,r2
  842ac0:	e0bffa17 	ldw	r2,-24(fp)
  842ac4:	1884703a 	and	r2,r3,r2
  842ac8:	e0bff915 	stw	r2,-28(fp)
            if (extracted_bit) ++curr_bits_matched;
  842acc:	e0bff917 	ldw	r2,-28(fp)
  842ad0:	1005003a 	cmpeq	r2,r2,zero
  842ad4:	1000031e 	bne	r2,zero,842ae4 <rt_lookup+0xd8>
  842ad8:	e0bffc03 	ldbu	r2,-16(fp)
  842adc:	10800044 	addi	r2,r2,1
  842ae0:	e0bffc05 	stb	r2,-16(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
  842ae4:	e0bffa17 	ldw	r2,-24(fp)
  842ae8:	1004d07a 	srli	r2,r2,1
  842aec:	e0bffa15 	stw	r2,-24(fp)
  842af0:	e0bffa17 	ldw	r2,-24(fp)
  842af4:	1004c03a 	cmpne	r2,r2,zero
  842af8:	103fe21e 	bne	r2,zero,842a84 <rt_lookup+0x78>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
            if (extracted_bit) ++curr_bits_matched;
         }
         if (curr_bits_matched > max_bits_matched)
  842afc:	e0fffc03 	ldbu	r3,-16(fp)
  842b00:	e0bffc43 	ldbu	r2,-15(fp)
  842b04:	10c0072e 	bgeu	r2,r3,842b24 <rt_lookup+0x118>
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
  842b08:	e0bffc03 	ldbu	r2,-16(fp)
  842b0c:	e0bffc45 	stb	r2,-15(fp)
            netmatch = rtp;
  842b10:	e0bffe17 	ldw	r2,-8(fp)
  842b14:	e0bffd15 	stw	r2,-12(fp)
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
  842b18:	e0bffc43 	ldbu	r2,-15(fp)
  842b1c:	10800820 	cmpeqi	r2,r2,32
  842b20:	10000e1e 	bne	r2,zero,842b5c <rt_lookup+0x150>
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
  842b24:	e0bffe17 	ldw	r2,-8(fp)
  842b28:	10800f04 	addi	r2,r2,60
  842b2c:	e0bffe15 	stw	r2,-8(fp)
  842b30:	00802174 	movhi	r2,133
  842b34:	1082cc04 	addi	r2,r2,2864
  842b38:	10800017 	ldw	r2,0(r2)
  842b3c:	10800f24 	muli	r2,r2,60
  842b40:	1007883a 	mov	r3,r2
  842b44:	00802174 	movhi	r2,133
  842b48:	10834104 	addi	r2,r2,3332
  842b4c:	10800017 	ldw	r2,0(r2)
  842b50:	1887883a 	add	r3,r3,r2
  842b54:	e0bffe17 	ldw	r2,-8(fp)
  842b58:	10ffb736 	bltu	r2,r3,842a38 <rt_lookup+0x2c>
               break;
         }
      }
   }

   if (netmatch)
  842b5c:	e0bffd17 	ldw	r2,-12(fp)
  842b60:	1005003a 	cmpeq	r2,r2,zero
  842b64:	1000051e 	bne	r2,zero,842b7c <rt_lookup+0x170>
      netmatch->ipRouteAge = cticks;   /* timestamp entry we used */
  842b68:	00802174 	movhi	r2,133
  842b6c:	10832604 	addi	r2,r2,3224
  842b70:	10c00017 	ldw	r3,0(r2)
  842b74:	e0bffd17 	ldw	r2,-12(fp)
  842b78:	10c00915 	stw	r3,36(r2)

   return netmatch;
  842b7c:	e0bffd17 	ldw	r2,-12(fp)
}
  842b80:	e037883a 	mov	sp,fp
  842b84:	df000017 	ldw	fp,0(sp)
  842b88:	dec00104 	addi	sp,sp,4
  842b8c:	f800283a 	ret

00842b90 <add_route>:
   ip_addr  dest,       /* ultimate destination */
   ip_addr  mask,       /* net mask, 0xFFFFFFFF if dest is host address */
   ip_addr  nexthop,    /* where to forward to */
   int      iface,      /* interface (net) for nexthop */
   int      prot)       /* how we know it: icmp, table, etc */
{
  842b90:	defff604 	addi	sp,sp,-40
  842b94:	dfc00915 	stw	ra,36(sp)
  842b98:	df000815 	stw	fp,32(sp)
  842b9c:	df000804 	addi	fp,sp,32
  842ba0:	e13ffb15 	stw	r4,-20(fp)
  842ba4:	e17ffc15 	stw	r5,-16(fp)
  842ba8:	e1bffd15 	stw	r6,-12(fp)
  842bac:	e1fffe15 	stw	r7,-8(fp)
   RTMIB rtp;           /* scratch route table entrry pointer */
   RTMIB newrt;         /* best entry for new route */
   struct net * ifp;    /* interface (net) for nexthop */

   newrt = NULL;     /* may be replaced with empty or more expendable entry */
  842bb0:	e03ff915 	stw	zero,-28(fp)
					 
   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   ifp = if_getbynum(iface);
  842bb4:	e13ffe17 	ldw	r4,-8(fp)
  842bb8:	083cfd40 	call	83cfd4 <if_getbynum>
  842bbc:	e0bff815 	stw	r2,-32(fp)
   if(!ifp)
  842bc0:	e0bff817 	ldw	r2,-32(fp)
  842bc4:	1004c03a 	cmpne	r2,r2,zero
  842bc8:	1000021e 	bne	r2,zero,842bd4 <add_route+0x44>
      return NULL;
  842bcc:	e03fff15 	stw	zero,-4(fp)
  842bd0:	0000f306 	br	842fa0 <add_route+0x410>

   if (rt_mib == NULL)
  842bd4:	00802174 	movhi	r2,133
  842bd8:	10834104 	addi	r2,r2,3332
  842bdc:	10800017 	ldw	r2,0(r2)
  842be0:	1004c03a 	cmpne	r2,r2,zero
  842be4:	1000021e 	bne	r2,zero,842bf0 <add_route+0x60>
      return NULL;
  842be8:	e03fff15 	stw	zero,-4(fp)
  842bec:	0000ec06 	br	842fa0 <add_route+0x410>

   /* Don't add null masks or IP addresses - they give false positives on
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
  842bf0:	e0bffb17 	ldw	r2,-20(fp)
  842bf4:	1005003a 	cmpeq	r2,r2,zero
  842bf8:	1000031e 	bne	r2,zero,842c08 <add_route+0x78>
  842bfc:	e0bffc17 	ldw	r2,-16(fp)
  842c00:	1004c03a 	cmpne	r2,r2,zero
  842c04:	1000241e 	bne	r2,zero,842c98 <add_route+0x108>
   {
      dtrap();    /* bad configuration? */
  842c08:	082a7c80 	call	82a7c8 <dtrap>
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
  842c0c:	e0bffb17 	ldw	r2,-20(fp)
  842c10:	1004d63a 	srli	r2,r2,24
  842c14:	10c03fcc 	andi	r3,r2,255
  842c18:	e0bffb17 	ldw	r2,-20(fp)
  842c1c:	1004d23a 	srli	r2,r2,8
  842c20:	10bfc00c 	andi	r2,r2,65280
  842c24:	1886b03a 	or	r3,r3,r2
  842c28:	e0bffb17 	ldw	r2,-20(fp)
  842c2c:	10bfc00c 	andi	r2,r2,65280
  842c30:	1004923a 	slli	r2,r2,8
  842c34:	1886b03a 	or	r3,r3,r2
  842c38:	e0bffb17 	ldw	r2,-20(fp)
  842c3c:	10803fcc 	andi	r2,r2,255
  842c40:	1004963a 	slli	r2,r2,24
  842c44:	188ab03a 	or	r5,r3,r2
  842c48:	e0bffc17 	ldw	r2,-16(fp)
  842c4c:	1004d63a 	srli	r2,r2,24
  842c50:	10c03fcc 	andi	r3,r2,255
  842c54:	e0bffc17 	ldw	r2,-16(fp)
  842c58:	1004d23a 	srli	r2,r2,8
  842c5c:	10bfc00c 	andi	r2,r2,65280
  842c60:	1886b03a 	or	r3,r3,r2
  842c64:	e0bffc17 	ldw	r2,-16(fp)
  842c68:	10bfc00c 	andi	r2,r2,65280
  842c6c:	1004923a 	slli	r2,r2,8
  842c70:	1886b03a 	or	r3,r3,r2
  842c74:	e0bffc17 	ldw	r2,-16(fp)
  842c78:	10803fcc 	andi	r2,r2,255
  842c7c:	1004963a 	slli	r2,r2,24
  842c80:	188cb03a 	or	r6,r3,r2
  842c84:	01002174 	movhi	r4,133
  842c88:	2138eb04 	addi	r4,r4,-7252
  842c8c:	08076480 	call	807648 <printf>
	      htonl(dest), htonl(mask) );
      return NULL;
  842c90:	e03fff15 	stw	zero,-4(fp)
  842c94:	0000c206 	br	842fa0 <add_route+0x410>
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
  842c98:	00802174 	movhi	r2,133
  842c9c:	10834104 	addi	r2,r2,3332
  842ca0:	10800017 	ldw	r2,0(r2)
  842ca4:	e0bffa15 	stw	r2,-24(fp)
  842ca8:	00006f06 	br	842e68 <add_route+0x2d8>
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
  842cac:	e0bffa17 	ldw	r2,-24(fp)
  842cb0:	10c00017 	ldw	r3,0(r2)
  842cb4:	e0bffb17 	ldw	r2,-20(fp)
  842cb8:	1880181e 	bne	r3,r2,842d1c <add_route+0x18c>
      {
         rtp->ipRouteNextHop = nexthop;      /* fix entry */
  842cbc:	e0fffa17 	ldw	r3,-24(fp)
  842cc0:	e0bffd17 	ldw	r2,-12(fp)
  842cc4:	18800615 	stw	r2,24(r3)
         rtp->ipRouteAge = cticks;           /* timestamp it */
  842cc8:	00802174 	movhi	r2,133
  842ccc:	10832604 	addi	r2,r2,3224
  842cd0:	10c00017 	ldw	r3,0(r2)
  842cd4:	e0bffa17 	ldw	r2,-24(fp)
  842cd8:	10c00915 	stw	r3,36(r2)
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
  842cdc:	e0bffe17 	ldw	r2,-8(fp)
  842ce0:	10c00044 	addi	r3,r2,1
  842ce4:	e0bffa17 	ldw	r2,-24(fp)
  842ce8:	10c00115 	stw	r3,4(r2)
         rtp->ipRouteProto = prot;           /* icmp, or whatever */
  842cec:	e0fffa17 	ldw	r3,-24(fp)
  842cf0:	e0800217 	ldw	r2,8(fp)
  842cf4:	18800815 	stw	r2,32(r3)
         rtp->ipRouteMask = mask;
  842cf8:	e0fffa17 	ldw	r3,-24(fp)
  842cfc:	e0bffc17 	ldw	r2,-16(fp)
  842d00:	18800a15 	stw	r2,40(r3)
         rtp->ifp = ifp;
  842d04:	e0fffa17 	ldw	r3,-24(fp)
  842d08:	e0bff817 	ldw	r2,-32(fp)
  842d0c:	18800e15 	stw	r2,56(r3)
         return(rtp);   /* just update and exit */
  842d10:	e0bffa17 	ldw	r2,-24(fp)
  842d14:	e0bfff15 	stw	r2,-4(fp)
  842d18:	0000a106 	br	842fa0 <add_route+0x410>
      }
      /* if we didn't find empty slot yet, look for good slot to recycle */
      if (!newrt || (newrt->ipRouteProto != 0))
  842d1c:	e0bff917 	ldw	r2,-28(fp)
  842d20:	1005003a 	cmpeq	r2,r2,zero
  842d24:	1000041e 	bne	r2,zero,842d38 <add_route+0x1a8>
  842d28:	e0bff917 	ldw	r2,-28(fp)
  842d2c:	10800817 	ldw	r2,32(r2)
  842d30:	1005003a 	cmpeq	r2,r2,zero
  842d34:	1000491e 	bne	r2,zero,842e5c <add_route+0x2cc>
      {
         if (!rtp->ipRouteNextHop)  /* found empty slot for use */
  842d38:	e0bffa17 	ldw	r2,-24(fp)
  842d3c:	10800617 	ldw	r2,24(r2)
  842d40:	1004c03a 	cmpne	r2,r2,zero
  842d44:	1000051e 	bne	r2,zero,842d5c <add_route+0x1cc>
         {
            newrt = rtp;   /* record empty route for use */
  842d48:	e0bffa17 	ldw	r2,-24(fp)
  842d4c:	e0bff915 	stw	r2,-28(fp)
            newrt->ipRouteProto = 0;
  842d50:	e0bff917 	ldw	r2,-28(fp)
  842d54:	10000815 	stw	zero,32(r2)
            continue;
  842d58:	00004006 	br	842e5c <add_route+0x2cc>
         }
         /* else see if the new route has higher priority than this slot: */
         if (rtp_priority[prot] >= rtp_priority[rtp->ipRouteProto])
  842d5c:	e0c00217 	ldw	r3,8(fp)
  842d60:	00802174 	movhi	r2,133
  842d64:	10821804 	addi	r2,r2,2144
  842d68:	10c5883a 	add	r2,r2,r3
  842d6c:	11000003 	ldbu	r4,0(r2)
  842d70:	e0bffa17 	ldw	r2,-24(fp)
  842d74:	10c00817 	ldw	r3,32(r2)
  842d78:	00802174 	movhi	r2,133
  842d7c:	10821804 	addi	r2,r2,2144
  842d80:	10c5883a 	add	r2,r2,r3
  842d84:	10800003 	ldbu	r2,0(r2)
  842d88:	20c03fcc 	andi	r3,r4,255
  842d8c:	10803fcc 	andi	r2,r2,255
  842d90:	18803236 	bltu	r3,r2,842e5c <add_route+0x2cc>
         {
            if (!newrt)
  842d94:	e0bff917 	ldw	r2,-28(fp)
  842d98:	1004c03a 	cmpne	r2,r2,zero
  842d9c:	1000031e 	bne	r2,zero,842dac <add_route+0x21c>
            {
               newrt = rtp;
  842da0:	e0bffa17 	ldw	r2,-24(fp)
  842da4:	e0bff915 	stw	r2,-28(fp)
               continue;
  842da8:	00002c06 	br	842e5c <add_route+0x2cc>
            }

            /* see if rtp is less important then newrtp */
            if (rtp_priority[rtp->ipRouteProto] < 
  842dac:	e0bffa17 	ldw	r2,-24(fp)
  842db0:	10c00817 	ldw	r3,32(r2)
  842db4:	00802174 	movhi	r2,133
  842db8:	10821804 	addi	r2,r2,2144
  842dbc:	10c5883a 	add	r2,r2,r3
  842dc0:	11000003 	ldbu	r4,0(r2)
  842dc4:	e0bff917 	ldw	r2,-28(fp)
  842dc8:	10c00817 	ldw	r3,32(r2)
  842dcc:	00802174 	movhi	r2,133
  842dd0:	10821804 	addi	r2,r2,2144
  842dd4:	10c5883a 	add	r2,r2,r3
  842dd8:	10800003 	ldbu	r2,0(r2)
  842ddc:	20c03fcc 	andi	r3,r4,255
  842de0:	10803fcc 	andi	r2,r2,255
  842de4:	1880032e 	bgeu	r3,r2,842df4 <add_route+0x264>
                rtp_priority[newrt->ipRouteProto])
            {
               newrt = rtp;   /* save lower priority entry for recycle */
  842de8:	e0bffa17 	ldw	r2,-24(fp)
  842dec:	e0bff915 	stw	r2,-28(fp)
  842df0:	00001a06 	br	842e5c <add_route+0x2cc>
            }
            else if(rtp_priority[rtp->ipRouteProto] == 
  842df4:	e0bffa17 	ldw	r2,-24(fp)
  842df8:	10c00817 	ldw	r3,32(r2)
  842dfc:	00802174 	movhi	r2,133
  842e00:	10821804 	addi	r2,r2,2144
  842e04:	10c5883a 	add	r2,r2,r3
  842e08:	11000003 	ldbu	r4,0(r2)
  842e0c:	e0bff917 	ldw	r2,-28(fp)
  842e10:	10c00817 	ldw	r3,32(r2)
  842e14:	00802174 	movhi	r2,133
  842e18:	10821804 	addi	r2,r2,2144
  842e1c:	10c5883a 	add	r2,r2,r3
  842e20:	10800003 	ldbu	r2,0(r2)
  842e24:	20c03fcc 	andi	r3,r4,255
  842e28:	10803fcc 	andi	r2,r2,255
  842e2c:	18800b1e 	bne	r3,r2,842e5c <add_route+0x2cc>
                rtp_priority[newrt->ipRouteProto])
            {
               /* if equal priority, keep the older entry for deletion */
               if (c_older(rtp->ipRouteAge, newrt->ipRouteAge) == rtp->ipRouteAge)
  842e30:	e0bffa17 	ldw	r2,-24(fp)
  842e34:	11000917 	ldw	r4,36(r2)
  842e38:	e0bff917 	ldw	r2,-28(fp)
  842e3c:	11400917 	ldw	r5,36(r2)
  842e40:	08233000 	call	823300 <c_older>
  842e44:	1007883a 	mov	r3,r2
  842e48:	e0bffa17 	ldw	r2,-24(fp)
  842e4c:	10800917 	ldw	r2,36(r2)
  842e50:	1880021e 	bne	r3,r2,842e5c <add_route+0x2cc>
                  newrt = rtp;   /* got an older one */
  842e54:	e0bffa17 	ldw	r2,-24(fp)
  842e58:	e0bff915 	stw	r2,-28(fp)
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
  842e5c:	e0bffa17 	ldw	r2,-24(fp)
  842e60:	10800f04 	addi	r2,r2,60
  842e64:	e0bffa15 	stw	r2,-24(fp)
  842e68:	00802174 	movhi	r2,133
  842e6c:	1082cc04 	addi	r2,r2,2864
  842e70:	10800017 	ldw	r2,0(r2)
  842e74:	10800f24 	muli	r2,r2,60
  842e78:	1007883a 	mov	r3,r2
  842e7c:	00802174 	movhi	r2,133
  842e80:	10834104 	addi	r2,r2,3332
  842e84:	10800017 	ldw	r2,0(r2)
  842e88:	1887883a 	add	r3,r3,r2
  842e8c:	e0bffa17 	ldw	r2,-24(fp)
  842e90:	10ff8636 	bltu	r2,r3,842cac <add_route+0x11c>
         }
      }
   }

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
  842e94:	e0bff917 	ldw	r2,-28(fp)
  842e98:	1005003a 	cmpeq	r2,r2,zero
  842e9c:	10002a1e 	bne	r2,zero,842f48 <add_route+0x3b8>
      rtp = newrt;   /* create new entry in lowest priority slot */
  842ea0:	e0bff917 	ldw	r2,-28(fp)
  842ea4:	e0bffa15 	stw	r2,-24(fp)
   else  /* all slots have higher priority, new entry looses */
      return NULL;

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
  842ea8:	e0fffa17 	ldw	r3,-24(fp)
  842eac:	e0bff817 	ldw	r2,-32(fp)
  842eb0:	18800e15 	stw	r2,56(r3)
   rtp->ipRouteDest = dest;
  842eb4:	e0fffa17 	ldw	r3,-24(fp)
  842eb8:	e0bffb17 	ldw	r2,-20(fp)
  842ebc:	18800015 	stw	r2,0(r3)
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
  842ec0:	e13ff817 	ldw	r4,-32(fp)
  842ec4:	08239940 	call	823994 <if_netnumber>
  842ec8:	10c00044 	addi	r3,r2,1
  842ecc:	e0bffa17 	ldw	r2,-24(fp)
  842ed0:	10c00115 	stw	r3,4(r2)
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
  842ed4:	00803934 	movhi	r2,228
  842ed8:	10a9e204 	addi	r2,r2,-22648
  842edc:	10800117 	ldw	r2,4(r2)
  842ee0:	1007883a 	mov	r3,r2
  842ee4:	e0bffa17 	ldw	r2,-24(fp)
  842ee8:	10c00215 	stw	r3,8(r2)
   rtp->ipRouteMetric2 = -1;
  842eec:	e0fffa17 	ldw	r3,-24(fp)
  842ef0:	00bfffc4 	movi	r2,-1
  842ef4:	18800315 	stw	r2,12(r3)
   rtp->ipRouteMetric3 = -1;
  842ef8:	e0fffa17 	ldw	r3,-24(fp)
  842efc:	00bfffc4 	movi	r2,-1
  842f00:	18800415 	stw	r2,16(r3)
   rtp->ipRouteMetric4 = -1;
  842f04:	e0fffa17 	ldw	r3,-24(fp)
  842f08:	00bfffc4 	movi	r2,-1
  842f0c:	18800515 	stw	r2,20(r3)
   rtp->ipRouteNextHop = nexthop;
  842f10:	e0fffa17 	ldw	r3,-24(fp)
  842f14:	e0bffd17 	ldw	r2,-12(fp)
  842f18:	18800615 	stw	r2,24(r3)
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */
  842f1c:	e0fffa17 	ldw	r3,-24(fp)
  842f20:	e0800217 	ldw	r2,8(fp)
  842f24:	18800815 	stw	r2,32(r3)

   if ((dest & mask) == (nexthop & mask))
  842f28:	e0fffb17 	ldw	r3,-20(fp)
  842f2c:	e0bffc17 	ldw	r2,-16(fp)
  842f30:	1888703a 	and	r4,r3,r2
  842f34:	e0fffd17 	ldw	r3,-12(fp)
  842f38:	e0bffc17 	ldw	r2,-16(fp)
  842f3c:	1884703a 	and	r2,r3,r2
  842f40:	20800326 	beq	r4,r2,842f50 <add_route+0x3c0>
  842f44:	00000606 	br	842f60 <add_route+0x3d0>

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
      rtp = newrt;   /* create new entry in lowest priority slot */
   else  /* all slots have higher priority, new entry looses */
      return NULL;
  842f48:	e03fff15 	stw	zero,-4(fp)
  842f4c:	00001406 	br	842fa0 <add_route+0x410>
   rtp->ipRouteMetric4 = -1;
   rtp->ipRouteNextHop = nexthop;
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */

   if ((dest & mask) == (nexthop & mask))
      rtp->ipRouteType = IPRT_DIRECT;
  842f50:	e0fffa17 	ldw	r3,-24(fp)
  842f54:	008000c4 	movi	r2,3
  842f58:	18800715 	stw	r2,28(r3)
  842f5c:	00000306 	br	842f6c <add_route+0x3dc>
   else
      rtp->ipRouteType = IPRT_INDIRECT;
  842f60:	e0fffa17 	ldw	r3,-24(fp)
  842f64:	00800104 	movi	r2,4
  842f68:	18800715 	stw	r2,28(r3)

   rtp->ipRouteAge = cticks;        /* timestamp it */
  842f6c:	00802174 	movhi	r2,133
  842f70:	10832604 	addi	r2,r2,3224
  842f74:	10c00017 	ldw	r3,0(r2)
  842f78:	e0bffa17 	ldw	r2,-24(fp)
  842f7c:	10c00915 	stw	r3,36(r2)
   rtp->ipRouteMask = mask;
  842f80:	e0fffa17 	ldw	r3,-24(fp)
  842f84:	e0bffc17 	ldw	r2,-16(fp)
  842f88:	18800a15 	stw	r2,40(r3)
   rtp->ipRouteMetric5 = -1;
  842f8c:	e0fffa17 	ldw	r3,-24(fp)
  842f90:	00bfffc4 	movi	r2,-1
  842f94:	18800b15 	stw	r2,44(r3)
   return(rtp);
  842f98:	e0bffa17 	ldw	r2,-24(fp)
  842f9c:	e0bfff15 	stw	r2,-4(fp)
  842fa0:	e0bfff17 	ldw	r2,-4(fp)
}
  842fa4:	e037883a 	mov	sp,fp
  842fa8:	dfc00117 	ldw	ra,4(sp)
  842fac:	df000017 	ldw	fp,0(sp)
  842fb0:	dec00204 	addi	sp,sp,8
  842fb4:	f800283a 	ret

00842fb8 <del_route>:
 * RETURNS: Returns number of route table entries deleted. 
 */

int
del_route(ip_addr dest, ip_addr mask, int iface)
{
  842fb8:	defff704 	addi	sp,sp,-36
  842fbc:	dfc00815 	stw	ra,32(sp)
  842fc0:	df000715 	stw	fp,28(sp)
  842fc4:	df000704 	addi	fp,sp,28
  842fc8:	e13ffc15 	stw	r4,-16(fp)
  842fcc:	e17ffd15 	stw	r5,-12(fp)
  842fd0:	e1bffe15 	stw	r6,-8(fp)
   RTMIB rtp;
   int   retval   =  0;
  842fd4:	e03ffa15 	stw	zero,-24(fp)

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
  842fd8:	e0bffe17 	ldw	r2,-8(fp)
  842fdc:	10bfffd8 	cmpnei	r2,r2,-1
  842fe0:	1000021e 	bne	r2,zero,842fec <del_route+0x34>
      ifp = NULL;    /* wildcard */
  842fe4:	e03ff915 	stw	zero,-28(fp)
  842fe8:	00000306 	br	842ff8 <del_route+0x40>
   else
      ifp = if_getbynum(iface);
  842fec:	e13ffe17 	ldw	r4,-8(fp)
  842ff0:	083cfd40 	call	83cfd4 <if_getbynum>
  842ff4:	e0bff915 	stw	r2,-28(fp)

   if (rt_mib == NULL)     /* Make sure we're up */
  842ff8:	00802174 	movhi	r2,133
  842ffc:	10834104 	addi	r2,r2,3332
  843000:	10800017 	ldw	r2,0(r2)
  843004:	1004c03a 	cmpne	r2,r2,zero
  843008:	1000021e 	bne	r2,zero,843014 <del_route+0x5c>
      return 0;
  84300c:	e03fff15 	stw	zero,-4(fp)
  843010:	00003406 	br	8430e4 <del_route+0x12c>

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
  843014:	00802174 	movhi	r2,133
  843018:	10834104 	addi	r2,r2,3332
  84301c:	10800017 	ldw	r2,0(r2)
  843020:	e0bffb15 	stw	r2,-20(fp)
  843024:	00002206 	br	8430b0 <del_route+0xf8>
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
  843028:	e0bffb17 	ldw	r2,-20(fp)
  84302c:	10800617 	ldw	r2,24(r2)
  843030:	1005003a 	cmpeq	r2,r2,zero
  843034:	10001b1e 	bne	r2,zero,8430a4 <del_route+0xec>
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
  843038:	e0bff917 	ldw	r2,-28(fp)
  84303c:	1005003a 	cmpeq	r2,r2,zero
  843040:	1000041e 	bne	r2,zero,843054 <del_route+0x9c>
  843044:	e0bffb17 	ldw	r2,-20(fp)
  843048:	10c00e17 	ldw	r3,56(r2)
  84304c:	e0bff917 	ldw	r2,-28(fp)
  843050:	1880141e 	bne	r3,r2,8430a4 <del_route+0xec>
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
  843054:	e0bffb17 	ldw	r2,-20(fp)
  843058:	10c00017 	ldw	r3,0(r2)
  84305c:	e0bffd17 	ldw	r2,-12(fp)
  843060:	1888703a 	and	r4,r3,r2
  843064:	e0fffc17 	ldw	r3,-16(fp)
  843068:	e0bffd17 	ldw	r2,-12(fp)
  84306c:	1884703a 	and	r2,r3,r2
  843070:	2080081e 	bne	r4,r2,843094 <del_route+0xdc>
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
  843074:	e0bffb17 	ldw	r2,-20(fp)
  843078:	1009883a 	mov	r4,r2
  84307c:	01800f04 	movi	r6,60
  843080:	000b883a 	mov	r5,zero
  843084:	08074b80 	call	8074b8 <memset>
         retval++;
  843088:	e0bffa17 	ldw	r2,-24(fp)
  84308c:	10800044 	addi	r2,r2,1
  843090:	e0bffa15 	stw	r2,-24(fp)
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
  843094:	d0e0d517 	ldw	r3,-31916(gp)
  843098:	e0bffb17 	ldw	r2,-20(fp)
  84309c:	1880011e 	bne	r3,r2,8430a4 <del_route+0xec>
         cachedRoute = NULL;
  8430a0:	d020d515 	stw	zero,-31916(gp)
      ifp = if_getbynum(iface);

   if (rt_mib == NULL)     /* Make sure we're up */
      return 0;

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
  8430a4:	e0bffb17 	ldw	r2,-20(fp)
  8430a8:	10800f04 	addi	r2,r2,60
  8430ac:	e0bffb15 	stw	r2,-20(fp)
  8430b0:	00802174 	movhi	r2,133
  8430b4:	1082cc04 	addi	r2,r2,2864
  8430b8:	10800017 	ldw	r2,0(r2)
  8430bc:	10800f24 	muli	r2,r2,60
  8430c0:	1007883a 	mov	r3,r2
  8430c4:	00802174 	movhi	r2,133
  8430c8:	10834104 	addi	r2,r2,3332
  8430cc:	10800017 	ldw	r2,0(r2)
  8430d0:	1887883a 	add	r3,r3,r2
  8430d4:	e0bffb17 	ldw	r2,-20(fp)
  8430d8:	10ffd336 	bltu	r2,r3,843028 <del_route+0x70>
         retval++;
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
         cachedRoute = NULL;
   }
   return retval;
  8430dc:	e0bffa17 	ldw	r2,-24(fp)
  8430e0:	e0bfff15 	stw	r2,-4(fp)
  8430e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8430e8:	e037883a 	mov	sp,fp
  8430ec:	dfc00117 	ldw	ra,4(sp)
  8430f0:	df000017 	ldw	fp,0(sp)
  8430f4:	dec00204 	addi	sp,sp,8
  8430f8:	f800283a 	ret

008430fc <udpdemux>:
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
  8430fc:	deffec04 	addi	sp,sp,-80
  843100:	dfc01315 	stw	ra,76(sp)
  843104:	df001215 	stw	fp,72(sp)
  843108:	df001204 	addi	fp,sp,72
  84310c:	e13ffe15 	stw	r4,-8(fp)
   unsigned short osum, xsum; /* scratch checksum holders */
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
  843110:	e0bffe17 	ldw	r2,-8(fp)
  843114:	10800317 	ldw	r2,12(r2)
  843118:	e0bffa15 	stw	r2,-24(fp)
   pup = (struct udp*)ip_data(pip);   /*  also need UDP header */
  84311c:	e0bffa17 	ldw	r2,-24(fp)
  843120:	10800003 	ldbu	r2,0(r2)
  843124:	10803fcc 	andi	r2,r2,255
  843128:	108003cc 	andi	r2,r2,15
  84312c:	1085883a 	add	r2,r2,r2
  843130:	1085883a 	add	r2,r2,r2
  843134:	1007883a 	mov	r3,r2
  843138:	e0bffa17 	ldw	r2,-24(fp)
  84313c:	1885883a 	add	r2,r3,r2
  843140:	e0bff915 	stw	r2,-28(fp)
   plen = htons(pup->ud_len);
  843144:	e0bff917 	ldw	r2,-28(fp)
  843148:	1080010b 	ldhu	r2,4(r2)
  84314c:	10bfffcc 	andi	r2,r2,65535
  843150:	1004d23a 	srli	r2,r2,8
  843154:	10bfffcc 	andi	r2,r2,65535
  843158:	10c03fcc 	andi	r3,r2,255
  84315c:	e0bff917 	ldw	r2,-28(fp)
  843160:	1080010b 	ldhu	r2,4(r2)
  843164:	10bfffcc 	andi	r2,r2,65535
  843168:	1004923a 	slli	r2,r2,8
  84316c:	10bfc00c 	andi	r2,r2,65280
  843170:	1884b03a 	or	r2,r3,r2
  843174:	e0bff615 	stw	r2,-40(fp)

   if (plen > p->nb_plen)
  843178:	e0bffe17 	ldw	r2,-8(fp)
  84317c:	10c00417 	ldw	r3,16(r2)
  843180:	e0bff617 	ldw	r2,-40(fp)
  843184:	18802a2e 	bgeu	r3,r2,843230 <udpdemux+0x134>
#ifdef   NPDEBUG
/* 
 * Altera Niche Stack Nios port modification:
 * cast arg to unsigned long to remove build warning
 */
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
  843188:	00802174 	movhi	r2,133
  84318c:	10830104 	addi	r2,r2,3076
  843190:	10800017 	ldw	r2,0(r2)
  843194:	1081000c 	andi	r2,r2,1024
  843198:	1005003a 	cmpeq	r2,r2,zero
  84319c:	1000181e 	bne	r2,zero,843200 <udpdemux+0x104>
  8431a0:	00802174 	movhi	r2,133
  8431a4:	10830104 	addi	r2,r2,3076
  8431a8:	10800017 	ldw	r2,0(r2)
  8431ac:	1080400c 	andi	r2,r2,256
  8431b0:	1005003a 	cmpeq	r2,r2,zero
  8431b4:	1000121e 	bne	r2,zero,843200 <udpdemux+0x104>
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
  8431b8:	e0bffe17 	ldw	r2,-8(fp)
  8431bc:	11400417 	ldw	r5,16(r2)
  8431c0:	e0bff917 	ldw	r2,-28(fp)
  8431c4:	1080010b 	ldhu	r2,4(r2)
  8431c8:	10bfffcc 	andi	r2,r2,65535
  8431cc:	1004d23a 	srli	r2,r2,8
  8431d0:	10bfffcc 	andi	r2,r2,65535
  8431d4:	10c03fcc 	andi	r3,r2,255
  8431d8:	e0bff917 	ldw	r2,-28(fp)
  8431dc:	1080010b 	ldhu	r2,4(r2)
  8431e0:	10bfffcc 	andi	r2,r2,65535
  8431e4:	1004923a 	slli	r2,r2,8
  8431e8:	10bfc00c 	andi	r2,r2,65280
  8431ec:	1884b03a 	or	r2,r3,r2
  8431f0:	11800204 	addi	r6,r2,8
  8431f4:	01002174 	movhi	r4,133
  8431f8:	2138f904 	addi	r4,r4,-7196
  8431fc:	08076480 	call	807648 <printf>
                 p->nb_plen, (unsigned int)(htons(pup->ud_len) + UDPLEN));
#endif
      udp_mib.udpInErrors++;
  843200:	00803934 	movhi	r2,228
  843204:	10a9fc04 	addi	r2,r2,-22544
  843208:	10800217 	ldw	r2,8(r2)
  84320c:	10c00044 	addi	r3,r2,1
  843210:	00803934 	movhi	r2,228
  843214:	10a9fc04 	addi	r2,r2,-22544
  843218:	10c00215 	stw	r3,8(r2)
      udp_free(p);
  84321c:	e13ffe17 	ldw	r4,-8(fp)
  843220:	0843ef80 	call	843ef8 <udp_free>
      return ENP_BAD_HEADER;
  843224:	00bff804 	movi	r2,-32
  843228:	e0bfff15 	stw	r2,-4(fp)
  84322c:	0001c306 	br	84393c <udpdemux+0x840>
   }

   osum = pup->ud_cksum;
  843230:	e0bff917 	ldw	r2,-28(fp)
  843234:	1080018b 	ldhu	r2,6(r2)
  843238:	e0bff78d 	sth	r2,-34(fp)
   /* did other guy use checksumming? */
   if (osum)
  84323c:	e0bff78b 	ldhu	r2,-34(fp)
  843240:	1005003a 	cmpeq	r2,r2,zero
  843244:	1000631e 	bne	r2,zero,8433d4 <udpdemux+0x2d8>
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
  843248:	e0bff617 	ldw	r2,-40(fp)
  84324c:	1080004c 	andi	r2,r2,1
  843250:	10803fcc 	andi	r2,r2,255
  843254:	1005003a 	cmpeq	r2,r2,zero
  843258:	1000041e 	bne	r2,zero,84326c <udpdemux+0x170>
  84325c:	e0bff917 	ldw	r2,-28(fp)
  843260:	e0fff617 	ldw	r3,-40(fp)
  843264:	10c5883a 	add	r2,r2,r3
  843268:	10000005 	stb	zero,0(r2)
         php.ph_src = p->fhost;
  84326c:	e0bffe17 	ldw	r2,-8(fp)
  843270:	10800717 	ldw	r2,28(r2)
  843274:	e0bffb15 	stw	r2,-20(fp)
      php.ph_dest = pip->ip_dest;
  843278:	e0bffa17 	ldw	r2,-24(fp)
  84327c:	10800417 	ldw	r2,16(r2)
  843280:	e0bffc15 	stw	r2,-16(fp)
      php.ph_zero = 0;
  843284:	e03ffd05 	stb	zero,-12(fp)
      php.ph_prot = UDP_PROT;
  843288:	00800444 	movi	r2,17
  84328c:	e0bffd45 	stb	r2,-11(fp)
      php.ph_len  = pup->ud_len;
  843290:	e0bff917 	ldw	r2,-28(fp)
  843294:	1080010b 	ldhu	r2,4(r2)
  843298:	e0bffd8d 	sth	r2,-10(fp)

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
  84329c:	e13ffb04 	addi	r4,fp,-20
  8432a0:	01400184 	movi	r5,6
  8432a4:	08256340 	call	825634 <cksum>
  8432a8:	1007883a 	mov	r3,r2
  8432ac:	e0bff917 	ldw	r2,-28(fp)
  8432b0:	10c0018d 	sth	r3,6(r2)
      xsum = ~cksum(pup, (plen+1)>>1);
  8432b4:	e0bff617 	ldw	r2,-40(fp)
  8432b8:	10800044 	addi	r2,r2,1
  8432bc:	100ad07a 	srli	r5,r2,1
  8432c0:	e13ff917 	ldw	r4,-28(fp)
  8432c4:	08256340 	call	825634 <cksum>
  8432c8:	0084303a 	nor	r2,zero,r2
  8432cc:	e0bff70d 	sth	r2,-36(fp)
      if (!xsum)
  8432d0:	e0bff70b 	ldhu	r2,-36(fp)
  8432d4:	1004c03a 	cmpne	r2,r2,zero
  8432d8:	1000021e 	bne	r2,zero,8432e4 <udpdemux+0x1e8>
         xsum = 0xffff;
  8432dc:	00bfffc4 	movi	r2,-1
  8432e0:	e0bff70d 	sth	r2,-36(fp)
      pup->ud_cksum = osum;
  8432e4:	e0fff917 	ldw	r3,-28(fp)
  8432e8:	e0bff78b 	ldhu	r2,-34(fp)
  8432ec:	1880018d 	sth	r2,6(r3)
      if (xsum != osum)
  8432f0:	e0fff70b 	ldhu	r3,-36(fp)
  8432f4:	e0bff78b 	ldhu	r2,-34(fp)
  8432f8:	18803626 	beq	r3,r2,8433d4 <udpdemux+0x2d8>
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
  8432fc:	00802174 	movhi	r2,133
  843300:	10830104 	addi	r2,r2,3076
  843304:	10800017 	ldw	r2,0(r2)
  843308:	1081000c 	andi	r2,r2,1024
  84330c:	1005003a 	cmpeq	r2,r2,zero
  843310:	1000241e 	bne	r2,zero,8433a4 <udpdemux+0x2a8>
  843314:	00802174 	movhi	r2,133
  843318:	10830104 	addi	r2,r2,3076
  84331c:	10800017 	ldw	r2,0(r2)
  843320:	1080400c 	andi	r2,r2,256
  843324:	1005003a 	cmpeq	r2,r2,zero
  843328:	10001e1e 	bne	r2,zero,8433a4 <udpdemux+0x2a8>
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
  84332c:	e17ff78b 	ldhu	r5,-34(fp)
  843330:	e1bff70b 	ldhu	r6,-36(fp)
  843334:	e0bffe17 	ldw	r2,-8(fp)
  843338:	10800717 	ldw	r2,28(r2)
  84333c:	11c03fcc 	andi	r7,r2,255
  843340:	e0bffe17 	ldw	r2,-8(fp)
  843344:	10800717 	ldw	r2,28(r2)
  843348:	1004d23a 	srli	r2,r2,8
  84334c:	11003fcc 	andi	r4,r2,255
  843350:	e0bffe17 	ldw	r2,-8(fp)
  843354:	10800717 	ldw	r2,28(r2)
  843358:	1004d43a 	srli	r2,r2,16
  84335c:	10c03fcc 	andi	r3,r2,255
  843360:	e0bffe17 	ldw	r2,-8(fp)
  843364:	10800717 	ldw	r2,28(r2)
  843368:	1004d63a 	srli	r2,r2,24
  84336c:	d9000015 	stw	r4,0(sp)
  843370:	d8c00115 	stw	r3,4(sp)
  843374:	d8800215 	stw	r2,8(sp)
  843378:	01002174 	movhi	r4,133
  84337c:	21390304 	addi	r4,r4,-7156
  843380:	08076480 	call	807648 <printf>
                    osum, xsum, PUSH_IPADDR(p->fhost));
            if (NDEBUG & DUMP)
  843384:	00802174 	movhi	r2,133
  843388:	10830104 	addi	r2,r2,3076
  84338c:	10800017 	ldw	r2,0(r2)
  843390:	1080008c 	andi	r2,r2,2
  843394:	1005003a 	cmpeq	r2,r2,zero
  843398:	1000021e 	bne	r2,zero,8433a4 <udpdemux+0x2a8>
               ip_dump(p);
  84339c:	e13ffe17 	ldw	r4,-8(fp)
  8433a0:	083eeb40 	call	83eeb4 <ip_dump>
         }
#endif
         udp_mib.udpInErrors++;
  8433a4:	00803934 	movhi	r2,228
  8433a8:	10a9fc04 	addi	r2,r2,-22544
  8433ac:	10800217 	ldw	r2,8(r2)
  8433b0:	10c00044 	addi	r3,r2,1
  8433b4:	00803934 	movhi	r2,228
  8433b8:	10a9fc04 	addi	r2,r2,-22544
  8433bc:	10c00215 	stw	r3,8(r2)
         udp_free(p);
  8433c0:	e13ffe17 	ldw	r4,-8(fp)
  8433c4:	0843ef80 	call	843ef8 <udp_free>
         return ENP_BAD_HEADER;
  8433c8:	00bff804 	movi	r2,-32
  8433cc:	e0bfff15 	stw	r2,-4(fp)
  8433d0:	00015a06 	br	84393c <udpdemux+0x840>
      }
   }

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
  8433d4:	e13ff917 	ldw	r4,-28(fp)
  8433d8:	0843c0c0 	call	843c0c <udpswap>
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
  8433dc:	e0bffa17 	ldw	r2,-24(fp)
  8433e0:	10800003 	ldbu	r2,0(r2)
  8433e4:	10803fcc 	andi	r2,r2,255
  8433e8:	108003cc 	andi	r2,r2,15
  8433ec:	1085883a 	add	r2,r2,r2
  8433f0:	1085883a 	add	r2,r2,r2
  8433f4:	10800204 	addi	r2,r2,8
  8433f8:	e0bff515 	stw	r2,-44(fp)
   p->nb_plen -= e;
  8433fc:	e0bffe17 	ldw	r2,-8(fp)
  843400:	10c00417 	ldw	r3,16(r2)
  843404:	e0bff517 	ldw	r2,-44(fp)
  843408:	1887c83a 	sub	r3,r3,r2
  84340c:	e0bffe17 	ldw	r2,-8(fp)
  843410:	10c00415 	stw	r3,16(r2)
   p->nb_prot += e;
  843414:	e0bffe17 	ldw	r2,-8(fp)
  843418:	10c00317 	ldw	r3,12(r2)
  84341c:	e0bff517 	ldw	r2,-44(fp)
  843420:	1887883a 	add	r3,r3,r2
  843424:	e0bffe17 	ldw	r2,-8(fp)
  843428:	10c00315 	stw	r3,12(r2)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
  84342c:	00802174 	movhi	r2,133
  843430:	10830104 	addi	r2,r2,3076
  843434:	10800017 	ldw	r2,0(r2)
  843438:	1081000c 	andi	r2,r2,1024
  84343c:	1005003a 	cmpeq	r2,r2,zero
  843440:	1000221e 	bne	r2,zero,8434cc <udpdemux+0x3d0>
  843444:	00802174 	movhi	r2,133
  843448:	10830104 	addi	r2,r2,3076
  84344c:	10800017 	ldw	r2,0(r2)
  843450:	1080400c 	andi	r2,r2,256
  843454:	1005003a 	cmpeq	r2,r2,zero
  843458:	10001c1e 	bne	r2,zero,8434cc <udpdemux+0x3d0>
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
  84345c:	e0bffe17 	ldw	r2,-8(fp)
  843460:	10800717 	ldw	r2,28(r2)
  843464:	11803fcc 	andi	r6,r2,255
  843468:	e0bffe17 	ldw	r2,-8(fp)
  84346c:	10800717 	ldw	r2,28(r2)
  843470:	1004d23a 	srli	r2,r2,8
  843474:	11c03fcc 	andi	r7,r2,255
  843478:	e0bffe17 	ldw	r2,-8(fp)
  84347c:	10800717 	ldw	r2,28(r2)
  843480:	1004d43a 	srli	r2,r2,16
  843484:	10c03fcc 	andi	r3,r2,255
  843488:	e0bffe17 	ldw	r2,-8(fp)
  84348c:	10800717 	ldw	r2,28(r2)
  843490:	1008d63a 	srli	r4,r2,24
  843494:	e0bff917 	ldw	r2,-28(fp)
  843498:	1080000b 	ldhu	r2,0(r2)
  84349c:	117fffcc 	andi	r5,r2,65535
  8434a0:	e0bff917 	ldw	r2,-28(fp)
  8434a4:	1080008b 	ldhu	r2,2(r2)
  8434a8:	10bfffcc 	andi	r2,r2,65535
  8434ac:	d8c00015 	stw	r3,0(sp)
  8434b0:	d9000115 	stw	r4,4(sp)
  8434b4:	d9400215 	stw	r5,8(sp)
  8434b8:	d8800315 	stw	r2,12(sp)
  8434bc:	01002174 	movhi	r4,133
  8434c0:	21391104 	addi	r4,r4,-7100
  8434c4:	e17ff617 	ldw	r5,-40(fp)
  8434c8:	08076480 	call	807648 <printf>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
  8434cc:	00802174 	movhi	r2,133
  8434d0:	10831a04 	addi	r2,r2,3176
  8434d4:	10800017 	ldw	r2,0(r2)
  8434d8:	e0bff815 	stw	r2,-32(fp)
  8434dc:	0000b106 	br	8437a4 <udpdemux+0x6a8>
         continue;
#endif

      /* enforce all three aspects of tuple matching. Old code
      assumed lport was unique, which is not always so. */
      if (con->u_lport && (con->u_lport != pup->ud_dstp))
  8434e0:	e0bff817 	ldw	r2,-32(fp)
  8434e4:	1080018b 	ldhu	r2,6(r2)
  8434e8:	10bfffcc 	andi	r2,r2,65535
  8434ec:	1005003a 	cmpeq	r2,r2,zero
  8434f0:	1000071e 	bne	r2,zero,843510 <udpdemux+0x414>
  8434f4:	e0bff817 	ldw	r2,-32(fp)
  8434f8:	10c0018b 	ldhu	r3,6(r2)
  8434fc:	e0bff917 	ldw	r2,-28(fp)
  843500:	1080008b 	ldhu	r2,2(r2)
  843504:	18ffffcc 	andi	r3,r3,65535
  843508:	10bfffcc 	andi	r2,r2,65535
  84350c:	1880a21e 	bne	r3,r2,843798 <udpdemux+0x69c>
         continue;
      if (con->u_fport && (con->u_fport != pup->ud_srcp))
  843510:	e0bff817 	ldw	r2,-32(fp)
  843514:	1080020b 	ldhu	r2,8(r2)
  843518:	10bfffcc 	andi	r2,r2,65535
  84351c:	1005003a 	cmpeq	r2,r2,zero
  843520:	1000071e 	bne	r2,zero,843540 <udpdemux+0x444>
  843524:	e0bff817 	ldw	r2,-32(fp)
  843528:	10c0020b 	ldhu	r3,8(r2)
  84352c:	e0bff917 	ldw	r2,-28(fp)
  843530:	1080000b 	ldhu	r2,0(r2)
  843534:	18ffffcc 	andi	r3,r3,65535
  843538:	10bfffcc 	andi	r2,r2,65535
  84353c:	1880961e 	bne	r3,r2,843798 <udpdemux+0x69c>
         continue;
      if (con->u_fhost && (con->u_fhost != p->fhost))
  843540:	e0bff817 	ldw	r2,-32(fp)
  843544:	10800417 	ldw	r2,16(r2)
  843548:	1005003a 	cmpeq	r2,r2,zero
  84354c:	1000051e 	bne	r2,zero,843564 <udpdemux+0x468>
  843550:	e0bff817 	ldw	r2,-32(fp)
  843554:	10c00417 	ldw	r3,16(r2)
  843558:	e0bffe17 	ldw	r2,-8(fp)
  84355c:	10800717 	ldw	r2,28(r2)
  843560:	18808d1e 	bne	r3,r2,843798 <udpdemux+0x69c>
#ifdef IP_MULTICAST
      /* In the case of multicast, check if there is multicast membership
       * attached to this socket and if so, is the incoming packet
       * addressed to the multicast address
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
  843564:	e0bffa17 	ldw	r2,-24(fp)
  843568:	10800417 	ldw	r2,16(r2)
  84356c:	1004d63a 	srli	r2,r2,24
  843570:	10c03fcc 	andi	r3,r2,255
  843574:	e0bffa17 	ldw	r2,-24(fp)
  843578:	10800417 	ldw	r2,16(r2)
  84357c:	1004d23a 	srli	r2,r2,8
  843580:	10bfc00c 	andi	r2,r2,65280
  843584:	1886b03a 	or	r3,r3,r2
  843588:	e0bffa17 	ldw	r2,-24(fp)
  84358c:	10800417 	ldw	r2,16(r2)
  843590:	10bfc00c 	andi	r2,r2,65280
  843594:	1004923a 	slli	r2,r2,8
  843598:	1886b03a 	or	r3,r3,r2
  84359c:	e0bffa17 	ldw	r2,-24(fp)
  8435a0:	10800417 	ldw	r2,16(r2)
  8435a4:	10803fcc 	andi	r2,r2,255
  8435a8:	1004963a 	slli	r2,r2,24
  8435ac:	1884b03a 	or	r2,r3,r2
  8435b0:	10fc002c 	andhi	r3,r2,61440
  8435b4:	00b80034 	movhi	r2,57344
  8435b8:	1880301e 	bne	r3,r2,84367c <udpdemux+0x580>
      {
         struct socket *soptr = (struct socket *)con->u_data;
  8435bc:	e0bff817 	ldw	r2,-32(fp)
  8435c0:	10800617 	ldw	r2,24(r2)
  8435c4:	e0bff415 	stw	r2,-48(fp)

         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
  8435c8:	e0bff817 	ldw	r2,-32(fp)
  8435cc:	10c00517 	ldw	r3,20(r2)
  8435d0:	00802134 	movhi	r2,132
  8435d4:	10a3c304 	addi	r2,r2,-28916
  8435d8:	1880281e 	bne	r3,r2,84367c <udpdemux+0x580>
  8435dc:	e0bff417 	ldw	r2,-48(fp)
  8435e0:	10800317 	ldw	r2,12(r2)
  8435e4:	1005003a 	cmpeq	r2,r2,zero
  8435e8:	1000241e 	bne	r2,zero,84367c <udpdemux+0x580>
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;
  8435ec:	e0bff417 	ldw	r2,-48(fp)
  8435f0:	10800317 	ldw	r2,12(r2)
  8435f4:	e0bff215 	stw	r2,-56(fp)

            for (i = 0; i < imo->imo_num_memberships; ++i)
  8435f8:	e03ff30d 	sth	zero,-52(fp)
  8435fc:	00001906 	br	843664 <udpdemux+0x568>
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
  843600:	e0bff30b 	ldhu	r2,-52(fp)
  843604:	e0fff217 	ldw	r3,-56(fp)
  843608:	1085883a 	add	r2,r2,r2
  84360c:	1085883a 	add	r2,r2,r2
  843610:	10c5883a 	add	r2,r2,r3
  843614:	10800204 	addi	r2,r2,8
  843618:	10800017 	ldw	r2,0(r2)
  84361c:	10c00117 	ldw	r3,4(r2)
  843620:	e0bffe17 	ldw	r2,-8(fp)
  843624:	10800617 	ldw	r2,24(r2)
  843628:	18800b1e 	bne	r3,r2,843658 <udpdemux+0x55c>
  84362c:	e0bff30b 	ldhu	r2,-52(fp)
  843630:	e0fff217 	ldw	r3,-56(fp)
  843634:	1085883a 	add	r2,r2,r2
  843638:	1085883a 	add	r2,r2,r2
  84363c:	10c5883a 	add	r2,r2,r3
  843640:	10800204 	addi	r2,r2,8
  843644:	10800017 	ldw	r2,0(r2)
  843648:	10c00017 	ldw	r3,0(r2)
  84364c:	e0bffa17 	ldw	r2,-24(fp)
  843650:	10800417 	ldw	r2,16(r2)
  843654:	18800926 	beq	r3,r2,84367c <udpdemux+0x580>
         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
  843658:	e0bff30b 	ldhu	r2,-52(fp)
  84365c:	10800044 	addi	r2,r2,1
  843660:	e0bff30d 	sth	r2,-52(fp)
  843664:	e0bff217 	ldw	r2,-56(fp)
  843668:	1080018b 	ldhu	r2,6(r2)
  84366c:	10ffffcc 	andi	r3,r2,65535
  843670:	e0bff30b 	ldhu	r2,-52(fp)
  843674:	10ffe236 	bltu	r2,r3,843600 <udpdemux+0x504>
                   (imo->imo_membership[i]->inm_addr == pip->ip_dest))
               {
                  goto found;
               }
            }
            continue;
  843678:	00004706 	br	843798 <udpdemux+0x69c>
#endif /* INCLUDE_TCP */

      /* if this endpoint has been bound to a local interface address,
       * make sure the packet was received on that interface address
       */
      if (!IN_MULTICAST(ntohl(pip->ip_dest)))
  84367c:	e0bffa17 	ldw	r2,-24(fp)
  843680:	10800417 	ldw	r2,16(r2)
  843684:	1004d63a 	srli	r2,r2,24
  843688:	10c03fcc 	andi	r3,r2,255
  84368c:	e0bffa17 	ldw	r2,-24(fp)
  843690:	10800417 	ldw	r2,16(r2)
  843694:	1004d23a 	srli	r2,r2,8
  843698:	10bfc00c 	andi	r2,r2,65280
  84369c:	1886b03a 	or	r3,r3,r2
  8436a0:	e0bffa17 	ldw	r2,-24(fp)
  8436a4:	10800417 	ldw	r2,16(r2)
  8436a8:	10bfc00c 	andi	r2,r2,65280
  8436ac:	1004923a 	slli	r2,r2,8
  8436b0:	1886b03a 	or	r3,r3,r2
  8436b4:	e0bffa17 	ldw	r2,-24(fp)
  8436b8:	10800417 	ldw	r2,16(r2)
  8436bc:	10803fcc 	andi	r2,r2,255
  8436c0:	1004963a 	slli	r2,r2,24
  8436c4:	1884b03a 	or	r2,r3,r2
  8436c8:	10fc002c 	andhi	r3,r2,61440
  8436cc:	00b80034 	movhi	r2,57344
  8436d0:	18800926 	beq	r3,r2,8436f8 <udpdemux+0x5fc>
      {
         if ((con->u_lhost != 0) && (con->u_lhost != pip->ip_dest)) 
  8436d4:	e0bff817 	ldw	r2,-32(fp)
  8436d8:	10800317 	ldw	r2,12(r2)
  8436dc:	1005003a 	cmpeq	r2,r2,zero
  8436e0:	1000051e 	bne	r2,zero,8436f8 <udpdemux+0x5fc>
  8436e4:	e0bff817 	ldw	r2,-32(fp)
  8436e8:	10c00317 	ldw	r3,12(r2)
  8436ec:	e0bffa17 	ldw	r2,-24(fp)
  8436f0:	10800417 	ldw	r2,16(r2)
  8436f4:	1880281e 	bne	r3,r2,843798 <udpdemux+0x69c>
            continue;
      }

      /* fall to here if we found it */
      udp_mib.udpInDatagrams++;
  8436f8:	00803934 	movhi	r2,228
  8436fc:	10a9fc04 	addi	r2,r2,-22544
  843700:	10800017 	ldw	r2,0(r2)
  843704:	10c00044 	addi	r3,r2,1
  843708:	00803934 	movhi	r2,228
  84370c:	10a9fc04 	addi	r2,r2,-22544
  843710:	10c00015 	stw	r3,0(r2)
      if (con->u_rcv)         /* if upcall address is set... */
  843714:	e0bff817 	ldw	r2,-32(fp)
  843718:	10800517 	ldw	r2,20(r2)
  84371c:	1005003a 	cmpeq	r2,r2,zero
  843720:	10000c1e 	bne	r2,zero,843754 <udpdemux+0x658>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
  843724:	0009883a 	mov	r4,zero
  843728:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         e = ((*con->u_rcv)(p, con->u_data));   /* upcall it */
  84372c:	e0bff817 	ldw	r2,-32(fp)
  843730:	10c00517 	ldw	r3,20(r2)
  843734:	e0bff817 	ldw	r2,-32(fp)
  843738:	11400617 	ldw	r5,24(r2)
  84373c:	e13ffe17 	ldw	r4,-8(fp)
  843740:	183ee83a 	callr	r3
  843744:	e0bff515 	stw	r2,-44(fp)
         LOCK_NET_RESOURCE(NET_RESID);
  843748:	0009883a 	mov	r4,zero
  84374c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
  843750:	00000206 	br	84375c <udpdemux+0x660>
      }
      else
         e = ENP_LOGIC;
  843754:	00bffd44 	movi	r2,-11
  843758:	e0bff515 	stw	r2,-44(fp)

      /* if error occurred in upcall or there was no upcall hander
         its up to this routine to free the packet buffer */
      if (e)
  84375c:	e0bff517 	ldw	r2,-44(fp)
  843760:	1005003a 	cmpeq	r2,r2,zero
  843764:	1000091e 	bne	r2,zero,84378c <udpdemux+0x690>
      {
         udp_mib.udpInErrors++;
  843768:	00803934 	movhi	r2,228
  84376c:	10a9fc04 	addi	r2,r2,-22544
  843770:	10800217 	ldw	r2,8(r2)
  843774:	10c00044 	addi	r3,r2,1
  843778:	00803934 	movhi	r2,228
  84377c:	10a9fc04 	addi	r2,r2,-22544
  843780:	10c00215 	stw	r3,8(r2)
         udp_free(p);
  843784:	e13ffe17 	ldw	r4,-8(fp)
  843788:	0843ef80 	call	843ef8 <udp_free>
      }

      return(e);
  84378c:	e0bff517 	ldw	r2,-44(fp)
  843790:	e0bfff15 	stw	r2,-4(fp)
  843794:	00006906 	br	84393c <udpdemux+0x840>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
  843798:	e0bff817 	ldw	r2,-32(fp)
  84379c:	10800017 	ldw	r2,0(r2)
  8437a0:	e0bff815 	stw	r2,-32(fp)
  8437a4:	e0bff817 	ldw	r2,-32(fp)
  8437a8:	1004c03a 	cmpne	r2,r2,zero
  8437ac:	103f4c1e 	bne	r2,zero,8434e0 <udpdemux+0x3e4>

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
  8437b0:	e0bffa17 	ldw	r2,-24(fp)
  8437b4:	10800417 	ldw	r2,16(r2)
  8437b8:	10bfffe0 	cmpeqi	r2,r2,-1
  8437bc:	1000121e 	bne	r2,zero,843808 <udpdemux+0x70c>
  8437c0:	e0bffa17 	ldw	r2,-24(fp)
  8437c4:	10c00417 	ldw	r3,16(r2)
  8437c8:	e0bffe17 	ldw	r2,-8(fp)
  8437cc:	10800617 	ldw	r2,24(r2)
  8437d0:	10800e17 	ldw	r2,56(r2)
  8437d4:	18800c26 	beq	r3,r2,843808 <udpdemux+0x70c>
  8437d8:	e0bffa17 	ldw	r2,-24(fp)
  8437dc:	10c00417 	ldw	r3,16(r2)
  8437e0:	e0bffe17 	ldw	r2,-8(fp)
  8437e4:	10800617 	ldw	r2,24(r2)
  8437e8:	10800f17 	ldw	r2,60(r2)
  8437ec:	18800626 	beq	r3,r2,843808 <udpdemux+0x70c>
  8437f0:	e0bffa17 	ldw	r2,-24(fp)
  8437f4:	10c00417 	ldw	r3,16(r2)
  8437f8:	e0bffe17 	ldw	r2,-8(fp)
  8437fc:	10800617 	ldw	r2,24(r2)
  843800:	10801017 	ldw	r2,64(r2)
  843804:	18801b1e 	bne	r3,r2,843874 <udpdemux+0x778>
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
  843808:	00802174 	movhi	r2,133
  84380c:	10830104 	addi	r2,r2,3076
  843810:	10800017 	ldw	r2,0(r2)
  843814:	1081000c 	andi	r2,r2,1024
  843818:	1005003a 	cmpeq	r2,r2,zero
  84381c:	1000091e 	bne	r2,zero,843844 <udpdemux+0x748>
  843820:	00802174 	movhi	r2,133
  843824:	10830104 	addi	r2,r2,3076
  843828:	10800017 	ldw	r2,0(r2)
  84382c:	1080400c 	andi	r2,r2,256
  843830:	1005003a 	cmpeq	r2,r2,zero
  843834:	1000031e 	bne	r2,zero,843844 <udpdemux+0x748>
         dprintf("UDP: ignoring ip broadcast\n");
  843838:	01002174 	movhi	r4,133
  84383c:	21391b04 	addi	r4,r4,-7060
  843840:	08077600 	call	807760 <puts>
#endif
      udp_mib.udpInErrors++;
  843844:	00803934 	movhi	r2,228
  843848:	10a9fc04 	addi	r2,r2,-22544
  84384c:	10800217 	ldw	r2,8(r2)
  843850:	10c00044 	addi	r3,r2,1
  843854:	00803934 	movhi	r2,228
  843858:	10a9fc04 	addi	r2,r2,-22544
  84385c:	10c00215 	stw	r3,8(r2)
      udp_free(p);
  843860:	e13ffe17 	ldw	r4,-8(fp)
  843864:	0843ef80 	call	843ef8 <udp_free>
      return ENP_NOT_MINE;
  843868:	00800084 	movi	r2,2
  84386c:	e0bfff15 	stw	r2,-4(fp)
  843870:	00003206 	br	84393c <udpdemux+0x840>
   }

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
  843874:	00802174 	movhi	r2,133
  843878:	10830104 	addi	r2,r2,3076
  84387c:	10800017 	ldw	r2,0(r2)
  843880:	1081000c 	andi	r2,r2,1024
  843884:	1005003a 	cmpeq	r2,r2,zero
  843888:	1000141e 	bne	r2,zero,8438dc <udpdemux+0x7e0>
  84388c:	00802174 	movhi	r2,133
  843890:	10830104 	addi	r2,r2,3076
  843894:	10800017 	ldw	r2,0(r2)
  843898:	1080400c 	andi	r2,r2,256
  84389c:	1005003a 	cmpeq	r2,r2,zero
  8438a0:	10000e1e 	bne	r2,zero,8438dc <udpdemux+0x7e0>
   {
      dprintf("UDP: unexpected port %04x\n", pup->ud_dstp);
  8438a4:	e0bff917 	ldw	r2,-28(fp)
  8438a8:	1080008b 	ldhu	r2,2(r2)
  8438ac:	117fffcc 	andi	r5,r2,65535
  8438b0:	01002174 	movhi	r4,133
  8438b4:	21392204 	addi	r4,r4,-7032
  8438b8:	08076480 	call	807648 <printf>
      if (NDEBUG & DUMP) 
  8438bc:	00802174 	movhi	r2,133
  8438c0:	10830104 	addi	r2,r2,3076
  8438c4:	10800017 	ldw	r2,0(r2)
  8438c8:	1080008c 	andi	r2,r2,2
  8438cc:	1005003a 	cmpeq	r2,r2,zero
  8438d0:	1000021e 	bne	r2,zero,8438dc <udpdemux+0x7e0>
         ip_dump(p);
  8438d4:	e13ffe17 	ldw	r4,-8(fp)
  8438d8:	083eeb40 	call	83eeb4 <ip_dump>
#ifdef FULL_ICMP
   /* send destination unreachable.  Swap back all the swapped information */
   /* so that the destun packet format is correct */

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
  8438dc:	e13ff917 	ldw	r4,-28(fp)
  8438e0:	0843c0c0 	call	843c0c <udpswap>
#endif   /* BYTE_ORDER */
   
   icmp_destun(p->fhost, p->net->n_ipaddr, pip, DSTPORT, p->net);
  8438e4:	e0bffe17 	ldw	r2,-8(fp)
  8438e8:	11000717 	ldw	r4,28(r2)
  8438ec:	e0bffe17 	ldw	r2,-8(fp)
  8438f0:	10800617 	ldw	r2,24(r2)
  8438f4:	11400a17 	ldw	r5,40(r2)
  8438f8:	e0bffe17 	ldw	r2,-8(fp)
  8438fc:	10800617 	ldw	r2,24(r2)
  843900:	d8800015 	stw	r2,0(sp)
  843904:	e1bffa17 	ldw	r6,-24(fp)
  843908:	01c000c4 	movi	r7,3
  84390c:	0849c7c0 	call	849c7c <icmp_destun>
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
  843910:	00803934 	movhi	r2,228
  843914:	10a9fc04 	addi	r2,r2,-22544
  843918:	10800117 	ldw	r2,4(r2)
  84391c:	10c00044 	addi	r3,r2,1
  843920:	00803934 	movhi	r2,228
  843924:	10a9fc04 	addi	r2,r2,-22544
  843928:	10c00115 	stw	r3,4(r2)
   udp_free(p);
  84392c:	e13ffe17 	ldw	r4,-8(fp)
  843930:	0843ef80 	call	843ef8 <udp_free>
   return ENP_NOT_MINE;
  843934:	00800084 	movi	r2,2
  843938:	e0bfff15 	stw	r2,-4(fp)
  84393c:	e0bfff17 	ldw	r2,-4(fp)
}
  843940:	e037883a 	mov	sp,fp
  843944:	dfc00117 	ldw	ra,4(sp)
  843948:	df000017 	ldw	fp,0(sp)
  84394c:	dec00204 	addi	sp,sp,8
  843950:	f800283a 	ret

00843954 <udp_send>:
 * detected. 
 */

int
udp_send(unshort fport, unshort lport, PACKET p)
{
  843954:	deffee04 	addi	sp,sp,-72
  843958:	dfc01115 	stw	ra,68(sp)
  84395c:	df001015 	stw	fp,64(sp)
  843960:	df001004 	addi	fp,sp,64
  843964:	e1bffe15 	stw	r6,-8(fp)
  843968:	e13ffc0d 	sth	r4,-16(fp)
  84396c:	e17ffd0d 	sth	r5,-12(fp)
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
  843970:	00802174 	movhi	r2,133
  843974:	10830104 	addi	r2,r2,3076
  843978:	10800017 	ldw	r2,0(r2)
  84397c:	1080410c 	andi	r2,r2,260
  843980:	1005003a 	cmpeq	r2,r2,zero
  843984:	10001c1e 	bne	r2,zero,8439f8 <udp_send+0xa4>
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
  843988:	e0bffe17 	ldw	r2,-8(fp)
  84398c:	11800417 	ldw	r6,16(r2)
  843990:	e1fffd0b 	ldhu	r7,-12(fp)
  843994:	e0bffe17 	ldw	r2,-8(fp)
  843998:	10800717 	ldw	r2,28(r2)
  84399c:	12003fcc 	andi	r8,r2,255
  8439a0:	e0bffe17 	ldw	r2,-8(fp)
  8439a4:	10800717 	ldw	r2,28(r2)
  8439a8:	1004d23a 	srli	r2,r2,8
  8439ac:	11003fcc 	andi	r4,r2,255
  8439b0:	e0bffe17 	ldw	r2,-8(fp)
  8439b4:	10800717 	ldw	r2,28(r2)
  8439b8:	1004d43a 	srli	r2,r2,16
  8439bc:	11403fcc 	andi	r5,r2,255
  8439c0:	e0bffe17 	ldw	r2,-8(fp)
  8439c4:	10800717 	ldw	r2,28(r2)
  8439c8:	1004d63a 	srli	r2,r2,24
  8439cc:	e0fffc0b 	ldhu	r3,-16(fp)
  8439d0:	d9000015 	stw	r4,0(sp)
  8439d4:	d9400115 	stw	r5,4(sp)
  8439d8:	d8800215 	stw	r2,8(sp)
  8439dc:	d8c00315 	stw	r3,12(sp)
  8439e0:	01002174 	movhi	r4,133
  8439e4:	21392904 	addi	r4,r4,-7004
  8439e8:	300b883a 	mov	r5,r6
  8439ec:	380d883a 	mov	r6,r7
  8439f0:	400f883a 	mov	r7,r8
  8439f4:	08076480 	call	807648 <printf>
    PUSH_IPADDR(p->fhost), fport);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
  8439f8:	0009883a 	mov	r4,zero
  8439fc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
  843a00:	e0bffe17 	ldw	r2,-8(fp)
  843a04:	10800317 	ldw	r2,12(r2)
  843a08:	10fffe04 	addi	r3,r2,-8
  843a0c:	e0bffe17 	ldw	r2,-8(fp)
  843a10:	10c00315 	stw	r3,12(r2)
   pup = (struct udp*)p->nb_prot;
  843a14:	e0bffe17 	ldw	r2,-8(fp)
  843a18:	10800317 	ldw	r2,12(r2)
  843a1c:	e0bff815 	stw	r2,-32(fp)
   udplen = p->nb_plen + sizeof(struct udp);
  843a20:	e0bffe17 	ldw	r2,-8(fp)
  843a24:	10800417 	ldw	r2,16(r2)
  843a28:	10800204 	addi	r2,r2,8
  843a2c:	e0bff615 	stw	r2,-40(fp)
   p->nb_plen = udplen;
  843a30:	e0fff617 	ldw	r3,-40(fp)
  843a34:	e0bffe17 	ldw	r2,-8(fp)
  843a38:	10c00415 	stw	r3,16(r2)
   if (udplen & 1) ((char *)pup)[udplen] = 0;
  843a3c:	e0bff617 	ldw	r2,-40(fp)
  843a40:	1080004c 	andi	r2,r2,1
  843a44:	10803fcc 	andi	r2,r2,255
  843a48:	1005003a 	cmpeq	r2,r2,zero
  843a4c:	1000041e 	bne	r2,zero,843a60 <udp_send+0x10c>
  843a50:	e0fff817 	ldw	r3,-32(fp)
  843a54:	e0bff617 	ldw	r2,-40(fp)
  843a58:	1885883a 	add	r2,r3,r2
  843a5c:	10000005 	stb	zero,0(r2)

      pup->ud_len = (unshort)udplen;   /* fill in the UDP header */
  843a60:	e0bff617 	ldw	r2,-40(fp)
  843a64:	1007883a 	mov	r3,r2
  843a68:	e0bff817 	ldw	r2,-32(fp)
  843a6c:	10c0010d 	sth	r3,4(r2)
   pup->ud_srcp = lport;
  843a70:	e0fff817 	ldw	r3,-32(fp)
  843a74:	e0bffd0b 	ldhu	r2,-12(fp)
  843a78:	1880000d 	sth	r2,0(r3)
   pup->ud_dstp = fport;
  843a7c:	e0fff817 	ldw	r3,-32(fp)
  843a80:	e0bffc0b 	ldhu	r2,-16(fp)
  843a84:	1880008d 	sth	r2,2(r3)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
  843a88:	e13ff817 	ldw	r4,-32(fp)
  843a8c:	0843c0c0 	call	843c0c <udpswap>
#endif   /* BYTE_ORDER */
   
#ifdef MULTI_HOMED
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
  843a90:	e0bffe17 	ldw	r2,-8(fp)
  843a94:	10800717 	ldw	r2,28(r2)
  843a98:	10bfffd8 	cmpnei	r2,r2,-1
  843a9c:	1000111e 	bne	r2,zero,843ae4 <udp_send+0x190>
   {
      if (!p->net)
  843aa0:	e0bffe17 	ldw	r2,-8(fp)
  843aa4:	10800617 	ldw	r2,24(r2)
  843aa8:	1004c03a 	cmpne	r2,r2,zero
  843aac:	1000081e 	bne	r2,zero,843ad0 <udp_send+0x17c>
      {
         dtrap();    /* programmer forgot to select iface */
  843ab0:	082a7c80 	call	82a7c8 <dtrap>
         /* it would appear that the callers of udp_send() expect it
            to do cleanup on failure, so free the packet buffer here */
         udp_free(p);
  843ab4:	e13ffe17 	ldw	r4,-8(fp)
  843ab8:	0843ef80 	call	843ef8 <udp_free>
         UNLOCK_NET_RESOURCE(NET_RESID);
  843abc:	0009883a 	mov	r4,zero
  843ac0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
         return ENP_NO_IFACE;
  843ac4:	00bff784 	movi	r2,-34
  843ac8:	e0bfff15 	stw	r2,-4(fp)
  843acc:	00004906 	br	843bf4 <udp_send+0x2a0>
      }
      src_ip = p->net->n_ipaddr;
  843ad0:	e0bffe17 	ldw	r2,-8(fp)
  843ad4:	10800617 	ldw	r2,24(r2)
  843ad8:	10800a17 	ldw	r2,40(r2)
  843adc:	e0bff415 	stw	r2,-48(fp)
  843ae0:	00000406 	br	843af4 <udp_send+0x1a0>
   /* set the IP addresses in the IP header. The pseudo header used for
    * checksumming overlays the addresses on the IP header area in the
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
  843ae4:	e0bffe17 	ldw	r2,-8(fp)
  843ae8:	11000717 	ldw	r4,28(r2)
  843aec:	083ee080 	call	83ee08 <ip_mymach>
  843af0:	e0bff415 	stw	r2,-48(fp)
   php.ph_src = src_ip;
  843af4:	e0bff417 	ldw	r2,-48(fp)
  843af8:	e0bff915 	stw	r2,-28(fp)
   php.ph_dest = p->fhost;
  843afc:	e0bffe17 	ldw	r2,-8(fp)
  843b00:	10800717 	ldw	r2,28(r2)
  843b04:	e0bffa15 	stw	r2,-24(fp)
#ifdef NO_UDP_CKSUM
   /* If no UDP checksum support, just zero the checksum field */
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
  843b08:	e03ffb05 	stb	zero,-20(fp)
   php.ph_prot = UDP_PROT;
  843b0c:	00800444 	movi	r2,17
  843b10:	e0bffb45 	stb	r2,-19(fp)
   php.ph_len = pup->ud_len;
  843b14:	e0bff817 	ldw	r2,-32(fp)
  843b18:	1080010b 	ldhu	r2,4(r2)
  843b1c:	e0bffb8d 	sth	r2,-18(fp)
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
  843b20:	e13ff904 	addi	r4,fp,-28
  843b24:	01400184 	movi	r5,6
  843b28:	08256340 	call	825634 <cksum>
  843b2c:	1007883a 	mov	r3,r2
  843b30:	e0bff817 	ldw	r2,-32(fp)
  843b34:	10c0018d 	sth	r3,6(r2)
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
  843b38:	e0bff617 	ldw	r2,-40(fp)
  843b3c:	10800044 	addi	r2,r2,1
  843b40:	1005d07a 	srai	r2,r2,1
  843b44:	100b883a 	mov	r5,r2
  843b48:	e13ff817 	ldw	r4,-32(fp)
  843b4c:	08256340 	call	825634 <cksum>
  843b50:	0084303a 	nor	r2,zero,r2
  843b54:	1007883a 	mov	r3,r2
  843b58:	e0bff817 	ldw	r2,-32(fp)
  843b5c:	10c0018d 	sth	r3,6(r2)
   if (pup->ud_cksum == 0)
  843b60:	e0bff817 	ldw	r2,-32(fp)
  843b64:	1080018b 	ldhu	r2,6(r2)
  843b68:	10bfffcc 	andi	r2,r2,65535
  843b6c:	1004c03a 	cmpne	r2,r2,zero
  843b70:	1000031e 	bne	r2,zero,843b80 <udp_send+0x22c>
      pup->ud_cksum = 0xffff;
  843b74:	e0fff817 	ldw	r3,-32(fp)
  843b78:	00bfffc4 	movi	r2,-1
  843b7c:	1880018d 	sth	r2,6(r3)
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
  843b80:	e0bffe17 	ldw	r2,-8(fp)
  843b84:	10800317 	ldw	r2,12(r2)
  843b88:	10bffb04 	addi	r2,r2,-20
  843b8c:	e0bff715 	stw	r2,-36(fp)
   pip->ip_src = src_ip;
  843b90:	e0fff717 	ldw	r3,-36(fp)
  843b94:	e0bff417 	ldw	r2,-48(fp)
  843b98:	18800315 	stw	r2,12(r3)
   pip->ip_dest = p->fhost;
  843b9c:	e0bffe17 	ldw	r2,-8(fp)
  843ba0:	10c00717 	ldw	r3,28(r2)
  843ba4:	e0bff717 	ldw	r2,-36(fp)
  843ba8:	10c00415 	stw	r3,16(r2)

   udp_mib.udpOutDatagrams++;
  843bac:	00803934 	movhi	r2,228
  843bb0:	10a9fc04 	addi	r2,r2,-22544
  843bb4:	10800317 	ldw	r2,12(r2)
  843bb8:	10c00044 	addi	r3,r2,1
  843bbc:	00803934 	movhi	r2,228
  843bc0:	10a9fc04 	addi	r2,r2,-22544
  843bc4:	10c00315 	stw	r3,12(r2)

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
  843bc8:	e0fff617 	ldw	r3,-40(fp)
  843bcc:	e0bffe17 	ldw	r2,-8(fp)
  843bd0:	10c00415 	stw	r3,16(r2)
   e = ip_write(UDP_PROT, p);
  843bd4:	01000444 	movi	r4,17
  843bd8:	e17ffe17 	ldw	r5,-8(fp)
  843bdc:	083dc8c0 	call	83dc8c <ip_write>
  843be0:	e0bff515 	stw	r2,-44(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
  843be4:	0009883a 	mov	r4,zero
  843be8:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   return e;
  843bec:	e0bff517 	ldw	r2,-44(fp)
  843bf0:	e0bfff15 	stw	r2,-4(fp)
  843bf4:	e0bfff17 	ldw	r2,-4(fp)
}
  843bf8:	e037883a 	mov	sp,fp
  843bfc:	dfc00117 	ldw	ra,4(sp)
  843c00:	df000017 	ldw	fp,0(sp)
  843c04:	dec00204 	addi	sp,sp,8
  843c08:	f800283a 	ret

00843c0c <udpswap>:
 */

#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{
  843c0c:	defffe04 	addi	sp,sp,-8
  843c10:	df000115 	stw	fp,4(sp)
  843c14:	df000104 	addi	fp,sp,4
  843c18:	e13fff15 	stw	r4,-4(fp)

   pup->ud_srcp = htons(pup->ud_srcp);
  843c1c:	e0bfff17 	ldw	r2,-4(fp)
  843c20:	1080000b 	ldhu	r2,0(r2)
  843c24:	10bfffcc 	andi	r2,r2,65535
  843c28:	1004d23a 	srli	r2,r2,8
  843c2c:	10803fcc 	andi	r2,r2,255
  843c30:	1009883a 	mov	r4,r2
  843c34:	e0bfff17 	ldw	r2,-4(fp)
  843c38:	1080000b 	ldhu	r2,0(r2)
  843c3c:	10bfffcc 	andi	r2,r2,65535
  843c40:	1004923a 	slli	r2,r2,8
  843c44:	1007883a 	mov	r3,r2
  843c48:	00bfc004 	movi	r2,-256
  843c4c:	1884703a 	and	r2,r3,r2
  843c50:	2084b03a 	or	r2,r4,r2
  843c54:	1007883a 	mov	r3,r2
  843c58:	e0bfff17 	ldw	r2,-4(fp)
  843c5c:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = htons(pup->ud_dstp);
  843c60:	e0bfff17 	ldw	r2,-4(fp)
  843c64:	1080008b 	ldhu	r2,2(r2)
  843c68:	10bfffcc 	andi	r2,r2,65535
  843c6c:	1004d23a 	srli	r2,r2,8
  843c70:	10803fcc 	andi	r2,r2,255
  843c74:	1009883a 	mov	r4,r2
  843c78:	e0bfff17 	ldw	r2,-4(fp)
  843c7c:	1080008b 	ldhu	r2,2(r2)
  843c80:	10bfffcc 	andi	r2,r2,65535
  843c84:	1004923a 	slli	r2,r2,8
  843c88:	1007883a 	mov	r3,r2
  843c8c:	00bfc004 	movi	r2,-256
  843c90:	1884703a 	and	r2,r3,r2
  843c94:	2084b03a 	or	r2,r4,r2
  843c98:	1007883a 	mov	r3,r2
  843c9c:	e0bfff17 	ldw	r2,-4(fp)
  843ca0:	10c0008d 	sth	r3,2(r2)
   pup->ud_len = htons(pup->ud_len);
  843ca4:	e0bfff17 	ldw	r2,-4(fp)
  843ca8:	1080010b 	ldhu	r2,4(r2)
  843cac:	10bfffcc 	andi	r2,r2,65535
  843cb0:	1004d23a 	srli	r2,r2,8
  843cb4:	10803fcc 	andi	r2,r2,255
  843cb8:	1009883a 	mov	r4,r2
  843cbc:	e0bfff17 	ldw	r2,-4(fp)
  843cc0:	1080010b 	ldhu	r2,4(r2)
  843cc4:	10bfffcc 	andi	r2,r2,65535
  843cc8:	1004923a 	slli	r2,r2,8
  843ccc:	1007883a 	mov	r3,r2
  843cd0:	00bfc004 	movi	r2,-256
  843cd4:	1884703a 	and	r2,r3,r2
  843cd8:	2084b03a 	or	r2,r4,r2
  843cdc:	1007883a 	mov	r3,r2
  843ce0:	e0bfff17 	ldw	r2,-4(fp)
  843ce4:	10c0010d 	sth	r3,4(r2)
   pup->ud_cksum = htons(pup->ud_cksum);
  843ce8:	e0bfff17 	ldw	r2,-4(fp)
  843cec:	1080018b 	ldhu	r2,6(r2)
  843cf0:	10bfffcc 	andi	r2,r2,65535
  843cf4:	1004d23a 	srli	r2,r2,8
  843cf8:	10803fcc 	andi	r2,r2,255
  843cfc:	1009883a 	mov	r4,r2
  843d00:	e0bfff17 	ldw	r2,-4(fp)
  843d04:	1080018b 	ldhu	r2,6(r2)
  843d08:	10bfffcc 	andi	r2,r2,65535
  843d0c:	1004923a 	slli	r2,r2,8
  843d10:	1007883a 	mov	r3,r2
  843d14:	00bfc004 	movi	r2,-256
  843d18:	1884703a 	and	r2,r3,r2
  843d1c:	2084b03a 	or	r2,r4,r2
  843d20:	1007883a 	mov	r3,r2
  843d24:	e0bfff17 	ldw	r2,-4(fp)
  843d28:	10c0018d 	sth	r3,6(r2)
}
  843d2c:	e037883a 	mov	sp,fp
  843d30:	df000017 	ldw	fp,0(sp)
  843d34:	dec00104 	addi	sp,sp,4
  843d38:	f800283a 	ret

00843d3c <udp_socket>:
#define  MINSOCKET   1200
static unshort usocket = 0;   /* next socket to grab */

unshort
udp_socket(void)
{
  843d3c:	defffe04 	addi	sp,sp,-8
  843d40:	df000115 	stw	fp,4(sp)
  843d44:	df000104 	addi	fp,sp,4
   UDPCONN tmp;

   if (usocket < MINSOCKET)
  843d48:	d0a0d60b 	ldhu	r2,-31912(gp)
  843d4c:	10bfffcc 	andi	r2,r2,65535
  843d50:	10812c28 	cmpgeui	r2,r2,1200
  843d54:	10000c1e 	bne	r2,zero,843d88 <udp_socket+0x4c>
   {
      /* logic for for init and after wraps */
      usocket = (unshort)(cticks & 0x7fff);
  843d58:	00802174 	movhi	r2,133
  843d5c:	10832604 	addi	r2,r2,3224
  843d60:	10800017 	ldw	r2,0(r2)
  843d64:	109fffcc 	andi	r2,r2,32767
  843d68:	d0a0d60d 	sth	r2,-31912(gp)
      if (usocket < MINSOCKET)
  843d6c:	d0a0d60b 	ldhu	r2,-31912(gp)
  843d70:	10bfffcc 	andi	r2,r2,65535
  843d74:	10812c28 	cmpgeui	r2,r2,1200
  843d78:	1000031e 	bne	r2,zero,843d88 <udp_socket+0x4c>
         usocket += MINSOCKET;
  843d7c:	d0a0d60b 	ldhu	r2,-31912(gp)
  843d80:	10812c04 	addi	r2,r2,1200
  843d84:	d0a0d60d 	sth	r2,-31912(gp)
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
  843d88:	00802174 	movhi	r2,133
  843d8c:	10831a04 	addi	r2,r2,3176
  843d90:	10800017 	ldw	r2,0(r2)
  843d94:	e0bfff15 	stw	r2,-4(fp)
  843d98:	00001006 	br	843ddc <udp_socket+0xa0>
   {
      if (tmp->u_lport == usocket)
  843d9c:	e0bfff17 	ldw	r2,-4(fp)
  843da0:	1080018b 	ldhu	r2,6(r2)
  843da4:	d0e0d60b 	ldhu	r3,-31912(gp)
  843da8:	113fffcc 	andi	r4,r2,65535
  843dac:	18bfffcc 	andi	r2,r3,65535
  843db0:	2080071e 	bne	r4,r2,843dd0 <udp_socket+0x94>
      {
         usocket++;     /* bump socket number */
  843db4:	d0a0d60b 	ldhu	r2,-31912(gp)
  843db8:	10800044 	addi	r2,r2,1
  843dbc:	d0a0d60d 	sth	r2,-31912(gp)
         tmp = firstudp;   /* restart scan */
  843dc0:	00802174 	movhi	r2,133
  843dc4:	10831a04 	addi	r2,r2,3176
  843dc8:	10800017 	ldw	r2,0(r2)
  843dcc:	e0bfff15 	stw	r2,-4(fp)
      usocket = (unshort)(cticks & 0x7fff);
      if (usocket < MINSOCKET)
         usocket += MINSOCKET;
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
  843dd0:	e0bfff17 	ldw	r2,-4(fp)
  843dd4:	10800017 	ldw	r2,0(r2)
  843dd8:	e0bfff15 	stw	r2,-4(fp)
  843ddc:	e0bfff17 	ldw	r2,-4(fp)
  843de0:	1004c03a 	cmpne	r2,r2,zero
  843de4:	103fed1e 	bne	r2,zero,843d9c <udp_socket+0x60>
         usocket++;     /* bump socket number */
         tmp = firstudp;   /* restart scan */
         continue;
      }
   }
   return usocket++;
  843de8:	d0a0d60b 	ldhu	r2,-31912(gp)
  843dec:	10ffffcc 	andi	r3,r2,65535
  843df0:	10800044 	addi	r2,r2,1
  843df4:	d0a0d60d 	sth	r2,-31912(gp)
  843df8:	1805883a 	mov	r2,r3
}
  843dfc:	e037883a 	mov	sp,fp
  843e00:	df000017 	ldw	fp,0(sp)
  843e04:	dec00104 	addi	sp,sp,4
  843e08:	f800283a 	ret

00843e0c <udp_alloc>:
 * RETURNS:  Returns buffer, or NULL in no buffer was available. 
 */

PACKET
udp_alloc(int datalen, int optlen)
{
  843e0c:	defffa04 	addi	sp,sp,-24
  843e10:	dfc00515 	stw	ra,20(sp)
  843e14:	df000415 	stw	fp,16(sp)
  843e18:	df000404 	addi	fp,sp,16
  843e1c:	e13ffe15 	stw	r4,-8(fp)
  843e20:	e17fff15 	stw	r5,-4(fp)
   int   len;
   PACKET p;

   len = (datalen + sizeof(struct udp) + 1) & ~1;
  843e24:	e0bffe17 	ldw	r2,-8(fp)
  843e28:	10800244 	addi	r2,r2,9
  843e2c:	1007883a 	mov	r3,r2
  843e30:	00bfff84 	movi	r2,-2
  843e34:	1884703a 	and	r2,r3,r2
  843e38:	e0bffd15 	stw	r2,-12(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
  843e3c:	01000084 	movi	r4,2
  843e40:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + UDPHDRSLEN + optlen);
  843e44:	e0fffd17 	ldw	r3,-12(fp)
  843e48:	e0bfff17 	ldw	r2,-4(fp)
  843e4c:	1885883a 	add	r2,r3,r2
  843e50:	10800904 	addi	r2,r2,36
  843e54:	1009883a 	mov	r4,r2
  843e58:	0829b840 	call	829b84 <pk_alloc>
  843e5c:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  843e60:	01000084 	movi	r4,2
  843e64:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (p != (PACKET)NULL)
  843e68:	e0bffc17 	ldw	r2,-16(fp)
  843e6c:	1005003a 	cmpeq	r2,r2,zero
  843e70:	1000101e 	bne	r2,zero,843eb4 <udp_alloc+0xa8>
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
  843e74:	e0bfff17 	ldw	r2,-4(fp)
  843e78:	1005d0ba 	srai	r2,r2,2
  843e7c:	10800704 	addi	r2,r2,28
  843e80:	e0bffd15 	stw	r2,-12(fp)
      p->nb_prot += len;
  843e84:	e0bffc17 	ldw	r2,-16(fp)
  843e88:	10c00317 	ldw	r3,12(r2)
  843e8c:	e0bffd17 	ldw	r2,-12(fp)
  843e90:	1887883a 	add	r3,r3,r2
  843e94:	e0bffc17 	ldw	r2,-16(fp)
  843e98:	10c00315 	stw	r3,12(r2)
      p->nb_plen -= len;
  843e9c:	e0bffc17 	ldw	r2,-16(fp)
  843ea0:	10c00417 	ldw	r3,16(r2)
  843ea4:	e0bffd17 	ldw	r2,-12(fp)
  843ea8:	1887c83a 	sub	r3,r3,r2
  843eac:	e0bffc17 	ldw	r2,-16(fp)
  843eb0:	10c00415 	stw	r3,16(r2)
   }

   return (p);
  843eb4:	e0bffc17 	ldw	r2,-16(fp)
}
  843eb8:	e037883a 	mov	sp,fp
  843ebc:	dfc00117 	ldw	ra,4(sp)
  843ec0:	df000017 	ldw	fp,0(sp)
  843ec4:	dec00204 	addi	sp,sp,8
  843ec8:	f800283a 	ret

00843ecc <udp_maxalloc>:
 *          returned value, the allocation will fail
 */

int
udp_maxalloc(void)
{
  843ecc:	deffff04 	addi	sp,sp,-4
  843ed0:	df000015 	stw	fp,0(sp)
  843ed4:	d839883a 	mov	fp,sp
    * created is ((2^16 - 1) - (size of IP and UDP headers)) */
   return (0xFFFF - (sizeof (struct ip) + sizeof (struct udp)));
#else
   /* if heap buffers are not available, the largest size of a UDP datagram
    * is constrained by what will fit inside a big buffer */
   return (bigbufsiz - UDPHDRSLEN);
  843ed8:	00802174 	movhi	r2,133
  843edc:	1082b704 	addi	r2,r2,2780
  843ee0:	10800017 	ldw	r2,0(r2)
  843ee4:	10bff704 	addi	r2,r2,-36
#endif
}
  843ee8:	e037883a 	mov	sp,fp
  843eec:	df000017 	ldw	fp,0(sp)
  843ef0:	dec00104 	addi	sp,sp,4
  843ef4:	f800283a 	ret

00843ef8 <udp_free>:
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
  843ef8:	defffd04 	addi	sp,sp,-12
  843efc:	dfc00215 	stw	ra,8(sp)
  843f00:	df000115 	stw	fp,4(sp)
  843f04:	df000104 	addi	fp,sp,4
  843f08:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
  843f0c:	01000084 	movi	r4,2
  843f10:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p);
  843f14:	e13fff17 	ldw	r4,-4(fp)
  843f18:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  843f1c:	01000084 	movi	r4,2
  843f20:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
}
  843f24:	e037883a 	mov	sp,fp
  843f28:	dfc00117 	ldw	ra,4(sp)
  843f2c:	df000017 	ldw	fp,0(sp)
  843f30:	dec00204 	addi	sp,sp,8
  843f34:	f800283a 	ret

00843f38 <igmpv1_input>:
 * OUTPUT: This function returns IGMP_ERR if it is passed an "unknown"
 * packet type.  Otherwise, it returns IGMP_OK.
 */

int igmpv1_input(PACKET p)
{
  843f38:	defff704 	addi	sp,sp,-36
  843f3c:	dfc00815 	stw	ra,32(sp)
  843f40:	df000715 	stw	fp,28(sp)
  843f44:	df000704 	addi	fp,sp,28
  843f48:	e13ffe15 	stw	r4,-8(fp)
   struct igmp *  igmp;
   struct ip *    pip;
   struct in_multi * inm;
   NET netp  = p->net;
  843f4c:	e0bffe17 	ldw	r2,-8(fp)
  843f50:	10800617 	ldw	r2,24(r2)
  843f54:	e0bffa15 	stw	r2,-24(fp)
   int rc;
         
   pip = ip_head (p);
  843f58:	e0bffe17 	ldw	r2,-8(fp)
  843f5c:	10800317 	ldw	r2,12(r2)
  843f60:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));
  843f64:	e0bffc17 	ldw	r2,-16(fp)
  843f68:	10800003 	ldbu	r2,0(r2)
  843f6c:	10803fcc 	andi	r2,r2,255
  843f70:	108003cc 	andi	r2,r2,15
  843f74:	1085883a 	add	r2,r2,r2
  843f78:	1085883a 	add	r2,r2,r2
  843f7c:	1007883a 	mov	r3,r2
  843f80:	e0bffc17 	ldw	r2,-16(fp)
  843f84:	1885883a 	add	r2,r3,r2
  843f88:	e0bffd15 	stw	r2,-12(fp)

   switch (igmp->igmp_type) 
  843f8c:	e0bffd17 	ldw	r2,-12(fp)
  843f90:	10800003 	ldbu	r2,0(r2)
  843f94:	10803fcc 	andi	r2,r2,255
  843f98:	e0bfff15 	stw	r2,-4(fp)
  843f9c:	e0ffff17 	ldw	r3,-4(fp)
  843fa0:	18800460 	cmpeqi	r2,r3,17
  843fa4:	1000041e 	bne	r2,zero,843fb8 <igmpv1_input+0x80>
  843fa8:	e0ffff17 	ldw	r3,-4(fp)
  843fac:	188004a0 	cmpeqi	r2,r3,18
  843fb0:	1000611e 	bne	r2,zero,844138 <igmpv1_input+0x200>
  843fb4:	00008506 	br	8441cc <igmpv1_input+0x294>
   {
   case IGMP_HOST_MEMBERSHIP_QUERY:
      ++igmpstats.igmpv1mode_v1_queries_rcvd;
  843fb8:	00803934 	movhi	r2,228
  843fbc:	10a7a004 	addi	r2,r2,-24960
  843fc0:	10800117 	ldw	r2,4(r2)
  843fc4:	10c00044 	addi	r3,r2,1
  843fc8:	00803934 	movhi	r2,228
  843fcc:	10a7a004 	addi	r2,r2,-24960
  843fd0:	10c00115 	stw	r3,4(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
  843fd4:	e0bffa17 	ldw	r2,-24(fp)
  843fd8:	10802c17 	ldw	r2,176(r2)
  843fdc:	e0bffb15 	stw	r2,-20(fp)
  843fe0:	00005006 	br	844124 <igmpv1_input+0x1ec>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (inm->inm_addr == 0)
  843fe4:	e0bffb17 	ldw	r2,-20(fp)
  843fe8:	10800017 	ldw	r2,0(r2)
  843fec:	1005003a 	cmpeq	r2,r2,zero
  843ff0:	1000491e 	bne	r2,zero,844118 <igmpv1_input+0x1e0>
            continue;
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
  843ff4:	e0bffb17 	ldw	r2,-20(fp)
  843ff8:	10c00017 	ldw	r3,0(r2)
  843ffc:	00802174 	movhi	r2,133
  844000:	10830604 	addi	r2,r2,3096
  844004:	10800017 	ldw	r2,0(r2)
  844008:	18804326 	beq	r3,r2,844118 <igmpv1_input+0x1e0>
         {
            if (inm->inm_timer == 0)
  84400c:	e0bffb17 	ldw	r2,-20(fp)
  844010:	10800317 	ldw	r2,12(r2)
  844014:	1004c03a 	cmpne	r2,r2,zero
  844018:	10003f1e 	bne	r2,zero,844118 <igmpv1_input+0x1e0>
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
  84401c:	00803934 	movhi	r2,228
  844020:	10a9e204 	addi	r2,r2,-22648
  844024:	11000217 	ldw	r4,8(r2)
  844028:	00803934 	movhi	r2,228
  84402c:	10a79c04 	addi	r2,r2,-24976
  844030:	10800017 	ldw	r2,0(r2)
  844034:	10800a17 	ldw	r2,40(r2)
  844038:	1004d63a 	srli	r2,r2,24
  84403c:	10c03fcc 	andi	r3,r2,255
  844040:	00803934 	movhi	r2,228
  844044:	10a79c04 	addi	r2,r2,-24976
  844048:	10800017 	ldw	r2,0(r2)
  84404c:	10800a17 	ldw	r2,40(r2)
  844050:	1004d23a 	srli	r2,r2,8
  844054:	10bfc00c 	andi	r2,r2,65280
  844058:	1886b03a 	or	r3,r3,r2
  84405c:	00803934 	movhi	r2,228
  844060:	10a79c04 	addi	r2,r2,-24976
  844064:	10800017 	ldw	r2,0(r2)
  844068:	10800a17 	ldw	r2,40(r2)
  84406c:	10bfc00c 	andi	r2,r2,65280
  844070:	1004923a 	slli	r2,r2,8
  844074:	1886b03a 	or	r3,r3,r2
  844078:	00803934 	movhi	r2,228
  84407c:	10a79c04 	addi	r2,r2,-24976
  844080:	10800017 	ldw	r2,0(r2)
  844084:	10800a17 	ldw	r2,40(r2)
  844088:	10803fcc 	andi	r2,r2,255
  84408c:	1004963a 	slli	r2,r2,24
  844090:	1884b03a 	or	r2,r3,r2
  844094:	2089883a 	add	r4,r4,r2
  844098:	e0bffb17 	ldw	r2,-20(fp)
  84409c:	10800017 	ldw	r2,0(r2)
  8440a0:	1004d63a 	srli	r2,r2,24
  8440a4:	10c03fcc 	andi	r3,r2,255
  8440a8:	e0bffb17 	ldw	r2,-20(fp)
  8440ac:	10800017 	ldw	r2,0(r2)
  8440b0:	1004d23a 	srli	r2,r2,8
  8440b4:	10bfc00c 	andi	r2,r2,65280
  8440b8:	1886b03a 	or	r3,r3,r2
  8440bc:	e0bffb17 	ldw	r2,-20(fp)
  8440c0:	10800017 	ldw	r2,0(r2)
  8440c4:	10bfc00c 	andi	r2,r2,65280
  8440c8:	1004923a 	slli	r2,r2,8
  8440cc:	1886b03a 	or	r3,r3,r2
  8440d0:	e0bffb17 	ldw	r2,-20(fp)
  8440d4:	10800017 	ldw	r2,0(r2)
  8440d8:	10803fcc 	andi	r2,r2,255
  8440dc:	1004963a 	slli	r2,r2,24
  8440e0:	1884b03a 	or	r2,r3,r2
  8440e4:	2089883a 	add	r4,r4,r2
  8440e8:	01400c84 	movi	r5,50
  8440ec:	08053c00 	call	8053c0 <__umodsi3>
  8440f0:	10c00044 	addi	r3,r2,1
  8440f4:	e0bffb17 	ldw	r2,-20(fp)
  8440f8:	10c00315 	stw	r3,12(r2)
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
  8440fc:	00802174 	movhi	r2,133
  844100:	10830404 	addi	r2,r2,3088
  844104:	10800017 	ldw	r2,0(r2)
  844108:	10c00044 	addi	r3,r2,1
  84410c:	00802174 	movhi	r2,133
  844110:	10830404 	addi	r2,r2,3088
  844114:	10c00015 	stw	r3,0(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
  844118:	e0bffb17 	ldw	r2,-20(fp)
  84411c:	10800517 	ldw	r2,20(r2)
  844120:	e0bffb15 	stw	r2,-20(fp)
  844124:	e0bffb17 	ldw	r2,-20(fp)
  844128:	1004c03a 	cmpne	r2,r2,zero
  84412c:	103fad1e 	bne	r2,zero,843fe4 <igmpv1_input+0xac>
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
            }   
         }
      }
      rc = IGMP_OK;
  844130:	e03ff915 	stw	zero,-28(fp)
      break;
  844134:	00002e06 	br	8441f0 <igmpv1_input+0x2b8>

   case IGMP_HOST_MEMBERSHIP_REPORT:
      ++igmpstats.igmpv1mode_v1_reports_rcvd;
  844138:	00803934 	movhi	r2,228
  84413c:	10a7a004 	addi	r2,r2,-24960
  844140:	10800217 	ldw	r2,8(r2)
  844144:	10c00044 	addi	r3,r2,1
  844148:	00803934 	movhi	r2,228
  84414c:	10a7a004 	addi	r2,r2,-24960
  844150:	10c00215 	stw	r3,8(r2)
      /*
       * If we belong to the group being reported and have a 
       * running timer for that group, stop our timer for that 
       * group.
       */
      inm = lookup_mcast(igmp->igmp_group, netp);
  844154:	e0bffd17 	ldw	r2,-12(fp)
  844158:	11000117 	ldw	r4,4(r2)
  84415c:	e17ffa17 	ldw	r5,-24(fp)
  844160:	08423680 	call	842368 <lookup_mcast>
  844164:	e0bffb15 	stw	r2,-20(fp)
      if (inm != NULL) 
  844168:	e0bffb17 	ldw	r2,-20(fp)
  84416c:	1005003a 	cmpeq	r2,r2,zero
  844170:	1000141e 	bne	r2,zero,8441c4 <igmpv1_input+0x28c>
      {
         if (inm->inm_timer > 0)
  844174:	e0bffb17 	ldw	r2,-20(fp)
  844178:	10800317 	ldw	r2,12(r2)
  84417c:	1005003a 	cmpeq	r2,r2,zero
  844180:	1000101e 	bne	r2,zero,8441c4 <igmpv1_input+0x28c>
         {
            inm->inm_timer = 0;
  844184:	e0bffb17 	ldw	r2,-20(fp)
  844188:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
  84418c:	00802174 	movhi	r2,133
  844190:	10830404 	addi	r2,r2,3088
  844194:	10800017 	ldw	r2,0(r2)
  844198:	10ffffc4 	addi	r3,r2,-1
  84419c:	00802174 	movhi	r2,133
  8441a0:	10830404 	addi	r2,r2,3088
  8441a4:	10c00015 	stw	r3,0(r2)
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
  8441a8:	00803934 	movhi	r2,228
  8441ac:	10a7a004 	addi	r2,r2,-24960
  8441b0:	10800317 	ldw	r2,12(r2)
  8441b4:	10c00044 	addi	r3,r2,1
  8441b8:	00803934 	movhi	r2,228
  8441bc:	10a7a004 	addi	r2,r2,-24960
  8441c0:	10c00315 	stw	r3,12(r2)
         }
      }
      rc = IGMP_OK;
  8441c4:	e03ff915 	stw	zero,-28(fp)
      break;
  8441c8:	00000906 	br	8441f0 <igmpv1_input+0x2b8>
      
   default:
      ++igmpstats.igmpv1mode_unknown_pkttype;
  8441cc:	00803934 	movhi	r2,228
  8441d0:	10a7a004 	addi	r2,r2,-24960
  8441d4:	10801017 	ldw	r2,64(r2)
  8441d8:	10c00044 	addi	r3,r2,1
  8441dc:	00803934 	movhi	r2,228
  8441e0:	10a7a004 	addi	r2,r2,-24960
  8441e4:	10c01015 	stw	r3,64(r2)
      rc = IGMP_ERR;
  8441e8:	00bfffc4 	movi	r2,-1
  8441ec:	e0bff915 	stw	r2,-28(fp)
      break;   
   }

   /* we're done with the received packet; return packet buffer back 
    * to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
  8441f0:	01000084 	movi	r4,2
  8441f4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p);
  8441f8:	e13ffe17 	ldw	r4,-8(fp)
  8441fc:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  844200:	01000084 	movi	r4,2
  844204:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      
   return rc;
  844208:	e0bff917 	ldw	r2,-28(fp)
}
  84420c:	e037883a 	mov	sp,fp
  844210:	dfc00117 	ldw	ra,4(sp)
  844214:	df000017 	ldw	fp,0(sp)
  844218:	dec00204 	addi	sp,sp,8
  84421c:	f800283a 	ret

00844220 <igmpv2_input>:
 * from igmpv2_process_report (), IGMP_OK (for a received Leave Group
 * message only), or IGMP_ERR (for a message of an "unknown" type).
 */

int igmpv2_input (PACKET p)
{
  844220:	defff704 	addi	sp,sp,-36
  844224:	dfc00815 	stw	ra,32(sp)
  844228:	df000715 	stw	fp,28(sp)
  84422c:	df000704 	addi	fp,sp,28
  844230:	e13ffe15 	stw	r4,-8(fp)
   struct ip * pip;
   int igmplen;
   u_char type;
   int rc;

   pip = ip_head (p);    
  844234:	e0bffe17 	ldw	r2,-8(fp)
  844238:	10800317 	ldw	r2,12(r2)
  84423c:	e0bffc15 	stw	r2,-16(fp)
   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */   
   igmplen = p->nb_plen - ip_hlen (pip);
  844240:	e0bffe17 	ldw	r2,-8(fp)
  844244:	10c00417 	ldw	r3,16(r2)
  844248:	e0bffc17 	ldw	r2,-16(fp)
  84424c:	10800003 	ldbu	r2,0(r2)
  844250:	10803fcc 	andi	r2,r2,255
  844254:	108003cc 	andi	r2,r2,15
  844258:	1085883a 	add	r2,r2,r2
  84425c:	1085883a 	add	r2,r2,r2
  844260:	1885c83a 	sub	r2,r3,r2
  844264:	e0bffb15 	stw	r2,-20(fp)
   igmp = (struct igmp *) (ip_data (pip));   
  844268:	e0bffc17 	ldw	r2,-16(fp)
  84426c:	10800003 	ldbu	r2,0(r2)
  844270:	10803fcc 	andi	r2,r2,255
  844274:	108003cc 	andi	r2,r2,15
  844278:	1085883a 	add	r2,r2,r2
  84427c:	1085883a 	add	r2,r2,r2
  844280:	1007883a 	mov	r3,r2
  844284:	e0bffc17 	ldw	r2,-16(fp)
  844288:	1885883a 	add	r2,r3,r2
  84428c:	e0bffd15 	stw	r2,-12(fp)
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;
  844290:	e0bffd17 	ldw	r2,-12(fp)
  844294:	10800003 	ldbu	r2,0(r2)
  844298:	e0bffa05 	stb	r2,-24(fp)

   switch (type) 
  84429c:	e0bffa03 	ldbu	r2,-24(fp)
  8442a0:	e0bfff15 	stw	r2,-4(fp)
  8442a4:	e0ffff17 	ldw	r3,-4(fp)
  8442a8:	188004a0 	cmpeqi	r2,r3,18
  8442ac:	1000121e 	bne	r2,zero,8442f8 <igmpv2_input+0xd8>
  8442b0:	e0ffff17 	ldw	r3,-4(fp)
  8442b4:	188004c8 	cmpgei	r2,r3,19
  8442b8:	1000041e 	bne	r2,zero,8442cc <igmpv2_input+0xac>
  8442bc:	e0ffff17 	ldw	r3,-4(fp)
  8442c0:	18800460 	cmpeqi	r2,r3,17
  8442c4:	1000081e 	bne	r2,zero,8442e8 <igmpv2_input+0xc8>
  8442c8:	00001806 	br	84432c <igmpv2_input+0x10c>
  8442cc:	e0ffff17 	ldw	r3,-4(fp)
  8442d0:	188005a0 	cmpeqi	r2,r3,22
  8442d4:	1000081e 	bne	r2,zero,8442f8 <igmpv2_input+0xd8>
  8442d8:	e0ffff17 	ldw	r3,-4(fp)
  8442dc:	188005e0 	cmpeqi	r2,r3,23
  8442e0:	1000091e 	bne	r2,zero,844308 <igmpv2_input+0xe8>
  8442e4:	00001106 	br	84432c <igmpv2_input+0x10c>
   {
      case IGMP_HOST_MEMBERSHIP_QUERY:
         rc = igmpv2_process_query (p);
  8442e8:	e13ffe17 	ldw	r4,-8(fp)
  8442ec:	08444cc0 	call	8444cc <igmpv2_process_query>
  8442f0:	e0bff915 	stw	r2,-28(fp)
         break;
  8442f4:	00001606 	br	844350 <igmpv2_input+0x130>

      case IGMP_HOST_MEMBERSHIP_REPORT:
      case IGMPv2_MEMBERSHIP_REPORT:
         rc = igmpv2_process_report (p);
  8442f8:	e13ffe17 	ldw	r4,-8(fp)
  8442fc:	08443800 	call	844380 <igmpv2_process_report>
  844300:	e0bff915 	stw	r2,-28(fp)
         break;
  844304:	00001206 	br	844350 <igmpv2_input+0x130>
          * expect to receive such messages.  However, according to
          * RFC 2236, some implementations of an older version of the 
          * IGMPv2 specification send leave messages to the group 
          * being left.  If we do receive such a message, we will 
          * drop it. */       
         ++igmpstats.igmpv2mode_v2_leave_msgs_rcvd;
  844308:	00803934 	movhi	r2,228
  84430c:	10a7a004 	addi	r2,r2,-24960
  844310:	10800917 	ldw	r2,36(r2)
  844314:	10c00044 	addi	r3,r2,1
  844318:	00803934 	movhi	r2,228
  84431c:	10a7a004 	addi	r2,r2,-24960
  844320:	10c00915 	stw	r3,36(r2)
         rc = IGMP_OK;
  844324:	e03ff915 	stw	zero,-28(fp)
         break;               
  844328:	00000906 	br	844350 <igmpv2_input+0x130>

      default:     
         ++igmpstats.igmpv2mode_unknown_pkttype;
  84432c:	00803934 	movhi	r2,228
  844330:	10a7a004 	addi	r2,r2,-24960
  844334:	10801517 	ldw	r2,84(r2)
  844338:	10c00044 	addi	r3,r2,1
  84433c:	00803934 	movhi	r2,228
  844340:	10a7a004 	addi	r2,r2,-24960
  844344:	10c01515 	stw	r3,84(r2)
         rc = IGMP_ERR;         
  844348:	00bfffc4 	movi	r2,-1
  84434c:	e0bff915 	stw	r2,-28(fp)
         break;
   } /* end SWITCH */

   /* we're done processing the received packet; return packet buffer 
    * back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
  844350:	01000084 	movi	r4,2
  844354:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   pk_free(p);
  844358:	e13ffe17 	ldw	r4,-8(fp)
  84435c:	0829f180 	call	829f18 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  844360:	01000084 	movi	r4,2
  844364:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
   
   return rc;
  844368:	e0bff917 	ldw	r2,-28(fp)
}
  84436c:	e037883a 	mov	sp,fp
  844370:	dfc00117 	ldw	ra,4(sp)
  844374:	df000017 	ldw	fp,0(sp)
  844378:	dec00204 	addi	sp,sp,8
  84437c:	f800283a 	ret

00844380 <igmpv2_process_report>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_report (PACKET p)
{
  844380:	defff904 	addi	sp,sp,-28
  844384:	dfc00615 	stw	ra,24(sp)
  844388:	df000515 	stw	fp,20(sp)
  84438c:	df000504 	addi	fp,sp,20
  844390:	e13fff15 	stw	r4,-4(fp)
   struct igmp * igmp;
   struct ip * pip;
   NET netp;
   struct in_multi * inm;

   netp = p->net;
  844394:	e0bfff17 	ldw	r2,-4(fp)
  844398:	10800617 	ldw	r2,24(r2)
  84439c:	e0bffc15 	stw	r2,-16(fp)
   pip = ip_head (p);
  8443a0:	e0bfff17 	ldw	r2,-4(fp)
  8443a4:	10800317 	ldw	r2,12(r2)
  8443a8:	e0bffd15 	stw	r2,-12(fp)
   igmp = (struct igmp *) (ip_data (pip));   
  8443ac:	e0bffd17 	ldw	r2,-12(fp)
  8443b0:	10800003 	ldbu	r2,0(r2)
  8443b4:	10803fcc 	andi	r2,r2,255
  8443b8:	108003cc 	andi	r2,r2,15
  8443bc:	1085883a 	add	r2,r2,r2
  8443c0:	1085883a 	add	r2,r2,r2
  8443c4:	1007883a 	mov	r3,r2
  8443c8:	e0bffd17 	ldw	r2,-12(fp)
  8443cc:	1885883a 	add	r2,r3,r2
  8443d0:	e0bffe15 	stw	r2,-8(fp)
    * processing IGMPv2 packets (it has "downgraded" itself because
    * there are IGMPv1 routers on that network); however, we do not
    * know that, and hence we don't cancel our timer (for the 
    * subsequent transmission of a IGMPv1 report).
    */
   inm = lookup_mcast(igmp->igmp_group, netp);
  8443d4:	e0bffe17 	ldw	r2,-8(fp)
  8443d8:	11000117 	ldw	r4,4(r2)
  8443dc:	e17ffc17 	ldw	r5,-16(fp)
  8443e0:	08423680 	call	842368 <lookup_mcast>
  8443e4:	e0bffb15 	stw	r2,-20(fp)
   if (inm != NULL) 
  8443e8:	e0bffb17 	ldw	r2,-20(fp)
  8443ec:	1005003a 	cmpeq	r2,r2,zero
  8443f0:	1000291e 	bne	r2,zero,844498 <igmpv2_process_report+0x118>
   {
      if (inm->inm_timer != 0)
  8443f4:	e0bffb17 	ldw	r2,-20(fp)
  8443f8:	10800317 	ldw	r2,12(r2)
  8443fc:	1005003a 	cmpeq	r2,r2,zero
  844400:	10001d1e 	bne	r2,zero,844478 <igmpv2_process_report+0xf8>
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
  844404:	e0bffc17 	ldw	r2,-16(fp)
  844408:	10802d03 	ldbu	r2,180(r2)
  84440c:	10803fcc 	andi	r2,r2,255
  844410:	1005003a 	cmpeq	r2,r2,zero
  844414:	1000051e 	bne	r2,zero,84442c <igmpv2_process_report+0xac>
  844418:	e0bffe17 	ldw	r2,-8(fp)
  84441c:	10800003 	ldbu	r2,0(r2)
  844420:	10803fcc 	andi	r2,r2,255
  844424:	108005a0 	cmpeqi	r2,r2,22
  844428:	1000221e 	bne	r2,zero,8444b4 <igmpv2_process_report+0x134>
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
         {
            /* cancel timer */
            inm->inm_timer = 0;
  84442c:	e0bffb17 	ldw	r2,-20(fp)
  844430:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
  844434:	00802174 	movhi	r2,133
  844438:	10830404 	addi	r2,r2,3088
  84443c:	10800017 	ldw	r2,0(r2)
  844440:	10ffffc4 	addi	r3,r2,-1
  844444:	00802174 	movhi	r2,133
  844448:	10830404 	addi	r2,r2,3088
  84444c:	10c00015 	stw	r3,0(r2)
            /* indicate that we are not the last host to send a 
             * report for this group */
            inm->last2send_report = IGMP_FALSE;
  844450:	e0bffb17 	ldw	r2,-20(fp)
  844454:	10000405 	stb	zero,16(r2)
            ++igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer;
  844458:	00803934 	movhi	r2,228
  84445c:	10a7a004 	addi	r2,r2,-24960
  844460:	10800717 	ldw	r2,28(r2)
  844464:	10c00044 	addi	r3,r2,1
  844468:	00803934 	movhi	r2,228
  84446c:	10a7a004 	addi	r2,r2,-24960
  844470:	10c00715 	stw	r3,28(r2)
  844474:	00000f06 	br	8444b4 <igmpv2_process_report+0x134>
      else
      {
         /* we don't have a timer running; perhaps the source
          * host has just joined the group, and has sent an
          * unsolicited report */
         ++igmpstats.igmpv2mode_v12_reports_rcvd_no_timer;   
  844478:	00803934 	movhi	r2,228
  84447c:	10a7a004 	addi	r2,r2,-24960
  844480:	10800817 	ldw	r2,32(r2)
  844484:	10c00044 	addi	r3,r2,1
  844488:	00803934 	movhi	r2,228
  84448c:	10a7a004 	addi	r2,r2,-24960
  844490:	10c00815 	stw	r3,32(r2)
  844494:	00000706 	br	8444b4 <igmpv2_process_report+0x134>
       * on that interface.  Even if imperfect filtering at the 
       * device level causes reports for unregistered groups to 
       * be passed up to the IP module, ip_rcv_phase2 () is 
       * responsible for dropping them, and so we should never
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
  844498:	00803934 	movhi	r2,228
  84449c:	10a7a004 	addi	r2,r2,-24960
  8444a0:	10801317 	ldw	r2,76(r2)
  8444a4:	10c00044 	addi	r3,r2,1
  8444a8:	00803934 	movhi	r2,228
  8444ac:	10a7a004 	addi	r2,r2,-24960
  8444b0:	10c01315 	stw	r3,76(r2)
   }
   
   return IGMP_OK;   
  8444b4:	0005883a 	mov	r2,zero
}
  8444b8:	e037883a 	mov	sp,fp
  8444bc:	dfc00117 	ldw	ra,4(sp)
  8444c0:	df000017 	ldw	fp,0(sp)
  8444c4:	dec00204 	addi	sp,sp,8
  8444c8:	f800283a 	ret

008444cc <igmpv2_process_query>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_query (PACKET p)
{
  8444cc:	defff704 	addi	sp,sp,-36
  8444d0:	dfc00815 	stw	ra,32(sp)
  8444d4:	df000715 	stw	fp,28(sp)
  8444d8:	df000704 	addi	fp,sp,28
  8444dc:	e13fff15 	stw	r4,-4(fp)
   u_short max_resp_time;
   u_char process_all;
   struct in_multi * inm;
   ip_addr mcgrp_addr;

   netp = p->net;
  8444e0:	e0bfff17 	ldw	r2,-4(fp)
  8444e4:	10800617 	ldw	r2,24(r2)
  8444e8:	e0bffc15 	stw	r2,-16(fp)
   pip = ip_head (p);
  8444ec:	e0bfff17 	ldw	r2,-4(fp)
  8444f0:	10800317 	ldw	r2,12(r2)
  8444f4:	e0bffd15 	stw	r2,-12(fp)
   igmp = (struct igmp *) (ip_data (pip));
  8444f8:	e0bffd17 	ldw	r2,-12(fp)
  8444fc:	10800003 	ldbu	r2,0(r2)
  844500:	10803fcc 	andi	r2,r2,255
  844504:	108003cc 	andi	r2,r2,15
  844508:	1085883a 	add	r2,r2,r2
  84450c:	1085883a 	add	r2,r2,r2
  844510:	1007883a 	mov	r3,r2
  844514:	e0bffd17 	ldw	r2,-12(fp)
  844518:	1885883a 	add	r2,r3,r2
  84451c:	e0bffe15 	stw	r2,-8(fp)
   mcgrp_addr = ntohl(igmp->igmp_group);
  844520:	e0bffe17 	ldw	r2,-8(fp)
  844524:	10800117 	ldw	r2,4(r2)
  844528:	1004d63a 	srli	r2,r2,24
  84452c:	10c03fcc 	andi	r3,r2,255
  844530:	e0bffe17 	ldw	r2,-8(fp)
  844534:	10800117 	ldw	r2,4(r2)
  844538:	1004d23a 	srli	r2,r2,8
  84453c:	10bfc00c 	andi	r2,r2,65280
  844540:	1886b03a 	or	r3,r3,r2
  844544:	e0bffe17 	ldw	r2,-8(fp)
  844548:	10800117 	ldw	r2,4(r2)
  84454c:	10bfc00c 	andi	r2,r2,65280
  844550:	1004923a 	slli	r2,r2,8
  844554:	1886b03a 	or	r3,r3,r2
  844558:	e0bffe17 	ldw	r2,-8(fp)
  84455c:	10800117 	ldw	r2,4(r2)
  844560:	10803fcc 	andi	r2,r2,255
  844564:	1004963a 	slli	r2,r2,24
  844568:	1884b03a 	or	r2,r3,r2
  84456c:	e0bff915 	stw	r2,-28(fp)

   if (igmp->igmp_code == 0)
  844570:	e0bffe17 	ldw	r2,-8(fp)
  844574:	10800043 	ldbu	r2,1(r2)
  844578:	10803fcc 	andi	r2,r2,255
  84457c:	1004c03a 	cmpne	r2,r2,zero
  844580:	1000141e 	bne	r2,zero,8445d4 <igmpv2_process_query+0x108>
   {
      /* this is a IGMPv1 Host Membership Query */
      netp->igmpv1_rtr_present = IGMP_TRUE;
  844584:	e0fffc17 	ldw	r3,-16(fp)
  844588:	00800044 	movi	r2,1
  84458c:	18802d05 	stb	r2,180(r3)
      netp->igmpv1_query_rcvd_time = cticks;      
  844590:	00802174 	movhi	r2,133
  844594:	10832604 	addi	r2,r2,3224
  844598:	10c00017 	ldw	r3,0(r2)
  84459c:	e0bffc17 	ldw	r2,-16(fp)
  8445a0:	10c02e15 	stw	r3,184(r2)
      ++igmpstats.igmpv2mode_v1_queries_rcvd;
  8445a4:	00803934 	movhi	r2,228
  8445a8:	10a7a004 	addi	r2,r2,-24960
  8445ac:	10800417 	ldw	r2,16(r2)
  8445b0:	10c00044 	addi	r3,r2,1
  8445b4:	00803934 	movhi	r2,228
  8445b8:	10a7a004 	addi	r2,r2,-24960
  8445bc:	10c00415 	stw	r3,16(r2)
      /* set maximum time to respond to the equivalent of 10 
       * seconds worth of "ticks" (the timeout routine is
       * intended to be invoked PR_FASTHZ (5) times a second,
       * so each tick is equal to 200 ms) */
      max_resp_time = IGMP_MAX_HOST_REPORT_DELAY * PR_FASTHZ;
  8445c0:	00800c84 	movi	r2,50
  8445c4:	e0bffb8d 	sth	r2,-18(fp)
      process_all = IGMP_TRUE;
  8445c8:	00800044 	movi	r2,1
  8445cc:	e0bffb05 	stb	r2,-20(fp)
  8445d0:	00001d06 	br	844648 <igmpv2_process_query+0x17c>
   }
   else
   {
      /* this is either a IGMPv2 General Query or 
       * a IGMPv2 Group-Specific Query */
      if (igmp->igmp_group == 0)
  8445d4:	e0bffe17 	ldw	r2,-8(fp)
  8445d8:	10800117 	ldw	r2,4(r2)
  8445dc:	1004c03a 	cmpne	r2,r2,zero
  8445e0:	10000a1e 	bne	r2,zero,84460c <igmpv2_process_query+0x140>
      {
         /* this is a IGMPv2 General Query */
         ++igmpstats.igmpv2mode_v2_general_queries_rcvd;
  8445e4:	00803934 	movhi	r2,228
  8445e8:	10a7a004 	addi	r2,r2,-24960
  8445ec:	10800517 	ldw	r2,20(r2)
  8445f0:	10c00044 	addi	r3,r2,1
  8445f4:	00803934 	movhi	r2,228
  8445f8:	10a7a004 	addi	r2,r2,-24960
  8445fc:	10c00515 	stw	r3,20(r2)
         process_all = IGMP_TRUE;
  844600:	00800044 	movi	r2,1
  844604:	e0bffb05 	stb	r2,-20(fp)
  844608:	00000806 	br	84462c <igmpv2_process_query+0x160>
      }
      else
      {
         /* this is a IGMPv2 Group-Specific Query */       
         ++igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd;
  84460c:	00803934 	movhi	r2,228
  844610:	10a7a004 	addi	r2,r2,-24960
  844614:	10800617 	ldw	r2,24(r2)
  844618:	10c00044 	addi	r3,r2,1
  84461c:	00803934 	movhi	r2,228
  844620:	10a7a004 	addi	r2,r2,-24960
  844624:	10c00615 	stw	r3,24(r2)
         process_all = IGMP_FALSE;
  844628:	e03ffb05 	stb	zero,-20(fp)
       * IGMPv2 General Query or a IGMPv2 Group-Specific Query,
       * set maximum time to respond to value extracted 
       * from received message. The value in the message
       * is in tenths of a second.  max_resp_time is in
       * units of ticks (where one tick is 200 ms) */
      max_resp_time = (igmp->igmp_code * PR_FASTHZ) / 10;
  84462c:	e0bffe17 	ldw	r2,-8(fp)
  844630:	10800043 	ldbu	r2,1(r2)
  844634:	10c03fcc 	andi	r3,r2,255
  844638:	1804d7fa 	srli	r2,r3,31
  84463c:	10c5883a 	add	r2,r2,r3
  844640:	1005d07a 	srai	r2,r2,1
  844644:	e0bffb8d 	sth	r2,-18(fp)
   
   /* process all entries in a link's multicast address linked
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
  844648:	e0bffb03 	ldbu	r2,-20(fp)
  84464c:	1005003a 	cmpeq	r2,r2,zero
  844650:	1000181e 	bne	r2,zero,8446b4 <igmpv2_process_query+0x1e8>
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
  844654:	e0bffc17 	ldw	r2,-16(fp)
  844658:	10802c17 	ldw	r2,176(r2)
  84465c:	e0bffa15 	stw	r2,-24(fp)
  844660:	00001006 	br	8446a4 <igmpv2_process_query+0x1d8>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (!(inm->inm_addr)) continue;
  844664:	e0bffa17 	ldw	r2,-24(fp)
  844668:	10800017 	ldw	r2,0(r2)
  84466c:	1005003a 	cmpeq	r2,r2,zero
  844670:	1000091e 	bne	r2,zero,844698 <igmpv2_process_query+0x1cc>
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
  844674:	e0bffa17 	ldw	r2,-24(fp)
  844678:	10c00017 	ldw	r3,0(r2)
  84467c:	00802174 	movhi	r2,133
  844680:	10830604 	addi	r2,r2,3096
  844684:	10800017 	ldw	r2,0(r2)
  844688:	18800326 	beq	r3,r2,844698 <igmpv2_process_query+0x1cc>
            igmpv2_chk_set_timer (inm, max_resp_time);
  84468c:	e17ffb8b 	ldhu	r5,-18(fp)
  844690:	e13ffa17 	ldw	r4,-24(fp)
  844694:	08447180 	call	844718 <igmpv2_chk_set_timer>
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
  844698:	e0bffa17 	ldw	r2,-24(fp)
  84469c:	10800517 	ldw	r2,20(r2)
  8446a0:	e0bffa15 	stw	r2,-24(fp)
  8446a4:	e0bffa17 	ldw	r2,-24(fp)
  8446a8:	1004c03a 	cmpne	r2,r2,zero
  8446ac:	103fed1e 	bne	r2,zero,844664 <igmpv2_process_query+0x198>
  8446b0:	00001306 	br	844700 <igmpv2_process_query+0x234>
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
  8446b4:	e0bffe17 	ldw	r2,-8(fp)
  8446b8:	11000117 	ldw	r4,4(r2)
  8446bc:	e17ffc17 	ldw	r5,-16(fp)
  8446c0:	08423680 	call	842368 <lookup_mcast>
  8446c4:	e0bffa15 	stw	r2,-24(fp)
      if (inm != NULL)
  8446c8:	e0bffa17 	ldw	r2,-24(fp)
  8446cc:	1005003a 	cmpeq	r2,r2,zero
  8446d0:	1000041e 	bne	r2,zero,8446e4 <igmpv2_process_query+0x218>
         igmpv2_chk_set_timer (inm, max_resp_time);
  8446d4:	e17ffb8b 	ldhu	r5,-18(fp)
  8446d8:	e13ffa17 	ldw	r4,-24(fp)
  8446dc:	08447180 	call	844718 <igmpv2_chk_set_timer>
  8446e0:	00000706 	br	844700 <igmpv2_process_query+0x234>
      else ++igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd;
  8446e4:	00803934 	movhi	r2,228
  8446e8:	10a7a004 	addi	r2,r2,-24960
  8446ec:	10801217 	ldw	r2,72(r2)
  8446f0:	10c00044 	addi	r3,r2,1
  8446f4:	00803934 	movhi	r2,228
  8446f8:	10a7a004 	addi	r2,r2,-24960
  8446fc:	10c01215 	stw	r3,72(r2)
   } /* end ELSE (process ALL) */
   
   /* return success; caller will the received packet back to the 
    * free pool */
   return IGMP_OK;
  844700:	0005883a 	mov	r2,zero
}
  844704:	e037883a 	mov	sp,fp
  844708:	dfc00117 	ldw	ra,4(sp)
  84470c:	df000017 	ldw	fp,0(sp)
  844710:	dec00204 	addi	sp,sp,8
  844714:	f800283a 	ret

00844718 <igmpv2_chk_set_timer>:
 *
 * OUTPUT: None.
 */

void igmpv2_chk_set_timer (struct in_multi * inm, u_short max_resp_time)
{  
  844718:	defffc04 	addi	sp,sp,-16
  84471c:	dfc00315 	stw	ra,12(sp)
  844720:	df000215 	stw	fp,8(sp)
  844724:	df000204 	addi	fp,sp,8
  844728:	e13ffe15 	stw	r4,-8(fp)
  84472c:	e17fff0d 	sth	r5,-4(fp)

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
  844730:	e0bffe17 	ldw	r2,-8(fp)
  844734:	10c00317 	ldw	r3,12(r2)
  844738:	e0bfff0b 	ldhu	r2,-4(fp)
  84473c:	10c00436 	bltu	r2,r3,844750 <igmpv2_chk_set_timer+0x38>
  844740:	e0bffe17 	ldw	r2,-8(fp)
  844744:	10800317 	ldw	r2,12(r2)
  844748:	1004c03a 	cmpne	r2,r2,zero
  84474c:	1000431e 	bne	r2,zero,84485c <igmpv2_chk_set_timer+0x144>
       (inm->inm_timer == 0))
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
  844750:	e0bffe17 	ldw	r2,-8(fp)
  844754:	10800317 	ldw	r2,12(r2)
  844758:	1004c03a 	cmpne	r2,r2,zero
  84475c:	1000071e 	bne	r2,zero,84477c <igmpv2_chk_set_timer+0x64>
  844760:	00802174 	movhi	r2,133
  844764:	10830404 	addi	r2,r2,3088
  844768:	10800017 	ldw	r2,0(r2)
  84476c:	10c00044 	addi	r3,r2,1
  844770:	00802174 	movhi	r2,133
  844774:	10830404 	addi	r2,r2,3088
  844778:	10c00015 	stw	r3,0(r2)
      inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY (max_resp_time, inm->inm_addr);                     
  84477c:	00803934 	movhi	r2,228
  844780:	10a9e204 	addi	r2,r2,-22648
  844784:	11000217 	ldw	r4,8(r2)
  844788:	00803934 	movhi	r2,228
  84478c:	10a79c04 	addi	r2,r2,-24976
  844790:	10800017 	ldw	r2,0(r2)
  844794:	10800a17 	ldw	r2,40(r2)
  844798:	1004d63a 	srli	r2,r2,24
  84479c:	10c03fcc 	andi	r3,r2,255
  8447a0:	00803934 	movhi	r2,228
  8447a4:	10a79c04 	addi	r2,r2,-24976
  8447a8:	10800017 	ldw	r2,0(r2)
  8447ac:	10800a17 	ldw	r2,40(r2)
  8447b0:	1004d23a 	srli	r2,r2,8
  8447b4:	10bfc00c 	andi	r2,r2,65280
  8447b8:	1886b03a 	or	r3,r3,r2
  8447bc:	00803934 	movhi	r2,228
  8447c0:	10a79c04 	addi	r2,r2,-24976
  8447c4:	10800017 	ldw	r2,0(r2)
  8447c8:	10800a17 	ldw	r2,40(r2)
  8447cc:	10bfc00c 	andi	r2,r2,65280
  8447d0:	1004923a 	slli	r2,r2,8
  8447d4:	1886b03a 	or	r3,r3,r2
  8447d8:	00803934 	movhi	r2,228
  8447dc:	10a79c04 	addi	r2,r2,-24976
  8447e0:	10800017 	ldw	r2,0(r2)
  8447e4:	10800a17 	ldw	r2,40(r2)
  8447e8:	10803fcc 	andi	r2,r2,255
  8447ec:	1004963a 	slli	r2,r2,24
  8447f0:	1884b03a 	or	r2,r3,r2
  8447f4:	2089883a 	add	r4,r4,r2
  8447f8:	e0bffe17 	ldw	r2,-8(fp)
  8447fc:	10800017 	ldw	r2,0(r2)
  844800:	1004d63a 	srli	r2,r2,24
  844804:	10c03fcc 	andi	r3,r2,255
  844808:	e0bffe17 	ldw	r2,-8(fp)
  84480c:	10800017 	ldw	r2,0(r2)
  844810:	1004d23a 	srli	r2,r2,8
  844814:	10bfc00c 	andi	r2,r2,65280
  844818:	1886b03a 	or	r3,r3,r2
  84481c:	e0bffe17 	ldw	r2,-8(fp)
  844820:	10800017 	ldw	r2,0(r2)
  844824:	10bfc00c 	andi	r2,r2,65280
  844828:	1004923a 	slli	r2,r2,8
  84482c:	1886b03a 	or	r3,r3,r2
  844830:	e0bffe17 	ldw	r2,-8(fp)
  844834:	10800017 	ldw	r2,0(r2)
  844838:	10803fcc 	andi	r2,r2,255
  84483c:	1004963a 	slli	r2,r2,24
  844840:	1884b03a 	or	r2,r3,r2
  844844:	2089883a 	add	r4,r4,r2
  844848:	e17fff0b 	ldhu	r5,-4(fp)
  84484c:	08053c00 	call	8053c0 <__umodsi3>
  844850:	10c00044 	addi	r3,r2,1
  844854:	e0bffe17 	ldw	r2,-8(fp)
  844858:	10c00315 	stw	r3,12(r2)
   }

   return;
}
  84485c:	e037883a 	mov	sp,fp
  844860:	dfc00117 	ldw	ra,4(sp)
  844864:	df000017 	ldw	fp,0(sp)
  844868:	dec00204 	addi	sp,sp,8
  84486c:	f800283a 	ret

00844870 <igmpv2_chk4_rtr_alert_opt>:
 *         the IP Router Alert option in the received
 *         packet, and IGMP_FALSE otherwise.
 */

u_char igmpv2_chk4_rtr_alert_opt (struct ip * pip)
{
  844870:	defff904 	addi	sp,sp,-28
  844874:	df000615 	stw	fp,24(sp)
  844878:	df000604 	addi	fp,sp,24
  84487c:	e13ffd15 	stw	r4,-12(fp)
   u_long * rtr_alert_optp;
   u_char total_optlen;
   u_char optlen;
   u_char optval;

   total_optlen = ip_hlen (pip) - sizeof (struct ip);
  844880:	e0bffd17 	ldw	r2,-12(fp)
  844884:	10800003 	ldbu	r2,0(r2)
  844888:	108003cc 	andi	r2,r2,15
  84488c:	1085883a 	add	r2,r2,r2
  844890:	1085883a 	add	r2,r2,r2
  844894:	10bffb04 	addi	r2,r2,-20
  844898:	e0bffa85 	stb	r2,-22(fp)

   if (total_optlen > 0)
  84489c:	e0bffa83 	ldbu	r2,-22(fp)
  8448a0:	1005003a 	cmpeq	r2,r2,zero
  8448a4:	1000481e 	bne	r2,zero,8449c8 <igmpv2_chk4_rtr_alert_opt+0x158>
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
  8448a8:	e0bffd17 	ldw	r2,-12(fp)
  8448ac:	10800504 	addi	r2,r2,20
  8448b0:	e0bffc15 	stw	r2,-16(fp)
  
      while (total_optlen > 0)
  8448b4:	00004106 	br	8449bc <igmpv2_chk4_rtr_alert_opt+0x14c>
      {
         /* only the lowermost 5 bits are significant */    
         optval = (*optp) & IPOPT_TYPE_MASK;
  8448b8:	e0bffc17 	ldw	r2,-16(fp)
  8448bc:	10800003 	ldbu	r2,0(r2)
  8448c0:	108007cc 	andi	r2,r2,31
  8448c4:	e0bffa05 	stb	r2,-24(fp)
         switch (optval)
  8448c8:	e0bffa03 	ldbu	r2,-24(fp)
  8448cc:	e0bfff15 	stw	r2,-4(fp)
  8448d0:	e0ffff17 	ldw	r3,-4(fp)
  8448d4:	18800060 	cmpeqi	r2,r3,1
  8448d8:	10000b1e 	bne	r2,zero,844908 <igmpv2_chk4_rtr_alert_opt+0x98>
  8448dc:	e0ffff17 	ldw	r3,-4(fp)
  8448e0:	18800520 	cmpeqi	r2,r3,20
  8448e4:	10000b1e 	bne	r2,zero,844914 <igmpv2_chk4_rtr_alert_opt+0xa4>
  8448e8:	e0ffff17 	ldw	r3,-4(fp)
  8448ec:	1805003a 	cmpeq	r2,r3,zero
  8448f0:	1000011e 	bne	r2,zero,8448f8 <igmpv2_chk4_rtr_alert_opt+0x88>
  8448f4:	00002306 	br	844984 <igmpv2_chk4_rtr_alert_opt+0x114>
         {
            case EOL_OPT:
               /* we've encountered the End of Option List option, 
                * and so setting optlen isn't necessary */
               optlen = 1;
  8448f8:	00800044 	movi	r2,1
  8448fc:	e0bffa45 	stb	r2,-23(fp)
               /* we're done - we couldn't locate the IP Router Alert 
                * option in this IP header */
               return IGMP_FALSE;
  844900:	e03ffe15 	stw	zero,-8(fp)
  844904:	00003106 	br	8449cc <igmpv2_chk4_rtr_alert_opt+0x15c>
         
            case NOOP_OPT:
               /* skip past the one byte of the No Operation option */
               optlen = 1;
  844908:	00800044 	movi	r2,1
  84490c:	e0bffa45 	stb	r2,-23(fp)
               break;
  844910:	00002106 	br	844998 <igmpv2_chk4_rtr_alert_opt+0x128>
         
            case IP_RTR_ALERT_OPT:
               rtr_alert_optp = (u_long *) optp; 
  844914:	e0bffc17 	ldw	r2,-16(fp)
  844918:	e0bffb15 	stw	r2,-20(fp)
               if ((ntohl (*rtr_alert_optp)) == IP_RTR_ALERT_OPT_DATA)
  84491c:	e0bffb17 	ldw	r2,-20(fp)
  844920:	10800017 	ldw	r2,0(r2)
  844924:	1004d63a 	srli	r2,r2,24
  844928:	10c03fcc 	andi	r3,r2,255
  84492c:	e0bffb17 	ldw	r2,-20(fp)
  844930:	10800017 	ldw	r2,0(r2)
  844934:	1004d23a 	srli	r2,r2,8
  844938:	10bfc00c 	andi	r2,r2,65280
  84493c:	1886b03a 	or	r3,r3,r2
  844940:	e0bffb17 	ldw	r2,-20(fp)
  844944:	10800017 	ldw	r2,0(r2)
  844948:	10bfc00c 	andi	r2,r2,65280
  84494c:	1004923a 	slli	r2,r2,8
  844950:	1886b03a 	or	r3,r3,r2
  844954:	e0bffb17 	ldw	r2,-20(fp)
  844958:	10800017 	ldw	r2,0(r2)
  84495c:	10803fcc 	andi	r2,r2,255
  844960:	1004963a 	slli	r2,r2,24
  844964:	1886b03a 	or	r3,r3,r2
  844968:	00a50134 	movhi	r2,37892
  84496c:	1880031e 	bne	r3,r2,84497c <igmpv2_chk4_rtr_alert_opt+0x10c>
                  /* found the option, return success */
                  return IGMP_TRUE;
  844970:	00800044 	movi	r2,1
  844974:	e0bffe15 	stw	r2,-8(fp)
  844978:	00001406 	br	8449cc <igmpv2_chk4_rtr_alert_opt+0x15c>
               else return IGMP_FALSE;
  84497c:	e03ffe15 	stw	zero,-8(fp)
  844980:	00001206 	br	8449cc <igmpv2_chk4_rtr_alert_opt+0x15c>
          
            default:
               /* extract the length of the current option, and compute
                * the total length of this option */
               optlen = (*(optp + 1)) + 2;
  844984:	e0bffc17 	ldw	r2,-16(fp)
  844988:	10800044 	addi	r2,r2,1
  84498c:	10800003 	ldbu	r2,0(r2)
  844990:	10800084 	addi	r2,r2,2
  844994:	e0bffa45 	stb	r2,-23(fp)
               break;
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
  844998:	e0bffa43 	ldbu	r2,-23(fp)
  84499c:	1007883a 	mov	r3,r2
  8449a0:	e0bffc17 	ldw	r2,-16(fp)
  8449a4:	10c5883a 	add	r2,r2,r3
  8449a8:	e0bffc15 	stw	r2,-16(fp)
         total_optlen -= optlen;
  8449ac:	e0fffa83 	ldbu	r3,-22(fp)
  8449b0:	e0bffa43 	ldbu	r2,-23(fp)
  8449b4:	1885c83a 	sub	r2,r3,r2
  8449b8:	e0bffa85 	stb	r2,-22(fp)
   if (total_optlen > 0)
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
  
      while (total_optlen > 0)
  8449bc:	e0bffa83 	ldbu	r2,-22(fp)
  8449c0:	1004c03a 	cmpne	r2,r2,zero
  8449c4:	103fbc1e 	bne	r2,zero,8448b8 <igmpv2_chk4_rtr_alert_opt+0x48>
         total_optlen -= optlen;
      } /* end WHILE */
   }

   /* didn't find IP Alert option in IP header of rcvd packet */
   return IGMP_FALSE;
  8449c8:	e03ffe15 	stw	zero,-8(fp)
  8449cc:	e0bffe17 	ldw	r2,-8(fp)
}
  8449d0:	e037883a 	mov	sp,fp
  8449d4:	df000017 	ldw	fp,0(sp)
  8449d8:	dec00104 	addi	sp,sp,4
  8449dc:	f800283a 	ret

008449e0 <IPADDR_TO_NETP>:
 * RETURNS: 
 */

void
IPADDR_TO_NETP(ip_addr addr, NET* netp)
{
  8449e0:	defffc04 	addi	sp,sp,-16
  8449e4:	df000315 	stw	fp,12(sp)
  8449e8:	df000304 	addi	fp,sp,12
  8449ec:	e13ffe15 	stw	r4,-8(fp)
  8449f0:	e17fff15 	stw	r5,-4(fp)
   u_short  idx   =  0;
  8449f4:	e03ffd0d 	sth	zero,-12(fp)
   *netp = nets[idx];
  8449f8:	e0bffd0b 	ldhu	r2,-12(fp)
  8449fc:	00c03934 	movhi	r3,228
  844a00:	18e79c04 	addi	r3,r3,-24976
  844a04:	1085883a 	add	r2,r2,r2
  844a08:	1085883a 	add	r2,r2,r2
  844a0c:	10c5883a 	add	r2,r2,r3
  844a10:	10c00017 	ldw	r3,0(r2)
  844a14:	e0bfff17 	ldw	r2,-4(fp)
  844a18:	10c00015 	stw	r3,0(r2)
/*
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
  844a1c:	e0bffe17 	ldw	r2,-8(fp)
  844a20:	1004c03a 	cmpne	r2,r2,zero
  844a24:	1000331e 	bne	r2,zero,844af4 <IPADDR_TO_NETP+0x114>
   {
      for (idx = 0; idx < ifNumber; idx++)
  844a28:	e03ffd0d 	sth	zero,-12(fp)
  844a2c:	00001706 	br	844a8c <IPADDR_TO_NETP+0xac>
      {
         if (nets[idx]->n_mcastlist)
  844a30:	e0bffd0b 	ldhu	r2,-12(fp)
  844a34:	00c03934 	movhi	r3,228
  844a38:	18e79c04 	addi	r3,r3,-24976
  844a3c:	1085883a 	add	r2,r2,r2
  844a40:	1085883a 	add	r2,r2,r2
  844a44:	10c5883a 	add	r2,r2,r3
  844a48:	10800017 	ldw	r2,0(r2)
  844a4c:	10802b17 	ldw	r2,172(r2)
  844a50:	1005003a 	cmpeq	r2,r2,zero
  844a54:	10000a1e 	bne	r2,zero,844a80 <IPADDR_TO_NETP+0xa0>
         {
            *netp = nets[idx];
  844a58:	e0bffd0b 	ldhu	r2,-12(fp)
  844a5c:	00c03934 	movhi	r3,228
  844a60:	18e79c04 	addi	r3,r3,-24976
  844a64:	1085883a 	add	r2,r2,r2
  844a68:	1085883a 	add	r2,r2,r2
  844a6c:	10c5883a 	add	r2,r2,r3
  844a70:	10c00017 	ldw	r3,0(r2)
  844a74:	e0bfff17 	ldw	r2,-4(fp)
  844a78:	10c00015 	stw	r3,0(r2)
            break;
  844a7c:	00002606 	br	844b18 <IPADDR_TO_NETP+0x138>
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
   {
      for (idx = 0; idx < ifNumber; idx++)
  844a80:	e0bffd0b 	ldhu	r2,-12(fp)
  844a84:	10800044 	addi	r2,r2,1
  844a88:	e0bffd0d 	sth	r2,-12(fp)
  844a8c:	e0bffd0b 	ldhu	r2,-12(fp)
  844a90:	00c02174 	movhi	r3,133
  844a94:	18c30204 	addi	r3,r3,3080
  844a98:	18c00017 	ldw	r3,0(r3)
  844a9c:	10ffe436 	bltu	r2,r3,844a30 <IPADDR_TO_NETP+0x50>
  844aa0:	00001d06 	br	844b18 <IPADDR_TO_NETP+0x138>
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
      {
         idx++;
  844aa4:	e0bffd0b 	ldhu	r2,-12(fp)
  844aa8:	10800044 	addi	r2,r2,1
  844aac:	e0bffd0d 	sth	r2,-12(fp)
         if (idx >= ifNumber)
  844ab0:	e0fffd0b 	ldhu	r3,-12(fp)
  844ab4:	00802174 	movhi	r2,133
  844ab8:	10830204 	addi	r2,r2,3080
  844abc:	10800017 	ldw	r2,0(r2)
  844ac0:	18800336 	bltu	r3,r2,844ad0 <IPADDR_TO_NETP+0xf0>
         {
            *netp = NULL;
  844ac4:	e0bfff17 	ldw	r2,-4(fp)
  844ac8:	10000015 	stw	zero,0(r2)
            break;
  844acc:	00001206 	br	844b18 <IPADDR_TO_NETP+0x138>
         }
         else
            *netp = nets[idx];
  844ad0:	e0bffd0b 	ldhu	r2,-12(fp)
  844ad4:	00c03934 	movhi	r3,228
  844ad8:	18e79c04 	addi	r3,r3,-24976
  844adc:	1085883a 	add	r2,r2,r2
  844ae0:	1085883a 	add	r2,r2,r2
  844ae4:	10c5883a 	add	r2,r2,r3
  844ae8:	10c00017 	ldw	r3,0(r2)
  844aec:	e0bfff17 	ldw	r2,-4(fp)
  844af0:	10c00015 	stw	r3,0(r2)
         }
      }
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
  844af4:	e0bfff17 	ldw	r2,-4(fp)
  844af8:	10800017 	ldw	r2,0(r2)
  844afc:	1005003a 	cmpeq	r2,r2,zero
  844b00:	1000051e 	bne	r2,zero,844b18 <IPADDR_TO_NETP+0x138>
  844b04:	e0bfff17 	ldw	r2,-4(fp)
  844b08:	10800017 	ldw	r2,0(r2)
  844b0c:	10c00a17 	ldw	r3,40(r2)
  844b10:	e0bffe17 	ldw	r2,-8(fp)
  844b14:	18bfe31e 	bne	r3,r2,844aa4 <IPADDR_TO_NETP+0xc4>
         }
         else
            *netp = nets[idx];
      }
   }
}
  844b18:	e037883a 	mov	sp,fp
  844b1c:	df000017 	ldw	fp,0(sp)
  844b20:	dec00104 	addi	sp,sp,4
  844b24:	f800283a 	ret

00844b28 <ip_setmoptions>:
 * RETURNS: 
 */

int
ip_setmoptions(int optname, struct socket * so, void * val)
{
  844b28:	defff104 	addi	sp,sp,-60
  844b2c:	dfc00e15 	stw	ra,56(sp)
  844b30:	df000d15 	stw	fp,52(sp)
  844b34:	dc000c15 	stw	r16,48(sp)
  844b38:	df000c04 	addi	fp,sp,48
  844b3c:	e13ffb15 	stw	r4,-20(fp)
  844b40:	e17ffc15 	stw	r5,-16(fp)
  844b44:	e1bffd15 	stw	r6,-12(fp)
   int   error =  0;
  844b48:	e03ff915 	stw	zero,-28(fp)
   u_short  i;
   struct ip_mreq *  mreq;
   struct net *   netp  =  NULL;
  844b4c:	e03ffa15 	stw	zero,-24(fp)
   struct ip_moptions * imo   =  so->inp_moptions;
  844b50:	e0bffc17 	ldw	r2,-16(fp)
  844b54:	10800317 	ldw	r2,12(r2)
  844b58:	e0bff615 	stw	r2,-40(fp)
   struct ip_moptions **imop  =  &so->inp_moptions;
  844b5c:	e0bffc17 	ldw	r2,-16(fp)
  844b60:	10800304 	addi	r2,r2,12
  844b64:	e0bff515 	stw	r2,-44(fp)
   ip_addr addr;


   if (imo == NULL) 
  844b68:	e0bff617 	ldw	r2,-40(fp)
  844b6c:	1004c03a 	cmpne	r2,r2,zero
  844b70:	1000161e 	bne	r2,zero,844bcc <ip_setmoptions+0xa4>
   {
   /*
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));
  844b74:	01001604 	movi	r4,88
  844b78:	082b20c0 	call	82b20c <npalloc>
  844b7c:	e0bff615 	stw	r2,-40(fp)

      if (imo == NULL)
  844b80:	e0bff617 	ldw	r2,-40(fp)
  844b84:	1004c03a 	cmpne	r2,r2,zero
  844b88:	1000031e 	bne	r2,zero,844b98 <ip_setmoptions+0x70>
         return (ENOBUFS);
  844b8c:	00801a44 	movi	r2,105
  844b90:	e0bffe15 	stw	r2,-8(fp)
  844b94:	00015906 	br	8450fc <ip_setmoptions+0x5d4>
      *imop = imo;
  844b98:	e0fff517 	ldw	r3,-44(fp)
  844b9c:	e0bff617 	ldw	r2,-40(fp)
  844ba0:	18800015 	stw	r2,0(r3)
      imo->imo_multicast_netp = NULL;
  844ba4:	e0bff617 	ldw	r2,-40(fp)
  844ba8:	10000015 	stw	zero,0(r2)
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
  844bac:	e0fff617 	ldw	r3,-40(fp)
  844bb0:	00800044 	movi	r2,1
  844bb4:	18800105 	stb	r2,4(r3)
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
  844bb8:	e0fff617 	ldw	r3,-40(fp)
  844bbc:	00800044 	movi	r2,1
  844bc0:	18800145 	stb	r2,5(r3)
      imo->imo_num_memberships = 0;
  844bc4:	e0bff617 	ldw	r2,-40(fp)
  844bc8:	1000018d 	sth	zero,6(r2)
   }

   switch (optname) 
  844bcc:	e0bffb17 	ldw	r2,-20(fp)
  844bd0:	10bffdc4 	addi	r2,r2,-9
  844bd4:	e0bfff15 	stw	r2,-4(fp)
  844bd8:	e0ffff17 	ldw	r3,-4(fp)
  844bdc:	18800168 	cmpgeui	r2,r3,5
  844be0:	10012a1e 	bne	r2,zero,84508c <ip_setmoptions+0x564>
  844be4:	e13fff17 	ldw	r4,-4(fp)
  844be8:	e13fff17 	ldw	r4,-4(fp)
  844bec:	2105883a 	add	r2,r4,r4
  844bf0:	1087883a 	add	r3,r2,r2
  844bf4:	00802134 	movhi	r2,132
  844bf8:	10930204 	addi	r2,r2,19464
  844bfc:	1885883a 	add	r2,r3,r2
  844c00:	10800017 	ldw	r2,0(r2)
  844c04:	1000683a 	jmp	r2
  844c08:	00844c1c 	xori	r2,zero,4400
  844c0c:	00844c90 	cmplti	r2,zero,4402
  844c10:	00844ca4 	muli	r2,zero,4402
  844c14:	00844cd8 	cmpnei	r2,zero,4403
  844c18:	00844ea8 	cmpgeui	r2,zero,4410

   case IP_MULTICAST_IF:
      /*
       * Select the interface for outgoing multicast packets.
       */
      addr = *(ip_addr *)val;
  844c1c:	e0bffd17 	ldw	r2,-12(fp)
  844c20:	10800017 	ldw	r2,0(r2)
  844c24:	e0bff415 	stw	r2,-48(fp)
         /*
          * AADDR is used to remove a previous selection.
          * When no interface is selected, a default one is
          * chosen every time a multicast packet is sent.
          */
      if (addr == AADDR) 
  844c28:	e0bff417 	ldw	r2,-48(fp)
  844c2c:	1004c03a 	cmpne	r2,r2,zero
  844c30:	1000031e 	bne	r2,zero,844c40 <ip_setmoptions+0x118>
      {
         imo->imo_multicast_netp = NULL;
  844c34:	e0bff617 	ldw	r2,-40(fp)
  844c38:	10000015 	stw	zero,0(r2)
         break;
  844c3c:	00011506 	br	845094 <ip_setmoptions+0x56c>
         /*
          * The selected interface is identified by its local
          * IP address.  Find the interface and confirm that
          * it supports multicasting.
          */
      IPADDR_TO_NETP(addr, &netp);
  844c40:	e17ffa04 	addi	r5,fp,-24
  844c44:	e13ff417 	ldw	r4,-48(fp)
  844c48:	08449e00 	call	8449e0 <IPADDR_TO_NETP>
      if ((netp == NULL) || (netp->n_mcastlist) == NULL) 
  844c4c:	e0bffa17 	ldw	r2,-24(fp)
  844c50:	1005003a 	cmpeq	r2,r2,zero
  844c54:	1000041e 	bne	r2,zero,844c68 <ip_setmoptions+0x140>
  844c58:	e0bffa17 	ldw	r2,-24(fp)
  844c5c:	10802b17 	ldw	r2,172(r2)
  844c60:	1004c03a 	cmpne	r2,r2,zero
  844c64:	1000031e 	bne	r2,zero,844c74 <ip_setmoptions+0x14c>
      {
         error = EADDRNOTAVAIL;
  844c68:	00801f44 	movi	r2,125
  844c6c:	e0bff915 	stw	r2,-28(fp)
         break;
  844c70:	00010806 	br	845094 <ip_setmoptions+0x56c>
      }
      if (addr != AADDR) 
  844c74:	e0bff417 	ldw	r2,-48(fp)
  844c78:	1005003a 	cmpeq	r2,r2,zero
  844c7c:	1001051e 	bne	r2,zero,845094 <ip_setmoptions+0x56c>
         imo->imo_multicast_netp = netp;
  844c80:	e0fffa17 	ldw	r3,-24(fp)
  844c84:	e0bff617 	ldw	r2,-40(fp)
  844c88:	10c00015 	stw	r3,0(r2)
      break;
  844c8c:	00010106 	br	845094 <ip_setmoptions+0x56c>

   case IP_MULTICAST_TTL:
      /*
       * Set the IP time-to-live for outgoing multicast packets.
       */
      imo->imo_multicast_ttl = *(u_char *)val;
  844c90:	e0bffd17 	ldw	r2,-12(fp)
  844c94:	10c00003 	ldbu	r3,0(r2)
  844c98:	e0bff617 	ldw	r2,-40(fp)
  844c9c:	10c00105 	stb	r3,4(r2)
      break;
  844ca0:	0000fc06 	br	845094 <ip_setmoptions+0x56c>
   case IP_MULTICAST_LOOP:
      /*
       * Set the loopback flag for outgoing multicast packets.
       * Must be zero or one.
       */
      if (*(u_char *)val > 1) 
  844ca4:	e0bffd17 	ldw	r2,-12(fp)
  844ca8:	10800003 	ldbu	r2,0(r2)
  844cac:	10803fcc 	andi	r2,r2,255
  844cb0:	108000b0 	cmpltui	r2,r2,2
  844cb4:	1000031e 	bne	r2,zero,844cc4 <ip_setmoptions+0x19c>
      {
         error = EINVAL;
  844cb8:	00800584 	movi	r2,22
  844cbc:	e0bff915 	stw	r2,-28(fp)
         break;
  844cc0:	0000f406 	br	845094 <ip_setmoptions+0x56c>
      }
      imo->imo_multicast_loop = *(u_char *)(val);
  844cc4:	e0bffd17 	ldw	r2,-12(fp)
  844cc8:	10c00003 	ldbu	r3,0(r2)
  844ccc:	e0bff617 	ldw	r2,-40(fp)
  844cd0:	10c00145 	stb	r3,5(r2)
      break;
  844cd4:	0000ef06 	br	845094 <ip_setmoptions+0x56c>
   case IP_ADD_MEMBERSHIP:
      /*
       * Add a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
  844cd8:	e0bffd17 	ldw	r2,-12(fp)
  844cdc:	e0bff715 	stw	r2,-36(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
  844ce0:	e0bff717 	ldw	r2,-36(fp)
  844ce4:	10800017 	ldw	r2,0(r2)
  844ce8:	1004d63a 	srli	r2,r2,24
  844cec:	10c03fcc 	andi	r3,r2,255
  844cf0:	e0bff717 	ldw	r2,-36(fp)
  844cf4:	10800017 	ldw	r2,0(r2)
  844cf8:	1004d23a 	srli	r2,r2,8
  844cfc:	10bfc00c 	andi	r2,r2,65280
  844d00:	1886b03a 	or	r3,r3,r2
  844d04:	e0bff717 	ldw	r2,-36(fp)
  844d08:	10800017 	ldw	r2,0(r2)
  844d0c:	10bfc00c 	andi	r2,r2,65280
  844d10:	1004923a 	slli	r2,r2,8
  844d14:	1886b03a 	or	r3,r3,r2
  844d18:	e0bff717 	ldw	r2,-36(fp)
  844d1c:	10800017 	ldw	r2,0(r2)
  844d20:	10803fcc 	andi	r2,r2,255
  844d24:	1004963a 	slli	r2,r2,24
  844d28:	1884b03a 	or	r2,r3,r2
  844d2c:	10fc002c 	andhi	r3,r2,61440
  844d30:	00b80034 	movhi	r2,57344
  844d34:	18800326 	beq	r3,r2,844d44 <ip_setmoptions+0x21c>
      {
         error = EINVAL;
  844d38:	00800584 	movi	r2,22
  844d3c:	e0bff915 	stw	r2,-28(fp)
         break;
  844d40:	0000d406 	br	845094 <ip_setmoptions+0x56c>
       * If no interface address was provided, use the interface of
       * the route to the given multicast address.
       * For the Iniche stack implementation, look for a default
       * interface that supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
  844d44:	e0bff717 	ldw	r2,-36(fp)
  844d48:	11000117 	ldw	r4,4(r2)
  844d4c:	e17ffa04 	addi	r5,fp,-24
  844d50:	08449e00 	call	8449e0 <IPADDR_TO_NETP>
      /*
       * See if we found an interface, and confirm that it
       * supports multicast.
       */
      if (netp == NULL || (netp->n_mcastlist) == NULL) 
  844d54:	e0bffa17 	ldw	r2,-24(fp)
  844d58:	1005003a 	cmpeq	r2,r2,zero
  844d5c:	1000041e 	bne	r2,zero,844d70 <ip_setmoptions+0x248>
  844d60:	e0bffa17 	ldw	r2,-24(fp)
  844d64:	10802b17 	ldw	r2,172(r2)
  844d68:	1004c03a 	cmpne	r2,r2,zero
  844d6c:	1000031e 	bne	r2,zero,844d7c <ip_setmoptions+0x254>
      {
         error = EADDRNOTAVAIL;
  844d70:	00801f44 	movi	r2,125
  844d74:	e0bff915 	stw	r2,-28(fp)
         break;
  844d78:	0000c606 	br	845094 <ip_setmoptions+0x56c>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
  844d7c:	e03ff80d 	sth	zero,-32(fp)
  844d80:	00001806 	br	844de4 <ip_setmoptions+0x2bc>
      {
         if (imo->imo_membership[i]->inm_netp == netp &&
  844d84:	e0bff80b 	ldhu	r2,-32(fp)
  844d88:	e0fff617 	ldw	r3,-40(fp)
  844d8c:	1085883a 	add	r2,r2,r2
  844d90:	1085883a 	add	r2,r2,r2
  844d94:	10c5883a 	add	r2,r2,r3
  844d98:	10800204 	addi	r2,r2,8
  844d9c:	10800017 	ldw	r2,0(r2)
  844da0:	10c00117 	ldw	r3,4(r2)
  844da4:	e0bffa17 	ldw	r2,-24(fp)
  844da8:	18800b1e 	bne	r3,r2,844dd8 <ip_setmoptions+0x2b0>
  844dac:	e0bff80b 	ldhu	r2,-32(fp)
  844db0:	e0fff617 	ldw	r3,-40(fp)
  844db4:	1085883a 	add	r2,r2,r2
  844db8:	1085883a 	add	r2,r2,r2
  844dbc:	10c5883a 	add	r2,r2,r3
  844dc0:	10800204 	addi	r2,r2,8
  844dc4:	10800017 	ldw	r2,0(r2)
  844dc8:	10c00017 	ldw	r3,0(r2)
  844dcc:	e0bff717 	ldw	r2,-36(fp)
  844dd0:	10800017 	ldw	r2,0(r2)
  844dd4:	18800826 	beq	r3,r2,844df8 <ip_setmoptions+0x2d0>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
  844dd8:	e0bff80b 	ldhu	r2,-32(fp)
  844ddc:	10800044 	addi	r2,r2,1
  844de0:	e0bff80d 	sth	r2,-32(fp)
  844de4:	e0bff617 	ldw	r2,-40(fp)
  844de8:	1080018b 	ldhu	r2,6(r2)
  844dec:	10ffffcc 	andi	r3,r2,65535
  844df0:	e0bff80b 	ldhu	r2,-32(fp)
  844df4:	10ffe336 	bltu	r2,r3,844d84 <ip_setmoptions+0x25c>
             == mreq->imr_multiaddr)
         {
            break;
         }
      }
      if (i < imo->imo_num_memberships) 
  844df8:	e0bff617 	ldw	r2,-40(fp)
  844dfc:	1080018b 	ldhu	r2,6(r2)
  844e00:	10ffffcc 	andi	r3,r2,65535
  844e04:	e0bff80b 	ldhu	r2,-32(fp)
  844e08:	10c0032e 	bgeu	r2,r3,844e18 <ip_setmoptions+0x2f0>
      {
         error = EADDRINUSE;
  844e0c:	00801c04 	movi	r2,112
  844e10:	e0bff915 	stw	r2,-28(fp)
         break;
  844e14:	00009f06 	br	845094 <ip_setmoptions+0x56c>
      }
      if (i == IP_MAX_MEMBERSHIPS) 
  844e18:	e0bff80b 	ldhu	r2,-32(fp)
  844e1c:	10800518 	cmpnei	r2,r2,20
  844e20:	1000031e 	bne	r2,zero,844e30 <ip_setmoptions+0x308>
      {
         error = ETOOMANYREFS;
  844e24:	00802044 	movi	r2,129
  844e28:	e0bff915 	stw	r2,-28(fp)
         break;
  844e2c:	00009906 	br	845094 <ip_setmoptions+0x56c>
      }
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
  844e30:	e43ff80b 	ldhu	r16,-32(fp)
  844e34:	e13ff717 	ldw	r4,-36(fp)
  844e38:	e17ffa17 	ldw	r5,-24(fp)
  844e3c:	01800104 	movi	r6,4
  844e40:	08420e80 	call	8420e8 <in_addmulti>
  844e44:	1009883a 	mov	r4,r2
  844e48:	e0fff617 	ldw	r3,-40(fp)
  844e4c:	8405883a 	add	r2,r16,r16
  844e50:	1085883a 	add	r2,r2,r2
  844e54:	10c5883a 	add	r2,r2,r3
  844e58:	10800204 	addi	r2,r2,8
  844e5c:	11000015 	stw	r4,0(r2)
  844e60:	e0fff617 	ldw	r3,-40(fp)
  844e64:	8405883a 	add	r2,r16,r16
  844e68:	1085883a 	add	r2,r2,r2
  844e6c:	10c5883a 	add	r2,r2,r3
  844e70:	10800204 	addi	r2,r2,8
  844e74:	10800017 	ldw	r2,0(r2)
  844e78:	1004c03a 	cmpne	r2,r2,zero
  844e7c:	1000031e 	bne	r2,zero,844e8c <ip_setmoptions+0x364>
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
      {
         error = ENOBUFS;
  844e80:	00801a44 	movi	r2,105
  844e84:	e0bff915 	stw	r2,-28(fp)
         break;
  844e88:	00008206 	br	845094 <ip_setmoptions+0x56c>
      }
      ++imo->imo_num_memberships;
  844e8c:	e0bff617 	ldw	r2,-40(fp)
  844e90:	1080018b 	ldhu	r2,6(r2)
  844e94:	10800044 	addi	r2,r2,1
  844e98:	1007883a 	mov	r3,r2
  844e9c:	e0bff617 	ldw	r2,-40(fp)
  844ea0:	10c0018d 	sth	r3,6(r2)
      break;
  844ea4:	00007b06 	br	845094 <ip_setmoptions+0x56c>
   case IP_DROP_MEMBERSHIP:
      /*
       * Drop a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
  844ea8:	e0bffd17 	ldw	r2,-12(fp)
  844eac:	e0bff715 	stw	r2,-36(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
  844eb0:	e0bff717 	ldw	r2,-36(fp)
  844eb4:	10800017 	ldw	r2,0(r2)
  844eb8:	1004d63a 	srli	r2,r2,24
  844ebc:	10c03fcc 	andi	r3,r2,255
  844ec0:	e0bff717 	ldw	r2,-36(fp)
  844ec4:	10800017 	ldw	r2,0(r2)
  844ec8:	1004d23a 	srli	r2,r2,8
  844ecc:	10bfc00c 	andi	r2,r2,65280
  844ed0:	1886b03a 	or	r3,r3,r2
  844ed4:	e0bff717 	ldw	r2,-36(fp)
  844ed8:	10800017 	ldw	r2,0(r2)
  844edc:	10bfc00c 	andi	r2,r2,65280
  844ee0:	1004923a 	slli	r2,r2,8
  844ee4:	1886b03a 	or	r3,r3,r2
  844ee8:	e0bff717 	ldw	r2,-36(fp)
  844eec:	10800017 	ldw	r2,0(r2)
  844ef0:	10803fcc 	andi	r2,r2,255
  844ef4:	1004963a 	slli	r2,r2,24
  844ef8:	1884b03a 	or	r2,r3,r2
  844efc:	10fc002c 	andhi	r3,r2,61440
  844f00:	00b80034 	movhi	r2,57344
  844f04:	18800326 	beq	r3,r2,844f14 <ip_setmoptions+0x3ec>
      {
         error = EINVAL;
  844f08:	00800584 	movi	r2,22
  844f0c:	e0bff915 	stw	r2,-28(fp)
         break;
  844f10:	00006006 	br	845094 <ip_setmoptions+0x56c>
       * If an interface address was specified, get a pointer
       * to its ifnet structure. If an interface address was not
       * specified, get a pointer to the first interface that
       * supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
  844f14:	e0bff717 	ldw	r2,-36(fp)
  844f18:	11000117 	ldw	r4,4(r2)
  844f1c:	e17ffa04 	addi	r5,fp,-24
  844f20:	08449e00 	call	8449e0 <IPADDR_TO_NETP>
      if (netp == NULL) 
  844f24:	e0bffa17 	ldw	r2,-24(fp)
  844f28:	1004c03a 	cmpne	r2,r2,zero
  844f2c:	1000031e 	bne	r2,zero,844f3c <ip_setmoptions+0x414>
      {
         error = EADDRNOTAVAIL;
  844f30:	00801f44 	movi	r2,125
  844f34:	e0bff915 	stw	r2,-28(fp)
         break;
  844f38:	00005606 	br	845094 <ip_setmoptions+0x56c>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
  844f3c:	e03ff80d 	sth	zero,-32(fp)
  844f40:	00001b06 	br	844fb0 <ip_setmoptions+0x488>
      {
         if ((netp == NULL ||
  844f44:	e0bffa17 	ldw	r2,-24(fp)
  844f48:	1005003a 	cmpeq	r2,r2,zero
  844f4c:	10000a1e 	bne	r2,zero,844f78 <ip_setmoptions+0x450>
  844f50:	e0bff80b 	ldhu	r2,-32(fp)
  844f54:	e0fff617 	ldw	r3,-40(fp)
  844f58:	1085883a 	add	r2,r2,r2
  844f5c:	1085883a 	add	r2,r2,r2
  844f60:	10c5883a 	add	r2,r2,r3
  844f64:	10800204 	addi	r2,r2,8
  844f68:	10800017 	ldw	r2,0(r2)
  844f6c:	10c00117 	ldw	r3,4(r2)
  844f70:	e0bffa17 	ldw	r2,-24(fp)
  844f74:	18800b1e 	bne	r3,r2,844fa4 <ip_setmoptions+0x47c>
  844f78:	e0bff80b 	ldhu	r2,-32(fp)
  844f7c:	e0fff617 	ldw	r3,-40(fp)
  844f80:	1085883a 	add	r2,r2,r2
  844f84:	1085883a 	add	r2,r2,r2
  844f88:	10c5883a 	add	r2,r2,r3
  844f8c:	10800204 	addi	r2,r2,8
  844f90:	10800017 	ldw	r2,0(r2)
  844f94:	10c00017 	ldw	r3,0(r2)
  844f98:	e0bff717 	ldw	r2,-36(fp)
  844f9c:	10800017 	ldw	r2,0(r2)
  844fa0:	18800826 	beq	r3,r2,844fc4 <ip_setmoptions+0x49c>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
  844fa4:	e0bff80b 	ldhu	r2,-32(fp)
  844fa8:	10800044 	addi	r2,r2,1
  844fac:	e0bff80d 	sth	r2,-32(fp)
  844fb0:	e0bff617 	ldw	r2,-40(fp)
  844fb4:	1080018b 	ldhu	r2,6(r2)
  844fb8:	10ffffcc 	andi	r3,r2,65535
  844fbc:	e0bff80b 	ldhu	r2,-32(fp)
  844fc0:	10ffe036 	bltu	r2,r3,844f44 <ip_setmoptions+0x41c>
             mreq->imr_multiaddr)
         {
            break;
         }
      }
      if (i == imo->imo_num_memberships) 
  844fc4:	e0bff617 	ldw	r2,-40(fp)
  844fc8:	1080018b 	ldhu	r2,6(r2)
  844fcc:	10ffffcc 	andi	r3,r2,65535
  844fd0:	e0bff80b 	ldhu	r2,-32(fp)
  844fd4:	1880031e 	bne	r3,r2,844fe4 <ip_setmoptions+0x4bc>
      {
         error = EADDRNOTAVAIL;
  844fd8:	00801f44 	movi	r2,125
  844fdc:	e0bff915 	stw	r2,-28(fp)
         break;
  844fe0:	00002c06 	br	845094 <ip_setmoptions+0x56c>
      }
      /*
       * Give up the multicast address record to which the
       * membership points.
       */
      in_delmulti(imo->imo_membership[i]);
  844fe4:	e0bff80b 	ldhu	r2,-32(fp)
  844fe8:	e0fff617 	ldw	r3,-40(fp)
  844fec:	1085883a 	add	r2,r2,r2
  844ff0:	1085883a 	add	r2,r2,r2
  844ff4:	10c5883a 	add	r2,r2,r3
  844ff8:	10800204 	addi	r2,r2,8
  844ffc:	11000017 	ldw	r4,0(r2)
  845000:	08422500 	call	842250 <in_delmulti>
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
  845004:	e0bff80b 	ldhu	r2,-32(fp)
  845008:	10800044 	addi	r2,r2,1
  84500c:	e0bff80d 	sth	r2,-32(fp)
  845010:	00001206 	br	84505c <ip_setmoptions+0x534>
         imo->imo_membership[i-1] = imo->imo_membership[i];
  845014:	e0bff80b 	ldhu	r2,-32(fp)
  845018:	113fffc4 	addi	r4,r2,-1
  84501c:	e0bff80b 	ldhu	r2,-32(fp)
  845020:	e0fff617 	ldw	r3,-40(fp)
  845024:	1085883a 	add	r2,r2,r2
  845028:	1085883a 	add	r2,r2,r2
  84502c:	10c5883a 	add	r2,r2,r3
  845030:	10800204 	addi	r2,r2,8
  845034:	11400017 	ldw	r5,0(r2)
  845038:	e0fff617 	ldw	r3,-40(fp)
  84503c:	2105883a 	add	r2,r4,r4
  845040:	1085883a 	add	r2,r2,r2
  845044:	10c5883a 	add	r2,r2,r3
  845048:	10800204 	addi	r2,r2,8
  84504c:	11400015 	stw	r5,0(r2)
       */
      in_delmulti(imo->imo_membership[i]);
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
  845050:	e0bff80b 	ldhu	r2,-32(fp)
  845054:	10800044 	addi	r2,r2,1
  845058:	e0bff80d 	sth	r2,-32(fp)
  84505c:	e0bff617 	ldw	r2,-40(fp)
  845060:	1080018b 	ldhu	r2,6(r2)
  845064:	10ffffcc 	andi	r3,r2,65535
  845068:	e0bff80b 	ldhu	r2,-32(fp)
  84506c:	10ffe936 	bltu	r2,r3,845014 <ip_setmoptions+0x4ec>
         imo->imo_membership[i-1] = imo->imo_membership[i];
      --imo->imo_num_memberships;
  845070:	e0bff617 	ldw	r2,-40(fp)
  845074:	1080018b 	ldhu	r2,6(r2)
  845078:	10bfffc4 	addi	r2,r2,-1
  84507c:	1007883a 	mov	r3,r2
  845080:	e0bff617 	ldw	r2,-40(fp)
  845084:	10c0018d 	sth	r3,6(r2)
      break;
  845088:	00000206 	br	845094 <ip_setmoptions+0x56c>

      default:
      error = EOPNOTSUPP;
  84508c:	008017c4 	movi	r2,95
  845090:	e0bff915 	stw	r2,-28(fp)
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
  845094:	e0bff617 	ldw	r2,-40(fp)
  845098:	10800017 	ldw	r2,0(r2)
  84509c:	1004c03a 	cmpne	r2,r2,zero
  8450a0:	1000141e 	bne	r2,zero,8450f4 <ip_setmoptions+0x5cc>
  8450a4:	e0bff617 	ldw	r2,-40(fp)
  8450a8:	10800103 	ldbu	r2,4(r2)
  8450ac:	10803fcc 	andi	r2,r2,255
  8450b0:	10800058 	cmpnei	r2,r2,1
  8450b4:	10000f1e 	bne	r2,zero,8450f4 <ip_setmoptions+0x5cc>
  8450b8:	e0bff617 	ldw	r2,-40(fp)
  8450bc:	10800143 	ldbu	r2,5(r2)
  8450c0:	10803fcc 	andi	r2,r2,255
  8450c4:	10800058 	cmpnei	r2,r2,1
  8450c8:	10000a1e 	bne	r2,zero,8450f4 <ip_setmoptions+0x5cc>
  8450cc:	e0bff617 	ldw	r2,-40(fp)
  8450d0:	1080018b 	ldhu	r2,6(r2)
  8450d4:	10bfffcc 	andi	r2,r2,65535
  8450d8:	1004c03a 	cmpne	r2,r2,zero
  8450dc:	1000051e 	bne	r2,zero,8450f4 <ip_setmoptions+0x5cc>
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
       imo->imo_num_memberships == 0) 
   {
      IM_FREE(*imop);
  8450e0:	e0bff517 	ldw	r2,-44(fp)
  8450e4:	11000017 	ldw	r4,0(r2)
  8450e8:	082b3000 	call	82b300 <npfree>
      *imop = NULL;
  8450ec:	e0bff517 	ldw	r2,-44(fp)
  8450f0:	10000015 	stw	zero,0(r2)
   }
   return (error);
  8450f4:	e0bff917 	ldw	r2,-28(fp)
  8450f8:	e0bffe15 	stw	r2,-8(fp)
  8450fc:	e0bffe17 	ldw	r2,-8(fp)
}
  845100:	e037883a 	mov	sp,fp
  845104:	dfc00217 	ldw	ra,8(sp)
  845108:	df000117 	ldw	fp,4(sp)
  84510c:	dc000017 	ldw	r16,0(sp)
  845110:	dec00304 	addi	sp,sp,12
  845114:	f800283a 	ret

00845118 <ip_getmoptions>:
 * RETURNS: 
 */

int
ip_getmoptions(int optname, struct socket * so, void * val)
{
  845118:	defff604 	addi	sp,sp,-40
  84511c:	df000915 	stw	fp,36(sp)
  845120:	df000904 	addi	fp,sp,36
  845124:	e13ffb15 	stw	r4,-20(fp)
  845128:	e17ffc15 	stw	r5,-16(fp)
  84512c:	e1bffd15 	stw	r6,-12(fp)
   u_char * ttl;
   u_char * loop;
   ip_addr *addr;
   struct ip_moptions*  imo   =  so->inp_moptions;
  845130:	e0bffc17 	ldw	r2,-16(fp)
  845134:	10800317 	ldw	r2,12(r2)
  845138:	e0bff715 	stw	r2,-36(fp)
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
  84513c:	e0bffb17 	ldw	r2,-20(fp)
  845140:	e0bfff15 	stw	r2,-4(fp)
  845144:	e0ffff17 	ldw	r3,-4(fp)
  845148:	18800260 	cmpeqi	r2,r3,9
  84514c:	10000a1e 	bne	r2,zero,845178 <ip_getmoptions+0x60>
  845150:	e0ffff17 	ldw	r3,-4(fp)
  845154:	18800250 	cmplti	r2,r3,9
  845158:	1000381e 	bne	r2,zero,84523c <ip_getmoptions+0x124>
  84515c:	e0ffff17 	ldw	r3,-4(fp)
  845160:	188002a0 	cmpeqi	r2,r3,10
  845164:	1000171e 	bne	r2,zero,8451c4 <ip_getmoptions+0xac>
  845168:	e0ffff17 	ldw	r3,-4(fp)
  84516c:	188002e0 	cmpeqi	r2,r3,11
  845170:	1000231e 	bne	r2,zero,845200 <ip_getmoptions+0xe8>
  845174:	00003106 	br	84523c <ip_getmoptions+0x124>
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
  845178:	e0bffd17 	ldw	r2,-12(fp)
  84517c:	e0bff815 	stw	r2,-32(fp)
      if (imo == NULL || imo->imo_multicast_netp == NULL)
  845180:	e0bff717 	ldw	r2,-36(fp)
  845184:	1005003a 	cmpeq	r2,r2,zero
  845188:	1000041e 	bne	r2,zero,84519c <ip_getmoptions+0x84>
  84518c:	e0bff717 	ldw	r2,-36(fp)
  845190:	10800017 	ldw	r2,0(r2)
  845194:	1004c03a 	cmpne	r2,r2,zero
  845198:	1000031e 	bne	r2,zero,8451a8 <ip_getmoptions+0x90>
         *addr = AADDR;
  84519c:	e0bff817 	ldw	r2,-32(fp)
  8451a0:	10000015 	stw	zero,0(r2)
   switch (optname) 
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
      if (imo == NULL || imo->imo_multicast_netp == NULL)
  8451a4:	00000506 	br	8451bc <ip_getmoptions+0xa4>
         *addr = AADDR;
      else
         *addr = imo->imo_multicast_netp->n_ipaddr;
  8451a8:	e0bff717 	ldw	r2,-36(fp)
  8451ac:	10800017 	ldw	r2,0(r2)
  8451b0:	10c00a17 	ldw	r3,40(r2)
  8451b4:	e0bff817 	ldw	r2,-32(fp)
  8451b8:	10c00015 	stw	r3,0(r2)
      return (0);
  8451bc:	e03ffe15 	stw	zero,-8(fp)
  8451c0:	00002006 	br	845244 <ip_getmoptions+0x12c>

   case IP_MULTICAST_TTL:
      ttl = (u_char *)val;
  8451c4:	e0bffd17 	ldw	r2,-12(fp)
  8451c8:	e0bffa15 	stw	r2,-24(fp)
      if (imo == NULL)
  8451cc:	e0bff717 	ldw	r2,-36(fp)
  8451d0:	1004c03a 	cmpne	r2,r2,zero
  8451d4:	1000041e 	bne	r2,zero,8451e8 <ip_getmoptions+0xd0>
         *ttl = IP_DEFAULT_MULTICAST_TTL;
  8451d8:	e0fffa17 	ldw	r3,-24(fp)
  8451dc:	00800044 	movi	r2,1
  8451e0:	18800005 	stb	r2,0(r3)
  8451e4:	00000406 	br	8451f8 <ip_getmoptions+0xe0>
      else
         *ttl = imo->imo_multicast_ttl;
  8451e8:	e0bff717 	ldw	r2,-36(fp)
  8451ec:	10c00103 	ldbu	r3,4(r2)
  8451f0:	e0bffa17 	ldw	r2,-24(fp)
  8451f4:	10c00005 	stb	r3,0(r2)
      return (0);
  8451f8:	e03ffe15 	stw	zero,-8(fp)
  8451fc:	00001106 	br	845244 <ip_getmoptions+0x12c>

   case IP_MULTICAST_LOOP:
      loop = (u_char *)val;
  845200:	e0bffd17 	ldw	r2,-12(fp)
  845204:	e0bff915 	stw	r2,-28(fp)
      if (imo == NULL)
  845208:	e0bff717 	ldw	r2,-36(fp)
  84520c:	1004c03a 	cmpne	r2,r2,zero
  845210:	1000041e 	bne	r2,zero,845224 <ip_getmoptions+0x10c>
         *loop = IP_DEFAULT_MULTICAST_LOOP;
  845214:	e0fff917 	ldw	r3,-28(fp)
  845218:	00800044 	movi	r2,1
  84521c:	18800005 	stb	r2,0(r3)
  845220:	00000406 	br	845234 <ip_getmoptions+0x11c>
      else
         *loop = imo->imo_multicast_loop;
  845224:	e0bff717 	ldw	r2,-36(fp)
  845228:	10c00143 	ldbu	r3,5(r2)
  84522c:	e0bff917 	ldw	r2,-28(fp)
  845230:	10c00005 	stb	r3,0(r2)
      return (0);
  845234:	e03ffe15 	stw	zero,-8(fp)
  845238:	00000206 	br	845244 <ip_getmoptions+0x12c>

      default:
      return (EOPNOTSUPP);
  84523c:	008017c4 	movi	r2,95
  845240:	e0bffe15 	stw	r2,-8(fp)
  845244:	e0bffe17 	ldw	r2,-8(fp)
   }
}
  845248:	e037883a 	mov	sp,fp
  84524c:	df000017 	ldw	fp,0(sp)
  845250:	dec00104 	addi	sp,sp,4
  845254:	f800283a 	ret

00845258 <ip_freemoptions>:
 * RETURNS: 
 */

void
ip_freemoptions(struct ip_moptions * imo)
{
  845258:	defffc04 	addi	sp,sp,-16
  84525c:	dfc00315 	stw	ra,12(sp)
  845260:	df000215 	stw	fp,8(sp)
  845264:	df000204 	addi	fp,sp,8
  845268:	e13fff15 	stw	r4,-4(fp)
   u_short  i;

   if (imo != NULL) 
  84526c:	e0bfff17 	ldw	r2,-4(fp)
  845270:	1005003a 	cmpeq	r2,r2,zero
  845274:	1000141e 	bne	r2,zero,8452c8 <ip_freemoptions+0x70>
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
  845278:	e03ffe0d 	sth	zero,-8(fp)
  84527c:	00000b06 	br	8452ac <ip_freemoptions+0x54>
         in_delmulti(imo->imo_membership[i]);
  845280:	e0bffe0b 	ldhu	r2,-8(fp)
  845284:	e0ffff17 	ldw	r3,-4(fp)
  845288:	1085883a 	add	r2,r2,r2
  84528c:	1085883a 	add	r2,r2,r2
  845290:	10c5883a 	add	r2,r2,r3
  845294:	10800204 	addi	r2,r2,8
  845298:	11000017 	ldw	r4,0(r2)
  84529c:	08422500 	call	842250 <in_delmulti>
{
   u_short  i;

   if (imo != NULL) 
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
  8452a0:	e0bffe0b 	ldhu	r2,-8(fp)
  8452a4:	10800044 	addi	r2,r2,1
  8452a8:	e0bffe0d 	sth	r2,-8(fp)
  8452ac:	e0bfff17 	ldw	r2,-4(fp)
  8452b0:	1080018b 	ldhu	r2,6(r2)
  8452b4:	10ffffcc 	andi	r3,r2,65535
  8452b8:	e0bffe0b 	ldhu	r2,-8(fp)
  8452bc:	10fff036 	bltu	r2,r3,845280 <ip_freemoptions+0x28>
         in_delmulti(imo->imo_membership[i]);
      npfree(imo);
  8452c0:	e13fff17 	ldw	r4,-4(fp)
  8452c4:	082b3000 	call	82b300 <npfree>
   }
}
  8452c8:	e037883a 	mov	sp,fp
  8452cc:	dfc00117 	ldw	ra,4(sp)
  8452d0:	df000017 	ldw	fp,0(sp)
  8452d4:	dec00204 	addi	sp,sp,8
  8452d8:	f800283a 	ret

008452dc <u_mctest_init>:
 *
 * RETURNS: 
 */

void u_mctest_init()
{
  8452dc:	defffe04 	addi	sp,sp,-8
  8452e0:	dfc00115 	stw	ra,4(sp)
  8452e4:	df000015 	stw	fp,0(sp)
  8452e8:	d839883a 	mov	fp,sp
   printf("mctest init called\n");
  8452ec:	01002174 	movhi	r4,133
  8452f0:	21393304 	addi	r4,r4,-6964
  8452f4:	08077600 	call	807760 <puts>
// altera changes end (cadler@altera.com)
   install_menu(u_mctest_menu);
// altera changes begin (cadler@altera.com)
#endif //IN_MENUS
// altera changes end (cadler@altera.com)
}
  8452f8:	e037883a 	mov	sp,fp
  8452fc:	dfc00117 	ldw	ra,4(sp)
  845300:	df000017 	ldw	fp,0(sp)
  845304:	dec00204 	addi	sp,sp,8
  845308:	f800283a 	ret

0084530c <u_mctest_run>:
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
  84530c:	defede04 	addi	sp,sp,-1160
  845310:	dfc12115 	stw	ra,1156(sp)
  845314:	df012015 	stw	fp,1152(sp)
  845318:	df012004 	addi	fp,sp,1152
  84531c:	e13fff15 	stw	r4,-4(fp)
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
  845320:	00c02174 	movhi	r3,133
  845324:	18f9df04 	addi	r3,r3,-6276
  845328:	18800017 	ldw	r2,0(r3)
  84532c:	e0bff215 	stw	r2,-56(fp)
  845330:	18800117 	ldw	r2,4(r3)
  845334:	e0bff315 	stw	r2,-52(fp)
  845338:	18800217 	ldw	r2,8(r3)
  84533c:	e0bff415 	stw	r2,-48(fp)
  845340:	18800317 	ldw	r2,12(r3)
  845344:	e0bff515 	stw	r2,-44(fp)
  845348:	18800417 	ldw	r2,16(r3)
  84534c:	e0bff615 	stw	r2,-40(fp)
  845350:	18800517 	ldw	r2,20(r3)
  845354:	e0bff715 	stw	r2,-36(fp)
  845358:	18800617 	ldw	r2,24(r3)
  84535c:	e0bff815 	stw	r2,-32(fp)
  845360:	1880070b 	ldhu	r2,28(r3)
  845364:	e0bff90d 	sth	r2,-28(fp)
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
  845368:	01000084 	movi	r4,2
  84536c:	01400084 	movi	r5,2
  845370:	000d883a 	mov	r6,zero
  845374:	082d84c0 	call	82d84c <t_socket>
  845378:	e0bee515 	stw	r2,-1132(fp)

   if (s == INVALID_SOCKET) 
  84537c:	e0bee517 	ldw	r2,-1132(fp)
  845380:	10bfffd8 	cmpnei	r2,r2,-1
  845384:	1000091e 	bne	r2,zero,8453ac <u_mctest_run+0xa0>
   {
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
  845388:	e13ee517 	ldw	r4,-1132(fp)
  84538c:	082ef600 	call	82ef60 <t_errno>
  845390:	100d883a 	mov	r6,r2
  845394:	e13fff17 	ldw	r4,-4(fp)
  845398:	01402174 	movhi	r5,133
  84539c:	29793804 	addi	r5,r5,-6944
  8453a0:	0825c540 	call	825c54 <ns_printf>
      exit(1);
  8453a4:	01000044 	movi	r4,1
  8453a8:	084a3840 	call	84a384 <exit>
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
  8453ac:	00800044 	movi	r2,1
  8453b0:	e0bffa15 	stw	r2,-24(fp)
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
  8453b4:	e1fffa04 	addi	r7,fp,-24
  8453b8:	00800104 	movi	r2,4
  8453bc:	d8800015 	stw	r2,0(sp)
  8453c0:	e13ee517 	ldw	r4,-1132(fp)
  8453c4:	017fffc4 	movi	r5,-1
  8453c8:	01800104 	movi	r6,4
  8453cc:	082e3000 	call	82e300 <t_setsockopt>
  8453d0:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
  8453d4:	e0bee317 	ldw	r2,-1140(fp)
  8453d8:	10bfffd8 	cmpnei	r2,r2,-1
  8453dc:	1000071e 	bne	r2,zero,8453fc <u_mctest_run+0xf0>
   {
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
  8453e0:	e13ee517 	ldw	r4,-1132(fp)
  8453e4:	082ef600 	call	82ef60 <t_errno>
  8453e8:	100d883a 	mov	r6,r2
  8453ec:	e13fff17 	ldw	r4,-4(fp)
  8453f0:	01402174 	movhi	r5,133
  8453f4:	29793f04 	addi	r5,r5,-6916
  8453f8:	0825c540 	call	825c54 <ns_printf>
       t_errno(s));
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
  8453fc:	00800084 	movi	r2,2
  845400:	e0bee60d 	sth	r2,-1128(fp)
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
  845404:	e03ee715 	stw	zero,-1124(fp)
   stLocal.sin_port =   htons(TEST_PORT);
  845408:	00a00344 	movi	r2,-32755
  84540c:	e0bee68d 	sth	r2,-1126(fp)
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
  845410:	e17ee604 	addi	r5,fp,-1128
  845414:	e13ee517 	ldw	r4,-1132(fp)
  845418:	01800404 	movi	r6,16
  84541c:	082d8dc0 	call	82d8dc <t_bind>
  845420:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
  845424:	e0bee317 	ldw	r2,-1140(fp)
  845428:	10bfffd8 	cmpnei	r2,r2,-1
  84542c:	1000061e 	bne	r2,zero,845448 <u_mctest_run+0x13c>
   {
      printf ("t_bind() failed, Err: %d\n",
  845430:	e13ee517 	ldw	r4,-1132(fp)
  845434:	082ef600 	call	82ef60 <t_errno>
  845438:	100b883a 	mov	r5,r2
  84543c:	01002174 	movhi	r4,133
  845440:	21394b04 	addi	r4,r4,-6868
  845444:	08076480 	call	807648 <printf>
       t_errno(s));
   }

   /* join the multicast group. TEST_ADDR */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR);
  845448:	e13fff17 	ldw	r4,-4(fp)
  84544c:	01402174 	movhi	r5,133
  845450:	29795204 	addi	r5,r5,-6840
  845454:	01802174 	movhi	r6,133
  845458:	31b95a04 	addi	r6,r6,-6808
  84545c:	0825c540 	call	825c54 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
  845460:	01002174 	movhi	r4,133
  845464:	21395a04 	addi	r4,r4,-6808
  845468:	084643c0 	call	84643c <inet_addr>
  84546c:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
  845470:	00803934 	movhi	r2,228
  845474:	10a6dc04 	addi	r2,r2,-25744
  845478:	10800a17 	ldw	r2,40(r2)
  84547c:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
  845480:	e1fffb04 	addi	r7,fp,-20
  845484:	00800204 	movi	r2,8
  845488:	d8800015 	stw	r2,0(sp)
  84548c:	e13ee517 	ldw	r4,-1132(fp)
  845490:	000b883a 	mov	r5,zero
  845494:	01800304 	movi	r6,12
  845498:	082e3000 	call	82e300 <t_setsockopt>
  84549c:	e0bee315 	stw	r2,-1140(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
  8454a0:	e0bee317 	ldw	r2,-1140(fp)
  8454a4:	10bfffd8 	cmpnei	r2,r2,-1
  8454a8:	1000071e 	bne	r2,zero,8454c8 <u_mctest_run+0x1bc>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
  8454ac:	e13ee517 	ldw	r4,-1132(fp)
  8454b0:	082ef600 	call	82ef60 <t_errno>
  8454b4:	100d883a 	mov	r6,r2
  8454b8:	e13fff17 	ldw	r4,-4(fp)
  8454bc:	01402174 	movhi	r5,133
  8454c0:	29795d04 	addi	r5,r5,-6796
  8454c4:	0825c540 	call	825c54 <ns_printf>
                     t_errno(s));
   } 
   tk_yield();
  8454c8:	08266b40 	call	8266b4 <tk_yield>

   /* join the multicast group. TEST_ADDR1 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR1);
  8454cc:	e13fff17 	ldw	r4,-4(fp)
  8454d0:	01402174 	movhi	r5,133
  8454d4:	29795204 	addi	r5,r5,-6840
  8454d8:	01802174 	movhi	r6,133
  8454dc:	31b96a04 	addi	r6,r6,-6744
  8454e0:	0825c540 	call	825c54 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR1);
  8454e4:	01002174 	movhi	r4,133
  8454e8:	21396a04 	addi	r4,r4,-6744
  8454ec:	084643c0 	call	84643c <inet_addr>
  8454f0:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
  8454f4:	00803934 	movhi	r2,228
  8454f8:	10a6dc04 	addi	r2,r2,-25744
  8454fc:	10800a17 	ldw	r2,40(r2)
  845500:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
  845504:	e1fffb04 	addi	r7,fp,-20
  845508:	00800204 	movi	r2,8
  84550c:	d8800015 	stw	r2,0(sp)
  845510:	e13ee517 	ldw	r4,-1132(fp)
  845514:	000b883a 	mov	r5,zero
  845518:	01800304 	movi	r6,12
  84551c:	082e3000 	call	82e300 <t_setsockopt>
  845520:	e0bee315 	stw	r2,-1140(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
  845524:	e0bee317 	ldw	r2,-1140(fp)
  845528:	10bfffd8 	cmpnei	r2,r2,-1
  84552c:	1000071e 	bne	r2,zero,84554c <u_mctest_run+0x240>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
  845530:	e13ee517 	ldw	r4,-1132(fp)
  845534:	082ef600 	call	82ef60 <t_errno>
  845538:	100d883a 	mov	r6,r2
  84553c:	e13fff17 	ldw	r4,-4(fp)
  845540:	01402174 	movhi	r5,133
  845544:	29795d04 	addi	r5,r5,-6796
  845548:	0825c540 	call	825c54 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
  84554c:	08266b40 	call	8266b4 <tk_yield>

   /* join the multicast group. TEST_ADDR2 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR2);
  845550:	e13fff17 	ldw	r4,-4(fp)
  845554:	01402174 	movhi	r5,133
  845558:	29795204 	addi	r5,r5,-6840
  84555c:	01802174 	movhi	r6,133
  845560:	31b96d04 	addi	r6,r6,-6732
  845564:	0825c540 	call	825c54 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR2);
  845568:	01002174 	movhi	r4,133
  84556c:	21396d04 	addi	r4,r4,-6732
  845570:	084643c0 	call	84643c <inet_addr>
  845574:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
  845578:	00803934 	movhi	r2,228
  84557c:	10a6dc04 	addi	r2,r2,-25744
  845580:	10800a17 	ldw	r2,40(r2)
  845584:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
  845588:	e1fffb04 	addi	r7,fp,-20
  84558c:	00800204 	movi	r2,8
  845590:	d8800015 	stw	r2,0(sp)
  845594:	e13ee517 	ldw	r4,-1132(fp)
  845598:	000b883a 	mov	r5,zero
  84559c:	01800304 	movi	r6,12
  8455a0:	082e3000 	call	82e300 <t_setsockopt>
  8455a4:	e0bee315 	stw	r2,-1140(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
  8455a8:	e0bee317 	ldw	r2,-1140(fp)
  8455ac:	10bfffd8 	cmpnei	r2,r2,-1
  8455b0:	1000071e 	bne	r2,zero,8455d0 <u_mctest_run+0x2c4>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
  8455b4:	e13ee517 	ldw	r4,-1132(fp)
  8455b8:	082ef600 	call	82ef60 <t_errno>
  8455bc:	100d883a 	mov	r6,r2
  8455c0:	e13fff17 	ldw	r4,-4(fp)
  8455c4:	01402174 	movhi	r5,133
  8455c8:	29795d04 	addi	r5,r5,-6796
  8455cc:	0825c540 	call	825c54 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
  8455d0:	08266b40 	call	8266b4 <tk_yield>

   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
  8455d4:	00800084 	movi	r2,2
  8455d8:	e0bffd05 	stb	r2,-12(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
  8455dc:	e1fffd04 	addi	r7,fp,-12
  8455e0:	00800044 	movi	r2,1
  8455e4:	d8800015 	stw	r2,0(sp)
  8455e8:	e13ee517 	ldw	r4,-1132(fp)
  8455ec:	000b883a 	mov	r5,zero
  8455f0:	01800284 	movi	r6,10
  8455f4:	082e3000 	call	82e300 <t_setsockopt>
  8455f8:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
  8455fc:	e0bee317 	ldw	r2,-1140(fp)
  845600:	10bfffd8 	cmpnei	r2,r2,-1
  845604:	1000071e 	bne	r2,zero,845624 <u_mctest_run+0x318>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
  845608:	e13ee517 	ldw	r4,-1132(fp)
  84560c:	082ef600 	call	82ef60 <t_errno>
  845610:	100d883a 	mov	r6,r2
  845614:	e13fff17 	ldw	r4,-4(fp)
  845618:	01402174 	movhi	r5,133
  84561c:	29797004 	addi	r5,r5,-6720
  845620:	0825c540 	call	825c54 <ns_printf>
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
  845624:	00800044 	movi	r2,1
  845628:	e0bffd05 	stb	r2,-12(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
  84562c:	e1fffd04 	addi	r7,fp,-12
  845630:	00800044 	movi	r2,1
  845634:	d8800015 	stw	r2,0(sp)
  845638:	e13ee517 	ldw	r4,-1132(fp)
  84563c:	000b883a 	mov	r5,zero
  845640:	018002c4 	movi	r6,11
  845644:	082e3000 	call	82e300 <t_setsockopt>
  845648:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
  84564c:	e0bee317 	ldw	r2,-1140(fp)
  845650:	10bfffd8 	cmpnei	r2,r2,-1
  845654:	1000071e 	bne	r2,zero,845674 <u_mctest_run+0x368>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_LOOP failed, Err: %d\n",
  845658:	e13ee517 	ldw	r4,-1132(fp)
  84565c:	082ef600 	call	82ef60 <t_errno>
  845660:	100d883a 	mov	r6,r2
  845664:	e13fff17 	ldw	r4,-4(fp)
  845668:	01402174 	movhi	r5,133
  84566c:	29797d04 	addi	r5,r5,-6668
  845670:	0825c540 	call	825c54 <ns_printf>
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
  845674:	00800084 	movi	r2,2
  845678:	e0beea0d 	sth	r2,-1112(fp)
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
  84567c:	01002174 	movhi	r4,133
  845680:	21396a04 	addi	r4,r4,-6744
  845684:	084643c0 	call	84643c <inet_addr>
  845688:	e0beeb15 	stw	r2,-1108(fp)
   stTo.sin_port =        htons(TEST_PORT);
  84568c:	00a00344 	movi	r2,-32755
  845690:	e0beea8d 	sth	r2,-1110(fp)
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
  845694:	e13fff17 	ldw	r4,-4(fp)
  845698:	01402174 	movhi	r5,133
  84569c:	29798a04 	addi	r5,r5,-6616
  8456a0:	01802174 	movhi	r6,133
  8456a4:	31b96a04 	addi	r6,r6,-6744
  8456a8:	0825c540 	call	825c54 <ns_printf>
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
  8456ac:	e03ee415 	stw	zero,-1136(fp)
  8456b0:	00008506 	br	8458c8 <u_mctest_run+0x5bc>
   {
      static int iCounter = 1;

      /* send to the multicast address */
      sprintf(&achOut[16], "%d", iCounter++);
  8456b4:	e0bff204 	addi	r2,fp,-56
  8456b8:	11000404 	addi	r4,r2,16
  8456bc:	d0a05717 	ldw	r2,-32420(gp)
  8456c0:	100d883a 	mov	r6,r2
  8456c4:	10800044 	addi	r2,r2,1
  8456c8:	d0a05715 	stw	r2,-32420(gp)
  8456cc:	01402174 	movhi	r5,133
  8456d0:	29799904 	addi	r5,r5,-6556
  8456d4:	0807b340 	call	807b34 <sprintf>
      iRet = t_sendto(s, achOut, sizeof(achOut), 0, (struct sockaddr*)&stTo,
  8456d8:	e0beea04 	addi	r2,fp,-1112
  8456dc:	e17ff204 	addi	r5,fp,-56
  8456e0:	d8800015 	stw	r2,0(sp)
  8456e4:	00800404 	movi	r2,16
  8456e8:	d8800115 	stw	r2,4(sp)
  8456ec:	e13ee517 	ldw	r4,-1132(fp)
  8456f0:	01800784 	movi	r6,30
  8456f4:	000f883a 	mov	r7,zero
  8456f8:	082e8c00 	call	82e8c0 <t_sendto>
  8456fc:	e0bee315 	stw	r2,-1140(fp)
                      sizeof(struct sockaddr_in));
      if (iRet < 0) 
  845700:	e0bee317 	ldw	r2,-1140(fp)
  845704:	1004403a 	cmpge	r2,r2,zero
  845708:	1000081e 	bne	r2,zero,84572c <u_mctest_run+0x420>
      {
         /*      perror("sendto() failed\n"); */
         ns_printf (pio,"t_sendto() failed, Error: %d\n", t_errno(s));
  84570c:	e13ee517 	ldw	r4,-1132(fp)
  845710:	082ef600 	call	82ef60 <t_errno>
  845714:	100d883a 	mov	r6,r2
  845718:	e13fff17 	ldw	r4,-4(fp)
  84571c:	01402174 	movhi	r5,133
  845720:	29799a04 	addi	r5,r5,-6552
  845724:	0825c540 	call	825c54 <ns_printf>
         /*     exit(1); */
         goto exitloop;
  845728:	00006a06 	br	8458d4 <u_mctest_run+0x5c8>
      }

      /* make the socket non-blocking */
      iTmp = 1;
  84572c:	00800044 	movi	r2,1
  845730:	e0bffa15 	stw	r2,-24(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
  845734:	e1fffa04 	addi	r7,fp,-24
  845738:	00800104 	movi	r2,4
  84573c:	d8800015 	stw	r2,0(sp)
  845740:	e13ee517 	ldw	r4,-1132(fp)
  845744:	017fffc4 	movi	r5,-1
  845748:	01840584 	movi	r6,4118
  84574c:	082e3000 	call	82e300 <t_setsockopt>
  845750:	e0bee315 	stw	r2,-1140(fp)
      if (iRet == SOCKET_ERROR) 
  845754:	e0bee317 	ldw	r2,-1140(fp)
  845758:	10bfffd8 	cmpnei	r2,r2,-1
  84575c:	1000071e 	bne	r2,zero,84577c <u_mctest_run+0x470>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (1) failed, Err: %d\n",
  845760:	e13ee517 	ldw	r4,-1132(fp)
  845764:	082ef600 	call	82ef60 <t_errno>
  845768:	100d883a 	mov	r6,r2
  84576c:	e13fff17 	ldw	r4,-4(fp)
  845770:	01402174 	movhi	r5,133
  845774:	2979a204 	addi	r5,r5,-6520
  845778:	0825c540 	call	825c54 <ns_printf>
                        t_errno(s));
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);
  84577c:	00802174 	movhi	r2,133
  845780:	10832604 	addi	r2,r2,3224
  845784:	10800017 	ldw	r2,0(r2)
  845788:	1084e204 	addi	r2,r2,5000
  84578c:	e0bee215 	stw	r2,-1144(fp)

      while (cticks < endtime)
  845790:	00003206 	br	84585c <u_mctest_run+0x550>
      {
         int sa_size = sizeof(struct sockaddr_in);
  845794:	00800404 	movi	r2,16
  845798:	e0bffe15 	stw	r2,-8(fp)
         tk_yield();
  84579c:	08266b40 	call	8266b4 <tk_yield>

         iRet = t_recvfrom(s, achIn, BUFSIZE, 0, (struct sockaddr*)&stFrom, &sa_size);
  8457a0:	e0beee04 	addi	r2,fp,-1096
  8457a4:	e17ef204 	addi	r5,fp,-1080
  8457a8:	d8800015 	stw	r2,0(sp)
  8457ac:	e0bffe04 	addi	r2,fp,-8
  8457b0:	d8800115 	stw	r2,4(sp)
  8457b4:	e13ee517 	ldw	r4,-1132(fp)
  8457b8:	01810004 	movi	r6,1024
  8457bc:	000f883a 	mov	r7,zero
  8457c0:	082e7700 	call	82e770 <t_recvfrom>
  8457c4:	e0bee315 	stw	r2,-1140(fp)
         if (iRet < 0) 
  8457c8:	e0bee317 	ldw	r2,-1140(fp)
  8457cc:	1004403a 	cmpge	r2,r2,zero
  8457d0:	10000c1e 	bne	r2,zero,845804 <u_mctest_run+0x4f8>
         {
            if (t_errno(s) != EWOULDBLOCK)
  8457d4:	e13ee517 	ldw	r4,-1132(fp)
  8457d8:	082ef600 	call	82ef60 <t_errno>
  8457dc:	108002e0 	cmpeqi	r2,r2,11
  8457e0:	1000081e 	bne	r2,zero,845804 <u_mctest_run+0x4f8>
            {
               /*      perror("recvfrom() failed\n"); */
               ns_printf (pio,"t_recvfrom() failed, Error: %d\n", t_errno(s));
  8457e4:	e13ee517 	ldw	r4,-1132(fp)
  8457e8:	082ef600 	call	82ef60 <t_errno>
  8457ec:	100d883a 	mov	r6,r2
  8457f0:	e13fff17 	ldw	r4,-4(fp)
  8457f4:	01402174 	movhi	r5,133
  8457f8:	2979ae04 	addi	r5,r5,-6472
  8457fc:	0825c540 	call	825c54 <ns_printf>
               /*     exit(1); */
               goto exitloop;
  845800:	00003406 	br	8458d4 <u_mctest_run+0x5c8>
            }
         }
         if (iRet > 0)
  845804:	e0bee317 	ldw	r2,-1140(fp)
  845808:	10800050 	cmplti	r2,r2,1
  84580c:	1000131e 	bne	r2,zero,84585c <u_mctest_run+0x550>
         {
            ns_printf(pio,"From host:%s port:%d, %s\n",
  845810:	e13eef17 	ldw	r4,-1092(fp)
  845814:	082588c0 	call	82588c <print_ipad>
  845818:	100d883a 	mov	r6,r2
  84581c:	e0beee8b 	ldhu	r2,-1094(fp)
  845820:	10bfffcc 	andi	r2,r2,65535
  845824:	1004d23a 	srli	r2,r2,8
  845828:	10bfffcc 	andi	r2,r2,65535
  84582c:	10c03fcc 	andi	r3,r2,255
  845830:	e0beee8b 	ldhu	r2,-1094(fp)
  845834:	10bfffcc 	andi	r2,r2,65535
  845838:	1004923a 	slli	r2,r2,8
  84583c:	10bfc00c 	andi	r2,r2,65280
  845840:	188eb03a 	or	r7,r3,r2
  845844:	e0bef204 	addi	r2,fp,-1080
  845848:	d8800015 	stw	r2,0(sp)
  84584c:	e13fff17 	ldw	r4,-4(fp)
  845850:	01402174 	movhi	r5,133
  845854:	2979b604 	addi	r5,r5,-6440
  845858:	0825c540 	call	825c54 <ns_printf>
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);

      while (cticks < endtime)
  84585c:	00802174 	movhi	r2,133
  845860:	10832604 	addi	r2,r2,3224
  845864:	10c00017 	ldw	r3,0(r2)
  845868:	e0bee217 	ldw	r2,-1144(fp)
  84586c:	18bfc936 	bltu	r3,r2,845794 <u_mctest_run+0x488>
             ntohs(stFrom.sin_port), achIn);
         }
      }   /* end while (cticks...) */

      /* make the socket blocking */
      cTmp = 0;
  845870:	e03ffd05 	stb	zero,-12(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
  845874:	e1fffd04 	addi	r7,fp,-12
  845878:	00800044 	movi	r2,1
  84587c:	d8800015 	stw	r2,0(sp)
  845880:	e13ee517 	ldw	r4,-1132(fp)
  845884:	017fffc4 	movi	r5,-1
  845888:	01840584 	movi	r6,4118
  84588c:	082e3000 	call	82e300 <t_setsockopt>
  845890:	e0bee315 	stw	r2,-1140(fp)
      if (iRet == SOCKET_ERROR) 
  845894:	e0bee317 	ldw	r2,-1140(fp)
  845898:	10bfffd8 	cmpnei	r2,r2,-1
  84589c:	1000071e 	bne	r2,zero,8458bc <u_mctest_run+0x5b0>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (0) failed, Err: %d\n",
  8458a0:	e13ee517 	ldw	r4,-1132(fp)
  8458a4:	082ef600 	call	82ef60 <t_errno>
  8458a8:	100d883a 	mov	r6,r2
  8458ac:	e13fff17 	ldw	r4,-4(fp)
  8458b0:	01402174 	movhi	r5,133
  8458b4:	2979bd04 	addi	r5,r5,-6412
  8458b8:	0825c540 	call	825c54 <ns_printf>
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
   stTo.sin_port =        htons(TEST_PORT);
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
  8458bc:	e0bee417 	ldw	r2,-1136(fp)
  8458c0:	10800044 	addi	r2,r2,1
  8458c4:	e0bee415 	stw	r2,-1136(fp)
  8458c8:	e0bee417 	ldw	r2,-1136(fp)
  8458cc:	108000d0 	cmplti	r2,r2,3
  8458d0:	103f781e 	bne	r2,zero,8456b4 <u_mctest_run+0x3a8>
      }
   }   /* end for(;;) */

exitloop:
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
  8458d4:	01002174 	movhi	r4,133
  8458d8:	21395a04 	addi	r4,r4,-6808
  8458dc:	084643c0 	call	84643c <inet_addr>
  8458e0:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
  8458e4:	00803934 	movhi	r2,228
  8458e8:	10a6dc04 	addi	r2,r2,-25744
  8458ec:	10800a17 	ldw	r2,40(r2)
  8458f0:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
  8458f4:	e1fffb04 	addi	r7,fp,-20
  8458f8:	00800204 	movi	r2,8
  8458fc:	d8800015 	stw	r2,0(sp)
  845900:	e13ee517 	ldw	r4,-1132(fp)
  845904:	000b883a 	mov	r5,zero
  845908:	01800344 	movi	r6,13
  84590c:	082e3000 	call	82e300 <t_setsockopt>
  845910:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
  845914:	e0bee317 	ldw	r2,-1140(fp)
  845918:	10bfffd8 	cmpnei	r2,r2,-1
  84591c:	1000071e 	bne	r2,zero,84593c <u_mctest_run+0x630>
   {
      ns_printf (pio,"t_setsockopt() IP_DROP_MEMBERSHIP failed, Err: %d\n",
  845920:	e13ee517 	ldw	r4,-1132(fp)
  845924:	082ef600 	call	82ef60 <t_errno>
  845928:	100d883a 	mov	r6,r2
  84592c:	e13fff17 	ldw	r4,-4(fp)
  845930:	01402174 	movhi	r5,133
  845934:	2979c904 	addi	r5,r5,-6364
  845938:	0825c540 	call	825c54 <ns_printf>
   {
      ns_printf (pio,"t_shutdown failed.  Err: %d\n", t_errno(s));
   }
#endif

   iRet = t_socketclose(s);
  84593c:	e13ee517 	ldw	r4,-1132(fp)
  845940:	082edf80 	call	82edf8 <t_socketclose>
  845944:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
  845948:	e0bee317 	ldw	r2,-1140(fp)
  84594c:	10bfffd8 	cmpnei	r2,r2,-1
  845950:	1000071e 	bne	r2,zero,845970 <u_mctest_run+0x664>
   {
      ns_printf (pio,"t_socketclose() failed.  Err: %d\n", t_errno(s));
  845954:	e13ee517 	ldw	r4,-1132(fp)
  845958:	082ef600 	call	82ef60 <t_errno>
  84595c:	100d883a 	mov	r6,r2
  845960:	e13fff17 	ldw	r4,-4(fp)
  845964:	01402174 	movhi	r5,133
  845968:	2979d604 	addi	r5,r5,-6312
  84596c:	0825c540 	call	825c54 <ns_printf>
   }

   return(0);
  845970:	0005883a 	mov	r2,zero
}  /* end main() */  
  845974:	e037883a 	mov	sp,fp
  845978:	dfc00117 	ldw	ra,4(sp)
  84597c:	df000017 	ldw	fp,0(sp)
  845980:	dec00204 	addi	sp,sp,8
  845984:	f800283a 	ret

00845988 <dhc_setup>:
 * RETURNS: void
 */

void
dhc_setup(void)
{  
  845988:	defff604 	addi	sp,sp,-40
  84598c:	dfc00915 	stw	ra,36(sp)
  845990:	df000815 	stw	fp,32(sp)
  845994:	df000804 	addi	fp,sp,32
   int      iface;
   ulong    dhcp_started;
   ip_addr  dhcp_saveaddr[STATIC_NETS];
   int      e;
   int      dhcnets = 0;   /* number of nets doing DHCP */
  845998:	e03ff815 	stw	zero,-32(fp)

   e = dhc_init();
  84599c:	08269780 	call	826978 <dhc_init>
  8459a0:	e0bff915 	stw	r2,-28(fp)

   if (e)
  8459a4:	e0bff917 	ldw	r2,-28(fp)
  8459a8:	1005003a 	cmpeq	r2,r2,zero
  8459ac:	1000051e 	bne	r2,zero,8459c4 <dhc_setup+0x3c>
   {
      printf("Error starting DHCP client code.\n");
  8459b0:	01002174 	movhi	r4,133
  8459b4:	2139e704 	addi	r4,r4,-6244
  8459b8:	08077600 	call	807760 <puts>
      netexit(1);
  8459bc:	01000044 	movi	r4,1
  8459c0:	084246c0 	call	84246c <netexit>
   }

   dhcp_started = cticks;  /* init timeout */
  8459c4:	00802174 	movhi	r2,133
  8459c8:	10832604 	addi	r2,r2,3224
  8459cc:	10800017 	ldw	r2,0(r2)
  8459d0:	e0bffa15 	stw	r2,-24(fp)

   for (iface = 0; iface < STATIC_NETS; iface++)
  8459d4:	e03ffb15 	stw	zero,-20(fp)
  8459d8:	00005106 	br	845b20 <dhc_setup+0x198>
   {
      if (!nets[iface])
  8459dc:	e0bffb17 	ldw	r2,-20(fp)
  8459e0:	00c03934 	movhi	r3,228
  8459e4:	18e79c04 	addi	r3,r3,-24976
  8459e8:	1085883a 	add	r2,r2,r2
  8459ec:	1085883a 	add	r2,r2,r2
  8459f0:	10c5883a 	add	r2,r2,r3
  8459f4:	10800017 	ldw	r2,0(r2)
  8459f8:	1005003a 	cmpeq	r2,r2,zero
  8459fc:	1000451e 	bne	r2,zero,845b14 <dhc_setup+0x18c>
#ifdef INCLUDE_NVPARMS
      if (inet_nvparms.ifs[iface].client_dhcp)
         nets[iface]->n_flags |= NF_DHCPC ; /* use DHCP Client on this iface */
#endif   /* INCLUDE_NVPARMS */

      if (!(nets[iface]->n_flags & NF_DHCPC))
  845a00:	e0bffb17 	ldw	r2,-20(fp)
  845a04:	00c03934 	movhi	r3,228
  845a08:	18e79c04 	addi	r3,r3,-24976
  845a0c:	1085883a 	add	r2,r2,r2
  845a10:	1085883a 	add	r2,r2,r2
  845a14:	10c5883a 	add	r2,r2,r3
  845a18:	10800017 	ldw	r2,0(r2)
  845a1c:	10802a17 	ldw	r2,168(r2)
  845a20:	1080400c 	andi	r2,r2,256
  845a24:	1005003a 	cmpeq	r2,r2,zero
  845a28:	10003a1e 	bne	r2,zero,845b14 <dhc_setup+0x18c>
         continue;

      /* If callback is not already in use (by AutoIP) grab it for
       * our printf routine.
       */
      if(dhc_states[iface].callback == NULL)
  845a2c:	e0bffb17 	ldw	r2,-20(fp)
  845a30:	00c03934 	movhi	r3,228
  845a34:	18e7c204 	addi	r3,r3,-24824
  845a38:	10800f24 	muli	r2,r2,60
  845a3c:	10c5883a 	add	r2,r2,r3
  845a40:	10800e04 	addi	r2,r2,56
  845a44:	10800017 	ldw	r2,0(r2)
  845a48:	1004c03a 	cmpne	r2,r2,zero
  845a4c:	1000041e 	bne	r2,zero,845a60 <dhc_setup+0xd8>
      {
         dhc_set_callback(iface, dhc_main_ipset);
  845a50:	e13ffb17 	ldw	r4,-20(fp)
  845a54:	01402134 	movhi	r5,132
  845a58:	29570404 	addi	r5,r5,23568
  845a5c:	0826a340 	call	826a34 <dhc_set_callback>
      }

      /* start DHCP on the iface - first save the default address */
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;
  845a60:	e13ffb17 	ldw	r4,-20(fp)
  845a64:	e0bffb17 	ldw	r2,-20(fp)
  845a68:	00c03934 	movhi	r3,228
  845a6c:	18e79c04 	addi	r3,r3,-24976
  845a70:	1085883a 	add	r2,r2,r2
  845a74:	1085883a 	add	r2,r2,r2
  845a78:	10c5883a 	add	r2,r2,r3
  845a7c:	10800017 	ldw	r2,0(r2)
  845a80:	10c00a17 	ldw	r3,40(r2)
  845a84:	2105883a 	add	r2,r4,r4
  845a88:	1085883a 	add	r2,r2,r2
  845a8c:	e13ff804 	addi	r4,fp,-32
  845a90:	1105883a 	add	r2,r2,r4
  845a94:	10800404 	addi	r2,r2,16
  845a98:	10c00015 	stw	r3,0(r2)

      if (dhcp_saveaddr[iface] == 0L)  /* see if there is a default */
  845a9c:	e0bffb17 	ldw	r2,-20(fp)
  845aa0:	1085883a 	add	r2,r2,r2
  845aa4:	1085883a 	add	r2,r2,r2
  845aa8:	e0fff804 	addi	r3,fp,-32
  845aac:	10c5883a 	add	r2,r2,r3
  845ab0:	10800404 	addi	r2,r2,16
  845ab4:	10800017 	ldw	r2,0(r2)
  845ab8:	1004c03a 	cmpne	r2,r2,zero
  845abc:	1000041e 	bne	r2,zero,845ad0 <dhc_setup+0x148>
         dhc_state_init(iface, TRUE);  /* Put DHCPClient in INIT state */
  845ac0:	e13ffb17 	ldw	r4,-20(fp)
  845ac4:	01400044 	movi	r5,1
  845ac8:	08296140 	call	829614 <dhc_state_init>
  845acc:	00000306 	br	845adc <dhc_setup+0x154>
      else
         dhc_state_init(iface, FALSE); /* Put DHCPClient in INIT-REBOOT state */
  845ad0:	e13ffb17 	ldw	r4,-20(fp)
  845ad4:	000b883a 	mov	r5,zero
  845ad8:	08296140 	call	829614 <dhc_state_init>

      e=dhc_second();                  /* To send the DISCOVER/REQUEST pkt */
  845adc:	0828e200 	call	828e20 <dhc_second>
  845ae0:	e0bff915 	stw	r2,-28(fp)
      if (e)
  845ae4:	e0bff917 	ldw	r2,-28(fp)
  845ae8:	1005003a 	cmpeq	r2,r2,zero
  845aec:	1000061e 	bne	r2,zero,845b08 <dhc_setup+0x180>
      {
         printf("Error sending DHCP packet on iface %d.\n", iface);
  845af0:	01002174 	movhi	r4,133
  845af4:	2139f004 	addi	r4,r4,-6208
  845af8:	e17ffb17 	ldw	r5,-20(fp)
  845afc:	08076480 	call	807648 <printf>
         netexit(1);
  845b00:	01000044 	movi	r4,1
  845b04:	084246c0 	call	84246c <netexit>
      /* If we are not using Auto IP then we want to block below waiting
       * for DHCP completion. If we are using Auto IP then we want to
       * return and let the Auto IP code handle the DHCP completion.
       * "dhcnets" is a flag which allows this.
       */
      dhcnets++;
  845b08:	e0bff817 	ldw	r2,-32(fp)
  845b0c:	10800044 	addi	r2,r2,1
  845b10:	e0bff815 	stw	r2,-32(fp)
      netexit(1);
   }

   dhcp_started = cticks;  /* init timeout */

   for (iface = 0; iface < STATIC_NETS; iface++)
  845b14:	e0bffb17 	ldw	r2,-20(fp)
  845b18:	10800044 	addi	r2,r2,1
  845b1c:	e0bffb15 	stw	r2,-20(fp)
  845b20:	e0bffb17 	ldw	r2,-20(fp)
  845b24:	10800110 	cmplti	r2,r2,4
  845b28:	103fac1e 	bne	r2,zero,8459dc <dhc_setup+0x54>
       */
      dhcnets++;
#endif
   }

   if(dhcnets == 0)  /* no nets doing DHCP? */
  845b2c:	e0bff817 	ldw	r2,-32(fp)
  845b30:	1005003a 	cmpeq	r2,r2,zero
  845b34:	1000311e 	bne	r2,zero,845bfc <dhc_setup+0x274>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
  845b38:	00000206 	br	845b44 <dhc_setup+0x1bc>
   {
      /* let other tasks spin. This is required, since some systems
       * increment cticks in tasks, or use a polling task to receive
       * packets. Without this activity this loop will never exit.
       */
      tk_yield();
  845b3c:	08266b40 	call	8266b4 <tk_yield>
      pktdemux();
  845b40:	0822f2c0 	call	822f2c <pktdemux>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
  845b44:	00802174 	movhi	r2,133
  845b48:	10832604 	addi	r2,r2,3224
  845b4c:	10c00017 	ldw	r3,0(r2)
  845b50:	e0bffa17 	ldw	r2,-24(fp)
  845b54:	1887c83a 	sub	r3,r3,r2
  845b58:	008000b4 	movhi	r2,2
  845b5c:	10bef3c4 	addi	r2,r2,-1073
  845b60:	10c00336 	bltu	r2,r3,845b70 <dhc_setup+0x1e8>
  845b64:	08296740 	call	829674 <dhc_alldone>
  845b68:	1005003a 	cmpeq	r2,r2,zero
  845b6c:	103ff31e 	bne	r2,zero,845b3c <dhc_setup+0x1b4>
#ifdef SUPERLOOP
      dhc_second ();
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
  845b70:	08296740 	call	829674 <dhc_alldone>
  845b74:	1004c03a 	cmpne	r2,r2,zero
  845b78:	1000201e 	bne	r2,zero,845bfc <dhc_setup+0x274>
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
  845b7c:	01002174 	movhi	r4,133
  845b80:	2139fa04 	addi	r4,r4,-6168
  845b84:	08077600 	call	807760 <puts>
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
  845b88:	e03ffb15 	stw	zero,-20(fp)
  845b8c:	00001806 	br	845bf0 <dhc_setup+0x268>
      {
         if (dhc_ifacedone(iface) == FALSE)
  845b90:	e13ffb17 	ldw	r4,-20(fp)
  845b94:	08297040 	call	829704 <dhc_ifacedone>
  845b98:	1004c03a 	cmpne	r2,r2,zero
  845b9c:	1000111e 	bne	r2,zero,845be4 <dhc_setup+0x25c>
         {
            dhc_halt(iface);
  845ba0:	e13ffb17 	ldw	r4,-20(fp)
  845ba4:	08293bc0 	call	8293bc <dhc_halt>
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
  845ba8:	e0bffb17 	ldw	r2,-20(fp)
  845bac:	00c03934 	movhi	r3,228
  845bb0:	18e79c04 	addi	r3,r3,-24976
  845bb4:	1085883a 	add	r2,r2,r2
  845bb8:	1085883a 	add	r2,r2,r2
  845bbc:	10c5883a 	add	r2,r2,r3
  845bc0:	10c00017 	ldw	r3,0(r2)
  845bc4:	e0bffb17 	ldw	r2,-20(fp)
  845bc8:	1085883a 	add	r2,r2,r2
  845bcc:	1085883a 	add	r2,r2,r2
  845bd0:	e13ff804 	addi	r4,fp,-32
  845bd4:	1105883a 	add	r2,r2,r4
  845bd8:	10800404 	addi	r2,r2,16
  845bdc:	10800017 	ldw	r2,0(r2)
  845be0:	18800a15 	stw	r2,40(r3)

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
  845be4:	e0bffb17 	ldw	r2,-20(fp)
  845be8:	10800044 	addi	r2,r2,1
  845bec:	e0bffb15 	stw	r2,-20(fp)
  845bf0:	e0bffb17 	ldw	r2,-20(fp)
  845bf4:	10800110 	cmplti	r2,r2,4
  845bf8:	103fe51e 	bne	r2,zero,845b90 <dhc_setup+0x208>
            dhc_halt(iface);
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
         }
      }
   }
}
  845bfc:	e037883a 	mov	sp,fp
  845c00:	dfc00117 	ldw	ra,4(sp)
  845c04:	df000017 	ldw	fp,0(sp)
  845c08:	dec00204 	addi	sp,sp,8
  845c0c:	f800283a 	ret

00845c10 <dhc_main_ipset>:
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
  845c10:	defffc04 	addi	sp,sp,-16
  845c14:	dfc00315 	stw	ra,12(sp)
  845c18:	df000215 	stw	fp,8(sp)
  845c1c:	df000204 	addi	fp,sp,8
  845c20:	e13ffe15 	stw	r4,-8(fp)
  845c24:	e17fff15 	stw	r5,-4(fp)
   if ( state == DHCS_BOUND )
  845c28:	e0bfff17 	ldw	r2,-4(fp)
  845c2c:	10800198 	cmpnei	r2,r2,6
  845c30:	1000321e 	bne	r2,zero,845cfc <dhc_main_ipset+0xec>
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
  845c34:	e0bffe17 	ldw	r2,-8(fp)
  845c38:	00c03934 	movhi	r3,228
  845c3c:	18e79c04 	addi	r3,r3,-24976
  845c40:	1085883a 	add	r2,r2,r2
  845c44:	1085883a 	add	r2,r2,r2
  845c48:	10c5883a 	add	r2,r2,r3
  845c4c:	10800017 	ldw	r2,0(r2)
  845c50:	11400104 	addi	r5,r2,4
  845c54:	01002174 	movhi	r4,133
  845c58:	213a0804 	addi	r4,r4,-6112
  845c5c:	08076480 	call	807648 <printf>
              nets[iface]->name);

      printf("IP address : %s\n", print_ipad(nets[iface]->n_ipaddr));
  845c60:	e0bffe17 	ldw	r2,-8(fp)
  845c64:	00c03934 	movhi	r3,228
  845c68:	18e79c04 	addi	r3,r3,-24976
  845c6c:	1085883a 	add	r2,r2,r2
  845c70:	1085883a 	add	r2,r2,r2
  845c74:	10c5883a 	add	r2,r2,r3
  845c78:	10800017 	ldw	r2,0(r2)
  845c7c:	11000a17 	ldw	r4,40(r2)
  845c80:	082588c0 	call	82588c <print_ipad>
  845c84:	100b883a 	mov	r5,r2
  845c88:	01002174 	movhi	r4,133
  845c8c:	213a1604 	addi	r4,r4,-6056
  845c90:	08076480 	call	807648 <printf>
      printf("Subnet Mask: %s\n", print_ipad(nets[iface]->snmask));
  845c94:	e0bffe17 	ldw	r2,-8(fp)
  845c98:	00c03934 	movhi	r3,228
  845c9c:	18e79c04 	addi	r3,r3,-24976
  845ca0:	1085883a 	add	r2,r2,r2
  845ca4:	1085883a 	add	r2,r2,r2
  845ca8:	10c5883a 	add	r2,r2,r3
  845cac:	10800017 	ldw	r2,0(r2)
  845cb0:	11000c17 	ldw	r4,48(r2)
  845cb4:	082588c0 	call	82588c <print_ipad>
  845cb8:	100b883a 	mov	r5,r2
  845cbc:	01002174 	movhi	r4,133
  845cc0:	213a1b04 	addi	r4,r4,-6036
  845cc4:	08076480 	call	807648 <printf>
      printf("Gateway    : %s\n", print_ipad(nets[iface]->n_defgw));
  845cc8:	e0bffe17 	ldw	r2,-8(fp)
  845ccc:	00c03934 	movhi	r3,228
  845cd0:	18e79c04 	addi	r3,r3,-24976
  845cd4:	1085883a 	add	r2,r2,r2
  845cd8:	1085883a 	add	r2,r2,r2
  845cdc:	10c5883a 	add	r2,r2,r3
  845ce0:	10800017 	ldw	r2,0(r2)
  845ce4:	11000d17 	ldw	r4,52(r2)
  845ce8:	082588c0 	call	82588c <print_ipad>
  845cec:	100b883a 	mov	r5,r2
  845cf0:	01002174 	movhi	r4,133
  845cf4:	213a2004 	addi	r4,r4,-6016
  845cf8:	08076480 	call	807648 <printf>
   }
   return 0;
  845cfc:	0005883a 	mov	r2,zero
}
  845d00:	e037883a 	mov	sp,fp
  845d04:	dfc00117 	ldw	ra,4(sp)
  845d08:	df000017 	ldw	fp,0(sp)
  845d0c:	dec00204 	addi	sp,sp,8
  845d10:	f800283a 	ret

00845d14 <init_memdev>:
 * RETURNS: 
 */

int
init_memdev(void)
{
  845d14:	deffff04 	addi	sp,sp,-4
  845d18:	df000015 	stw	fp,0(sp)
  845d1c:	d839883a 	mov	fp,sp
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
  845d20:	00802174 	movhi	r2,133
  845d24:	10834f04 	addi	r2,r2,3388
  845d28:	10c00017 	ldw	r3,0(r2)
  845d2c:	00802174 	movhi	r2,133
  845d30:	10821b04 	addi	r2,r2,2156
  845d34:	10c00015 	stw	r3,0(r2)
   vfsystems = &mdio;
  845d38:	00c02174 	movhi	r3,133
  845d3c:	18c34f04 	addi	r3,r3,3388
  845d40:	00802174 	movhi	r2,133
  845d44:	10821b04 	addi	r2,r2,2156
  845d48:	18800015 	stw	r2,0(r3)

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
  845d4c:	00802174 	movhi	r2,133
  845d50:	10835104 	addi	r2,r2,3396
  845d54:	10c00017 	ldw	r3,0(r2)
  845d58:	00802174 	movhi	r2,133
  845d5c:	10822404 	addi	r2,r2,2192
  845d60:	10c00015 	stw	r3,0(r2)
   vfsfiles = &mdlist[3];
  845d64:	00c02174 	movhi	r3,133
  845d68:	18c24504 	addi	r3,r3,2324
  845d6c:	00802174 	movhi	r2,133
  845d70:	10835104 	addi	r2,r2,3396
  845d74:	10c00015 	stw	r3,0(r2)

   return 0;
  845d78:	0005883a 	mov	r2,zero
}
  845d7c:	e037883a 	mov	sp,fp
  845d80:	df000017 	ldw	fp,0(sp)
  845d84:	dec00104 	addi	sp,sp,4
  845d88:	f800283a 	ret

00845d8c <md_fopen>:
 * RETURNS: 
 */

VFILE* 
md_fopen(char * name, char * mode)
{
  845d8c:	defffd04 	addi	sp,sp,-12
  845d90:	df000215 	stw	fp,8(sp)
  845d94:	df000204 	addi	fp,sp,8
  845d98:	e13ffe15 	stw	r4,-8(fp)
  845d9c:	e17fff15 	stw	r5,-4(fp)
   USE_ARG(mode);
   USE_ARG(name);
   return NULL;
  845da0:	0005883a 	mov	r2,zero
}
  845da4:	e037883a 	mov	sp,fp
  845da8:	df000017 	ldw	fp,0(sp)
  845dac:	dec00104 	addi	sp,sp,4
  845db0:	f800283a 	ret

00845db4 <md_fclose>:
 * RETURNS: 
 */

void   
md_fclose(VFILE * vfd)
{
  845db4:	defffe04 	addi	sp,sp,-8
  845db8:	df000115 	stw	fp,4(sp)
  845dbc:	df000104 	addi	fp,sp,4
  845dc0:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);
}
  845dc4:	e037883a 	mov	sp,fp
  845dc8:	df000017 	ldw	fp,0(sp)
  845dcc:	dec00104 	addi	sp,sp,4
  845dd0:	f800283a 	ret

00845dd4 <md_fread>:
 * RETURNS: 
 */

int    
md_fread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
  845dd4:	defff604 	addi	sp,sp,-40
  845dd8:	dfc00915 	stw	ra,36(sp)
  845ddc:	df000815 	stw	fp,32(sp)
  845de0:	df000804 	addi	fp,sp,32
  845de4:	e13ffb15 	stw	r4,-20(fp)
  845de8:	e17ffc15 	stw	r5,-16(fp)
  845dec:	e1bffd15 	stw	r6,-12(fp)
  845df0:	e1fffe15 	stw	r7,-8(fp)
   u_long   bcount;     /* number of bytes put in caller's buffer */
   u_long   location;   /* current offset into file */
   unsigned long file_size = MEMDEV_SIZE;
  845df4:	00800834 	movhi	r2,32
  845df8:	e0bff815 	stw	r2,-32(fp)
   if(vfd && vfd->file)
  845dfc:	e0bffe17 	ldw	r2,-8(fp)
  845e00:	1005003a 	cmpeq	r2,r2,zero
  845e04:	1000081e 	bne	r2,zero,845e28 <md_fread+0x54>
  845e08:	e0bffe17 	ldw	r2,-8(fp)
  845e0c:	10800117 	ldw	r2,4(r2)
  845e10:	1005003a 	cmpeq	r2,r2,zero
  845e14:	1000041e 	bne	r2,zero,845e28 <md_fread+0x54>
   {
      file_size = vfd->file->real_size; 
  845e18:	e0bffe17 	ldw	r2,-8(fp)
  845e1c:	10800117 	ldw	r2,4(r2)
  845e20:	10800717 	ldw	r2,28(r2)
  845e24:	e0bff815 	stw	r2,-32(fp)
#ifdef SEG16_16   /* 16-bit x86 must include segment. */
   if(vfd->cmploc == (u_char*)0xFFFFFFFF)   /* at EOF */
      return 0;
   location = (u_long)(((char huge *)vfd->cmploc) - ((char huge *)vfd->file->data));
#else
   location = (u_long)(vfd->cmploc - vfd->file->data);
  845e28:	e0bffe17 	ldw	r2,-8(fp)
  845e2c:	10800217 	ldw	r2,8(r2)
  845e30:	1007883a 	mov	r3,r2
  845e34:	e0bffe17 	ldw	r2,-8(fp)
  845e38:	10800117 	ldw	r2,4(r2)
  845e3c:	10800617 	ldw	r2,24(r2)
  845e40:	1885c83a 	sub	r2,r3,r2
  845e44:	e0bff915 	stw	r2,-28(fp)
#endif   /* SEG16_16 */

   bcount = (items * (u_long)size);     /* number of bytes to transfer */
  845e48:	e0fffd17 	ldw	r3,-12(fp)
  845e4c:	e0bffc17 	ldw	r2,-16(fp)
  845e50:	1885383a 	mul	r2,r3,r2
  845e54:	e0bffa15 	stw	r2,-24(fp)

   /* if near end of memory, trim read count accordingly */
   if ((location + bcount) > file_size)
  845e58:	e0fff917 	ldw	r3,-28(fp)
  845e5c:	e0bffa17 	ldw	r2,-24(fp)
  845e60:	1887883a 	add	r3,r3,r2
  845e64:	e0bff817 	ldw	r2,-32(fp)
  845e68:	10c0042e 	bgeu	r2,r3,845e7c <md_fread+0xa8>
      bcount = ((u_long)file_size - location);
  845e6c:	e0bff817 	ldw	r2,-32(fp)
  845e70:	e0fff917 	ldw	r3,-28(fp)
  845e74:	10c5c83a 	sub	r2,r2,r3
  845e78:	e0bffa15 	stw	r2,-24(fp)

   /* trap bogus size items and end-of-x86 memory conditions */
   if((location >= file_size) ||
  845e7c:	e0fff917 	ldw	r3,-28(fp)
  845e80:	e0bff817 	ldw	r2,-32(fp)
  845e84:	1880072e 	bgeu	r3,r2,845ea4 <md_fread+0xd0>
  845e88:	e0bffa17 	ldw	r2,-24(fp)
  845e8c:	10bfffec 	andhi	r2,r2,65535
  845e90:	1004c03a 	cmpne	r2,r2,zero
  845e94:	1000031e 	bne	r2,zero,845ea4 <md_fread+0xd0>
  845e98:	e0bffa17 	ldw	r2,-24(fp)
  845e9c:	1004c03a 	cmpne	r2,r2,zero
  845ea0:	1000021e 	bne	r2,zero,845eac <md_fread+0xd8>
      (bcount  & 0xFFFF0000) ||
      (bcount == 0))
   {
      return 0;
  845ea4:	e03fff15 	stw	zero,-4(fp)
  845ea8:	00002406 	br	845f3c <md_fread+0x168>
   /* Use VF_NODATA if memory devices have a size, but no
      data. This can be used to measure file read speed
      without introducing an undefined data copy. */
   /* VF_NODATA is defined in ../h/vfsfiles.h */
   
   if (!(vfd->file->flags & VF_NODATA))
  845eac:	e0bffe17 	ldw	r2,-8(fp)
  845eb0:	10800117 	ldw	r2,4(r2)
  845eb4:	1080058b 	ldhu	r2,22(r2)
  845eb8:	10bfffcc 	andi	r2,r2,65535
  845ebc:	10a0001c 	xori	r2,r2,32768
  845ec0:	10a00004 	addi	r2,r2,-32768
  845ec4:	1004803a 	cmplt	r2,r2,zero
  845ec8:	1000111e 	bne	r2,zero,845f10 <md_fread+0x13c>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
  845ecc:	e0bffe17 	ldw	r2,-8(fp)
  845ed0:	10800117 	ldw	r2,4(r2)
  845ed4:	10800103 	ldbu	r2,4(r2)
  845ed8:	10803fcc 	andi	r2,r2,255
  845edc:	1080201c 	xori	r2,r2,128
  845ee0:	10bfe004 	addi	r2,r2,-128
  845ee4:	10801b58 	cmpnei	r2,r2,109
  845ee8:	1000091e 	bne	r2,zero,845f10 <md_fread+0x13c>
         MEMCPY(buf, vfd->cmploc + MEMDEV_BASE, (unsigned)bcount);
  845eec:	e0bffe17 	ldw	r2,-8(fp)
  845ef0:	10c00217 	ldw	r3,8(r2)
  845ef4:	00800834 	movhi	r2,32
  845ef8:	1887883a 	add	r3,r3,r2
  845efc:	e0bffb17 	ldw	r2,-20(fp)
  845f00:	1009883a 	mov	r4,r2
  845f04:	180b883a 	mov	r5,r3
  845f08:	e1bffa17 	ldw	r6,-24(fp)
  845f0c:	08073380 	call	807338 <memcpy>
         vfd->cmploc = (u_char *)cp;
      else     /* read wrapped memory, set pointer to EOF value */
         vfd->cmploc = (u_char*)(0xFFFFFFFF);  /* EOF */
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
  845f10:	e0bffe17 	ldw	r2,-8(fp)
  845f14:	10c00217 	ldw	r3,8(r2)
  845f18:	e0bffa17 	ldw	r2,-24(fp)
  845f1c:	1887883a 	add	r3,r3,r2
  845f20:	e0bffe17 	ldw	r2,-8(fp)
  845f24:	10c00215 	stw	r3,8(r2)
#endif
   
   return ((int)bcount/size);
  845f28:	e0bffa17 	ldw	r2,-24(fp)
  845f2c:	1009883a 	mov	r4,r2
  845f30:	e17ffc17 	ldw	r5,-16(fp)
  845f34:	08053b80 	call	8053b8 <__udivsi3>
  845f38:	e0bfff15 	stw	r2,-4(fp)
  845f3c:	e0bfff17 	ldw	r2,-4(fp)
}
  845f40:	e037883a 	mov	sp,fp
  845f44:	dfc00117 	ldw	ra,4(sp)
  845f48:	df000017 	ldw	fp,0(sp)
  845f4c:	dec00204 	addi	sp,sp,8
  845f50:	f800283a 	ret

00845f54 <md_fwrite>:
 * RETURNS: 
 */

int    
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
  845f54:	defffa04 	addi	sp,sp,-24
  845f58:	df000515 	stw	fp,20(sp)
  845f5c:	df000504 	addi	fp,sp,20
  845f60:	e13ffb15 	stw	r4,-20(fp)
  845f64:	e17ffc15 	stw	r5,-16(fp)
  845f68:	e1bffd15 	stw	r6,-12(fp)
  845f6c:	e1fffe15 	stw	r7,-8(fp)
   if (vfd->file->name[0] == 'm')   /* memory device */
  845f70:	e0bffe17 	ldw	r2,-8(fp)
  845f74:	10800117 	ldw	r2,4(r2)
  845f78:	10800103 	ldbu	r2,4(r2)
  845f7c:	10803fcc 	andi	r2,r2,255
  845f80:	1080201c 	xori	r2,r2,128
  845f84:	10bfe004 	addi	r2,r2,-128
  845f88:	10801b58 	cmpnei	r2,r2,109
  845f8c:	1000021e 	bne	r2,zero,845f98 <md_fwrite+0x44>
      return 0;   /* not writable device */
  845f90:	e03fff15 	stw	zero,-4(fp)
  845f94:	00000a06 	br	845fc0 <md_fwrite+0x6c>

   vfd->cmploc += (items * size);   /* adjust location */
  845f98:	e0bffe17 	ldw	r2,-8(fp)
  845f9c:	11000217 	ldw	r4,8(r2)
  845fa0:	e0fffd17 	ldw	r3,-12(fp)
  845fa4:	e0bffc17 	ldw	r2,-16(fp)
  845fa8:	1885383a 	mul	r2,r3,r2
  845fac:	2087883a 	add	r3,r4,r2
  845fb0:	e0bffe17 	ldw	r2,-8(fp)
  845fb4:	10c00215 	stw	r3,8(r2)

   USE_ARG(buf);     /* supress compiler warnings */

   return (items);
  845fb8:	e0bffd17 	ldw	r2,-12(fp)
  845fbc:	e0bfff15 	stw	r2,-4(fp)
  845fc0:	e0bfff17 	ldw	r2,-4(fp)
}
  845fc4:	e037883a 	mov	sp,fp
  845fc8:	df000017 	ldw	fp,0(sp)
  845fcc:	dec00104 	addi	sp,sp,4
  845fd0:	f800283a 	ret

00845fd4 <md_fseek>:
 * RETURNS: 
 */

int
md_fseek(VFILE * vfd, long offset, int mode)
{
  845fd4:	defffc04 	addi	sp,sp,-16
  845fd8:	df000315 	stw	fp,12(sp)
  845fdc:	df000304 	addi	fp,sp,12
  845fe0:	e13ffd15 	stw	r4,-12(fp)
  845fe4:	e17ffe15 	stw	r5,-8(fp)
  845fe8:	e1bfff15 	stw	r6,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   USE_ARG(offset);
   USE_ARG(mode);
   return 0;
  845fec:	0005883a 	mov	r2,zero
}
  845ff0:	e037883a 	mov	sp,fp
  845ff4:	df000017 	ldw	fp,0(sp)
  845ff8:	dec00104 	addi	sp,sp,4
  845ffc:	f800283a 	ret

00846000 <md_ftell>:
 * RETURNS: 
 */

long   
md_ftell(VFILE * vfd)
{
  846000:	defffe04 	addi	sp,sp,-8
  846004:	df000115 	stw	fp,4(sp)
  846008:	df000104 	addi	fp,sp,4
  84600c:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   return MEMDEV_SIZE;
  846010:	00800834 	movhi	r2,32
}
  846014:	e037883a 	mov	sp,fp
  846018:	df000017 	ldw	fp,0(sp)
  84601c:	dec00104 	addi	sp,sp,4
  846020:	f800283a 	ret

00846024 <md_fgetc>:
 * RETURNS: 
 */

int    
md_fgetc(VFILE * vfd)
{
  846024:	defffb04 	addi	sp,sp,-20
  846028:	df000415 	stw	fp,16(sp)
  84602c:	df000404 	addi	fp,sp,16
  846030:	e13ffe15 	stw	r4,-8(fp)
   unsigned location;   /* current offset infile */
   int   retval   =  0;
  846034:	e03ffc15 	stw	zero,-16(fp)

   location = vfd->cmploc - vfd->file->data;
  846038:	e0bffe17 	ldw	r2,-8(fp)
  84603c:	10800217 	ldw	r2,8(r2)
  846040:	1007883a 	mov	r3,r2
  846044:	e0bffe17 	ldw	r2,-8(fp)
  846048:	10800117 	ldw	r2,4(r2)
  84604c:	10800617 	ldw	r2,24(r2)
  846050:	1885c83a 	sub	r2,r3,r2
  846054:	e0bffd15 	stw	r2,-12(fp)
   if (location >= vfd->file->real_size)     /* at end of file? */
  846058:	e0bffe17 	ldw	r2,-8(fp)
  84605c:	10800117 	ldw	r2,4(r2)
  846060:	10c00717 	ldw	r3,28(r2)
  846064:	e0bffd17 	ldw	r2,-12(fp)
  846068:	10c00336 	bltu	r2,r3,846078 <md_fgetc+0x54>
      return EOF;
  84606c:	00bfffc4 	movi	r2,-1
  846070:	e0bfff15 	stw	r2,-4(fp)
  846074:	00001c06 	br	8460e8 <md_fgetc+0xc4>

   if (!(vfd->file->flags & VF_NODATA))
  846078:	e0bffe17 	ldw	r2,-8(fp)
  84607c:	10800117 	ldw	r2,4(r2)
  846080:	1080058b 	ldhu	r2,22(r2)
  846084:	10bfffcc 	andi	r2,r2,65535
  846088:	10a0001c 	xori	r2,r2,32768
  84608c:	10a00004 	addi	r2,r2,-32768
  846090:	1004803a 	cmplt	r2,r2,zero
  846094:	10000d1e 	bne	r2,zero,8460cc <md_fgetc+0xa8>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
  846098:	e0bffe17 	ldw	r2,-8(fp)
  84609c:	10800117 	ldw	r2,4(r2)
  8460a0:	10800103 	ldbu	r2,4(r2)
  8460a4:	10803fcc 	andi	r2,r2,255
  8460a8:	1080201c 	xori	r2,r2,128
  8460ac:	10bfe004 	addi	r2,r2,-128
  8460b0:	10801b58 	cmpnei	r2,r2,109
  8460b4:	1000051e 	bne	r2,zero,8460cc <md_fgetc+0xa8>
         retval = (int)(*vfd->cmploc) & 0xFF ;
  8460b8:	e0bffe17 	ldw	r2,-8(fp)
  8460bc:	10800217 	ldw	r2,8(r2)
  8460c0:	10800003 	ldbu	r2,0(r2)
  8460c4:	10803fcc 	andi	r2,r2,255
  8460c8:	e0bffc15 	stw	r2,-16(fp)
   }

   /* else for null device or files without data, 
      use whatever is in retval */

   vfd->cmploc++;    /* adjust location */
  8460cc:	e0bffe17 	ldw	r2,-8(fp)
  8460d0:	10800217 	ldw	r2,8(r2)
  8460d4:	10c00044 	addi	r3,r2,1
  8460d8:	e0bffe17 	ldw	r2,-8(fp)
  8460dc:	10c00215 	stw	r3,8(r2)
   return retval;
  8460e0:	e0bffc17 	ldw	r2,-16(fp)
  8460e4:	e0bfff15 	stw	r2,-4(fp)
  8460e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8460ec:	e037883a 	mov	sp,fp
  8460f0:	df000017 	ldw	fp,0(sp)
  8460f4:	dec00104 	addi	sp,sp,4
  8460f8:	f800283a 	ret

008460fc <md_unlink>:
 * RETURNS: 
 */

int    
md_unlink(char * filename)
{
  8460fc:	defffe04 	addi	sp,sp,-8
  846100:	df000115 	stw	fp,4(sp)
  846104:	df000104 	addi	fp,sp,4
  846108:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(filename);     /* supress compiler warnings */
   return 0;
  84610c:	0005883a 	mov	r2,zero
}
  846110:	e037883a 	mov	sp,fp
  846114:	df000017 	ldw	fp,0(sp)
  846118:	dec00104 	addi	sp,sp,4
  84611c:	f800283a 	ret

00846120 <parse_ipad>:

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
  846120:	defff504 	addi	sp,sp,-44
  846124:	dfc00a15 	stw	ra,40(sp)
  846128:	df000915 	stw	fp,36(sp)
  84612c:	df000904 	addi	fp,sp,36
  846130:	e13ffc15 	stw	r4,-16(fp)
  846134:	e17ffd15 	stw	r5,-12(fp)
  846138:	e1bffe15 	stw	r6,-8(fp)
   char *   cp;
   int   dots  =  0; /* periods imbedded in input string */
  84613c:	e03ff915 	stw	zero,-28(fp)
   union   
   {
      u_char   c[4];
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";
  846140:	00802174 	movhi	r2,133
  846144:	10ba2504 	addi	r2,r2,-5996
  846148:	e0bff715 	stw	r2,-36(fp)

   cp = stringin;
  84614c:	e0bffe17 	ldw	r2,-8(fp)
  846150:	e0bffa15 	stw	r2,-24(fp)
   while (*cp)
  846154:	00002606 	br	8461f0 <parse_ipad+0xd0>
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
  846158:	e0bffa17 	ldw	r2,-24(fp)
  84615c:	10800003 	ldbu	r2,0(r2)
  846160:	10803fcc 	andi	r2,r2,255
  846164:	1080201c 	xori	r2,r2,128
  846168:	10bfe004 	addi	r2,r2,-128
  84616c:	10800e88 	cmpgei	r2,r2,58
  846170:	10000e1e 	bne	r2,zero,8461ac <parse_ipad+0x8c>
  846174:	e0bffa17 	ldw	r2,-24(fp)
  846178:	10800003 	ldbu	r2,0(r2)
  84617c:	10803fcc 	andi	r2,r2,255
  846180:	1080201c 	xori	r2,r2,128
  846184:	10bfe004 	addi	r2,r2,-128
  846188:	10800b90 	cmplti	r2,r2,46
  84618c:	1000071e 	bne	r2,zero,8461ac <parse_ipad+0x8c>
  846190:	e0bffa17 	ldw	r2,-24(fp)
  846194:	10800003 	ldbu	r2,0(r2)
  846198:	10803fcc 	andi	r2,r2,255
  84619c:	1080201c 	xori	r2,r2,128
  8461a0:	10bfe004 	addi	r2,r2,-128
  8461a4:	10800bd8 	cmpnei	r2,r2,47
  8461a8:	1000041e 	bne	r2,zero,8461bc <parse_ipad+0x9c>
         return("all chars must be digits (0-9) or dots (.)");
  8461ac:	00802174 	movhi	r2,133
  8461b0:	10ba2e04 	addi	r2,r2,-5960
  8461b4:	e0bfff15 	stw	r2,-4(fp)
  8461b8:	00009a06 	br	846424 <parse_ipad+0x304>
      if (*cp == '.')dots++;
  8461bc:	e0bffa17 	ldw	r2,-24(fp)
  8461c0:	10800003 	ldbu	r2,0(r2)
  8461c4:	10803fcc 	andi	r2,r2,255
  8461c8:	1080201c 	xori	r2,r2,128
  8461cc:	10bfe004 	addi	r2,r2,-128
  8461d0:	10800b98 	cmpnei	r2,r2,46
  8461d4:	1000031e 	bne	r2,zero,8461e4 <parse_ipad+0xc4>
  8461d8:	e0bff917 	ldw	r2,-28(fp)
  8461dc:	10800044 	addi	r2,r2,1
  8461e0:	e0bff915 	stw	r2,-28(fp)
         cp++;
  8461e4:	e0bffa17 	ldw	r2,-24(fp)
  8461e8:	10800044 	addi	r2,r2,1
  8461ec:	e0bffa15 	stw	r2,-24(fp)
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
  8461f0:	e0bffa17 	ldw	r2,-24(fp)
  8461f4:	10800003 	ldbu	r2,0(r2)
  8461f8:	10803fcc 	andi	r2,r2,255
  8461fc:	1080201c 	xori	r2,r2,128
  846200:	10bfe004 	addi	r2,r2,-128
  846204:	1004c03a 	cmpne	r2,r2,zero
  846208:	103fd31e 	bne	r2,zero,846158 <parse_ipad+0x38>
         return("all chars must be digits (0-9) or dots (.)");
      if (*cp == '.')dots++;
         cp++;
   }

   if ( dots < 1 || dots > 3 )
  84620c:	e0bff917 	ldw	r2,-28(fp)
  846210:	10800050 	cmplti	r2,r2,1
  846214:	1000031e 	bne	r2,zero,846224 <parse_ipad+0x104>
  846218:	e0bff917 	ldw	r2,-28(fp)
  84621c:	10800110 	cmplti	r2,r2,4
  846220:	1000041e 	bne	r2,zero,846234 <parse_ipad+0x114>
      return("string must contain 1 - 3 dots (.)");
  846224:	00802174 	movhi	r2,133
  846228:	10ba3904 	addi	r2,r2,-5916
  84622c:	e0bfff15 	stw	r2,-4(fp)
  846230:	00007c06 	br	846424 <parse_ipad+0x304>

   cp = stringin;
  846234:	e0bffe17 	ldw	r2,-8(fp)
  846238:	e0bffa15 	stw	r2,-24(fp)
   if ((number = atoi(cp)) > 255)   /* set net number */
  84623c:	e13ffa17 	ldw	r4,-24(fp)
  846240:	08053d40 	call	8053d4 <atoi>
  846244:	e0bff815 	stw	r2,-32(fp)
  846248:	e0bff817 	ldw	r2,-32(fp)
  84624c:	10804010 	cmplti	r2,r2,256
  846250:	1000031e 	bne	r2,zero,846260 <parse_ipad+0x140>
      return(toobig);
  846254:	e0bff717 	ldw	r2,-36(fp)
  846258:	e0bfff15 	stw	r2,-4(fp)
  84625c:	00007106 	br	846424 <parse_ipad+0x304>

   retval.c[0] = (u_char)number;
  846260:	e0bff817 	ldw	r2,-32(fp)
  846264:	e0bffb05 	stb	r2,-20(fp)

   while (*cp != '.')cp++; /* find dot (end of number) */
  846268:	00000306 	br	846278 <parse_ipad+0x158>
  84626c:	e0bffa17 	ldw	r2,-24(fp)
  846270:	10800044 	addi	r2,r2,1
  846274:	e0bffa15 	stw	r2,-24(fp)
  846278:	e0bffa17 	ldw	r2,-24(fp)
  84627c:	10800003 	ldbu	r2,0(r2)
  846280:	10803fcc 	andi	r2,r2,255
  846284:	1080201c 	xori	r2,r2,128
  846288:	10bfe004 	addi	r2,r2,-128
  84628c:	10800b98 	cmpnei	r2,r2,46
  846290:	103ff61e 	bne	r2,zero,84626c <parse_ipad+0x14c>
      cp++;             /* point past dot */
  846294:	e0bffa17 	ldw	r2,-24(fp)
  846298:	10800044 	addi	r2,r2,1
  84629c:	e0bffa15 	stw	r2,-24(fp)

   if (dots == 1 || dots == 2) retval.c[1] = 0;
  8462a0:	e0bff917 	ldw	r2,-28(fp)
  8462a4:	10800060 	cmpeqi	r2,r2,1
  8462a8:	1000031e 	bne	r2,zero,8462b8 <parse_ipad+0x198>
  8462ac:	e0bff917 	ldw	r2,-28(fp)
  8462b0:	10800098 	cmpnei	r2,r2,2
  8462b4:	1000021e 	bne	r2,zero,8462c0 <parse_ipad+0x1a0>
  8462b8:	e03ffb45 	stb	zero,-19(fp)
  8462bc:	00001906 	br	846324 <parse_ipad+0x204>
      else
   {
      number = atoi(cp);
  8462c0:	e13ffa17 	ldw	r4,-24(fp)
  8462c4:	08053d40 	call	8053d4 <atoi>
  8462c8:	e0bff815 	stw	r2,-32(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
  8462cc:	00000306 	br	8462dc <parse_ipad+0x1bc>
  8462d0:	e0bffa17 	ldw	r2,-24(fp)
  8462d4:	10800044 	addi	r2,r2,1
  8462d8:	e0bffa15 	stw	r2,-24(fp)
  8462dc:	e0bffa17 	ldw	r2,-24(fp)
  8462e0:	10800003 	ldbu	r2,0(r2)
  8462e4:	10803fcc 	andi	r2,r2,255
  8462e8:	1080201c 	xori	r2,r2,128
  8462ec:	10bfe004 	addi	r2,r2,-128
  8462f0:	10800b98 	cmpnei	r2,r2,46
  8462f4:	103ff61e 	bne	r2,zero,8462d0 <parse_ipad+0x1b0>
         cp++;             /* point past dot */
  8462f8:	e0bffa17 	ldw	r2,-24(fp)
  8462fc:	10800044 	addi	r2,r2,1
  846300:	e0bffa15 	stw	r2,-24(fp)
      if (number > 255) return(toobig);
  846304:	e0bff817 	ldw	r2,-32(fp)
  846308:	10804010 	cmplti	r2,r2,256
  84630c:	1000031e 	bne	r2,zero,84631c <parse_ipad+0x1fc>
  846310:	e0bff717 	ldw	r2,-36(fp)
  846314:	e0bfff15 	stw	r2,-4(fp)
  846318:	00004206 	br	846424 <parse_ipad+0x304>
         retval.c[1] = (u_char)number;
  84631c:	e0bff817 	ldw	r2,-32(fp)
  846320:	e0bffb45 	stb	r2,-19(fp)
   }

   if (dots == 1) retval.c[2] = 0;
  846324:	e0bff917 	ldw	r2,-28(fp)
  846328:	10800058 	cmpnei	r2,r2,1
  84632c:	1000021e 	bne	r2,zero,846338 <parse_ipad+0x218>
  846330:	e03ffb85 	stb	zero,-18(fp)
  846334:	00001906 	br	84639c <parse_ipad+0x27c>
      else
   {
      number = atoi(cp);
  846338:	e13ffa17 	ldw	r4,-24(fp)
  84633c:	08053d40 	call	8053d4 <atoi>
  846340:	e0bff815 	stw	r2,-32(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
  846344:	00000306 	br	846354 <parse_ipad+0x234>
  846348:	e0bffa17 	ldw	r2,-24(fp)
  84634c:	10800044 	addi	r2,r2,1
  846350:	e0bffa15 	stw	r2,-24(fp)
  846354:	e0bffa17 	ldw	r2,-24(fp)
  846358:	10800003 	ldbu	r2,0(r2)
  84635c:	10803fcc 	andi	r2,r2,255
  846360:	1080201c 	xori	r2,r2,128
  846364:	10bfe004 	addi	r2,r2,-128
  846368:	10800b98 	cmpnei	r2,r2,46
  84636c:	103ff61e 	bne	r2,zero,846348 <parse_ipad+0x228>
         cp++;             /* point past dot */
  846370:	e0bffa17 	ldw	r2,-24(fp)
  846374:	10800044 	addi	r2,r2,1
  846378:	e0bffa15 	stw	r2,-24(fp)
      if (number > 255) return(toobig);
  84637c:	e0bff817 	ldw	r2,-32(fp)
  846380:	10804010 	cmplti	r2,r2,256
  846384:	1000031e 	bne	r2,zero,846394 <parse_ipad+0x274>
  846388:	e0bff717 	ldw	r2,-36(fp)
  84638c:	e0bfff15 	stw	r2,-4(fp)
  846390:	00002406 	br	846424 <parse_ipad+0x304>
         retval.c[2] = (u_char)number;
  846394:	e0bff817 	ldw	r2,-32(fp)
  846398:	e0bffb85 	stb	r2,-18(fp)
   }

   if ((number = atoi(cp)) > 255)
  84639c:	e13ffa17 	ldw	r4,-24(fp)
  8463a0:	08053d40 	call	8053d4 <atoi>
  8463a4:	e0bff815 	stw	r2,-32(fp)
  8463a8:	e0bff817 	ldw	r2,-32(fp)
  8463ac:	10804010 	cmplti	r2,r2,256
  8463b0:	1000031e 	bne	r2,zero,8463c0 <parse_ipad+0x2a0>
      return(toobig);
  8463b4:	e0bff717 	ldw	r2,-36(fp)
  8463b8:	e0bfff15 	stw	r2,-4(fp)
  8463bc:	00001906 	br	846424 <parse_ipad+0x304>
   retval.c[3] = (u_char)number;
  8463c0:	e0bff817 	ldw	r2,-32(fp)
  8463c4:	e0bffbc5 	stb	r2,-17(fp)

   if (retval.c[0] < 128) *sbits = 8;
  8463c8:	e0bffb03 	ldbu	r2,-20(fp)
  8463cc:	10803fcc 	andi	r2,r2,255
  8463d0:	10802028 	cmpgeui	r2,r2,128
  8463d4:	1000041e 	bne	r2,zero,8463e8 <parse_ipad+0x2c8>
  8463d8:	e0fffd17 	ldw	r3,-12(fp)
  8463dc:	00800204 	movi	r2,8
  8463e0:	18800015 	stw	r2,0(r3)
  8463e4:	00000b06 	br	846414 <parse_ipad+0x2f4>
      else if(retval.c[0] < 192) *sbits = 16;
  8463e8:	e0bffb03 	ldbu	r2,-20(fp)
  8463ec:	10803fcc 	andi	r2,r2,255
  8463f0:	10803028 	cmpgeui	r2,r2,192
  8463f4:	1000041e 	bne	r2,zero,846408 <parse_ipad+0x2e8>
  8463f8:	e0fffd17 	ldw	r3,-12(fp)
  8463fc:	00800404 	movi	r2,16
  846400:	18800015 	stw	r2,0(r3)
  846404:	00000306 	br	846414 <parse_ipad+0x2f4>
      else *sbits = 24;
  846408:	e0fffd17 	ldw	r3,-12(fp)
  84640c:	00800604 	movi	r2,24
  846410:	18800015 	stw	r2,0(r3)

      *ipout = retval.l;      /* everything went OK, return number */
  846414:	e0fffb17 	ldw	r3,-20(fp)
  846418:	e0bffc17 	ldw	r2,-16(fp)
  84641c:	10c00015 	stw	r3,0(r2)
   return(NULL);        /* return OK code (no error string) */
  846420:	e03fff15 	stw	zero,-4(fp)
  846424:	e0bfff17 	ldw	r2,-4(fp)
}
  846428:	e037883a 	mov	sp,fp
  84642c:	dfc00117 	ldw	ra,4(sp)
  846430:	df000017 	ldw	fp,0(sp)
  846434:	dec00204 	addi	sp,sp,8
  846438:	f800283a 	ret

0084643c <inet_addr>:
 * RETURNS: u_long ipaddr
 */

u_long 
inet_addr(char FAR * str)
{
  84643c:	defffa04 	addi	sp,sp,-24
  846440:	dfc00515 	stw	ra,20(sp)
  846444:	df000415 	stw	fp,16(sp)
  846448:	df000404 	addi	fp,sp,16
  84644c:	e13ffe15 	stw	r4,-8(fp)
    * we need to make the conversion. Usually this function will be 
    * used for debugging, so I think we can bear the STRCPY overhead.
    */
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
  846450:	010021b4 	movhi	r4,134
  846454:	21363b04 	addi	r4,r4,-10004
  846458:	e17ffe17 	ldw	r5,-8(fp)
  84645c:	08081440 	call	808144 <strcpy>
   if ( parse_ipad(&ipaddr,&bits,nearBuf) == NULL )
  846460:	e17ffd04 	addi	r5,fp,-12
  846464:	e13ffc04 	addi	r4,fp,-16
  846468:	018021b4 	movhi	r6,134
  84646c:	31b63b04 	addi	r6,r6,-10004
  846470:	08461200 	call	846120 <parse_ipad>
  846474:	1004c03a 	cmpne	r2,r2,zero
  846478:	1000031e 	bne	r2,zero,846488 <inet_addr+0x4c>
   {
      return ipaddr ;
  84647c:	e0bffc17 	ldw	r2,-16(fp)
  846480:	e0bfff15 	stw	r2,-4(fp)
  846484:	00000106 	br	84648c <inet_addr+0x50>
   }
   else
   {
      return (u_long)NULL ;
  846488:	e03fff15 	stw	zero,-4(fp)
  84648c:	e0bfff17 	ldw	r2,-4(fp)
   }
}
  846490:	e037883a 	mov	sp,fp
  846494:	dfc00117 	ldw	ra,4(sp)
  846498:	df000017 	ldw	fp,0(sp)
  84649c:	dec00204 	addi	sp,sp,8
  8464a0:	f800283a 	ret

008464a4 <hextoa>:
 * RETURNS: character 0-9 or A-F
 */

char
hextoa(int val)
{
  8464a4:	defffd04 	addi	sp,sp,-12
  8464a8:	df000215 	stw	fp,8(sp)
  8464ac:	df000204 	addi	fp,sp,8
  8464b0:	e13ffe15 	stw	r4,-8(fp)
   val &= 0x0f;
  8464b4:	e0bffe17 	ldw	r2,-8(fp)
  8464b8:	108003cc 	andi	r2,r2,15
  8464bc:	e0bffe15 	stw	r2,-8(fp)
   if(val < 10)
  8464c0:	e0bffe17 	ldw	r2,-8(fp)
  8464c4:	10800288 	cmpgei	r2,r2,10
  8464c8:	1000071e 	bne	r2,zero,8464e8 <hextoa+0x44>
      return (char)(val + '0');
  8464cc:	e0bffe17 	ldw	r2,-8(fp)
  8464d0:	10800c04 	addi	r2,r2,48
  8464d4:	10803fcc 	andi	r2,r2,255
  8464d8:	1080201c 	xori	r2,r2,128
  8464dc:	10bfe004 	addi	r2,r2,-128
  8464e0:	e0bfff15 	stw	r2,-4(fp)
  8464e4:	00000606 	br	846500 <hextoa+0x5c>
   else
      return (char)(val + 55);   /* converts 10-15 -> "A-F" */
  8464e8:	e0bffe17 	ldw	r2,-8(fp)
  8464ec:	10800dc4 	addi	r2,r2,55
  8464f0:	10803fcc 	andi	r2,r2,255
  8464f4:	1080201c 	xori	r2,r2,128
  8464f8:	10bfe004 	addi	r2,r2,-128
  8464fc:	e0bfff15 	stw	r2,-4(fp)
  846500:	e0bfff17 	ldw	r2,-4(fp)
}
  846504:	e037883a 	mov	sp,fp
  846508:	df000017 	ldw	fp,0(sp)
  84650c:	dec00104 	addi	sp,sp,4
  846510:	f800283a 	ret

00846514 <inet_pton>:

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
  846514:	defff704 	addi	sp,sp,-36
  846518:	dfc00815 	stw	ra,32(sp)
  84651c:	df000715 	stw	fp,28(sp)
  846520:	df000704 	addi	fp,sp,28
  846524:	e13ffc15 	stw	r4,-16(fp)
  846528:	e17ffd15 	stw	r5,-12(fp)
  84652c:	e1bffe15 	stw	r6,-8(fp)
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
  846530:	e0bffc17 	ldw	r2,-16(fp)
  846534:	10800098 	cmpnei	r2,r2,2
  846538:	10001a1e 	bne	r2,zero,8465a4 <inet_pton+0x90>
   {
      u_long ip4addr;
      unsigned sbits;
      char * err;
      
      err = parse_ipad(&ip4addr, &sbits, (char *) src);
  84653c:	e13ffa04 	addi	r4,fp,-24
  846540:	e17ffb04 	addi	r5,fp,-20
  846544:	e1bffd17 	ldw	r6,-12(fp)
  846548:	08461200 	call	846120 <parse_ipad>
  84654c:	e0bff915 	stw	r2,-28(fp)
      if(err == NULL)
  846550:	e0bff917 	ldw	r2,-28(fp)
  846554:	1004c03a 	cmpne	r2,r2,zero
  846558:	10000c1e 	bne	r2,zero,84658c <inet_pton+0x78>
      {
         /* copy the parsed address into caller's buffer, and 
          * return success
          */
         MEMCPY(dst, &ip4addr, sizeof (u_long));
  84655c:	e13ffe17 	ldw	r4,-8(fp)
  846560:	e0fffa04 	addi	r3,fp,-24
  846564:	18800003 	ldbu	r2,0(r3)
  846568:	20800005 	stb	r2,0(r4)
  84656c:	18800043 	ldbu	r2,1(r3)
  846570:	20800045 	stb	r2,1(r4)
  846574:	18800083 	ldbu	r2,2(r3)
  846578:	20800085 	stb	r2,2(r4)
  84657c:	188000c3 	ldbu	r2,3(r3)
  846580:	208000c5 	stb	r2,3(r4)
         return 0;
  846584:	e03fff15 	stw	zero,-4(fp)
  846588:	00000706 	br	8465a8 <inet_pton+0x94>
      }
      else
      {
         /* return failure */
         pton_error = "IPv4 address parse failure";
  84658c:	00802174 	movhi	r2,133
  846590:	10ba4304 	addi	r2,r2,-5876
  846594:	d0a05915 	stw	r2,-32412(gp)
         return 1;
  846598:	00800044 	movi	r2,1
  84659c:	e0bfff15 	stw	r2,-4(fp)
  8465a0:	00000106 	br	8465a8 <inet_pton+0x94>
      pton_error = "too short - missing colon?";
      return 1;
   }
   
#endif /* IP_V6 */   
   return 0;
  8465a4:	e03fff15 	stw	zero,-4(fp)
  8465a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8465ac:	e037883a 	mov	sp,fp
  8465b0:	dfc00117 	ldw	ra,4(sp)
  8465b4:	df000017 	ldw	fp,0(sp)
  8465b8:	dec00204 	addi	sp,sp,8
  8465bc:	f800283a 	ret

008465c0 <inet_ntop>:
 * address output (40 bytes).
 */

const char *
inet_ntop(int af, const void *addr, char *str, size_t size)
{
  8465c0:	defff704 	addi	sp,sp,-36
  8465c4:	dfc00815 	stw	ra,32(sp)
  8465c8:	df000715 	stw	fp,28(sp)
  8465cc:	df000704 	addi	fp,sp,28
  8465d0:	e13ffb15 	stw	r4,-20(fp)
  8465d4:	e17ffc15 	stw	r5,-16(fp)
  8465d8:	e1bffd15 	stw	r6,-12(fp)
  8465dc:	e1fffe15 	stw	r7,-8(fp)
   char *cp;

#if defined(IP_V4) || defined(MINI_IP)
   if (af == AF_INET)
  8465e0:	e0bffb17 	ldw	r2,-20(fp)
  8465e4:	10800098 	cmpnei	r2,r2,2
  8465e8:	1000111e 	bne	r2,zero,846630 <inet_ntop+0x70>
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
  8465ec:	e0bffc17 	ldw	r2,-16(fp)
  8465f0:	10800017 	ldw	r2,0(r2)
  8465f4:	e0bff915 	stw	r2,-28(fp)
      cp = print_ipad(ip4addr);
  8465f8:	e13ff917 	ldw	r4,-28(fp)
  8465fc:	082588c0 	call	82588c <print_ipad>
  846600:	e0bffa15 	stw	r2,-24(fp)
      if (strlen(cp) < size)
  846604:	e13ffa17 	ldw	r4,-24(fp)
  846608:	08088440 	call	808844 <strlen>
  84660c:	1007883a 	mov	r3,r2
  846610:	e0bffe17 	ldw	r2,-8(fp)
  846614:	1880062e 	bgeu	r3,r2,846630 <inet_ntop+0x70>
      {
         strcpy(str, cp);
  846618:	e13ffd17 	ldw	r4,-12(fp)
  84661c:	e17ffa17 	ldw	r5,-24(fp)
  846620:	08081440 	call	808144 <strcpy>
         return (str);
  846624:	e0bffd17 	ldw	r2,-12(fp)
  846628:	e0bfff15 	stw	r2,-4(fp)
  84662c:	00000106 	br	846634 <inet_ntop+0x74>
         return (str);
      }
   }
#endif

   return ((const char *)NULL);
  846630:	e03fff15 	stw	zero,-4(fp)
  846634:	e0bfff17 	ldw	r2,-4(fp)
}
  846638:	e037883a 	mov	sp,fp
  84663c:	dfc00117 	ldw	ra,4(sp)
  846640:	df000017 	ldw	fp,0(sp)
  846644:	dec00204 	addi	sp,sp,8
  846648:	f800283a 	ret

0084664c <print46_addr>:
 *
 * RETURNS: Pointer to string with the address in readable format.
 */

char * print46_addr(struct sockaddr *ipaddr)
{
  84664c:	defffb04 	addi	sp,sp,-20
  846650:	dfc00415 	stw	ra,16(sp)
  846654:	df000315 	stw	fp,12(sp)
  846658:	df000304 	addi	fp,sp,12
  84665c:	e13ffe15 	stw	r4,-8(fp)
   if (ipaddr->sa_family == AF_INET)
  846660:	e0bffe17 	ldw	r2,-8(fp)
  846664:	1080000b 	ldhu	r2,0(r2)
  846668:	10bfffcc 	andi	r2,r2,65535
  84666c:	10800098 	cmpnei	r2,r2,2
  846670:	1000071e 	bne	r2,zero,846690 <print46_addr+0x44>
   {
      struct sockaddr_in * addr = (struct sockaddr_in *)ipaddr;
  846674:	e0bffe17 	ldw	r2,-8(fp)
  846678:	e0bffd15 	stw	r2,-12(fp)
      return print_ipad(addr->sin_addr.s_addr);
  84667c:	e0bffd17 	ldw	r2,-12(fp)
  846680:	11000117 	ldw	r4,4(r2)
  846684:	082588c0 	call	82588c <print_ipad>
  846688:	e0bfff15 	stw	r2,-4(fp)
  84668c:	00000106 	br	846694 <print46_addr+0x48>
      static char namebuf[46];  /* max len of IPv6 addr */
      return (char *)inet_ntop(AF_INET6,&addr->sin6_addr, namebuf, sizeof(namebuf));
   }
#endif

   return NULL;
  846690:	e03fff15 	stw	zero,-4(fp)
  846694:	e0bfff17 	ldw	r2,-4(fp)
}
  846698:	e037883a 	mov	sp,fp
  84669c:	dfc00117 	ldw	ra,4(sp)
  8466a0:	df000017 	ldw	fp,0(sp)
  8466a4:	dec00204 	addi	sp,sp,8
  8466a8:	f800283a 	ret

008466ac <inet46_addr>:
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
  8466ac:	defffb04 	addi	sp,sp,-20
  8466b0:	dfc00415 	stw	ra,16(sp)
  8466b4:	df000315 	stw	fp,12(sp)
  8466b8:	df000304 	addi	fp,sp,12
  8466bc:	e13ffe15 	stw	r4,-8(fp)
  8466c0:	e17fff15 	stw	r5,-4(fp)
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */
  8466c4:	e0ffff17 	ldw	r3,-4(fp)
  8466c8:	00800084 	movi	r2,2
  8466cc:	1880000d 	sth	r2,0(r3)

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
  8466d0:	e0bffe17 	ldw	r2,-8(fp)
  8466d4:	10800044 	addi	r2,r2,1
  8466d8:	10800003 	ldbu	r2,0(r2)
  8466dc:	10803fcc 	andi	r2,r2,255
  8466e0:	1080201c 	xori	r2,r2,128
  8466e4:	10bfe004 	addi	r2,r2,-128
  8466e8:	10800ba0 	cmpeqi	r2,r2,46
  8466ec:	1000101e 	bne	r2,zero,846730 <inet46_addr+0x84>
  8466f0:	e0bffe17 	ldw	r2,-8(fp)
  8466f4:	10800084 	addi	r2,r2,2
  8466f8:	10800003 	ldbu	r2,0(r2)
  8466fc:	10803fcc 	andi	r2,r2,255
  846700:	1080201c 	xori	r2,r2,128
  846704:	10bfe004 	addi	r2,r2,-128
  846708:	10800ba0 	cmpeqi	r2,r2,46
  84670c:	1000081e 	bne	r2,zero,846730 <inet46_addr+0x84>
  846710:	e0bffe17 	ldw	r2,-8(fp)
  846714:	108000c4 	addi	r2,r2,3
  846718:	10800003 	ldbu	r2,0(r2)
  84671c:	10803fcc 	andi	r2,r2,255
  846720:	1080201c 	xori	r2,r2,128
  846724:	10bfe004 	addi	r2,r2,-128
  846728:	10800b98 	cmpnei	r2,r2,46
  84672c:	10000a1e 	bne	r2,zero,846758 <inet46_addr+0xac>
   {
      struct sockaddr_in *addr = (struct sockaddr_in *)address;
  846730:	e0bfff17 	ldw	r2,-4(fp)
  846734:	e0bffd15 	stw	r2,-12(fp)
      addr->sin_addr.s_addr = inet_addr(str);
  846738:	e13ffe17 	ldw	r4,-8(fp)
  84673c:	084643c0 	call	84643c <inet_addr>
  846740:	1007883a 	mov	r3,r2
  846744:	e0bffd17 	ldw	r2,-12(fp)
  846748:	10c00115 	stw	r3,4(r2)
      addr->sin_family = AF_INET;
  84674c:	e0fffd17 	ldw	r3,-12(fp)
  846750:	00800084 	movi	r2,2
  846754:	1880000d 	sth	r2,0(r3)
      inet_pton(AF_INET6, str, &addr->sin6_addr);
      addr->sin6_family = AF_INET6;
   }
#endif

   return 0;
  846758:	0005883a 	mov	r2,zero
}
  84675c:	e037883a 	mov	sp,fp
  846760:	dfc00117 	ldw	ra,4(sp)
  846764:	df000017 	ldw	fp,0(sp)
  846768:	dec00204 	addi	sp,sp,8
  84676c:	f800283a 	ret

00846770 <inet_setport>:
 *
 * RETURNS: -
 */

void inet_setport(struct sockaddr *addr,int port) 
{
  846770:	defffc04 	addi	sp,sp,-16
  846774:	df000315 	stw	fp,12(sp)
  846778:	df000304 	addi	fp,sp,12
  84677c:	e13ffe15 	stw	r4,-8(fp)
  846780:	e17fff15 	stw	r5,-4(fp)
   if (addr->sa_family == AF_INET)
  846784:	e0bffe17 	ldw	r2,-8(fp)
  846788:	1080000b 	ldhu	r2,0(r2)
  84678c:	10bfffcc 	andi	r2,r2,65535
  846790:	10800098 	cmpnei	r2,r2,2
  846794:	10000f1e 	bne	r2,zero,8467d4 <inet_setport+0x64>
   {
      struct sockaddr_in *si = (struct sockaddr_in *)addr;
  846798:	e0bffe17 	ldw	r2,-8(fp)
  84679c:	e0bffd15 	stw	r2,-12(fp)
      si->sin_port = htons(port);  
  8467a0:	e0bfff17 	ldw	r2,-4(fp)
  8467a4:	1005d23a 	srai	r2,r2,8
  8467a8:	10803fcc 	andi	r2,r2,255
  8467ac:	1009883a 	mov	r4,r2
  8467b0:	e0bfff17 	ldw	r2,-4(fp)
  8467b4:	1004923a 	slli	r2,r2,8
  8467b8:	1007883a 	mov	r3,r2
  8467bc:	00bfc004 	movi	r2,-256
  8467c0:	1884703a 	and	r2,r3,r2
  8467c4:	2084b03a 	or	r2,r4,r2
  8467c8:	1007883a 	mov	r3,r2
  8467cc:	e0bffd17 	ldw	r2,-12(fp)
  8467d0:	10c0008d 	sth	r3,2(r2)
      struct sockaddr_in6 *si = (struct sockaddr_in6 *)addr;
      si->sin6_port = htons(port);
   }
#endif

}
  8467d4:	e037883a 	mov	sp,fp
  8467d8:	df000017 	ldw	fp,0(sp)
  8467dc:	dec00104 	addi	sp,sp,4
  8467e0:	f800283a 	ret

008467e4 <convert_ip>:
 *Returns:
 *
 */

unsigned long convert_ip(const char *p)
{
  8467e4:	defff804 	addi	sp,sp,-32
  8467e8:	df000715 	stw	fp,28(sp)
  8467ec:	df000704 	addi	fp,sp,28
  8467f0:	e13ffe15 	stw	r4,-8(fp)
   const char *cp = p;
  8467f4:	e0bffe17 	ldw	r2,-8(fp)
  8467f8:	e0bffc15 	stw	r2,-16(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
  8467fc:	e0bffd04 	addi	r2,fp,-12
  846800:	e0bffb15 	stw	r2,-20(fp)
   int n = 0;
  846804:	e03ffa15 	stw	zero,-24(fp)
   unsigned short v = 0;
  846808:	e03ff90d 	sth	zero,-28(fp)
   dw = 0;
  84680c:	e03ffd15 	stw	zero,-12(fp)
   while(*cp)
  846810:	00003306 	br	8468e0 <convert_ip+0xfc>
   {
      if( *cp == '.')
  846814:	e0bffc17 	ldw	r2,-16(fp)
  846818:	10800003 	ldbu	r2,0(r2)
  84681c:	10803fcc 	andi	r2,r2,255
  846820:	1080201c 	xori	r2,r2,128
  846824:	10bfe004 	addi	r2,r2,-128
  846828:	10800b98 	cmpnei	r2,r2,46
  84682c:	1000101e 	bne	r2,zero,846870 <convert_ip+0x8c>
      {
         lpb[n] = (unsigned char) v;
  846830:	e0bffa17 	ldw	r2,-24(fp)
  846834:	1007883a 	mov	r3,r2
  846838:	e0bffb17 	ldw	r2,-20(fp)
  84683c:	1887883a 	add	r3,r3,r2
  846840:	e0bff90b 	ldhu	r2,-28(fp)
  846844:	18800005 	stb	r2,0(r3)
         v = 0;
  846848:	e03ff90d 	sth	zero,-28(fp)
         n++;
  84684c:	e0bffa17 	ldw	r2,-24(fp)
  846850:	10800044 	addi	r2,r2,1
  846854:	e0bffa15 	stw	r2,-24(fp)
         if(n > 3)
  846858:	e0bffa17 	ldw	r2,-24(fp)
  84685c:	10800110 	cmplti	r2,r2,4
  846860:	10001c1e 	bne	r2,zero,8468d4 <convert_ip+0xf0>
         {
            return dw;
  846864:	e0bffd17 	ldw	r2,-12(fp)
  846868:	e0bfff15 	stw	r2,-4(fp)
  84686c:	00002b06 	br	84691c <convert_ip+0x138>
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
  846870:	e0bffc17 	ldw	r2,-16(fp)
  846874:	10800003 	ldbu	r2,0(r2)
  846878:	10803fcc 	andi	r2,r2,255
  84687c:	1080201c 	xori	r2,r2,128
  846880:	10bfe004 	addi	r2,r2,-128
  846884:	10800c10 	cmplti	r2,r2,48
  846888:	1000121e 	bne	r2,zero,8468d4 <convert_ip+0xf0>
  84688c:	e0bffc17 	ldw	r2,-16(fp)
  846890:	10800003 	ldbu	r2,0(r2)
  846894:	10803fcc 	andi	r2,r2,255
  846898:	1080201c 	xori	r2,r2,128
  84689c:	10bfe004 	addi	r2,r2,-128
  8468a0:	10800e88 	cmpgei	r2,r2,58
  8468a4:	10000b1e 	bne	r2,zero,8468d4 <convert_ip+0xf0>
      {
         v = (v * 10) + (*cp - '0');
  8468a8:	e0bff90b 	ldhu	r2,-28(fp)
  8468ac:	108002a4 	muli	r2,r2,10
  8468b0:	1007883a 	mov	r3,r2
  8468b4:	e0bffc17 	ldw	r2,-16(fp)
  8468b8:	10800003 	ldbu	r2,0(r2)
  8468bc:	10803fcc 	andi	r2,r2,255
  8468c0:	1080201c 	xori	r2,r2,128
  8468c4:	10bfe004 	addi	r2,r2,-128
  8468c8:	1885883a 	add	r2,r3,r2
  8468cc:	10bff404 	addi	r2,r2,-48
  8468d0:	e0bff90d 	sth	r2,-28(fp)
      }
      cp++;
  8468d4:	e0bffc17 	ldw	r2,-16(fp)
  8468d8:	10800044 	addi	r2,r2,1
  8468dc:	e0bffc15 	stw	r2,-16(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
  8468e0:	e0bffc17 	ldw	r2,-16(fp)
  8468e4:	10800003 	ldbu	r2,0(r2)
  8468e8:	10803fcc 	andi	r2,r2,255
  8468ec:	1080201c 	xori	r2,r2,128
  8468f0:	10bfe004 	addi	r2,r2,-128
  8468f4:	1004c03a 	cmpne	r2,r2,zero
  8468f8:	103fc61e 	bne	r2,zero,846814 <convert_ip+0x30>
      {
         v = (v * 10) + (*cp - '0');
      }
      cp++;
   }
   lpb[n] = (unsigned char) v;
  8468fc:	e0bffa17 	ldw	r2,-24(fp)
  846900:	1007883a 	mov	r3,r2
  846904:	e0bffb17 	ldw	r2,-20(fp)
  846908:	1887883a 	add	r3,r3,r2
  84690c:	e0bff90b 	ldhu	r2,-28(fp)
  846910:	18800005 	stb	r2,0(r3)
   return dw;
  846914:	e0bffd17 	ldw	r2,-12(fp)
  846918:	e0bfff15 	stw	r2,-4(fp)
  84691c:	e0bfff17 	ldw	r2,-4(fp)
}  /* convert_ip() */
  846920:	e037883a 	mov	sp,fp
  846924:	df000017 	ldw	fp,0(sp)
  846928:	dec00104 	addi	sp,sp,4
  84692c:	f800283a 	ret

00846930 <tcp_cksum>:
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
  846930:	defff804 	addi	sp,sp,-32
  846934:	dfc00715 	stw	ra,28(sp)
  846938:	df000615 	stw	fp,24(sp)
  84693c:	df000604 	addi	fp,sp,24
  846940:	e13fff15 	stw	r4,-4(fp)
   unshort  oldsum;
   unshort  newsum;
   struct tcphdr * tp;

#ifdef MUTE_WARNS    /* stifle compiler warnings */
   tcpdata = (char *)NULL;
  846944:	e03ffd15 	stw	zero,-12(fp)
#endif   /* MUTE_WARNS */

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;
  846948:	e03ffc05 	stb	zero,-16(fp)

   iphlen = (unshort)ip_hlen(pip);
  84694c:	e0bfff17 	ldw	r2,-4(fp)
  846950:	10800003 	ldbu	r2,0(r2)
  846954:	10803fcc 	andi	r2,r2,255
  846958:	108003cc 	andi	r2,r2,15
  84695c:	1085883a 	add	r2,r2,r2
  846960:	1085883a 	add	r2,r2,r2
  846964:	e0bffe8d 	sth	r2,-6(fp)
   tcplen = htons(pip->ip_len) - iphlen;
  846968:	e0bfff17 	ldw	r2,-4(fp)
  84696c:	1080008b 	ldhu	r2,2(r2)
  846970:	10bfffcc 	andi	r2,r2,65535
  846974:	1004d23a 	srli	r2,r2,8
  846978:	10803fcc 	andi	r2,r2,255
  84697c:	1009883a 	mov	r4,r2
  846980:	e0bfff17 	ldw	r2,-4(fp)
  846984:	1080008b 	ldhu	r2,2(r2)
  846988:	10bfffcc 	andi	r2,r2,65535
  84698c:	1004923a 	slli	r2,r2,8
  846990:	1007883a 	mov	r3,r2
  846994:	00bfc004 	movi	r2,-256
  846998:	1884703a 	and	r2,r3,r2
  84699c:	2084b03a 	or	r2,r4,r2
  8469a0:	1007883a 	mov	r3,r2
  8469a4:	e0bffe8b 	ldhu	r2,-6(fp)
  8469a8:	1885c83a 	sub	r2,r3,r2
  8469ac:	e0bffe0d 	sth	r2,-8(fp)

   tp = (struct tcphdr*)ip_data(pip);     /* get TCP header */
  8469b0:	e0bfff17 	ldw	r2,-4(fp)
  8469b4:	10800003 	ldbu	r2,0(r2)
  8469b8:	10803fcc 	andi	r2,r2,255
  8469bc:	108003cc 	andi	r2,r2,15
  8469c0:	1085883a 	add	r2,r2,r2
  8469c4:	1085883a 	add	r2,r2,r2
  8469c8:	1007883a 	mov	r3,r2
  8469cc:	e0bfff17 	ldw	r2,-4(fp)
  8469d0:	1885883a 	add	r2,r3,r2
  8469d4:	e0bffa15 	stw	r2,-24(fp)
   oldsum = tp->th_sum;       /* Save passed checksum */
  8469d8:	e0bffa17 	ldw	r2,-24(fp)
  8469dc:	1080040b 	ldhu	r2,16(r2)
  8469e0:	e0bffb8d 	sth	r2,-18(fp)
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
  8469e4:	e0bffe0b 	ldhu	r2,-8(fp)
  8469e8:	10800184 	addi	r2,r2,6
  8469ec:	1005d23a 	srai	r2,r2,8
  8469f0:	10803fcc 	andi	r2,r2,255
  8469f4:	1009883a 	mov	r4,r2
  8469f8:	e0bffe0b 	ldhu	r2,-8(fp)
  8469fc:	10800184 	addi	r2,r2,6
  846a00:	1004923a 	slli	r2,r2,8
  846a04:	1007883a 	mov	r3,r2
  846a08:	00bfc004 	movi	r2,-256
  846a0c:	1884703a 	and	r2,r3,r2
  846a10:	2084b03a 	or	r2,r4,r2
  846a14:	1007883a 	mov	r3,r2
  846a18:	e0bffa17 	ldw	r2,-24(fp)
  846a1c:	10c0040d 	sth	r3,16(r2)

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
  846a20:	e0bffe0b 	ldhu	r2,-8(fp)
  846a24:	1080004c 	andi	r2,r2,1
  846a28:	10803fcc 	andi	r2,r2,255
  846a2c:	1005003a 	cmpeq	r2,r2,zero
  846a30:	10000f1e 	bne	r2,zero,846a70 <tcp_cksum+0x140>
   {
      tcpdata = ((char*)pip) + iphlen + tcplen;    /* end of packet */
  846a34:	e0bffe8b 	ldhu	r2,-6(fp)
  846a38:	1007883a 	mov	r3,r2
  846a3c:	e0bfff17 	ldw	r2,-4(fp)
  846a40:	1887883a 	add	r3,r3,r2
  846a44:	e0bffe0b 	ldhu	r2,-8(fp)
  846a48:	1885883a 	add	r2,r3,r2
  846a4c:	e0bffd15 	stw	r2,-12(fp)
      oddchar = *tcpdata;
  846a50:	e0bffd17 	ldw	r2,-12(fp)
  846a54:	10800003 	ldbu	r2,0(r2)
  846a58:	e0bffc05 	stb	r2,-16(fp)
      *tcpdata = '\0';        /* zero out pad byte */
  846a5c:	e0bffd17 	ldw	r2,-12(fp)
  846a60:	10000005 	stb	zero,0(r2)
      tcplen++;               /* bump length to pass to cksum() */
  846a64:	e0bffe0b 	ldhu	r2,-8(fp)
  846a68:	10800044 	addi	r2,r2,1
  846a6c:	e0bffe0d 	sth	r2,-8(fp)

   /* Pass a pointer to the beginning of the IP address area into the IP header
    * the the low level sum routine. Add the size of these two IP addresses to
    * the length, and convert the length to 16 bit words.
    */
   newsum = ~cksum(((char*)tp) - 8, (tcplen + 8) >> 1);
  846a70:	e0bffa17 	ldw	r2,-24(fp)
  846a74:	113ffe04 	addi	r4,r2,-8
  846a78:	e0bffe0b 	ldhu	r2,-8(fp)
  846a7c:	10800204 	addi	r2,r2,8
  846a80:	1005d07a 	srai	r2,r2,1
  846a84:	100b883a 	mov	r5,r2
  846a88:	08256340 	call	825634 <cksum>
  846a8c:	0084303a 	nor	r2,zero,r2
  846a90:	e0bffb0d 	sth	r2,-20(fp)

   /* If the old checksum is 0xffff, but the actual checksum is 0x0000,
    * declare that to be a match.
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
  846a94:	e0fffb0b 	ldhu	r3,-20(fp)
  846a98:	e0bffb8b 	ldhu	r2,-18(fp)
  846a9c:	18800826 	beq	r3,r2,846ac0 <tcp_cksum+0x190>
  846aa0:	e0fffb8b 	ldhu	r3,-18(fp)
  846aa4:	00bfffd4 	movui	r2,65535
  846aa8:	1880051e 	bne	r3,r2,846ac0 <tcp_cksum+0x190>
  846aac:	e0bffb0b 	ldhu	r2,-20(fp)
  846ab0:	1004c03a 	cmpne	r2,r2,zero
  846ab4:	1000021e 	bne	r2,zero,846ac0 <tcp_cksum+0x190>
      newsum = 0xffff;
  846ab8:	00bfffc4 	movi	r2,-1
  846abc:	e0bffb0d 	sth	r2,-20(fp)

   /* restore what we clobbered */
   tp->th_sum = oldsum;       /* put back passed checksum */
  846ac0:	e0fffa17 	ldw	r3,-24(fp)
  846ac4:	e0bffb8b 	ldhu	r2,-18(fp)
  846ac8:	1880040d 	sth	r2,16(r3)
   if (oddchar)
  846acc:	e0bffc07 	ldb	r2,-16(fp)
  846ad0:	1005003a 	cmpeq	r2,r2,zero
  846ad4:	1000031e 	bne	r2,zero,846ae4 <tcp_cksum+0x1b4>
      *tcpdata = oddchar;     /* restore odd byte if we zeroed it */
  846ad8:	e0fffd17 	ldw	r3,-12(fp)
  846adc:	e0bffc03 	ldbu	r2,-16(fp)
  846ae0:	18800005 	stb	r2,0(r3)

   IN_PROFILER(PF_TSUM, PF_EXIT);

   return newsum;
  846ae4:	e0bffb0b 	ldhu	r2,-20(fp)
}
  846ae8:	e037883a 	mov	sp,fp
  846aec:	dfc00117 	ldw	ra,4(sp)
  846af0:	df000017 	ldw	fp,0(sp)
  846af4:	dec00204 	addi	sp,sp,8
  846af8:	f800283a 	ret

00846afc <in_pcballoc>:
 */

int
in_pcballoc(struct socket * so, 
   struct inpcb * head)
{
  846afc:	defffa04 	addi	sp,sp,-24
  846b00:	dfc00515 	stw	ra,20(sp)
  846b04:	df000415 	stw	fp,16(sp)
  846b08:	df000404 	addi	fp,sp,16
  846b0c:	e13ffd15 	stw	r4,-12(fp)
  846b10:	e17ffe15 	stw	r5,-8(fp)
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
  846b14:	01000b04 	movi	r4,44
  846b18:	082b20c0 	call	82b20c <npalloc>
  846b1c:	e0bffc15 	stw	r2,-16(fp)
   if (inp == 0)
  846b20:	e0bffc17 	ldw	r2,-16(fp)
  846b24:	1004c03a 	cmpne	r2,r2,zero
  846b28:	1000031e 	bne	r2,zero,846b38 <in_pcballoc+0x3c>
      return ENOMEM;
  846b2c:	00800304 	movi	r2,12
  846b30:	e0bfff15 	stw	r2,-4(fp)
  846b34:	00001006 	br	846b78 <in_pcballoc+0x7c>
   inp->inp_head = head;
  846b38:	e0fffc17 	ldw	r3,-16(fp)
  846b3c:	e0bffe17 	ldw	r2,-8(fp)
  846b40:	18800215 	stw	r2,8(r3)
   inp->inp_socket = so;
  846b44:	e0fffc17 	ldw	r3,-16(fp)
  846b48:	e0bffd17 	ldw	r2,-12(fp)
  846b4c:	18800815 	stw	r2,32(r3)

   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
  846b50:	e0fffc17 	ldw	r3,-16(fp)
  846b54:	00808004 	movi	r2,512
  846b58:	18800615 	stw	r2,24(r3)
   insque(inp, head);
  846b5c:	e13ffc17 	ldw	r4,-16(fp)
  846b60:	e17ffe17 	ldw	r5,-8(fp)
  846b64:	082bf4c0 	call	82bf4c <insque>
   so->so_pcb = inp;
  846b68:	e0fffd17 	ldw	r3,-12(fp)
  846b6c:	e0bffc17 	ldw	r2,-16(fp)
  846b70:	18800115 	stw	r2,4(r3)
   return 0;
  846b74:	e03fff15 	stw	zero,-4(fp)
  846b78:	e0bfff17 	ldw	r2,-4(fp)
}
  846b7c:	e037883a 	mov	sp,fp
  846b80:	dfc00117 	ldw	ra,4(sp)
  846b84:	df000017 	ldw	fp,0(sp)
  846b88:	dec00204 	addi	sp,sp,8
  846b8c:	f800283a 	ret

00846b90 <in_pcbdetach>:
 * RETURNS: 
 */

void
in_pcbdetach(struct inpcb * inp)
{
  846b90:	defffc04 	addi	sp,sp,-16
  846b94:	dfc00315 	stw	ra,12(sp)
  846b98:	df000215 	stw	fp,8(sp)
  846b9c:	df000204 	addi	fp,sp,8
  846ba0:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so =  inp->inp_socket;
  846ba4:	e0bfff17 	ldw	r2,-4(fp)
  846ba8:	10800817 	ldw	r2,32(r2)
  846bac:	e0bffe15 	stw	r2,-8(fp)

   so->so_pcb = 0;
  846bb0:	e0bffe17 	ldw	r2,-8(fp)
  846bb4:	10000115 	stw	zero,4(r2)
   sofree(so);
  846bb8:	e13ffe17 	ldw	r4,-8(fp)
  846bbc:	082f3140 	call	82f314 <sofree>
   remque(inp);
  846bc0:	e13fff17 	ldw	r4,-4(fp)
  846bc4:	082bedc0 	call	82bedc <remque>
   INP_FREE (inp);
  846bc8:	e13fff17 	ldw	r4,-4(fp)
  846bcc:	082b3000 	call	82b300 <npfree>
}
  846bd0:	e037883a 	mov	sp,fp
  846bd4:	dfc00117 	ldw	ra,4(sp)
  846bd8:	df000017 	ldw	fp,0(sp)
  846bdc:	dec00204 	addi	sp,sp,8
  846be0:	f800283a 	ret

00846be4 <in_pcbbind>:

int
in_pcbbind(
   struct inpcb * inp,
   struct mbuf *  nam)
{
  846be4:	defff404 	addi	sp,sp,-48
  846be8:	dfc00b15 	stw	ra,44(sp)
  846bec:	df000a15 	stw	fp,40(sp)
  846bf0:	df000a04 	addi	fp,sp,40
  846bf4:	e13ffd15 	stw	r4,-12(fp)
  846bf8:	e17ffe15 	stw	r5,-8(fp)
   struct socket *   so =  inp->inp_socket;
  846bfc:	e0bffd17 	ldw	r2,-12(fp)
  846c00:	10800817 	ldw	r2,32(r2)
  846c04:	e0bffc15 	stw	r2,-16(fp)
   struct inpcb * head  =  inp->inp_head;
  846c08:	e0bffd17 	ldw	r2,-12(fp)
  846c0c:	10800217 	ldw	r2,8(r2)
  846c10:	e0bffb15 	stw	r2,-20(fp)
   struct sockaddr_in * sin;
   u_short  lport =  0;
  846c14:	e03ff90d 	sth	zero,-28(fp)


   if (inp->inp_lport || inp->inp_laddr.s_addr != INADDR_ANY)
  846c18:	e0bffd17 	ldw	r2,-12(fp)
  846c1c:	1080078b 	ldhu	r2,30(r2)
  846c20:	10bfffcc 	andi	r2,r2,65535
  846c24:	1004c03a 	cmpne	r2,r2,zero
  846c28:	1000041e 	bne	r2,zero,846c3c <in_pcbbind+0x58>
  846c2c:	e0bffd17 	ldw	r2,-12(fp)
  846c30:	10800417 	ldw	r2,16(r2)
  846c34:	1005003a 	cmpeq	r2,r2,zero
  846c38:	1000031e 	bne	r2,zero,846c48 <in_pcbbind+0x64>
      return (EINVAL);
  846c3c:	00800584 	movi	r2,22
  846c40:	e0bfff15 	stw	r2,-4(fp)
  846c44:	00007606 	br	846e20 <in_pcbbind+0x23c>
   if (nam == 0)
  846c48:	e0bffe17 	ldw	r2,-8(fp)
  846c4c:	1005003a 	cmpeq	r2,r2,zero
  846c50:	10003e1e 	bne	r2,zero,846d4c <in_pcbbind+0x168>
      goto noname;
   sin = mtod(nam, struct sockaddr_in *);
  846c54:	e0bffe17 	ldw	r2,-8(fp)
  846c58:	10800317 	ldw	r2,12(r2)
  846c5c:	e0bffa15 	stw	r2,-24(fp)
   /*
    * removed test here for "if (nam->m_len != sizeof (*sin))"
    * since it really complicatges supporting dual IPv4/v6, and 
    * the 2.0 stack now checks this in t_bind(). -JB-
    */
   if (sin->sin_addr.s_addr != INADDR_ANY) 
  846c60:	e0bffa17 	ldw	r2,-24(fp)
  846c64:	10800117 	ldw	r2,4(r2)
  846c68:	1005003a 	cmpeq	r2,r2,zero
  846c6c:	10000a1e 	bne	r2,zero,846c98 <in_pcbbind+0xb4>
   {
      if (ip_mymach(sin->sin_addr.s_addr) != sin->sin_addr.s_addr)
  846c70:	e0bffa17 	ldw	r2,-24(fp)
  846c74:	11000117 	ldw	r4,4(r2)
  846c78:	083ee080 	call	83ee08 <ip_mymach>
  846c7c:	1007883a 	mov	r3,r2
  846c80:	e0bffa17 	ldw	r2,-24(fp)
  846c84:	10800117 	ldw	r2,4(r2)
  846c88:	18800326 	beq	r3,r2,846c98 <in_pcbbind+0xb4>
      return (EADDRNOTAVAIL);
  846c8c:	00801f44 	movi	r2,125
  846c90:	e0bfff15 	stw	r2,-4(fp)
  846c94:	00006206 	br	846e20 <in_pcbbind+0x23c>
   }
   lport = sin->sin_port;
  846c98:	e0bffa17 	ldw	r2,-24(fp)
  846c9c:	1080008b 	ldhu	r2,2(r2)
  846ca0:	e0bff90d 	sth	r2,-28(fp)
   if (lport) 
  846ca4:	e0bff90b 	ldhu	r2,-28(fp)
  846ca8:	1005003a 	cmpeq	r2,r2,zero
  846cac:	1000231e 	bne	r2,zero,846d3c <in_pcbbind+0x158>
   {
      int   wild  =  0;
  846cb0:	e03ff815 	stw	zero,-32(fp)

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
  846cb4:	e0bffc17 	ldw	r2,-16(fp)
  846cb8:	10800417 	ldw	r2,16(r2)
  846cbc:	1080010c 	andi	r2,r2,4
  846cc0:	1004c03a 	cmpne	r2,r2,zero
  846cc4:	10000e1e 	bne	r2,zero,846d00 <in_pcbbind+0x11c>
  846cc8:	e0bffc17 	ldw	r2,-16(fp)
  846ccc:	10800217 	ldw	r2,8(r2)
  846cd0:	1080010b 	ldhu	r2,4(r2)
  846cd4:	10bfffcc 	andi	r2,r2,65535
  846cd8:	1080010c 	andi	r2,r2,4
  846cdc:	1005003a 	cmpeq	r2,r2,zero
  846ce0:	1000051e 	bne	r2,zero,846cf8 <in_pcbbind+0x114>
  846ce4:	e0bffc17 	ldw	r2,-16(fp)
  846ce8:	10800417 	ldw	r2,16(r2)
  846cec:	1080008c 	andi	r2,r2,2
  846cf0:	1004c03a 	cmpne	r2,r2,zero
  846cf4:	1000021e 	bne	r2,zero,846d00 <in_pcbbind+0x11c>
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
          (so->so_options & SO_ACCEPTCONN) == 0))
      {
         wild = INPLOOKUP_WILDCARD;
  846cf8:	00800044 	movi	r2,1
  846cfc:	e0bff815 	stw	r2,-32(fp)
      }
      if (in_pcblookup(head,
  846d00:	e0bffa17 	ldw	r2,-24(fp)
  846d04:	11c00117 	ldw	r7,4(r2)
  846d08:	e0bff90b 	ldhu	r2,-28(fp)
  846d0c:	d8800015 	stw	r2,0(sp)
  846d10:	e0bff817 	ldw	r2,-32(fp)
  846d14:	d8800115 	stw	r2,4(sp)
  846d18:	e13ffb17 	ldw	r4,-20(fp)
  846d1c:	000b883a 	mov	r5,zero
  846d20:	000d883a 	mov	r6,zero
  846d24:	08471a00 	call	8471a0 <in_pcblookup>
  846d28:	1005003a 	cmpeq	r2,r2,zero
  846d2c:	1000031e 	bne	r2,zero,846d3c <in_pcbbind+0x158>
          0L, 0, sin->sin_addr.s_addr, lport, wild))
      {
         return (EADDRINUSE);
  846d30:	00801c04 	movi	r2,112
  846d34:	e0bfff15 	stw	r2,-4(fp)
  846d38:	00003906 	br	846e20 <in_pcbbind+0x23c>
      }
   }
   inp->inp_laddr = sin->sin_addr;
  846d3c:	e0bffa17 	ldw	r2,-24(fp)
  846d40:	10c00117 	ldw	r3,4(r2)
  846d44:	e0bffd17 	ldw	r2,-12(fp)
  846d48:	10c00415 	stw	r3,16(r2)
noname:
   if (lport == 0)
  846d4c:	e0bff90b 	ldhu	r2,-28(fp)
  846d50:	1004c03a 	cmpne	r2,r2,zero
  846d54:	10002e1e 	bne	r2,zero,846e10 <in_pcbbind+0x22c>
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
  846d58:	e0bffb17 	ldw	r2,-20(fp)
  846d5c:	10c0078b 	ldhu	r3,30(r2)
  846d60:	18bfffcc 	andi	r2,r3,65535
  846d64:	10810030 	cmpltui	r2,r2,1024
  846d68:	1009883a 	mov	r4,r2
  846d6c:	18800044 	addi	r2,r3,1
  846d70:	1007883a 	mov	r3,r2
  846d74:	e0bffb17 	ldw	r2,-20(fp)
  846d78:	10c0078d 	sth	r3,30(r2)
  846d7c:	20803fcc 	andi	r2,r4,255
  846d80:	1004c03a 	cmpne	r2,r2,zero
  846d84:	1000051e 	bne	r2,zero,846d9c <in_pcbbind+0x1b8>
  846d88:	e0bffb17 	ldw	r2,-20(fp)
  846d8c:	1080078b 	ldhu	r2,30(r2)
  846d90:	10bfffcc 	andi	r2,r2,65535
  846d94:	1084e270 	cmpltui	r2,r2,5001
  846d98:	1000031e 	bne	r2,zero,846da8 <in_pcbbind+0x1c4>
             head->inp_lport > IPPORT_USERRESERVED)
         {
            head->inp_lport = IPPORT_RESERVED;
  846d9c:	e0fffb17 	ldw	r3,-20(fp)
  846da0:	00810004 	movi	r2,1024
  846da4:	1880078d 	sth	r2,30(r3)
         }
         lport = htons(head->inp_lport);
  846da8:	e0bffb17 	ldw	r2,-20(fp)
  846dac:	1080078b 	ldhu	r2,30(r2)
  846db0:	10bfffcc 	andi	r2,r2,65535
  846db4:	1004d23a 	srli	r2,r2,8
  846db8:	10803fcc 	andi	r2,r2,255
  846dbc:	1009883a 	mov	r4,r2
  846dc0:	e0bffb17 	ldw	r2,-20(fp)
  846dc4:	1080078b 	ldhu	r2,30(r2)
  846dc8:	10bfffcc 	andi	r2,r2,65535
  846dcc:	1004923a 	slli	r2,r2,8
  846dd0:	1007883a 	mov	r3,r2
  846dd4:	00bfc004 	movi	r2,-256
  846dd8:	1884703a 	and	r2,r3,r2
  846ddc:	2084b03a 	or	r2,r4,r2
  846de0:	e0bff90d 	sth	r2,-28(fp)
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
  846de4:	e0bffd17 	ldw	r2,-12(fp)
  846de8:	11c00417 	ldw	r7,16(r2)
  846dec:	e0bff90b 	ldhu	r2,-28(fp)
  846df0:	d8800015 	stw	r2,0(sp)
  846df4:	d8000115 	stw	zero,4(sp)
  846df8:	e13ffb17 	ldw	r4,-20(fp)
  846dfc:	000b883a 	mov	r5,zero
  846e00:	000d883a 	mov	r6,zero
  846e04:	08471a00 	call	8471a0 <in_pcblookup>
  846e08:	1004c03a 	cmpne	r2,r2,zero
  846e0c:	103fd21e 	bne	r2,zero,846d58 <in_pcbbind+0x174>
   }
   inp->inp_lport = lport;
  846e10:	e0fffd17 	ldw	r3,-12(fp)
  846e14:	e0bff90b 	ldhu	r2,-28(fp)
  846e18:	1880078d 	sth	r2,30(r3)
   return (0);
  846e1c:	e03fff15 	stw	zero,-4(fp)
  846e20:	e0bfff17 	ldw	r2,-4(fp)
}
  846e24:	e037883a 	mov	sp,fp
  846e28:	dfc00117 	ldw	ra,4(sp)
  846e2c:	df000017 	ldw	fp,0(sp)
  846e30:	dec00204 	addi	sp,sp,8
  846e34:	f800283a 	ret

00846e38 <in_pcbconnect>:
 */

int
in_pcbconnect(struct inpcb * inp, 
   struct mbuf *  nam)
{
  846e38:	defff504 	addi	sp,sp,-44
  846e3c:	dfc00a15 	stw	ra,40(sp)
  846e40:	df000915 	stw	fp,36(sp)
  846e44:	df000904 	addi	fp,sp,36
  846e48:	e13ffd15 	stw	r4,-12(fp)
  846e4c:	e17ffe15 	stw	r5,-8(fp)
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
  846e50:	e0bffe17 	ldw	r2,-8(fp)
  846e54:	10800317 	ldw	r2,12(r2)
  846e58:	e0bffa15 	stw	r2,-24(fp)

   if (nam->m_len < sizeof (*sin))
  846e5c:	e0bffe17 	ldw	r2,-8(fp)
  846e60:	10800217 	ldw	r2,8(r2)
  846e64:	10800428 	cmpgeui	r2,r2,16
  846e68:	1000031e 	bne	r2,zero,846e78 <in_pcbconnect+0x40>
      return (EINVAL);
  846e6c:	00800584 	movi	r2,22
  846e70:	e0bfff15 	stw	r2,-4(fp)
  846e74:	00006e06 	br	847030 <in_pcbconnect+0x1f8>
   if (sin->sin_family != AF_INET)
  846e78:	e0bffa17 	ldw	r2,-24(fp)
  846e7c:	1080000b 	ldhu	r2,0(r2)
  846e80:	10bfffcc 	andi	r2,r2,65535
  846e84:	10a0001c 	xori	r2,r2,32768
  846e88:	10a00004 	addi	r2,r2,-32768
  846e8c:	108000a0 	cmpeqi	r2,r2,2
  846e90:	1000031e 	bne	r2,zero,846ea0 <in_pcbconnect+0x68>
      return (EAFNOSUPPORT);
  846e94:	00801a84 	movi	r2,106
  846e98:	e0bfff15 	stw	r2,-4(fp)
  846e9c:	00006406 	br	847030 <in_pcbconnect+0x1f8>
   if (sin->sin_port == 0)
  846ea0:	e0bffa17 	ldw	r2,-24(fp)
  846ea4:	1080008b 	ldhu	r2,2(r2)
  846ea8:	10bfffcc 	andi	r2,r2,65535
  846eac:	1004c03a 	cmpne	r2,r2,zero
  846eb0:	1000031e 	bne	r2,zero,846ec0 <in_pcbconnect+0x88>
      return (EADDRNOTAVAIL);
  846eb4:	00801f44 	movi	r2,125
  846eb8:	e0bfff15 	stw	r2,-4(fp)
  846ebc:	00005c06 	br	847030 <in_pcbconnect+0x1f8>
    * use the primary local address.
    * If the supplied address is INADDR_BROADCAST,
    * and the primary interface supports broadcast,
    * choose the broadcast address for that interface.
    */
   if (sin->sin_addr.s_addr == INADDR_ANY)
  846ec0:	e0bffa17 	ldw	r2,-24(fp)
  846ec4:	10800117 	ldw	r2,4(r2)
  846ec8:	1004c03a 	cmpne	r2,r2,zero
  846ecc:	1000101e 	bne	r2,zero,846f10 <in_pcbconnect+0xd8>
   {
      if (inp && inp->ifp)
  846ed0:	e0bffd17 	ldw	r2,-12(fp)
  846ed4:	1005003a 	cmpeq	r2,r2,zero
  846ed8:	10000a1e 	bne	r2,zero,846f04 <in_pcbconnect+0xcc>
  846edc:	e0bffd17 	ldw	r2,-12(fp)
  846ee0:	10800a17 	ldw	r2,40(r2)
  846ee4:	1005003a 	cmpeq	r2,r2,zero
  846ee8:	1000061e 	bne	r2,zero,846f04 <in_pcbconnect+0xcc>
         sin->sin_addr.s_addr = inp->ifp->n_ipaddr;
  846eec:	e0bffd17 	ldw	r2,-12(fp)
  846ef0:	10800a17 	ldw	r2,40(r2)
  846ef4:	10c00a17 	ldw	r3,40(r2)
  846ef8:	e0bffa17 	ldw	r2,-24(fp)
  846efc:	10c00115 	stw	r3,4(r2)
  846f00:	00000a06 	br	846f2c <in_pcbconnect+0xf4>
      else
         return (EADDRNOTAVAIL);
  846f04:	00801f44 	movi	r2,125
  846f08:	e0bfff15 	stw	r2,-4(fp)
  846f0c:	00004806 	br	847030 <in_pcbconnect+0x1f8>
   }
   else if (sin->sin_addr.s_addr == INADDR_BROADCAST)
  846f10:	e0bffa17 	ldw	r2,-24(fp)
  846f14:	10800117 	ldw	r2,4(r2)
  846f18:	10bfffd8 	cmpnei	r2,r2,-1
  846f1c:	1000031e 	bne	r2,zero,846f2c <in_pcbconnect+0xf4>
      return (EADDRNOTAVAIL);
  846f20:	00801f44 	movi	r2,125
  846f24:	e0bfff15 	stw	r2,-4(fp)
  846f28:	00004106 	br	847030 <in_pcbconnect+0x1f8>


   if (inp->inp_laddr.s_addr == INADDR_ANY) 
  846f2c:	e0bffd17 	ldw	r2,-12(fp)
  846f30:	10800417 	ldw	r2,16(r2)
  846f34:	1004c03a 	cmpne	r2,r2,zero
  846f38:	10000f1e 	bne	r2,zero,846f78 <in_pcbconnect+0x140>
   {
#ifdef MULTI_HOMED
      ip_addr hop1;     /* dummy for pass to iproute() */
      NET npnet;     /* the netport iface we can send on */
      /* call netport stack's IP routing */
      npnet = iproute(sin->sin_addr.s_addr, &hop1);
  846f3c:	e0bffa17 	ldw	r2,-24(fp)
  846f40:	11000117 	ldw	r4,4(r2)
  846f44:	e17ffc04 	addi	r5,fp,-16
  846f48:	083f16c0 	call	83f16c <iproute>
  846f4c:	e0bff915 	stw	r2,-28(fp)
      if (!npnet)
  846f50:	e0bff917 	ldw	r2,-28(fp)
  846f54:	1004c03a 	cmpne	r2,r2,zero
  846f58:	1000031e 	bne	r2,zero,846f68 <in_pcbconnect+0x130>
         return EADDRNOTAVAIL;
  846f5c:	00801f44 	movi	r2,125
  846f60:	e0bfff15 	stw	r2,-4(fp)
  846f64:	00003206 	br	847030 <in_pcbconnect+0x1f8>
      ifaddr = npnet->n_ipaddr;  /* local address for this host */
  846f68:	e0bff917 	ldw	r2,-28(fp)
  846f6c:	10800a17 	ldw	r2,40(r2)
  846f70:	e0bffb15 	stw	r2,-20(fp)
  846f74:	00000306 	br	846f84 <in_pcbconnect+0x14c>
#else    /* not netport MULTI_HOMED, use 0th (only) iface */
      ifaddr = nets[0]->n_ipaddr;
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */
  846f78:	e0bffd17 	ldw	r2,-12(fp)
  846f7c:	10800417 	ldw	r2,16(r2)
  846f80:	e0bffb15 	stw	r2,-20(fp)

   if (in_pcblookup(inp->inp_head,
  846f84:	e0bffd17 	ldw	r2,-12(fp)
  846f88:	11000217 	ldw	r4,8(r2)
  846f8c:	e0bffa17 	ldw	r2,-24(fp)
  846f90:	11400117 	ldw	r5,4(r2)
  846f94:	e0bffa17 	ldw	r2,-24(fp)
  846f98:	1080008b 	ldhu	r2,2(r2)
  846f9c:	11bfffcc 	andi	r6,r2,65535
  846fa0:	e0bffd17 	ldw	r2,-12(fp)
  846fa4:	1080078b 	ldhu	r2,30(r2)
  846fa8:	10bfffcc 	andi	r2,r2,65535
  846fac:	d8800015 	stw	r2,0(sp)
  846fb0:	d8000115 	stw	zero,4(sp)
  846fb4:	e1fffb17 	ldw	r7,-20(fp)
  846fb8:	08471a00 	call	8471a0 <in_pcblookup>
  846fbc:	1005003a 	cmpeq	r2,r2,zero
  846fc0:	1000031e 	bne	r2,zero,846fd0 <in_pcbconnect+0x198>
       sin->sin_port,
       ifaddr,
       inp->inp_lport,
       0))
   {
      return (EADDRINUSE);
  846fc4:	00801c04 	movi	r2,112
  846fc8:	e0bfff15 	stw	r2,-4(fp)
  846fcc:	00001806 	br	847030 <in_pcbconnect+0x1f8>
   }
   if (inp->inp_laddr.s_addr == INADDR_ANY) 
  846fd0:	e0bffd17 	ldw	r2,-12(fp)
  846fd4:	10800417 	ldw	r2,16(r2)
  846fd8:	1004c03a 	cmpne	r2,r2,zero
  846fdc:	10000b1e 	bne	r2,zero,84700c <in_pcbconnect+0x1d4>
   {
      if (inp->inp_lport == 0)
  846fe0:	e0bffd17 	ldw	r2,-12(fp)
  846fe4:	1080078b 	ldhu	r2,30(r2)
  846fe8:	10bfffcc 	andi	r2,r2,65535
  846fec:	1004c03a 	cmpne	r2,r2,zero
  846ff0:	1000031e 	bne	r2,zero,847000 <in_pcbconnect+0x1c8>
         (void)in_pcbbind(inp, (struct mbuf *)0);
  846ff4:	e13ffd17 	ldw	r4,-12(fp)
  846ff8:	000b883a 	mov	r5,zero
  846ffc:	0846be40 	call	846be4 <in_pcbbind>
      inp->inp_laddr.s_addr = ifaddr;
  847000:	e0fffd17 	ldw	r3,-12(fp)
  847004:	e0bffb17 	ldw	r2,-20(fp)
  847008:	18800415 	stw	r2,16(r3)
   }
   inp->inp_faddr = sin->sin_addr;
  84700c:	e0bffa17 	ldw	r2,-24(fp)
  847010:	10c00117 	ldw	r3,4(r2)
  847014:	e0bffd17 	ldw	r2,-12(fp)
  847018:	10c00315 	stw	r3,12(r2)
   inp->inp_fport = sin->sin_port;
  84701c:	e0bffa17 	ldw	r2,-24(fp)
  847020:	10c0008b 	ldhu	r3,2(r2)
  847024:	e0bffd17 	ldw	r2,-12(fp)
  847028:	10c0070d 	sth	r3,28(r2)
   return 0;
  84702c:	e03fff15 	stw	zero,-4(fp)
  847030:	e0bfff17 	ldw	r2,-4(fp)
}
  847034:	e037883a 	mov	sp,fp
  847038:	dfc00117 	ldw	ra,4(sp)
  84703c:	df000017 	ldw	fp,0(sp)
  847040:	dec00204 	addi	sp,sp,8
  847044:	f800283a 	ret

00847048 <in_pcbdisconnect>:
 * RETURNS: 
 */

void
in_pcbdisconnect(struct inpcb * inp)
{
  847048:	defffd04 	addi	sp,sp,-12
  84704c:	dfc00215 	stw	ra,8(sp)
  847050:	df000115 	stw	fp,4(sp)
  847054:	df000104 	addi	fp,sp,4
  847058:	e13fff15 	stw	r4,-4(fp)

   inp->inp_faddr.s_addr = INADDR_ANY;
  84705c:	e0bfff17 	ldw	r2,-4(fp)
  847060:	10000315 	stw	zero,12(r2)
   inp->inp_fport = 0;
  847064:	e0bfff17 	ldw	r2,-4(fp)
  847068:	1000070d 	sth	zero,28(r2)
   if (inp->inp_socket->so_state & SS_NOFDREF)
  84706c:	e0bfff17 	ldw	r2,-4(fp)
  847070:	10800817 	ldw	r2,32(r2)
  847074:	1080088b 	ldhu	r2,34(r2)
  847078:	10bfffcc 	andi	r2,r2,65535
  84707c:	1080004c 	andi	r2,r2,1
  847080:	10803fcc 	andi	r2,r2,255
  847084:	1005003a 	cmpeq	r2,r2,zero
  847088:	1000021e 	bne	r2,zero,847094 <in_pcbdisconnect+0x4c>
      in_pcbdetach (inp);
  84708c:	e13fff17 	ldw	r4,-4(fp)
  847090:	0846b900 	call	846b90 <in_pcbdetach>
}
  847094:	e037883a 	mov	sp,fp
  847098:	dfc00117 	ldw	ra,4(sp)
  84709c:	df000017 	ldw	fp,0(sp)
  8470a0:	dec00204 	addi	sp,sp,8
  8470a4:	f800283a 	ret

008470a8 <in_setsockaddr>:
 */

void
in_setsockaddr(struct inpcb * inp, 
   struct mbuf *  nam)
{
  8470a8:	defffc04 	addi	sp,sp,-16
  8470ac:	df000315 	stw	fp,12(sp)
  8470b0:	df000304 	addi	fp,sp,12
  8470b4:	e13ffe15 	stw	r4,-8(fp)
  8470b8:	e17fff15 	stw	r5,-4(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
  8470bc:	e0ffff17 	ldw	r3,-4(fp)
  8470c0:	00800404 	movi	r2,16
  8470c4:	18800215 	stw	r2,8(r3)
   sin = mtod(nam, struct sockaddr_in *);
  8470c8:	e0bfff17 	ldw	r2,-4(fp)
  8470cc:	10800317 	ldw	r2,12(r2)
  8470d0:	e0bffd15 	stw	r2,-12(fp)
   MEMSET(sin, 0, sizeof (*sin));
  8470d4:	e0bffd17 	ldw	r2,-12(fp)
  8470d8:	10000015 	stw	zero,0(r2)
  8470dc:	10000115 	stw	zero,4(r2)
  8470e0:	10000215 	stw	zero,8(r2)
  8470e4:	10000315 	stw	zero,12(r2)
   sin->sin_family = AF_INET;
  8470e8:	e0fffd17 	ldw	r3,-12(fp)
  8470ec:	00800084 	movi	r2,2
  8470f0:	1880000d 	sth	r2,0(r3)
   sin->sin_port = inp->inp_lport;
  8470f4:	e0bffe17 	ldw	r2,-8(fp)
  8470f8:	10c0078b 	ldhu	r3,30(r2)
  8470fc:	e0bffd17 	ldw	r2,-12(fp)
  847100:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_laddr;
  847104:	e0bffe17 	ldw	r2,-8(fp)
  847108:	10c00417 	ldw	r3,16(r2)
  84710c:	e0bffd17 	ldw	r2,-12(fp)
  847110:	10c00115 	stw	r3,4(r2)
}
  847114:	e037883a 	mov	sp,fp
  847118:	df000017 	ldw	fp,0(sp)
  84711c:	dec00104 	addi	sp,sp,4
  847120:	f800283a 	ret

00847124 <in_setpeeraddr>:

void
in_setpeeraddr(
   struct inpcb * inp,
   struct mbuf *  nam)
{
  847124:	defffc04 	addi	sp,sp,-16
  847128:	df000315 	stw	fp,12(sp)
  84712c:	df000304 	addi	fp,sp,12
  847130:	e13ffe15 	stw	r4,-8(fp)
  847134:	e17fff15 	stw	r5,-4(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
  847138:	e0ffff17 	ldw	r3,-4(fp)
  84713c:	00800404 	movi	r2,16
  847140:	18800215 	stw	r2,8(r3)
   sin = mtod(nam, struct sockaddr_in *);
  847144:	e0bfff17 	ldw	r2,-4(fp)
  847148:	10800317 	ldw	r2,12(r2)
  84714c:	e0bffd15 	stw	r2,-12(fp)
   MEMSET(sin, 0, sizeof (*sin));
  847150:	e0bffd17 	ldw	r2,-12(fp)
  847154:	10000015 	stw	zero,0(r2)
  847158:	10000115 	stw	zero,4(r2)
  84715c:	10000215 	stw	zero,8(r2)
  847160:	10000315 	stw	zero,12(r2)
   sin->sin_family = AF_INET;
  847164:	e0fffd17 	ldw	r3,-12(fp)
  847168:	00800084 	movi	r2,2
  84716c:	1880000d 	sth	r2,0(r3)
   sin->sin_port = inp->inp_fport;
  847170:	e0bffe17 	ldw	r2,-8(fp)
  847174:	10c0070b 	ldhu	r3,28(r2)
  847178:	e0bffd17 	ldw	r2,-12(fp)
  84717c:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_faddr;
  847180:	e0bffe17 	ldw	r2,-8(fp)
  847184:	10c00317 	ldw	r3,12(r2)
  847188:	e0bffd17 	ldw	r2,-12(fp)
  84718c:	10c00115 	stw	r3,4(r2)
}
  847190:	e037883a 	mov	sp,fp
  847194:	df000017 	ldw	fp,0(sp)
  847198:	dec00104 	addi	sp,sp,4
  84719c:	f800283a 	ret

008471a0 <in_pcblookup>:
   u_long   faddr, 
   unshort  xfport,
   u_long   laddr,
   unshort  xlport,
   int   flags)
{
  8471a0:	defff404 	addi	sp,sp,-48
  8471a4:	df000b15 	stw	fp,44(sp)
  8471a8:	df000b04 	addi	fp,sp,44
  8471ac:	e13ffa15 	stw	r4,-24(fp)
  8471b0:	e17ffb15 	stw	r5,-20(fp)
  8471b4:	e1fffd15 	stw	r7,-12(fp)
  8471b8:	e0800117 	ldw	r2,4(fp)
  8471bc:	e1bffc0d 	sth	r6,-16(fp)
  8471c0:	e0bffe0d 	sth	r2,-8(fp)
   struct inpcb * inp, *   match =  0;
  8471c4:	e03ff815 	stw	zero,-32(fp)
   unshort  fport =  xfport; 
  8471c8:	e0bffc0b 	ldhu	r2,-16(fp)
  8471cc:	e0bff78d 	sth	r2,-34(fp)
   unshort  lport =  xlport;
  8471d0:	e0bffe0b 	ldhu	r2,-8(fp)
  8471d4:	e0bff70d 	sth	r2,-36(fp)
   int   matchwild   =  3;
  8471d8:	008000c4 	movi	r2,3
  8471dc:	e0bff615 	stw	r2,-40(fp)
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
  8471e0:	e0bffa17 	ldw	r2,-24(fp)
  8471e4:	10800017 	ldw	r2,0(r2)
  8471e8:	e0bff915 	stw	r2,-28(fp)
  8471ec:	00005006 	br	847330 <in_pcblookup+0x190>
   {
      if (inp->inp_lport != lport)
  8471f0:	e0bff917 	ldw	r2,-28(fp)
  8471f4:	1080078b 	ldhu	r2,30(r2)
  8471f8:	10ffffcc 	andi	r3,r2,65535
  8471fc:	e0bff70b 	ldhu	r2,-36(fp)
  847200:	1880481e 	bne	r3,r2,847324 <in_pcblookup+0x184>
         continue;

      /* Skip non IPv4 sockets */
      if(inp->inp_socket->so_domain != AF_INET)
  847204:	e0bff917 	ldw	r2,-28(fp)
  847208:	10800817 	ldw	r2,32(r2)
  84720c:	10800517 	ldw	r2,20(r2)
  847210:	10800098 	cmpnei	r2,r2,2
  847214:	1000431e 	bne	r2,zero,847324 <in_pcblookup+0x184>
         continue;

      wildcard = 0;
  847218:	e03ff515 	stw	zero,-44(fp)
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
  84721c:	e0bff917 	ldw	r2,-28(fp)
  847220:	10800417 	ldw	r2,16(r2)
  847224:	1005003a 	cmpeq	r2,r2,zero
  847228:	10000c1e 	bne	r2,zero,84725c <in_pcblookup+0xbc>
      {
         if (laddr == INADDR_ANY)
  84722c:	e0bffd17 	ldw	r2,-12(fp)
  847230:	1004c03a 	cmpne	r2,r2,zero
  847234:	1000041e 	bne	r2,zero,847248 <in_pcblookup+0xa8>
            wildcard++;
  847238:	e0bff517 	ldw	r2,-44(fp)
  84723c:	10800044 	addi	r2,r2,1
  847240:	e0bff515 	stw	r2,-44(fp)
  847244:	00000b06 	br	847274 <in_pcblookup+0xd4>
         else if (inp->inp_laddr.s_addr != laddr)
  847248:	e0bff917 	ldw	r2,-28(fp)
  84724c:	10c00417 	ldw	r3,16(r2)
  847250:	e0bffd17 	ldw	r2,-12(fp)
  847254:	1880331e 	bne	r3,r2,847324 <in_pcblookup+0x184>
            continue;
  847258:	00000606 	br	847274 <in_pcblookup+0xd4>
      }
      else 
      {
         if (laddr != INADDR_ANY)
  84725c:	e0bffd17 	ldw	r2,-12(fp)
  847260:	1005003a 	cmpeq	r2,r2,zero
  847264:	1000031e 	bne	r2,zero,847274 <in_pcblookup+0xd4>
            wildcard++;
  847268:	e0bff517 	ldw	r2,-44(fp)
  84726c:	10800044 	addi	r2,r2,1
  847270:	e0bff515 	stw	r2,-44(fp)
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
  847274:	e0bff917 	ldw	r2,-28(fp)
  847278:	10800317 	ldw	r2,12(r2)
  84727c:	1005003a 	cmpeq	r2,r2,zero
  847280:	1000111e 	bne	r2,zero,8472c8 <in_pcblookup+0x128>
      {
         if (faddr == INADDR_ANY)
  847284:	e0bffb17 	ldw	r2,-20(fp)
  847288:	1004c03a 	cmpne	r2,r2,zero
  84728c:	1000041e 	bne	r2,zero,8472a0 <in_pcblookup+0x100>
            wildcard++;
  847290:	e0bff517 	ldw	r2,-44(fp)
  847294:	10800044 	addi	r2,r2,1
  847298:	e0bff515 	stw	r2,-44(fp)
  84729c:	00001006 	br	8472e0 <in_pcblookup+0x140>
         else if (inp->inp_faddr.s_addr != faddr ||
  8472a0:	e0bff917 	ldw	r2,-28(fp)
  8472a4:	10c00317 	ldw	r3,12(r2)
  8472a8:	e0bffb17 	ldw	r2,-20(fp)
  8472ac:	18801d1e 	bne	r3,r2,847324 <in_pcblookup+0x184>
  8472b0:	e0bff917 	ldw	r2,-28(fp)
  8472b4:	1080070b 	ldhu	r2,28(r2)
  8472b8:	10ffffcc 	andi	r3,r2,65535
  8472bc:	e0bff78b 	ldhu	r2,-34(fp)
  8472c0:	1880181e 	bne	r3,r2,847324 <in_pcblookup+0x184>
  8472c4:	00000606 	br	8472e0 <in_pcblookup+0x140>
         {
            continue;
         }
      } else 
      {
         if (faddr != INADDR_ANY)
  8472c8:	e0bffb17 	ldw	r2,-20(fp)
  8472cc:	1005003a 	cmpeq	r2,r2,zero
  8472d0:	1000031e 	bne	r2,zero,8472e0 <in_pcblookup+0x140>
            wildcard++;
  8472d4:	e0bff517 	ldw	r2,-44(fp)
  8472d8:	10800044 	addi	r2,r2,1
  8472dc:	e0bff515 	stw	r2,-44(fp)
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
  8472e0:	e0bff517 	ldw	r2,-44(fp)
  8472e4:	1005003a 	cmpeq	r2,r2,zero
  8472e8:	1000041e 	bne	r2,zero,8472fc <in_pcblookup+0x15c>
  8472ec:	e0800217 	ldw	r2,8(fp)
  8472f0:	1080004c 	andi	r2,r2,1
  8472f4:	1005003a 	cmpeq	r2,r2,zero
  8472f8:	10000a1e 	bne	r2,zero,847324 <in_pcblookup+0x184>
         continue;
      if (wildcard < matchwild) 
  8472fc:	e0fff517 	ldw	r3,-44(fp)
  847300:	e0bff617 	ldw	r2,-40(fp)
  847304:	1880070e 	bge	r3,r2,847324 <in_pcblookup+0x184>
      {
         match = inp;
  847308:	e0bff917 	ldw	r2,-28(fp)
  84730c:	e0bff815 	stw	r2,-32(fp)
         matchwild = wildcard;
  847310:	e0bff517 	ldw	r2,-44(fp)
  847314:	e0bff615 	stw	r2,-40(fp)
         if (matchwild == 0)
  847318:	e0bff617 	ldw	r2,-40(fp)
  84731c:	1005003a 	cmpeq	r2,r2,zero
  847320:	1000061e 	bne	r2,zero,84733c <in_pcblookup+0x19c>
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
  847324:	e0bff917 	ldw	r2,-28(fp)
  847328:	10800017 	ldw	r2,0(r2)
  84732c:	e0bff915 	stw	r2,-28(fp)
  847330:	e0fff917 	ldw	r3,-28(fp)
  847334:	e0bffa17 	ldw	r2,-24(fp)
  847338:	18bfad1e 	bne	r3,r2,8471f0 <in_pcblookup+0x50>
         matchwild = wildcard;
         if (matchwild == 0)
            break;
      }
   }
   if (match == NULL)
  84733c:	e0bff817 	ldw	r2,-32(fp)
  847340:	1004c03a 	cmpne	r2,r2,zero
  847344:	1000031e 	bne	r2,zero,847354 <in_pcblookup+0x1b4>
      return match;
  847348:	e0bff817 	ldw	r2,-32(fp)
  84734c:	e0bfff15 	stw	r2,-4(fp)
  847350:	00002506 	br	8473e8 <in_pcblookup+0x248>

   if (head->inp_next == match)  /* got cache hit? */
  847354:	e0bffa17 	ldw	r2,-24(fp)
  847358:	10c00017 	ldw	r3,0(r2)
  84735c:	e0bff817 	ldw	r2,-32(fp)
  847360:	1880041e 	bne	r3,r2,847374 <in_pcblookup+0x1d4>
   {
      inpcb_cachehits++;
  847364:	d0a0d717 	ldw	r2,-31908(gp)
  847368:	10800044 	addi	r2,r2,1
  84736c:	d0a0d715 	stw	r2,-31908(gp)
  847370:	00001b06 	br	8473e0 <in_pcblookup+0x240>
   }
   else
   {
      inpcb_cachemiss++;
  847374:	d0a0d817 	ldw	r2,-31904(gp)
  847378:	10800044 	addi	r2,r2,1
  84737c:	d0a0d815 	stw	r2,-31904(gp)
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
  847380:	e0bff817 	ldw	r2,-32(fp)
  847384:	10c00017 	ldw	r3,0(r2)
  847388:	e0bff817 	ldw	r2,-32(fp)
  84738c:	10800117 	ldw	r2,4(r2)
  847390:	18800115 	stw	r2,4(r3)
      match->inp_prev->inp_next = match->inp_next;
  847394:	e0bff817 	ldw	r2,-32(fp)
  847398:	10c00117 	ldw	r3,4(r2)
  84739c:	e0bff817 	ldw	r2,-32(fp)
  8473a0:	10800017 	ldw	r2,0(r2)
  8473a4:	18800015 	stw	r2,0(r3)

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
  8473a8:	e0bffa17 	ldw	r2,-24(fp)
  8473ac:	10c00017 	ldw	r3,0(r2)
  8473b0:	e0bff817 	ldw	r2,-32(fp)
  8473b4:	10c00015 	stw	r3,0(r2)
      head->inp_next = match;
  8473b8:	e0fffa17 	ldw	r3,-24(fp)
  8473bc:	e0bff817 	ldw	r2,-32(fp)
  8473c0:	18800015 	stw	r2,0(r3)
      match->inp_prev = head;
  8473c4:	e0fff817 	ldw	r3,-32(fp)
  8473c8:	e0bffa17 	ldw	r2,-24(fp)
  8473cc:	18800115 	stw	r2,4(r3)
      match->inp_next->inp_prev = match;
  8473d0:	e0bff817 	ldw	r2,-32(fp)
  8473d4:	10c00017 	ldw	r3,0(r2)
  8473d8:	e0bff817 	ldw	r2,-32(fp)
  8473dc:	18800115 	stw	r2,4(r3)
   }
   return (match);
  8473e0:	e0bff817 	ldw	r2,-32(fp)
  8473e4:	e0bfff15 	stw	r2,-4(fp)
  8473e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8473ec:	e037883a 	mov	sp,fp
  8473f0:	df000017 	ldw	fp,0(sp)
  8473f4:	dec00104 	addi	sp,sp,4
  8473f8:	f800283a 	ret

008473fc <set_vfopen_error>:
 *
 * RETURNS: 
 */

void set_vfopen_error(int error)
{
  8473fc:	defffe04 	addi	sp,sp,-8
  847400:	df000115 	stw	fp,4(sp)
  847404:	df000104 	addi	fp,sp,4
  847408:	e13fff15 	stw	r4,-4(fp)
   vfopen_error = error;
  84740c:	e0bfff17 	ldw	r2,-4(fp)
  847410:	d0a0dc15 	stw	r2,-31888(gp)
}
  847414:	e037883a 	mov	sp,fp
  847418:	df000017 	ldw	fp,0(sp)
  84741c:	dec00104 	addi	sp,sp,4
  847420:	f800283a 	ret

00847424 <get_vfopen_error>:
 *
 * RETURNS: 
 */

int get_vfopen_error()
{
  847424:	deffff04 	addi	sp,sp,-4
  847428:	df000015 	stw	fp,0(sp)
  84742c:	d839883a 	mov	fp,sp
   return vfopen_error;
  847430:	d0a0dc17 	ldw	r2,-31888(gp)
}
  847434:	e037883a 	mov	sp,fp
  847438:	df000017 	ldw	fp,0(sp)
  84743c:	dec00104 	addi	sp,sp,4
  847440:	f800283a 	ret

00847444 <vf_alloc_and_link_vop>:
 *
 * RETURNS: 
 */

VFILE * vf_alloc_and_link_vop()
{
  847444:	defffc04 	addi	sp,sp,-16
  847448:	dfc00315 	stw	ra,12(sp)
  84744c:	df000215 	stw	fp,8(sp)
  847450:	df000204 	addi	fp,sp,8
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
  847454:	d0a0de17 	ldw	r2,-31880(gp)
  847458:	10803ff0 	cmpltui	r2,r2,255
  84745c:	1000021e 	bne	r2,zero,847468 <vf_alloc_and_link_vop+0x24>
   {
#ifdef VFS_VERBOSE
      dprintf("vfs_open_files too big (%ld) in vf_alloc_and_link_vop()\n",
       vfs_open_files);
#endif   /* VFS_VERBOSE */
      return NULL;
  847460:	e03fff15 	stw	zero,-4(fp)
  847464:	00001006 	br	8474a8 <vf_alloc_and_link_vop+0x64>
   }

   /* allocate a structure to represent the open file */
   vop = VFS_VFS_OPEN_ALLOC();
  847468:	01000504 	movi	r4,20
  84746c:	082b20c0 	call	82b20c <npalloc>
  847470:	e0bffe15 	stw	r2,-8(fp)

   /* if the allocation succeeded */
   if (vop)
  847474:	e0bffe17 	ldw	r2,-8(fp)
  847478:	1005003a 	cmpeq	r2,r2,zero
  84747c:	1000081e 	bne	r2,zero,8474a0 <vf_alloc_and_link_vop+0x5c>
   {
      /* add to the beginning of the list of open files */
      vop->next = vfiles;
  847480:	d0e0da17 	ldw	r3,-31896(gp)
  847484:	e0bffe17 	ldw	r2,-8(fp)
  847488:	10c00015 	stw	r3,0(r2)
      vfiles = vop;
  84748c:	e0bffe17 	ldw	r2,-8(fp)
  847490:	d0a0da15 	stw	r2,-31896(gp)
      /* increment the count of open files */
      vfs_open_files++;
  847494:	d0a0de17 	ldw	r2,-31880(gp)
  847498:	10800044 	addi	r2,r2,1
  84749c:	d0a0de15 	stw	r2,-31880(gp)
#ifdef VFS_VERBOSE
   else
      dprintf("VFS_VFS_OPEN_ALLOC() failed in vf_alloc_and_link_vop()\n");
#endif   /* VFS_VERBOSE */

   return vop;
  8474a0:	e0bffe17 	ldw	r2,-8(fp)
  8474a4:	e0bfff15 	stw	r2,-4(fp)
  8474a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8474ac:	e037883a 	mov	sp,fp
  8474b0:	dfc00117 	ldw	ra,4(sp)
  8474b4:	df000017 	ldw	fp,0(sp)
  8474b8:	dec00204 	addi	sp,sp,8
  8474bc:	f800283a 	ret

008474c0 <vf_alloc_buffer>:
 *
 * RETURNS: 
 */

unsigned char * vf_alloc_buffer(unsigned long size)
{
  8474c0:	defff804 	addi	sp,sp,-32
  8474c4:	dfc00715 	stw	ra,28(sp)
  8474c8:	df000615 	stw	fp,24(sp)
  8474cc:	df000604 	addi	fp,sp,24
  8474d0:	e13ffe15 	stw	r4,-8(fp)
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
  8474d4:	d0e0df17 	ldw	r3,-31876(gp)
  8474d8:	e0bffe17 	ldw	r2,-8(fp)
  8474dc:	1887883a 	add	r3,r3,r2
  8474e0:	00bfffd4 	movui	r2,65535
  8474e4:	10c0022e 	bgeu	r2,r3,8474f0 <vf_alloc_buffer+0x30>
      return NULL;
  8474e8:	e03fff15 	stw	zero,-4(fp)
  8474ec:	00002406 	br	847580 <vf_alloc_buffer+0xc0>
    * any bigger than what will fit in an unsigned int 
    */
#ifdef MUTE_WARNS
   /* the idiotic hoops you got to jump through to suppress compiler
      warnings */
   long_size   =  sizeof(unsigned   long);
  8474f0:	00800104 	movi	r2,4
  8474f4:	e0bffc15 	stw	r2,-16(fp)
   int_size = sizeof(unsigned int);
  8474f8:	00800104 	movi	r2,4
  8474fc:	e0bffb15 	stw	r2,-20(fp)
   if (long_size > int_size)
  847500:	e0fffc17 	ldw	r3,-16(fp)
  847504:	e0bffb17 	ldw	r2,-20(fp)
  847508:	10c0112e 	bgeu	r2,r3,847550 <vf_alloc_buffer+0x90>
       * most systems where this "if" expression will evaluate to 
       * true (2 byte ints, 4 byte longs). if any of those upper bits 
       * are on in your requested size, you otta luck.
       */
#ifdef MUTE_WARNS
      switch (int_size)
  84750c:	e0bffb17 	ldw	r2,-20(fp)
  847510:	108000a0 	cmpeqi	r2,r2,2
  847514:	1000011e 	bne	r2,zero,84751c <vf_alloc_buffer+0x5c>
  847518:	00000806 	br	84753c <vf_alloc_buffer+0x7c>
#else
      switch (sizeof(unsigned int))
#endif   /* MUTE_WARNS */
      {
      case 2 :
         mem_mask = 0xffff0000;
  84751c:	00bffff4 	movhi	r2,65535
  847520:	e0bffa15 	stw	r2,-24(fp)
         default :
            dtrap();    /* you have a weird compiler */
         return NULL;
      }

      if (size & mem_mask)
  847524:	e0fffe17 	ldw	r3,-8(fp)
  847528:	e0bffa17 	ldw	r2,-24(fp)
  84752c:	1884703a 	and	r2,r3,r2
  847530:	1004c03a 	cmpne	r2,r2,zero
  847534:	1000041e 	bne	r2,zero,847548 <vf_alloc_buffer+0x88>
  847538:	00000506 	br	847550 <vf_alloc_buffer+0x90>
      {
      case 2 :
         mem_mask = 0xffff0000;
         break;
         default :
            dtrap();    /* you have a weird compiler */
  84753c:	082a7c80 	call	82a7c8 <dtrap>
         return NULL;
  847540:	e03fff15 	stw	zero,-4(fp)
  847544:	00000e06 	br	847580 <vf_alloc_buffer+0xc0>
      }

      if (size & mem_mask)
         return NULL;
  847548:	e03fff15 	stw	zero,-4(fp)
  84754c:	00000c06 	br	847580 <vf_alloc_buffer+0xc0>
   }

   /* try to allocate a buffer of the requested size */
   buffer = (unsigned char *) npalloc((unsigned int) size);
  847550:	e13ffe17 	ldw	r4,-8(fp)
  847554:	082b20c0 	call	82b20c <npalloc>
  847558:	e0bffd15 	stw	r2,-12(fp)

   /* if the allocation succeeded */
   if (buffer)
  84755c:	e0bffd17 	ldw	r2,-12(fp)
  847560:	1005003a 	cmpeq	r2,r2,zero
  847564:	1000041e 	bne	r2,zero,847578 <vf_alloc_buffer+0xb8>
   {
      /* add size to the count of total buffer space allocated */
      vfs_total_rw_space += size;
  847568:	d0a0df17 	ldw	r2,-31876(gp)
  84756c:	e0fffe17 	ldw	r3,-8(fp)
  847570:	10c5883a 	add	r2,r2,r3
  847574:	d0a0df15 	stw	r2,-31876(gp)
   }

   return buffer;
  847578:	e0bffd17 	ldw	r2,-12(fp)
  84757c:	e0bfff15 	stw	r2,-4(fp)
  847580:	e0bfff17 	ldw	r2,-4(fp)
}
  847584:	e037883a 	mov	sp,fp
  847588:	dfc00117 	ldw	ra,4(sp)
  84758c:	df000017 	ldw	fp,0(sp)
  847590:	dec00204 	addi	sp,sp,8
  847594:	f800283a 	ret

00847598 <vf_free_buffer>:
 *
 * RETURNS: 
 */

void vf_free_buffer(unsigned char * buffer, unsigned long size)
{
  847598:	defffc04 	addi	sp,sp,-16
  84759c:	dfc00315 	stw	ra,12(sp)
  8475a0:	df000215 	stw	fp,8(sp)
  8475a4:	df000204 	addi	fp,sp,8
  8475a8:	e13ffe15 	stw	r4,-8(fp)
  8475ac:	e17fff15 	stw	r5,-4(fp)
   /* free the buffer */
   if (buffer)
  8475b0:	e0bffe17 	ldw	r2,-8(fp)
  8475b4:	1005003a 	cmpeq	r2,r2,zero
  8475b8:	1000021e 	bne	r2,zero,8475c4 <vf_free_buffer+0x2c>
      npfree(buffer);
  8475bc:	e13ffe17 	ldw	r4,-8(fp)
  8475c0:	082b3000 	call	82b300 <npfree>

   /* and subtract its size from the total buffer space count */
   vfs_total_rw_space -= size;
  8475c4:	d0a0df17 	ldw	r2,-31876(gp)
  8475c8:	e0ffff17 	ldw	r3,-4(fp)
  8475cc:	10c5c83a 	sub	r2,r2,r3
  8475d0:	d0a0df15 	stw	r2,-31876(gp)
}
  8475d4:	e037883a 	mov	sp,fp
  8475d8:	dfc00117 	ldw	ra,4(sp)
  8475dc:	df000017 	ldw	fp,0(sp)
  8475e0:	dec00204 	addi	sp,sp,8
  8475e4:	f800283a 	ret

008475e8 <vfopen_locked>:
 * RETURNS: 
 */

VFILE *
vfopen_locked(char * name, char * mode)
{
  8475e8:	defff804 	addi	sp,sp,-32
  8475ec:	dfc00715 	stw	ra,28(sp)
  8475f0:	df000615 	stw	fp,24(sp)
  8475f4:	df000604 	addi	fp,sp,24
  8475f8:	e13ffd15 	stw	r4,-12(fp)
  8475fc:	e17ffe15 	stw	r5,-8(fp)
   struct vfs_file * vfp;
   struct vfs_open * vop;

   /* clear any previous vfopen() error */
   set_vfopen_error(0);
  847600:	0009883a 	mov	r4,zero
  847604:	08473fc0 	call	8473fc <set_vfopen_error>

   /* the old code used to do special handling of '?' in files for 
    * the benefit of the web server. the web server should be doing 
    * this now. this is here to make sure that its doing it 
    */
   if (strchr(name,'?'))
  847608:	e13ffd17 	ldw	r4,-12(fp)
  84760c:	01400fc4 	movi	r5,63
  847610:	0807fa80 	call	807fa8 <strchr>
  847614:	1005003a 	cmpeq	r2,r2,zero
  847618:	1000031e 	bne	r2,zero,847628 <vfopen_locked+0x40>
   {
      dtrap();
  84761c:	082a7c80 	call	82a7c8 <dtrap>
      return NULL;
  847620:	e03fff15 	stw	zero,-4(fp)
  847624:	0000c406 	br	847938 <vfopen_locked+0x350>
   }

   /* determine if the file exists */
   /* if the directory exists, vfp will point to its directory entry
      structure else vfp will be NULL */
   vfp = vfslookup_locked(name);
  847628:	e13ffd17 	ldw	r4,-12(fp)
  84762c:	08489940 	call	848994 <vfslookup_locked>
  847630:	e0bffc15 	stw	r2,-16(fp)

   /* if the file exists */
   if (vfp)
  847634:	e0bffc17 	ldw	r2,-16(fp)
  847638:	1005003a 	cmpeq	r2,r2,zero
  84763c:	10004e1e 	bne	r2,zero,847778 <vfopen_locked+0x190>

#ifdef HT_RWVFS

      /* if mode begins with 'w' we will truncate to end of file */
      /* make sure the file is writable before proceeding */
      if ((*mode == 'w') && !(vfp->flags & VF_WRITE))
  847640:	e0bffe17 	ldw	r2,-8(fp)
  847644:	10800003 	ldbu	r2,0(r2)
  847648:	10803fcc 	andi	r2,r2,255
  84764c:	1080201c 	xori	r2,r2,128
  847650:	10bfe004 	addi	r2,r2,-128
  847654:	10801dd8 	cmpnei	r2,r2,119
  847658:	10000a1e 	bne	r2,zero,847684 <vfopen_locked+0x9c>
  84765c:	e0bffc17 	ldw	r2,-16(fp)
  847660:	1080058b 	ldhu	r2,22(r2)
  847664:	10bfffcc 	andi	r2,r2,65535
  847668:	1080080c 	andi	r2,r2,32
  84766c:	1004c03a 	cmpne	r2,r2,zero
  847670:	1000041e 	bne	r2,zero,847684 <vfopen_locked+0x9c>
      {
         set_vfopen_error(ENP_FILEIO);
  847674:	013ff984 	movi	r4,-26
  847678:	08473fc0 	call	8473fc <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("mode w with no VF_WRITE\n");
#endif   /* VFS_VERBOSE */
         return NULL;
  84767c:	e03fff15 	stw	zero,-4(fp)
  847680:	0000ad06 	br	847938 <vfopen_locked+0x350>
      }

#endif   /* HT_RWVFS */

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
  847684:	08474440 	call	847444 <vf_alloc_and_link_vop>
  847688:	e0bffb15 	stw	r2,-20(fp)

      /* check for failure */
      if (!vop)
  84768c:	e0bffb17 	ldw	r2,-20(fp)
  847690:	1004c03a 	cmpne	r2,r2,zero
  847694:	1000041e 	bne	r2,zero,8476a8 <vfopen_locked+0xc0>
      {
         set_vfopen_error(ENP_NOMEM);
  847698:	013ffb04 	movi	r4,-20
  84769c:	08473fc0 	call	8473fc <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 1\n");
#endif   /* VFS_VERBOSE */
         return NULL;
  8476a0:	e03fff15 	stw	zero,-4(fp)
  8476a4:	0000a406 	br	847938 <vfopen_locked+0x350>
      }

      /* link to the file's directory entry structure */
      vop->file = vfp;
  8476a8:	e0fffb17 	ldw	r3,-20(fp)
  8476ac:	e0bffc17 	ldw	r2,-16(fp)
  8476b0:	18800115 	stw	r2,4(r3)

      /* by default start at the beginning of the file */
      /* note that vfp->data could be NULL at this point since empty
         files might have no data buffer allocated to them */
      vop->cmploc = vfp->data;   /* start at beginning of file */
  8476b4:	e0bffc17 	ldw	r2,-16(fp)
  8476b8:	10c00617 	ldw	r3,24(r2)
  8476bc:	e0bffb17 	ldw	r2,-20(fp)
  8476c0:	10c00215 	stw	r3,8(r2)

#ifdef HT_RWVFS

      /* if mode begins with 'a', seek to end of file */
      if (*mode == 'a')
  8476c4:	e0bffe17 	ldw	r2,-8(fp)
  8476c8:	10800003 	ldbu	r2,0(r2)
  8476cc:	10803fcc 	andi	r2,r2,255
  8476d0:	1080201c 	xori	r2,r2,128
  8476d4:	10bfe004 	addi	r2,r2,-128
  8476d8:	10801858 	cmpnei	r2,r2,97
  8476dc:	10000b1e 	bne	r2,zero,84770c <vfopen_locked+0x124>
      {
         if (vfp->data)
  8476e0:	e0bffc17 	ldw	r2,-16(fp)
  8476e4:	10800617 	ldw	r2,24(r2)
  8476e8:	1005003a 	cmpeq	r2,r2,zero
  8476ec:	1000071e 	bne	r2,zero,84770c <vfopen_locked+0x124>
         {
            vop->cmploc = vfp->data + vfp->comp_size;
  8476f0:	e0bffc17 	ldw	r2,-16(fp)
  8476f4:	10c00617 	ldw	r3,24(r2)
  8476f8:	e0bffc17 	ldw	r2,-16(fp)
  8476fc:	10800817 	ldw	r2,32(r2)
  847700:	1887883a 	add	r3,r3,r2
  847704:	e0bffb17 	ldw	r2,-20(fp)
  847708:	10c00215 	stw	r3,8(r2)
         }
      }

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
  84770c:	e0bffe17 	ldw	r2,-8(fp)
  847710:	10800003 	ldbu	r2,0(r2)
  847714:	10803fcc 	andi	r2,r2,255
  847718:	1080201c 	xori	r2,r2,128
  84771c:	10bfe004 	addi	r2,r2,-128
  847720:	10801dd8 	cmpnei	r2,r2,119
  847724:	1000111e 	bne	r2,zero,84776c <vfopen_locked+0x184>
      {
         /* set the size of the file before compression to 0 */
         vfp->real_size = 0;
  847728:	e0bffc17 	ldw	r2,-16(fp)
  84772c:	10000715 	stw	zero,28(r2)
         /* set the size of the compressed data to 0 */
         vfp->comp_size = 0;
  847730:	e0bffc17 	ldw	r2,-16(fp)
  847734:	10000815 	stw	zero,32(r2)
         /* note we leave the pointer to the file buffer and its length
            alone since first writes will go to it */
         /* flag that the file has been modified */
         vfp->flags |= VF_STALE;
  847738:	e0bffc17 	ldw	r2,-16(fp)
  84773c:	1080058b 	ldhu	r2,22(r2)
  847740:	10808014 	ori	r2,r2,512
  847744:	1007883a 	mov	r3,r2
  847748:	e0bffc17 	ldw	r2,-16(fp)
  84774c:	10c0058d 	sth	r3,22(r2)

         /* turn off the compression flag */
         vfp->flags &= ~VF_HTMLCOMPRESSED;
  847750:	e0bffc17 	ldw	r2,-16(fp)
  847754:	10c0058b 	ldhu	r3,22(r2)
  847758:	00bfff84 	movi	r2,-2
  84775c:	1884703a 	and	r2,r3,r2
  847760:	1007883a 	mov	r3,r2
  847764:	e0bffc17 	ldw	r2,-16(fp)
  847768:	10c0058d 	sth	r3,22(r2)
      }

#endif   /* HT_RWVFS */

      return vop;
  84776c:	e0bffb17 	ldw	r2,-20(fp)
  847770:	e0bfff15 	stw	r2,-4(fp)
  847774:	00007006 	br	847938 <vfopen_locked+0x350>

#ifdef HT_EXTDEV

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
  847778:	e0bffe17 	ldw	r2,-8(fp)
  84777c:	10800003 	ldbu	r2,0(r2)
  847780:	10803fcc 	andi	r2,r2,255
  847784:	1080201c 	xori	r2,r2,128
  847788:	10bfe004 	addi	r2,r2,-128
  84778c:	10801ca0 	cmpeqi	r2,r2,114
  847790:	1000151e 	bne	r2,zero,8477e8 <vfopen_locked+0x200>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
  847794:	d0a0d917 	ldw	r2,-31900(gp)
  847798:	e0bffa15 	stw	r2,-24(fp)
  84779c:	00000f06 	br	8477dc <vfopen_locked+0x1f4>
      {
         if ((vop = vfs->r_fopen(name, mode)) != NULL)
  8477a0:	e0bffa17 	ldw	r2,-24(fp)
  8477a4:	10800117 	ldw	r2,4(r2)
  8477a8:	e13ffd17 	ldw	r4,-12(fp)
  8477ac:	e17ffe17 	ldw	r5,-8(fp)
  8477b0:	103ee83a 	callr	r2
  8477b4:	e0bffb15 	stw	r2,-20(fp)
  8477b8:	e0bffb17 	ldw	r2,-20(fp)
  8477bc:	1005003a 	cmpeq	r2,r2,zero
  8477c0:	1000031e 	bne	r2,zero,8477d0 <vfopen_locked+0x1e8>
         {
            return vop;
  8477c4:	e0bffb17 	ldw	r2,-20(fp)
  8477c8:	e0bfff15 	stw	r2,-4(fp)
  8477cc:	00005a06 	br	847938 <vfopen_locked+0x350>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
  8477d0:	e0bffa17 	ldw	r2,-24(fp)
  8477d4:	10800017 	ldw	r2,0(r2)
  8477d8:	e0bffa15 	stw	r2,-24(fp)
  8477dc:	e0bffa17 	ldw	r2,-24(fp)
  8477e0:	1004c03a 	cmpne	r2,r2,zero
  8477e4:	103fee1e 	bne	r2,zero,8477a0 <vfopen_locked+0x1b8>

#ifdef HT_RWVFS

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
  8477e8:	e0bffe17 	ldw	r2,-8(fp)
  8477ec:	10800003 	ldbu	r2,0(r2)
  8477f0:	10803fcc 	andi	r2,r2,255
  8477f4:	1080201c 	xori	r2,r2,128
  8477f8:	10bfe004 	addi	r2,r2,-128
  8477fc:	10801ca0 	cmpeqi	r2,r2,114
  847800:	10004a1e 	bne	r2,zero,84792c <vfopen_locked+0x344>
   {
      /* enforce maximum number of files */
      if (vfs_total_dyna_files >= VFS_MAX_DYNA_FILES)
  847804:	d0a0e017 	ldw	r2,-31872(gp)
  847808:	10803ff0 	cmpltui	r2,r2,255
  84780c:	1000041e 	bne	r2,zero,847820 <vfopen_locked+0x238>
      {
         set_vfopen_error(ENP_NOMEM);
  847810:	013ffb04 	movi	r4,-20
  847814:	08473fc0 	call	8473fc <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_total_dyna_files too big in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
  847818:	e03fff15 	stw	zero,-4(fp)
  84781c:	00004606 	br	847938 <vfopen_locked+0x350>
      }

      /* make sure the file name is not too long for the VFS */
      if (strlen(name) > FILENAMEMAX)
  847820:	e13ffd17 	ldw	r4,-12(fp)
  847824:	08088440 	call	808844 <strlen>
  847828:	10800470 	cmpltui	r2,r2,17
  84782c:	1000041e 	bne	r2,zero,847840 <vfopen_locked+0x258>
      {
         set_vfopen_error(ENP_PARAM);
  847830:	013ffd84 	movi	r4,-10
  847834:	08473fc0 	call	8473fc <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("file name too long in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
  847838:	e03fff15 	stw	zero,-4(fp)
  84783c:	00003e06 	br	847938 <vfopen_locked+0x350>
      }

      /* allocate a vfs_file structure to hold the new file entry in */
      vfp = VFS_VFS_FILE_ALLOC();
  847840:	01000b04 	movi	r4,44
  847844:	082b20c0 	call	82b20c <npalloc>
  847848:	e0bffc15 	stw	r2,-16(fp)

      /* check for memory allocation failure */
      if (!vfp)
  84784c:	e0bffc17 	ldw	r2,-16(fp)
  847850:	1004c03a 	cmpne	r2,r2,zero
  847854:	1000041e 	bne	r2,zero,847868 <vfopen_locked+0x280>
      {
         set_vfopen_error(ENP_NOMEM);
  847858:	013ffb04 	movi	r4,-20
  84785c:	08473fc0 	call	8473fc <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("VFS_VFS_FILE_ALLOC() failed in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
  847860:	e03fff15 	stw	zero,-4(fp)
  847864:	00003406 	br	847938 <vfopen_locked+0x350>
      }

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
  847868:	08474440 	call	847444 <vf_alloc_and_link_vop>
  84786c:	e0bffb15 	stw	r2,-20(fp)

      /* check for memory allocation failure */
      if (!vop)
  847870:	e0bffb17 	ldw	r2,-20(fp)
  847874:	1004c03a 	cmpne	r2,r2,zero
  847878:	1000061e 	bne	r2,zero,847894 <vfopen_locked+0x2ac>
      {
         VFS_VFS_FILE_FREE(vfp); /* free the allocated vfs_file entry */
  84787c:	e13ffc17 	ldw	r4,-16(fp)
  847880:	082b3000 	call	82b300 <npfree>
         set_vfopen_error(ENP_NOMEM);
  847884:	013ffb04 	movi	r4,-20
  847888:	08473fc0 	call	8473fc <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 2\n");
#endif   /* VFS_VERBOSE */
         return NULL;
  84788c:	e03fff15 	stw	zero,-4(fp)
  847890:	00002906 	br	847938 <vfopen_locked+0x350>
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
  847894:	d0e0db17 	ldw	r3,-31892(gp)
  847898:	e0bffc17 	ldw	r2,-16(fp)
  84789c:	10c00015 	stw	r3,0(r2)
      vfsfiles = vfp;
  8478a0:	e0bffc17 	ldw	r2,-16(fp)
  8478a4:	d0a0db15 	stw	r2,-31892(gp)

      /* increment count of total files */
      vfs_total_dyna_files++;
  8478a8:	d0a0e017 	ldw	r2,-31872(gp)
  8478ac:	10800044 	addi	r2,r2,1
  8478b0:	d0a0e015 	stw	r2,-31872(gp)

      /* remove leading directory separator before storing name */
      if (*name == '/' || *name == '\\')
  8478b4:	e0bffd17 	ldw	r2,-12(fp)
  8478b8:	10800003 	ldbu	r2,0(r2)
  8478bc:	10803fcc 	andi	r2,r2,255
  8478c0:	1080201c 	xori	r2,r2,128
  8478c4:	10bfe004 	addi	r2,r2,-128
  8478c8:	10800be0 	cmpeqi	r2,r2,47
  8478cc:	1000071e 	bne	r2,zero,8478ec <vfopen_locked+0x304>
  8478d0:	e0bffd17 	ldw	r2,-12(fp)
  8478d4:	10800003 	ldbu	r2,0(r2)
  8478d8:	10803fcc 	andi	r2,r2,255
  8478dc:	1080201c 	xori	r2,r2,128
  8478e0:	10bfe004 	addi	r2,r2,-128
  8478e4:	10801718 	cmpnei	r2,r2,92
  8478e8:	1000031e 	bne	r2,zero,8478f8 <vfopen_locked+0x310>
         name++;
  8478ec:	e0bffd17 	ldw	r2,-12(fp)
  8478f0:	10800044 	addi	r2,r2,1
  8478f4:	e0bffd15 	stw	r2,-12(fp)

      /* store the converted name in the directory entry structure */
      strcpy(vfp->name,name);
  8478f8:	e0bffc17 	ldw	r2,-16(fp)
  8478fc:	11000104 	addi	r4,r2,4
  847900:	e17ffd17 	ldw	r5,-12(fp)
  847904:	08081440 	call	808144 <strcpy>

      /* set the flags */
      vfp->flags = VF_DYNAMICINFO   /* the directory entry was allocated */
  847908:	e0fffc17 	ldw	r3,-16(fp)
  84790c:	0080d804 	movi	r2,864
  847910:	1880058d 	sth	r2,22(r3)
       * note that this means the data pointer contains a null 
       * because we don't allocate any buffer to hold the data 
       * in until the first write 
       */
      /* link to the file's directory entry structure */
      vop->file = vfp;
  847914:	e0fffb17 	ldw	r3,-20(fp)
  847918:	e0bffc17 	ldw	r2,-16(fp)
  84791c:	18800115 	stw	r2,4(r3)
      /* the cmploc and tag fields of the vop retain their NULLs from 
       * npalloc(). cmploc contains NULL because there is no data 
       * buffer to point to yet. tag contains NULL because no 
       * decompression operation has started yet
       */
      return vop;
  847920:	e0bffb17 	ldw	r2,-20(fp)
  847924:	e0bfff15 	stw	r2,-4(fp)
  847928:	00000306 	br	847938 <vfopen_locked+0x350>
   /* pass the open to the local file system */
   return (VFILE *) fopen(name,mode);

#else

   set_vfopen_error(ENP_NOFILE);
  84792c:	013ff9c4 	movi	r4,-25
  847930:	08473fc0 	call	8473fc <set_vfopen_error>
#ifdef VFS_VERBOSE
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;
  847934:	e03fff15 	stw	zero,-4(fp)
  847938:	e0bfff17 	ldw	r2,-4(fp)

#endif   /* HT_LOCALFS */
}
  84793c:	e037883a 	mov	sp,fp
  847940:	dfc00117 	ldw	ra,4(sp)
  847944:	df000017 	ldw	fp,0(sp)
  847948:	dec00204 	addi	sp,sp,8
  84794c:	f800283a 	ret

00847950 <vfopen>:
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
  847950:	defffb04 	addi	sp,sp,-20
  847954:	dfc00415 	stw	ra,16(sp)
  847958:	df000315 	stw	fp,12(sp)
  84795c:	df000304 	addi	fp,sp,12
  847960:	e13ffe15 	stw	r4,-8(fp)
  847964:	e17fff15 	stw	r5,-4(fp)
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
  847968:	01000144 	movi	r4,5
  84796c:	082adc40 	call	82adc4 <wait_app_sem>

   vfd = vfopen_locked(name,mode);
  847970:	e13ffe17 	ldw	r4,-8(fp)
  847974:	e17fff17 	ldw	r5,-4(fp)
  847978:	08475e80 	call	8475e8 <vfopen_locked>
  84797c:	e0bffd15 	stw	r2,-12(fp)

   vfs_unlock();
  847980:	01000144 	movi	r4,5
  847984:	082ae780 	call	82ae78 <post_app_sem>

   return vfd;
  847988:	e0bffd17 	ldw	r2,-12(fp)
}
  84798c:	e037883a 	mov	sp,fp
  847990:	dfc00117 	ldw	ra,4(sp)
  847994:	df000017 	ldw	fp,0(sp)
  847998:	dec00204 	addi	sp,sp,8
  84799c:	f800283a 	ret

008479a0 <vfclose_locked>:
 * RETURNS: 
 */

void 
vfclose_locked(VFILE * vfd)
{
  8479a0:	defff804 	addi	sp,sp,-32
  8479a4:	dfc00715 	stw	ra,28(sp)
  8479a8:	df000615 	stw	fp,24(sp)
  8479ac:	df000604 	addi	fp,sp,24
  8479b0:	e13fff15 	stw	r4,-4(fp)
   VFILE * vtmp;
   VFILE * vlast;

   vlast = NULL;
  8479b4:	e03ffd15 	stw	zero,-12(fp)

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
  8479b8:	d0a0da17 	ldw	r2,-31896(gp)
  8479bc:	e0bffe15 	stw	r2,-8(fp)
   while (vtmp)
  8479c0:	00000806 	br	8479e4 <vfclose_locked+0x44>
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
  8479c4:	e0ffff17 	ldw	r3,-4(fp)
  8479c8:	e0bffe17 	ldw	r2,-8(fp)
  8479cc:	18800826 	beq	r3,r2,8479f0 <vfclose_locked+0x50>
         break;

      /* bump the next and previous pointers along to try the next one */
      vlast = vtmp;
  8479d0:	e0bffe17 	ldw	r2,-8(fp)
  8479d4:	e0bffd15 	stw	r2,-12(fp)
      vtmp = vtmp->next;
  8479d8:	e0bffe17 	ldw	r2,-8(fp)
  8479dc:	10800017 	ldw	r2,0(r2)
  8479e0:	e0bffe15 	stw	r2,-8(fp)
   vlast = NULL;

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
  8479e4:	e0bffe17 	ldw	r2,-8(fp)
  8479e8:	1004c03a 	cmpne	r2,r2,zero
  8479ec:	103ff51e 	bne	r2,zero,8479c4 <vfclose_locked+0x24>
      vlast = vtmp;
      vtmp = vtmp->next;
   }

   /* if the passed in handle was not in the list we maintain */
   if (vfd != vtmp)
  8479f0:	e0ffff17 	ldw	r3,-4(fp)
  8479f4:	e0bffe17 	ldw	r2,-8(fp)
  8479f8:	18804e1e 	bne	r3,r2,847b34 <vfclose_locked+0x194>

   /* this not really a forever loop. it exists so we can break easily
      and deal with all the ifdefs */
   while (1)
   {
      struct vfs_file * vfp   =  vfd->file;
  8479fc:	e0bfff17 	ldw	r2,-4(fp)
  847a00:	10800117 	ldw	r2,4(r2)
  847a04:	e0bffc15 	stw	r2,-16(fp)
      /* vfd->file will be null if somebody unlinked the file after
       * this handle was created to point to it. if the file itself 
       * is gone there is nothing left to do, so break to list 
       * deletion code at bottom of loop
       */
      if (vfp == NULL)
  847a08:	e0bffc17 	ldw	r2,-16(fp)
  847a0c:	1005003a 	cmpeq	r2,r2,zero
  847a10:	1000381e 	bne	r2,zero,847af4 <vfclose_locked+0x154>
         break;
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
  847a14:	e0bffc17 	ldw	r2,-16(fp)
  847a18:	10800a17 	ldw	r2,40(r2)
  847a1c:	1005003a 	cmpeq	r2,r2,zero
  847a20:	1000081e 	bne	r2,zero,847a44 <vfclose_locked+0xa4>
      {
         /* call that file system's fclose() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)(vfp->method);
  847a24:	e0bffc17 	ldw	r2,-16(fp)
  847a28:	10800a17 	ldw	r2,40(r2)
  847a2c:	e0bffa15 	stw	r2,-24(fp)

         vfs->r_fclose(vfd);
  847a30:	e0bffa17 	ldw	r2,-24(fp)
  847a34:	10800217 	ldw	r2,8(r2)
  847a38:	e13fff17 	ldw	r4,-4(fp)
  847a3c:	103ee83a 	callr	r2
         break;   /* break to list deletion code after end of phoney loop */
  847a40:	00002c06 	br	847af4 <vfclose_locked+0x154>

      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
  847a44:	e0bffc17 	ldw	r2,-16(fp)
  847a48:	1080058b 	ldhu	r2,22(r2)
  847a4c:	10bfffcc 	andi	r2,r2,65535
  847a50:	1080200c 	andi	r2,r2,128
  847a54:	1005003a 	cmpeq	r2,r2,zero
  847a58:	1000261e 	bne	r2,zero,847af4 <vfclose_locked+0x154>
  847a5c:	e0bffc17 	ldw	r2,-16(fp)
  847a60:	10c00917 	ldw	r3,36(r2)
  847a64:	e0bffc17 	ldw	r2,-16(fp)
  847a68:	10800817 	ldw	r2,32(r2)
  847a6c:	1885c83a 	sub	r2,r3,r2
  847a70:	10804030 	cmpltui	r2,r2,256
  847a74:	10001f1e 	bne	r2,zero,847af4 <vfclose_locked+0x154>
  847a78:	e0bffc17 	ldw	r2,-16(fp)
  847a7c:	10800617 	ldw	r2,24(r2)
  847a80:	1005003a 	cmpeq	r2,r2,zero
  847a84:	10001b1e 	bne	r2,zero,847af4 <vfclose_locked+0x154>
          vfp->data) /* this last test is a sanity check */
      {
         /* try to reclaim the unused data */

         /* allocate a new buffer just big enough for the data */
         new_buffer = vf_alloc_buffer(vfp->comp_size);
  847a88:	e0bffc17 	ldw	r2,-16(fp)
  847a8c:	11000817 	ldw	r4,32(r2)
  847a90:	08474c00 	call	8474c0 <vf_alloc_buffer>
  847a94:	e0bffb15 	stw	r2,-20(fp)

         /* if the allocation worked */
         if (new_buffer)
  847a98:	e0bffb17 	ldw	r2,-20(fp)
  847a9c:	1005003a 	cmpeq	r2,r2,zero
  847aa0:	1000141e 	bne	r2,zero,847af4 <vfclose_locked+0x154>
         {
            /* copy the old buffer to the new one */
            MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
  847aa4:	e0bffc17 	ldw	r2,-16(fp)
  847aa8:	10c00617 	ldw	r3,24(r2)
  847aac:	e0bffc17 	ldw	r2,-16(fp)
  847ab0:	11800817 	ldw	r6,32(r2)
  847ab4:	e0bffb17 	ldw	r2,-20(fp)
  847ab8:	1009883a 	mov	r4,r2
  847abc:	180b883a 	mov	r5,r3
  847ac0:	08073380 	call	807338 <memcpy>
            /* free the old buffer */
            vf_free_buffer(vfp->data,vfp->buf_size);
  847ac4:	e0bffc17 	ldw	r2,-16(fp)
  847ac8:	11000617 	ldw	r4,24(r2)
  847acc:	e0bffc17 	ldw	r2,-16(fp)
  847ad0:	11400917 	ldw	r5,36(r2)
  847ad4:	08475980 	call	847598 <vf_free_buffer>
            /* update the buffer pointer and size to reflect the
               just big enough buffer */
            vfp->data = new_buffer;
  847ad8:	e0fffc17 	ldw	r3,-16(fp)
  847adc:	e0bffb17 	ldw	r2,-20(fp)
  847ae0:	18800615 	stw	r2,24(r3)
            vfp->buf_size = vfp->comp_size;
  847ae4:	e0bffc17 	ldw	r2,-16(fp)
  847ae8:	10c00817 	ldw	r3,32(r2)
  847aec:	e0bffc17 	ldw	r2,-16(fp)
  847af0:	10c00915 	stw	r3,36(r2)
      /* break to list deletion code below */
      break;

   }

   if (vlast)  /* unlink from list of open files */
  847af4:	e0bffd17 	ldw	r2,-12(fp)
  847af8:	1005003a 	cmpeq	r2,r2,zero
  847afc:	1000051e 	bne	r2,zero,847b14 <vfclose_locked+0x174>
      vlast->next = vtmp->next;
  847b00:	e0bffe17 	ldw	r2,-8(fp)
  847b04:	10c00017 	ldw	r3,0(r2)
  847b08:	e0bffd17 	ldw	r2,-12(fp)
  847b0c:	10c00015 	stw	r3,0(r2)
  847b10:	00000306 	br	847b20 <vfclose_locked+0x180>
   else
      vfiles = vtmp->next;
  847b14:	e0bffe17 	ldw	r2,-8(fp)
  847b18:	10800017 	ldw	r2,0(r2)
  847b1c:	d0a0da15 	stw	r2,-31896(gp)

   /* free structure addressed by open handle */
   VFS_VFS_OPEN_FREE(vtmp);
  847b20:	e13ffe17 	ldw	r4,-8(fp)
  847b24:	082b3000 	call	82b300 <npfree>
   /* decrement the number of open files */
   vfs_open_files--;
  847b28:	d0a0de17 	ldw	r2,-31880(gp)
  847b2c:	10bfffc4 	addi	r2,r2,-1
  847b30:	d0a0de15 	stw	r2,-31880(gp)
   return;
}
  847b34:	e037883a 	mov	sp,fp
  847b38:	dfc00117 	ldw	ra,4(sp)
  847b3c:	df000017 	ldw	fp,0(sp)
  847b40:	dec00204 	addi	sp,sp,8
  847b44:	f800283a 	ret

00847b48 <vfclose>:
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
  847b48:	defffd04 	addi	sp,sp,-12
  847b4c:	dfc00215 	stw	ra,8(sp)
  847b50:	df000115 	stw	fp,4(sp)
  847b54:	df000104 	addi	fp,sp,4
  847b58:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
  847b5c:	01000144 	movi	r4,5
  847b60:	082adc40 	call	82adc4 <wait_app_sem>

   vfclose_locked(vfd);
  847b64:	e13fff17 	ldw	r4,-4(fp)
  847b68:	08479a00 	call	8479a0 <vfclose_locked>

   vfs_unlock();
  847b6c:	01000144 	movi	r4,5
  847b70:	082ae780 	call	82ae78 <post_app_sem>
}
  847b74:	e037883a 	mov	sp,fp
  847b78:	dfc00117 	ldw	ra,4(sp)
  847b7c:	df000017 	ldw	fp,0(sp)
  847b80:	dec00204 	addi	sp,sp,8
  847b84:	f800283a 	ret

00847b88 <vfflush>:
 *
 * RETURNS: 
 */

int vfflush(VFILE * vfd)
{
  847b88:	defffd04 	addi	sp,sp,-12
  847b8c:	dfc00215 	stw	ra,8(sp)
  847b90:	df000115 	stw	fp,4(sp)
  847b94:	df000104 	addi	fp,sp,4
  847b98:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
  847b9c:	01000144 	movi	r4,5
  847ba0:	082adc40 	call	82adc4 <wait_app_sem>

   printf("vfflush(): This function needs to be implemented\n");
  847ba4:	01002174 	movhi	r4,133
  847ba8:	213a4a04 	addi	r4,r4,-5848
  847bac:	08077600 	call	807760 <puts>

   vfs_unlock();
  847bb0:	01000144 	movi	r4,5
  847bb4:	082ae780 	call	82ae78 <post_app_sem>
   return(0);
  847bb8:	0005883a 	mov	r2,zero
}
  847bbc:	e037883a 	mov	sp,fp
  847bc0:	dfc00117 	ldw	ra,4(sp)
  847bc4:	df000017 	ldw	fp,0(sp)
  847bc8:	dec00204 	addi	sp,sp,8
  847bcc:	f800283a 	ret

00847bd0 <vfgets>:

char * vfgets(char * s, int lim, VFILE * fp) 
{
  847bd0:	defff804 	addi	sp,sp,-32
  847bd4:	dfc00715 	stw	ra,28(sp)
  847bd8:	df000615 	stw	fp,24(sp)
  847bdc:	df000604 	addi	fp,sp,24
  847be0:	e13ffc15 	stw	r4,-16(fp)
  847be4:	e17ffd15 	stw	r5,-12(fp)
  847be8:	e1bffe15 	stw	r6,-8(fp)
   int c;
   char * ret;

   ret = s;
  847bec:	e0bffc17 	ldw	r2,-16(fp)
  847bf0:	e0bffa15 	stw	r2,-24(fp)
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
  847bf4:	00001106 	br	847c3c <vfgets+0x6c>
      if (( *ret ++ = c) == '\n')
  847bf8:	e0bffb17 	ldw	r2,-20(fp)
  847bfc:	1007883a 	mov	r3,r2
  847c00:	e0bffa17 	ldw	r2,-24(fp)
  847c04:	10c00005 	stb	r3,0(r2)
  847c08:	e0bffa17 	ldw	r2,-24(fp)
  847c0c:	10800003 	ldbu	r2,0(r2)
  847c10:	10803fcc 	andi	r2,r2,255
  847c14:	1080201c 	xori	r2,r2,128
  847c18:	10bfe004 	addi	r2,r2,-128
  847c1c:	108002a0 	cmpeqi	r2,r2,10
  847c20:	1007883a 	mov	r3,r2
  847c24:	e0bffa17 	ldw	r2,-24(fp)
  847c28:	10800044 	addi	r2,r2,1
  847c2c:	e0bffa15 	stw	r2,-24(fp)
  847c30:	18803fcc 	andi	r2,r3,255
  847c34:	1004c03a 	cmpne	r2,r2,zero
  847c38:	10000c1e 	bne	r2,zero,847c6c <vfgets+0x9c>
{
   int c;
   char * ret;

   ret = s;
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
  847c3c:	e0bffd17 	ldw	r2,-12(fp)
  847c40:	10bfffc4 	addi	r2,r2,-1
  847c44:	e0bffd15 	stw	r2,-12(fp)
  847c48:	e0bffd17 	ldw	r2,-12(fp)
  847c4c:	10800050 	cmplti	r2,r2,1
  847c50:	1000061e 	bne	r2,zero,847c6c <vfgets+0x9c>
  847c54:	e13ffe17 	ldw	r4,-8(fp)
  847c58:	084894c0 	call	84894c <vgetc>
  847c5c:	e0bffb15 	stw	r2,-20(fp)
  847c60:	e0bffb17 	ldw	r2,-20(fp)
  847c64:	10bfffd8 	cmpnei	r2,r2,-1
  847c68:	103fe31e 	bne	r2,zero,847bf8 <vfgets+0x28>
      if (( *ret ++ = c) == '\n')
         break;
   *ret = '\0';
  847c6c:	e0bffa17 	ldw	r2,-24(fp)
  847c70:	10000005 	stb	zero,0(r2)
   return ( c == EOF && ret == s) ? NULL : s;
  847c74:	e0bffb17 	ldw	r2,-20(fp)
  847c78:	10bfffd8 	cmpnei	r2,r2,-1
  847c7c:	1000031e 	bne	r2,zero,847c8c <vfgets+0xbc>
  847c80:	e0fffa17 	ldw	r3,-24(fp)
  847c84:	e0bffc17 	ldw	r2,-16(fp)
  847c88:	18800326 	beq	r3,r2,847c98 <vfgets+0xc8>
  847c8c:	e0bffc17 	ldw	r2,-16(fp)
  847c90:	e0bfff15 	stw	r2,-4(fp)
  847c94:	00000106 	br	847c9c <vfgets+0xcc>
  847c98:	e03fff15 	stw	zero,-4(fp)
  847c9c:	e0bfff17 	ldw	r2,-4(fp)
}
  847ca0:	e037883a 	mov	sp,fp
  847ca4:	dfc00117 	ldw	ra,4(sp)
  847ca8:	df000017 	ldw	fp,0(sp)
  847cac:	dec00204 	addi	sp,sp,8
  847cb0:	f800283a 	ret

00847cb4 <vfeof>:
 *
 * RETURNS: 1 if the file pointer is at EOF, otherwise 0
 */
 
int vfeof(VFILE * vfd)
{
  847cb4:	defffb04 	addi	sp,sp,-20
  847cb8:	dfc00415 	stw	ra,16(sp)
  847cbc:	df000315 	stw	fp,12(sp)
  847cc0:	df000304 	addi	fp,sp,12
  847cc4:	e13ffe15 	stw	r4,-8(fp)
   int c = 0;
  847cc8:	e03ffd15 	stw	zero,-12(fp)

#ifdef HT_LOCALFS
   return(feof((FILE*)vfd));
#endif
   if ((c = vgetc(vfd)) == EOF )
  847ccc:	e13ffe17 	ldw	r4,-8(fp)
  847cd0:	084894c0 	call	84894c <vgetc>
  847cd4:	e0bffd15 	stw	r2,-12(fp)
  847cd8:	e0bffd17 	ldw	r2,-12(fp)
  847cdc:	10bfffd8 	cmpnei	r2,r2,-1
  847ce0:	1000031e 	bne	r2,zero,847cf0 <vfeof+0x3c>
   {
      return 1;
  847ce4:	00800044 	movi	r2,1
  847ce8:	e0bfff15 	stw	r2,-4(fp)
  847cec:	00000106 	br	847cf4 <vfeof+0x40>
   }   
   return 0;
  847cf0:	e03fff15 	stw	zero,-4(fp)
  847cf4:	e0bfff17 	ldw	r2,-4(fp)
}
  847cf8:	e037883a 	mov	sp,fp
  847cfc:	dfc00117 	ldw	ra,4(sp)
  847d00:	df000017 	ldw	fp,0(sp)
  847d04:	dec00204 	addi	sp,sp,8
  847d08:	f800283a 	ret

00847d0c <vunlink_flag_open_files>:
 *
 * RETURNS: 
 */

void vunlink_flag_open_files(struct vfs_file * vfp)
{
  847d0c:	defffd04 	addi	sp,sp,-12
  847d10:	df000215 	stw	fp,8(sp)
  847d14:	df000204 	addi	fp,sp,8
  847d18:	e13fff15 	stw	r4,-4(fp)
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
  847d1c:	d0a0da17 	ldw	r2,-31896(gp)
  847d20:	e0bffe15 	stw	r2,-8(fp)
  847d24:	00000906 	br	847d4c <vunlink_flag_open_files+0x40>
   {
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
  847d28:	e0bffe17 	ldw	r2,-8(fp)
  847d2c:	10c00117 	ldw	r3,4(r2)
  847d30:	e0bfff17 	ldw	r2,-4(fp)
  847d34:	1880021e 	bne	r3,r2,847d40 <vunlink_flag_open_files+0x34>
         vtmp->file = NULL;
  847d38:	e0bffe17 	ldw	r2,-8(fp)
  847d3c:	10000115 	stw	zero,4(r2)
void vunlink_flag_open_files(struct vfs_file * vfp)
{
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
  847d40:	e0bffe17 	ldw	r2,-8(fp)
  847d44:	10800017 	ldw	r2,0(r2)
  847d48:	e0bffe15 	stw	r2,-8(fp)
  847d4c:	e0bffe17 	ldw	r2,-8(fp)
  847d50:	1004c03a 	cmpne	r2,r2,zero
  847d54:	103ff41e 	bne	r2,zero,847d28 <vunlink_flag_open_files+0x1c>
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
         vtmp->file = NULL;
   }
}
  847d58:	e037883a 	mov	sp,fp
  847d5c:	df000017 	ldw	fp,0(sp)
  847d60:	dec00104 	addi	sp,sp,4
  847d64:	f800283a 	ret

00847d68 <vunlink>:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
int
vunlink(const char * const_name)
{
  847d68:	defff504 	addi	sp,sp,-44
  847d6c:	dfc00a15 	stw	ra,40(sp)
  847d70:	df000915 	stw	fp,36(sp)
  847d74:	df000904 	addi	fp,sp,36
  847d78:	e13ffe15 	stw	r4,-8(fp)
   struct vfs_file * vfp;
   int   rc =  0;
  847d7c:	e03ffc15 	stw	zero,-16(fp)
/*
 * Altera Niche Stack Nios port modification:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
   char * name = malloc(strlen(const_name));
  847d80:	e13ffe17 	ldw	r4,-8(fp)
  847d84:	08088440 	call	808844 <strlen>
  847d88:	1009883a 	mov	r4,r2
  847d8c:	084a4f80 	call	84a4f8 <malloc>
  847d90:	e0bff815 	stw	r2,-32(fp)
   strcpy(name, const_name);
  847d94:	e13ff817 	ldw	r4,-32(fp)
  847d98:	e17ffe17 	ldw	r5,-8(fp)
  847d9c:	08081440 	call	808144 <strcpy>
   if (vfs_log_file_name)
      dprintf("vunlink() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
  847da0:	01000144 	movi	r4,5
  847da4:	082adc40 	call	82adc4 <wait_app_sem>

   /* see if the converted name is one of the one's in our list */
   /* if it isn't */
   if ((vfp = vfslookup_locked(name)) == NULL)
  847da8:	e13ff817 	ldw	r4,-32(fp)
  847dac:	08489940 	call	848994 <vfslookup_locked>
  847db0:	e0bffd15 	stw	r2,-12(fp)
  847db4:	e0bffd17 	ldw	r2,-12(fp)
  847db8:	1004c03a 	cmpne	r2,r2,zero
  847dbc:	1000071e 	bne	r2,zero,847ddc <vunlink+0x74>
   {
      vfs_unlock();
  847dc0:	01000144 	movi	r4,5
  847dc4:	082ae780 	call	82ae78 <post_app_sem>
#ifdef HT_LOCALFS
      /* default to call on local system */
      return remove(name);
#else
      /* no local file system, so return error condition */
      free(name);
  847dc8:	e13ff817 	ldw	r4,-32(fp)
  847dcc:	084a4e40 	call	84a4e4 <free>
      return -1;
  847dd0:	00bfffc4 	movi	r2,-1
  847dd4:	e0bfff15 	stw	r2,-4(fp)
  847dd8:	00006506 	br	847f70 <vunlink+0x208>
#ifdef   HT_RWVFS
   /* save the next link pointer since in one path through the code, 
    * the vfs_file structure gets freed before its unlinked from the 
    * list
    */
   vfnext = vfp->next;
  847ddc:	e0bffd17 	ldw	r2,-12(fp)
  847de0:	10800017 	ldw	r2,0(r2)
  847de4:	e0bff915 	stw	r2,-28(fp)

   /* search list of files to determine predecessor in list */
   vflast = NULL;
  847de8:	e03ffa15 	stw	zero,-24(fp)
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
  847dec:	d0a0db17 	ldw	r2,-31892(gp)
  847df0:	e0bffb15 	stw	r2,-20(fp)
  847df4:	00000806 	br	847e18 <vunlink+0xb0>
   {
      if (vtmp == vfp)
  847df8:	e0fffb17 	ldw	r3,-20(fp)
  847dfc:	e0bffd17 	ldw	r2,-12(fp)
  847e00:	18800826 	beq	r3,r2,847e24 <vunlink+0xbc>
         break;
      vflast = vtmp;
  847e04:	e0bffb17 	ldw	r2,-20(fp)
  847e08:	e0bffa15 	stw	r2,-24(fp)
    */
   vfnext = vfp->next;

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
  847e0c:	e0bffb17 	ldw	r2,-20(fp)
  847e10:	10800017 	ldw	r2,0(r2)
  847e14:	e0bffb15 	stw	r2,-20(fp)
  847e18:	e0bffb17 	ldw	r2,-20(fp)
  847e1c:	1004c03a 	cmpne	r2,r2,zero
  847e20:	103ff51e 	bne	r2,zero,847df8 <vunlink+0x90>
      vflast = vtmp;
   }

   /* this shouldn't happen since vfslookup_locked() already searched
      the list, but just in case */
   if (vtmp == NULL)
  847e24:	e0bffb17 	ldw	r2,-20(fp)
  847e28:	1004c03a 	cmpne	r2,r2,zero
  847e2c:	1000081e 	bne	r2,zero,847e50 <vunlink+0xe8>
   {
      dtrap();
  847e30:	082a7c80 	call	82a7c8 <dtrap>
      vfs_unlock();
  847e34:	01000144 	movi	r4,5
  847e38:	082ae780 	call	82ae78 <post_app_sem>
      free(name);
  847e3c:	e13ff817 	ldw	r4,-32(fp)
  847e40:	084a4e40 	call	84a4e4 <free>
      return -1;
  847e44:	00bfffc4 	movi	r2,-1
  847e48:	e0bfff15 	stw	r2,-4(fp)
  847e4c:	00004806 	br	847f70 <vunlink+0x208>
   while (1)
   {

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
  847e50:	e0bffd17 	ldw	r2,-12(fp)
  847e54:	10800a17 	ldw	r2,40(r2)
  847e58:	1005003a 	cmpeq	r2,r2,zero
  847e5c:	1000091e 	bne	r2,zero,847e84 <vunlink+0x11c>
      {
         /* call that file system's unlink() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfp->method);
  847e60:	e0bffd17 	ldw	r2,-12(fp)
  847e64:	10800a17 	ldw	r2,40(r2)
  847e68:	e0bff715 	stw	r2,-36(fp)

         rc = vfs->r_unlink(name);
  847e6c:	e0bff717 	ldw	r2,-36(fp)
  847e70:	10800817 	ldw	r2,32(r2)
  847e74:	e13ff817 	ldw	r4,-32(fp)
  847e78:	103ee83a 	callr	r2
  847e7c:	e0bffc15 	stw	r2,-16(fp)
         break;   /* break to list deletion code after end of phoney loop */
  847e80:	00002806 	br	847f24 <vunlink+0x1bc>
      }
#endif   /* HT_EXTDEV */

      /* if the file is not write enabled, return error condition */
      if (!(vfp->flags & VF_WRITE))
  847e84:	e0bffd17 	ldw	r2,-12(fp)
  847e88:	1080058b 	ldhu	r2,22(r2)
  847e8c:	10bfffcc 	andi	r2,r2,65535
  847e90:	1080080c 	andi	r2,r2,32
  847e94:	1004c03a 	cmpne	r2,r2,zero
  847e98:	1000071e 	bne	r2,zero,847eb8 <vunlink+0x150>
      {
         vfs_unlock();
  847e9c:	01000144 	movi	r4,5
  847ea0:	082ae780 	call	82ae78 <post_app_sem>
         free(name);
  847ea4:	e13ff817 	ldw	r4,-32(fp)
  847ea8:	084a4e40 	call	84a4e4 <free>
         return -1;
  847eac:	00bfffc4 	movi	r2,-1
  847eb0:	e0bfff15 	stw	r2,-4(fp)
  847eb4:	00002e06 	br	847f70 <vunlink+0x208>
      }

      /* if the data buffer containing the file's data was dynamically
         allocated and is not null */
      if ((vfp->flags & VF_DYNAMICDATA) && (vfp->data))
  847eb8:	e0bffd17 	ldw	r2,-12(fp)
  847ebc:	1080058b 	ldhu	r2,22(r2)
  847ec0:	10bfffcc 	andi	r2,r2,65535
  847ec4:	1080200c 	andi	r2,r2,128
  847ec8:	1005003a 	cmpeq	r2,r2,zero
  847ecc:	1000091e 	bne	r2,zero,847ef4 <vunlink+0x18c>
  847ed0:	e0bffd17 	ldw	r2,-12(fp)
  847ed4:	10800617 	ldw	r2,24(r2)
  847ed8:	1005003a 	cmpeq	r2,r2,zero
  847edc:	1000051e 	bne	r2,zero,847ef4 <vunlink+0x18c>
      {
         /* free the buffer */
         vf_free_buffer(vfp->data,vfp->buf_size);
  847ee0:	e0bffd17 	ldw	r2,-12(fp)
  847ee4:	11000617 	ldw	r4,24(r2)
  847ee8:	e0bffd17 	ldw	r2,-12(fp)
  847eec:	11400917 	ldw	r5,36(r2)
  847ef0:	08475980 	call	847598 <vf_free_buffer>
      }

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
  847ef4:	e0bffd17 	ldw	r2,-12(fp)
  847ef8:	1080058b 	ldhu	r2,22(r2)
  847efc:	10bfffcc 	andi	r2,r2,65535
  847f00:	1080100c 	andi	r2,r2,64
  847f04:	1005003a 	cmpeq	r2,r2,zero
  847f08:	1000051e 	bne	r2,zero,847f20 <vunlink+0x1b8>
      {
         /* decrement count of total files */
         vfs_total_dyna_files--;
  847f0c:	d0a0e017 	ldw	r2,-31872(gp)
  847f10:	10bfffc4 	addi	r2,r2,-1
  847f14:	d0a0e015 	stw	r2,-31872(gp)

         /* free the vfs_file structure */
         VFS_VFS_FILE_FREE(vfp);
  847f18:	e13ffd17 	ldw	r4,-12(fp)
  847f1c:	082b3000 	call	82b300 <npfree>
         the vfs_file has been deleted from the list */
#ifdef VFS_AUTO_SYNC
      do_sync = 1;
#endif
      /* we were successful at our unlink */
      rc = 0;
  847f20:	e03ffc15 	stw	zero,-16(fp)

      break;
   }

   /* delete the vfs_file structure from the list headed by vfsfiles */
   if (vflast)
  847f24:	e0bffa17 	ldw	r2,-24(fp)
  847f28:	1005003a 	cmpeq	r2,r2,zero
  847f2c:	1000041e 	bne	r2,zero,847f40 <vunlink+0x1d8>
      vflast->next = vfnext;
  847f30:	e0fffa17 	ldw	r3,-24(fp)
  847f34:	e0bff917 	ldw	r2,-28(fp)
  847f38:	18800015 	stw	r2,0(r3)
  847f3c:	00000206 	br	847f48 <vunlink+0x1e0>
   else
      vfsfiles = vfnext;
  847f40:	e0bff917 	ldw	r2,-28(fp)
  847f44:	d0a0db15 	stw	r2,-31892(gp)

   /* fix up references to deleted file in list of currently open VFILEs */
   vunlink_flag_open_files(vfp);
  847f48:	e13ffd17 	ldw	r4,-12(fp)
  847f4c:	0847d0c0 	call	847d0c <vunlink_flag_open_files>

   /* flag that the directory is stale so vfs_sync() knows it has to do
      something */
   vfs_dir_stale = TRUE;
  847f50:	00800044 	movi	r2,1
  847f54:	d0a0dd15 	stw	r2,-31884(gp)

   /* unlinks not allowed on read-only VFS */
   rc = -1;

#endif   /* HT_RWVFS */
   vfs_unlock();
  847f58:	01000144 	movi	r4,5
  847f5c:	082ae780 	call	82ae78 <post_app_sem>
   free(name);
  847f60:	e13ff817 	ldw	r4,-32(fp)
  847f64:	084a4e40 	call	84a4e4 <free>
   return rc;
  847f68:	e0bffc17 	ldw	r2,-16(fp)
  847f6c:	e0bfff15 	stw	r2,-4(fp)
  847f70:	e0bfff17 	ldw	r2,-4(fp)
}
  847f74:	e037883a 	mov	sp,fp
  847f78:	dfc00117 	ldw	ra,4(sp)
  847f7c:	df000017 	ldw	fp,0(sp)
  847f80:	dec00204 	addi	sp,sp,8
  847f84:	f800283a 	ret

00847f88 <vfread>:
 * RETURNS: 
 */

int 
vfread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
  847f88:	defff504 	addi	sp,sp,-44
  847f8c:	dfc00a15 	stw	ra,40(sp)
  847f90:	df000915 	stw	fp,36(sp)
  847f94:	df000904 	addi	fp,sp,36
  847f98:	e13ffb15 	stw	r4,-20(fp)
  847f9c:	e17ffc15 	stw	r5,-16(fp)
  847fa0:	e1bffd15 	stw	r6,-12(fp)
  847fa4:	e1fffe15 	stw	r7,-8(fp)
   unsigned bcount;  /* number of bytes put in caller's buffer */

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
  847fa8:	01000144 	movi	r4,5
  847fac:	082adc40 	call	82adc4 <wait_app_sem>

   /* if the file is in our list of open files */
   if (isvfile_locked(vfd))
  847fb0:	e13ffe17 	ldw	r4,-8(fp)
  847fb4:	0848cfc0 	call	848cfc <isvfile_locked>
  847fb8:	1005003a 	cmpeq	r2,r2,zero
  847fbc:	1000541e 	bne	r2,zero,848110 <vfread+0x188>
   {

#ifdef HT_RWVFS
      /* the caller is trying to read a handle to a file that's been
         deleted, so he gets 0 data back */
      if (vfd->file == NULL)
  847fc0:	e0bffe17 	ldw	r2,-8(fp)
  847fc4:	10800117 	ldw	r2,4(r2)
  847fc8:	1004c03a 	cmpne	r2,r2,zero
  847fcc:	1000041e 	bne	r2,zero,847fe0 <vfread+0x58>
      {
         vfs_unlock();
  847fd0:	01000144 	movi	r4,5
  847fd4:	082ae780 	call	82ae78 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
  847fd8:	e03fff15 	stw	zero,-4(fp)
  847fdc:	00004f06 	br	84811c <vfread+0x194>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfd->file->method)
  847fe0:	e0bffe17 	ldw	r2,-8(fp)
  847fe4:	10800117 	ldw	r2,4(r2)
  847fe8:	10800a17 	ldw	r2,40(r2)
  847fec:	1005003a 	cmpeq	r2,r2,zero
  847ff0:	1000111e 	bne	r2,zero,848038 <vfread+0xb0>
      {
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
  847ff4:	e0bffe17 	ldw	r2,-8(fp)
  847ff8:	10800117 	ldw	r2,4(r2)
  847ffc:	10800a17 	ldw	r2,40(r2)
  848000:	e0bff915 	stw	r2,-28(fp)
         int   rc;

         /* call that system's fread() */
         rc = vfs->r_fread(buf,size,items,vfd);
  848004:	e0bff917 	ldw	r2,-28(fp)
  848008:	10800317 	ldw	r2,12(r2)
  84800c:	e13ffb17 	ldw	r4,-20(fp)
  848010:	e17ffc17 	ldw	r5,-16(fp)
  848014:	e1bffd17 	ldw	r6,-12(fp)
  848018:	e1fffe17 	ldw	r7,-8(fp)
  84801c:	103ee83a 	callr	r2
  848020:	e0bff815 	stw	r2,-32(fp)
         vfs_unlock();
  848024:	01000144 	movi	r4,5
  848028:	082ae780 	call	82ae78 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return rc;
  84802c:	e0bff817 	ldw	r2,-32(fp)
  848030:	e0bfff15 	stw	r2,-4(fp)
  848034:	00003906 	br	84811c <vfread+0x194>
#ifdef HT_RWVFS
      /* the data pointer can be NULL if somebody tries to read from 
       * a freshly created file, in which case there is no data in 
       * the file, so return 0
       */
      if (!(vfd->file->data))
  848038:	e0bffe17 	ldw	r2,-8(fp)
  84803c:	10800117 	ldw	r2,4(r2)
  848040:	10800617 	ldw	r2,24(r2)
  848044:	1004c03a 	cmpne	r2,r2,zero
  848048:	1000041e 	bne	r2,zero,84805c <vfread+0xd4>
      {
         vfs_unlock();
  84804c:	01000144 	movi	r4,5
  848050:	082ae780 	call	82ae78 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
  848054:	e03fff15 	stw	zero,-4(fp)
  848058:	00003006 	br	84811c <vfread+0x194>
      }
#endif   /* HT_RWVFS */

      bcount = items * size;  /* number of bytes to transfer */
  84805c:	e0fffd17 	ldw	r3,-12(fp)
  848060:	e0bffc17 	ldw	r2,-16(fp)
  848064:	1885383a 	mul	r2,r3,r2
  848068:	e0bffa15 	stw	r2,-24(fp)
         return(items); /* filled user buffer, return # items copied */
      }
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;
  84806c:	e0bffe17 	ldw	r2,-8(fp)
  848070:	10800217 	ldw	r2,8(r2)
  848074:	1007883a 	mov	r3,r2
  848078:	e0bffe17 	ldw	r2,-8(fp)
  84807c:	10800117 	ldw	r2,4(r2)
  848080:	10800617 	ldw	r2,24(r2)
  848084:	1885c83a 	sub	r2,r3,r2
  848088:	e0bff715 	stw	r2,-36(fp)

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
  84808c:	e0fff717 	ldw	r3,-36(fp)
  848090:	e0bffa17 	ldw	r2,-24(fp)
  848094:	1887883a 	add	r3,r3,r2
  848098:	e0bffe17 	ldw	r2,-8(fp)
  84809c:	10800117 	ldw	r2,4(r2)
  8480a0:	10800817 	ldw	r2,32(r2)
  8480a4:	10c0062e 	bgeu	r2,r3,8480c0 <vfread+0x138>
            bcount = (unsigned)(vfd->file->comp_size - location);
  8480a8:	e0bffe17 	ldw	r2,-8(fp)
  8480ac:	10800117 	ldw	r2,4(r2)
  8480b0:	10c00817 	ldw	r3,32(r2)
  8480b4:	e0bff717 	ldw	r2,-36(fp)
  8480b8:	1885c83a 	sub	r2,r3,r2
  8480bc:	e0bffa15 	stw	r2,-24(fp)
         MEMCPY(buf, vfd->cmploc, bcount);
  8480c0:	e0bffe17 	ldw	r2,-8(fp)
  8480c4:	10c00217 	ldw	r3,8(r2)
  8480c8:	e0bffb17 	ldw	r2,-20(fp)
  8480cc:	1009883a 	mov	r4,r2
  8480d0:	180b883a 	mov	r5,r3
  8480d4:	e1bffa17 	ldw	r6,-24(fp)
  8480d8:	08073380 	call	807338 <memcpy>
         vfd->cmploc += bcount;
  8480dc:	e0bffe17 	ldw	r2,-8(fp)
  8480e0:	10c00217 	ldw	r3,8(r2)
  8480e4:	e0bffa17 	ldw	r2,-24(fp)
  8480e8:	1887883a 	add	r3,r3,r2
  8480ec:	e0bffe17 	ldw	r2,-8(fp)
  8480f0:	10c00215 	stw	r3,8(r2)
      }
      vfs_unlock();
  8480f4:	01000144 	movi	r4,5
  8480f8:	082ae780 	call	82ae78 <post_app_sem>
      IN_PROFILER(PF_FS, PF_EXIT);
      return (bcount/size);
  8480fc:	e13ffa17 	ldw	r4,-24(fp)
  848100:	e17ffc17 	ldw	r5,-16(fp)
  848104:	08053b80 	call	8053b8 <__udivsi3>
  848108:	e0bfff15 	stw	r2,-4(fp)
  84810c:	00000306 	br	84811c <vfread+0x194>
   }

   vfs_unlock();
  848110:	01000144 	movi	r4,5
  848114:	082ae780 	call	82ae78 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
  848118:	e03fff15 	stw	zero,-4(fp)
  84811c:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
  848120:	e037883a 	mov	sp,fp
  848124:	dfc00117 	ldw	ra,4(sp)
  848128:	df000017 	ldw	fp,0(sp)
  84812c:	dec00204 	addi	sp,sp,8
  848130:	f800283a 	ret

00848134 <vfwrite_locked>:
 * RETURNS: 
 */

int 
vfwrite_locked(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
  848134:	defff104 	addi	sp,sp,-60
  848138:	dfc00e15 	stw	ra,56(sp)
  84813c:	df000d15 	stw	fp,52(sp)
  848140:	df000d04 	addi	fp,sp,52
  848144:	e13ffb15 	stw	r4,-20(fp)
  848148:	e17ffc15 	stw	r5,-16(fp)
  84814c:	e1bffd15 	stw	r6,-12(fp)
  848150:	e1fffe15 	stw	r7,-8(fp)
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
  848154:	e13ffe17 	ldw	r4,-8(fp)
  848158:	0848cfc0 	call	848cfc <isvfile_locked>
  84815c:	1004c03a 	cmpne	r2,r2,zero
  848160:	1000031e 	bne	r2,zero,848170 <vfwrite_locked+0x3c>
   {
#ifdef HT_LOCALFS
      /* default to call on local system */
      return(fwrite(buf, size, items, (FILE*)vfd));
#else
      return EBADF;
  848164:	00800244 	movi	r2,9
  848168:	e0bfff15 	stw	r2,-4(fp)
  84816c:	0000e506 	br	848504 <vfwrite_locked+0x3d0>
   }
   /* this file is in our list of files */

#ifdef HT_EXTDEV
   /* if the file was created by an external file system */
   if (vfd->file->method)
  848170:	e0bffe17 	ldw	r2,-8(fp)
  848174:	10800117 	ldw	r2,4(r2)
  848178:	10800a17 	ldw	r2,40(r2)
  84817c:	1005003a 	cmpeq	r2,r2,zero
  848180:	10000f1e 	bne	r2,zero,8481c0 <vfwrite_locked+0x8c>
   {
      struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
  848184:	e0bffe17 	ldw	r2,-8(fp)
  848188:	10800117 	ldw	r2,4(r2)
  84818c:	10800a17 	ldw	r2,40(r2)
  848190:	e0bff715 	stw	r2,-36(fp)
      int   rc;

      /* call that system's fwrite() */
      rc = vfs->r_fwrite(buf,size,items,vfd);
  848194:	e0bff717 	ldw	r2,-36(fp)
  848198:	10800417 	ldw	r2,16(r2)
  84819c:	e13ffb17 	ldw	r4,-20(fp)
  8481a0:	e17ffc17 	ldw	r5,-16(fp)
  8481a4:	e1bffd17 	ldw	r6,-12(fp)
  8481a8:	e1fffe17 	ldw	r7,-8(fp)
  8481ac:	103ee83a 	callr	r2
  8481b0:	e0bff615 	stw	r2,-40(fp)
      return rc;
  8481b4:	e0bff617 	ldw	r2,-40(fp)
  8481b8:	e0bfff15 	stw	r2,-4(fp)
  8481bc:	0000d106 	br	848504 <vfwrite_locked+0x3d0>

#else    /* HT_RWVFS */

   /* the caller is trying to write to a file that's been deleted,
      so he writes 0 data */
   if (vfd->file == NULL)
  8481c0:	e0bffe17 	ldw	r2,-8(fp)
  8481c4:	10800117 	ldw	r2,4(r2)
  8481c8:	1004c03a 	cmpne	r2,r2,zero
  8481cc:	1000021e 	bne	r2,zero,8481d8 <vfwrite_locked+0xa4>
   {
      return 0;
  8481d0:	e03fff15 	stw	zero,-4(fp)
  8481d4:	0000cb06 	br	848504 <vfwrite_locked+0x3d0>
   }

   vfp = vfd->file;
  8481d8:	e0bffe17 	ldw	r2,-8(fp)
  8481dc:	10800117 	ldw	r2,4(r2)
  8481e0:	e0bff815 	stw	r2,-32(fp)

   /* if the file is not writable, return error condition */
   if (!(vfp->flags & VF_WRITE))
  8481e4:	e0bff817 	ldw	r2,-32(fp)
  8481e8:	1080058b 	ldhu	r2,22(r2)
  8481ec:	10bfffcc 	andi	r2,r2,65535
  8481f0:	1080080c 	andi	r2,r2,32
  8481f4:	1004c03a 	cmpne	r2,r2,zero
  8481f8:	1000051e 	bne	r2,zero,848210 <vfwrite_locked+0xdc>
   {
      vfd->error = ENP_FILEIO;
  8481fc:	e0fffe17 	ldw	r3,-8(fp)
  848200:	00bff984 	movi	r2,-26
  848204:	18800415 	stw	r2,16(r3)
      return 0;
  848208:	e03fff15 	stw	zero,-4(fp)
  84820c:	0000bd06 	br	848504 <vfwrite_locked+0x3d0>
   }

   /* compute number of bytes to write */
   bcount = size * items;
  848210:	e0fffc17 	ldw	r3,-16(fp)
  848214:	e0bffd17 	ldw	r2,-12(fp)
  848218:	1885383a 	mul	r2,r3,r2
  84821c:	e0bffa15 	stw	r2,-24(fp)

   /* get rid of this degenerate case up front */
   if (bcount == 0)
  848220:	e0bffa17 	ldw	r2,-24(fp)
  848224:	1004c03a 	cmpne	r2,r2,zero
  848228:	1000021e 	bne	r2,zero,848234 <vfwrite_locked+0x100>
   {
      return 0;
  84822c:	e03fff15 	stw	zero,-4(fp)
  848230:	0000b406 	br	848504 <vfwrite_locked+0x3d0>
   }

   /* if the file currently has no data buffer */
   if (vfp->data == NULL)
  848234:	e0bff817 	ldw	r2,-32(fp)
  848238:	10800617 	ldw	r2,24(r2)
  84823c:	1004c03a 	cmpne	r2,r2,zero
  848240:	1000401e 	bne	r2,zero,848344 <vfwrite_locked+0x210>
   {
      /* compute the size of the buffer to be created */
      /* we round up the size of the data to be written so we dont have
         the overhead of a memory allocation on every write */
      unsigned long buf_size = VFS_ROUND_UP((unsigned long)bcount);
  848244:	e0bffa17 	ldw	r2,-24(fp)
  848248:	10bfffc4 	addi	r2,r2,-1
  84824c:	1004d37a 	srli	r2,r2,13
  848250:	1004937a 	slli	r2,r2,13
  848254:	10880004 	addi	r2,r2,8192
  848258:	e0bff515 	stw	r2,-44(fp)

      /* allocate a buffer of that size */
      vfp->data = vf_alloc_buffer(buf_size);
  84825c:	e13ff517 	ldw	r4,-44(fp)
  848260:	08474c00 	call	8474c0 <vf_alloc_buffer>
  848264:	1007883a 	mov	r3,r2
  848268:	e0bff817 	ldw	r2,-32(fp)
  84826c:	10c00615 	stw	r3,24(r2)

      /* if the allocation failed */
      if (!(vfp->data))
  848270:	e0bff817 	ldw	r2,-32(fp)
  848274:	10800617 	ldw	r2,24(r2)
  848278:	1004c03a 	cmpne	r2,r2,zero
  84827c:	1000051e 	bne	r2,zero,848294 <vfwrite_locked+0x160>
      {
         vfd->error = ENP_NOMEM;
  848280:	e0fffe17 	ldw	r3,-8(fp)
  848284:	00bffb04 	movi	r2,-20
  848288:	18800415 	stw	r2,16(r3)
         return 0;
  84828c:	e03fff15 	stw	zero,-4(fp)
  848290:	00009c06 	br	848504 <vfwrite_locked+0x3d0>
      }

      /* store the size of the allocated buffer */
      vfp->buf_size = buf_size;
  848294:	e0fff817 	ldw	r3,-32(fp)
  848298:	e0bff517 	ldw	r2,-44(fp)
  84829c:	18800915 	stw	r2,36(r3)

      /* store the number of bytes written in the real and compressed
         file sizes */
      vfp->real_size = bcount;
  8482a0:	e0fff817 	ldw	r3,-32(fp)
  8482a4:	e0bffa17 	ldw	r2,-24(fp)
  8482a8:	18800715 	stw	r2,28(r3)
      vfp->comp_size = bcount;
  8482ac:	e0fff817 	ldw	r3,-32(fp)
  8482b0:	e0bffa17 	ldw	r2,-24(fp)
  8482b4:	18800815 	stw	r2,32(r3)

      /* set the file pointer to the first byte following the last
         byte written */
      vfd->cmploc = vfp->data + bcount;
  8482b8:	e0bff817 	ldw	r2,-32(fp)
  8482bc:	10c00617 	ldw	r3,24(r2)
  8482c0:	e0bffa17 	ldw	r2,-24(fp)
  8482c4:	1887883a 	add	r3,r3,r2
  8482c8:	e0bffe17 	ldw	r2,-8(fp)
  8482cc:	10c00215 	stw	r3,8(r2)

      /* turn off the compression flag */
      vfp->flags &= ~VF_HTMLCOMPRESSED;
  8482d0:	e0bff817 	ldw	r2,-32(fp)
  8482d4:	10c0058b 	ldhu	r3,22(r2)
  8482d8:	00bfff84 	movi	r2,-2
  8482dc:	1884703a 	and	r2,r3,r2
  8482e0:	1007883a 	mov	r3,r2
  8482e4:	e0bff817 	ldw	r2,-32(fp)
  8482e8:	10c0058d 	sth	r3,22(r2)

      /* the data in the file is stale */
      vfp->flags |= VF_STALE;
  8482ec:	e0bff817 	ldw	r2,-32(fp)
  8482f0:	1080058b 	ldhu	r2,22(r2)
  8482f4:	10808014 	ori	r2,r2,512
  8482f8:	1007883a 	mov	r3,r2
  8482fc:	e0bff817 	ldw	r2,-32(fp)
  848300:	10c0058d 	sth	r3,22(r2)

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
  848304:	e0bff817 	ldw	r2,-32(fp)
  848308:	1080058b 	ldhu	r2,22(r2)
  84830c:	10802014 	ori	r2,r2,128
  848310:	1007883a 	mov	r3,r2
  848314:	e0bff817 	ldw	r2,-32(fp)
  848318:	10c0058d 	sth	r3,22(r2)

      /* copy the data to be written to the file buffer */
      MEMCPY(vfp->data,buf,bcount);
  84831c:	e0bff817 	ldw	r2,-32(fp)
  848320:	10800617 	ldw	r2,24(r2)
  848324:	e0fffb17 	ldw	r3,-20(fp)
  848328:	1009883a 	mov	r4,r2
  84832c:	180b883a 	mov	r5,r3
  848330:	e1bffa17 	ldw	r6,-24(fp)
  848334:	08073380 	call	807338 <memcpy>

      /* return the number of "items" written */
      return items;
  848338:	e0bffd17 	ldw	r2,-12(fp)
  84833c:	e0bfff15 	stw	r2,-4(fp)
  848340:	00007006 	br	848504 <vfwrite_locked+0x3d0>
   }

   /* compute the current offset into the file */
   current_offset = vfd->cmploc - vfp->data;
  848344:	e0bffe17 	ldw	r2,-8(fp)
  848348:	10800217 	ldw	r2,8(r2)
  84834c:	1007883a 	mov	r3,r2
  848350:	e0bff817 	ldw	r2,-32(fp)
  848354:	10800617 	ldw	r2,24(r2)
  848358:	1885c83a 	sub	r2,r3,r2
  84835c:	e0bff915 	stw	r2,-28(fp)

   /* if the data to be written wont fit into the file buffer */
   if ((current_offset + bcount) > vfp->buf_size)
  848360:	e0fff917 	ldw	r3,-28(fp)
  848364:	e0bffa17 	ldw	r2,-24(fp)
  848368:	1887883a 	add	r3,r3,r2
  84836c:	e0bff817 	ldw	r2,-32(fp)
  848370:	10800917 	ldw	r2,36(r2)
  848374:	10c0382e 	bgeu	r2,r3,848458 <vfwrite_locked+0x324>
   {
      /* compute the size of a new buffer to hold the data */
      unsigned long new_buf_size = VFS_ROUND_UP(current_offset + bcount);
  848378:	e0fff917 	ldw	r3,-28(fp)
  84837c:	e0bffa17 	ldw	r2,-24(fp)
  848380:	1885883a 	add	r2,r3,r2
  848384:	10bfffc4 	addi	r2,r2,-1
  848388:	1004d37a 	srli	r2,r2,13
  84838c:	1004937a 	slli	r2,r2,13
  848390:	10880004 	addi	r2,r2,8192
  848394:	e0bff415 	stw	r2,-48(fp)
      unsigned char *new_buffer;

      /* allocate a new buffer */
      new_buffer = vf_alloc_buffer(new_buf_size);
  848398:	e13ff417 	ldw	r4,-48(fp)
  84839c:	08474c00 	call	8474c0 <vf_alloc_buffer>
  8483a0:	e0bff315 	stw	r2,-52(fp)

      /* check for allocation failure */
      if (!new_buffer)
  8483a4:	e0bff317 	ldw	r2,-52(fp)
  8483a8:	1004c03a 	cmpne	r2,r2,zero
  8483ac:	1000051e 	bne	r2,zero,8483c4 <vfwrite_locked+0x290>
      {
         vfd->error = ENP_NOMEM;
  8483b0:	e0fffe17 	ldw	r3,-8(fp)
  8483b4:	00bffb04 	movi	r2,-20
  8483b8:	18800415 	stw	r2,16(r3)
         return 0;
  8483bc:	e03fff15 	stw	zero,-4(fp)
  8483c0:	00005006 	br	848504 <vfwrite_locked+0x3d0>
      }

      /* copy the old buffer contents to the new buffer */
      MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
  8483c4:	e0bff817 	ldw	r2,-32(fp)
  8483c8:	10c00617 	ldw	r3,24(r2)
  8483cc:	e0bff817 	ldw	r2,-32(fp)
  8483d0:	11800817 	ldw	r6,32(r2)
  8483d4:	e0bff317 	ldw	r2,-52(fp)
  8483d8:	1009883a 	mov	r4,r2
  8483dc:	180b883a 	mov	r5,r3
  8483e0:	08073380 	call	807338 <memcpy>

      /* if the old buffer had been dynamically allocated */
      if (vfp->flags & VF_DYNAMICDATA)
  8483e4:	e0bff817 	ldw	r2,-32(fp)
  8483e8:	1080058b 	ldhu	r2,22(r2)
  8483ec:	10bfffcc 	andi	r2,r2,65535
  8483f0:	1080200c 	andi	r2,r2,128
  8483f4:	1005003a 	cmpeq	r2,r2,zero
  8483f8:	1000051e 	bne	r2,zero,848410 <vfwrite_locked+0x2dc>
      {
         /* free it */
         vf_free_buffer(vfp->data,vfp->buf_size);
  8483fc:	e0bff817 	ldw	r2,-32(fp)
  848400:	11000617 	ldw	r4,24(r2)
  848404:	e0bff817 	ldw	r2,-32(fp)
  848408:	11400917 	ldw	r5,36(r2)
  84840c:	08475980 	call	847598 <vf_free_buffer>
      }

      /* store the new buffer in the file structure */
      vfp->data = new_buffer;
  848410:	e0fff817 	ldw	r3,-32(fp)
  848414:	e0bff317 	ldw	r2,-52(fp)
  848418:	18800615 	stw	r2,24(r3)

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;
  84841c:	e0fff817 	ldw	r3,-32(fp)
  848420:	e0bff417 	ldw	r2,-48(fp)
  848424:	18800915 	stw	r2,36(r3)

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
  848428:	e0bff817 	ldw	r2,-32(fp)
  84842c:	1080058b 	ldhu	r2,22(r2)
  848430:	10802014 	ori	r2,r2,128
  848434:	1007883a 	mov	r3,r2
  848438:	e0bff817 	ldw	r2,-32(fp)
  84843c:	10c0058d 	sth	r3,22(r2)
       * buffer note that this means the VFS does not support 
       * simultaneous opens of the same file, since for that to work, 
       * all the other cmploc's that point to this file would 
       * have to be updated also 
       */
      vfd->cmploc = vfp->data + current_offset;
  848440:	e0bff817 	ldw	r2,-32(fp)
  848444:	10c00617 	ldw	r3,24(r2)
  848448:	e0bff917 	ldw	r2,-28(fp)
  84844c:	1887883a 	add	r3,r3,r2
  848450:	e0bffe17 	ldw	r2,-8(fp)
  848454:	10c00215 	stw	r3,8(r2)
   }

   /* copy the data to the current file pointer */
   MEMCPY(vfd->cmploc,buf,bcount);
  848458:	e0bffe17 	ldw	r2,-8(fp)
  84845c:	10800217 	ldw	r2,8(r2)
  848460:	e0fffb17 	ldw	r3,-20(fp)
  848464:	1009883a 	mov	r4,r2
  848468:	180b883a 	mov	r5,r3
  84846c:	e1bffa17 	ldw	r6,-24(fp)
  848470:	08073380 	call	807338 <memcpy>

   /* update the current file pointer */
   vfd->cmploc += bcount;
  848474:	e0bffe17 	ldw	r2,-8(fp)
  848478:	10c00217 	ldw	r3,8(r2)
  84847c:	e0bffa17 	ldw	r2,-24(fp)
  848480:	1887883a 	add	r3,r3,r2
  848484:	e0bffe17 	ldw	r2,-8(fp)
  848488:	10c00215 	stw	r3,8(r2)

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
  84848c:	e0fff917 	ldw	r3,-28(fp)
  848490:	e0bffa17 	ldw	r2,-24(fp)
  848494:	1887883a 	add	r3,r3,r2
  848498:	e0bff817 	ldw	r2,-32(fp)
  84849c:	10800817 	ldw	r2,32(r2)
  8484a0:	10c0052e 	bgeu	r2,r3,8484b8 <vfwrite_locked+0x384>
   {
      /* update the "compressed" file size */
      vfp->comp_size = current_offset + bcount;
  8484a4:	e0fff917 	ldw	r3,-28(fp)
  8484a8:	e0bffa17 	ldw	r2,-24(fp)
  8484ac:	1887883a 	add	r3,r3,r2
  8484b0:	e0bff817 	ldw	r2,-32(fp)
  8484b4:	10c00815 	stw	r3,32(r2)
   }

   /* since we turn off the compression bit below, the "real" size and
      the compressed size must be the same */
   vfp->real_size = vfp->comp_size;
  8484b8:	e0bff817 	ldw	r2,-32(fp)
  8484bc:	10c00817 	ldw	r3,32(r2)
  8484c0:	e0bff817 	ldw	r2,-32(fp)
  8484c4:	10c00715 	stw	r3,28(r2)

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;
  8484c8:	e0bff817 	ldw	r2,-32(fp)
  8484cc:	10c0058b 	ldhu	r3,22(r2)
  8484d0:	00bfff84 	movi	r2,-2
  8484d4:	1884703a 	and	r2,r3,r2
  8484d8:	1007883a 	mov	r3,r2
  8484dc:	e0bff817 	ldw	r2,-32(fp)
  8484e0:	10c0058d 	sth	r3,22(r2)

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
  8484e4:	e0bff817 	ldw	r2,-32(fp)
  8484e8:	1080058b 	ldhu	r2,22(r2)
  8484ec:	10808014 	ori	r2,r2,512
  8484f0:	1007883a 	mov	r3,r2
  8484f4:	e0bff817 	ldw	r2,-32(fp)
  8484f8:	10c0058d 	sth	r3,22(r2)

   /* return the number of "items" written */
   return items;
  8484fc:	e0bffd17 	ldw	r2,-12(fp)
  848500:	e0bfff15 	stw	r2,-4(fp)
  848504:	e0bfff17 	ldw	r2,-4(fp)

#endif   /* HT_RWVFS */
}
  848508:	e037883a 	mov	sp,fp
  84850c:	dfc00117 	ldw	ra,4(sp)
  848510:	df000017 	ldw	fp,0(sp)
  848514:	dec00204 	addi	sp,sp,8
  848518:	f800283a 	ret

0084851c <vfwrite>:
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
  84851c:	defff904 	addi	sp,sp,-28
  848520:	dfc00615 	stw	ra,24(sp)
  848524:	df000515 	stw	fp,20(sp)
  848528:	df000504 	addi	fp,sp,20
  84852c:	e13ffc15 	stw	r4,-16(fp)
  848530:	e17ffd15 	stw	r5,-12(fp)
  848534:	e1bffe15 	stw	r6,-8(fp)
  848538:	e1ffff15 	stw	r7,-4(fp)
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
  84853c:	01000144 	movi	r4,5
  848540:	082adc40 	call	82adc4 <wait_app_sem>

   /* do the write */
   rc = vfwrite_locked(buf, size, items, vfd);
  848544:	e13ffc17 	ldw	r4,-16(fp)
  848548:	e17ffd17 	ldw	r5,-12(fp)
  84854c:	e1bffe17 	ldw	r6,-8(fp)
  848550:	e1ffff17 	ldw	r7,-4(fp)
  848554:	08481340 	call	848134 <vfwrite_locked>
  848558:	e0bffb15 	stw	r2,-20(fp)

   /* unlock the VFS */
   vfs_unlock();
  84855c:	01000144 	movi	r4,5
  848560:	082ae780 	call	82ae78 <post_app_sem>

   IN_PROFILER(PF_FS, PF_EXIT);

   return rc;
  848564:	e0bffb17 	ldw	r2,-20(fp)
}
  848568:	e037883a 	mov	sp,fp
  84856c:	dfc00117 	ldw	ra,4(sp)
  848570:	df000017 	ldw	fp,0(sp)
  848574:	dec00204 	addi	sp,sp,8
  848578:	f800283a 	ret

0084857c <vfseek>:
 * RETURNS: 
 */

int 
vfseek(VFILE * vfd, long offset, int mode)
{
  84857c:	defff704 	addi	sp,sp,-36
  848580:	dfc00815 	stw	ra,32(sp)
  848584:	df000715 	stw	fp,28(sp)
  848588:	df000704 	addi	fp,sp,28
  84858c:	e13ffb15 	stw	r4,-20(fp)
  848590:	e17ffc15 	stw	r5,-16(fp)
  848594:	e1bffd15 	stw	r6,-12(fp)
   /* lock the VFS */
   vfs_lock();
  848598:	01000144 	movi	r4,5
  84859c:	082adc40 	call	82adc4 <wait_app_sem>

   if (isvfile_locked(vfd))
  8485a0:	e13ffb17 	ldw	r4,-20(fp)
  8485a4:	0848cfc0 	call	848cfc <isvfile_locked>
  8485a8:	1005003a 	cmpeq	r2,r2,zero
  8485ac:	1000481e 	bne	r2,zero,8486d0 <vfseek+0x154>
   {
#ifdef HT_RWVFS
      /* the caller is trying to seek a file that's been deleted,
         so return an error indication */
      if (vfd->file == NULL)
  8485b0:	e0bffb17 	ldw	r2,-20(fp)
  8485b4:	10800117 	ldw	r2,4(r2)
  8485b8:	1004c03a 	cmpne	r2,r2,zero
  8485bc:	1000051e 	bne	r2,zero,8485d4 <vfseek+0x58>
      {
         vfs_unlock();
  8485c0:	01000144 	movi	r4,5
  8485c4:	082ae780 	call	82ae78 <post_app_sem>
         return -1;
  8485c8:	00bfffc4 	movi	r2,-1
  8485cc:	e0bffe15 	stw	r2,-8(fp)
  8485d0:	00004306 	br	8486e0 <vfseek+0x164>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
  8485d4:	e0bffb17 	ldw	r2,-20(fp)
  8485d8:	10800117 	ldw	r2,4(r2)
  8485dc:	10800a17 	ldw	r2,40(r2)
  8485e0:	1005003a 	cmpeq	r2,r2,zero
  8485e4:	1000101e 	bne	r2,zero,848628 <vfseek+0xac>
      {
         struct vfroutines *vfp = (struct vfroutines*)(vfd->file->method);
  8485e8:	e0bffb17 	ldw	r2,-20(fp)
  8485ec:	10800117 	ldw	r2,4(r2)
  8485f0:	10800a17 	ldw	r2,40(r2)
  8485f4:	e0bffa15 	stw	r2,-24(fp)
         int   rc;

         rc = vfp->r_fseek(vfd, offset, mode);
  8485f8:	e0bffa17 	ldw	r2,-24(fp)
  8485fc:	10800517 	ldw	r2,20(r2)
  848600:	e13ffb17 	ldw	r4,-20(fp)
  848604:	e17ffc17 	ldw	r5,-16(fp)
  848608:	e1bffd17 	ldw	r6,-12(fp)
  84860c:	103ee83a 	callr	r2
  848610:	e0bff915 	stw	r2,-28(fp)
         vfs_unlock();
  848614:	01000144 	movi	r4,5
  848618:	082ae780 	call	82ae78 <post_app_sem>
         return rc;
  84861c:	e0fff917 	ldw	r3,-28(fp)
  848620:	e0fffe15 	stw	r3,-8(fp)
  848624:	00002e06 	br	8486e0 <vfseek+0x164>
      }
#endif   /* HT_EXTDEV */
      /* this vfseek() currently only supports seek to exact
         end or begining of file */
      switch (mode)
  848628:	e0bffd17 	ldw	r2,-12(fp)
  84862c:	e0bfff15 	stw	r2,-4(fp)
  848630:	e0ffff17 	ldw	r3,-4(fp)
  848634:	18800060 	cmpeqi	r2,r3,1
  848638:	10000f1e 	bne	r2,zero,848678 <vfseek+0xfc>
  84863c:	e0ffff17 	ldw	r3,-4(fp)
  848640:	188000a0 	cmpeqi	r2,r3,2
  848644:	1000131e 	bne	r2,zero,848694 <vfseek+0x118>
  848648:	e0ffff17 	ldw	r3,-4(fp)
  84864c:	1805003a 	cmpeq	r2,r3,zero
  848650:	1000011e 	bne	r2,zero,848658 <vfseek+0xdc>
  848654:	00001a06 	br	8486c0 <vfseek+0x144>
      {
      case SEEK_SET:
         vfd->cmploc = vfd->file->data + offset;
  848658:	e0bffb17 	ldw	r2,-20(fp)
  84865c:	10800117 	ldw	r2,4(r2)
  848660:	10c00617 	ldw	r3,24(r2)
  848664:	e0bffc17 	ldw	r2,-16(fp)
  848668:	1887883a 	add	r3,r3,r2
  84866c:	e0bffb17 	ldw	r2,-20(fp)
  848670:	10c00215 	stw	r3,8(r2)
         break;
  848674:	00001206 	br	8486c0 <vfseek+0x144>
      case SEEK_CUR:
         /* If the file is compressed, then the following
          * adjustment is inaccurate. Currently we don't have
          * any scenario where this happens. - handle later */
         vfd->cmploc += offset; 
  848678:	e0bffb17 	ldw	r2,-20(fp)
  84867c:	10c00217 	ldw	r3,8(r2)
  848680:	e0bffc17 	ldw	r2,-16(fp)
  848684:	1887883a 	add	r3,r3,r2
  848688:	e0bffb17 	ldw	r2,-20(fp)
  84868c:	10c00215 	stw	r3,8(r2)
         break;
  848690:	00000b06 	br	8486c0 <vfseek+0x144>
      case SEEK_END:
         vfd->cmploc = vfd->file->data + vfd->file->comp_size + offset;
  848694:	e0bffb17 	ldw	r2,-20(fp)
  848698:	10800117 	ldw	r2,4(r2)
  84869c:	10c00617 	ldw	r3,24(r2)
  8486a0:	e0bffb17 	ldw	r2,-20(fp)
  8486a4:	10800117 	ldw	r2,4(r2)
  8486a8:	10800817 	ldw	r2,32(r2)
  8486ac:	1887883a 	add	r3,r3,r2
  8486b0:	e0bffc17 	ldw	r2,-16(fp)
  8486b4:	1887883a 	add	r3,r3,r2
  8486b8:	e0bffb17 	ldw	r2,-20(fp)
  8486bc:	10c00215 	stw	r3,8(r2)
         break;
      }
      vfs_unlock();
  8486c0:	01000144 	movi	r4,5
  8486c4:	082ae780 	call	82ae78 <post_app_sem>
      return(0);
  8486c8:	e03ffe15 	stw	zero,-8(fp)
  8486cc:	00000406 	br	8486e0 <vfseek+0x164>
   }

   vfs_unlock();
  8486d0:	01000144 	movi	r4,5
  8486d4:	082ae780 	call	82ae78 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fseek((FILE*)vfd, offset, mode));
#else
   return -1;
  8486d8:	00bfffc4 	movi	r2,-1
  8486dc:	e0bffe15 	stw	r2,-8(fp)
  8486e0:	e0bffe17 	ldw	r2,-8(fp)
#endif   /* HT_LOCALFS */
}
  8486e4:	e037883a 	mov	sp,fp
  8486e8:	dfc00117 	ldw	ra,4(sp)
  8486ec:	df000017 	ldw	fp,0(sp)
  8486f0:	dec00204 	addi	sp,sp,8
  8486f4:	f800283a 	ret

008486f8 <vftell>:
 * RETURNS: 
 */

long
vftell(VFILE * vfd)
{
  8486f8:	defffa04 	addi	sp,sp,-24
  8486fc:	dfc00515 	stw	ra,20(sp)
  848700:	df000415 	stw	fp,16(sp)
  848704:	df000404 	addi	fp,sp,16
  848708:	e13ffe15 	stw	r4,-8(fp)
   /* lock the VFS */
   vfs_lock();
  84870c:	01000144 	movi	r4,5
  848710:	082adc40 	call	82adc4 <wait_app_sem>

   if (isvfile_locked(vfd))
  848714:	e13ffe17 	ldw	r4,-8(fp)
  848718:	0848cfc0 	call	848cfc <isvfile_locked>
  84871c:	1005003a 	cmpeq	r2,r2,zero
  848720:	1000381e 	bne	r2,zero,848804 <vftell+0x10c>
   {
#ifdef HT_RWVFS
      /* the caller is trying to ftell a deleted file,
         so return an error condition */
      if (vfd->file == NULL)
  848724:	e0bffe17 	ldw	r2,-8(fp)
  848728:	10800117 	ldw	r2,4(r2)
  84872c:	1004c03a 	cmpne	r2,r2,zero
  848730:	1000051e 	bne	r2,zero,848748 <vftell+0x50>
      {
         vfs_unlock();
  848734:	01000144 	movi	r4,5
  848738:	082ae780 	call	82ae78 <post_app_sem>
         return -1;
  84873c:	00bfffc4 	movi	r2,-1
  848740:	e0bfff15 	stw	r2,-4(fp)
  848744:	00003306 	br	848814 <vftell+0x11c>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
  848748:	e0bffe17 	ldw	r2,-8(fp)
  84874c:	10800117 	ldw	r2,4(r2)
  848750:	10800a17 	ldw	r2,40(r2)
  848754:	1005003a 	cmpeq	r2,r2,zero
  848758:	10000e1e 	bne	r2,zero,848794 <vftell+0x9c>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
  84875c:	e0bffe17 	ldw	r2,-8(fp)
  848760:	10800117 	ldw	r2,4(r2)
  848764:	10800a17 	ldw	r2,40(r2)
  848768:	e0bffd15 	stw	r2,-12(fp)
         long  rc;

         rc = vfp->r_ftell(vfd);
  84876c:	e0bffd17 	ldw	r2,-12(fp)
  848770:	10800617 	ldw	r2,24(r2)
  848774:	e13ffe17 	ldw	r4,-8(fp)
  848778:	103ee83a 	callr	r2
  84877c:	e0bffc15 	stw	r2,-16(fp)
         vfs_unlock();
  848780:	01000144 	movi	r4,5
  848784:	082ae780 	call	82ae78 <post_app_sem>
         return rc;
  848788:	e0bffc17 	ldw	r2,-16(fp)
  84878c:	e0bfff15 	stw	r2,-4(fp)
  848790:	00002006 	br	848814 <vftell+0x11c>
      }
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
  848794:	e0bffe17 	ldw	r2,-8(fp)
  848798:	11000217 	ldw	r4,8(r2)
  84879c:	e0bffe17 	ldw	r2,-8(fp)
  8487a0:	10800117 	ldw	r2,4(r2)
  8487a4:	10c00617 	ldw	r3,24(r2)
  8487a8:	e0bffe17 	ldw	r2,-8(fp)
  8487ac:	10800117 	ldw	r2,4(r2)
  8487b0:	10800817 	ldw	r2,32(r2)
  8487b4:	1885883a 	add	r2,r3,r2
  8487b8:	2080071e 	bne	r4,r2,8487d8 <vftell+0xe0>
      {
         vfs_unlock();
  8487bc:	01000144 	movi	r4,5
  8487c0:	082ae780 	call	82ae78 <post_app_sem>

         return vfd->file->comp_size;
  8487c4:	e0bffe17 	ldw	r2,-8(fp)
  8487c8:	10800117 	ldw	r2,4(r2)
  8487cc:	10800817 	ldw	r2,32(r2)
  8487d0:	e0bfff15 	stw	r2,-4(fp)
  8487d4:	00000f06 	br	848814 <vftell+0x11c>
      }
      else
      {
         vfs_unlock();
  8487d8:	01000144 	movi	r4,5
  8487dc:	082ae780 	call	82ae78 <post_app_sem>

         return (vfd->cmploc - vfd->file->data);
  8487e0:	e0bffe17 	ldw	r2,-8(fp)
  8487e4:	10800217 	ldw	r2,8(r2)
  8487e8:	1007883a 	mov	r3,r2
  8487ec:	e0bffe17 	ldw	r2,-8(fp)
  8487f0:	10800117 	ldw	r2,4(r2)
  8487f4:	10800617 	ldw	r2,24(r2)
  8487f8:	1887c83a 	sub	r3,r3,r2
  8487fc:	e0ffff15 	stw	r3,-4(fp)
  848800:	00000406 	br	848814 <vftell+0x11c>
      }
   }

   vfs_unlock();
  848804:	01000144 	movi	r4,5
  848808:	082ae780 	call	82ae78 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(ftell((FILE*)vfd));
#else
   return EBADF;
  84880c:	00800244 	movi	r2,9
  848810:	e0bfff15 	stw	r2,-4(fp)
  848814:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
  848818:	e037883a 	mov	sp,fp
  84881c:	dfc00117 	ldw	ra,4(sp)
  848820:	df000017 	ldw	fp,0(sp)
  848824:	dec00204 	addi	sp,sp,8
  848828:	f800283a 	ret

0084882c <vgetc_locked>:
 * RETURNS: 
 */

int
vgetc_locked(VFILE * vfd)
{
  84882c:	defffa04 	addi	sp,sp,-24
  848830:	dfc00515 	stw	ra,20(sp)
  848834:	df000415 	stw	fp,16(sp)
  848838:	df000404 	addi	fp,sp,16
  84883c:	e13ffe15 	stw	r4,-8(fp)
   int   chr;

   if (isvfile_locked(vfd))
  848840:	e13ffe17 	ldw	r4,-8(fp)
  848844:	0848cfc0 	call	848cfc <isvfile_locked>
  848848:	1005003a 	cmpeq	r2,r2,zero
  84884c:	1000361e 	bne	r2,zero,848928 <vgetc_locked+0xfc>
   {
#ifdef HT_RWVFS
      /* the caller is trying to read a file that's been deleted,
         so return an error condition */
      if (vfd->file == NULL)
  848850:	e0bffe17 	ldw	r2,-8(fp)
  848854:	10800117 	ldw	r2,4(r2)
  848858:	1004c03a 	cmpne	r2,r2,zero
  84885c:	1000031e 	bne	r2,zero,84886c <vgetc_locked+0x40>
      {
         return EOF;
  848860:	00bfffc4 	movi	r2,-1
  848864:	e0bfff15 	stw	r2,-4(fp)
  848868:	00003206 	br	848934 <vgetc_locked+0x108>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
  84886c:	e0bffe17 	ldw	r2,-8(fp)
  848870:	10800117 	ldw	r2,4(r2)
  848874:	10800a17 	ldw	r2,40(r2)
  848878:	1005003a 	cmpeq	r2,r2,zero
  84887c:	10000a1e 	bne	r2,zero,8488a8 <vgetc_locked+0x7c>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
  848880:	e0bffe17 	ldw	r2,-8(fp)
  848884:	10800117 	ldw	r2,4(r2)
  848888:	10800a17 	ldw	r2,40(r2)
  84888c:	e0bffc15 	stw	r2,-16(fp)
         return (vfp->r_fgetc(vfd));
  848890:	e0bffc17 	ldw	r2,-16(fp)
  848894:	10800717 	ldw	r2,28(r2)
  848898:	e13ffe17 	ldw	r4,-8(fp)
  84889c:	103ee83a 	callr	r2
  8488a0:	e0bfff15 	stw	r2,-4(fp)
  8488a4:	00002306 	br	848934 <vgetc_locked+0x108>
#endif   /* HT_EXTDEV */

#ifdef HT_RWVFS
      /* a freshly created file might not have a data buffer associated
         with it yet */
      if (vfd->file->data == NULL)
  8488a8:	e0bffe17 	ldw	r2,-8(fp)
  8488ac:	10800117 	ldw	r2,4(r2)
  8488b0:	10800617 	ldw	r2,24(r2)
  8488b4:	1004c03a 	cmpne	r2,r2,zero
  8488b8:	1000031e 	bne	r2,zero,8488c8 <vgetc_locked+0x9c>
         return EOF;
  8488bc:	00bfffc4 	movi	r2,-1
  8488c0:	e0bfff15 	stw	r2,-4(fp)
  8488c4:	00001b06 	br	848934 <vgetc_locked+0x108>
      }
      else  /* HTML compression flag not set */
      {
#endif   /* HTML_COMPRESSION */
         /* Check to see if read has advanced to end of file */
         if (vfd->cmploc >= (vfd->file->data + vfd->file->comp_size))
  8488c8:	e0bffe17 	ldw	r2,-8(fp)
  8488cc:	11000217 	ldw	r4,8(r2)
  8488d0:	e0bffe17 	ldw	r2,-8(fp)
  8488d4:	10800117 	ldw	r2,4(r2)
  8488d8:	10c00617 	ldw	r3,24(r2)
  8488dc:	e0bffe17 	ldw	r2,-8(fp)
  8488e0:	10800117 	ldw	r2,4(r2)
  8488e4:	10800817 	ldw	r2,32(r2)
  8488e8:	1885883a 	add	r2,r3,r2
  8488ec:	20800336 	bltu	r4,r2,8488fc <vgetc_locked+0xd0>
            chr = EOF;
  8488f0:	00bfffc4 	movi	r2,-1
  8488f4:	e0bffd15 	stw	r2,-12(fp)
  8488f8:	00000806 	br	84891c <vgetc_locked+0xf0>
         else  /* else just get next char to return */
            chr = *(vfd->cmploc++);
  8488fc:	e0bffe17 	ldw	r2,-8(fp)
  848900:	10c00217 	ldw	r3,8(r2)
  848904:	18800003 	ldbu	r2,0(r3)
  848908:	10803fcc 	andi	r2,r2,255
  84890c:	e0bffd15 	stw	r2,-12(fp)
  848910:	18c00044 	addi	r3,r3,1
  848914:	e0bffe17 	ldw	r2,-8(fp)
  848918:	10c00215 	stw	r3,8(r2)
#ifdef HTML_COMPRESSION
      }  /* need to close brace form if...else; */
#endif   /* HTML_COMPRESSION */

      return chr;
  84891c:	e0bffd17 	ldw	r2,-12(fp)
  848920:	e0bfff15 	stw	r2,-4(fp)
  848924:	00000306 	br	848934 <vgetc_locked+0x108>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
  848928:	082a7c80 	call	82a7c8 <dtrap>
   return EOF;
  84892c:	00bfffc4 	movi	r2,-1
  848930:	e0bfff15 	stw	r2,-4(fp)
  848934:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
  848938:	e037883a 	mov	sp,fp
  84893c:	dfc00117 	ldw	ra,4(sp)
  848940:	df000017 	ldw	fp,0(sp)
  848944:	dec00204 	addi	sp,sp,8
  848948:	f800283a 	ret

0084894c <vgetc>:
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
  84894c:	defffc04 	addi	sp,sp,-16
  848950:	dfc00315 	stw	ra,12(sp)
  848954:	df000215 	stw	fp,8(sp)
  848958:	df000204 	addi	fp,sp,8
  84895c:	e13fff15 	stw	r4,-4(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
  848960:	01000144 	movi	r4,5
  848964:	082adc40 	call	82adc4 <wait_app_sem>

   /* get the character */
   rc = vgetc_locked(vfd);
  848968:	e13fff17 	ldw	r4,-4(fp)
  84896c:	084882c0 	call	84882c <vgetc_locked>
  848970:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
  848974:	01000144 	movi	r4,5
  848978:	082ae780 	call	82ae78 <post_app_sem>
   return rc;
  84897c:	e0bffe17 	ldw	r2,-8(fp)
}
  848980:	e037883a 	mov	sp,fp
  848984:	dfc00117 	ldw	ra,4(sp)
  848988:	df000017 	ldw	fp,0(sp)
  84898c:	dec00204 	addi	sp,sp,8
  848990:	f800283a 	ret

00848994 <vfslookup_locked>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup_locked(char * name)
{
  848994:	defffa04 	addi	sp,sp,-24
  848998:	dfc00515 	stw	ra,20(sp)
  84899c:	df000415 	stw	fp,16(sp)
  8489a0:	df000404 	addi	fp,sp,16
  8489a4:	e13ffe15 	stw	r4,-8(fp)

#ifdef VFS_STRIPPATH
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
  8489a8:	e0bffe17 	ldw	r2,-8(fp)
  8489ac:	10800003 	ldbu	r2,0(r2)
  8489b0:	10803fcc 	andi	r2,r2,255
  8489b4:	1080201c 	xori	r2,r2,128
  8489b8:	10bfe004 	addi	r2,r2,-128
  8489bc:	10800be0 	cmpeqi	r2,r2,47
  8489c0:	1000071e 	bne	r2,zero,8489e0 <vfslookup_locked+0x4c>
  8489c4:	e0bffe17 	ldw	r2,-8(fp)
  8489c8:	10800003 	ldbu	r2,0(r2)
  8489cc:	10803fcc 	andi	r2,r2,255
  8489d0:	1080201c 	xori	r2,r2,128
  8489d4:	10bfe004 	addi	r2,r2,-128
  8489d8:	10801718 	cmpnei	r2,r2,92
  8489dc:	10001a1e 	bne	r2,zero,848a48 <vfslookup_locked+0xb4>
   {
      cp = strippath(name);
  8489e0:	e13ffe17 	ldw	r4,-8(fp)
  8489e4:	0848b140 	call	848b14 <strippath>
  8489e8:	e0bffc15 	stw	r2,-16(fp)

      if (!cp) /* strippath coundn't match our path */
  8489ec:	e0bffc17 	ldw	r2,-16(fp)
  8489f0:	1004c03a 	cmpne	r2,r2,zero
  8489f4:	1000121e 	bne	r2,zero,848a40 <vfslookup_locked+0xac>
      {
         /* Files like "/hub47.gif" need to be taken care of */
         if (*name == '/' || *name == '\\')
  8489f8:	e0bffe17 	ldw	r2,-8(fp)
  8489fc:	10800003 	ldbu	r2,0(r2)
  848a00:	10803fcc 	andi	r2,r2,255
  848a04:	1080201c 	xori	r2,r2,128
  848a08:	10bfe004 	addi	r2,r2,-128
  848a0c:	10800be0 	cmpeqi	r2,r2,47
  848a10:	1000071e 	bne	r2,zero,848a30 <vfslookup_locked+0x9c>
  848a14:	e0bffe17 	ldw	r2,-8(fp)
  848a18:	10800003 	ldbu	r2,0(r2)
  848a1c:	10803fcc 	andi	r2,r2,255
  848a20:	1080201c 	xori	r2,r2,128
  848a24:	10bfe004 	addi	r2,r2,-128
  848a28:	10801718 	cmpnei	r2,r2,92
  848a2c:	1000061e 	bne	r2,zero,848a48 <vfslookup_locked+0xb4>
            name++;
  848a30:	e0bffe17 	ldw	r2,-8(fp)
  848a34:	10800044 	addi	r2,r2,1
  848a38:	e0bffe15 	stw	r2,-8(fp)
  848a3c:	00000206 	br	848a48 <vfslookup_locked+0xb4>
      }
      else
         name = cp ;
  848a40:	e0bffc17 	ldw	r2,-16(fp)
  848a44:	e0bffe15 	stw	r2,-8(fp)
   }
#endif   /* VFS_STRIPPATH */

   /* see if there is a question mark in the file name */
   if (strchr(name,'?'))
  848a48:	e13ffe17 	ldw	r4,-8(fp)
  848a4c:	01400fc4 	movi	r5,63
  848a50:	0807fa80 	call	807fa8 <strchr>
  848a54:	1005003a 	cmpeq	r2,r2,zero
  848a58:	1000031e 	bne	r2,zero,848a68 <vfslookup_locked+0xd4>
   {
      dtrap(); /* is this still allowed? */
  848a5c:	082a7c80 	call	82a7c8 <dtrap>
      return NULL;
  848a60:	e03fff15 	stw	zero,-4(fp)
  848a64:	00001306 	br	848ab4 <vfslookup_locked+0x120>
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
  848a68:	d0a0db17 	ldw	r2,-31892(gp)
  848a6c:	e0bffd15 	stw	r2,-12(fp)
  848a70:	00000c06 	br	848aa4 <vfslookup_locked+0x110>
   {
      if (strcmp(name, vp->name) == 0)
  848a74:	e0bffd17 	ldw	r2,-12(fp)
  848a78:	11400104 	addi	r5,r2,4
  848a7c:	e13ffe17 	ldw	r4,-8(fp)
  848a80:	08080880 	call	808088 <strcmp>
  848a84:	1004c03a 	cmpne	r2,r2,zero
  848a88:	1000031e 	bne	r2,zero,848a98 <vfslookup_locked+0x104>
         return vp;
  848a8c:	e0bffd17 	ldw	r2,-12(fp)
  848a90:	e0bfff15 	stw	r2,-4(fp)
  848a94:	00000706 	br	848ab4 <vfslookup_locked+0x120>
   {
      dtrap(); /* is this still allowed? */
      return NULL;
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
  848a98:	e0bffd17 	ldw	r2,-12(fp)
  848a9c:	10800017 	ldw	r2,0(r2)
  848aa0:	e0bffd15 	stw	r2,-12(fp)
  848aa4:	e0bffd17 	ldw	r2,-12(fp)
  848aa8:	1004c03a 	cmpne	r2,r2,zero
  848aac:	103ff11e 	bne	r2,zero,848a74 <vfslookup_locked+0xe0>
   {
      if (strcmp(name, vp->name) == 0)
         return vp;
   }

   return NULL;   /* fall to here if not found in for loop */
  848ab0:	e03fff15 	stw	zero,-4(fp)
  848ab4:	e0bfff17 	ldw	r2,-4(fp)
}
  848ab8:	e037883a 	mov	sp,fp
  848abc:	dfc00117 	ldw	ra,4(sp)
  848ac0:	df000017 	ldw	fp,0(sp)
  848ac4:	dec00204 	addi	sp,sp,8
  848ac8:	f800283a 	ret

00848acc <vfslookup>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
  848acc:	defffc04 	addi	sp,sp,-16
  848ad0:	dfc00315 	stw	ra,12(sp)
  848ad4:	df000215 	stw	fp,8(sp)
  848ad8:	df000204 	addi	fp,sp,8
  848adc:	e13fff15 	stw	r4,-4(fp)
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
  848ae0:	01000144 	movi	r4,5
  848ae4:	082adc40 	call	82adc4 <wait_app_sem>

   /* do the lookup */
   vp = vfslookup_locked(name);
  848ae8:	e13fff17 	ldw	r4,-4(fp)
  848aec:	08489940 	call	848994 <vfslookup_locked>
  848af0:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
  848af4:	01000144 	movi	r4,5
  848af8:	082ae780 	call	82ae78 <post_app_sem>
   return vp;
  848afc:	e0bffe17 	ldw	r2,-8(fp)
}
  848b00:	e037883a 	mov	sp,fp
  848b04:	dfc00117 	ldw	ra,4(sp)
  848b08:	df000017 	ldw	fp,0(sp)
  848b0c:	dec00204 	addi	sp,sp,8
  848b10:	f800283a 	ret

00848b14 <strippath>:
 * have the http_root_path prepended; or on any error. 
 */

char * 
strippath(char * name)
{
  848b14:	defff804 	addi	sp,sp,-32
  848b18:	dfc00715 	stw	ra,28(sp)
  848b1c:	df000615 	stw	fp,24(sp)
  848b20:	df000604 	addi	fp,sp,24
  848b24:	e13ffe15 	stw	r4,-8(fp)
   char *   path; /* pointer into system path */
   char *   ptmp; /* another pointer into path */
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
  848b28:	e13ffe17 	ldw	r4,-8(fp)
  848b2c:	0825bd40 	call	825bd4 <uslash>
  848b30:	e0bffb15 	stw	r2,-20(fp)
   path = http_root_path; /* The servers root path, at least one UNIX slash */
  848b34:	d0a05a17 	ldw	r2,-32408(gp)
  848b38:	e0bffd15 	stw	r2,-12(fp)
   while (*path && *ntmp)
  848b3c:	00003e06 	br	848c38 <strippath+0x124>
   {
      while (*path == '/') path++;   /* strip leading slash */
  848b40:	e0bffd17 	ldw	r2,-12(fp)
  848b44:	10800044 	addi	r2,r2,1
  848b48:	e0bffd15 	stw	r2,-12(fp)
  848b4c:	e0bffd17 	ldw	r2,-12(fp)
  848b50:	10800003 	ldbu	r2,0(r2)
  848b54:	10803fcc 	andi	r2,r2,255
  848b58:	1080201c 	xori	r2,r2,128
  848b5c:	10bfe004 	addi	r2,r2,-128
  848b60:	10800be0 	cmpeqi	r2,r2,47
  848b64:	103ff61e 	bne	r2,zero,848b40 <strippath+0x2c>
         if (*path == 0)
  848b68:	e0bffd17 	ldw	r2,-12(fp)
  848b6c:	10800003 	ldbu	r2,0(r2)
  848b70:	10803fcc 	andi	r2,r2,255
  848b74:	1080201c 	xori	r2,r2,128
  848b78:	10bfe004 	addi	r2,r2,-128
  848b7c:	1005003a 	cmpeq	r2,r2,zero
  848b80:	10003b1e 	bne	r2,zero,848c70 <strippath+0x15c>
         break;
      /* find number of chars in this directory layer's name */
      ptmp = strchr(path, '/');   /* location of next slash in path */
  848b84:	e13ffd17 	ldw	r4,-12(fp)
  848b88:	01400bc4 	movi	r5,47
  848b8c:	0807fa80 	call	807fa8 <strchr>
  848b90:	e0bffc15 	stw	r2,-16(fp)
      if (ptmp)
  848b94:	e0bffc17 	ldw	r2,-16(fp)
  848b98:	1005003a 	cmpeq	r2,r2,zero
  848b9c:	1000051e 	bne	r2,zero,848bb4 <strippath+0xa0>
         dirlen = ptmp - path;
  848ba0:	e0bffc17 	ldw	r2,-16(fp)
  848ba4:	e0fffd17 	ldw	r3,-12(fp)
  848ba8:	10c5c83a 	sub	r2,r2,r3
  848bac:	e0bffa15 	stw	r2,-24(fp)
  848bb0:	00000706 	br	848bd0 <strippath+0xbc>
      else
         dirlen = strlen(path);
  848bb4:	e13ffd17 	ldw	r4,-12(fp)
  848bb8:	08088440 	call	808844 <strlen>
  848bbc:	e0bffa15 	stw	r2,-24(fp)

      while (*ntmp == '/') ntmp++;   /* strip leading slash */
  848bc0:	00000306 	br	848bd0 <strippath+0xbc>
  848bc4:	e0bffb17 	ldw	r2,-20(fp)
  848bc8:	10800044 	addi	r2,r2,1
  848bcc:	e0bffb15 	stw	r2,-20(fp)
  848bd0:	e0bffb17 	ldw	r2,-20(fp)
  848bd4:	10800003 	ldbu	r2,0(r2)
  848bd8:	10803fcc 	andi	r2,r2,255
  848bdc:	1080201c 	xori	r2,r2,128
  848be0:	10bfe004 	addi	r2,r2,-128
  848be4:	10800be0 	cmpeqi	r2,r2,47
  848be8:	103ff61e 	bne	r2,zero,848bc4 <strippath+0xb0>
         if (strncmp(ntmp, path, dirlen) == 0)
  848bec:	e1bffa17 	ldw	r6,-24(fp)
  848bf0:	e13ffb17 	ldw	r4,-20(fp)
  848bf4:	e17ffd17 	ldw	r5,-12(fp)
  848bf8:	08088b80 	call	8088b8 <strncmp>
  848bfc:	1004c03a 	cmpne	r2,r2,zero
  848c00:	10000b1e 	bne	r2,zero,848c30 <strippath+0x11c>
      {
         path += dirlen;
  848c04:	e0bffa17 	ldw	r2,-24(fp)
  848c08:	1007883a 	mov	r3,r2
  848c0c:	e0bffd17 	ldw	r2,-12(fp)
  848c10:	10c5883a 	add	r2,r2,r3
  848c14:	e0bffd15 	stw	r2,-12(fp)
         ntmp += dirlen;
  848c18:	e0bffa17 	ldw	r2,-24(fp)
  848c1c:	1007883a 	mov	r3,r2
  848c20:	e0bffb17 	ldw	r2,-20(fp)
  848c24:	10c5883a 	add	r2,r2,r3
  848c28:	e0bffb15 	stw	r2,-20(fp)
  848c2c:	00000206 	br	848c38 <strippath+0x124>
      }
      else
         return NULL;   /* didn't match */
  848c30:	e03fff15 	stw	zero,-4(fp)
  848c34:	00002b06 	br	848ce4 <strippath+0x1d0>
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
   path = http_root_path; /* The servers root path, at least one UNIX slash */
   while (*path && *ntmp)
  848c38:	e0bffd17 	ldw	r2,-12(fp)
  848c3c:	10800003 	ldbu	r2,0(r2)
  848c40:	10803fcc 	andi	r2,r2,255
  848c44:	1080201c 	xori	r2,r2,128
  848c48:	10bfe004 	addi	r2,r2,-128
  848c4c:	1005003a 	cmpeq	r2,r2,zero
  848c50:	1000071e 	bne	r2,zero,848c70 <strippath+0x15c>
  848c54:	e0bffb17 	ldw	r2,-20(fp)
  848c58:	10800003 	ldbu	r2,0(r2)
  848c5c:	10803fcc 	andi	r2,r2,255
  848c60:	1080201c 	xori	r2,r2,128
  848c64:	10bfe004 	addi	r2,r2,-128
  848c68:	1004c03a 	cmpne	r2,r2,zero
  848c6c:	103fb71e 	bne	r2,zero,848b4c <strippath+0x38>
         ntmp += dirlen;
      }
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
  848c70:	e0bffd17 	ldw	r2,-12(fp)
  848c74:	10800003 	ldbu	r2,0(r2)
  848c78:	10803fcc 	andi	r2,r2,255
  848c7c:	1080201c 	xori	r2,r2,128
  848c80:	10bfe004 	addi	r2,r2,-128
  848c84:	1004c03a 	cmpne	r2,r2,zero
  848c88:	1000151e 	bne	r2,zero,848ce0 <strippath+0x1cc>
   {
      while (*ntmp == '\\' || *ntmp == '/')
  848c8c:	00000306 	br	848c9c <strippath+0x188>
         ntmp++;
  848c90:	e0bffb17 	ldw	r2,-20(fp)
  848c94:	10800044 	addi	r2,r2,1
  848c98:	e0bffb15 	stw	r2,-20(fp)
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
   {
      while (*ntmp == '\\' || *ntmp == '/')
  848c9c:	e0bffb17 	ldw	r2,-20(fp)
  848ca0:	10800003 	ldbu	r2,0(r2)
  848ca4:	10803fcc 	andi	r2,r2,255
  848ca8:	1080201c 	xori	r2,r2,128
  848cac:	10bfe004 	addi	r2,r2,-128
  848cb0:	10801720 	cmpeqi	r2,r2,92
  848cb4:	103ff61e 	bne	r2,zero,848c90 <strippath+0x17c>
  848cb8:	e0bffb17 	ldw	r2,-20(fp)
  848cbc:	10800003 	ldbu	r2,0(r2)
  848cc0:	10803fcc 	andi	r2,r2,255
  848cc4:	1080201c 	xori	r2,r2,128
  848cc8:	10bfe004 	addi	r2,r2,-128
  848ccc:	10800be0 	cmpeqi	r2,r2,47
  848cd0:	103fef1e 	bne	r2,zero,848c90 <strippath+0x17c>
         ntmp++;
      return ntmp;
  848cd4:	e0bffb17 	ldw	r2,-20(fp)
  848cd8:	e0bfff15 	stw	r2,-4(fp)
  848cdc:	00000106 	br	848ce4 <strippath+0x1d0>
   }
   else
      return NULL;
  848ce0:	e03fff15 	stw	zero,-4(fp)
  848ce4:	e0bfff17 	ldw	r2,-4(fp)
}
  848ce8:	e037883a 	mov	sp,fp
  848cec:	dfc00117 	ldw	ra,4(sp)
  848cf0:	df000017 	ldw	fp,0(sp)
  848cf4:	dec00204 	addi	sp,sp,8
  848cf8:	f800283a 	ret

00848cfc <isvfile_locked>:
 * RETURNS: 
 */

int
isvfile_locked(VFILE * vfp)
{
  848cfc:	defffc04 	addi	sp,sp,-16
  848d00:	df000315 	stw	fp,12(sp)
  848d04:	df000304 	addi	fp,sp,12
  848d08:	e13ffe15 	stw	r4,-8(fp)
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
  848d0c:	d0a0da17 	ldw	r2,-31896(gp)
  848d10:	e0bffd15 	stw	r2,-12(fp)
  848d14:	00000906 	br	848d3c <isvfile_locked+0x40>
      if (vtmp == vfp)
  848d18:	e0fffd17 	ldw	r3,-12(fp)
  848d1c:	e0bffe17 	ldw	r2,-8(fp)
  848d20:	1880031e 	bne	r3,r2,848d30 <isvfile_locked+0x34>
      return TRUE;
  848d24:	00800044 	movi	r2,1
  848d28:	e0bfff15 	stw	r2,-4(fp)
  848d2c:	00000706 	br	848d4c <isvfile_locked+0x50>
int
isvfile_locked(VFILE * vfp)
{
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
  848d30:	e0bffd17 	ldw	r2,-12(fp)
  848d34:	10800017 	ldw	r2,0(r2)
  848d38:	e0bffd15 	stw	r2,-12(fp)
  848d3c:	e0bffd17 	ldw	r2,-12(fp)
  848d40:	1004c03a 	cmpne	r2,r2,zero
  848d44:	103ff41e 	bne	r2,zero,848d18 <isvfile_locked+0x1c>
      if (vtmp == vfp)
      return TRUE;

   return FALSE;  /* passed pointer not found in list */
  848d48:	e03fff15 	stw	zero,-4(fp)
  848d4c:	e0bfff17 	ldw	r2,-4(fp)
}
  848d50:	e037883a 	mov	sp,fp
  848d54:	df000017 	ldw	fp,0(sp)
  848d58:	dec00104 	addi	sp,sp,4
  848d5c:	f800283a 	ret

00848d60 <isvfile>:
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
  848d60:	defffc04 	addi	sp,sp,-16
  848d64:	dfc00315 	stw	ra,12(sp)
  848d68:	df000215 	stw	fp,8(sp)
  848d6c:	df000204 	addi	fp,sp,8
  848d70:	e13fff15 	stw	r4,-4(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
  848d74:	01000144 	movi	r4,5
  848d78:	082adc40 	call	82adc4 <wait_app_sem>

   /* do the lookup */
   rc = isvfile_locked(vfp);
  848d7c:	e13fff17 	ldw	r4,-4(fp)
  848d80:	0848cfc0 	call	848cfc <isvfile_locked>
  848d84:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
  848d88:	01000144 	movi	r4,5
  848d8c:	082ae780 	call	82ae78 <post_app_sem>
   return rc;
  848d90:	e0bffe17 	ldw	r2,-8(fp)
}
  848d94:	e037883a 	mov	sp,fp
  848d98:	dfc00117 	ldw	ra,4(sp)
  848d9c:	df000017 	ldw	fp,0(sp)
  848da0:	dec00204 	addi	sp,sp,8
  848da4:	f800283a 	ret

00848da8 <vferror>:
 * RETURNS: 
 */

int
vferror(VFILE * vfd)
{
  848da8:	defffc04 	addi	sp,sp,-16
  848dac:	dfc00315 	stw	ra,12(sp)
  848db0:	df000215 	stw	fp,8(sp)
  848db4:	df000204 	addi	fp,sp,8
  848db8:	e13ffe15 	stw	r4,-8(fp)
   /* lock the VFS */
   vfs_lock();
  848dbc:	01000144 	movi	r4,5
  848dc0:	082adc40 	call	82adc4 <wait_app_sem>

   if (isvfile_locked(vfd))
  848dc4:	e13ffe17 	ldw	r4,-8(fp)
  848dc8:	0848cfc0 	call	848cfc <isvfile_locked>
  848dcc:	1005003a 	cmpeq	r2,r2,zero
  848dd0:	1000061e 	bne	r2,zero,848dec <vferror+0x44>
   {
      vfs_unlock();
  848dd4:	01000144 	movi	r4,5
  848dd8:	082ae780 	call	82ae78 <post_app_sem>

      return vfd->error;
  848ddc:	e0bffe17 	ldw	r2,-8(fp)
  848de0:	10800417 	ldw	r2,16(r2)
  848de4:	e0bfff15 	stw	r2,-4(fp)
  848de8:	00000406 	br	848dfc <vferror+0x54>
   }

   vfs_unlock();
  848dec:	01000144 	movi	r4,5
  848df0:	082ae780 	call	82ae78 <post_app_sem>

#ifdef HT_LOCALFS
   return(ferror((FILE*)vfd));
#else /* not a VFILE, and no local FS */
   return -1;  /* should this be an error? */
  848df4:	00bfffc4 	movi	r2,-1
  848df8:	e0bfff15 	stw	r2,-4(fp)
  848dfc:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
  848e00:	e037883a 	mov	sp,fp
  848e04:	dfc00117 	ldw	ra,4(sp)
  848e08:	df000017 	ldw	fp,0(sp)
  848e0c:	dec00204 	addi	sp,sp,8
  848e10:	f800283a 	ret

00848e14 <vclearerr>:
 *
 * RETURNS: 
 */

void vclearerr(VFILE * vfd)
{
  848e14:	defffd04 	addi	sp,sp,-12
  848e18:	dfc00215 	stw	ra,8(sp)
  848e1c:	df000115 	stw	fp,4(sp)
  848e20:	df000104 	addi	fp,sp,4
  848e24:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
  848e28:	01000144 	movi	r4,5
  848e2c:	082adc40 	call	82adc4 <wait_app_sem>

   if (isvfile_locked(vfd))
  848e30:	e13fff17 	ldw	r4,-4(fp)
  848e34:	0848cfc0 	call	848cfc <isvfile_locked>
  848e38:	1005003a 	cmpeq	r2,r2,zero
  848e3c:	1000051e 	bne	r2,zero,848e54 <vclearerr+0x40>
   {
      vfs_unlock();
  848e40:	01000144 	movi	r4,5
  848e44:	082ae780 	call	82ae78 <post_app_sem>

      vfd->error = 0;
  848e48:	e0bfff17 	ldw	r2,-4(fp)
  848e4c:	10000415 	stw	zero,16(r2)
      return;
  848e50:	00000206 	br	848e5c <vclearerr+0x48>
   }

   vfs_unlock();
  848e54:	01000144 	movi	r4,5
  848e58:	082ae780 	call	82ae78 <post_app_sem>

#ifdef HT_LOCALFS
   clearerr((FILE *) vfd);
#endif   /* HT_LOCALFS */
}
  848e5c:	e037883a 	mov	sp,fp
  848e60:	dfc00117 	ldw	ra,4(sp)
  848e64:	df000017 	ldw	fp,0(sp)
  848e68:	dec00204 	addi	sp,sp,8
  848e6c:	f800283a 	ret

00848e70 <prep_vfs>:
 * PARAMS: NONE
 *
 * RETURNS: Error Code or 0 for OK
 */
int prep_vfs(void)
{
  848e70:	defffe04 	addi	sp,sp,-8
  848e74:	df000115 	stw	fp,4(sp)
  848e78:	df000104 	addi	fp,sp,4
int e = 0;
  848e7c:	e03fff15 	stw	zero,-4(fp)
   {
      dprintf("unable to install VFS NVPARMS, reconfigure nv_formats[]\n");
      dtrap();
   }
#endif   /* INCLUDE_NVPARMS */
   return e;
  848e80:	e0bfff17 	ldw	r2,-4(fp)
}
  848e84:	e037883a 	mov	sp,fp
  848e88:	df000017 	ldw	fp,0(sp)
  848e8c:	dec00104 	addi	sp,sp,4
  848e90:	f800283a 	ret

00848e94 <alt_fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
  848e94:	defff404 	addi	sp,sp,-48
  848e98:	dfc00915 	stw	ra,36(sp)
  848e9c:	df000815 	stw	fp,32(sp)
  848ea0:	df000804 	addi	fp,sp,32
  848ea4:	e13ffb15 	stw	r4,-20(fp)
  848ea8:	e1800215 	stw	r6,8(fp)
  848eac:	e1c00315 	stw	r7,12(fp)
  848eb0:	e17ffc15 	stw	r5,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  848eb4:	e0bffb17 	ldw	r2,-20(fp)
  848eb8:	1004803a 	cmplt	r2,r2,zero
  848ebc:	1000081e 	bne	r2,zero,848ee0 <alt_fcntl+0x4c>
  848ec0:	e0bffb17 	ldw	r2,-20(fp)
  848ec4:	10800324 	muli	r2,r2,12
  848ec8:	1007883a 	mov	r3,r2
  848ecc:	00802174 	movhi	r2,133
  848ed0:	1081b204 	addi	r2,r2,1736
  848ed4:	1887883a 	add	r3,r3,r2
  848ed8:	e0fffe15 	stw	r3,-8(fp)
  848edc:	00000106 	br	848ee4 <alt_fcntl+0x50>
  848ee0:	e03ffe15 	stw	zero,-8(fp)
  848ee4:	e0bffe17 	ldw	r2,-8(fp)
  848ee8:	e0bff915 	stw	r2,-28(fp)
  
  if (fd)
  848eec:	e0bff917 	ldw	r2,-28(fp)
  848ef0:	1005003a 	cmpeq	r2,r2,zero
  848ef4:	1000301e 	bne	r2,zero,848fb8 <alt_fcntl+0x124>
  {
    switch (cmd)
  848ef8:	e0fffc17 	ldw	r3,-16(fp)
  848efc:	e0ffff15 	stw	r3,-4(fp)
  848f00:	e0ffff17 	ldw	r3,-4(fp)
  848f04:	188000e0 	cmpeqi	r2,r3,3
  848f08:	1000041e 	bne	r2,zero,848f1c <alt_fcntl+0x88>
  848f0c:	e0ffff17 	ldw	r3,-4(fp)
  848f10:	18800120 	cmpeqi	r2,r3,4
  848f14:	1000081e 	bne	r2,zero,848f38 <alt_fcntl+0xa4>
  848f18:	00002006 	br	848f9c <alt_fcntl+0x108>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
  848f1c:	e0bff917 	ldw	r2,-28(fp)
  848f20:	10c00217 	ldw	r3,8(r2)
  848f24:	00900034 	movhi	r2,16384
  848f28:	10bfffc4 	addi	r2,r2,-1
  848f2c:	1886703a 	and	r3,r3,r2
  848f30:	e0fffd15 	stw	r3,-12(fp)
  848f34:	00002606 	br	848fd0 <alt_fcntl+0x13c>
    case F_SETFL:
      va_start(argp, cmd);
  848f38:	e0800204 	addi	r2,fp,8
  848f3c:	e0bffa15 	stw	r2,-24(fp)
      flags = va_arg(argp, long);
  848f40:	e0fffa17 	ldw	r3,-24(fp)
  848f44:	18800104 	addi	r2,r3,4
  848f48:	e0bffa15 	stw	r2,-24(fp)
  848f4c:	1805883a 	mov	r2,r3
  848f50:	10800017 	ldw	r2,0(r2)
  848f54:	e0bff815 	stw	r2,-32(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
  848f58:	e0bff917 	ldw	r2,-28(fp)
  848f5c:	10c00217 	ldw	r3,8(r2)
  848f60:	00affdc4 	movi	r2,-16393
  848f64:	1886703a 	and	r3,r3,r2
  848f68:	e0bff917 	ldw	r2,-28(fp)
  848f6c:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
  848f70:	e0bff917 	ldw	r2,-28(fp)
  848f74:	10800217 	ldw	r2,8(r2)
  848f78:	1007883a 	mov	r3,r2
  848f7c:	e0bff817 	ldw	r2,-32(fp)
  848f80:	1090020c 	andi	r2,r2,16392
  848f84:	1884b03a 	or	r2,r3,r2
  848f88:	1007883a 	mov	r3,r2
  848f8c:	e0bff917 	ldw	r2,-28(fp)
  848f90:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
  848f94:	e03ffd15 	stw	zero,-12(fp)
  848f98:	00000d06 	br	848fd0 <alt_fcntl+0x13c>
    default:
      ALT_ERRNO = EINVAL;
  848f9c:	0848fe80 	call	848fe8 <alt_get_errno>
  848fa0:	1007883a 	mov	r3,r2
  848fa4:	00800584 	movi	r2,22
  848fa8:	18800015 	stw	r2,0(r3)
      return -1;
  848fac:	00bfffc4 	movi	r2,-1
  848fb0:	e0bffd15 	stw	r2,-12(fp)
  848fb4:	00000606 	br	848fd0 <alt_fcntl+0x13c>
    }
  }

  ALT_ERRNO = EBADFD;
  848fb8:	0848fe80 	call	848fe8 <alt_get_errno>
  848fbc:	1007883a 	mov	r3,r2
  848fc0:	00801444 	movi	r2,81
  848fc4:	18800015 	stw	r2,0(r3)
  return -1;
  848fc8:	00ffffc4 	movi	r3,-1
  848fcc:	e0fffd15 	stw	r3,-12(fp)
  848fd0:	e0bffd17 	ldw	r2,-12(fp)
}
  848fd4:	e037883a 	mov	sp,fp
  848fd8:	dfc00117 	ldw	ra,4(sp)
  848fdc:	df000017 	ldw	fp,0(sp)
  848fe0:	dec00404 	addi	sp,sp,16
  848fe4:	f800283a 	ret

00848fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  848fe8:	defffd04 	addi	sp,sp,-12
  848fec:	dfc00215 	stw	ra,8(sp)
  848ff0:	df000115 	stw	fp,4(sp)
  848ff4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  848ff8:	00802174 	movhi	r2,133
  848ffc:	1082c504 	addi	r2,r2,2836
  849000:	10800017 	ldw	r2,0(r2)
  849004:	1005003a 	cmpeq	r2,r2,zero
  849008:	1000061e 	bne	r2,zero,849024 <alt_get_errno+0x3c>
  84900c:	00802174 	movhi	r2,133
  849010:	1082c504 	addi	r2,r2,2836
  849014:	10800017 	ldw	r2,0(r2)
  849018:	103ee83a 	callr	r2
  84901c:	e0bfff15 	stw	r2,-4(fp)
  849020:	00000306 	br	849030 <alt_get_errno+0x48>
  849024:	00802174 	movhi	r2,133
  849028:	1082da04 	addi	r2,r2,2920
  84902c:	e0bfff15 	stw	r2,-4(fp)
  849030:	e0bfff17 	ldw	r2,-4(fp)
}
  849034:	e037883a 	mov	sp,fp
  849038:	dfc00117 	ldw	ra,4(sp)
  84903c:	df000017 	ldw	fp,0(sp)
  849040:	dec00204 	addi	sp,sp,8
  849044:	f800283a 	ret

00849048 <icmprcv>:
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
  849048:	deffed04 	addi	sp,sp,-76
  84904c:	dfc01215 	stw	ra,72(sp)
  849050:	df001115 	stw	fp,68(sp)
  849054:	dc401015 	stw	r17,64(sp)
  849058:	dc000f15 	stw	r16,60(sp)
  84905c:	df000f04 	addi	fp,sp,60
  849060:	e13ffd15 	stw	r4,-12(fp)
   unsigned short xsum;
#ifdef FULL_ICMP
   struct redirect * rd;
   struct destun *   pdp;
#endif   /* FULL_ICMP */
   char sav_ch = 0;
  849064:	e03ff505 	stb	zero,-44(fp)
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */
  849068:	00803934 	movhi	r2,228
  84906c:	10aa0004 	addi	r2,r2,-22528
  849070:	10800017 	ldw	r2,0(r2)
  849074:	10c00044 	addi	r3,r2,1
  849078:	00803934 	movhi	r2,228
  84907c:	10aa0004 	addi	r2,r2,-22528
  849080:	10c00015 	stw	r3,0(r2)

   pip = ip_head(p);                      /* find IP header */
  849084:	e0bffd17 	ldw	r2,-12(fp)
  849088:	10800317 	ldw	r2,12(r2)
  84908c:	e0bffa15 	stw	r2,-24(fp)
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
  849090:	e0bffd17 	ldw	r2,-12(fp)
  849094:	10c00417 	ldw	r3,16(r2)
  849098:	e0bffa17 	ldw	r2,-24(fp)
  84909c:	10800003 	ldbu	r2,0(r2)
  8490a0:	10803fcc 	andi	r2,r2,255
  8490a4:	108003cc 	andi	r2,r2,15
  8490a8:	1085883a 	add	r2,r2,r2
  8490ac:	1085883a 	add	r2,r2,r2
  8490b0:	1885c83a 	sub	r2,r3,r2
  8490b4:	e0bffc15 	stw	r2,-16(fp)
   host = p->fhost;                       /* filled in by IP layer */
  8490b8:	e0bffd17 	ldw	r2,-12(fp)
  8490bc:	10800717 	ldw	r2,28(r2)
  8490c0:	e0bffb15 	stw	r2,-20(fp)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  8490c4:	00802174 	movhi	r2,133
  8490c8:	10830104 	addi	r2,r2,3076
  8490cc:	10800017 	ldw	r2,0(r2)
  8490d0:	1081000c 	andi	r2,r2,1024
  8490d4:	1005003a 	cmpeq	r2,r2,zero
  8490d8:	1000161e 	bne	r2,zero,849134 <icmprcv+0xec>
  8490dc:	00802174 	movhi	r2,133
  8490e0:	10830104 	addi	r2,r2,3076
  8490e4:	10800017 	ldw	r2,0(r2)
  8490e8:	1080800c 	andi	r2,r2,512
  8490ec:	1005003a 	cmpeq	r2,r2,zero
  8490f0:	1000101e 	bne	r2,zero,849134 <icmprcv+0xec>
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
  8490f4:	e0bffb17 	ldw	r2,-20(fp)
  8490f8:	11803fcc 	andi	r6,r2,255
  8490fc:	e0bffb17 	ldw	r2,-20(fp)
  849100:	1004d23a 	srli	r2,r2,8
  849104:	11c03fcc 	andi	r7,r2,255
  849108:	e0bffb17 	ldw	r2,-20(fp)
  84910c:	1004d43a 	srli	r2,r2,16
  849110:	10c03fcc 	andi	r3,r2,255
  849114:	e0bffb17 	ldw	r2,-20(fp)
  849118:	1004d63a 	srli	r2,r2,24
  84911c:	d8c00015 	stw	r3,0(sp)
  849120:	d8800115 	stw	r2,4(sp)
  849124:	01002174 	movhi	r4,133
  849128:	213a5704 	addi	r4,r4,-5796
  84912c:	e17ffc17 	ldw	r5,-16(fp)
  849130:	08076480 	call	807648 <printf>
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */
  849134:	e0bffa17 	ldw	r2,-24(fp)
  849138:	10800003 	ldbu	r2,0(r2)
  84913c:	10803fcc 	andi	r2,r2,255
  849140:	108003cc 	andi	r2,r2,15
  849144:	1085883a 	add	r2,r2,r2
  849148:	1085883a 	add	r2,r2,r2
  84914c:	1007883a 	mov	r3,r2
  849150:	e0bffa17 	ldw	r2,-24(fp)
  849154:	1885883a 	add	r2,r3,r2
  849158:	e0bff915 	stw	r2,-28(fp)

   osum = e->pchksum;
  84915c:	e0bff917 	ldw	r2,-28(fp)
  849160:	1080008b 	ldhu	r2,2(r2)
  849164:	e0bff88d 	sth	r2,-30(fp)
   e->pchksum = 0;
  849168:	e0bff917 	ldw	r2,-28(fp)
  84916c:	1000008d 	sth	zero,2(r2)

   if (len&1)
  849170:	e0bffc17 	ldw	r2,-16(fp)
  849174:	1080004c 	andi	r2,r2,1
  849178:	10803fcc 	andi	r2,r2,255
  84917c:	1005003a 	cmpeq	r2,r2,zero
  849180:	1000091e 	bne	r2,zero,8491a8 <icmprcv+0x160>
   {
      sav_ch = *(((char *) e) + len);
  849184:	e0fff917 	ldw	r3,-28(fp)
  849188:	e0bffc17 	ldw	r2,-16(fp)
  84918c:	1885883a 	add	r2,r3,r2
  849190:	10800003 	ldbu	r2,0(r2)
  849194:	e0bff505 	stb	r2,-44(fp)
      ((char *)e)[len] = 0;
  849198:	e0fff917 	ldw	r3,-28(fp)
  84919c:	e0bffc17 	ldw	r2,-16(fp)
  8491a0:	1885883a 	add	r2,r3,r2
  8491a4:	10000005 	stb	zero,0(r2)
   }

   xsum = ~cksum(e, (len+1)>>1);
  8491a8:	e0bffc17 	ldw	r2,-16(fp)
  8491ac:	10800044 	addi	r2,r2,1
  8491b0:	100ad07a 	srli	r5,r2,1
  8491b4:	e13ff917 	ldw	r4,-28(fp)
  8491b8:	08256340 	call	825634 <cksum>
  8491bc:	0084303a 	nor	r2,zero,r2
  8491c0:	e0bff80d 	sth	r2,-32(fp)
   if (len&1) *(((char *) e) + len) = sav_ch;
  8491c4:	e0bffc17 	ldw	r2,-16(fp)
  8491c8:	1080004c 	andi	r2,r2,1
  8491cc:	10803fcc 	andi	r2,r2,255
  8491d0:	1005003a 	cmpeq	r2,r2,zero
  8491d4:	1000051e 	bne	r2,zero,8491ec <icmprcv+0x1a4>
  8491d8:	e0fff917 	ldw	r3,-28(fp)
  8491dc:	e0bffc17 	ldw	r2,-16(fp)
  8491e0:	1887883a 	add	r3,r3,r2
  8491e4:	e0bff503 	ldbu	r2,-44(fp)
  8491e8:	18800005 	stb	r2,0(r3)
   if (xsum != osum)
  8491ec:	e0fff80b 	ldhu	r3,-32(fp)
  8491f0:	e0bff88b 	ldhu	r2,-30(fp)
  8491f4:	18802c26 	beq	r3,r2,8492a8 <icmprcv+0x260>
   {
      e->pchksum = osum;
  8491f8:	e0fff917 	ldw	r3,-28(fp)
  8491fc:	e0bff88b 	ldhu	r2,-30(fp)
  849200:	1880008d 	sth	r2,2(r3)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  849204:	00802174 	movhi	r2,133
  849208:	10830104 	addi	r2,r2,3076
  84920c:	10800017 	ldw	r2,0(r2)
  849210:	1081000c 	andi	r2,r2,1024
  849214:	1005003a 	cmpeq	r2,r2,zero
  849218:	1000131e 	bne	r2,zero,849268 <icmprcv+0x220>
  84921c:	00802174 	movhi	r2,133
  849220:	10830104 	addi	r2,r2,3076
  849224:	10800017 	ldw	r2,0(r2)
  849228:	1080800c 	andi	r2,r2,512
  84922c:	1005003a 	cmpeq	r2,r2,zero
  849230:	10000d1e 	bne	r2,zero,849268 <icmprcv+0x220>
      {
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
  849234:	e17ff88b 	ldhu	r5,-30(fp)
  849238:	e1bff80b 	ldhu	r6,-32(fp)
  84923c:	01002174 	movhi	r4,133
  849240:	213a5f04 	addi	r4,r4,-5764
  849244:	08076480 	call	807648 <printf>
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
  849248:	00802174 	movhi	r2,133
  84924c:	10830104 	addi	r2,r2,3076
  849250:	10800017 	ldw	r2,0(r2)
  849254:	1080008c 	andi	r2,r2,2
  849258:	1005003a 	cmpeq	r2,r2,zero
  84925c:	1000021e 	bne	r2,zero,849268 <icmprcv+0x220>
  849260:	e13ffd17 	ldw	r4,-12(fp)
  849264:	083eeb40 	call	83eeb4 <ip_dump>
      }
#endif
      icmp_mib.icmpInErrors++;
  849268:	00803934 	movhi	r2,228
  84926c:	10aa0004 	addi	r2,r2,-22528
  849270:	10800117 	ldw	r2,4(r2)
  849274:	10c00044 	addi	r3,r2,1
  849278:	00803934 	movhi	r2,228
  84927c:	10aa0004 	addi	r2,r2,-22528
  849280:	10c00115 	stw	r3,4(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
  849284:	01000084 	movi	r4,2
  849288:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  84928c:	e13ffd17 	ldw	r4,-12(fp)
  849290:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  849294:	01000084 	movi	r4,2
  849298:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
  84929c:	00bff804 	movi	r2,-32
  8492a0:	e0bfff15 	stw	r2,-4(fp)
  8492a4:	00026d06 	br	849c5c <icmprcv+0xc14>
   }

   e->pchksum = osum;
  8492a8:	e0fff917 	ldw	r3,-28(fp)
  8492ac:	e0bff88b 	ldhu	r2,-30(fp)
  8492b0:	1880008d 	sth	r2,2(r3)

   switch (e->ptype) 
  8492b4:	e0bff917 	ldw	r2,-28(fp)
  8492b8:	10800003 	ldbu	r2,0(r2)
  8492bc:	10803fcc 	andi	r2,r2,255
  8492c0:	1080201c 	xori	r2,r2,128
  8492c4:	10bfe004 	addi	r2,r2,-128
  8492c8:	e0bffe15 	stw	r2,-8(fp)
  8492cc:	e0fffe17 	ldw	r3,-8(fp)
  8492d0:	18800428 	cmpgeui	r2,r3,16
  8492d4:	1002401e 	bne	r2,zero,849bd8 <icmprcv+0xb90>
  8492d8:	e13ffe17 	ldw	r4,-8(fp)
  8492dc:	e13ffe17 	ldw	r4,-8(fp)
  8492e0:	2105883a 	add	r2,r4,r4
  8492e4:	1087883a 	add	r3,r2,r2
  8492e8:	00802174 	movhi	r2,133
  8492ec:	10a4bf04 	addi	r2,r2,-27908
  8492f0:	1885883a 	add	r2,r3,r2
  8492f4:	10800017 	ldw	r2,0(r2)
  8492f8:	1000683a 	jmp	r2
  8492fc:	008495e0 	cmpeqi	r2,zero,4695
  849300:	00849bd8 	cmpnei	r2,zero,4719
  849304:	00849bd8 	cmpnei	r2,zero,4719
  849308:	0084960c 	andi	r2,zero,4696
  84930c:	008496fc 	xorhi	r2,zero,4699
  849310:	008497a4 	muli	r2,zero,4702
  849314:	00849bd8 	cmpnei	r2,zero,4719
  849318:	00849bd8 	cmpnei	r2,zero,4719
  84931c:	0084933c 	xorhi	r2,zero,4684
  849320:	00849bd8 	cmpnei	r2,zero,4719
  849324:	00849bd8 	cmpnei	r2,zero,4719
  849328:	008498c4 	movi	r2,4707
  84932c:	008499cc 	andi	r2,zero,4711
  849330:	00849a48 	cmpgei	r2,zero,4713
  849334:	00849bd8 	cmpnei	r2,zero,4719
  849338:	00849b98 	cmpnei	r2,zero,4718
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
  84933c:	00803934 	movhi	r2,228
  849340:	10aa0004 	addi	r2,r2,-22528
  849344:	10800717 	ldw	r2,28(r2)
  849348:	10c00044 	addi	r3,r2,1
  84934c:	00803934 	movhi	r2,228
  849350:	10aa0004 	addi	r2,r2,-22528
  849354:	10c00715 	stw	r3,28(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
  849358:	00802174 	movhi	r2,133
  84935c:	10830104 	addi	r2,r2,3076
  849360:	10800017 	ldw	r2,0(r2)
  849364:	1081000c 	andi	r2,r2,1024
  849368:	1005003a 	cmpeq	r2,r2,zero
  84936c:	1000141e 	bne	r2,zero,8493c0 <icmprcv+0x378>
  849370:	00802174 	movhi	r2,133
  849374:	10830104 	addi	r2,r2,3076
  849378:	10800017 	ldw	r2,0(r2)
  84937c:	1080800c 	andi	r2,r2,512
  849380:	1005003a 	cmpeq	r2,r2,zero
  849384:	10000e1e 	bne	r2,zero,8493c0 <icmprcv+0x378>
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
  849388:	e0bffb17 	ldw	r2,-20(fp)
  84938c:	11403fcc 	andi	r5,r2,255
  849390:	e0bffb17 	ldw	r2,-20(fp)
  849394:	1004d23a 	srli	r2,r2,8
  849398:	11803fcc 	andi	r6,r2,255
  84939c:	e0bffb17 	ldw	r2,-20(fp)
  8493a0:	1004d43a 	srli	r2,r2,16
  8493a4:	11c03fcc 	andi	r7,r2,255
  8493a8:	e0bffb17 	ldw	r2,-20(fp)
  8493ac:	1004d63a 	srli	r2,r2,24
  8493b0:	d8800015 	stw	r2,0(sp)
  8493b4:	01002174 	movhi	r4,133
  8493b8:	213a6a04 	addi	r4,r4,-5720
  8493bc:	08076480 	call	807648 <printf>
#endif
      e->ptype = ECHOREP;
  8493c0:	e0bff917 	ldw	r2,-28(fp)
  8493c4:	10000005 	stb	zero,0(r2)
      e->pchksum = 0;
  8493c8:	e0bff917 	ldw	r2,-28(fp)
  8493cc:	1000008d 	sth	zero,2(r2)
      if (len&1)  /* pad odd length packets for checksum routine */
  8493d0:	e0bffc17 	ldw	r2,-16(fp)
  8493d4:	1080004c 	andi	r2,r2,1
  8493d8:	10803fcc 	andi	r2,r2,255
  8493dc:	1005003a 	cmpeq	r2,r2,zero
  8493e0:	1000091e 	bne	r2,zero,849408 <icmprcv+0x3c0>
      {
         sav_ch = *(((char *) e) + len);
  8493e4:	e0fff917 	ldw	r3,-28(fp)
  8493e8:	e0bffc17 	ldw	r2,-16(fp)
  8493ec:	1885883a 	add	r2,r3,r2
  8493f0:	10800003 	ldbu	r2,0(r2)
  8493f4:	e0bff505 	stb	r2,-44(fp)
         ((char *)e)[len] = 0;
  8493f8:	e0fff917 	ldw	r3,-28(fp)
  8493fc:	e0bffc17 	ldw	r2,-16(fp)
  849400:	1885883a 	add	r2,r3,r2
  849404:	10000005 	stb	zero,0(r2)
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
  849408:	e0bffc17 	ldw	r2,-16(fp)
  84940c:	10800044 	addi	r2,r2,1
  849410:	100ad07a 	srli	r5,r2,1
  849414:	e13ff917 	ldw	r4,-28(fp)
  849418:	08256340 	call	825634 <cksum>
  84941c:	0084303a 	nor	r2,zero,r2
  849420:	1007883a 	mov	r3,r2
  849424:	e0bff917 	ldw	r2,-28(fp)
  849428:	10c0008d 	sth	r3,2(r2)
      if (len&1) *(((char *) e) + len) = sav_ch;
  84942c:	e0bffc17 	ldw	r2,-16(fp)
  849430:	1080004c 	andi	r2,r2,1
  849434:	10803fcc 	andi	r2,r2,255
  849438:	1005003a 	cmpeq	r2,r2,zero
  84943c:	1000051e 	bne	r2,zero,849454 <icmprcv+0x40c>
  849440:	e0fff917 	ldw	r3,-28(fp)
  849444:	e0bffc17 	ldw	r2,-16(fp)
  849448:	1887883a 	add	r3,r3,r2
  84944c:	e0bff503 	ldbu	r2,-44(fp)
  849450:	18800005 	stb	r2,0(r3)
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
  849454:	e0bffa17 	ldw	r2,-24(fp)
  849458:	10800417 	ldw	r2,16(r2)
  84945c:	10bfffe0 	cmpeqi	r2,r2,-1
  849460:	1000211e 	bne	r2,zero,8494e8 <icmprcv+0x4a0>
  849464:	e0bffa17 	ldw	r2,-24(fp)
  849468:	10800417 	ldw	r2,16(r2)
  84946c:	1004d63a 	srli	r2,r2,24
  849470:	10c03fcc 	andi	r3,r2,255
  849474:	e0bffa17 	ldw	r2,-24(fp)
  849478:	10800417 	ldw	r2,16(r2)
  84947c:	1004d23a 	srli	r2,r2,8
  849480:	10bfc00c 	andi	r2,r2,65280
  849484:	1886b03a 	or	r3,r3,r2
  849488:	e0bffa17 	ldw	r2,-24(fp)
  84948c:	10800417 	ldw	r2,16(r2)
  849490:	10bfc00c 	andi	r2,r2,65280
  849494:	1004923a 	slli	r2,r2,8
  849498:	1886b03a 	or	r3,r3,r2
  84949c:	e0bffa17 	ldw	r2,-24(fp)
  8494a0:	10800417 	ldw	r2,16(r2)
  8494a4:	10803fcc 	andi	r2,r2,255
  8494a8:	1004963a 	slli	r2,r2,24
  8494ac:	1884b03a 	or	r2,r3,r2
  8494b0:	10fc002c 	andhi	r3,r2,61440
  8494b4:	00b80034 	movhi	r2,57344
  8494b8:	18800b26 	beq	r3,r2,8494e8 <icmprcv+0x4a0>
  8494bc:	e0bffa17 	ldw	r2,-24(fp)
  8494c0:	11000417 	ldw	r4,16(r2)
  8494c4:	e0bffd17 	ldw	r2,-12(fp)
  8494c8:	10800617 	ldw	r2,24(r2)
  8494cc:	10c00a17 	ldw	r3,40(r2)
  8494d0:	e0bffd17 	ldw	r2,-12(fp)
  8494d4:	10800617 	ldw	r2,24(r2)
  8494d8:	10800c17 	ldw	r2,48(r2)
  8494dc:	0084303a 	nor	r2,zero,r2
  8494e0:	1884b03a 	or	r2,r3,r2
  8494e4:	2080061e 	bne	r4,r2,849500 <icmprcv+0x4b8>
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
      {
         pip->ip_src = p->net->n_ipaddr;
  8494e8:	e0bffd17 	ldw	r2,-12(fp)
  8494ec:	10800617 	ldw	r2,24(r2)
  8494f0:	10c00a17 	ldw	r3,40(r2)
  8494f4:	e0bffa17 	ldw	r2,-24(fp)
  8494f8:	10c00315 	stw	r3,12(r2)
      if (len&1) *(((char *) e) + len) = sav_ch;
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
  8494fc:	00000406 	br	849510 <icmprcv+0x4c8>
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
      {
         pip->ip_src = p->net->n_ipaddr;
      }
      else pip->ip_src = pip->ip_dest;
  849500:	e0bffa17 	ldw	r2,-24(fp)
  849504:	10c00417 	ldw	r3,16(r2)
  849508:	e0bffa17 	ldw	r2,-24(fp)
  84950c:	10c00315 	stw	r3,12(r2)

      pip->ip_dest = host;
  849510:	e0fffa17 	ldw	r3,-24(fp)
  849514:	e0bffb17 	ldw	r2,-20(fp)
  849518:	18800415 	stw	r2,16(r3)
      icmp_mib.icmpOutEchoReps++;
  84951c:	00803934 	movhi	r2,228
  849520:	10aa0004 	addi	r2,r2,-22528
  849524:	10801517 	ldw	r2,84(r2)
  849528:	10c00044 	addi	r3,r2,1
  84952c:	00803934 	movhi	r2,228
  849530:	10aa0004 	addi	r2,r2,-22528
  849534:	10c01515 	stw	r3,84(r2)
      icmp_mib.icmpOutMsgs++;
  849538:	00803934 	movhi	r2,228
  84953c:	10aa0004 	addi	r2,r2,-22528
  849540:	10800d17 	ldw	r2,52(r2)
  849544:	10c00044 	addi	r3,r2,1
  849548:	00803934 	movhi	r2,228
  84954c:	10aa0004 	addi	r2,r2,-22528
  849550:	10c00d15 	stw	r3,52(r2)
      p->fhost = host;
  849554:	e0fffd17 	ldw	r3,-12(fp)
  849558:	e0bffb17 	ldw	r2,-20(fp)
  84955c:	18800715 	stw	r2,28(r3)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
  849560:	e0bffd17 	ldw	r2,-12(fp)
  849564:	10c00317 	ldw	r3,12(r2)
  849568:	e0bffa17 	ldw	r2,-24(fp)
  84956c:	10800003 	ldbu	r2,0(r2)
  849570:	10803fcc 	andi	r2,r2,255
  849574:	108003cc 	andi	r2,r2,15
  849578:	1085883a 	add	r2,r2,r2
  84957c:	1085883a 	add	r2,r2,r2
  849580:	1887883a 	add	r3,r3,r2
  849584:	e0bffd17 	ldw	r2,-12(fp)
  849588:	10c00315 	stw	r3,12(r2)
      p->nb_plen = len;
  84958c:	e0fffd17 	ldw	r3,-12(fp)
  849590:	e0bffc17 	ldw	r2,-16(fp)
  849594:	18800415 	stw	r2,16(r3)

      i = ip_write(ICMP_PROT, p);
  849598:	01000044 	movi	r4,1
  84959c:	e17ffd17 	ldw	r5,-12(fp)
  8495a0:	083dc8c0 	call	83dc8c <ip_write>
  8495a4:	e0bff415 	stw	r2,-48(fp)
      if (i < 0)
  8495a8:	e0bff417 	ldw	r2,-48(fp)
  8495ac:	1004403a 	cmpge	r2,r2,zero
  8495b0:	1000091e 	bne	r2,zero,8495d8 <icmprcv+0x590>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (UPCTRACE))
  8495b4:	00802174 	movhi	r2,133
  8495b8:	10830104 	addi	r2,r2,3076
  8495bc:	10800017 	ldw	r2,0(r2)
  8495c0:	1081000c 	andi	r2,r2,1024
  8495c4:	1005003a 	cmpeq	r2,r2,zero
  8495c8:	1000031e 	bne	r2,zero,8495d8 <icmprcv+0x590>
            dprintf("icmp: reply failed\n");
  8495cc:	01002174 	movhi	r4,133
  8495d0:	213a7304 	addi	r4,r4,-5684
  8495d4:	08077600 	call	807760 <puts>
#endif
      }
      /* reused p will be freed by net->xxx_send() */
      return 0;
  8495d8:	e03fff15 	stw	zero,-4(fp)
  8495dc:	00019f06 	br	849c5c <icmprcv+0xc14>
   case ECHOREP:
      icmp_mib.icmpInEchoReps++;
  8495e0:	00803934 	movhi	r2,228
  8495e4:	10aa0004 	addi	r2,r2,-22528
  8495e8:	10800817 	ldw	r2,32(r2)
  8495ec:	10c00044 	addi	r3,r2,1
  8495f0:	00803934 	movhi	r2,228
  8495f4:	10aa0004 	addi	r2,r2,-22528
  8495f8:	10c00815 	stw	r3,32(r2)
      
/* 
 * Altera Niche Stack Nios port modification
 */
#if defined(ALT_INICHE) && !defined(PING_APP) && defined(IP_RAW)
      return(ip_raw_input(p));
  8495fc:	e13ffd17 	ldw	r4,-12(fp)
  849600:	084266c0 	call	84266c <ip_raw_input>
  849604:	e0bfff15 	stw	r2,-4(fp)
  849608:	00019406 	br	849c5c <icmprcv+0xc14>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
  84960c:	00803934 	movhi	r2,228
  849610:	10aa0004 	addi	r2,r2,-22528
  849614:	10800217 	ldw	r2,8(r2)
  849618:	10c00044 	addi	r3,r2,1
  84961c:	00803934 	movhi	r2,228
  849620:	10aa0004 	addi	r2,r2,-22528
  849624:	10c00215 	stw	r3,8(r2)
      pdp = (struct destun *)e;
  849628:	e0bff917 	ldw	r2,-28(fp)
  84962c:	e0bff615 	stw	r2,-40(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  849630:	00802174 	movhi	r2,133
  849634:	10830104 	addi	r2,r2,3076
  849638:	10800017 	ldw	r2,0(r2)
  84963c:	1081000c 	andi	r2,r2,1024
  849640:	1005003a 	cmpeq	r2,r2,zero
  849644:	1000291e 	bne	r2,zero,8496ec <icmprcv+0x6a4>
      {
         dprintf("ICMP: got dest unreachable type ");
  849648:	01002174 	movhi	r4,133
  84964c:	213a7804 	addi	r4,r4,-5664
  849650:	08076480 	call	807648 <printf>
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
  849654:	e0bff617 	ldw	r2,-40(fp)
  849658:	10800043 	ldbu	r2,1(r2)
  84965c:	11403fcc 	andi	r5,r2,255
  849660:	2940201c 	xori	r5,r5,128
  849664:	297fe004 	addi	r5,r5,-128
  849668:	e0bff617 	ldw	r2,-40(fp)
  84966c:	10800617 	ldw	r2,24(r2)
  849670:	11803fcc 	andi	r6,r2,255
  849674:	e0bff617 	ldw	r2,-40(fp)
  849678:	10800617 	ldw	r2,24(r2)
  84967c:	1004d23a 	srli	r2,r2,8
  849680:	11c03fcc 	andi	r7,r2,255
  849684:	e0bff617 	ldw	r2,-40(fp)
  849688:	10800617 	ldw	r2,24(r2)
  84968c:	1004d43a 	srli	r2,r2,16
  849690:	10c03fcc 	andi	r3,r2,255
  849694:	e0bff617 	ldw	r2,-40(fp)
  849698:	10800617 	ldw	r2,24(r2)
  84969c:	1004d63a 	srli	r2,r2,24
  8496a0:	d8c00015 	stw	r3,0(sp)
  8496a4:	d8800115 	stw	r2,4(sp)
  8496a8:	01002174 	movhi	r4,133
  8496ac:	213a8104 	addi	r4,r4,-5628
  8496b0:	08076480 	call	807648 <printf>
          PUSH_IPADDR(pdp->dip.ip_dest));
         dprintf("from %u.%u.%u.%u\n", PUSH_IPADDR(host));
  8496b4:	e0bffb17 	ldw	r2,-20(fp)
  8496b8:	11403fcc 	andi	r5,r2,255
  8496bc:	e0bffb17 	ldw	r2,-20(fp)
  8496c0:	1004d23a 	srli	r2,r2,8
  8496c4:	11803fcc 	andi	r6,r2,255
  8496c8:	e0bffb17 	ldw	r2,-20(fp)
  8496cc:	1004d43a 	srli	r2,r2,16
  8496d0:	11c03fcc 	andi	r7,r2,255
  8496d4:	e0bffb17 	ldw	r2,-20(fp)
  8496d8:	1004d63a 	srli	r2,r2,24
  8496dc:	d8800015 	stw	r2,0(sp)
  8496e0:	01002174 	movhi	r4,133
  8496e4:	213a8604 	addi	r4,r4,-5608
  8496e8:	08076480 	call	807648 <printf>
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
  8496ec:	e13ffd17 	ldw	r4,-12(fp)
  8496f0:	e17ff617 	ldw	r5,-40(fp)
  8496f4:	084a3000 	call	84a300 <icmp_du>
      break;
  8496f8:	00015606 	br	849c54 <icmprcv+0xc0c>
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
  8496fc:	00803934 	movhi	r2,228
  849700:	10aa0004 	addi	r2,r2,-22528
  849704:	10800517 	ldw	r2,20(r2)
  849708:	10c00044 	addi	r3,r2,1
  84970c:	00803934 	movhi	r2,228
  849710:	10aa0004 	addi	r2,r2,-22528
  849714:	10c00515 	stw	r3,20(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  849718:	00802174 	movhi	r2,133
  84971c:	10830104 	addi	r2,r2,3076
  849720:	10800017 	ldw	r2,0(r2)
  849724:	1081000c 	andi	r2,r2,1024
  849728:	1005003a 	cmpeq	r2,r2,zero
  84972c:	1000161e 	bne	r2,zero,849788 <icmprcv+0x740>
      {
         dprintf("ICMP: source quench from %u.%u.%u.%u\n", PUSH_IPADDR(host));
  849730:	e0bffb17 	ldw	r2,-20(fp)
  849734:	11403fcc 	andi	r5,r2,255
  849738:	e0bffb17 	ldw	r2,-20(fp)
  84973c:	1004d23a 	srli	r2,r2,8
  849740:	11803fcc 	andi	r6,r2,255
  849744:	e0bffb17 	ldw	r2,-20(fp)
  849748:	1004d43a 	srli	r2,r2,16
  84974c:	11c03fcc 	andi	r7,r2,255
  849750:	e0bffb17 	ldw	r2,-20(fp)
  849754:	1004d63a 	srli	r2,r2,24
  849758:	d8800015 	stw	r2,0(sp)
  84975c:	01002174 	movhi	r4,133
  849760:	213a8b04 	addi	r4,r4,-5588
  849764:	08076480 	call	807648 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
  849768:	00802174 	movhi	r2,133
  84976c:	10830104 	addi	r2,r2,3076
  849770:	10800017 	ldw	r2,0(r2)
  849774:	1080008c 	andi	r2,r2,2
  849778:	1005003a 	cmpeq	r2,r2,zero
  84977c:	1000021e 	bne	r2,zero,849788 <icmprcv+0x740>
  849780:	e13ffd17 	ldw	r4,-12(fp)
  849784:	083eeb40 	call	83eeb4 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
  849788:	01000084 	movi	r4,2
  84978c:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  849790:	e13ffd17 	ldw	r4,-12(fp)
  849794:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  849798:	01000084 	movi	r4,2
  84979c:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      break;
  8497a0:	00012c06 	br	849c54 <icmprcv+0xc0c>
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
  8497a4:	00803934 	movhi	r2,228
  8497a8:	10aa0004 	addi	r2,r2,-22528
  8497ac:	10800617 	ldw	r2,24(r2)
  8497b0:	10c00044 	addi	r3,r2,1
  8497b4:	00803934 	movhi	r2,228
  8497b8:	10aa0004 	addi	r2,r2,-22528
  8497bc:	10c00615 	stw	r3,24(r2)
      rd = (struct redirect *)e;
  8497c0:	e0bff917 	ldw	r2,-28(fp)
  8497c4:	e0bff715 	stw	r2,-36(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  8497c8:	00802174 	movhi	r2,133
  8497cc:	10830104 	addi	r2,r2,3076
  8497d0:	10800017 	ldw	r2,0(r2)
  8497d4:	1081000c 	andi	r2,r2,1024
  8497d8:	1005003a 	cmpeq	r2,r2,zero
  8497dc:	1000241e 	bne	r2,zero,849870 <icmprcv+0x828>
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
  8497e0:	e0bff717 	ldw	r2,-36(fp)
  8497e4:	10800617 	ldw	r2,24(r2)
  8497e8:	11403fcc 	andi	r5,r2,255
  8497ec:	e0bff717 	ldw	r2,-36(fp)
  8497f0:	10800617 	ldw	r2,24(r2)
  8497f4:	1004d23a 	srli	r2,r2,8
  8497f8:	11803fcc 	andi	r6,r2,255
  8497fc:	e0bff717 	ldw	r2,-36(fp)
  849800:	10800617 	ldw	r2,24(r2)
  849804:	1004d43a 	srli	r2,r2,16
  849808:	11c03fcc 	andi	r7,r2,255
  84980c:	e0bff717 	ldw	r2,-36(fp)
  849810:	10800617 	ldw	r2,24(r2)
  849814:	1004d63a 	srli	r2,r2,24
  849818:	d8800015 	stw	r2,0(sp)
  84981c:	01002174 	movhi	r4,133
  849820:	213a9504 	addi	r4,r4,-5548
  849824:	08076480 	call	807648 <printf>
          PUSH_IPADDR(rd->rdip.ip_dest));
         dprintf("to %u.%u.%u.%u\n", PUSH_IPADDR(rd->rdgw));
  849828:	e0bff717 	ldw	r2,-36(fp)
  84982c:	10800117 	ldw	r2,4(r2)
  849830:	11403fcc 	andi	r5,r2,255
  849834:	e0bff717 	ldw	r2,-36(fp)
  849838:	10800117 	ldw	r2,4(r2)
  84983c:	1004d23a 	srli	r2,r2,8
  849840:	11803fcc 	andi	r6,r2,255
  849844:	e0bff717 	ldw	r2,-36(fp)
  849848:	10800117 	ldw	r2,4(r2)
  84984c:	1004d43a 	srli	r2,r2,16
  849850:	11c03fcc 	andi	r7,r2,255
  849854:	e0bff717 	ldw	r2,-36(fp)
  849858:	10800117 	ldw	r2,4(r2)
  84985c:	1004d63a 	srli	r2,r2,24
  849860:	d8800015 	stw	r2,0(sp)
  849864:	01002174 	movhi	r4,133
  849868:	213a9f04 	addi	r4,r4,-5508
  84986c:	08076480 	call	807648 <printf>
      }
#endif   /* NPDEBUG */
#ifdef IP_ROUTING
      /* try to add/update route table */
      add_route(rd->rdip.ip_dest, 0xFFFFFFFF, rd->rdgw, 
  849870:	e0bff717 	ldw	r2,-36(fp)
  849874:	14000617 	ldw	r16,24(r2)
  849878:	e0bff717 	ldw	r2,-36(fp)
  84987c:	14400117 	ldw	r17,4(r2)
  849880:	e0bffd17 	ldw	r2,-12(fp)
  849884:	11000617 	ldw	r4,24(r2)
  849888:	08239940 	call	823994 <if_netnumber>
  84988c:	100f883a 	mov	r7,r2
  849890:	00800104 	movi	r2,4
  849894:	d8800015 	stw	r2,0(sp)
  849898:	8009883a 	mov	r4,r16
  84989c:	017fffc4 	movi	r5,-1
  8498a0:	880d883a 	mov	r6,r17
  8498a4:	0842b900 	call	842b90 <add_route>
       net_num(p->net), IPRP_ICMP);
#endif   /* IP_ROUTING */
      LOCK_NET_RESOURCE(FREEQ_RESID);
  8498a8:	01000084 	movi	r4,2
  8498ac:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  8498b0:	e13ffd17 	ldw	r4,-12(fp)
  8498b4:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8498b8:	01000084 	movi	r4,2
  8498bc:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      break;
  8498c0:	0000e406 	br	849c54 <icmprcv+0xc0c>
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
  8498c4:	00803934 	movhi	r2,228
  8498c8:	10aa0004 	addi	r2,r2,-22528
  8498cc:	10800317 	ldw	r2,12(r2)
  8498d0:	10c00044 	addi	r3,r2,1
  8498d4:	00803934 	movhi	r2,228
  8498d8:	10aa0004 	addi	r2,r2,-22528
  8498dc:	10c00315 	stw	r3,12(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  8498e0:	00802174 	movhi	r2,133
  8498e4:	10830104 	addi	r2,r2,3076
  8498e8:	10800017 	ldw	r2,0(r2)
  8498ec:	1081000c 	andi	r2,r2,1024
  8498f0:	1005003a 	cmpeq	r2,r2,zero
  8498f4:	10002e1e 	bne	r2,zero,8499b0 <icmprcv+0x968>
      {
         struct timex * pt =  (struct  timex *)e;
  8498f8:	e0bff917 	ldw	r2,-28(fp)
  8498fc:	e0bff315 	stw	r2,-52(fp)

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
  849900:	e0bffd17 	ldw	r2,-12(fp)
  849904:	10800717 	ldw	r2,28(r2)
  849908:	11403fcc 	andi	r5,r2,255
  84990c:	e0bffd17 	ldw	r2,-12(fp)
  849910:	10800717 	ldw	r2,28(r2)
  849914:	1004d23a 	srli	r2,r2,8
  849918:	11803fcc 	andi	r6,r2,255
  84991c:	e0bffd17 	ldw	r2,-12(fp)
  849920:	10800717 	ldw	r2,28(r2)
  849924:	1004d43a 	srli	r2,r2,16
  849928:	11c03fcc 	andi	r7,r2,255
  84992c:	e0bffd17 	ldw	r2,-12(fp)
  849930:	10800717 	ldw	r2,28(r2)
  849934:	1004d63a 	srli	r2,r2,24
  849938:	d8800015 	stw	r2,0(sp)
  84993c:	01002174 	movhi	r4,133
  849940:	213aa304 	addi	r4,r4,-5492
  849944:	08076480 	call	807648 <printf>
          PUSH_IPADDR(p->fhost));
         dprintf(" about %u.%u.%u.%u\n", PUSH_IPADDR(pt->tip.ip_dest));
  849948:	e0bff317 	ldw	r2,-52(fp)
  84994c:	10800617 	ldw	r2,24(r2)
  849950:	11403fcc 	andi	r5,r2,255
  849954:	e0bff317 	ldw	r2,-52(fp)
  849958:	10800617 	ldw	r2,24(r2)
  84995c:	1004d23a 	srli	r2,r2,8
  849960:	11803fcc 	andi	r6,r2,255
  849964:	e0bff317 	ldw	r2,-52(fp)
  849968:	10800617 	ldw	r2,24(r2)
  84996c:	1004d43a 	srli	r2,r2,16
  849970:	11c03fcc 	andi	r7,r2,255
  849974:	e0bff317 	ldw	r2,-52(fp)
  849978:	10800617 	ldw	r2,24(r2)
  84997c:	1004d63a 	srli	r2,r2,24
  849980:	d8800015 	stw	r2,0(sp)
  849984:	01002174 	movhi	r4,133
  849988:	213aac04 	addi	r4,r4,-5456
  84998c:	08076480 	call	807648 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
  849990:	00802174 	movhi	r2,133
  849994:	10830104 	addi	r2,r2,3076
  849998:	10800017 	ldw	r2,0(r2)
  84999c:	1080008c 	andi	r2,r2,2
  8499a0:	1005003a 	cmpeq	r2,r2,zero
  8499a4:	1000021e 	bne	r2,zero,8499b0 <icmprcv+0x968>
  8499a8:	e13ffd17 	ldw	r4,-12(fp)
  8499ac:	083eeb40 	call	83eeb4 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
  8499b0:	01000084 	movi	r4,2
  8499b4:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  8499b8:	e13ffd17 	ldw	r4,-12(fp)
  8499bc:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  8499c0:	01000084 	movi	r4,2
  8499c4:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      break;
  8499c8:	0000a206 	br	849c54 <icmprcv+0xc0c>
   case PARAM:
      icmp_mib.icmpInParmProbs++;
  8499cc:	00803934 	movhi	r2,228
  8499d0:	10aa0004 	addi	r2,r2,-22528
  8499d4:	10800417 	ldw	r2,16(r2)
  8499d8:	10c00044 	addi	r3,r2,1
  8499dc:	00803934 	movhi	r2,228
  8499e0:	10aa0004 	addi	r2,r2,-22528
  8499e4:	10c00415 	stw	r3,16(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  8499e8:	00802174 	movhi	r2,133
  8499ec:	10830104 	addi	r2,r2,3076
  8499f0:	10800017 	ldw	r2,0(r2)
  8499f4:	1081000c 	andi	r2,r2,1024
  8499f8:	1005003a 	cmpeq	r2,r2,zero
  8499fc:	1000031e 	bne	r2,zero,849a0c <icmprcv+0x9c4>
         dprintf("ICMP: got param problem message\n");
  849a00:	01002174 	movhi	r4,133
  849a04:	213ab104 	addi	r4,r4,-5436
  849a08:	08077600 	call	807760 <puts>
      if (NDEBUG & DUMP)
  849a0c:	00802174 	movhi	r2,133
  849a10:	10830104 	addi	r2,r2,3076
  849a14:	10800017 	ldw	r2,0(r2)
  849a18:	1080008c 	andi	r2,r2,2
  849a1c:	1005003a 	cmpeq	r2,r2,zero
  849a20:	1000021e 	bne	r2,zero,849a2c <icmprcv+0x9e4>
      {
         ip_dump(p);
  849a24:	e13ffd17 	ldw	r4,-12(fp)
  849a28:	083eeb40 	call	83eeb4 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
  849a2c:	01000084 	movi	r4,2
  849a30:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  849a34:	e13ffd17 	ldw	r4,-12(fp)
  849a38:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  849a3c:	01000084 	movi	r4,2
  849a40:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      break;
  849a44:	00008306 	br	849c54 <icmprcv+0xc0c>
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
  849a48:	00803934 	movhi	r2,228
  849a4c:	10aa0004 	addi	r2,r2,-22528
  849a50:	10800917 	ldw	r2,36(r2)
  849a54:	10c00044 	addi	r3,r2,1
  849a58:	00803934 	movhi	r2,228
  849a5c:	10aa0004 	addi	r2,r2,-22528
  849a60:	10c00915 	stw	r3,36(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  849a64:	00802174 	movhi	r2,133
  849a68:	10830104 	addi	r2,r2,3076
  849a6c:	10800017 	ldw	r2,0(r2)
  849a70:	1081000c 	andi	r2,r2,1024
  849a74:	1005003a 	cmpeq	r2,r2,zero
  849a78:	1000031e 	bne	r2,zero,849a88 <icmprcv+0xa40>
         dprintf("ICMP: got timestamp request\n");
  849a7c:	01002174 	movhi	r4,133
  849a80:	213ab904 	addi	r4,r4,-5404
  849a84:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG */
      e->ptype = TIMEREP;
  849a88:	e0fff917 	ldw	r3,-28(fp)
  849a8c:	00800384 	movi	r2,14
  849a90:	18800005 	stb	r2,0(r3)
      e->pchksum = 0;
  849a94:	e0bff917 	ldw	r2,-28(fp)
  849a98:	1000008d 	sth	zero,2(r2)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
  849a9c:	e13ff917 	ldw	r4,-28(fp)
  849aa0:	01400284 	movi	r5,10
  849aa4:	08256340 	call	825634 <cksum>
  849aa8:	0084303a 	nor	r2,zero,r2
  849aac:	1007883a 	mov	r3,r2
  849ab0:	e0bff917 	ldw	r2,-28(fp)
  849ab4:	10c0008d 	sth	r3,2(r2)
      pip->ip_src = pip->ip_dest;
  849ab8:	e0bffa17 	ldw	r2,-24(fp)
  849abc:	10c00417 	ldw	r3,16(r2)
  849ac0:	e0bffa17 	ldw	r2,-24(fp)
  849ac4:	10c00315 	stw	r3,12(r2)
      pip->ip_dest = host;
  849ac8:	e0fffa17 	ldw	r3,-24(fp)
  849acc:	e0bffb17 	ldw	r2,-20(fp)
  849ad0:	18800415 	stw	r2,16(r3)
      icmp_mib.icmpOutMsgs++;
  849ad4:	00803934 	movhi	r2,228
  849ad8:	10aa0004 	addi	r2,r2,-22528
  849adc:	10800d17 	ldw	r2,52(r2)
  849ae0:	10c00044 	addi	r3,r2,1
  849ae4:	00803934 	movhi	r2,228
  849ae8:	10aa0004 	addi	r2,r2,-22528
  849aec:	10c00d15 	stw	r3,52(r2)
      icmp_mib.icmpOutTimestampReps++;
  849af0:	00803934 	movhi	r2,228
  849af4:	10aa0004 	addi	r2,r2,-22528
  849af8:	10801717 	ldw	r2,92(r2)
  849afc:	10c00044 	addi	r3,r2,1
  849b00:	00803934 	movhi	r2,228
  849b04:	10aa0004 	addi	r2,r2,-22528
  849b08:	10c01715 	stw	r3,92(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
  849b0c:	e0bffd17 	ldw	r2,-12(fp)
  849b10:	10c00317 	ldw	r3,12(r2)
  849b14:	e0bffa17 	ldw	r2,-24(fp)
  849b18:	10800003 	ldbu	r2,0(r2)
  849b1c:	10803fcc 	andi	r2,r2,255
  849b20:	108003cc 	andi	r2,r2,15
  849b24:	1085883a 	add	r2,r2,r2
  849b28:	1085883a 	add	r2,r2,r2
  849b2c:	1887883a 	add	r3,r3,r2
  849b30:	e0bffd17 	ldw	r2,-12(fp)
  849b34:	10c00315 	stw	r3,12(r2)
      p->nb_plen = sizeof(struct tstamp);
  849b38:	e0fffd17 	ldw	r3,-12(fp)
  849b3c:	00800504 	movi	r2,20
  849b40:	18800415 	stw	r2,16(r3)
      p->fhost = host;
  849b44:	e0fffd17 	ldw	r3,-12(fp)
  849b48:	e0bffb17 	ldw	r2,-20(fp)
  849b4c:	18800715 	stw	r2,28(r3)
      i = ip_write(ICMP_PROT, p);
  849b50:	01000044 	movi	r4,1
  849b54:	e17ffd17 	ldw	r5,-12(fp)
  849b58:	083dc8c0 	call	83dc8c <ip_write>
  849b5c:	e0bff415 	stw	r2,-48(fp)
      if (i < 0)
  849b60:	e0bff417 	ldw	r2,-48(fp)
  849b64:	1004403a 	cmpge	r2,r2,zero
  849b68:	1000091e 	bne	r2,zero,849b90 <icmprcv+0xb48>
      {
#ifdef   NPDEBUG
         if (NDEBUG & UPCTRACE)
  849b6c:	00802174 	movhi	r2,133
  849b70:	10830104 	addi	r2,r2,3076
  849b74:	10800017 	ldw	r2,0(r2)
  849b78:	1081000c 	andi	r2,r2,1024
  849b7c:	1005003a 	cmpeq	r2,r2,zero
  849b80:	1000031e 	bne	r2,zero,849b90 <icmprcv+0xb48>
            dprintf("icmp: can't send timestamp reply\n");
  849b84:	01002174 	movhi	r4,133
  849b88:	213ac004 	addi	r4,r4,-5376
  849b8c:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG */
      }
      /* re-used packet was pk_free()d by net->send() */
      return (0);
  849b90:	e03fff15 	stw	zero,-4(fp)
  849b94:	00003106 	br	849c5c <icmprcv+0xc14>
   case INFO:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  849b98:	00802174 	movhi	r2,133
  849b9c:	10830104 	addi	r2,r2,3076
  849ba0:	10800017 	ldw	r2,0(r2)
  849ba4:	1081000c 	andi	r2,r2,1024
  849ba8:	1005003a 	cmpeq	r2,r2,zero
  849bac:	1000031e 	bne	r2,zero,849bbc <icmprcv+0xb74>
         dprintf("icmp: got info request\n");
  849bb0:	01002174 	movhi	r4,133
  849bb4:	213ac904 	addi	r4,r4,-5340
  849bb8:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
  849bbc:	01000084 	movi	r4,2
  849bc0:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  849bc4:	e13ffd17 	ldw	r4,-12(fp)
  849bc8:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  849bcc:	01000084 	movi	r4,2
  849bd0:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      break;
  849bd4:	00001f06 	br	849c54 <icmprcv+0xc0c>
#endif   /* FULL_ICMP */
   default:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
  849bd8:	00802174 	movhi	r2,133
  849bdc:	10830104 	addi	r2,r2,3076
  849be0:	10800017 	ldw	r2,0(r2)
  849be4:	1081000c 	andi	r2,r2,1024
  849be8:	1005003a 	cmpeq	r2,r2,zero
  849bec:	1000101e 	bne	r2,zero,849c30 <icmprcv+0xbe8>
      {
         dprintf("icmp: unhandled type %u\n", e->ptype);
  849bf0:	e0bff917 	ldw	r2,-28(fp)
  849bf4:	10800003 	ldbu	r2,0(r2)
  849bf8:	11403fcc 	andi	r5,r2,255
  849bfc:	2940201c 	xori	r5,r5,128
  849c00:	297fe004 	addi	r5,r5,-128
  849c04:	01002174 	movhi	r4,133
  849c08:	213acf04 	addi	r4,r4,-5316
  849c0c:	08076480 	call	807648 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
  849c10:	00802174 	movhi	r2,133
  849c14:	10830104 	addi	r2,r2,3076
  849c18:	10800017 	ldw	r2,0(r2)
  849c1c:	1080008c 	andi	r2,r2,2
  849c20:	1005003a 	cmpeq	r2,r2,zero
  849c24:	1000021e 	bne	r2,zero,849c30 <icmprcv+0xbe8>
  849c28:	e13ffd17 	ldw	r4,-12(fp)
  849c2c:	083eeb40 	call	83eeb4 <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
  849c30:	01000084 	movi	r4,2
  849c34:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
      pk_free(p);
  849c38:	e13ffd17 	ldw	r4,-12(fp)
  849c3c:	0829f180 	call	829f18 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
  849c40:	01000084 	movi	r4,2
  849c44:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>
      return ENP_NOT_MINE;
  849c48:	00800084 	movi	r2,2
  849c4c:	e0bfff15 	stw	r2,-4(fp)
  849c50:	00000206 	br	849c5c <icmprcv+0xc14>
   }
#ifdef FULL_ICMP
   return ENP_NOT_MINE;
  849c54:	00c00084 	movi	r3,2
  849c58:	e0ffff15 	stw	r3,-4(fp)
  849c5c:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* FULL_ICMP */
}
  849c60:	e037883a 	mov	sp,fp
  849c64:	dfc00317 	ldw	ra,12(sp)
  849c68:	df000217 	ldw	fp,8(sp)
  849c6c:	dc400117 	ldw	r17,4(sp)
  849c70:	dc000017 	ldw	r16,0(sp)
  849c74:	dec00404 	addi	sp,sp,16
  849c78:	f800283a 	ret

00849c7c <icmp_destun>:
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
  849c7c:	defff404 	addi	sp,sp,-48
  849c80:	dfc00b15 	stw	ra,44(sp)
  849c84:	df000a15 	stw	fp,40(sp)
  849c88:	df000a04 	addi	fp,sp,40
  849c8c:	e13ffc15 	stw	r4,-16(fp)
  849c90:	e17ffd15 	stw	r5,-12(fp)
  849c94:	e1bffe15 	stw	r6,-8(fp)
  849c98:	e1ffff15 	stw	r7,-4(fp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
  849c9c:	00802174 	movhi	r2,133
  849ca0:	10830104 	addi	r2,r2,3076
  849ca4:	10800017 	ldw	r2,0(r2)
  849ca8:	1080040c 	andi	r2,r2,16
  849cac:	1005003a 	cmpeq	r2,r2,zero
  849cb0:	1000171e 	bne	r2,zero,849d10 <icmp_destun+0x94>
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
  849cb4:	e0bfff17 	ldw	r2,-4(fp)
  849cb8:	10803fcc 	andi	r2,r2,255
  849cbc:	00c02174 	movhi	r3,133
  849cc0:	18c27004 	addi	r3,r3,2496
  849cc4:	1085883a 	add	r2,r2,r2
  849cc8:	1085883a 	add	r2,r2,r2
  849ccc:	10c5883a 	add	r2,r2,r3
  849cd0:	11400017 	ldw	r5,0(r2)
  849cd4:	e0bffc17 	ldw	r2,-16(fp)
  849cd8:	11803fcc 	andi	r6,r2,255
  849cdc:	e0bffc17 	ldw	r2,-16(fp)
  849ce0:	1004d23a 	srli	r2,r2,8
  849ce4:	11c03fcc 	andi	r7,r2,255
  849ce8:	e0bffc17 	ldw	r2,-16(fp)
  849cec:	1004d43a 	srli	r2,r2,16
  849cf0:	10c03fcc 	andi	r3,r2,255
  849cf4:	e0bffc17 	ldw	r2,-16(fp)
  849cf8:	1004d63a 	srli	r2,r2,24
  849cfc:	d8c00015 	stw	r3,0(sp)
  849d00:	d8800115 	stw	r2,4(sp)
  849d04:	01002174 	movhi	r4,133
  849d08:	213ae904 	addi	r4,r4,-5212
  849d0c:	08076480 	call	807648 <printf>
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(FREEQ_RESID);
  849d10:	01000084 	movi	r4,2
  849d14:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
   p = pk_alloc(512 + IPHSIZ);   /* get packet to send icmp dest unreachable */
  849d18:	01008504 	movi	r4,532
  849d1c:	0829b840 	call	829b84 <pk_alloc>
  849d20:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  849d24:	01000084 	movi	r4,2
  849d28:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
  849d2c:	e0bffb17 	ldw	r2,-20(fp)
  849d30:	1004c03a 	cmpne	r2,r2,zero
  849d34:	1000111e 	bne	r2,zero,849d7c <icmp_destun+0x100>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
  849d38:	00802174 	movhi	r2,133
  849d3c:	10830104 	addi	r2,r2,3076
  849d40:	10800017 	ldw	r2,0(r2)
  849d44:	1080800c 	andi	r2,r2,512
  849d48:	1005003a 	cmpeq	r2,r2,zero
  849d4c:	1000031e 	bne	r2,zero,849d5c <icmp_destun+0xe0>
         dprintf("icmp: can't alloc pkt\n");
  849d50:	01002174 	movhi	r4,133
  849d54:	213af604 	addi	r4,r4,-5160
  849d58:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
  849d5c:	00803934 	movhi	r2,228
  849d60:	10aa0004 	addi	r2,r2,-22528
  849d64:	10800e17 	ldw	r2,56(r2)
  849d68:	10c00044 	addi	r3,r2,1
  849d6c:	00803934 	movhi	r2,228
  849d70:	10aa0004 	addi	r2,r2,-22528
  849d74:	10c00e15 	stw	r3,56(r2)
      return;
  849d78:	00008f06 	br	849fb8 <icmp_destun+0x33c>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
  849d7c:	e0bffb17 	ldw	r2,-20(fp)
  849d80:	10800317 	ldw	r2,12(r2)
  849d84:	e0bff915 	stw	r2,-28(fp)
   pip->ip_src = src_addr;
  849d88:	e0fff917 	ldw	r3,-28(fp)
  849d8c:	e0bffd17 	ldw	r2,-12(fp)
  849d90:	18800315 	stw	r2,12(r3)
   pip->ip_dest = host;
  849d94:	e0fff917 	ldw	r3,-28(fp)
  849d98:	e0bffc17 	ldw	r2,-16(fp)
  849d9c:	18800415 	stw	r2,16(r3)

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
  849da0:	e0bffb17 	ldw	r2,-20(fp)
  849da4:	10800317 	ldw	r2,12(r2)
  849da8:	10c00504 	addi	r3,r2,20
  849dac:	e0bffb17 	ldw	r2,-20(fp)
  849db0:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= sizeof(struct ip);
  849db4:	e0bffb17 	ldw	r2,-20(fp)
  849db8:	10800417 	ldw	r2,16(r2)
  849dbc:	10fffb04 	addi	r3,r2,-20
  849dc0:	e0bffb17 	ldw	r2,-20(fp)
  849dc4:	10c00415 	stw	r3,16(r2)
   p->net = net;     /* Put in the interface that this packet came in on */
  849dc8:	e0fffb17 	ldw	r3,-20(fp)
  849dcc:	e0800217 	ldw	r2,8(fp)
  849dd0:	18800615 	stw	r2,24(r3)

   d = (struct destun *)p->nb_prot;
  849dd4:	e0bffb17 	ldw	r2,-20(fp)
  849dd8:	10800317 	ldw	r2,12(r2)
  849ddc:	e0bffa15 	stw	r2,-24(fp)

   if (typecode & 0xFF00)               /* if the type was sent */
  849de0:	e0bfff17 	ldw	r2,-4(fp)
  849de4:	10bfc00c 	andi	r2,r2,65280
  849de8:	1005003a 	cmpeq	r2,r2,zero
  849dec:	1000061e 	bne	r2,zero,849e08 <icmp_destun+0x18c>
      d->dtype = (char)(typecode >>8);  /* then use it */
  849df0:	e0bfff17 	ldw	r2,-4(fp)
  849df4:	1004d23a 	srli	r2,r2,8
  849df8:	1007883a 	mov	r3,r2
  849dfc:	e0bffa17 	ldw	r2,-24(fp)
  849e00:	10c00005 	stb	r3,0(r2)
  849e04:	00000306 	br	849e14 <icmp_destun+0x198>
   else                                 /* else use default */
      d->dtype = DESTIN;
  849e08:	e0fffa17 	ldw	r3,-24(fp)
  849e0c:	008000c4 	movi	r2,3
  849e10:	18800005 	stb	r2,0(r3)
   d->dcode = (char)(typecode & 0xFF);
  849e14:	e0bfff17 	ldw	r2,-4(fp)
  849e18:	1007883a 	mov	r3,r2
  849e1c:	e0bffa17 	ldw	r2,-24(fp)
  849e20:	10c00045 	stb	r3,1(r2)
   d->dno1 = d->dno2 = 0;
  849e24:	e0bffa17 	ldw	r2,-24(fp)
  849e28:	1000018d 	sth	zero,6(r2)
  849e2c:	e0bffa17 	ldw	r2,-24(fp)
  849e30:	10c0018b 	ldhu	r3,6(r2)
  849e34:	e0bffa17 	ldw	r2,-24(fp)
  849e38:	10c0010d 	sth	r3,4(r2)
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
  849e3c:	e0bfff17 	ldw	r2,-4(fp)
  849e40:	10803fcc 	andi	r2,r2,255
  849e44:	10800118 	cmpnei	r2,r2,4
  849e48:	1000151e 	bne	r2,zero,849ea0 <icmp_destun+0x224>
      d->dno2 = htons(net->n_mtu - net->n_lnh);
  849e4c:	e0800217 	ldw	r2,8(fp)
  849e50:	10c00917 	ldw	r3,36(r2)
  849e54:	e0800217 	ldw	r2,8(fp)
  849e58:	10800817 	ldw	r2,32(r2)
  849e5c:	1885c83a 	sub	r2,r3,r2
  849e60:	1005d23a 	srai	r2,r2,8
  849e64:	10803fcc 	andi	r2,r2,255
  849e68:	1009883a 	mov	r4,r2
  849e6c:	e0800217 	ldw	r2,8(fp)
  849e70:	10c00917 	ldw	r3,36(r2)
  849e74:	e0800217 	ldw	r2,8(fp)
  849e78:	10800817 	ldw	r2,32(r2)
  849e7c:	1885c83a 	sub	r2,r3,r2
  849e80:	1004923a 	slli	r2,r2,8
  849e84:	1007883a 	mov	r3,r2
  849e88:	00bfc004 	movi	r2,-256
  849e8c:	1884703a 	and	r2,r3,r2
  849e90:	2084b03a 	or	r2,r4,r2
  849e94:	1007883a 	mov	r3,r2
  849e98:	e0bffa17 	ldw	r2,-24(fp)
  849e9c:	10c0018d 	sth	r3,6(r2)
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
  849ea0:	e0bffa17 	ldw	r2,-24(fp)
  849ea4:	11000204 	addi	r4,r2,8
  849ea8:	e0fffe17 	ldw	r3,-8(fp)
  849eac:	18800017 	ldw	r2,0(r3)
  849eb0:	20800015 	stw	r2,0(r4)
  849eb4:	18800117 	ldw	r2,4(r3)
  849eb8:	20800115 	stw	r2,4(r4)
  849ebc:	18800217 	ldw	r2,8(r3)
  849ec0:	20800215 	stw	r2,8(r4)
  849ec4:	18800317 	ldw	r2,12(r3)
  849ec8:	20800315 	stw	r2,12(r4)
  849ecc:	18800417 	ldw	r2,16(r3)
  849ed0:	20800415 	stw	r2,16(r4)
  849ed4:	18800517 	ldw	r2,20(r3)
  849ed8:	20800515 	stw	r2,20(r4)
  849edc:	18800617 	ldw	r2,24(r3)
  849ee0:	20800615 	stw	r2,24(r4)

   d->dchksum = 0;
  849ee4:	e0bffa17 	ldw	r2,-24(fp)
  849ee8:	1000008d 	sth	zero,2(r2)
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
  849eec:	e13ffa17 	ldw	r4,-24(fp)
  849ef0:	01400484 	movi	r5,18
  849ef4:	08256340 	call	825634 <cksum>
  849ef8:	0084303a 	nor	r2,zero,r2
  849efc:	1007883a 	mov	r3,r2
  849f00:	e0bffa17 	ldw	r2,-24(fp)
  849f04:	10c0008d 	sth	r3,2(r2)

   p->nb_plen =  sizeof(struct destun);
  849f08:	e0fffb17 	ldw	r3,-20(fp)
  849f0c:	00800904 	movi	r2,36
  849f10:	18800415 	stw	r2,16(r3)
   p->fhost = host;
  849f14:	e0fffb17 	ldw	r3,-20(fp)
  849f18:	e0bffc17 	ldw	r2,-16(fp)
  849f1c:	18800715 	stw	r2,28(r3)
   i = ip_write(ICMP_PROT, p);
  849f20:	01000044 	movi	r4,1
  849f24:	e17ffb17 	ldw	r5,-20(fp)
  849f28:	083dc8c0 	call	83dc8c <ip_write>
  849f2c:	e0bff815 	stw	r2,-32(fp)
   if (i < 0)
  849f30:	e0bff817 	ldw	r2,-32(fp)
  849f34:	1004403a 	cmpge	r2,r2,zero
  849f38:	1000111e 	bne	r2,zero,849f80 <icmp_destun+0x304>
   {
      icmp_mib.icmpOutErrors++;
  849f3c:	00803934 	movhi	r2,228
  849f40:	10aa0004 	addi	r2,r2,-22528
  849f44:	10800e17 	ldw	r2,56(r2)
  849f48:	10c00044 	addi	r3,r2,1
  849f4c:	00803934 	movhi	r2,228
  849f50:	10aa0004 	addi	r2,r2,-22528
  849f54:	10c00e15 	stw	r3,56(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
  849f58:	00802174 	movhi	r2,133
  849f5c:	10830104 	addi	r2,r2,3076
  849f60:	10800017 	ldw	r2,0(r2)
  849f64:	1080860c 	andi	r2,r2,536
  849f68:	1005003a 	cmpeq	r2,r2,zero
  849f6c:	1000121e 	bne	r2,zero,849fb8 <icmp_destun+0x33c>
         dprintf("ICMP: Can't send dest unreachable\n");
  849f70:	01002174 	movhi	r4,133
  849f74:	213afc04 	addi	r4,r4,-5136
  849f78:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG  */
      return;
  849f7c:	00000e06 	br	849fb8 <icmp_destun+0x33c>
   }
   icmp_mib.icmpOutMsgs++;
  849f80:	00803934 	movhi	r2,228
  849f84:	10aa0004 	addi	r2,r2,-22528
  849f88:	10800d17 	ldw	r2,52(r2)
  849f8c:	10c00044 	addi	r3,r2,1
  849f90:	00803934 	movhi	r2,228
  849f94:	10aa0004 	addi	r2,r2,-22528
  849f98:	10c00d15 	stw	r3,52(r2)
   icmp_mib.icmpOutDestUnreachs++;
  849f9c:	00803934 	movhi	r2,228
  849fa0:	10aa0004 	addi	r2,r2,-22528
  849fa4:	10800f17 	ldw	r2,60(r2)
  849fa8:	10c00044 	addi	r3,r2,1
  849fac:	00803934 	movhi	r2,228
  849fb0:	10aa0004 	addi	r2,r2,-22528
  849fb4:	10c00f15 	stw	r3,60(r2)
   return;
}
  849fb8:	e037883a 	mov	sp,fp
  849fbc:	dfc00117 	ldw	ra,4(sp)
  849fc0:	df000017 	ldw	fp,0(sp)
  849fc4:	dec00204 	addi	sp,sp,8
  849fc8:	f800283a 	ret

00849fcc <icmp_timex>:
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
  849fcc:	defff504 	addi	sp,sp,-44
  849fd0:	dfc00a15 	stw	ra,40(sp)
  849fd4:	df000915 	stw	fp,36(sp)
  849fd8:	df000904 	addi	fp,sp,36
  849fdc:	e13ffe15 	stw	r4,-8(fp)
  849fe0:	e17fff05 	stb	r5,-4(fp)
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
  849fe4:	00802174 	movhi	r2,133
  849fe8:	10830104 	addi	r2,r2,3076
  849fec:	10800017 	ldw	r2,0(r2)
  849ff0:	1080040c 	andi	r2,r2,16
  849ff4:	1005003a 	cmpeq	r2,r2,zero
  849ff8:	1000301e 	bne	r2,zero,84a0bc <icmp_timex+0xf0>
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
  849ffc:	e17fff07 	ldb	r5,-4(fp)
  84a000:	e0bffe17 	ldw	r2,-8(fp)
  84a004:	10800317 	ldw	r2,12(r2)
  84a008:	1004d23a 	srli	r2,r2,8
  84a00c:	10c03fcc 	andi	r3,r2,255
  84a010:	e0bffe17 	ldw	r2,-8(fp)
  84a014:	10800317 	ldw	r2,12(r2)
  84a018:	1004923a 	slli	r2,r2,8
  84a01c:	10bfc00c 	andi	r2,r2,65280
  84a020:	1884b03a 	or	r2,r3,r2
  84a024:	11803fcc 	andi	r6,r2,255
  84a028:	e0bffe17 	ldw	r2,-8(fp)
  84a02c:	10800317 	ldw	r2,12(r2)
  84a030:	1004d23a 	srli	r2,r2,8
  84a034:	10c03fcc 	andi	r3,r2,255
  84a038:	e0bffe17 	ldw	r2,-8(fp)
  84a03c:	10800317 	ldw	r2,12(r2)
  84a040:	1004923a 	slli	r2,r2,8
  84a044:	10bfc00c 	andi	r2,r2,65280
  84a048:	1884b03a 	or	r2,r3,r2
  84a04c:	1004d23a 	srli	r2,r2,8
  84a050:	11c03fcc 	andi	r7,r2,255
  84a054:	e0bffe17 	ldw	r2,-8(fp)
  84a058:	10800317 	ldw	r2,12(r2)
  84a05c:	1004d23a 	srli	r2,r2,8
  84a060:	10c03fcc 	andi	r3,r2,255
  84a064:	e0bffe17 	ldw	r2,-8(fp)
  84a068:	10800317 	ldw	r2,12(r2)
  84a06c:	1004923a 	slli	r2,r2,8
  84a070:	10bfc00c 	andi	r2,r2,65280
  84a074:	1884b03a 	or	r2,r3,r2
  84a078:	1004d43a 	srli	r2,r2,16
  84a07c:	11003fcc 	andi	r4,r2,255
  84a080:	e0bffe17 	ldw	r2,-8(fp)
  84a084:	10800317 	ldw	r2,12(r2)
  84a088:	1004d23a 	srli	r2,r2,8
  84a08c:	10c03fcc 	andi	r3,r2,255
  84a090:	e0bffe17 	ldw	r2,-8(fp)
  84a094:	10800317 	ldw	r2,12(r2)
  84a098:	1004923a 	slli	r2,r2,8
  84a09c:	10bfc00c 	andi	r2,r2,65280
  84a0a0:	1884b03a 	or	r2,r3,r2
  84a0a4:	1004d63a 	srli	r2,r2,24
  84a0a8:	d9000015 	stw	r4,0(sp)
  84a0ac:	d8800115 	stw	r2,4(sp)
  84a0b0:	01002174 	movhi	r4,133
  84a0b4:	213b0504 	addi	r4,r4,-5100
  84a0b8:	08076480 	call	807648 <printf>
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
  84a0bc:	e0bffe17 	ldw	r2,-8(fp)
  84a0c0:	10800003 	ldbu	r2,0(r2)
  84a0c4:	108003cc 	andi	r2,r2,15
  84a0c8:	1085883a 	add	r2,r2,r2
  84a0cc:	1085883a 	add	r2,r2,r2
  84a0d0:	10800404 	addi	r2,r2,16
  84a0d4:	e0bff905 	stb	r2,-28(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
  84a0d8:	01000084 	movi	r4,2
  84a0dc:	082aa680 	call	82aa68 <LOCK_NET_RESOURCE>
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
  84a0e0:	e0fff903 	ldbu	r3,-28(fp)
  84a0e4:	00802174 	movhi	r2,133
  84a0e8:	1082ff04 	addi	r2,r2,3068
  84a0ec:	10800017 	ldw	r2,0(r2)
  84a0f0:	1885883a 	add	r2,r3,r2
  84a0f4:	11000504 	addi	r4,r2,20
  84a0f8:	0829b840 	call	829b84 <pk_alloc>
  84a0fc:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
  84a100:	01000084 	movi	r4,2
  84a104:	082ab280 	call	82ab28 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
  84a108:	e0bffd17 	ldw	r2,-12(fp)
  84a10c:	1004c03a 	cmpne	r2,r2,zero
  84a110:	1000111e 	bne	r2,zero,84a158 <icmp_timex+0x18c>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
  84a114:	00802174 	movhi	r2,133
  84a118:	10830104 	addi	r2,r2,3076
  84a11c:	10800017 	ldw	r2,0(r2)
  84a120:	1080800c 	andi	r2,r2,512
  84a124:	1005003a 	cmpeq	r2,r2,zero
  84a128:	1000031e 	bne	r2,zero,84a138 <icmp_timex+0x16c>
         dprintf("icmp: can't alloc pkt\n");
  84a12c:	01002174 	movhi	r4,133
  84a130:	213af604 	addi	r4,r4,-5160
  84a134:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
  84a138:	00803934 	movhi	r2,228
  84a13c:	10aa0004 	addi	r2,r2,-22528
  84a140:	10800e17 	ldw	r2,56(r2)
  84a144:	10c00044 	addi	r3,r2,1
  84a148:	00803934 	movhi	r2,228
  84a14c:	10aa0004 	addi	r2,r2,-22528
  84a150:	10c00e15 	stw	r3,56(r2)
      return;
  84a154:	00006506 	br	84a2ec <icmp_timex+0x320>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
  84a158:	e0bffd17 	ldw	r2,-12(fp)
  84a15c:	10800317 	ldw	r2,12(r2)
  84a160:	e0bffb15 	stw	r2,-20(fp)
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
  84a164:	e0bffe17 	ldw	r2,-8(fp)
  84a168:	10c00417 	ldw	r3,16(r2)
  84a16c:	e0bffb17 	ldw	r2,-20(fp)
  84a170:	10c00315 	stw	r3,12(r2)
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;
  84a174:	e0bffe17 	ldw	r2,-8(fp)
  84a178:	10c00317 	ldw	r3,12(r2)
  84a17c:	e0bffb17 	ldw	r2,-20(fp)
  84a180:	10c00415 	stw	r3,16(r2)

   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);
  84a184:	e0bffd17 	ldw	r2,-12(fp)
  84a188:	10800317 	ldw	r2,12(r2)
  84a18c:	10c00504 	addi	r3,r2,20
  84a190:	e0bffd17 	ldw	r2,-12(fp)
  84a194:	10c00315 	stw	r3,12(r2)

   tx = (struct timex *) p->nb_prot;
  84a198:	e0bffd17 	ldw	r2,-12(fp)
  84a19c:	10800317 	ldw	r2,12(r2)
  84a1a0:	e0bffc15 	stw	r2,-16(fp)

   tx->ttype = TIMEX;
  84a1a4:	e0fffc17 	ldw	r3,-16(fp)
  84a1a8:	008002c4 	movi	r2,11
  84a1ac:	18800005 	stb	r2,0(r3)
   tx->tcode = code;
  84a1b0:	e0fffc17 	ldw	r3,-16(fp)
  84a1b4:	e0bfff03 	ldbu	r2,-4(fp)
  84a1b8:	18800045 	stb	r2,1(r3)
   tx->tno1 = tx->tno2 = 0;
  84a1bc:	e0bffc17 	ldw	r2,-16(fp)
  84a1c0:	1000018d 	sth	zero,6(r2)
  84a1c4:	e0bffc17 	ldw	r2,-16(fp)
  84a1c8:	10c0018b 	ldhu	r3,6(r2)
  84a1cc:	e0bffc17 	ldw	r2,-16(fp)
  84a1d0:	10c0010d 	sth	r3,4(r2)
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));
  84a1d4:	e0bffc17 	ldw	r2,-16(fp)
  84a1d8:	11000204 	addi	r4,r2,8
  84a1dc:	e0bffe17 	ldw	r2,-8(fp)
  84a1e0:	10800003 	ldbu	r2,0(r2)
  84a1e4:	10803fcc 	andi	r2,r2,255
  84a1e8:	108003cc 	andi	r2,r2,15
  84a1ec:	1085883a 	add	r2,r2,r2
  84a1f0:	1085883a 	add	r2,r2,r2
  84a1f4:	10800204 	addi	r2,r2,8
  84a1f8:	1007883a 	mov	r3,r2
  84a1fc:	e0bffe17 	ldw	r2,-8(fp)
  84a200:	100b883a 	mov	r5,r2
  84a204:	180d883a 	mov	r6,r3
  84a208:	08073380 	call	807338 <memcpy>

   tx->tchksum = 0;
  84a20c:	e0bffc17 	ldw	r2,-16(fp)
  84a210:	1000008d 	sth	zero,2(r2)
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
  84a214:	e0bff903 	ldbu	r2,-28(fp)
  84a218:	1004d07a 	srli	r2,r2,1
  84a21c:	11403fcc 	andi	r5,r2,255
  84a220:	e13ffc17 	ldw	r4,-16(fp)
  84a224:	08256340 	call	825634 <cksum>
  84a228:	0084303a 	nor	r2,zero,r2
  84a22c:	1007883a 	mov	r3,r2
  84a230:	e0bffc17 	ldw	r2,-16(fp)
  84a234:	10c0008d 	sth	r3,2(r2)

   p->nb_plen = icmp_pkt_len;
  84a238:	e0fff903 	ldbu	r3,-28(fp)
  84a23c:	e0bffd17 	ldw	r2,-12(fp)
  84a240:	10c00415 	stw	r3,16(r2)
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
  84a244:	e0bffb17 	ldw	r2,-20(fp)
  84a248:	10c00417 	ldw	r3,16(r2)
  84a24c:	e0bffd17 	ldw	r2,-12(fp)
  84a250:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
  84a254:	01000044 	movi	r4,1
  84a258:	e17ffd17 	ldw	r5,-12(fp)
  84a25c:	083dc8c0 	call	83dc8c <ip_write>
  84a260:	e0bffa15 	stw	r2,-24(fp)
   if (i < 0)
  84a264:	e0bffa17 	ldw	r2,-24(fp)
  84a268:	1004403a 	cmpge	r2,r2,zero
  84a26c:	1000111e 	bne	r2,zero,84a2b4 <icmp_timex+0x2e8>
   {
      icmp_mib.icmpOutErrors++;
  84a270:	00803934 	movhi	r2,228
  84a274:	10aa0004 	addi	r2,r2,-22528
  84a278:	10800e17 	ldw	r2,56(r2)
  84a27c:	10c00044 	addi	r3,r2,1
  84a280:	00803934 	movhi	r2,228
  84a284:	10aa0004 	addi	r2,r2,-22528
  84a288:	10c00e15 	stw	r3,56(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
  84a28c:	00802174 	movhi	r2,133
  84a290:	10830104 	addi	r2,r2,3076
  84a294:	10800017 	ldw	r2,0(r2)
  84a298:	1080860c 	andi	r2,r2,536
  84a29c:	1005003a 	cmpeq	r2,r2,zero
  84a2a0:	1000121e 	bne	r2,zero,84a2ec <icmp_timex+0x320>
         dprintf("ICMP: Can't send Time Exceeded\n");
  84a2a4:	01002174 	movhi	r4,133
  84a2a8:	213b1504 	addi	r4,r4,-5036
  84a2ac:	08077600 	call	807760 <puts>
#endif   /* NPDEBUG  */
      return;
  84a2b0:	00000e06 	br	84a2ec <icmp_timex+0x320>
   }
   icmp_mib.icmpOutMsgs++;
  84a2b4:	00803934 	movhi	r2,228
  84a2b8:	10aa0004 	addi	r2,r2,-22528
  84a2bc:	10800d17 	ldw	r2,52(r2)
  84a2c0:	10c00044 	addi	r3,r2,1
  84a2c4:	00803934 	movhi	r2,228
  84a2c8:	10aa0004 	addi	r2,r2,-22528
  84a2cc:	10c00d15 	stw	r3,52(r2)
   icmp_mib.icmpOutTimeExcds++;
  84a2d0:	00803934 	movhi	r2,228
  84a2d4:	10aa0004 	addi	r2,r2,-22528
  84a2d8:	10801017 	ldw	r2,64(r2)
  84a2dc:	10c00044 	addi	r3,r2,1
  84a2e0:	00803934 	movhi	r2,228
  84a2e4:	10aa0004 	addi	r2,r2,-22528
  84a2e8:	10c01015 	stw	r3,64(r2)
   return;
}
  84a2ec:	e037883a 	mov	sp,fp
  84a2f0:	dfc00117 	ldw	ra,4(sp)
  84a2f4:	df000017 	ldw	fp,0(sp)
  84a2f8:	dec00204 	addi	sp,sp,8
  84a2fc:	f800283a 	ret

0084a300 <icmp_du>:
 * RETURNS: void
 */

void  
icmp_du(PACKET p, struct destun * pdp)
{
  84a300:	defffc04 	addi	sp,sp,-16
  84a304:	dfc00315 	stw	ra,12(sp)
  84a308:	df000215 	stw	fp,8(sp)
  84a30c:	df000204 	addi	fp,sp,8
  84a310:	e13ffe15 	stw	r4,-8(fp)
  84a314:	e17fff15 	stw	r5,-4(fp)
   /* see if user app wants notification first */
   if (icmpdu_hook)
  84a318:	d0a0e117 	ldw	r2,-31868(gp)
  84a31c:	1005003a 	cmpeq	r2,r2,zero
  84a320:	1000041e 	bne	r2,zero,84a334 <icmp_du+0x34>
      icmpdu_hook(p, pdp);
  84a324:	d0a0e117 	ldw	r2,-31868(gp)
  84a328:	e13ffe17 	ldw	r4,-8(fp)
  84a32c:	e17fff17 	ldw	r5,-4(fp)
  84a330:	103ee83a 	callr	r2

#ifdef INCLUDE_TCP
   /* Tell the sockets layer so it can correct the problem. */
   so_icmpdu(p, pdp);   /* this call should free packet p */
  84a334:	e13ffe17 	ldw	r4,-8(fp)
  84a338:	e17fff17 	ldw	r5,-4(fp)
  84a33c:	082c9f80 	call	82c9f8 <so_icmpdu>
done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p); /* else just free packet */
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif   /* INCLUDE_TCP */
}
  84a340:	e037883a 	mov	sp,fp
  84a344:	dfc00117 	ldw	ra,4(sp)
  84a348:	df000017 	ldw	fp,0(sp)
  84a34c:	dec00204 	addi	sp,sp,8
  84a350:	f800283a 	ret

0084a354 <atexit>:
  84a354:	200b883a 	mov	r5,r4
  84a358:	000d883a 	mov	r6,zero
  84a35c:	0009883a 	mov	r4,zero
  84a360:	000f883a 	mov	r7,zero
  84a364:	084a6141 	jmpi	84a614 <__register_exitproc>

0084a368 <calloc>:
  84a368:	01802174 	movhi	r6,133
  84a36c:	31828104 	addi	r6,r6,2564
  84a370:	2007883a 	mov	r3,r4
  84a374:	31000017 	ldw	r4,0(r6)
  84a378:	280d883a 	mov	r6,r5
  84a37c:	180b883a 	mov	r5,r3
  84a380:	0812ca81 	jmpi	812ca8 <_calloc_r>

0084a384 <exit>:
  84a384:	defffe04 	addi	sp,sp,-8
  84a388:	000b883a 	mov	r5,zero
  84a38c:	dc000015 	stw	r16,0(sp)
  84a390:	dfc00115 	stw	ra,4(sp)
  84a394:	2021883a 	mov	r16,r4
  84a398:	084a74c0 	call	84a74c <__call_exitprocs>
  84a39c:	00802174 	movhi	r2,133
  84a3a0:	10828204 	addi	r2,r2,2568
  84a3a4:	11000017 	ldw	r4,0(r2)
  84a3a8:	20800f17 	ldw	r2,60(r4)
  84a3ac:	10000126 	beq	r2,zero,84a3b4 <exit+0x30>
  84a3b0:	103ee83a 	callr	r2
  84a3b4:	8009883a 	mov	r4,r16
  84a3b8:	084a93c0 	call	84a93c <_exit>

0084a3bc <getc>:
  84a3bc:	defffd04 	addi	sp,sp,-12
  84a3c0:	dc400115 	stw	r17,4(sp)
  84a3c4:	04402174 	movhi	r17,133
  84a3c8:	8c428104 	addi	r17,r17,2564
  84a3cc:	88c00017 	ldw	r3,0(r17)
  84a3d0:	dc000015 	stw	r16,0(sp)
  84a3d4:	dfc00215 	stw	ra,8(sp)
  84a3d8:	2021883a 	mov	r16,r4
  84a3dc:	18000326 	beq	r3,zero,84a3ec <getc+0x30>
  84a3e0:	18800e17 	ldw	r2,56(r3)
  84a3e4:	1809883a 	mov	r4,r3
  84a3e8:	10000e26 	beq	r2,zero,84a424 <getc+0x68>
  84a3ec:	80800117 	ldw	r2,4(r16)
  84a3f0:	800b883a 	mov	r5,r16
  84a3f4:	10bfffc4 	addi	r2,r2,-1
  84a3f8:	80800115 	stw	r2,4(r16)
  84a3fc:	10000f16 	blt	r2,zero,84a43c <getc+0x80>
  84a400:	80c00017 	ldw	r3,0(r16)
  84a404:	18800003 	ldbu	r2,0(r3)
  84a408:	18c00044 	addi	r3,r3,1
  84a40c:	80c00015 	stw	r3,0(r16)
  84a410:	dfc00217 	ldw	ra,8(sp)
  84a414:	dc400117 	ldw	r17,4(sp)
  84a418:	dc000017 	ldw	r16,0(sp)
  84a41c:	dec00304 	addi	sp,sp,12
  84a420:	f800283a 	ret
  84a424:	08057e40 	call	8057e4 <__sinit>
  84a428:	80800117 	ldw	r2,4(r16)
  84a42c:	800b883a 	mov	r5,r16
  84a430:	10bfffc4 	addi	r2,r2,-1
  84a434:	80800115 	stw	r2,4(r16)
  84a438:	103ff10e 	bge	r2,zero,84a400 <getc+0x44>
  84a43c:	89000017 	ldw	r4,0(r17)
  84a440:	dfc00217 	ldw	ra,8(sp)
  84a444:	dc400117 	ldw	r17,4(sp)
  84a448:	dc000017 	ldw	r16,0(sp)
  84a44c:	dec00304 	addi	sp,sp,12
  84a450:	084a50c1 	jmpi	84a50c <__srget_r>

0084a454 <_getc_r>:
  84a454:	defffd04 	addi	sp,sp,-12
  84a458:	dc400115 	stw	r17,4(sp)
  84a45c:	dc000015 	stw	r16,0(sp)
  84a460:	dfc00215 	stw	ra,8(sp)
  84a464:	2021883a 	mov	r16,r4
  84a468:	2823883a 	mov	r17,r5
  84a46c:	20000226 	beq	r4,zero,84a478 <_getc_r+0x24>
  84a470:	20800e17 	ldw	r2,56(r4)
  84a474:	10000f26 	beq	r2,zero,84a4b4 <_getc_r+0x60>
  84a478:	88800117 	ldw	r2,4(r17)
  84a47c:	8009883a 	mov	r4,r16
  84a480:	880b883a 	mov	r5,r17
  84a484:	10bfffc4 	addi	r2,r2,-1
  84a488:	88800115 	stw	r2,4(r17)
  84a48c:	10001016 	blt	r2,zero,84a4d0 <_getc_r+0x7c>
  84a490:	88c00017 	ldw	r3,0(r17)
  84a494:	18800003 	ldbu	r2,0(r3)
  84a498:	18c00044 	addi	r3,r3,1
  84a49c:	88c00015 	stw	r3,0(r17)
  84a4a0:	dfc00217 	ldw	ra,8(sp)
  84a4a4:	dc400117 	ldw	r17,4(sp)
  84a4a8:	dc000017 	ldw	r16,0(sp)
  84a4ac:	dec00304 	addi	sp,sp,12
  84a4b0:	f800283a 	ret
  84a4b4:	08057e40 	call	8057e4 <__sinit>
  84a4b8:	88800117 	ldw	r2,4(r17)
  84a4bc:	8009883a 	mov	r4,r16
  84a4c0:	880b883a 	mov	r5,r17
  84a4c4:	10bfffc4 	addi	r2,r2,-1
  84a4c8:	88800115 	stw	r2,4(r17)
  84a4cc:	103ff00e 	bge	r2,zero,84a490 <_getc_r+0x3c>
  84a4d0:	dfc00217 	ldw	ra,8(sp)
  84a4d4:	dc400117 	ldw	r17,4(sp)
  84a4d8:	dc000017 	ldw	r16,0(sp)
  84a4dc:	dec00304 	addi	sp,sp,12
  84a4e0:	084a50c1 	jmpi	84a50c <__srget_r>

0084a4e4 <free>:
  84a4e4:	00802174 	movhi	r2,133
  84a4e8:	10828104 	addi	r2,r2,2564
  84a4ec:	200b883a 	mov	r5,r4
  84a4f0:	11000017 	ldw	r4,0(r2)
  84a4f4:	0805f141 	jmpi	805f14 <_free_r>

0084a4f8 <malloc>:
  84a4f8:	00802174 	movhi	r2,133
  84a4fc:	10828104 	addi	r2,r2,2564
  84a500:	200b883a 	mov	r5,r4
  84a504:	11000017 	ldw	r4,0(r2)
  84a508:	0806bf81 	jmpi	806bf8 <_malloc_r>

0084a50c <__srget_r>:
  84a50c:	defffe04 	addi	sp,sp,-8
  84a510:	dc000015 	stw	r16,0(sp)
  84a514:	dfc00115 	stw	ra,4(sp)
  84a518:	2821883a 	mov	r16,r5
  84a51c:	08077740 	call	807774 <__srefill_r>
  84a520:	013fffc4 	movi	r4,-1
  84a524:	1000071e 	bne	r2,zero,84a544 <__srget_r+0x38>
  84a528:	80800117 	ldw	r2,4(r16)
  84a52c:	81000017 	ldw	r4,0(r16)
  84a530:	10bfffc4 	addi	r2,r2,-1
  84a534:	20c00044 	addi	r3,r4,1
  84a538:	80800115 	stw	r2,4(r16)
  84a53c:	21000003 	ldbu	r4,0(r4)
  84a540:	80c00015 	stw	r3,0(r16)
  84a544:	2005883a 	mov	r2,r4
  84a548:	dfc00117 	ldw	ra,4(sp)
  84a54c:	dc000017 	ldw	r16,0(sp)
  84a550:	dec00204 	addi	sp,sp,8
  84a554:	f800283a 	ret

0084a558 <__srget>:
  84a558:	00802174 	movhi	r2,133
  84a55c:	10828104 	addi	r2,r2,2564
  84a560:	200b883a 	mov	r5,r4
  84a564:	11000017 	ldw	r4,0(r2)
  84a568:	084a50c1 	jmpi	84a50c <__srget_r>

0084a56c <_vprintf_r>:
  84a56c:	2807883a 	mov	r3,r5
  84a570:	21400217 	ldw	r5,8(r4)
  84a574:	300f883a 	mov	r7,r6
  84a578:	180d883a 	mov	r6,r3
  84a57c:	08095841 	jmpi	809584 <___vfprintf_internal_r>

0084a580 <vprintf>:
  84a580:	00802174 	movhi	r2,133
  84a584:	10828104 	addi	r2,r2,2564
  84a588:	12000017 	ldw	r8,0(r2)
  84a58c:	280f883a 	mov	r7,r5
  84a590:	200d883a 	mov	r6,r4
  84a594:	41400217 	ldw	r5,8(r8)
  84a598:	4009883a 	mov	r4,r8
  84a59c:	08095841 	jmpi	809584 <___vfprintf_internal_r>

0084a5a0 <_vsprintf_r>:
  84a5a0:	deffe804 	addi	sp,sp,-96
  84a5a4:	00808204 	movi	r2,520
  84a5a8:	2811883a 	mov	r8,r5
  84a5ac:	02600034 	movhi	r9,32768
  84a5b0:	4a7fffc4 	addi	r9,r9,-1
  84a5b4:	d880030d 	sth	r2,12(sp)
  84a5b8:	d80b883a 	mov	r5,sp
  84a5bc:	00bfffc4 	movi	r2,-1
  84a5c0:	dfc01715 	stw	ra,92(sp)
  84a5c4:	da000415 	stw	r8,16(sp)
  84a5c8:	da400515 	stw	r9,20(sp)
  84a5cc:	d880038d 	sth	r2,14(sp)
  84a5d0:	da000015 	stw	r8,0(sp)
  84a5d4:	da400215 	stw	r9,8(sp)
  84a5d8:	08095840 	call	809584 <___vfprintf_internal_r>
  84a5dc:	d8c00017 	ldw	r3,0(sp)
  84a5e0:	18000005 	stb	zero,0(r3)
  84a5e4:	dfc01717 	ldw	ra,92(sp)
  84a5e8:	dec01804 	addi	sp,sp,96
  84a5ec:	f800283a 	ret

0084a5f0 <vsprintf>:
  84a5f0:	00802174 	movhi	r2,133
  84a5f4:	10828104 	addi	r2,r2,2564
  84a5f8:	2013883a 	mov	r9,r4
  84a5fc:	11000017 	ldw	r4,0(r2)
  84a600:	2805883a 	mov	r2,r5
  84a604:	300f883a 	mov	r7,r6
  84a608:	480b883a 	mov	r5,r9
  84a60c:	100d883a 	mov	r6,r2
  84a610:	084a5a01 	jmpi	84a5a0 <_vsprintf_r>

0084a614 <__register_exitproc>:
  84a614:	defffa04 	addi	sp,sp,-24
  84a618:	00802174 	movhi	r2,133
  84a61c:	10828204 	addi	r2,r2,2568
  84a620:	dc000015 	stw	r16,0(sp)
  84a624:	14000017 	ldw	r16,0(r2)
  84a628:	dd000415 	stw	r20,16(sp)
  84a62c:	2829883a 	mov	r20,r5
  84a630:	81405217 	ldw	r5,328(r16)
  84a634:	dcc00315 	stw	r19,12(sp)
  84a638:	dc800215 	stw	r18,8(sp)
  84a63c:	dc400115 	stw	r17,4(sp)
  84a640:	dfc00515 	stw	ra,20(sp)
  84a644:	2023883a 	mov	r17,r4
  84a648:	3027883a 	mov	r19,r6
  84a64c:	3825883a 	mov	r18,r7
  84a650:	28002526 	beq	r5,zero,84a6e8 <__register_exitproc+0xd4>
  84a654:	29000117 	ldw	r4,4(r5)
  84a658:	008007c4 	movi	r2,31
  84a65c:	11002716 	blt	r2,r4,84a6fc <__register_exitproc+0xe8>
  84a660:	8800101e 	bne	r17,zero,84a6a4 <__register_exitproc+0x90>
  84a664:	2105883a 	add	r2,r4,r4
  84a668:	1085883a 	add	r2,r2,r2
  84a66c:	20c00044 	addi	r3,r4,1
  84a670:	1145883a 	add	r2,r2,r5
  84a674:	0009883a 	mov	r4,zero
  84a678:	15000215 	stw	r20,8(r2)
  84a67c:	28c00115 	stw	r3,4(r5)
  84a680:	2005883a 	mov	r2,r4
  84a684:	dfc00517 	ldw	ra,20(sp)
  84a688:	dd000417 	ldw	r20,16(sp)
  84a68c:	dcc00317 	ldw	r19,12(sp)
  84a690:	dc800217 	ldw	r18,8(sp)
  84a694:	dc400117 	ldw	r17,4(sp)
  84a698:	dc000017 	ldw	r16,0(sp)
  84a69c:	dec00604 	addi	sp,sp,24
  84a6a0:	f800283a 	ret
  84a6a4:	29802204 	addi	r6,r5,136
  84a6a8:	00800044 	movi	r2,1
  84a6ac:	110e983a 	sll	r7,r2,r4
  84a6b0:	30c04017 	ldw	r3,256(r6)
  84a6b4:	2105883a 	add	r2,r4,r4
  84a6b8:	1085883a 	add	r2,r2,r2
  84a6bc:	1185883a 	add	r2,r2,r6
  84a6c0:	19c6b03a 	or	r3,r3,r7
  84a6c4:	14802015 	stw	r18,128(r2)
  84a6c8:	14c00015 	stw	r19,0(r2)
  84a6cc:	00800084 	movi	r2,2
  84a6d0:	30c04015 	stw	r3,256(r6)
  84a6d4:	88bfe31e 	bne	r17,r2,84a664 <__register_exitproc+0x50>
  84a6d8:	30804117 	ldw	r2,260(r6)
  84a6dc:	11c4b03a 	or	r2,r2,r7
  84a6e0:	30804115 	stw	r2,260(r6)
  84a6e4:	003fdf06 	br	84a664 <__register_exitproc+0x50>
  84a6e8:	00803934 	movhi	r2,228
  84a6ec:	10aa1a04 	addi	r2,r2,-22424
  84a6f0:	100b883a 	mov	r5,r2
  84a6f4:	80805215 	stw	r2,328(r16)
  84a6f8:	003fd606 	br	84a654 <__register_exitproc+0x40>
  84a6fc:	00802174 	movhi	r2,133
  84a700:	10a93e04 	addi	r2,r2,-23304
  84a704:	1000021e 	bne	r2,zero,84a710 <__register_exitproc+0xfc>
  84a708:	013fffc4 	movi	r4,-1
  84a70c:	003fdc06 	br	84a680 <__register_exitproc+0x6c>
  84a710:	01006404 	movi	r4,400
  84a714:	103ee83a 	callr	r2
  84a718:	1007883a 	mov	r3,r2
  84a71c:	103ffa26 	beq	r2,zero,84a708 <__register_exitproc+0xf4>
  84a720:	80805217 	ldw	r2,328(r16)
  84a724:	180b883a 	mov	r5,r3
  84a728:	18000115 	stw	zero,4(r3)
  84a72c:	18800015 	stw	r2,0(r3)
  84a730:	80c05215 	stw	r3,328(r16)
  84a734:	18006215 	stw	zero,392(r3)
  84a738:	18006315 	stw	zero,396(r3)
  84a73c:	0009883a 	mov	r4,zero
  84a740:	883fc826 	beq	r17,zero,84a664 <__register_exitproc+0x50>
  84a744:	003fd706 	br	84a6a4 <__register_exitproc+0x90>

0084a748 <register_fini>:
  84a748:	f800283a 	ret

0084a74c <__call_exitprocs>:
  84a74c:	00802174 	movhi	r2,133
  84a750:	10828204 	addi	r2,r2,2568
  84a754:	10800017 	ldw	r2,0(r2)
  84a758:	defff304 	addi	sp,sp,-52
  84a75c:	df000b15 	stw	fp,44(sp)
  84a760:	d8800115 	stw	r2,4(sp)
  84a764:	00802174 	movhi	r2,133
  84a768:	10a93904 	addi	r2,r2,-23324
  84a76c:	1005003a 	cmpeq	r2,r2,zero
  84a770:	d8800215 	stw	r2,8(sp)
  84a774:	d8800117 	ldw	r2,4(sp)
  84a778:	dd400815 	stw	r21,32(sp)
  84a77c:	dd000715 	stw	r20,28(sp)
  84a780:	10805204 	addi	r2,r2,328
  84a784:	dfc00c15 	stw	ra,48(sp)
  84a788:	ddc00a15 	stw	r23,40(sp)
  84a78c:	dd800915 	stw	r22,36(sp)
  84a790:	dcc00615 	stw	r19,24(sp)
  84a794:	dc800515 	stw	r18,20(sp)
  84a798:	dc400415 	stw	r17,16(sp)
  84a79c:	dc000315 	stw	r16,12(sp)
  84a7a0:	282b883a 	mov	r21,r5
  84a7a4:	2039883a 	mov	fp,r4
  84a7a8:	d8800015 	stw	r2,0(sp)
  84a7ac:	2829003a 	cmpeq	r20,r5,zero
  84a7b0:	d8800117 	ldw	r2,4(sp)
  84a7b4:	14405217 	ldw	r17,328(r2)
  84a7b8:	88001026 	beq	r17,zero,84a7fc <__call_exitprocs+0xb0>
  84a7bc:	ddc00017 	ldw	r23,0(sp)
  84a7c0:	88800117 	ldw	r2,4(r17)
  84a7c4:	8c802204 	addi	r18,r17,136
  84a7c8:	143fffc4 	addi	r16,r2,-1
  84a7cc:	80000916 	blt	r16,zero,84a7f4 <__call_exitprocs+0xa8>
  84a7d0:	05bfffc4 	movi	r22,-1
  84a7d4:	a000151e 	bne	r20,zero,84a82c <__call_exitprocs+0xe0>
  84a7d8:	8409883a 	add	r4,r16,r16
  84a7dc:	2105883a 	add	r2,r4,r4
  84a7e0:	1485883a 	add	r2,r2,r18
  84a7e4:	10c02017 	ldw	r3,128(r2)
  84a7e8:	a8c01126 	beq	r21,r3,84a830 <__call_exitprocs+0xe4>
  84a7ec:	843fffc4 	addi	r16,r16,-1
  84a7f0:	85bff81e 	bne	r16,r22,84a7d4 <__call_exitprocs+0x88>
  84a7f4:	d8800217 	ldw	r2,8(sp)
  84a7f8:	10003126 	beq	r2,zero,84a8c0 <__call_exitprocs+0x174>
  84a7fc:	dfc00c17 	ldw	ra,48(sp)
  84a800:	df000b17 	ldw	fp,44(sp)
  84a804:	ddc00a17 	ldw	r23,40(sp)
  84a808:	dd800917 	ldw	r22,36(sp)
  84a80c:	dd400817 	ldw	r21,32(sp)
  84a810:	dd000717 	ldw	r20,28(sp)
  84a814:	dcc00617 	ldw	r19,24(sp)
  84a818:	dc800517 	ldw	r18,20(sp)
  84a81c:	dc400417 	ldw	r17,16(sp)
  84a820:	dc000317 	ldw	r16,12(sp)
  84a824:	dec00d04 	addi	sp,sp,52
  84a828:	f800283a 	ret
  84a82c:	8409883a 	add	r4,r16,r16
  84a830:	88c00117 	ldw	r3,4(r17)
  84a834:	2105883a 	add	r2,r4,r4
  84a838:	1445883a 	add	r2,r2,r17
  84a83c:	18ffffc4 	addi	r3,r3,-1
  84a840:	11800217 	ldw	r6,8(r2)
  84a844:	1c001526 	beq	r3,r16,84a89c <__call_exitprocs+0x150>
  84a848:	10000215 	stw	zero,8(r2)
  84a84c:	303fe726 	beq	r6,zero,84a7ec <__call_exitprocs+0xa0>
  84a850:	00c00044 	movi	r3,1
  84a854:	1c06983a 	sll	r3,r3,r16
  84a858:	90804017 	ldw	r2,256(r18)
  84a85c:	8cc00117 	ldw	r19,4(r17)
  84a860:	1884703a 	and	r2,r3,r2
  84a864:	10001426 	beq	r2,zero,84a8b8 <__call_exitprocs+0x16c>
  84a868:	90804117 	ldw	r2,260(r18)
  84a86c:	1884703a 	and	r2,r3,r2
  84a870:	10000c1e 	bne	r2,zero,84a8a4 <__call_exitprocs+0x158>
  84a874:	2105883a 	add	r2,r4,r4
  84a878:	1485883a 	add	r2,r2,r18
  84a87c:	11400017 	ldw	r5,0(r2)
  84a880:	e009883a 	mov	r4,fp
  84a884:	303ee83a 	callr	r6
  84a888:	88800117 	ldw	r2,4(r17)
  84a88c:	98bfc81e 	bne	r19,r2,84a7b0 <__call_exitprocs+0x64>
  84a890:	b8800017 	ldw	r2,0(r23)
  84a894:	147fd526 	beq	r2,r17,84a7ec <__call_exitprocs+0xa0>
  84a898:	003fc506 	br	84a7b0 <__call_exitprocs+0x64>
  84a89c:	8c000115 	stw	r16,4(r17)
  84a8a0:	003fea06 	br	84a84c <__call_exitprocs+0x100>
  84a8a4:	2105883a 	add	r2,r4,r4
  84a8a8:	1485883a 	add	r2,r2,r18
  84a8ac:	11000017 	ldw	r4,0(r2)
  84a8b0:	303ee83a 	callr	r6
  84a8b4:	003ff406 	br	84a888 <__call_exitprocs+0x13c>
  84a8b8:	303ee83a 	callr	r6
  84a8bc:	003ff206 	br	84a888 <__call_exitprocs+0x13c>
  84a8c0:	88800117 	ldw	r2,4(r17)
  84a8c4:	1000081e 	bne	r2,zero,84a8e8 <__call_exitprocs+0x19c>
  84a8c8:	89000017 	ldw	r4,0(r17)
  84a8cc:	20000726 	beq	r4,zero,84a8ec <__call_exitprocs+0x1a0>
  84a8d0:	b9000015 	stw	r4,0(r23)
  84a8d4:	8809883a 	mov	r4,r17
  84a8d8:	084a4e40 	call	84a4e4 <free>
  84a8dc:	bc400017 	ldw	r17,0(r23)
  84a8e0:	883fb71e 	bne	r17,zero,84a7c0 <__call_exitprocs+0x74>
  84a8e4:	003fc506 	br	84a7fc <__call_exitprocs+0xb0>
  84a8e8:	89000017 	ldw	r4,0(r17)
  84a8ec:	882f883a 	mov	r23,r17
  84a8f0:	2023883a 	mov	r17,r4
  84a8f4:	883fb21e 	bne	r17,zero,84a7c0 <__call_exitprocs+0x74>
  84a8f8:	003fc006 	br	84a7fc <__call_exitprocs+0xb0>

0084a8fc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  84a8fc:	defffd04 	addi	sp,sp,-12
  84a900:	df000215 	stw	fp,8(sp)
  84a904:	df000204 	addi	fp,sp,8
  84a908:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  84a90c:	e0bfff17 	ldw	r2,-4(fp)
  84a910:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  84a914:	e0bffe17 	ldw	r2,-8(fp)
  84a918:	1005003a 	cmpeq	r2,r2,zero
  84a91c:	1000021e 	bne	r2,zero,84a928 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  84a920:	002af070 	cmpltui	zero,zero,43969
  84a924:	00000106 	br	84a92c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  84a928:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  84a92c:	e037883a 	mov	sp,fp
  84a930:	df000017 	ldw	fp,0(sp)
  84a934:	dec00104 	addi	sp,sp,4
  84a938:	f800283a 	ret

0084a93c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  84a93c:	defffd04 	addi	sp,sp,-12
  84a940:	dfc00215 	stw	ra,8(sp)
  84a944:	df000115 	stw	fp,4(sp)
  84a948:	df000104 	addi	fp,sp,4
  84a94c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  84a950:	00802174 	movhi	r2,133
  84a954:	1082eb44 	addi	r2,r2,2989
  84a958:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  84a95c:	e13fff17 	ldw	r4,-4(fp)
  84a960:	084a8fc0 	call	84a8fc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  84a964:	003fff06 	br	84a964 <_exit+0x28>
  84a968:	0084a748 	cmpgei	r2,zero,4765
